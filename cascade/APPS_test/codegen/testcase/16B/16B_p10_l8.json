[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\"",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\nassert solution('4\\n1 2\\n2 3\\n3 4') == '1 4 3'\n\n\"\"\"\n\nfrom collections import defaultdict",
        "num_ids_2": 67,
        "num_ids_4": 67
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\"\nfrom queue import Queue",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n\") == '5\\n1 8 6'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n4 5') == '5\\n1 5 6'\nassert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\nassert solution('12\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 7\\n5 8\\n6 9\\n7 10\\n7 11\\n8 12\\n11 13\\n10 14\\n14 15\\n13 16\\n12 17\\n17 18\\n16 19\\n18 20') == '5\\n1 20 14 6'\nassert solution('20\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 7\\n5 8\\n6 9\\n7 10\\n7 11\\n8 12\\n8 13\\n9 14\\n10 15\\n10 16\\n11 17\\n11 18\\n12 19\\n12 20\\n13 21\\n13 22\\n14 23\\n15 24\\n15 25\\n16 26\\n17 27\\n17 28\\n18 29\\n18 30\\n19 31\\n20 32\\n20 33') == '5\\n1 32 14 20 33 7'\n",
        "num_ids_2": 74,
        "num_ids_4": 312
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"5\"\nassert solution(\"6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n1 6\") == \"5\"\nassert solution(\"6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n5 1\") == \"6\"\n\n\"\"\"\n\nimport sys\nimport math\n\n\nclass Tree:\n    def __init__(self, n):\n        self.n = n\n        self.edges = list()\n\n    def add_edge(self, a, b):\n        self.edges.append((a, b))\n\n    def n_edges(self):\n        return len(self.edges)\n",
        "num_ids_2": 64,
        "num_ids_4": 98
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\"\n\nimport sys\nimport collections",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7') == '5\\n1 7 6'\nassert solution('6\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6') == '5\\n1 6 4'\nassert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7') == '5\\n1 7 6'\n",
        "num_ids_2": 82,
        "num_ids_4": 156
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n') == '5\\n1 8 6'\n\"\"\"",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\nassert solution(\"10 1 2 4 1 20 4 5\") == \"20 8\"\nassert solution(\"10 1 2 4 1 5 4 8 1 20 4 5\") == \"20 8\"\nassert solution(\"10 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\n\nn = int(input())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\n",
        "num_ids_2": 38,
        "num_ids_4": 78
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2\\n2\\n1\\n1\\n1\\n2\\n2\\n2\\n3\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n2\\n2\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n2\\n2\\n3\\n1\\n3\\n2\\n1\\n2\\n1\\n3\\n1\\n3\\n2\\n1\\n1\\n2\\n2\\n1\\n3\\n1\\n3\\n1\\n2\\n1\\n3\\n1\\n3\\n1\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n2\\n2\\n3\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n2\\n3\\n3\\n3\\n3\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n1\\n2\\n2\\n1\\n1\\n2\\n3\\n3\\n3\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n3\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n3\\n2\\n3\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n3\\n3\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n3\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n3\\n2\\n1\\n3\\n1\\n2\\n2\\n2\\n1\\n1\\n2\\n3\\n1\\n1\\n1\\n1\\n3\\n1\\n2\\n1\\n1\\n3\\n1\\n3\\n2\\n1\\n2\\n3\\n1\\n1\\n1\\n2\\n2\\n3\\n1\\n2\\n1\\n2\\n1\\n2\\n2\\n3\\n1\\n1\\n2\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n3\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n3\\n2\\n2\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n3\\n2\\n2\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n3\\n1\\n3\\n2\\n1\\n2\\n2\\n2\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n1\\n2\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n3\\n2\\n1\\n3\\n1\\n3\\n2\\n3\\n1\\n2\\n1\\n3\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n3\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n3\\n1\\n1\\n2\\n1\\n2\\n2\\n3\\n1\\n1\\n3\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n3\\n2\\n2\\n3\\n1\\n1\\n1\\n2\\n3\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n2\\n2\\n3\\n1\\n1\\n1\\n2\\n1\\n1\\n3\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n1\\n1\\n3\\n1\\n1\\n2\\n1\\n3\\n1\\n2\\n2\\n3\\n1\\n3\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n3\\n1\\n2\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n1\\n2\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n2\\n3\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n2\\n3\\n2\\n1\\n3\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n3\\n1\\n3\\n1",
        "num_ids_2": 1535,
        "num_ids_4": 1535
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2') == '2 1'\nassert solution('2\\n3') == '3 2'\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\n\"\"\"\n\nimport sys",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n4 1 2 3') == '1 2 4'\nassert solution('6\\n6 1 2 3 4 5 6') == '1 2 3 6 4 5'\n\"\"\"\n\n\nimport sys",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n2 8 1 2 4 1 20 4 5\") == '20 8'\n\nassert solution(\"4\\n1 4\") == '4 1'\nassert solution(\"6\\n1 2 3 6 2 1\") == '3 6'\nassert solution(\"8\\n1 2 2 3 4 5 6 7 8\") == '8 1'\nassert solution(\"10\\n2 8 1 2 4 1 20 4 5\") == '20 8'\n\"\"\"\n\nimport collections",
        "num_ids_2": 37,
        "num_ids_4": 78
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 8\\n') == '20 8'\nassert solution('10 8\\n') == '20 8'\n\n-----Question-----\n\nhttps://codeforces.com/problemset/problem/1411/B\n'''",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\"\"\"\nfrom typing import List\n\nn, m, k = [int(i) for i in stdin.readline().split()]\nmatrix = [[int(j) for j in stdin.readline().split()] for _ in range(n)]\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4'\n) == '24'\nassert solution(\n    '5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6'\n) == '56'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n",
        "num_ids_2": 47,
        "num_ids_4": 47
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\"\"\") == \"56\"\nassert solution(\"\"\"3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4\"\"\") == \"24\"\nassert solution(\"\"\"1 2 3 4\n5 2 2 2\n7 1 1 4\"\"\") == \"0\"\nassert solution(\"\"\"5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\"\"\") == \"56\"\n\n\"\"\"\nimport sys\n\nn, m, k = [int(i) for i in sys.stdin.readline().strip().split(' ')]\na = [list(map(int, sys.stdin.readline().strip().split(' '))) for _ in range(n)]\n\nimport itertools\nfrom fractions import Fraction",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5 5 4') == '56'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\nassert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\"\"\"",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\n\"\"\"\n\nimport numpy as np",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == '24'\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == '56'\n\n-----\n",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1 3 5 6 5 4 2\") == \"LRLRRR\"\nassert solution(\"5\\n1 2 4 3 2\") == \"4\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"LRLRRR\"\nassert solution(\"6\\n1 3 5 6 5 4 2\") == \"LRLRRR\"\nassert solution(\"4\\n1 2 4 3\") == \"LLRR\"\n",
        "num_ids_2": 39,
        "num_ids_4": 83
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 4 3 2') == 4\nassert solution('7\\n1 3 5 6 5 4 2') == 6\nassert solution('3\\n2 2 2') == 1\nassert solution('4\\n1 2 4 3') == 4\nassert solution('5\\n1 2 4 3 2') == 4\n",
        "num_ids_2": 32,
        "num_ids_4": 59
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str([1, 2, 4, 3, 2])) == 4\nassert solution(str([1, 2, 3, 4])) == 2\nassert solution(str([1, 2, 3])) == 3\nassert solution(str([2, 2, 2])) == 1\nassert solution(str([2, 4, 3, 2])) == 4\n",
        "num_ids_2": 36,
        "num_ids_4": 66
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2') == 'L'\nassert solution('1 2 4 3 2') == 'LRRR'\n'''\n",
        "num_ids_2": 18,
        "num_ids_4": 34
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 2 2') == '1\\nR'\nassert solution('5\\n1 2 4 3 2') == '4\\nLRRR'\nassert solution('7\\n1 3 5 6 5 4 2') == '6\\nLRLRRR'\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 65
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nLRRR', solution('5\\n1 2 4 3 2')\n\nassert solution('7\\n1 3 5 6 5 4 2') == '6\\nLRLRRR', solution('7\\n1 3 5 6 5 4 2')\n\nassert solution('3\\n2 2 2') == '1\\nR', solution('3\\n2 2 2')\n\nassert solution('4\\n1 2 4 3') == '4\\nLLRR', solution('4\\n1 2 4 3')\n\nassert solution('8\\n1 2 3 4 5 6 7 8') == '7\\nLRLRLRLRLR', solution('8\\n1 2 3 4 5 6 7 8')",
        "num_ids_2": 71,
        "num_ids_4": 128
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nR\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRR\"\n\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 44,
        "num_ids_4": 82
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 4 3 2\\n\") == '4\\nLRRR'\n\"\"\"\n\nimport sys\nfrom typing import List\n\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\n\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 47,
        "num_ids_4": 65
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([\"2\", \"8\"]) == \"3\"\n\"\"\"\n\nfrom typing import List\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nd = {}\n\nfor i in a:\n    d[i] = False\n\nm = int(input())\n\nfor i in range(m):\n    x, y = input().split()\n    x = int(x)\n    y = int(y)\n    if d[x]:\n        d[x] = False\n    if d[y]:\n        d[y] = False\n    d[x] = True\n    d[y] = True\n\nfor i in d.values():\n    if i:\n        print(-1)\n        break\nelse:\n    print(max(d.keys()) - min(d.keys()))",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"-1\"\nassert solution(\"1 4 4 7 4 1\") == \"3\"\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 42
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 2 5 2 5\") == 3\nassert solution(\"4\\n1 3 3 7\") == -1\nassert solution(\"6\\n1 4 4 7 4 1\") == 3\nassert solution(\"6\\n2 2 5 2 5\") == 3\nassert solution(\"6\\n2 8\") == 3\n",
        "num_ids_2": 30,
        "num_ids_4": 61
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 5 2 5\") == 3\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == \"3\"\nassert solution(\"5\\n2 2 5 2 5\") == \"3\"\nassert solution(\"4\\n1 3 3 7\") == \"-1\"\nassert solution(\"2\\n2 8\") == \"3\"\n\n\"\"\"\n\nfrom typing import Iterable",
        "num_ids_2": 35,
        "num_ids_4": 65
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8\\n4 9') == '3'\nassert solution('2 5 7 2 5\\n2 3 4 5 6') == '3'\nassert solution('5 4\\n1 3 3 7 4') == '3'\nassert solution('1 4\\n1 4') == '-1'\nassert solution('1 3\\n1 2') == '-1'\n",
        "num_ids_2": 36,
        "num_ids_4": 70
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 4 4 7 4 1\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"3\"\n",
        "num_ids_2": 29,
        "num_ids_4": 56
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 4 4 7 4 1\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"3\"\n\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 29,
        "num_ids_4": 56
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 2 4 1') == 3\nassert solution('6 6 6 8 6') == -1\nassert solution('1 2 1 1 1') == 2\nassert solution('1 3 2 3 1') == 3\nassert solution('4 7 5 2 4') == 4\n",
        "num_ids_2": 25,
        "num_ids_4": 49
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6\n1 4 4 7 4 1\n''') == '3'\nassert solution('''\n5\n2 2 5 2 5\n''') == '3'\nassert solution('''\n4\n1 3 3 7\n''') == '-1'\nassert solution('''\n2\n2 8\n''') == '3'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\nassert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 499999 1000000\") == \"YES\"\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'NO'\n\nprint(solution('2 2 4 4'))\nassert solution('2 2 4 4') == 'NO'\n\nprint(solution('3 1 7 5'))\nassert solution('3 1 7 5') == 'YES'\n\nprint(solution('5 2 10 5'))\nassert solution('5 2 10 5') == 'YES'\n\nprint(solution('0 0 1000000 1000000'))\nassert solution('0 0 1000000 1000000') == 'YES'\n\nprint(solution('0 0 499999 1000000'))\n",
        "num_ids_2": 23,
        "num_ids_4": 49
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 2 4 4\n1 1 3 5\n3 1 5 5''') == 'NO'\nassert solution('''3 3 7 5\n0 0 4 6\n0 0 7 4''') == 'YES'\nassert solution('''5 2 10 5\n3 1 7 6\n8 1 11 7''') == 'YES'\nassert solution('''0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000''') == 'YES'\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 7 6\\n8 1 11 7') == 'YES'\nassert solution('5 2 10 5\\n3 1 7 6') == 'YES'\nassert solution('0 0 1000000 1000000\\n0 0 499999 1000000') == 'YES'\nassert solution('5 2 10 5\\n0 0 10 10') == 'NO'\nassert solution('2 2 4 4\\n1 1 3 5') == 'NO'\n",
        "num_ids_2": 38,
        "num_ids_4": 80
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 2 4 4\n1 1 3 5\n3 1 5 5''') == 'NO'\nassert solution('''5 2 10 5\n3 1 7 6\n8 1 11 7''') == 'YES'\nassert solution('''0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000''') == 'YES'\nassert solution('''0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000''') == 'YES'\n\n'''\n'''\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\n\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 499999 1000000\") == \"YES\"\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\n\"\"\"\nimport sys\nfrom collections import defaultdict\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1098\") == 20\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1098) == 20\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\n\n\"\"\"\n\nfrom typing import Dict, List\n\nclass Solution:\n    def solution(self, n: str) -> int:\n        def f(x: int) -> int:\n            if x == 0: return 1\n            x += 1\n            while x % 10 == 0:\n                x //= 10\n            return x\n\n        count: Dict[int, int] = {}\n        for x in range(1, int(n) + 1):\n            for y in range(x):\n                count[x] = count.get(x, 0) + 1\n                count[f(x)] = count.get(f(x), 0) + 1\n\n        return sum(1 for x in count.values() if x >= 2)",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\nassert solution('100') == 101\n",
        "num_ids_2": 17,
        "num_ids_4": 25
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1098') == 20\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1098') == '20'\nassert solution('10') == '19'\n\"\"\"\nimport math",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1098) == 20\nassert solution(10) == 19\n\n\n\"\"\"\n\nimport collections\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\nassert solution('10099') == 20\nassert solution('100') == 19\nassert solution('101') == 20\n",
        "num_ids_2": 17,
        "num_ids_4": 34
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n5\\n0\\n2\\n4\\n') == '5\\n3\\n1\\n2\\n4'\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n5 0 0 2 4') == '5 3 1 2 4'\nassert solution('7\\n7 0 0 1 4 0 6') == '7 3 2 1 4 5 6'\nassert solution('7\\n7 4 0 3 0 5 1') == '7 4 2 3 6 5 1'\n\n-----\n",
        "num_ids_2": 46,
        "num_ids_4": 71
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n5 0 0 2 4''') == '5 3 1 2 4'\nassert solution('''7\n7 0 0 1 4 0 6''') == '7 3 2 1 4 5 6'\nassert solution('''7\n7 4 0 3 0 5 1''') == '7 4 2 3 6 5 1'\nassert solution('''5\n2 1 0 0 0''') == '2 1 4 5 3'\n\nprint('The code ran Correctly')\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n5 0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\nassert solution(\"7\\n7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n2 1 0 0 0\\n\") == \"2 1 4 5 3\"\n",
        "num_ids_2": 50,
        "num_ids_4": 104
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test1) == '5 1 2 3 4'\nassert solution(test2) == '7 1 4 2 3 6 5'\nassert solution(test3) == '7 4 2 3 6 5 1'\nassert solution(test4) == '7 4 2 3 6 5 1'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\n",
        "num_ids_2": 40,
        "num_ids_4": 84
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(textwrap.dedent(\"\"\"\\\n    5\n    5 0 0 2 4\n    \"\"\")) == \"5 3 1 2 4\"\n\nassert solution(textwrap.dedent(\"\"\"\\\n    7\n    7 0 0 1 4 0 6\n    \"\"\")) == \"7 3 2 1 4 5 6\"\n\nassert solution(textwrap.dedent(\"\"\"\\\n    7\n    7 4 0 3 0 5 1\n    \"\"\")) == \"7 4 2 3 6 5 1\"\n\nassert solution(textwrap.dedent(\"\"\"\\\n    5\n    2 1 0 0 0\n    \"\"\")) == \"2 1 4 5 3\"\n\nassert solution(textwrap.dedent(\"\"\"\\\n    5\n    1 0 0 0\n    \"\"\")) == \"1 4 5 2 3\"\n\n\"\"\"\n- 6 friends\n- each friend want to give a gift to a friend\n- each friend can give a gift to himself\n- if the friend don't know whom he want to give a gift to then he don't want to give a gift to anybody\n\n1 1 1 1\n2 1 1 2\n3 1 1 2\n4 1 2 1\n5 1 2 2\n6 1 2 3\n\n1 2 3 4 5 6\n\nn = 6\nf = [0, 2, 1, 1, 3, 4]\n0 0 0 0 2 2 1\n0 0 2 2 1 1 0\n0 2 1 1 1 0 2\n0 1 1 2 1 2 0\n0 1 2 2 1 0 3\n2 1 2 0 3 0 1\n\n0 0 0 2 2 1\n0 0 2 2 1 1\n0 2 1 1 1\n0 1 1 2 1\n0 1 2 2 1\n2 1 2 0 3\n0 1 2 2 1 0\n2 1 2 0 3 0\n\n[0, 2, 1, 1, 3, 4]\n[2, 1, 1, 3, 4, 1]\n[2, 3, 1, 4, 1, 1]\n[2, 3, 4, 1, 1, 1]\n[2, 4, 1, 1, 3, 1]\n[2, 4, 1, 3, 1, 1]",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n5 0 0 2 4''') == '5 3 1 2 4'\nassert solution('''7\n7 0 0 1 4 0 6''') == '7 3 2 1 4 5 6'\nassert solution('''7\n7 4 0 3 0 5 1''') == '7 4 2 3 6 5 1'\nassert solution('''5\n2 1 0 0 0''') == '2 1 4 5 3'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n1 1 2 1 2\") == \"NO\"\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 48,
        "num_ids_4": 84
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\n\n\"\"\"\n",
        "num_ids_2": 48,
        "num_ids_4": 66
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'NO'\nassert solution('1 2 2 3') == 'YES'\nassert solution('3 2 1 2 3') == 'YES'\nassert solution('2 1 1 2 1') == 'NO'\nassert solution('3 2 1 2 3') == 'YES'\n",
        "num_ids_2": 23,
        "num_ids_4": 51
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"YES\\n2 1 1 2 1\"\n",
        "num_ids_2": 41,
        "num_ids_4": 66
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"NO\"\n",
        "num_ids_2": 48,
        "num_ids_4": 66
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n",
        "num_ids_2": 48,
        "num_ids_4": 66
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n1 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n1 2 1 2 1\") == \"NO\"\n",
        "num_ids_2": 48,
        "num_ids_4": 84
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'NO'\nassert solution('5 2\\n1 2 1 2 1') == 'YES\\n1 1 2 2 1'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 2'\nassert solution('5 2\\n3 2 2 3 2') == 'NO'\n",
        "num_ids_2": 35,
        "num_ids_4": 78
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 5 2\\n11010100101') == '1'\nassert solution('11 5 1\\n11010100101') == '3'\n\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n\"\"\"\n\nn, x, y = [int(x) for x in stdin.split(\" \")]\n\ncount = 0\n\nwhile x > 0 and y > 0:\n    if n > 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = (n + 1) / 2\n    else:\n        n = 0\n\n    if n % 10 == 1:\n        n = (n * 10) + 9\n    elif n % 10 == 0:\n        n = n / 10\n        count += 1\n    else:\n        n = (n * 10) + 1\n        count += 1\n\n    x -= 1\n    y -= 1\n\nprint(count)\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(11, 5, 2) == 1\nassert solution(11, 5, 1) == 3\n\"\"\"\n\nfrom typing import List\n\nfrom helpers import print_assert\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''11 5 2\n11010100101''') == '1'\nassert solution('''11 5 1\n11010100101''') == '3'\nassert solution('''11 6 2\n110101001010''') == '1'\nassert solution('''11 6 1\n110101001010''') == '4'\n\nassert solution('''2 2 1\n01010\n''') == '2'\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 5 2\") == \"1\"\n\"\"\"\n\n\nfrom sys import stdin",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1 2\") == \"YES\"\nassert solution(\"3\\n1 2 2 1\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\nassert solution(\"3\\n1 3 2\") == \"NO\"\nassert solution(\"3\\n1 3 3\") == \"YES\"\n",
        "num_ids_2": 31,
        "num_ids_4": 61
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"NO\\nNO\\nNO\\nNO\\nNO\"\nassert solution(\"5\\n2\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nYES\\nNO\\nNO\"\nassert solution(\"5\\n2\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"NO\\nNO\\nNO\\nNO\\nNO\"\n\"\"\"\n\nimport math",
        "num_ids_2": 148,
        "num_ids_4": 296
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"NO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"NO\"\n",
        "num_ids_2": 90,
        "num_ids_4": 171
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\n",
        "num_ids_2": 56,
        "num_ids_4": 112
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\"\nassert solution(\"3\\n1 1 2\\n4\\n1 2 2 1\") == \"NO\"\n\"\"\"",
        "num_ids_2": 50,
        "num_ids_4": 99
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\n\n\"\"\"\n\nimport math\nfrom itertools import combinations\nimport sys\n",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\n",
        "num_ids_2": 56,
        "num_ids_4": 112
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"4\\n1 2 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"NO\\nNO\\nNO\\nNO\"\nassert solution(\"4\\n1 2 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"NO\\nNO\\nNO\\nNO\"\nassert solution(\"4\\n1 2 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"NO\\nNO\\nNO\\nNO\"\n\"\"\"\n",
        "num_ids_2": 121,
        "num_ids_4": 225
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == 'YES\\nYES\\nNO\\nYES\\nNO'\nassert solution(\"5\\n2\\n1 1 2\\n4\\n1 2 2 1\\n3\\n1 1 2\\n4\\n1 2 2 1\\n\") == 'YES\\nYES\\nNO\\nYES\\nNO'\nassert solution(\"5\\n3\\n1 2 1\\n4\\n1 2 2 1\\n3\\n1 2 2 1\\n\") == 'NO\\nNO\\nNO\\nNO\\nNO'\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n\") == 'YES\\nNO'\n\"\"\"",
        "num_ids_2": 129,
        "num_ids_4": 209
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == 'YES\\nYES\\nNO\\nYES\\nNO'\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == 'NO\\nNO\\nYES\\nYES\\nNO'\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == 'YES\\nNO\\nNO'\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == 'YES\\nNO\\nYES'\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == 'YES\\nNO\\nNO'\n",
        "num_ids_2": 126,
        "num_ids_4": 222
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 5 3 4 7\") == \"1 4 4 3 3 3 3\"\nassert solution(\"5 5 2 9 8 3\") == \"5 5 2 9 8 3\"\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"22\") == \"22\"\n\"\"\"\n\n\"\"\"\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435\n\u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u0435\u0432\u044f\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0435\u0439 \u0438 \u0442\u0440\u0438 \u043a\u043b\u0435\u0442\u043a\u0438. \u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043b\u0435\u0442\u043a\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0442\u0430\u043b\u0435\u0439. \u0414\u0430\u043d\u044b \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u0435\u0442\u0430\u043b\u0435\u0439 \u0432 \u043a\u043b\u0435\u0442\u043a\u0430\u0445, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435, \u043a\u0430\u043a\u043e\u0435 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0442\u0430\u043b\u0435\u0439 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c \u0432 \u043a\u043b\u0435\u0442\u043a\u0438, \u0441\u0443\u043c\u043c\u0430 \u0440\u0430\u0432\u043d\u0430\u044f \u043e\u0434\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u0435\u0442\u0430\u043b\u0435\u0439 \u0432 \u043e\u0434\u043d\u043e\u0439 \u043a\u043b\u0435\u0442\u043a\u0435 \u0432\u0441\u0435 \u0434\u0435\u0442\u0430\u043b\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u044e\u0442\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u0443\u044e \u043a\u043b\u0435\u0442\u043a\u0443, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0434\u0435\u0442\u0430\u043b\u0435\u0439.\n\n-----Input-----\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e \u043a\u043b\u0435\u0442\u043e\u043a $n \\in [0; 10]$ (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0435\u0442\u043e\u043a \u0440\u0430\u0432\u043d\u043e\u0435 0 \u0438\u043b\u0438 10), \u0438 \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043b\u0435\u0442\u043a\u0435 \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u044b\u0445 \u0432 \u044d\u0442\u043e\u043c \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435 \u0447\u0438\u0441\u0435\u043b:\n\n$a_1, \\, a_2, \\, a_3$ ($1 \\le a_1, \\, a_2, \\, a_3 \\le 9$).\n\n-----Output-----\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0434\u0435\u0442\u0430\u043b\u0435\u0439.\n\n-----Examples-----\nInput\n5\n1 1 1 1\n1 1 1 1\nOutput\n2\nInput\n1\n9\nOutput\n1\n\"\"\"\n\na, b, c = map(int, input().split())\nprint((a+b+c)//3)\n",
        "num_ids_2": 24,
        "num_ids_4": 34
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '4\\n1337'\n) == '1553'\nassert solution(\n    '5\\n11111'\n) == '99999'\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"33\") == \"33\"\nprint(\"all tests passed\")\n",
        "num_ids_2": 24,
        "num_ids_4": 34
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1337') == '1553'\nprint(solution('4\\n1337'))",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1337') == '1557'\nassert solution('5\\n11111') == '99999'\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1337\") == \"1553\"\nassert solution(\"5\\n11111\") == \"99999\"\nassert solution(\"2\\n33\") == \"33\"\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 30,
        "num_ids_4": 43
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"4\n1337\n1 2 5 4 6 6 3 1 9\n\"\"\") == \"1557\"\nassert solution(\"\"\"5\n11111\n9 8 7 6 5 4 3 2 1\n\"\"\") == \"99999\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1337\") == \"1557\"\nassert solution(\"5\\n11111\") == \"99999\"\n\"\"\"\nimport sys\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46') == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'\n\"\"\"\n\nt = int(input())\nfor _ in range(t):\n    a,b,c = map(int, input().split())\n    c1 = c//a\n    c2 = c//b\n    a1 = a//b\n    a2 = a//c\n    b1 = b//c\n    b2 = b//a\n    if a1<=c2<=a2 or a1<=b2<=a2 or c1<=b2<=c2:\n        print(2)\n        print(c,a,b)\n    elif b1<=a2<=b2 or b1<=c2<=b2 or a1<=c2<=b2:\n        print(1)\n        print(c,b,a)\n    else:\n        print(0)\n        print(a,b,c)",
        "num_ids_2": 110,
        "num_ids_4": 110
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('123 321 456') == '1\\n1 1 3'\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\"\nprint(\"Passed\")\n\n----------------------------------------",
        "num_ids_2": 110,
        "num_ids_4": 110
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"1 1 3\"\nassert solution(\"123 321 456\") == \"102\"\nassert solution(\"5 10 15\") == \"4\"\nassert solution(\"15 18 21\") == \"4 8 16\"\nassert solution(\"100 100 101\") == \"7\"\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"\"\"1\n1 1 3\n102\n114 228 456\n4\n4 8 16\n6\n18 18 18\n1\n100 100 100\n7\n1 22 22\n2\n1 19 38\n8\n6 24 48\"\"\"\n\nprint(solution(\"8\\n1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\"))\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"123 321 456\"\n) == \"1 1 3\"\nassert solution(\n    \"15 18 21\"\n) == \"4\"\nassert solution(\n    \"5 10 15\"\n) == \"1 1 3\"\nassert solution(\n    \"1 2 3\"\n) == \"1 1 3\"\nassert solution(\n    \"1 2 3\"\n) == \"1 1 3\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"2\\n1 1 3\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3\\n123 321 456') == '1'\n\n\"\"\"\n\nfrom typing import Iterator\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('123 321 456') == '1 1 3'\nassert solution('5 10 15') == '3'\nassert solution('15 18 21') == '4'\nassert solution('100 100 101') == '1'\n",
        "num_ids_2": 27,
        "num_ids_4": 51
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n12 3 4\\n5 10 15\\n') == '1\\n1 1 3\\n'\nassert solution('1 2 3\\n12 3 4\\n5 10 15\\n1 20 30') == '2\\n2 8 16\\n'\n",
        "num_ids_2": 39,
        "num_ids_4": 73
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\na.pop(0)\nprint(sum(a) - a[0])\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 3 3 7\n''') == '2'\nassert solution('''\n2\n1 100000\n''') == '0'\nassert solution('''\n2\n1 100000\n''') == '0'\nassert solution('''\n2\n1 3\n''') == '1'\nassert solution('''\n1\n1\n''') == '0'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3 3 7') == 2\n\nassert solution('2\\n1 100000') == 0\n\nassert solution('4\\n1 3 3 7') == 2\n\nassert solution('2\\n1 100000') == 0\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 3 7\") == '2'\nassert solution(\"2\\n1 100000\") == '0'\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3 3 7\") == 2\nassert solution(\"2\\n1 100000\") == 0\n\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\"\"\"",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\n\"\"\"\n",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '-1'\nassert solution('5 2\\n1 3 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'",
        "num_ids_2": 31,
        "num_ids_4": 83
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\"\"\"\n",
        "num_ids_2": 46,
        "num_ids_4": 81
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"5 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\n\"\"\"",
        "num_ids_2": 46,
        "num_ids_4": 81
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\n\"\"\"",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 1\\n1 5 1\\n\") == \"1 2 3 0 3\"\nassert solution(\"1 3 1\\n1 2 1\\n\") == \"1 2 3 0 3\"\nassert solution(\"1 3 1\\n1 2 1\\n\") == \"1 2 3 0 3\"\n",
        "num_ids_2": 46,
        "num_ids_4": 69
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n4 2\") == \"2 1 0 1\"\nassert solution(\"2 1\\n5 5\") == \"2 1 0 1 1\"\nassert solution(\"2 2\\n4 7 2\") == \"2 2 0 4 3 4\"\nassert solution(\"2 2\\n4 9 3\") == \"2 2 0 4 3 4\"\nassert solution(\"4 4\\n1 9 3\\n1 10 1\\n1 10 3\\n1 11 1\\n1 11 3\") == \"4 4 0 1 0 3 4 4 0 1 0 3 4 0 4 4\"\n",
        "num_ids_2": 37,
        "num_ids_4": 79
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"1 2 2 1 1 0\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n",
        "num_ids_2": 51,
        "num_ids_4": 86
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'\n\n\"\"\"\nimport sys\nfrom collections import deque\n\nstdin = sys.stdin.read().split('\\n')\n",
        "num_ids_2": 47,
        "num_ids_4": 82
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n\n\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 35
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"",
        "num_ids_2": 24,
        "num_ids_4": 35
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n\"\"\"\nfrom collections import Counter",
        "num_ids_2": 24,
        "num_ids_4": 35
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 34
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"120 51840\") == 7\nassert solution(\"42 42\") == 0\nassert solution(\"48 72\") == -1\nassert solution(\"1 10^8\") == -1\nassert solution(\"1 9 2 9\") == -1\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n\"\"\"\n\n\nfrom collections import Counter",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 35
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-\"\n",
        "num_ids_2": 24,
        "num_ids_4": 34
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '0'\nassert solution('1 1') == '-1'\nassert solution('2 4') == '1'\nassert solution('5 10') == '2'\nassert solution('5 20') == '2'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\", 3) == \"ababababa\"\nassert solution(\"cat\", 2) == \"catcat\"\n\nprint(solution(\"cat\", 2))",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aba', 3) == 'ababababa'\nassert solution('cat', 2) == 'catcat'\nprint('all tests passed...')\n\n\n------Input-----\n\n3 4\nabc\n\nOutput\nabca\n\n------Input-----\n\n5 1\nabababa\n\nOutput\nabababa\n\n------Input-----\n\n5 3\nababa\n\nOutput\nababa\n\"\"\"\n\nn, k = list(map(int, input().split()))\nt = input()",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"abababa\"\nassert solution(\"cat\") == \"catcat\"\nassert solution(\"a\") == \"aa\"\nassert solution(\"abc\") == \"abcabc\"\n\nfrom itertools import permutations\n",
        "num_ids_2": 23,
        "num_ids_4": 44
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\", 3) == \"ababababa\", 'Wrong answer'\nprint('Test passed')\n\nInput\n5 4\nababab\n\nOutput\nabababababababababab\n\nassert solution(\"ababab\", 5) == \"abababababababababab\", 'Wrong answer'\nprint('Test passed')\n\nInput\n1 1\na\n\nOutput\na\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\", 3) == \"aba\"\nassert solution(\"abababa\", 4) == \"abababa\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba', 3) == 'ababababa'\n\n------Problem------\nGiven two strings s and t of lengths m and n respectively,\ncheck if they are equal except for an additional character in one of them.\n\"\"\"\n\nimport os\nimport sys\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aba') == 'ababa'\nassert solution('cat') == 'catcat'\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'abab'\nassert solution('aba') == 'abababa'\nassert solution('ababa') == 'abababa'\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aba\", 3) == \"abababa\"\nassert solution(\"cat\", 2) == \"catcat\"\nassert solution(\"abcd\", 2) == \"abcdabcd\"\n\"\"\"\n\nn, k = [int(i) for i in input().split(' ')]\nt = input()\n\nl = 0\nr = n - 1\nfor _ in range(k):\n    if r < l:\n        break\n    if t[l]!= t[r]:\n        l += 1\n        r -= 1\n    else:\n        l += 1\n        r -= 1",
        "num_ids_2": 27,
        "num_ids_4": 43
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"abababa\"\nassert solution(\"cat\") == \"catcat\"\nassert solution(\"catcat\") == \"catcatcatcat\"\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 23,
        "num_ids_4": 37
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 1 2 2') == '3\\n4 1 5'\n\"\"\"\nimport sys",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5 1 2 2') == '3'\nassert solution('8 3 5 2') == '2'\nassert solution('8 3 5 2 9') == '1'\nassert solution('2 1 2 4 3') == '0'\nassert solution('2 1 2 4 1 5') == '1'\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n2 5 1 2 2\n''') == '3\\n4 1 5'\nassert solution('''4\n8 3 5 2\n''') == '2\\n1 4'\nassert solution('''5\n2 1 2 4 3\n''') == '0'\nassert solution('''5\n2 1 2 4 3\n''') == '0'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 5 1 2 2') == '3\\n4 1 5'\nassert solution('4\\n8 3 5 2') == '2\\n1 4'\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\n\n\"\"\"\n\n\nimport sys",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 1 2 4 3') == '0'\nassert solution('4\\n8 3 5 2') == '2'\nassert solution('5\\n2 1 2 4 3') == '0'\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 50
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 1 2 4 3\") == \"0\"\nassert solution(\"5\\n2 1 2 4 3\") == \"2\\n1 4\"\nassert solution(\"5\\n8 3 5 2\") == \"2\\n1 4\"\n\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 58
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 2 2\") == \"3\\n4 1 5\"\nassert solution(\"4\\n8 3 5 2\") == \"2\\n1 4\"\nassert solution(\"5\\n2 1 2 4 3\") == \"0\"\n\nprint('Success')\n\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 41,
        "num_ids_4": 58
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == k\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3 5 2\") == \"0\"\nassert solution(\"2 1 2 4 3\") == \"0\"\nassert solution(\"2 1 2 4 5\") == \"1 4\"\nassert solution
        "num_ids_2": 27,
        "num_ids_4": 1280
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == 233\n",
        "num_ids_2": 18,
        "num_ids_4": 30
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"aaaaa\") == \"15\"\nassert solution(\"ajihiushda\") == \"233\"\n",
        "num_ids_2": 22,
        "num_ids_4": 36
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 5\nasdf''') == '4'\nassert solution('''5 6\naaaaa''') == '15'\nassert solution('''5 7\naaaaa''') == '-1'\nassert solution('''10 100\najihiushda''') == '233'\n\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 asdf\") == \"4\"\nassert solution(\"5 6 aaaa\") == \"15\"\nassert solution(\"5 7 aaaaa\") == \"-1\"\nassert solution(\"10 100 ajihiushda\") == \"233\"\n",
        "num_ids_2": 26,
        "num_ids_4": 56
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\n\"\"\"\n\nn, k = map(int, input().split())\ns = input()",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5') == '4'\nassert solution('5 6') == '15'\nassert solution('5 7') == '-1'\nassert solution('10 100') == '233'\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 asdf\") == 4\nassert solution(\"5 6 aaaaa\") == 15\nassert solution(\"5 7 aaaaa\") == -1\n\n-----\n",
        "num_ids_2": 22,
        "num_ids_4": 34
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\najihiushda\") == \"4\"\nassert solution(\"5 6\\naaaaa\") == \"15\"\nassert solution(\"5 7\\naaaaa\") == \"-1\"\nassert solution(\"10 100\\najihiushda\") == \"233\"\n\n\n\"\"\"\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom typing import List\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 7\", \"aaaaa\") == -1\n\"\"\"\n\nimport sys",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == 233\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 18,
        "num_ids_4": 30
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n') == 'YES\\n2 1\\n2 3\\n3 4\\n'\nassert solution('4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\\n') == 'YES\\n1 2\\n1 4\\n2 3\\n3 4\\n'\nassert solution('4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\\n') == 'NO\\n'\n\n\n\n\n\n-----\n\u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0447\u0438\u0441\u043b\u0430 n, m \u0438 D \u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e i \u043e\u0442 1 \u0434\u043e m \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0432\u0435\u0440\u0448\u0438\u043d \u0432 \u0438\u0445 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0433\u0440\u0430\u0444, \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0435\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c D+1 \u0440\u0430\u0437 \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435:\n\n\n-----\n\u0412 \u043e\u0442\u0432\u0435\u0442\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u0435\u0440\u0432\u043e\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f, \u0435\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0433\u0440\u0430\u0444 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0438 -1 \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0442\u0430\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f n, m, D \u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0432\u0432\u043e\u0434: 3 4 1\n\u0432 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0441\u0442\u043e\u0440\u043e\u043d\u0435 1, \u0432\u0441\u0435\u0445 \u0432\u0435\u0440\u0448\u0438\u043d \u0438 \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u0445 \u0438 \u0438\u0445 \u0434\u0435\u043b\u044c\u0442\u0430\u0445, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0442 \u0440\u0451\u0431\u0440\u0430 \u043f\u043e\u0434\u0433\u0440\u0430\u0444\u0430.\n\n\u0412\u044b\u0432\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0449\u0438\u0439\u0441\u044f \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0432\u044b\u0432\u043e\u0434\u0435:\n2 2\n\u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0433\u0440\u0430\u0444 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0438 \u0435\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440 D = 1.\n\n\n-----\n\u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0447\u0438\u0441\u043b\u0430 n, m \u0438 D \u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u0432\u0435\u0440\u0448\u0438\u043d \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0435\u0435 \u0438\u043d\u0434\u0435\u043a\u0441, \u043e\u043d\u0430 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e \u043f\u043e\u0434\u0433\u0440\u0430\u0444 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0435\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c D+1 \u0440\u0430\u0437 \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435:\n\n\n-----\n\u0412 \u043e\u0442\u0432\u0435\u0442\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2014 \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u0435\u0440\u0432\u043e\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0442\u0430\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f n, m, D \u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0432\u0432\u043e\u0434: 3 4 1\n\u0432 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0441\u0442\u043e\u0440\u043e\u043d\u0435 1, \u0432\u0441\u0435\u0445 \u0432\u0435\u0440\u0448\u0438\u043d \u0438 \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u0445 \u0438 \u0438\u0445 \u0434\u0435\u043b\u044c\u0442\u0430\u0445, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0442 \u0440\u0451\u0431\u0440\u0430 \u043f\u043e\u0434\u0433\u0440\u0430\u0444\u0430.\n\n\u0412\u044b\u0432\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\ufffd",
        "num_ids_2": 96,
        "num_ids_4": 128
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\\n\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\"\"\"\n\nclass DisjointSet:\n    def __init__(self, n):\n        self.n = n\n        self.rank = [0]*n\n        self.parent = list(range(n))\n\n    def union(self, u, v):\n        ru, rv = self.find(u), self.find(v)\n        if ru == rv:\n            return False\n\n        if self.rank[ru] < self.rank[rv]:\n            self.parent[ru] = rv\n        elif self.rank[ru] > self.rank[rv]:\n            self.parent[rv] = ru\n        else:\n            self.parent[rv] = ru\n            self.rank[ru] += 1\n\n        return True\n\n    def find(self, u):\n        if u!= self.parent[u]:\n            self.parent[u] = self.find(self.parent[u])\n\n        return self.parent[u]\n\n    def get(self):\n        return self.parent\n\n\nclass Solution:\n    def main(self, stdin):\n        n, m, d = [int(x) for x in stdin.readline().split()]\n        edges = []\n        for i in range(m):\n            edges.append([int(x) for x in stdin.readline().split()])\n\n        ds = DisjointSet(n)\n        roots = {}\n        for edge in edges:\n            if ds.union(edge[0], edge[1]):\n                if edge[0] not in roots:\n                    roots[edge[0]] = ds.parent[edge[0]]\n                if edge[1] not in roots:\n                    roots[edge[1]] = ds.parent[edge[1]]\n\n        if len(roots) == n:\n            print(\"YES\")\n            for edge in edges:\n                print(edge[0], edge[1])\n        else:\n            print(\"NO\")\n\n    def test(self):\n        assert self.main(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\n\nSolution().test()",
        "num_ids_2": 86,
        "num_ids_4": 114
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n2 3\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\"\"\"\n\nimport sys\nimport collections\n\nclass Graph:\n    def __init__(self, n_vertices, n_edges, first_vertex, edges):\n        self.n_vertices = n_vertices\n        self.n_edges = n_edges\n        self.first_vertex = first_vertex\n        self.edges = edges\n\n    def __str__(self):\n        return f'{self.n_vertices}, {self.n_edges}, {self.first_vertex}, {self.edges}'\n\n    def __repr__(self):\n        return self.__str__()\n",
        "num_ids_2": 84,
        "num_ids_4": 112
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n2 3\\n3 4\"\n\"\"\"\n\n\n\nfrom collections import defaultdict\nfrom queue import Queue\nfrom typing import Dict, List, Set, Tuple, Union\n\n\nclass Graph:\n    def __init__(self, n: int):\n        self.n = n\n        self.graph = defaultdict(set)\n        self.degrees = [0 for _ in range(self.n)]\n        self.set_nodes = set()\n\n    def add_edge(self, v: int, u: int):\n        self.graph[v].add(u)\n        self.graph[u].add(v)\n        self.degrees[v] += 1\n        self.degrees[u] += 1\n\n    def bfs(self, start: int, D: int):\n        q = Queue()\n        q.put(start)\n        visited = [False for _ in range(self.n)]\n        visited[start] = True\n        self.set_nodes.add(start)\n        cur_degree = 1\n        while cur_degree!= D and not q.empty():\n            cur_degree = D\n            size = q.qsize()\n            for _ in range(size):\n                v = q.get()\n                for u in self.graph[v]:\n                    if not visited[u]:\n                        visited[u] = True\n                        self.set_nodes.add(u)\n                        q.put(u)\n                        cur_degree += 1\n\n    def has_spanning_tree(self, D: int) -> bool:\n        if D > self.n:\n            return False\n        if self.degrees[0] == D:\n            return True\n        self.bfs(0, D)\n        if len(self.set_nodes) == self.n:\n            return True\n        return False\n\n\nclass Solution:\n    def __init__(self):\n        self.res = None\n\n    def solution(self, stdin: str) -> str:\n        n, m, D = tuple(map(int, stdin.split()))\n        graph = Graph(n)\n        for _ in range(m):\n            v, u = tuple(map(int, stdin.split()))\n            graph.add_edge(v-1, u-1)\n        if graph.has_spanning_tree(D):\n            print(\"YES\")\n            for node in sorted(graph.set_nodes):\n                print(node + 1)\n            return\n        print(\"NO\")\n        return\n",
        "num_ids_2": 96,
        "num_ids_4": 96
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\n\"\"\"\nimport sys\nfrom collections import deque\n\nsys.setrecursionlimit(1000000)\n\n\nclass Node:\n    def __init__(self, val: int):\n        self.val = val\n        self.neighbors = set()\n\n    def __str__(self):\n        return f'Node[val={self.val}, neighbors={self.neighbors}]'\n\n    __repr__ = __str__\n\n    def add_neighbor(self, neighbor):\n        self.neighbors.add(neighbor)\n\n    def is_isolated(self):\n        return len(self.neighbors) == 0\n",
        "num_ids_2": 90,
        "num_ids_4": 118
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 4\\n1 2\\n2 3\\n3 4') == 'YES\\n2 1'\nassert solution('1 2\\n1 3\\n2 3\\n3 4') == 'NO'\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution('4 5 3\\n1 2\\n1 4\\n2 3\\n3 4') == 'YES\\n1 2\\n1 4\\n2 3\\n3 4'\nassert solution('4 4 3\\n1 2\\n1 4\\n2 3\\n3 4') == 'NO'\n",
        "num_ids_2": 88,
        "num_ids_4": 116
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('2 2 1\\n1 2\\n1 3\\n2 3\\n3 4') == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution('4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'NO'\nassert solution('4 4 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'NO'\n\n\n\"\"\"\n\n\nfrom collections import defaultdict\nimport math\n",
        "num_ids_2": 48,
        "num_ids_4": 124
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution('4 5 3\\n1 2\\n1 4\\n2 3\\n3 4') == 'YES\\n1 2\\n1 4\\n4 1\\n'\nassert solution('4 4 3\\n1 2\\n1 4\\n2 3\\n3 4') == 'NO'\n\n-----Hint-----\n\nThe task is to build a spanning tree such that the degree of the first vertex (vertex with label $1$ on it) is equal to $D$ (or say that there are no such spanning trees).\n\nFind a spanning tree by implementing Prim's algorithm with a priority queue to store edges.\n\nThe input graph is not necessarily a simple graph.\n\nYou can assume that there are no self-loops or multiple edges in the given graph.\n\nYou can assume that the given graph is connected, i. e. you can simply ignore the edge (v, u) if (u, v) is also in the list of edges.\n\nFor each edge (v, u) in the list of edges, consider the following steps:\n\nIf there is a spanning tree T, such that the degree of the first vertex (vertex with label $1$ on it) is equal to $D$, print \"YES\" and then print $n-1$ lines describing the edges of T such that the degree of the first vertex (vertex with label $1$ on it) is equal to $D$.\n\nIf there is no such spanning tree, print \"NO\".\n\n\"\"\"\n",
        "num_ids_2": 86,
        "num_ids_4": 114
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == 'YES\\n1 2\\n1 4\\n4 1'\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == 'NO'\n",
        "num_ids_2": 84,
        "num_ids_4": 112
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\nassert solution('03:02') == '03:02'\nassert solution('11:00') == '11:00'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30 11:00\"\nassert solution(\"11:10 11:12\") == \"11:11 11:12\"\nassert solution(\"01:02 03:02\") == \"02:02 03:02\"\n\n------END-------\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 60
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('11:12') == '11:11'\nassert solution('01:02') == '02:02'",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10:00\\n11:00\") == \"10:30\"\n\nassert solution(\"11:10\\n11:12\") == \"11:11\"\n\nassert solution(\"01:02\\n03:02\") == \"02:02\"\n\"\"\"\n\nimport os\nimport sys\nfrom dataclasses import dataclass\n\nFILE_DIR = os.path.dirname(os.path.abspath(__file__))\nsys.path.append(os.path.dirname(FILE_DIR))\n\nfrom helper import get_raw_input_as_int_array_with_default_input\n",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\n\nassert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10:00 11:00') == '10:30'\nassert solution('11:10 11:12') == '11:11'\nassert solution('01:02 03:02') == '02:02'\n\"\"\"\n\nimport sys\nimport time\n\nsys.stdin = open('input.txt')\n",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\n\"\"\"\n\nimport sys\nfrom datetime import datetime",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:00\"\nassert solution(\"01:02\") == \"02:02\"\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30\"\nassert solution(\"11:10 11:12\") == \"11:11\"\nassert solution(\"01:02 03:02\") == \"02:02\"\n",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"5\"\nassert solution(\"42\") == \"6\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 1\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 2\nassert solution(\"27\") == 5\nassert solution(\"42\") == 6\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(2) == 1\nassert solution(4) == 2\nassert solution(27) == 5\nassert solution(42) == 6\nprint('All tests passed.')\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"5\"\nassert solution(\"42\") == \"6\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 2\nassert solution(\"27\") == 5\nassert solution(\"42\") == 6\n\nassert solution(\"1\") == 0\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == 1\n\nassert solution('4') == 2\n\nassert solution('27') == 5\n\nassert solution('42') == 6\n\nprint('Success')\n\n'''",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('27') == 5\nassert solution('42') == 6\n\"\"\"\nimport math\na = int(input())\n\nb = math.ceil(math.log(a, 2))\n\nprint(b)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"42\") == \"6\"\nassert solution(\"27\") == \"5\"\n\"\"\"\n\na = int(input().strip())",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3') == ''\nassert solution('2\\n2\\n0\\n0') == '0'\nassert solution('3\\n3\\n1\\n1') == '0'\nassert solution('3\\n3\\n4\\n4') == '0'\n",
        "num_ids_2": 22,
        "num_ids_4": 60
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\\n\") == '1\\n'\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\\n\") == '2\\n'\nassert solution(\"3\\n4 5\\n1 2\\n9 20\\n\") == '0\\n'\nassert solution(\"2\\n3 10\\n1 5\\n\") == '7\\n'\nassert solution(\"2\\n3 10\\n1 5\\n\") == '7\\n'\n",
        "num_ids_2": 64,
        "num_ids_4": 112
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\\n\"\n\n\"\"\"\nimport sys\n",
        "num_ids_2": 60,
        "num_ids_4": 104
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5 1 3\") == \"0\"\nassert solution(\"3 10 2 6\") == \"2\"\nassert solution(\"4 5 3 7\") == \"4\"\nassert solution(\"3 3 4 5\") == \"0\"\nassert solution(\"5 1 7 2 4 8\") == \"6\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"3\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\\n\"\n) == '2'\nassert solution(\n    \"4\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\\n\"\n) == '1'\nassert solution(\n    \"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\\n\"\n) == '0'\nassert solution(\n    \"3\\n4 5\\n1 2\\n9 20\\n\"\n) == '0'\nassert solution(\n    \"2\\n3 10\\n1 5\\n\"\n) == '7'\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\\n\"\n\n\n\n------Solution------\n\nmemo[i]: maximal possible length of the intersection of the last i segments, given that you remove the last segment\nmemo[0] = 0\nmemo[1] = 0\nmemo[2] = 0\n...\nmemo[i] = max(memo[j]) + r[i] - l[i]\n\nn = int(input())\nsegments = [tuple(map(int, input().split())) for _ in range(n)]\nsegments = sorted(segments)\nmemo = [0 for _ in range(n)]\nmemo[0] = segments[0][1] - segments[0][0]\nmemo[1] = segments[1][1] - segments[1][0]\nmemo[2] = segments[2][1] - segments[2][0]\nfor i in range(3, n):\n    memo[i] = max(memo[j]) + segments[i][1] - segments[i][0]\nprint(max(memo))\n",
        "num_ids_2": 60,
        "num_ids_4": 106
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 6\\n1 3\") == \"1\\n\"\nassert solution(\"3 10\\n1 5\\n2 6\") == \"2\\n\"\nassert solution(\"4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"5 3\\n2 6\\n1 3\\n0 4\\n1 20\") == \"2\\n\"\n",
        "num_ids_2": 38,
        "num_ids_4": 88
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1 3\n2 6\n0 4\n3 3\n''') == '1'\nassert solution('''\n5\n2 6\n1 3\n0 4\n1 20\n0 4\n''') == '2'\nassert solution('''\n3\n4 5\n1 2\n9 20\n''') == '0'\nassert solution('''\n2\n3 10\n1 5\n''') == '7'\nprint('Passed!')",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\\n\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\\n\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\\n\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\\n\"\n\n\"\"\"\n\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_INT = lambda: int(INPUT_LINES.pop(0))\nINPUT_INTs = lambda: map(int, INPUT_LINES.pop(0).split())\n",
        "num_ids_2": 64,
        "num_ids_4": 112
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n",
        "num_ids_2": 56,
        "num_ids_4": 96
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1 2 5\\n\") == \"YES\"\nassert solution(\"4 5 3\\n\") == \"NO\"\nassert solution(\"10 10\\n\") == \"YES\"\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 30,
        "num_ids_4": 43
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\nassert solution('1\\n10 10') == 'NO'\nassert solution('5\\n10 10') == 'YES'\n",
        "num_ids_2": 32,
        "num_ids_4": 60
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n",
        "num_ids_2": 32,
        "num_ids_4": 46
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2) == \"YES\"\nassert solution(3) == \"YES\"\nassert solution(5) == \"NO\"\nassert solution(10) == \"NO\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n",
        "num_ids_2": 32,
        "num_ids_4": 46
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"3 5 3\") == \"NO\"\nassert solution(\"10 10\") == \"YES\"\n",
        "num_ids_2": 26,
        "num_ids_4": 37
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\nassert solution('1\\n10 10') == 'NO'\n",
        "num_ids_2": 32,
        "num_ids_4": 60
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"1\\n1\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\"\"\"\nfrom collections import Counter",
        "num_ids_2": 32,
        "num_ids_4": 59
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\"\"\"\n\nfrom collections import deque\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = deque()\n\nfor i in range(n):\n    while q and a[i] >= a[q[-1]]:\n        q.pop()\n    if not q:\n        q.append(i)\n    else:\n        if i - q[0] > 2:\n            print(\"NO\")\n            exit()\n\nprint(\"YES\")\n",
        "num_ids_2": 32,
        "num_ids_4": 46
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaaaa\") == 15\nassert solution(\"asdf\") == 4\nassert solution(\"ajihiushda\") == 233\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1500)\n",
        "num_ids_2": 18,
        "num_ids_4": 30
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == -1\nassert solution(\"bbbbbbbbbbbbbbbbbbb\") == -1\nassert solution(\"abcdefghij\") == 20\n",
        "num_ids_2": 18,
        "num_ids_4": 49
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ajihiushda') == '233'\nassert solution('aaaaa') == '15'\nassert solution('asdf') == '4'\n\nassert solution('ajihiushda') == '233'\nassert solution('aaaaa') == '15'\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"aaaaa\") == 15\nassert solution(\"aaaaa\") == 15\nassert solution(\"aaaaa\") == 15\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\naaaaa\\n') == '4'\nassert solution('4 5\\najihiushda\\n') == '233'\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\nasdf') == '4'\nassert solution('5 6\\naaaaa') == '15'\nassert solution('5 7\\naaaaa') == '-1'\nassert solution('10 100\\najihiushda') == '233'\n",
        "num_ids_2": 28,
        "num_ids_4": 61
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ajihiushda\") == 233\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abaca\") == 'abaca'\nassert solution(\"abacaabaca\") == 'abacaabaca'\nassert solution(\"aaaaa\") == 'aaaaa'\nassert solution(\"aaaaaabaca\") == 'aaaaaabaca'\n\n\"\"\"\n\nimport sys\nfrom collections import Counter",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaaaa\", \"bbbbb\") == \"15\"\nassert solution(\"aaaaa\", \"bb\") == -1\nassert solution(\"aaaaa\", \"a\") == \"233\"\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 43
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5') == '4'\nassert solution('5 6') == '15'\nassert solution('5 7') == '-1'\n\nassert solution('10 100') == '233'\n\"\"\"\nimport sys\nfrom tools import timing\n\nn, k = tuple(map(int, sys.stdin.readline().split()))\ns = sys.stdin.readline().strip()\nres = set()\nmin_cost = 0\ncost = 0\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1\\n') == '4'\nassert solution('3 2 2\\n') == '7'\nassert solution('1 100 1\\n') == '3'\nassert solution('30 20 10\\n') == '39'\n\n\"\"\"\n\nfrom math import inf\n\na, b, c = map(int, stdin.readline().split())\nn = 1\nwhile a + b + c!= 7 * 10 ** 8:\n    n += 1\n    a, b, c = map(int, stdin.readline().split())\n\nprint(n)\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n\nfrom itertools import permutations",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1\") == 4\nassert solution(\"3 2 2\") == 7\nassert solution(\"1 100 1\") == 3\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\n\"\"\"\n\nfrom typing import Tuple",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 100 1\") == 3\nassert solution(\"3 2 2\") == 7\nassert solution(\"30 20 10\") == 39\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n\"\"\"\n\na, b, c = map(int, input().split())\nday = [a, b, c]\n\nprint(max(day.count(i) for i in range(1, 4)))",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 1\\n1 1\") == \"YES\"\nassert solution(\"4 4\\n1 1\\n1 1\\n1 2\\n2 2\\n1 1\\n1 1\\n1 2\") == \"YES\"\nassert solution(\"2 2\\n1 1\\n1 1\") == \"NO\"\nassert solution(\"2 2\\n1 1\\n1 1\\n2 2\") == \"NO\"\nassert solution(\"5 3\\n1 1\\n2 2\\n2 2\\n1 1\") == \"NO\"\n",
        "num_ids_2": 58,
        "num_ids_4": 100
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'YES'\nassert solution('1\\n1\\n1\\n1\\n1') == 'NO'\nassert solution('2\\n2\\n1 1\\n1 1\\n1 1\\n2 2\\n1 1\\n1 1\\n1 1\\n2 2\\n2 2\\n1 1') == 'YES'\nassert solution('3\\n2\\n1 1\\n1 1\\n1 1\\n2 2\\n2 2\\n1 1') == 'YES'\nassert solution('4\\n2\\n1 1\\n1 1\\n1 1\\n2 2\\n2 2\\n1 1\\n1 1') == 'NO'\n",
        "num_ids_2": 32,
        "num_ids_4": 122
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n2 1\") == 'YES'\nassert solution(\"4 5\\n5 4\") == 'YES'\nassert solution(\"1 1\\n1 1\") == 'YES'\nassert solution(\"1 2\\n2 1\") == 'NO'\nassert solution(\"4 5\\n5 4\") == 'NO'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n2 2\") == 'YES'\n\"\"\"\n\nimport sys\n\nN, M = map(int, input().split())\nS = set()\nC = {}\nfor i in range(N):\n    a, b = map(int, input().split())\n    S.add(a)\n    S.add(b)\n    if b not in C:\n        C[b] = [a]\n    else:\n        C[b].append(a)\n\nS = list(S)\n\nfor i in range(M):\n    for j in range(i+1, M):\n        if S[i] == S[j] or S[i] in C[S[j]] or S[j] in C[S[i]]:\n            print('YES')\n            sys.exit()\nprint('NO')\n",
        "num_ids_2": 135,
        "num_ids_4": 135
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3') == 'YES'\nassert solution('2 2') == 'NO'\nassert solution('3 3') == 'YES'\nassert solution('3 3') == 'YES'\n\"\"\"\nfrom collections import Counter, deque",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 5\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4') == 'YES'\nassert solution('3 4') == 'NO'\nassert solution('3 3') == 'YES'\n\n[Image]\n\n----\n\nMasha has $n$ types of tiles of size $2 \\times 2$. Each cell of the tile contains one integer. Masha has an infinite number of tiles of each type.\n\nMasha decides to construct the square of size $m \\times m$ consisting of the given tiles. This square also has to be a symmetric with respect to the main diagonal matrix, and each cell of this square has to be covered with exactly one tile cell, and also sides of tiles should be parallel to the sides of the square. All placed tiles cannot intersect with each other. Also, each tile should lie inside the square. See the picture in Notes section for better understanding.\n\nSymmetric with respect to the main diagonal matrix is such a square $s$ that for each pair $(i, j)$ the condition $s[i][j] = s[j][i]$ holds. I.e. it is true that the element written in the $i$-row and $j$-th column equals to the element written in the $j$-th row and $i$-th column.\n\nYour task is to determine if Masha can construct a square of size $m \\times m$ which is a symmetric matrix and consists of tiles she has. Masha can use any number of tiles of each type she has to construct the square. Note that she can not rotate tiles, she can only place them in the orientation they have in the input.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of the test case contains two integers $n$ and $m$ ($1 \\le n \\le 100$, $1 \\le m \\le 100$) \u2014 the number of types of tiles and the size of the square Masha wants to construct.\n\nThe next $2n$ lines of the test case contain descriptions of tiles types. Types of tiles are written one after another, each type is written on two lines. \n\nThe first line of the description contains two positive (greater than zero) integers not exceeding $100$ \u2014 the number written in the top left corner of the tile and the number written in the top right corner of the tile of the current type. The second line of the description contains two positive (greater than zero) integers not exceeding $100$ \u2014 the number written in the bottom left corner of the tile and the number written in the bottom right corner of the tile of the current type.\n\nIt is forbidden to rotate tiles, it is only allowed to place them in the orientation they have in the input.\n\n\n-----Output-----\n\nFor each test case print the answer: \"YES\" (without quotes) if Masha can construct the square of size $m \\times m$ which is a symmetric matrix. Otherwise, print \"NO\" (withtout quotes).\n\n\n-----Example-----\nInput\n3\n3 3\n1 2\n1 2\n2 1\n1 1\n3 4\n1 3\n1 3\n1 2\n2 3\n2 1\n\nOutput\nYES\nNO\nYES\n\n\n-----Note-----\n\nThe first test case of the input has three types of tiles, they are shown on the picture below. [Image] \n\nMasha can construct, for example, the following square of size $4 \\times 4$ which is a symmetric matrix: $\\left. \\begin{array}{|c|c|c|c|} \\hline 5 & {7} & {8} & {9} \\\\ \\hline 7 & {4} & {9} & {8} \\\\ \\hline 8 & {9} & {5} & {7} \\\\ \\hline 9 & {8} & {7} & {4} \\\\ \\hline \\end{array} \\right.$\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"2 2\") == \"NO\"\nassert solution(\"1 100\") == \"NO\"\nassert solution(\"1 2\") == \"YES\"\n\n\"\"\"\n\nimport sys\nimport math\n\nassert len(sys.argv) == 2\nn, m = map(int, sys.argv[1].split())",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n5 6\") == \"NO\"\nassert solution(\"1 1\\n1 1\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 1\\n1 1\") == \"YES\"\n\n\n---Problem 1---\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: n \u0438 m (1 <= n, m <= 100) - \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b.\n\u0414\u0430\u043b\u0435\u0435 \u0438\u0434\u0443\u0442 n \u0441\u0442\u0440\u043e\u043a \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u0438 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b: \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0447\u0438\u0441\u043b\u043e, \u0437\u0430\u0442\u0435\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435, \u0437\u0430\u0442\u0435\u043c \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e; \u043e\u0431\u0430 \u0447\u0438\u0441\u043b\u0430 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0442 100. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435.\n\u0414\u0430\u043b\u0435\u0435 \u0438\u0434\u0443\u0442 m \u0441\u0442\u0440\u043e\u043a \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b: \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0447\u0438\u0441\u043b\u043e, \u0437\u0430\u0442\u0435\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435, \u0437\u0430\u0442\u0435\u043c \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e; \u043e\u0431\u0430 \u0447\u0438\u0441\u043b\u0430 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0442 100. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435.\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e: t - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u0439.\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 t \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0438\u0437 \u0443\u0441\u043b\u043e\u0432\u0438\u044f. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0441\u043b\u043e\u0432, \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b: \u043d\u043e\u043c\u0435\u0440\u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0438 \u043d\u043e\u043c\u0435\u0440\u0430 \u0441\u0442\u0440\u043e\u043a\u0438. \u0427\u0438\u0441\u043b\u0430 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0441\u043b\u043e\u0432\u0435 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0442 100.\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u043e\u0433\u043e,",
        "num_ids_2": 130,
        "num_ids_4": 130
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n') == '0'\nassert solution('5\\n') == '1'\nassert solution('6\\n') == '1'\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == 0\nassert solution('5') == 1\nassert solution('6') == 1\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3') == 0\nassert solution('1\\n2\\n3\\n4') == 1\nassert solution('1\\n2\\n3\\n4\\n5') == 1\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == 1\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7') == 1\n",
        "num_ids_2": 31,
        "num_ids_4": 74
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == '0'\nassert solution(\"5\") == '1'\nassert solution(\"6\") == '1'\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'\n\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1, 2, 3') == 0\nassert solution('1, 2, 5') == 1\nassert solution('1, 3, 4') == 1\nassert solution('1, 5, 6') == 1\nassert solution('1, 2, 3, 4, 5') == 1\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n\"\"\"\n\n\nclass Solution:\n    def minAbsSumDiff(self, nums: str) -> int:\n        nums = list(map(int, nums.split()))\n        n = len(nums)\n        nums.sort()\n        return min(abs(sum(nums) - 2 * sum(nums[:n // 2])), abs(sum(nums) - 2 * sum(nums[n // 2:])))\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == '0'\nassert solution(\"5\") == '1'\nassert solution(\"6\") == '1'\n\nassert solution('6') == '1'\nassert solution('10') == '2'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"0\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()))()\") == 4\nassert solution(\"((()))()\") == 4\nassert solution(\"(()(()))()\") == 4\nassert solution(\"()((()))()\") == 4\n",
        "num_ids_2": 21,
        "num_ids_4": 45
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"5\\n((()))()\\n\"\n) == \"5\"\n\nassert solution(\n    \"3\\n(())\\n\"\n) == \"4\"\n\nassert solution(\n    \"2\\n((()\\n\"\n) == \"0\"\n\nassert solution(\n    \"4\\n((())\\n\"\n) == \"0\"\n\nassert solution(\n    \"10\\n(((())())\\n\"\n) == \"35\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('(((())))') == 5\nassert solution('(()((()()))())') == 4\nassert solution('(()((()())(())()))()') == 8\nassert solution('(()((()())(())())((((()))))') == 8\nassert solution('(()(((())())())())())') == 16\n",
        "num_ids_2": 25,
        "num_ids_4": 62
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()))()\") == 4\nassert solution(\"((()))\") == 0\nassert solution(\"(()(()))()\") == 4\nassert solution(\"((()())\") == 0\n\"\"\"\n\n\"\"\"\n--- Part Two ---\n\nYou have come to the Brown Hotel for a long time. It is famous for its comfort food, which is made from brown rice. However, the food is hard to make and they don't have a cook machine in the kitchen any more.\n\nNow, you're going to figure out what the machine should have. The first step is to calculate the amount of brown rice to use. The brown rice comes in packages of 10 units, and the packages have to be used in the following way:\n\nTake the first package, and move it from the Brown Hotel to the Hotel North Pole.\nFind the brown rice that is leftover after using the first package (it doesn't matter whether you take that many packages, or less. If there is not enough brown rice, you will need to start over with the next package.\nRepeat this process until you run out of brown rice.\nThe brown rice at the North Pole will come in ten-unit packages, and you already have one. If you need to make more brown rice, you will need to go to the Brown Hotel to buy more.\n\nOnce you have enough brown rice, you can begin producing the soup. You will need to use three different pots for this process. Each pot can hold a maximum of 5 units of brown rice, and you can only use a pot to make soup once it has 5 units of brown rice.\n\nTo make soup, you must take the first pot and the third pot, and put the brown rice from the first pot into the fourth pot. Then, you must put the brown rice from the third pot into the second pot. Once you have three pots holding five units each, you must take the first pot and the second pot, and put the brown rice from the first pot into the third pot. Then, you must put the brown rice from the second pot into the fourth pot. Once you have all three pots holding five units of brown rice, you can combine them into soup and put it into the fourth pot. When you have all three pots holding five units each, you can take the first pot and the second pot, and put the brown rice from the first pot into the third pot. Then, you can take the third pot and the fourth pot, and put the brown rice from the second pot into the fourth pot. When you have all three pots holding five units of brown rice, you can combine them into soup and put it into the fourth pot.\n\nOnce you have the four pots holding five units each, you can combine them into soup and put it into the fourth pot. Now, you can make soup! Once you have made soup, you will need to put the pot back to the Brown Hotel.\n\nYou will have a certain amount of brown rice upon returning to the hotel after making soup. Calculate the number of brown rice you will have upon returning to the hotel.\n\nInput\n\nThe input consists of a single line containing the string s. s is guaranteed to be a valid string containing at most 200 characters.\n\nOutput\n\nPrint a single integer \u2014 the number of brown rice that you will have upon returning to the hotel.\n\n\n-----Sample Input-----\n\n)))}))}))}}}\n\n-----Sample Output-----\n\n11\n\n\"\"\"\nimport re\n",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"((()))\") == 4\nassert solution(\"((()()))\") == 5\nassert solution(\"((((((()()))()()))()((()))())\") == 9\nassert solution(\"(((((((()((((())))))()((()))())())())())())())\") == 50\nassert solution(\"((()))((()))((()())())((()))()\") == 4\n",
        "num_ids_2": 21,
        "num_ids_4": 69
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"(()()))()\") == 5\nassert solution(\"(()())(())(()(()))\") == 10\nassert solution(\"(((((((((((((((((((((((((((((())))))))))())(()))())(()((()))((()))((()()((())((((()))(((((()))))))(()))((()((((()()()(()(((((((()))()((((((())))))))(()()(()(((((((((((((((((((((((((((((())))))))(()()(()(((((((((((((((((((((((((((((((((((((((((()))))))(((()(()(()(((((((((((((((((((((((((((((((((((((((((((()))))))((()((()(((((((((((((((((((((((((((((((((((((((((((((((())))))))))()(((((()((()(((()(((((((((((((((((((((((((((((((((((((((((()))))))))))(()(((()((()(((()(((()(((((((((((((((((((((((((((((((((((((()))))))(((((())(()(((()(((((((((((((((((((((((((((((((((((((((((()))))))(((((()((()(((()(((()(((((((((((((((((((((((((((((((((((((((((()))))))))))(((()(((()(((()(((((((((((((((((((((((((((((((((((((((((((()))))))(((((()((()((()(((()(((()(((((((((((((((((((((((((((((((((((((()))))))(((((((()(((()(((((((((((((((((((((((((((((((((((((((((((((()))))))))))))))(((((((())(())())())()(((((((((((((((((((((((((((((((((((((((((((((((((((((()(((((((((((((((((((((((((((((((((((((((((((((((((((((((()))))))))))()(()(((((()(()(((()(((()(((((((((((((((((((((((((((((((((((((((((((((((((((()(((((((((((((((((((((((((((((((((((((((((((((((((((((((())))))()()(()(((((()(((()((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((",
        "num_ids_2": 29,
        "num_ids_4": 1510
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"(()))()\") == 4\nassert solution(\"(((()))())\") == 5\nassert solution
        "num_ids_2": 23,
        "num_ids_4": 1510
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()())\") == 4\nassert solution(\"(()())(())\") == 0\nassert solution(\"(((((\") == 0\nassert solution(\"(((((((((((())\") == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"((()))\") == 5\nassert solution(\"(()((()))())\") == 3\nassert solution(\"(()((()))())\") == 3\nassert solution(\"((()()))()()\") == 1\nassert solution(\"()((()))()\") == 1\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 49
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()(()))()\") == 4\nassert solution(\"()(((()))()\") == 0\nassert solution(\"(((()))())(((())(((()))())())())())\") == 0\n",
        "num_ids_2": 23,
        "num_ids_4": 59
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5071') == 4\nassert solution('705') == 1\nassert solution('1241367') == -1\n\"\"\"\n\nimport numpy as np\n",
        "num_ids_2": 17,
        "num_ids_4": 28
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(5071)) == \"4\"\nassert solution(str(705)) == \"1\"\nassert solution(str(1241367)) == \"-1\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 39
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"505\") == 2\nassert solution(\"5071\") == 4\nassert solution(\"705\") == -1\nassert solution(\"12341367\") == -1\nassert solution(\"1110\") == 2\n\"\"\"\n\n\nimport sys\nimport itertools",
        "num_ids_2": 17,
        "num_ids_4": 38
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '-1'\nassert solution('1241367') == '-1'",
        "num_ids_2": 22,
        "num_ids_4": 35
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n",
        "num_ids_2": 21,
        "num_ids_4": 34
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\nassert solution('872665') == '3'\nassert solution('7551234') == '4'\n",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5071\") == 4\nassert solution(\"705\") == 1\nassert solution(\"1241367\") == -1\n\"\"\"\nimport numpy as np\nimport sys\n\nclass Solution:\n    def getDivisible(self, n: str) -> int:\n        # Get the number of ones in the binary representation\n        ones = 0\n        while n > 0:\n            ones += n%2\n            n //= 2\n        \n        # Return 0 if there are more than 10 ones\n        if ones > 10:\n            return 0\n        \n        # Return the number of moves to get an even number\n        return (10 - ones)\n        \n    def solution(self, n: int) -> int:\n        moves = 0\n        \n        # Loop over each number\n        while n > 0:\n            moves += self.getDivisible(n)\n            n //= 25\n        \n        # Return -1 if the result is not divisible by 25\n        if n > 0:\n            return -1\n            \n        return moves\n        \n",
        "num_ids_2": 17,
        "num_ids_4": 28
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\nassert solution('314159265') == '8'\n",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 34
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\nprint(\"Successfully passed all test cases!\")\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/56ee89a6c7ec3c5a0c00002d/train/python\n\n\u0418\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0447\u0438\u0441\u0435\u043b \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437, \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0432 \u0435\u0434\u0438\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e 3, \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0442\u044c 3 \u0440\u0430\u0437\u0430, \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0437\u043e\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 \"3 3 3\".\n\n\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0447\u0438\u0441\u0435\u043b, \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u0435\u0433\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437, \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e 3, \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0442\u044c 3 \u0440\u0430\u0437\u0430, \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0437\u043e\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 \"3 3 3\".\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043d\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u044e\u0449\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437 \u0447\u0438\u0441\u043b\u043e, \u0432\u044b\u0432\u043e\u0434\u044f \u0441\u0442\u0440\u043e\u043a\u0443.\n\n\u0421\u0442\u0440\u043e\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u0447\u0438\u0441\u0435\u043b, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043e\u0434\u043d\u0438\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c \u0431\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b\u0430 \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0438 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b:\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n1 2 3 4 5\n3\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n1 2 3 4 5\n3 3 3 3\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n4 7 2 9 6\n4\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n4 7 2 9 6\n4 4 4 4\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n5 1 6 2 5\n4\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n5 1 6 2 5\n4 4 4 4\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n1 2 3\n3\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n1 2 3\n3 3 3\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n4 6 2 5 3\n4\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n4 6 2 5 3\n4 4 4 4\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n4 6 2 5 3\n4\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n4 6 2 5 3\n4 4 4 4\n\"\"\"\n\n\nimport random\nimport collections",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacbecfd\") == \"2\"\nassert solution(\"aaabbcbb\") == \"2\"\nassert solution(\"abcdedc\") == \"3\"\nassert solution(\"abcde\") == \"1\"\n\nprint(\"OK\")\n",
        "num_ids_2": 26,
        "num_ids_4": 49
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('aa') == '1 1 1 1 1'\nassert solution('aabb') == '1 2 1 2 1'\nassert solution('abab') == '1 2 1 2 1'\nassert solution('abc') == '1 1 1 1 1'\n",
        "num_ids_2": 22,
        "num_ids_4": 52
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abacbecfd') == 2\nassert solution('aaabbcbb') == 2\nassert solution('abcde') == 1\nassert solution('abcdedc') == 3\nassert solution('aabbbccc') == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 41
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacbecfd\") == \"2\"\nassert solution(\"aaabbcbb\") == \"2\"\nassert solution(\"abcdedc\") == \"3\"\nassert solution(\"abcde\") == \"1\"\n\"\"\"\n\nn = int(input())\ns = input()\n\ncolors = []\n\nfor c in s:\n    if len(colors) == 0:\n        colors.append(1)\n        continue\n    \n    color = 1\n    for i in range(len(colors)):\n        if c < colors[i]:\n            break\n        color += 1\n    \n    colors.append(color)\n\nprint(len(colors))\nfor c in colors:\n    print(c, end=' ')",
        "num_ids_2": 26,
        "num_ids_4": 49
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacbecfd\") == 2, \"First\"\nassert solution(\"aaabbcbb\") == 2, \"Second\"\nassert solution(\"abcdedc\") == 3, \"Third\"\nassert solution(\"abcde\") == 1, \"Forth\"\n\"\"\"\n\nimport sys\nimport time\n",
        "num_ids_2": 30,
        "num_ids_4": 58
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcd\") == \"1 1 1 1 2 2 2\"\nassert solution(\"abcef\") == \"1 1 1 1 2 3 3\"\nassert solution(\"abcdec\") == \"1 1 2 1 2 1 1\"\nassert solution(\"abcdee\") == \"1 1 2 1 1 2 2\"\nassert solution(\"abcdef\") == \"1 1 1 1 2 2 2\"\n\nprint(solution(stdin))",
        "num_ids_2": 35,
        "num_ids_4": 71
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abacbecfd') == 2\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"abacbecfd\") == \"2\"\nassert solution(\n    \"aaabbcbb\") == \"2\"\nassert solution(\n    \"abcdedc\") == \"3\"\nassert solution(\n    \"abcde\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacbecfd\") == \"2\"\nassert solution(\"aaabbcbb\") == \"2\"\nassert solution(\"abcde\") == \"1\"\nassert solution(\"\") == \"1\"\nassert solution(\"abcdea\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 46
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcd\") == \"1 1 2 1 2\"\nassert solution(\"\") == \"1 1 2 1 2\"\nassert solution(\"bcb\") == \"1 1 2 1 2\"\nassert solution(\"baac\") == \"1 1 2 1 2\"\nassert solution(\"bacb\") == \"1 1 2 1 2\"\n\n\"\"\"\n\ns = stdin.split()[1]\nn = len(s)\ncolors = [0] * n\nfor i in range(n):\n    colors[i] = 1\n\nfor i in range(n - 1):\n    if s[i] > s[i + 1]:\n        colors[i] += 1\n\nfor i in range(n - 1, 0, -1):\n    if s[i - 1] > s[i]:\n        colors[i - 1] += 1\n\nres = max(colors)\nprint(res)\nprint(\" \".join([str(i) for i in colors]))\n",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\") == 'YES'\nassert solution(\"abacaba\") == 'YES'\nassert solution(\"a\") == 'YES'\nassert solution(\"aab\") == 'YES'\nassert solution(\"aaba\") == 'YES'\n",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\naba\\nabacaba\\nba\\naba\\nabab\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\"\nassert solution(\"5\\na\\nabacaba\\nba\\naba\\nabab\") == \"NO\"\nassert solution(\"3\\nqwerty\\nqwerty\\nqwerty\") == \"YES\\nqwerty\\nqwerty\\nqwerty\"",
        "num_ids_2": 71,
        "num_ids_4": 111
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\na\\naba\\nabacaba\\nba\\na\\naba\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"qwerty\\nqwerty\\nqwerty\") == \"YES\\nqwerty\\nqwerty\"\nassert solution(\"aba\\naba\\naba\") == \"YES\\naba\\naba\"\nassert solution(\"abacaba\\nba\\naba\\nabacaba\") == \"NO\"\n\"\"\"\n",
        "num_ids_2": 54,
        "num_ids_4": 77
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == \"YES\\na\\nbacaba\\na\\nbacaba\\na\\nbacaba\\na\\nbacaba\"\nassert solution(\"a\") == \"YES\\na\"\nassert solution(\"ba\") == \"YES\\na\\nbacaba\\na\\nbacaba\\na\\nbacaba\"\nassert solution(\"qwerty\") == \"YES\\nq\\nw\\nr\\nt\\ny\\nq\\nw\\nr\\nt\\ny\\nq\\nw\\nr\\nt\\ny\\nq\\nw\\nr\\nt\\ny\"\nassert solution(\"aab\") == \"NO\"\n",
        "num_ids_2": 48,
        "num_ids_4": 132
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"a\") == \"YES\"\nassert solution(\"abba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"ba\") == \"YES\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin=\"5\\na\\naba\\nabacaba\\nba\\naba\\nabab\\n\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == 'YES\\na\\nb\\nc\\nd\\n'\n\"\"\"\n\nn = int(input())\n\nstrings = []\nfor _ in range(n):\n    strings.append(input())\n\nfor i in range(n):\n    for j in range(i+1,n):\n        if any([substring in strings[j] for substring in strings[i]]):\n            print(\"YES\")\n            print(strings[i])\n            print(strings[j])\n            break\n    else:\n        print(\"NO\")\n        break\n    ",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\na\\na\\n\") == 'YES\\na\\naba\\nba\\naba\\nabacaba\\n'\nassert solution(\"a\\naba\\nabacaba\\nba\\na\\nab\\n\") == 'NO'\nassert solution(\"qwerty\\nqwerty\\nqwerty\\n\") == 'YES\\nqwerty\\nqwerty\\nqwerty'\n\n\"\"\"\n",
        "num_ids_2": 73,
        "num_ids_4": 112
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a\\naba\\nabacaba\\nba\\naba\\nabab') == 'YES\\na\\na\\naba\\naba\\nabacaba\\nba\\naba\\nabab'\nassert solution('a\\na\\naba\\naba\\nabacaba\\nba\\naba\\nabab') == 'NO'\nassert solution('a\\na\\na\\na\\naba\\naba\\nabacaba\\nba\\naba\\nabab') == 'NO'",
        "num_ids_2": 86,
        "num_ids_4": 123
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n3 1 2 1 3') == '5'\nassert solution('5 100\\n12 34 55 43 21') == '5'\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 4\\n4 2 3 1 5 1 6 4') == 5\nassert solution('5 2\\n3 1 2 1 3') == 0\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\") == \"1\"\nassert solution(\"10 4\") == \"0\"\nassert solution(\"10 2\") == \"1\"\nassert solution(\"7 100\") == \"5\"\nassert solution(\"7 1000\") == \"5\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 100\\n12 34 55 43 21') == '5'\nassert solution('6 100\\n12 34 55 43 21') == '6'\nassert solution('1 100\\n12 34 55 43 21') == '0'\nassert solution('2 100\\n12 34 55 43 21') == '0'\nassert solution('3 100\\n12 34 55 43 21') == '0'\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n\n---",
        "num_ids_2": 39,
        "num_ids_4": 57
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2 3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\") == \"5\"\nassert solution(\"12 34 55 43 21\") == \"5\"\n\n\"\"\"\nimport sys",
        "num_ids_2": 33,
        "num_ids_4": 58
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\nassert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"8 4\\n4 1 3 1 5 1 6 4\") == \"5\"\nassert solution(\"8 4\\n4 1 3 1 5 1 6 4\") == \"5\"\n",
        "num_ids_2": 36,
        "num_ids_4": 78
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 4\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 4\") == \"5\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"5 100\") == \"5\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n\nprint('Success')\n\n----",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3') == '4'\nassert solution('2 3') == '5'\nassert solution('4 3') == '11'\nassert solution('4 5') == '12'\nassert solution('7 9') == '17'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == 12\nassert solution(\"3 9\") == 14\nassert solution(\"9 3\") == 14\nassert solution(\"3 6\") == 12\nassert solution(\"506 2708\") == 3218\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcd\") == \"0110\"\nassert solution(\"abdd\") == \"NO\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\"\nassert solution(\"abcdedc\") == \"NO\\n\"\nassert solution(\"abcde\") == \"YES\\n00000\"\nprint('all tests passed...')\n\nsolution(stdin)\n",
        "num_ids_2": 38,
        "num_ids_4": 66
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacbecfd\") == \"NO\"\nassert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcde\") == \"YES\"\n",
        "num_ids_2": 26,
        "num_ids_4": 49
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacbecfd\") == \"YES\"\nassert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcde\") == \"YES\"\nassert solution(\"a\") == \"YES\"\n\nprint(\"Success\")\n",
        "num_ids_2": 26,
        "num_ids_4": 49
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'YES'\nassert solution('abacbecfd') == 'NO'\nassert solution('aaabbcbb') == 'YES'\nassert solution('abcdedc') == 'NO'\nassert solution('abcde') == 'YES'\n",
        "num_ids_2": 23,
        "num_ids_4": 48
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcd\") == \"0110\"\n\nassert solution(\"abcde\") == \"0110\"\n\nassert solution(\"abacbe\") == \"01101101\"\n\nassert solution(\"abcdedc\") == \"01101101\"\n\nassert solution(\"abcde\") == \"01101101\"\n",
        "num_ids_2": 24,
        "num_ids_4": 52
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcd\") == \"YES\\n010\"\nassert solution(\"abcdee\") == \"YES\\n100\"\nassert solution(\"abacbb\") == \"NO\"\nassert solution(\"abcde\") == \"YES\\n00000\"\n\"\"\"\n\nfrom collections import defaultdict\n",
        "num_ids_2": 29,
        "num_ids_4": 55
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'YES'\nassert solution('a') == 'YES'\nassert solution('aa') == 'YES'\nassert solution('ab') == 'YES'\nassert solution('aab') == 'YES'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcde\") == \"YES\\n00000\"\nassert solution(\"abcd\") == \"NO\"\n\n\"\"\"\n\nfrom collections import deque\n",
        "num_ids_2": 38,
        "num_ids_4": 64
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacbecfd\") == \"YES\", \"Wrong solution for the 1st example\"\nassert solution(\"abcdedc\") == \"NO\", \"Wrong solution for the 2nd example\"\nassert solution(\"aaabbcbb\") == \"YES\", \"Wrong solution for the 3rd example\"\nassert solution(\"abcde\") == \"YES\", \"Wrong solution for the 4th example\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)",
        "num_ids_2": 45,
        "num_ids_4": 89
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"25\"\n\"\"\"\n\nfrom typing import List",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"1 1000000000\") == \"1\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 34
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"-1\"\nassert solution(\"2 2\") == \"25\"\nassert solution(\"100 3\") == \"-1\"\nassert solution(\"4 5\") == \"25\"\nassert solution(\"4 6\") == \"10\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2, 2) == 25\n\"\"\"\nimport sys\nimport math",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\nassert solution('1 1') == '-1'\n\nassert solution('2 2') == '25'\n\nassert solution('1 2') == '-1'\n\nassert solution('1 10') == '5'",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2') == '25'\nassert solution('2 3') == '-1'\n\"\"\"\n\nA, B = input().split()\nA = int(A)\nB = int(B)\nans = 10**9\nfor i in range(1, B+1):\n    for j in range(1, A+1):\n        if i * 0.08 <= j and j <= i * 0.1:\n            ans = min(ans, j)\n\nprint(ans) if ans!= 10**9 else print(-1)\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n25\\n8\\n10\\n') == '25'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"5 2\") == \"15\"\nassert solution(\"1 100\") == \"100\"\nassert solution(\"2 4\") == \"15\"\n\"\"\"\nimport sys\nimport math\nfrom math import floor\n\na, b = map(int, sys.stdin.readline().split())\n\nprice = 0\nfor i in range(a, b + 1):\n    if floor((i * 0.1)) > 0:\n        price = i\n        break",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"25\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == '25'\nassert solution('3 10') == '-1'\nassert solution('50 50') == '25'\nassert solution('60 10') == '25'\nassert solution('40 10') == '-1'\n\n-----\nYou want to make a profit of at least 100 yen.\n\nThe price of a product before tax is A yen.\nThe amount of consumption tax on the product is B yen.\n\nWhat is the price of the product after tax?\n\n-----Constraints-----\n - 1 \\leq A \\leq B \\leq 100\n - A and B are integers.\n - A \u2264 B\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nPrint an integer representing the lowest price of a product after tax such that the profit is at least 100 yen.\n\n-----Sample Input-----\n3 6\n\n-----Sample Output-----\n18\n\n-----\nA = A - B * 0.8\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A - B * 0.1\nA = A",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1') == 'YES\\n1'\nassert solution('2 2') == 'NO'\nassert solution('4 4') == 'NO'\nassert solution('8 4') == 'NO'\nassert solution('10 5') == 'NO'\n",
        "num_ids_2": 25,
        "num_ids_4": 47
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 4\") == \"NO\"\nassert solution(\"8 3\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"9 4\") == \"NO\"\nassert solution(\"5 8\") == \"NO\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == 'YES\\n1'\nassert solution(\"6 1\") == 'NO\\n'\nassert solution(\"8 1\") == 'YES\\n1 1 1 1 1 1 1'\nassert solution(\"10 2\") == 'YES\\n1 1 1 1 1 1 1 1 1 1 1'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 27,
        "num_ids_4": 71
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4\") == \"YES\\n2 4\"\nassert solution(\"5 3\") == \"NO\"\n\nassert solution(\"9 9\") == \"NO\"\nassert solution(\"7 7\") == \"YES\\n5 5 5 5 5\"\n\nassert solution(\"9 5\") == \"NO\"\n",
        "num_ids_2": 26,
        "num_ids_4": 55
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 2\") == \"NO\"\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('26 6') == 'YES'\nassert solution('8 3') == 'NO'\nassert solution('1 1') == 'YES'\nassert solution('9 4') == 'NO'\n\"\"\"\nimport math",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('26 6\\n') == 'YES\\n1 2 4 5 6 8'\nassert solution('8 3\\n') == 'NO\\n'\nassert solution('1 1\\n') == 'YES\\n1'\nassert solution('9 4\\n') == 'NO\\n'\n\nprint(solution(stdin))\n",
        "num_ids_2": 36,
        "num_ids_4": 67
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\") == \"YES\"\nassert solution(\"2 1\") == \"YES\"\nassert solution(\"4 6\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"7 2\") == \"NO\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'NO'\nassert solution('5 6') == 'NO'\nassert solution('8 3') == 'NO'\nassert solution('1 1') == 'YES'\nassert solution('9 4') == 'NO'\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3') == 'NO'\nassert solution('1 1') == 'YES'\nassert solution('9 4') == 'NO'",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == '3'\n\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == '5'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == '3'\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 6\\n10 -2\\n8 -1') == 3\n\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == 5\n\nassert solution('3 2\\n300 -300\\n1 299\\n1 123') == 3\n\nprint('Success')",
        "num_ids_2": 51,
        "num_ids_4": 73
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 3\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == 5\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == '3'\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == '5'\n",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"\n",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == '3'\n\"\"\"\n\nstdin = \"\"\"3 4\n4 6\n10 -2\n8 -1\"\"\"\n\nn, r = [int(i) for i in stdin.split('\\n')[0].split(' ')]\na, b = [int(i) for i in stdin.split('\\n')[1].split(' ')]\nd = {a: b}\nfor i in range(2, n):\n    a, b = [int(i) for i in stdin.split('\\n')[i].split(' ')]\n    if a not in d:\n        d[a] = b\n    else:\n        if b > d[a]:\n            d[a] = b\nprint(max([i for i in d.keys() if r - d[i] >= 0]))\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == 3\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == 5\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"\n\"\"\"\n\nn, r = list(map(int, input().split()))\narr = [tuple(map(int, input().split())) for _ in range(n)]\narr.sort(key=lambda x: x[0], reverse=True)\n\ns = r\nans = 0\nfor a, b in arr:\n    if s >= a:\n        s -= a\n        ans += 1\n    else:\n        break\n\nprint(ans)\n",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\"\"\"\nimport itertools\nimport math",
        "num_ids_2": 83,
        "num_ids_4": 127
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO'\nassert solution('1\\n10') == 'YES\\n10'\n\nsolution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') # YES\nsolution('3\\n1 1 1 1 1 3 3 3 3') # YES\nsolution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') # NO\nsolution('1\\n10') # YES\n\"\"\"",
        "num_ids_2": 83,
        "num_ids_4": 127
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 1 1 1 3 3 3 3\\n\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\\n\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\\n\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\\n\") == \"NO\"\nassert solution(\"1\\n10\\n\") == \"YES\\n10 \n",
        "num_ids_2": 81,
        "num_ids_4": 144
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"5\") == \"YES\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\\n\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\\n\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\nassert solution(\"1\\n10\") == \"YES\\n10\\n\"\nassert solution(\"4\\n2 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\n",
        "num_ids_2": 92,
        "num_ids_4": 138
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"",
        "num_ids_2": 83,
        "num_ids_4": 111
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\n-----Description-----\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0447\u0438\u0441\u043b\u043e $n$. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u043f\u0440\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0443\u0436\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0447\u0438\u0441\u0435\u043b \u0447\u0438\u0441\u043b\u0430\u043c\u0438, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e $n$. \u0415\u0441\u043b\u0438 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0443 \"NO\".\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0446\u0435\u043b\u043e\u0435 \u043d\u0435\u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $n \\ge 1$, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u0430, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c, \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u043e\u0442 1 \u0434\u043e $n$. \u0415\u0441\u043b\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0443 \"NO\".\n\n\nSample Input 1:\n\n3\nSample Output 1:\n\n1 2 3\nSample Input 2:\n\n3\n1 1 1 1\nSample Output 2:\n\nNO\nSample Input 3:\n\n4\n1 2 1 9 8 4 3 8 8 3 4 8 9",
        "num_ids_2": 83,
        "num_ids_4": 127
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('4\\n1 1 1 1 1 3 3 3 3') == 'NO'\nassert solution('1\\n10') == 'YES\\n10'\n\nprint(\"Successfully passed all tests.\")\n",
        "num_ids_2": 83,
        "num_ids_4": 120
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\\n'\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == 'YES\\n1 3 1\\n3 1 3\\n1 3 1\\n'",
        "num_ids_2": 92,
        "num_ids_4": 92
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\\n\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\\n\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\\n\"\nassert solution(\"1\\n10\") == \"YES\\n10 \n\n\"\"\"\n",
        "num_ids_2": 92,
        "num_ids_4": 138
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 4\n4 6\n10 -2\n8 -1''') == 'YES'\nassert solution('''3 5\n4 -5\n4 -2\n1 3\n''') == 'YES'\nassert solution('''4 4\n5 2\n5 -3\n2 1\n4 -2\n''') == 'YES'\nassert solution('''3 10\n10 0\n10 -10\n30 0\n''') == 'NO'\nassert solution('''4 10\n10 0\n10 -10\n30 0\n''') == 'NO'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 4\n4 6\n10 -2\n8 -1''') == 'YES'\nassert solution('''3 5\n4 -5\n4 -2\n1 3\n''') == 'YES'\nassert solution('''4 4\n5 2\n5 -3\n2 1\n4 -2\n''') == 'YES'\nassert solution('''3 10\n10 0\n10 -10\n30 0\n''') == 'NO'\n\n'''\n\u041f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0448\u0430\u0440\u0430 \u0441 \u0440\u0430\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c d \u043d\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 v \u0437\u0430 \u043e\u0434\u043d\u0443 \u043e\u0442\u0440\u0435\u0437\u043a\u0443 t\n\u041f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0448\u0430\u0440\u0430 \u0441 \u0440\u0430\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c d \u043d\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 v \u0437\u0430 \u043e\u0434\u043d\u0443 \u043e\u0442\u0440\u0435\u0437\u043a\u0443 t\n\n\u0412\u044b\u0441\u043e\u0442\u0430 \u043f\u043e\u043b\u044f: h\n\u0428\u0430\u0440\u0438\u043a: R\n\u041f\u043e\u043b\u0435 \u0441 \u0448\u0430\u0440\u0438\u043a\u043e\u043c: O\n\u0420\u0430\u0437\u043c\u0435\u0440 \u0448\u0430\u0440\u0438\u043a\u0430: r\n\u041d\u043e\u043c\u0435\u0440 \u043e\u0442\u0440\u0435\u0437\u043a\u0430: num\n\u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0434\u043e \u0448\u0430\u0440\u0438\u043a\u0430: d\n\u0412\u0435\u043a\u0442\u043e\u0440 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f \u0448\u0430\u0440\u0438\u043a\u0430: v\n\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0441\u0432\u043e\u0431\u043e\u0434\u044b \u043e\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f\n\u041e\u0442\u0440\u0435\u0437\u043a\u0438 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442 \u0441 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u0435\u043c \u043e\u0442\u0440\u0435\u0437\u043a\u0430 \u0441 \u043d\u043e\u043c\u0435\u0440\u043e\u043c num\n\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044e \u0448\u0430\u0440\u0438\u043a\u0430\n\u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0448\u0430\u0440\u0438\u043a\u0430 \u0432 \u043d\u043e\u0432\u043e\u043c \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0438\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u043d\u0430 \u043e\u0442\u0440\u0435\u0437\u043a\u0435 \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0448\u0430\u0440\u0438\u043a\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0438\u0437 \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432 \u0432 \u043f\u043e\u043b\u0435 \u0441 \u0448\u0430\u0440\u0438\u043a\u043e\u043c\n\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0448\u0430\u0440\u0438\u043a\u0430: r\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u043d\u0430 \u043e\u0442\u0440\u0435\u0437\u043a\u0435 \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0448\u0430\u0440\u0438\u043a\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0438\u0437 \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432 \u0432 \u043f\u043e\u043b\u0435 \u0441 \u0448\u0430\u0440\u0438\u043a\u043e\u043c\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0448\u0430\u0440\u0438\u043a \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u043b\u0435\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0448\u0430\u0440\u0438\u043a \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u043b\u0435\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u043d\u0430 \u043e\u0442\u0440\u0435\u0437\u043a\u0435 \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0448\u0430\u0440\u0438\u043a\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0438\u0437 \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432 \u0432 \u043f\u043e\u043b\u0435 \u0441 \u0448\u0430\u0440\u0438\u043a\u043e\u043c\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0448\u0430\u0440\u0438\u043a \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u043b\u0435\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0448\u0430\u0440\u0438\u043a \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u043b\u0435\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u043d\u0430 \u043e\u0442\u0440\u0435\u0437\u043a\u0435 \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0448\u0430\u0440\u0438\u043a\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0438\u0437 \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432 \u0432 \u043f\u043e\u043b\u0435 \u0441 \u0448\u0430\u0440\u0438\u043a\u043e\u043c\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0448\u0430\u0440\u0438\u043a \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u043b\u0435\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0448\u0430\u0440\u0438\u043a \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u043b\u0435\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0448\u0430\u0440\u0438\u043a \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u043b\u0435\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0432 \u043f\u043e\u043b\u0435 \u0441 \u0448\u0430\u0440\u0438\u043a\u043e\u043c \u043d\u0435\u0442 \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432\n\u041a\u0430\u043a \u043c\u044b \u0443\u0437\u043d\u0430\u043b\u0438, \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0439 \u043a\u0443\u0431\u0438\u043a \u0438\u043c\u0435\u0435\u0442 \u0437\u0430\u043a\u0440\u0430\u0448\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0438 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0432 \u043f\u043e\u043b\u0435 \u043a\u0443\u0431\u0438\u043a\u0430 (0, 0, 0). \u0412\u044b\u0441\u043e\u0442\u043e\u0439 \u043f\u043e\u043b\u044f \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 h.\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\n\"\"\"\n",
        "num_ids_2": 52,
        "num_ids_4": 83
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == 'YES'\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == 'YES'\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == 'YES'\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == 'NO'\nassert solution(\"1 10\\n10 1\\n10 -1\\n10 0\\n\") == 'YES'\n",
        "num_ids_2": 52,
        "num_ids_4": 109
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n\"\"\"\n\nn, r = map(int, input().split())\np = [tuple(map(int, input().split())) for _ in range(n)]\np.sort(key=lambda x: x[1], reverse=True)\n\ncur = r\nfor a, b in p:\n    if cur >= a:\n        cur += b\n    else:\n        print(\"NO\")\n        exit()\nprint(\"YES\")\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\n\n-----Problem-----\n\n\u0423\u0447\u0435\u0431\u043d\u0430\u044f \u0433\u0440\u0443\u043f\u043f\u0430 \u0432\u044b\u044f\u0441\u043d\u0438\u043b\u0430, \u0447\u0442\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043a \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u0431\u0443\u0434\u0435\u0442 O(log(logn)). \u0422\u0430\u043a \u043a\u0430\u043a \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0434\u043e 10 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u043c\u0438, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c, \u0447\u0442\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0447\u0430\u0441\u0442\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u0422\u043e\u0433\u0434\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435 \u0435\u0441\u0442\u044c \u043b\u0438 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0447\u0438\u0441\u043b\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $l$ \u2014 \u0434\u043b\u0438\u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0447\u0438\u0441\u043b\u0430.\n\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e $n$.\n\n\u0412 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e $k$.\n\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 $k$ \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043f\u043e $k$ \u0447\u0438\u0441\u0435\u043b, \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 10000 \u0438 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 $l$.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \"YES\", \u0435\u0441\u043b\u0438 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u0438\u043d\u0430\u0447\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \"NO\".\n\n\n-----Bite-----",
        "num_ids_2": 52,
        "num_ids_4": 83
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3 4\n4 6\n10 -2\n8 -1\n''') == 'YES'\n\nassert solution('''\n3 5\n4 -5\n4 -2\n1 3\n''') == 'YES'\n\nassert solution('''\n4 4\n5 2\n5 -3\n2 1\n4 -2\n''') == 'YES'\n\nassert solution('''\n3 10\n10 0\n10 -10\n30 0\n''') == 'NO'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == output\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n\n\n'''",
        "num_ids_2": 53,
        "num_ids_4": 80
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3 \"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1 \"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 \"",
        "num_ids_2": 53,
        "num_ids_4": 80
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0'",
        "num_ids_2": 53,
        "num_ids_4": 80
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0\"\n",
        "num_ids_2": 54,
        "num_ids_4": 82
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == 'YES\\n0 1 0 2 2 0 3 '\nassert solution(\"10 1 11\\n1\") == 'YES\\n0 0 0 0 0 0 0 0 0 0 1 '\nassert solution(\"10 1 5\\n2\") == 'YES\\n0 0 0 0 1 1 0 0 0 0 0 '\n\nprint(\"Well done!\")\n",
        "num_ids_2": 54,
        "num_ids_4": 82
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0\"\n",
        "num_ids_2": 54,
        "num_ids_4": 82
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3 \"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1 \"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0 \"\nassert solution(\"100 1 10\\n100\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
        "num_ids_2": 54,
        "num_ids_4": 912
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 2\\n1 2 1\\n\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0\"\n\"\"\"",
        "num_ids_2": 58,
        "num_ids_4": 88
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3 2\\n1 2 1\\n') == 'YES\\n0 1 0 2 2 0 3\\n'\nassert solution('10 1 11\\n1\\n') == 'YES\\n0 0 0 0 0 0 0 0 0 0 1\\n'\nassert solution('10 1 5\\n2\\n') == 'YES\\n0 0 0 0 1 1 0 0 0 0 0\\n'\nassert solution('10 1 5\\n3\\n') == 'NO\\n'\nassert solution('10 1 5\\n4\\n') == 'NO\\n'\n",
        "num_ids_2": 62,
        "num_ids_4": 113
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3 \"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1 \"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 \"",
        "num_ids_2": 53,
        "num_ids_4": 80
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 3\nassert solution(\"asdfasdf\") == 3\nassert solution(\"a\") == 1\nassert solution(\"ab\") == 1\n",
        "num_ids_2": 17,
        "num_ids_4": 36
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('asdfasdf') == 3\nassert solution('abcde') == 0\nassert solution('bbaba') == 3\n\"\"\"\nimport sys\n\ns = sys.stdin.readline().strip()\nt = sys.stdin.readline().strip()\n\nlength = len(s)\nmax_len = 0\nfor i in range(length):\n    # if t == '' or s[i:i+len(t)] == t:\n    if t in s:\n        start_idx = s.index(t[0])\n        end_idx = s.index(t[-1])\n        # if start_idx > end_idx:\n        #     s = s[:start_idx] + s[end_idx+1:]\n        # else:\n        s = s[:start_idx] + s[end_idx+1:]\n    else:\n        max_len = max(max_len, len(s[i:]))\n        s = s[:i] + s[i+1:]\n\nprint(max_len)\n",
        "num_ids_2": 20,
        "num_ids_4": 29
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abcde') == 3\nassert solution('abcd') == 2\nassert solution('sadfsdf') == 3\nassert solution('asdfasdf') == 3\nassert solution('asdf') == 0\n",
        "num_ids_2": 18,
        "num_ids_4": 40
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"asdfasdf\") == \"3\"\nassert solution(\"bbaba\") == \"3\"\nassert solution(\"bb\") == \"1\"\nassert solution(\"ab\") == \"1\"\nassert solution(\"bc\") == \"1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 44
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 2\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 0\nassert solution(\"\") == 0\n",
        "num_ids_2": 17,
        "num_ids_4": 33
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "num_ids_2": 1517,
        "num_ids_4": 1517
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 1\nassert solution(\"asdfasdf\") == 3\nassert solution(\"\") == 0\nassert solution(\"a\") == 0\n",
        "num_ids_2": 17,
        "num_ids_4": 35
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('abcde') == 0\nassert solution('bbaba') == 3\nassert solution('baaba') == 2\nassert solution('abcde') == 0\n",
        "num_ids_2": 17,
        "num_ids_4": 35
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"test\") == \"tt\"\nassert solution(\"\") == \"\"\nassert solution(\"tst\") == \"tst\"\nassert solution(\"tstt\") == \"stt\"\nassert solution(\"tttt\") == \"tt\"\n",
        "num_ids_2": 17,
        "num_ids_4": 42
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('test') == 1\nassert solution('test') == 1\nassert solution('tst') == 1\nassert solution('tt') == 1\nassert solution('et') == 1\n",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\n\n\"\"\"\n\nimport math\nfrom decimal import *",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2.5') == '10 9'\nassert solution('2.3') == '11 11'\nassert solution('2.4') == '12 12'\nassert solution('2.2') == '10 10'\nassert solution('2.6') == '11 11'\n\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n\nprint(solution(input()))\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\n\nfrom math import ceil, floor",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\nassert solution(\"3.1415\") == \"3 5\"\n",
        "num_ids_2": 28,
        "num_ids_4": 57
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))\n\nprint(solution('1.200000'))\nprint(solution('2.572479'",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2.572479\") == \"9 3\"\nassert solution(\"1.200000\") == \"3 2\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1.200000') == '3 2'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\n\nimport re",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\") == \"YES\"\nassert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 3 3\\n') == 'YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\\n'\n\nassert solution('6 2 3\\n') == 'NO\\n'\n\nassert solution('10 4 3\\n') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n'\n\nassert solution('8 5 3\\n') == 'YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\\n'\n\n\"\"\"",
        "num_ids_2": 52,
        "num_ids_4": 156
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 3 3\\n') == 'YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\\n'\nassert solution('6 2 3\\n') == 'NO\\n'\nassert solution('10 4 3\\n') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n'\nassert solution('8 5 3\\n') == 'YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\\n'\n\nprint(solution(stdin))\n\n\n-----P3-----\n\nThere is an undirected graph with $n$ vertices and $m$ edges, and after removing exactly $k$ edges, the graph becomes a tree. Find the number of connected components of this graph after removing the edges.\n\nInput\nThe first line of the input contains integers $n$ and $m$ ($1 \\le n \\le 100, \\; 1 \\le m \\le \\frac{n(n-1)}{2} \\le 10^{5}$) \u2014 the number of vertices and the number of edges, respectively.\n\nThe next $m$ lines of the input contain $2$ integers each ($1 \\le a, b \\le n$), meaning that the line $i$ of the input contains two integers $a_i$ and $b_i$ \u2014 the endpoints of the edge that was removed on the line $i$, and it is guaranteed that no two edges share the same endpoints.\n\nIt is guaranteed that after the removal of the given $k$ edges, there are exactly $n - k$ connected components.\n\nOutput\nPrint the number of connected components of the graph after removing the edges.\n\nExamples\nInput\n4 2\n2 1\n3 2\n1 4\nOutput\n1\n\nInput\n6 5\n2 5\n3 2\n4 3\n3 6\n4 2\n5 1\nOutput\n2\n\nInput\n8 7\n1 7\n2 7\n3 8\n4 8\n5 8\n6 8\n7 5\n7 6\nOutput\n2\n\nInput\n5 4\n1 2\n3 1\n4 2\n5 1\nOutput\n1\n\nInput\n5 5\n1 2\n1 3\n2 4\n3 5\n4 5\nOutput\n1\n\n-----P2-----\n\nYou are given a string s of even length consisting of digits from 0 to 9. You are also given 3 integers t, c and k.\n\nYour task is to replace all the digits in s by digits from the set {0, 1,..., k} such that the resulting string is the lexicographically smallest one that contains exactly c digits 0's and exactly t digits 1's.\n\nReturn the lexicographically smallest string with the given conditions and length as a string.\n\nIf it is impossible to replace the digits in s to obtain the lexicographically smallest string with the given conditions, return the empty string.\n\nExamples\n1) s = \"111110111\" t = 2 c = 5 k = 2\noutput = \"1110010111\"\nExplanation: Replace the digits in s at indices 2, 4, 6, 7 and 8 to get the lexicographically smallest string with 2 0's and 5 1's.\n\n2) s = \"101111010\" t = 3 c = 4 k = 3\noutput = \"1110110111\"\nExplanation: Replace the digits in s at indices 3, 6, 7, 10, 11 and 12 to get the lexicographically smallest string with 3 0's and 4 1's.\n\n3) s = \"111111\" t = 1 c = 1 k = 2\noutput = \"11\"\nExplanation: There are no possible strings with one 0 and one 1 since the given conditions do not allow to replace more than 1 digit.\n\n4) s = \"1011110111111011011111\" t = 5 c = 4 k = 5\noutput = \"\"\nExplanation: Since there are no possible strings with 4 0's and 5 1's, return the empty string.\n\n-----P1-----\n\nYou are given a string s and a single character c.Your task is to modify the string in the following way:\n\nremove all occurrences of c from s\nconcatenate the character c with itself to all of the substrings of s that were not modified so far.\nReturn the resulting string.\n\nExamples\n1) s = \"azxxzy\" c = \"z\"\noutput = \"axaxax\"\nExplanation:\n\nWe concatenate c to itself and modify the substrings that do not contain c:\n\ns becomes \"axaxax\"\nNote that the substrings that contain c will not be modified.\n\n2) s = \"axaxaxax\" c = \"x\"\noutput = \"axaxaxax\"\nExplanation:\n\nWe concatenate c to itself and modify the substrings that do not contain c:\n\ns becomes \"axaxaxax\"\nNote that the substrings that contain c will not be modified.\n\n3) s = \"axxx\" c = \"x\"\noutput = \"axxx\"\nExplanation:\n\nWe concatenate c to itself and modify the substrings that do not contain c:\n\ns becomes \"axxx\"\nNote that the substrings that contain c will not be modified.\n\n4) s = \"axxaxx\" c = \"x\"\noutput = \"axaxaxx\"\nExplanation:\n\nWe concatenate c to itself and modify the substrings that do not contain c:\n\ns becomes \"axaxaxx\"\nNote that the substrings that contain c will not be modified.\n\n-----P0-----\n\nYou are given a string s consisting of digits.\n\nLet's denote the index of the rightmost non-zero digit in the decimal representation of this string by r.\n\nYou are also given an integer k.\n\nYour task is to modify the string in the following way:\n\ndelete all digits from s except for the rightmost r digits with the k'th ones on the right side of the deleted digits\nappend the remaining digits to the end of the number\nReturn a string consisting of only non-zero digits from s.\n\nNote: this is a famous \"Russian Peasant\" problem.\n\nExamples\n1) s = \"1234567890\" and k = 1\noutput = \"9\"\nExplanation:\n\nDelete all digits from s except for the rightmost 1 digit on the right side of the deleted digits:\n\ns becomes \"1234\", r = 2\n\nDelete all digits from s except for the rightmost 2 digits on the right side of the deleted digits:\n\ns becomes \"12\", r = 2\n\nDelete all digits from s except for the rightmost 2 digits on the right side of the deleted digits:\n\ns becomes \"\", r = 0\n\nAppend all remaining digits to the end of the string:\n\ns",
        "num_ids_2": 52,
        "num_ids_4": 156
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == \"NO\"\n\nassert solution('8 5 3') == \"YES\"\nassert solution('10 4 3') == \"YES\"\nassert solution('6 2 3') == \"NO\"\nassert solution('10 4 5') == \"YES\"\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import combinations\n\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"6 3 3\"), \"YES\")\n        self.assertEqual(solution(\"6 2 3\"), \"NO\")\n        self.assertEqual(solution(\"10 4 3\"), \"YES\")\n        self.",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 5 3\\n\") == \"YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\"\nassert solution(\"6 3 3\\n\") == \"NO\"\nassert solution(\"10 4 3\\n\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\n",
        "num_ids_2": 56,
        "num_ids_4": 106
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 3\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\nassert solution(\"8 5 3\") == \"YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\"\n",
        "num_ids_2": 44,
        "num_ids_4": 140
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"10 8 3\") == \"YES\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"01010\") == \"1100\"\nassert solution(\"111001\") == \"101100\"\nassert solution(\"101010\") == \"110010\"\nassert solution(\"111111\") == \"101110\"\nassert solution(\"100100\") == \"110110\"\n",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 1') == '1100'\nassert solution('2 2 1') == '1100'\nassert solution('1 2 2') == '1101'\nassert solution('1 2 3') == '1110'\nassert solution('2 2 3') == '1110'\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\") == \"11\"\nassert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 1\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\n",
        "num_ids_2": 24,
        "num_ids_4": 51
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"01010\") == \"1100\"\nassert solution(\"111001\") == \"101100\"\nassert solution(\"110110\") == \"101110\"\nassert solution(\"111010\") == \"101010\"\nassert solution(\"111011\") == \"101011\"\n",
        "num_ids_2": 23,
        "num_ids_4": 49
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101010\") == \"110010\"\nassert solution(\"111001\") == \"110010\"\nassert solution(\"011010\") == \"110010\"\nassert solution(\"010101\") == \"110011\"\nassert solution(\"101111\") == \"110100\"\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\n\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"010\") == \"1100\"\nassert solution(\"11101\") == \"101100\"\nassert solution(\"101010\") == \"110010\"\nassert solution(\"1111111011110101010\") == \"10110110011100101010\"\nassert solution
        "num_ids_2": 22,
        "num_ids_4": 56
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"111000\") == \"101010\"\nassert solution(\"101010\") == \"111010\"\n\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 1\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\n\n\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"111001\") == \"101100\"\nassert solution(\"111010\") == \"110010\"\nassert solution(\"111011\") == \"100110\"\nassert solution(\"111111\") == \"101101\"\nassert solution(\"111110\") == \"111011\"\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ab') == 'ac'\nassert solution('ac') == 'acbac'",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ac\") == \"ab\"\nassert solution(\"bc\") == \"cb\"\n\"\"\"\n\nimport itertools",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bb\"\nassert solution(\"bb\") == \"ac\"\nassert solution(\"ac\") == \"bc\"\nassert solution(\"aa\") == \"bc\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input_str) == output_str",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ab') == 'ac'\nassert solution('ca') == 'bbac'\nassert solution('bb') == 'acbbac'\n\"\"\"\n\nn = int(input())\ns = input()\nt = input()\n\n\nres = ''\nfor i in range(2*n):\n    if s[i%2] == 'a':\n        if t[i%2] == 'c':\n            res += 'c'\n        else:\n            res += 'a'\n    elif s[i%2] == 'b':\n        if t[i%2] == 'c':\n            res += 'a'\n        else:\n            res += 'b'\n    else:\n        if t[i%2] == 'b':\n            res += 'b'\n        else:\n            res += 'c'",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"cbac\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"cc\") == \"ac\"\nassert solution(\"aa\") == \"ac\"\nassert solution(\"bc\") == \"ac\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ab\") == \"abc\"\nassert solution(\"ca\") == \"cac\"\nassert solution(\"bb\") == \"bac\"\n\nassert solution(\"ab\") == \"abc\"\nassert solution(\"ca\") == \"cac\"\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"cc\"\nassert solution(\"bb\") == \"bc\"\nassert solution(\"abccccc\") == \"ccc\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bbac\"\nassert solution(\"bb\") == \"bc\"\nassert solution(\"bc\") == \"bbac\"\nassert solution(\"bcb\") == \"bbac\"\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2') == '3 1 2'\nassert solution('5\\n1 1 1 1') == '1 2 3 4 5'\nassert solution('4\\n1 2 2') == '-1'\n",
        "num_ids_2": 36,
        "num_ids_4": 52
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == '3 1 2'\nassert solution(\"5 1 1 1\") == '1 2 3 4 5'\nassert solution(\"4 1 2\") == '-1'\n\n------------------------------------------------------------------------------------------------------------------------",
        "num_ids_2": 31,
        "num_ids_4": 44
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 -1 1 1') == '3 1 2 4'\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2\") == \"1 2 3 4\"\nassert solution(\"5 1 2\") == \"1 2 3 4 5\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1') == '1 1 1'\nassert solution('2\\n1\\n2') == '2 1'\nassert solution('4\\n1\\n2\\n3\\n4') == '4 3 2 1'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8') == '8 7 6 5 4 3 2 1'\n",
        "num_ids_2": 26,
        "num_ids_4": 68
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 -2 1\") == \"3 1 2\"\nassert solution(\"5 -1 2\") == \"1 2 3 4 5\"\n\"\"\"\n\n\"\"\"\n    n = int(stdin.readline().strip())\n    line = stdin.readline().strip().split(' ')\n    arr = [int(i) for i in line]\n    if len(arr) < 1 or len(arr) > 200 or len(set(arr))!= len(arr):\n        return -1\n    else:\n        for i in range(n-1):\n            arr[i+1] -= arr[i]\n            if arr[i] < 1 or arr[i+1] < 1 or arr[i] > n or arr[i+1] > n:\n                return -1\n        return''.join([str(i) for i in arr])\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2') == '3 1 2'\nassert solution('5\\n1 1 1 1') == '1 2 3 4 5'\nassert solution('4\\n1 1 1') == '1 2 3 4'\nassert solution('4\\n1 -1') == -1\nassert solution('4\\n-1 1') == -1\n",
        "num_ids_2": 36,
        "num_ids_4": 68
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1 2') == '3 1 2'\nassert solution('5\\n1 1 1 1') == '1 2 3 4 5'\nassert solution('4\\n-1 2 2') == '-1'\n\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 37,
        "num_ids_4": 54
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1 2\") == \"3 1 2\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4\\n-1 2 2\") == \"-1\"\n\"\"\"\nimport numpy as np\nn = int(input())\nq = np.array(list(map(int, input().split())))\np = np.zeros(n, dtype=int)\nfor i in range(n):\n    p[i] = q[i] + (i+1)\np[-1] = q[-1] + (n+1)\nfor i in range(n-1):\n    if p[i] == p[i+1]:\n        print(-1)\n        exit()\nfor i in range(n-1):\n    if p[i] > p[i+1]:\n        print(-1)\n        exit()\nfor i in range(n-1):\n    if p[i] < p[i+1]:\n        print(*p[i:i+2])\n        exit()",
        "num_ids_2": 37,
        "num_ids_4": 53
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\n\"\"\"\n\nimport itertools\n\nn = int(input())\nq = list(map(int, input().split()))\n\nq = [-1 if i == 0 else i for i in q]\n\nfor i in itertools.permutations(q[:-1]):\n    if i == q[:-1]:\n        print(*i, sep=\" \")\n        break\nelse:\n    print(-1)\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == 1\nassert solution('5\\n2 2 2 3 3') == 2\n\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\nassert solution(\"5\\n3 3 4 5 5\") == \"3\"\nassert solution(\"4\\n6 5 7 8\") == \"0\"\n\"\"\"\nimport unittest\n\nclass Test_2020_July_20(unittest.TestCase):\n    def test_solution(self):\n        ",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 2 3\") == \"1\"\n\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n\n\n\"\"\"\nimport math\nimport sys\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n@atexit.register",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\n\n-----\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\") == '1'\nassert solution(\"5\\n2 2 2 3 3\") == '2'\n\"\"\"\n\nimport collections",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 2 3 3\") == \"2\"\nassert solution(\"3 2 1\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"3\\n1 2 3\"\n) == \"1\"\n\nassert solution(\n    \"5\\n2 2 2 3 3\"\n) == \"2\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"5\"\n\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '5'\nprint(solution('10'))\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '5'\n\"\"\"\nimport math\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == '5'",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '5'\nassert solution('100') == '10'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == '5'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2') == '1\\n1\\n0'\nassert solution('2\\n5') == '2\\n1\\n1\\n0'\n\ntry:\n    n = int(stdin)\n    print(5)\nexcept:\n    print(5)\n\"\"\"\n\nn = int(input())",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\n\nassert solution('15\\n5 5 5\\n5 5 5') == '0 15'\n\nassert solution('3\\n0 0 3\\n3 0 0') == '3 3'\n\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"0 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\nassert solution(\"319\\n10 53 256\\n182 103 34\") == \"119 226\"\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 0 3\") == \"0 1\"\nassert solution(\"5 5 5\") == \"0 15\"\nassert solution(\"0 0 3\") == \"3 3\"\nassert solution(\"3 0 0\") == \"3 3\"\nassert solution(\"686\") == \"119 226\"\n\n\"\"\"\n\nn = int(stdin.readline().rstrip())\nalice = [int(x) for x in stdin.readline().rstrip().split(' ')]\nbob = [int(x) for x in stdin.readline().rstrip().split(' ')]\n\na = [0] * n\nb = [0] * n\n\na[0] = alice[0]\nb[0] = bob[0]\nfor i in range(1, n):\n    a[i] = a[i - 1] + alice[i]\n    b[i] = b[i - 1] + bob[i]\n\na = [i % 2 for i in a]\nb = [i % 2 for i in b]\n\na = sum(a)\nb = sum(b)\n\nprint(min(a, b), max(a, b))",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1 1') == '0 1'\nassert solution('15 5 5') == '0 15'\nassert solution('3 0 3') == '3 3'\nassert solution('686 479 178 29') == '22 334'\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1\\n'\nassert solution('3\\n0 0 3\\n3 0 0') == '3 3\\n'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334\\n'\n",
        "num_ids_2": 46,
        "num_ids_4": 69
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 1 1\") == \"0 1\"\nassert solution(\"3\\n0 0 3\") == \"3 3\"\nassert solution(\"686\\n479 178 29\") == \"22 334\"\n\"\"\"\n\nn = int(input().strip())\na = list(map(int, input().strip().split()))\nb = list(map(int, input().strip().split()))\n\nalice = 0\nbob = 0\n\nfor i in range(n):\n    if a[i] > b[i]:\n        alice += 1\n    elif a[i] < b[i]:\n        bob += 1\n    else:\n        pass\nprint(alice, bob)",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 0 1\\n1 1 0\") == \"0 1\"\nassert solution(\"1 1 1\\n1 1 1\") == \"0 0\"\nassert solution(\"1 0 1\\n1 1 1\") == \"0 1\"\nassert solution(\"1 0 1\\n1 1 1\") == \"0 1\"\nassert solution(\"1 0 1\\n1 1 1\") == \"0 1\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"3 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 63
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"15\\n5 5 5\\n5 5 5\") == \"0 15\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"3 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a\\nb') == 'b'\nassert solution('aa\\nbb') == 'aa'\nassert solution('aaa\\nbbb') == 'aaa'\n\nassert solution('5 5 5\\n5 5 5') == '0 15'\n",
        "num_ids_2": 20,
        "num_ids_4": 47
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"1\\n1\") == \"1\\n1 1\"",
        "num_ids_2": 59,
        "num_ids_4": 96
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"7 1 2 2 1 5 3\") == \"3\"\n\nprint(\"Success\")\n\n\"\"\"\nfrom typing import List\n\nfrom bisect import bisect_left, bisect_right\nfrom itertools import accumulate",
        "num_ids_2": 42,
        "num_ids_4": 58
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('7 4 1 2 2 1 5 3') == '3'",
        "num_ids_2": 42,
        "num_ids_4": 59
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == \"2\\n3 4\\n1 1\\n2 2\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"4\\n4 4\\n1 1\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == \"2\\n3 4\\n1 1\\n2 2\"\n",
        "num_ids_2": 75,
        "num_ids_4": 143
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\\n2 2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\\n1 1\"\n",
        "num_ids_2": 71,
        "num_ids_4": 95
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('7 1 2 2 1 5 3') == '3'\n\nassert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\n",
        "num_ids_2": 42,
        "num_ids_4": 74
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\n\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == \"2\\n3 4\\n1 1\\n2 2\"\n\nassert solution(\"4\\n1 1 1 1\\n\") == \"4\\n4 4\\n1 1\\n2 2\\n3 3\"\n\n\"\"\"\n",
        "num_ids_2": 75,
        "num_ids_4": 109
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\") == \"YES\"\nassert solution(\"3 3 1 2\") == \"NO\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == \"YES\"\nassert solution('3\\n3 1 2') == \"NO\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 2') == 'NO'\nassert solution('3 1 2 3') == 'YES'",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 2') == 'NO'\nassert solution('1 2 3') == 'YES'\nassert solution('3 1 2') == 'NO'",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 1 3\") == \"YES\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 2') == 'NO'\nassert solution('3 3 1 2') == 'NO'\nassert solution('3 2 1 1') == 'NO'\nassert solution('3 2 2') == 'YES'\n\n'''\n\n'''\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3') == 'YES'\nassert solution('3\\n3 1 2') == 'NO'\n\nprint(solution(stdin.rstrip()))\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 2 1\") == \"NO\"\nassert solution(\"4 1 2 3\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"3 1 2\") == \"YES\"\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcd\") == \"0\"\nassert solution(\"abcde\") == \"1\"\nassert solution(\"abcdef\") == \"2\"\nassert solution(\"abcdefg\") == \"3\"\nassert solution(\"abcdefgh\") == \"4\"",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('abcd') == '0'\nassert solution('abce') == '0'\nassert solution('abdfec') == '0'\nassert solution('abcdef') == '0'\n",
        "num_ids_2": 19,
        "num_ids_4": 42
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"abcd\") == \"accd\"\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 56
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_data) == solution(test_data).split('\\n')\nassert solution(test_data) == correct_solution(test_data)\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abcd\") == \"accd\"\nassert solution(\"abdfec\") == \"abdfce\"\nassert solution(\"abcde\") == \"accde\"\nassert solution(\"abcdefg\") == \"abcdeg\"",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"a\") == \"a\"\nassert solution(\"aaaa\") == \"aaaa\"\nassert solution(\"aaaaa\") == \"aaaa\"\n",
        "num_ids_2": 29,
        "num_ids_4": 49
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s=\"abcdef\", t=\"abdcef\") == 4\nassert solution(s=\"abcd\", t=\"accd\") == -1\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcd\") == 0\nassert solution(\"accd\") == -1",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\n\"\"\"\n\n\nfrom copy import deepcopy",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\") == \"PPS\"\nassert solution(\"aaa\") in [\"SPS\", \"PSPS\"]\nassert solution(\"ac\") in [\"SP\", \"PS\"]\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\\n\") == \"PSPSPSPS\"\nassert solution(\"3\\na\\naa\\na\\n\") == \"PPSS\"\nassert solution(\"2\\na\\nc\\n\") == \"PS\"\n",
        "num_ids_2": 59,
        "num_ids_4": 75
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"SPS\"\nassert solution(\"abc\") == \"PSPS\"\nassert solution(\"aba\") == \"SPS\"\nassert solution(\"abc\") == \"PSPS\"\nassert solution(\"aba\") == \"SPS\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == 'PS'\nassert solution('b') == 'PS'\nassert solution('abab') == 'PSPSPS'\nassert solution('aaa') in ('PSPS', 'PSPS')\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"SP\"\nassert solution(\"aaaa\") == \"PPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"\") == \"PPSSPSP\"\nassert solution(\"aa\") == \"PS\"\n",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'P'\nassert solution('aa') == 'PS'\nassert solution('aaa') == 'PS'\nassert solution('aab') == 'PS'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ba\") == \"SPPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"abab\") == \"PSPSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"aba\") == \"PS\"\n",
        "num_ids_2": 21,
        "num_ids_4": 45
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ba\") == \"SPPSPSPS\"\nassert solution(\"abab\") == \"PSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"ab\") == \"PS\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\nprefixes = {}\nsuffixes = {}\n\nfor _ in range(N):\n    length = len(sys.stdin.readline().strip())\n    prefixes[length] = []\n    suffixes[length] = []\n    for prefix in prefixes:\n        if prefix > length:\n            break\n        prefixes[length].append(prefix)\n    for suffix in suffixes:\n        if suffix > length:\n            break\n        suffixes[length].append(suffix)",
        "num_ids_2": 25,
        "num_ids_4": 45
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\") == \"PSPSPSPS\"\nassert solution(\"3\\na\\naa\\na\\na\") == \"PPSS\"\nassert solution(\"2\\na\\nc\") == \"PS\"\n\"\"\"",
        "num_ids_2": 57,
        "num_ids_4": 71
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 6 8 10') == 1\nassert solution('2 4 6 8 10') == 1\nassert solution('2 4 6 8 10') == 1\n\nassert solution('3 4 6 8 10') == 2\nassert solution('3 4 6 8 10') == 2\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 4 6 8 10') == 1\nassert solution('1 2 2 3 4') == 2\nassert solution('1 2 2 3 5') == 1\n\n\"\"\"\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"2 4 6 8\") == \"2\"\nassert solution(\"2 4 6 8 11\") == \"1\"\nassert solution(\"2 4 6 8 12\") == \"0\"\nassert solution(\"2 4 6 8 13\") == \"1\"\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 6 8 10') == '1'\nassert solution('2 4 6 8 10') == '1'\nassert solution('6 8 10') == '0'\nassert solution('8 10') == '0'\nassert solution('8 10 10') == '0'\n",
        "num_ids_2": 28,
        "num_ids_4": 51
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4 6 8 10') == 1\n\nassert solution('2 4 6 8 10 2') == 2\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\nassert solution(\"1 1 1 1 1\") == 1\nassert solution(\"3 3 3 3 3\") == 1\nassert solution(\"10 10 10 10 10 10 10 10 10 10 10\") == 1\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 54
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"1 2 4 5 6 7 8 9 10\") == \"2\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"3 2\") == \"1\"\n",
        "num_ids_2": 32,
        "num_ids_4": 54
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10\\n1 1 0 1 1 0 1 0 1 0') == 2\nassert solution('5\\n1 1 0 0 0') == 0\nassert solution('4\\n1 1 1 1') == 0\n",
        "num_ids_2": 35,
        "num_ids_4": 49
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 55
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n1 1 0 0 0\n''') == '0'\nassert solution('''5\n1 1 1 1\n''') == '0'\nassert solution('''4\n1 1 1 1\n''') == '0'\n\n\"\"\"\nimport timeit\nimport random\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 1 1') == '0'\nassert solution('5\\n1 1 0 0 0') == '0'\nassert solution('10\\n1 1 0 1 1 0 1 0 1 0') == '2'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1500)\n\nn = int(input())\na = list(map(int, input().split()))\n\nans = 1\n\nfor i in range(n - 1):\n    if a[i] == 0 and a[i + 1] == 0:\n        ans += 1\n    if a[i] == 1 and a[i + 1] == 1:\n        ans += 1\n\nprint(ans)\n",
        "num_ids_2": 33,
        "num_ids_4": 55
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n",
        "num_ids_2": 39,
        "num_ids_4": 55
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\n\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\n\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n",
        "num_ids_2": 39,
        "num_ids_4": 55
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\n1 1 0 1 1 0 1 0 1 0\\n') == '2'\nassert solution('5\\n1 1 0 0 0\\n') == '0'\nassert solution('4\\n1 1 1 1\\n') == '0'\n",
        "num_ids_2": 43,
        "num_ids_4": 61
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n",
        "num_ids_2": 39,
        "num_ids_4": 55
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 55
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"6\\n6 90 12 18 30 18\") == \"4\"\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 4 5') == '1'\nassert solution('6\\n6 90 12 18 30 18') == '4'\nassert solution('5\\n12\\n24\\n36\\n42') == '3'\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 57
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"1\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 3 4 5') == '2'\nassert solution('5\\n1 2 3 4 10') == '1'\nassert solution('6\\n6 90 12 18 30 18') == '4'\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 52
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '1'\n\"\"\"\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '1'\nassert solution('''6\n6 90 12 18 30 18''') == '4'\n'''\n\n---",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5\\n6 90 12 18 30 18\") == \"4\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"2\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str([2, 4, 6, 2, 10])) == 2\nassert solution(str([1, 2, 3, 4, 5])) == 2\n\n---",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 2\\n2\\n3\\n2\\n') == '2'\n\"\"\"\n\nfrom math import gcd",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\") == 2\nassert solution(\"3\\n1 1 1\") == 2\nassert solution(\"3\\n2 2 2\") == 1\nassert solution(\"4\\n1 2 3 4\") == 3\nassert solution(\"4\\n1 1 1 2\") == 3\n",
        "num_ids_2": 24,
        "num_ids_4": 51
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"5\", \"1st example\"\nassert solution(\"1 2\") == \"2\", \"2nd example\"\n\nimport sys\n\na = list(map(int, sys.stdin.readline().split()))\na.sort()\nfor i in a:\n    print(i, end=\" \")",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n1 2 4 3 3 2') == '2'\n\nimport io, os, time\nassert os.path.basename(__file__) == os.path.basename(__file__.replace('.py', '.out'))\n\nwith open(os.path.join(os.path.dirname(os.path.abspath(__file__)), f'{os.path.basename(__file__).replace(\".py\", \".out\")}'), 'w') as f:\n    f.write(str(solution(open(os.path.join(os.path.dirname(os.path.abspath(__file__)), f'{os.path.basename(__file__)}')).read())))\n\ntime_elapsed = time.time() - since\nprint(f'{os.path.basename(__file__)}: solved in {time_elapsed:.4f}s')\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n3') == '1'\nassert solution('1\\n2\\n2\\n3') == '2'\n",
        "num_ids_2": 20,
        "num_ids_4": 49
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n100') == '1'\nassert solution('1\\n1') == '2'\nassert solution('1\\n2') == '1'\nassert solution('3\\n
        "num_ids_2": 26,
        "num_ids_4": 1724
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 2 4 3 3 2\") == \"2\"\nassert solution(\"100\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\") == \"1\"\n",
        "num_ids_2": 129,
        "num_ids_4": 129
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4') == '2'\nassert solution('4\\n1 2 3 4') == '2'\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2\\n3\") == \"0\"\nassert solution(\"4\\n1 1 1 1\\n1\") == \"0\"\nassert solution(\"1\\n2\") == \"1\"\n\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 49
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 4 3 3 2') == '2'\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"2\"\n\"\"\"\n\nfrom math import factorial\nfrom typing import List",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == 3\n\nassert solution(\"5 10\") == -1\n\nassert solution(\"5 3\") == 2\n\nassert solution(\"1 0 0 0 1\") == 2\n\nassert solution(\"10 3\") == 3\n",
        "num_ids_2": 19,
        "num_ids_4": 40
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == \"3\"\nassert solution(\"5 3\\n0 0 0 0 1\") == \"2\"\nassert solution(\"5 10\\n0 0 0 0 0\") == \"-1\"\nassert solution(\"10 3\\n0 0 0 0 0\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\n",
        "num_ids_2": 37,
        "num_ids_4": 85
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\\n\") == \"3\"\nassert solution(\"6 2\\n0 1 1 0 0 1\\n\") == \"3\"\nassert solution(\"5 10\\n0 0 0 0 0 0\\n\") == \"-1\"\nassert solution(\"6 5\\n0 0 0 0 0 1\\n\") == \"2\"\n\"\"\"\n\n\n\"\"\"\nThis solution is a very smart. We use a greedy approach and do a binary search.\n\nWe start by filling the house with heaters to the left of the first heater (this heater is in the middle by default). So, for every additional heater we add one to the count of heaters.\n\nWe then run a binary search to find the maximum number of heaters we could add to the house. We do this by calculating the maximum possible number of heaters we could have before a certain position. In other words we calculate the number of heaters we could have before an element at position $i$. This number is equal to the number of heaters we have added so far plus the number of heaters we could have before the first heater in the house (because the first heater is in the middle by default).\n\nFinally we subtract one to this value because the next heater should be considered.\n\nWe then repeat the process for the house to the right of the last heater.\n\nAfter we've finished going through the house we have the maximum number of heaters we can add to the house. If this number is less than the number of heaters we already have, then we know that we can't have the whole house warmed up. If it's equal we can replace all the heaters because we can warm up the whole house. If it's greater then we replace all heaters that are closer to the middle of the house.\n\nNote that if our number of heaters is equal to the number of elements in the house we're not able to replace any heaters (because we're not able to add any to the house) so we return -1.\n\nFinally, we return the minimum number of heaters needed to warm the house.\n\n\"\"\"",
        "num_ids_2": 46,
        "num_ids_4": 88
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"6 2\n0 1 1 0 0 1\n\"\"\") == \"3\"\nassert solution(\"\"\"5 3\n0 0 0 0 1\n\"\"\") == \"2\"\nassert solution(\"\"\"5 10\n0 0 0 0 0\n\"\"\") == \"-1\"\nassert solution(\"\"\"10 3\n0 0 1 1 0 1 0 0 0 1\n\"\"\") == \"3\"\n\n\n\"\"\"\n\n4 5\n1 0 0 0 1\n\n3 3\n0 0 1 1\n\n4 8\n0 0 1 1 0 1\n\n2 2\n1 0\n\n3 3\n1 0 0 1\n\n4 8\n0 0 1 1 0 1\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1\\n') == '3'\n\nassert solution('5 3\\n1 0 0 0 1\\n') == '2'\n\nassert solution('5 10\\n0 0 0 0 0\\n') == '-1'\n\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1\\n') == '3'",
        "num_ids_2": 41,
        "num_ids_4": 87
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n0 0 0 0 0\\n') == '3'\nassert solution('5 10\\n0 0 0 0 0\\n') == '-1'\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1\\n') == '3'\n",
        "num_ids_2": 41,
        "num_ids_4": 66
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 0 1 0 0 1') == '3'\nassert solution('5 10') == '-1'\nassert solution('6 2') == '3'\nassert solution('5 3') == '2'\nassert solution('10 3') == '3'\n\n'''\n",
        "num_ids_2": 27,
        "num_ids_4": 49
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 2') == '3'\nassert solution('5 3') == '2'\nassert solution('5 10') == '-1'\nassert solution('10 3') == '3'\n\"\"\"\n\nimport sys\nfrom collections import Counter",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\\n\") == \"3\"\n\nassert solution(\"5 3\\n0 0 0 0 1\\n\") == \"2\"\n\nassert solution(\"5 10\\n0 0 0 0 0\\n\") == \"-1\"\n\nassert solution(\"10 3\\n0 0 0 0 0 0\\n\") == \"3\"",
        "num_ids_2": 41,
        "num_ids_4": 82
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == 3\nassert solution(\"5 3\\n0 0 0 0 1\") == 2\nassert solution(\"5 10\\n0 0 0 0 0\") == -1\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == 3\nassert solution(\"7 3\\n0 0 0 0 0 0 0 1\") == -1\n",
        "num_ids_2": 33,
        "num_ids_4": 71
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 1\nassert solution(5) == 1\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '3'\nassert solution('6') == '3'\n\"\"\"\n\nimport math\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(int(input()))) == str(int(input()))\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '1'\nassert solution('3\\n') == '2'\nassert solution('4\\n') == '2'\nassert solution('5\\n') == '3'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('3\\n') == '3\\n'\nassert solution('3\\n3') == '3\\n3\\n'\nassert solution('3\\n2\\n1') == '3\\n1\\n1\\n'\nassert solution('10\\n2\\n3') == '10\\n2\\n3\\n'\n",
        "num_ids_2": 24,
        "num_ids_4": 66
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"7\"\nassert solution(\"6\") == \"12\"\nassert solution(\"7\") == \"14\"\nassert solution(\"9\") == \"40\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nprint(solution('3'))",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == 3\nassert solution(\"2\") == 2\n\nprint(\"PASSED\")\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nsolutions = []\n\nfor a in range(1, n):\n    for b in range(a, n):\n        c = (n - a - b) / 2\n        if a * b + c == n and c > 0 and a > 0 and b > 0:\n            solutions.append(str(a) + \" \" + str(b) + \" \" + str(c))\n\nprint(len(solutions))\nfor s in solutions:\n    print(s)",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"()()()\") == 0\nassert solution(\"))(((((\") == 0\n\nassert solution(\"((((((((\") == 9\nassert solution(\"(\") == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"())\") == 0\nassert solution(\"(((()))((((((()()((()())((()))()(())))((())))(())))((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())\") == 0\nassert solution(\"(()\") == 1\n\"\"\"\n\nimport unittest",
        "num_ids_2": 73,
        "num_ids_4": 82
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"(((()))(((((())))))\") == 0\nassert solution(\"()())\") == 1\nassert solution(\"(()())\") == 0\nassert solution(\"(()(()))((((())))()\") == 0\nassert solution(\"(((((((((((((((())))())())())())())())())())())((()(((()((()())()(((())))((()))()(())(()((((((()))(())))(((()()()((()())((()(())))((())((((()))))(((((()(())))((()((()()()((((((((((()))()))(())(()))(()()(()((())((()()(((()(()(()()((((()(()(((((((((()))(())(()(()(()((((((((((()))(())()(()()()()(((()))(()((()(()((()()(()((((((((((()))()))(())(()()(()(((())(((()((((((()))()(()()(()(()((((()(((((((((((((((((())(()()(()(()(()((()(((((((((((((((((()((()()()((()(()(((((((((((((((((((((((((())))))()(()(()(()(()(()((()()(((((((((()))((((()()(()(()(()((()(((()((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"(((()))\") == 3\nassert solution(\"((()))\") == 0\nassert solution(\"()()()\") == 0\nassert solution(\"(((()))\") == 3\n\nprint(\"\\nCorrect!\")\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"((()))\") == 1\n\"\"\"\n\n\"\"\"\nimport string\nimport sys\nsys.setrecursionlimit(100010)",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"(()())\") == 3\nassert solution(\"())())(\") == 2\nassert solution(\"((())(())()(()))((()))(()(()))()(()())((()))(())(())(()(()))(())(()())()(()())(()(()))(())()()()(())((()))(()(())()(())()(()(()))(()(())(())())(()()(())((())(()))(()()(())()))(()((()())((()))()(()((()))(()(()))(()(())((())))(()(())((()))()))()()(())()()(()()))()(()(((()(())(((())())((()((()))((((((())))((())(())(((((())))((()(()(((((((())((())((()(()))(()(()(()(()(()()))(()(()()()((()()(()()(()(()(()()))(()()(()(((())((((()(())((()()(()((()()(()((((((()))(())())((()(()()((((((((()()()(()(((()(()(()(()((((((()(())())(()((())((()((((((()))(())(((()))(()(()(()(()(((((((((()()))())((()(()(()((()(()()(((())(((((()(())((()(()()((()(()(()(()((((((((()(()(()(()(((()(((()((((((()))((((((((()(()((((((())(()(()(()(((((((((((((((((((()()(())()(()((()(()(()(((((((((((((((((((()))(((((((((((((((((((()((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((",
        "num_ids_2": 20,
        "num_ids_4": 1669
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"()((()))\") == 1\nassert solution(\"(())(())()\") == 3\nassert solution(\"((()())(())()(()))\") == 0\nassert solution(\"(()((()())())()))\") == 5\n",
        "num_ids_2": 23,
        "num_ids_4": 54
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"((((((((((\") == 3\nassert solution(\"(((((((((((\") == 0\nassert solution(\"(((((((((((\") == 4\nassert solution(\"(((((((((((\") == 2\n\"\"\"\n\nfrom collections import deque\nfrom typing import List, Deque, Set\nfrom functools import lru_cache\nfrom sys import stdin, stdout\n\n\nclass Solution:\n    def solution(self, stdin: List[str]) -> int:\n        n = int(stdin.pop(0))\n        stack = deque()\n        while len(stdin) > 0:\n            c = stdin.pop(0)\n            if c == \")\":\n                if len(stack) == 0:\n                    stack.append(c)\n                else:\n                    if stack[-1] == \"(\":\n                        stack.pop()\n                    else:\n                        stack.append(c)\n            else:\n                stack.append(c)\n\n        count = 0\n        for i, s in enumerate(stack):\n            if s == \"(\":\n                count += 1\n\n        return count\n\n\nclass Solution2:\n    def solution(self, stdin: List[str]) -> int:\n        stack = deque()\n        count = 0\n        for c in stdin:\n            if c == \")\":\n                if len(stack) > 0:\n                    if stack[-1] == \"(\":\n                        stack.pop()\n                        count += 1\n                    else:\n                        stack.append(c)\n                else:\n                    stack.append(c)\n            else:\n                stack.append(c)\n\n        return count\n",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"())\") == 0\nassert solution(\"(())\") == 0\nassert solution(\"())\") == 0\nassert solution(\"()())\") == 0\n",
        "num_ids_2": 18,
        "num_ids_4": 35
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\")(\") == 3\nassert solution(\"()())\") == 3\nassert solution(\"()())\") == 3\nassert solution(\"())(\") == 3\nassert solution(\"()()\") == 0\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a') == 'a'\nassert solution('ba') == 'a'\nassert solution('aab') == 'aa'\nassert solution('ab') == 'a'\nassert solution('aa') == 'a'\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 0\nassert solution(\"tt\") == 0\nassert solution(\"et\") == 1\nassert solution(\"se\") == 2\n",
        "num_ids_2": 17,
        "num_ids_4": 33
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('bbaba') == 3\nassert solution('baaba') == 2\nassert solution('abcde') == 0\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 27
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('a') == 0\nassert solution('aa') == 0\nassert solution('ab') == 0\nassert solution('abc') == 0\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('test') == 'tst'\nassert solution('tst') == 'tst'\nassert solution('tt') == 't'\nassert solution('et') == 'te'\nassert solution('se') =='st'\n",
        "num_ids_2": 23,
        "num_ids_4": 43
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('test') == 0\nassert solution('tst') == 0\nassert solution('tt') == 0\nassert solution('et') == 0\nassert solution('se') == 1\n",
        "num_ids_2": 17,
        "num_ids_4": 33
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"test\") == 1\nassert solution(\"test\", \"t\") == 0\nassert solution(\"test\", \"tes\") == 1\nassert solution(\"test\", \"test\") == 0\n\n\"\"\"\n\nimport sys\n\na = sys.stdin.readline().strip()\nb = sys.stdin.readline().strip()",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == 1\nassert solution(\"tst\") == 1\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 1\nassert solution(\"\") == 0\n",
        "num_ids_2": 17,
        "num_ids_4": 33
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\") == 0\nassert solution(\"a\") == 1\nassert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 1\n\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "num_ids_2": 15,
        "num_ids_4": 32
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('bbaba') == 3, \"Test 1 FAILED\"\nassert solution('bb') == 0, \"Test 2 FAILED\"\nassert solution('asdfasdf') == 3, \"Test 3 FAILED\"\nassert solution('abcde') == 0, \"Test 4 FAILED\"\nassert solution('aaaaa') == 1, \"Test 5 FAILED\"\n",
        "num_ids_2": 33,
        "num_ids_4": 69
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 1 1') == '2'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 1 1') == '2'\nassert solution('2 1 1 1') == '2'\nassert solution('1 1 1 1') == '1'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"1 1 1 1\") == \"2\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 1 1') == '2'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 1 1') == '2'\n\n-------",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 1 1') == '2'\nassert solution('2 1 1 1') == '2'\nassert solution('2 3 1 1') == '6'\nassert solution('2 3 5 1') == '10'\nassert solution('2 3 5 10') == '50'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 1 1') == '2'\n\n\"\"\"\nimport sys\nimport os\nimport math\nimport random\nimport re\nimport time\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\nfrom scipy.stats import binom\nfrom scipy.special import comb\n\nsys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                             os.path.pardir))\nfrom polynomials import Polynomial\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == expected",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 1\") == \"2\"\nassert solution(\"4 5 6 7\") == \"24\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 1 1') == 2\nassert solution('4 5 6 8') == 24\nassert solution('5 6 7 4') == 90\nassert solution('3 4 5 6') == 180\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(b'6\\n9 1 4 4 6 7\\n') == '2'\n\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1 4 4 6 7\\n5\") == 2\n\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom math import log2, ceil, log\nfrom collections import Counter\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6\n9 1 4 4 6 7''') == '2'\n\"\"\"\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 4 6 7\\n5 1 4 4 6 7\") == \"2\"\n\"\"\"\n\nfrom math import ceil\n\nn = int(input())\nlst = list(map(int, input().split()))\n\nans = 1\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"8\n4 1 7 5 1 1 5 1\n\"\"\") == \"2\"\nassert solution(\"\"\"4\n4 1 2 1\n\"\"\") == \"1\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 1 4 4 6 7\") == '2'\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 9 1 4 4 6 7\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 1 9 1 1 1\") == \"3\"\nassert solution(\"4 9 9 9\") == \"1\"\nassert solution(\"8 9 9 9 9\") == \"0\"\n\nassert solution(\"3 1 2 1 3\") == \"0\"\nassert solution(\"2 1 2 1 3\") == \"3\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 4 4 6 7\") == \"2\"\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nd = [int(i) for i in sys.stdin.readline().rstrip().split(' ')]\n\nA = 0\nB = 0\nC = 0",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '6\\n9 1 4 4 6 7'\n) == '2'\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == 3\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\"\"\"\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nm = 0\nfor i in range(n):\n    if (a[i] > l) and (a[i] < r):\n        m += 1\nprint(m)\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 24 21 23\") == 3\n\"\"\"\n\nimport sys\nfrom typing import List\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\nassert solution(\"16 17 14 20 20 11 22\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5 3 1 1') == '3'\nassert solution('2 1 1 3') == '1'\n\"\"\"\n\n\"\"\"\nSOLUTION:",
        "num_ids_2": 21,
        "num_ids_4": 34
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\n\n\"\"\"\n\nfrom typing import List, Tuple, Union\n\na_list = [16, 17, 14, 20, 20, 11, 22]\nn = 7\nh = 24\nl = 0\nr = h - 1\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7 24 21 23''') == '3'\nassert solution('''16 17 14 20 20 11 22''') == '3'\nassert solution('''7 10 6 11''') == '2'\nassert solution('''10 20 16 20 20 10 15 10''') == '4'\nassert solution('''10 20 16 20 20 10 15 10''') == '4'\n",
        "num_ids_2": 35,
        "num_ids_4": 71
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 24 21 23') == 3",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 4 5 8') == '6'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 57
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == 4\nassert solution('5\\n2 10 50 110 250') == 1\nassert solution('6\\n4 7 12 100 150 199') == 3\n",
        "num_ids_2": 35,
        "num_ids_4": 51
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n\n\"\"\"\n\nimport sys\nimport itertools\n\nn = int(sys.stdin.readline().rstrip())\n\nd = [int(x) for x in sys.stdin.readline().rstrip().split()]\n\ncount = 0\nmax_count = 0\nfor x in itertools.combinations(d, n):\n    if len(x) == 1:\n        count += 1\n    else:\n        if x[0] == 2 * x[1] - 1:\n            count += 1\n        else:\n            count = 0\n    if count > max_count:\n        max_count = count\n\nprint(max_count)",
        "num_ids_2": 43,
        "num_ids_4": 63
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\na.sort()\ndp = [1 for _ in range(n)]\nfor i in range(n):\n    for j in range(i):\n        if a[i] % 2 == 0 and a[i] * 2 <= a[j]:\n            dp[i] = max(dp[i], dp[j] + 1)\nprint(max(dp))\n",
        "num_ids_2": 43,
        "num_ids_4": 63
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '5\\n2 10 50 110 250'\n) == '1'\n\nassert solution(\n    '6\\n4 7 12 100 150 199'\n) == '3'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 57
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == 4\nassert solution(\"5\\n2 10 50 110 250\") == 1\nassert solution(\"6\\n4 7 12 100 150 199\") == 3\n\n\n---\nIf you like it, please consider a small tip:\n\nIf you solve this task in the first attempt, don't forget to check your solution for errors in the comments.\n\nThis task was taken from coding train, so the code should be relatively clean and readable.\n\nIf you have any questions, please do not hesitate to ask them in the comments.\n\nHave a nice solution!\n\"\"\"\nimport sys",
        "num_ids_2": 35,
        "num_ids_4": 51
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n\n\"\"\"\n\n\nimport sys\n",
        "num_ids_2": 39,
        "num_ids_4": 57
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == '4'\nassert solution('5\\n2 10 50 110 250') == '1'\nassert solution('6\\n4 7 12 100 150 199') == '3'",
        "num_ids_2": 39,
        "num_ids_4": 57
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\nassert solution('5\\n5 2 11 3 7') == '2 4'\nassert solution('6\\n2 5 10 1 10 2') == '1 4'\n\"\"\"\nimport math",
        "num_ids_2": 36,
        "num_ids_4": 55
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\nassert solution(\"6\\n2 5 10 1 10 2\") == \"1 4\"\n\"\"\"\n\nimport math",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\n\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 11 3 7\") == \"1 4\"\nassert solution(\"6 2 11 3 7\") == \"1 4\"\nassert solution(\"5 2 10 1 10 2\") == \"1 4\"\nassert solution(\"5 2 11 3 7\") == \"1 4\"\n\nimport sys; print(solution(sys.stdin.readline()))\n",
        "num_ids_2": 30,
        "num_ids_4": 61
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(['5', '2', '11', '3', '7']) == '1 4'\nassert solution(['6', '2', '10', '1', '10', '2']) == '1 4'\n\"\"\"\n\nfrom math import gcd\n\nn = int(input())\na = list(map(int, input().split()))\n\nmin_lcm = a[0]\nfor i in range(n):\n    min_lcm = gcd(min_lcm, a[i])\n\nfor i in range(n):\n    if a[i] // min_lcm == 0:\n        print(i+1, i+1)\n        break\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1 1'\nassert solution('2 1') == '1 1'\nassert solution('1 2') == '1 1'\nassert solution('5 1') == '5 1'\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 8 3 6\") == \"1 2\"\nassert solution(\"5 2 11 3 7\") == \"2 4\"\nassert solution(\"6 2 11 3 7\") == \"1 4\"\n\"\"\"\n\nfrom typing import List, Tuple\n",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n2 4 8 3 6''') == '1 2'\nassert solution('''5\n2 4 8 3 6''') == '1 2'\nassert solution('''5\n2 4 8 3 6''') == '1 2'\nassert solution('''5\n2 4 8 3 6''') == '1 2'\nassert solution('''5\n2 4 8 3 6''') == '1 2'\n\n'''\nfrom math import lcm",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == '1 2'\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('121') == '021'\nassert solution('11011') == '11112'\nassert solution('10111010') == '11112'\n\"\"\"\n\ns = stdin",
        "num_ids_2": 22,
        "num_ids_4": 35
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"00111000\") == \"111122\"\nassert solution(\"110110\") == \"111122\"\nassert solution(\"110111\") == \"121110\"\nassert solution(\"1110011\") == \"121110\"\n",
        "num_ids_2": 24,
        "num_ids_4": 52
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0110') == '1010'\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"211200\") == \"211200\"\nassert solution(\"120110\") == \"120120\"\n\nassert solution(\"011\") == \"1011\"\nassert solution(\"111000\") == \"111010\"\n",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('01010') == '01110'\nassert solution('10101010') == '11101110'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 34
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(121) == '021'\nassert solution(211200) == '211220'\nassert solution(120110) == '120120'\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 37
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100110\") == \"210012\"\nassert solution(\"100101\") == \"210110\"\nassert solution(\"1110010\") == \"1110110\"\nassert solution(\"1111010\") == \"1111110\"\nassert solution(\"1111110\") == \"1111100\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"001111\") == \"011110\"\n\"\"\"\n\nimport functools\n\nclass Solution:\n    def __init__(self, s):\n        self.s = s\n\n    def balance(self):\n        \"\"\"\n        The main idea is to replace the characters with another characters in the string which are '0', '1' and '2' (in that order).\n        That way, the string will be balanced. The string is balanced iff the number of '0' characters is equal to the number of '1' characters and the number of '2' characters is equal to the number of '2' characters.\n        \"\"\"\n        # The following numbers are the number of '0' characters, '1' characters, and '2' characters respectively.\n        counts = [self.s.count('0'), self.s.count('1'), self.s.count('2')]\n        # The following variable represents the minimum number of replacements.\n        min_count = functools.reduce(lambda acc, x: acc if x > acc else x, counts)\n\n        # If the string is already balanced, we will return the same string.\n        if counts[0] == min_count and counts[1] == min_count and counts[2] == min_count:\n            return self.s\n\n        # If the string is not balanced, we will replace the minimum number of characters with '0', '1', '2'.\n        for i in range(3):\n            if counts[i] > 0:\n                min_count = min(min_count, counts[i])\n                counts[i] = 0\n        \n        # We will replace the characters with other characters in the order '0', '1', '2'.\n        for i in range(min_count):\n            counts[0] -= 1\n            counts[1] += 1\n            counts[2] -= 1\n            self.s = self.s.replace('0', '0', 1)\n            self.s = self.s.replace('1', '1', 1)\n            self.s = self.s.replace('2', '2', 1)\n        \n        return self.s",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('121') == '021'\nassert solution('100') == '110'\nassert solution('100100') == '101010'\nassert solution('1010') == '10111'\nassert solution('1011010') == '1011111'\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"120110\") == \"120120\"\n\nprint(solution(\"211200\"))",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n4 1\n3\n''') == '6'\nassert solution('''\n6 1\n3\n''') == '4'\nassert solution('''\n6 2\n3\n3\n''') == '3'\nassert solution('''\n3 3\n2\n2\n''') == '1'\nassert solution('''\n4 2\n1\n1\n''') == '4'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n3\") == \"4\"\nassert solution(\"6 1\\n3\") == \"4\"\n\"\"\"\nfrom typing import List\n\nMODULO = 1000000007\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2 2 1') == '4'\nassert solution('3 2 2') == '2'\n'''",
        "num_ids_2": 20,
        "num_ids_4": 32
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('N M\\n a_1\\n a_2\\n.\\n.\\n.\\n a_M') == '4'\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n1\\n\") == \"1\"\nassert solution(\"5 1\\n1\\n\") == \"2\"\nassert solution(\"5 2\\n1\\n3\\n\") == \"3\"\n\n'''\n\nimport math\nfrom functools import reduce\n",
        "num_ids_2": 32,
        "num_ids_4": 51
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''6 1\n3''') == '4'\nassert solution('''7 2\n1\n1\n3\n3\n5\n8''') == '0'\nassert solution('''10 5\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10''') == '6'\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n3\\n3\\n3\") == \"0\\n\"\nassert solution(\"3 2\\n3\\n3\") == \"2\\n\"\nassert solution(\"4 2\\n3\\n3\\n3\") == \"4\\n\"\nassert solution(\"4 5\\n3\\n3\\n3\\n3\") == \"0\\n\"\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 88
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 1\\n3\\n\") == \"4\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2\\n1\\n2\\n\") == \"2\"\nassert solution(\"6\\n5\\n4\\n4\\n3\\n2\\n1\\n1\\n\") == \"4\"\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3') == '4\\n'\nassert solution('6\\n2') == '8\\n'\n\nimport sys",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2 4\") == \"2\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"0 0 1\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2 4\\n\") == \"2\"\n\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"./input.txt\") == \"1\"\n\"\"\"\n\nimport sys\n\nX, K, D = map(int, sys.stdin.readline().rstrip().split())\nresult = abs(X - K * D)\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''6 2 4''') == 2\n\"\"\"\n\nimport sys\n\nX, K, D = [int(x) for x in sys.stdin.readlines()[0].split()]\n\ndestination = (K * D - X) / (K - 1)",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2 4\") == \"2\"\nassert solution(\"12 10 2\") == \"6\"\nassert solution(\"6 3 1\") == \"4\"\n\n\"\"\"\nimport re\n\ninput_string = re.sub(r\"\\s+\", \" \", input())\nX, K, D = [int(n) for n in re.findall(r\"[-+]?\\d+\", input_string)]\n\nprint(min(abs(X - (K * D)), abs(X + (K * D))))\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3\\n') == '2'\n\"\"\"\n\nfrom math import floor\nfrom typing import List, Tuple\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2 4\") == 2\n\n------------------------------------------------------------------------------------------------------------------------\n\n###",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\n\"\"\"\n\ud480\uc774\n\nTakahashi, who lives on the number line, is now at coordinate X. He will make exactly K moves of distance D in the positive or negative direction.\nMore specifically, in one move, he can go from coordinate x to x + D or x - D.\nHe wants to make K moves so that the absolute value of the coordinate of the destination will be the smallest possible.\n\n\uc774\uc9c4 \ud0d0\uc0c9\uc73c\ub85c \uacb0\uad6d\uc5d0\ub294 \uadf8\ub0e5 \uadf8 \uac70\ub9ac\ub85c \uc774\ub3d9\ud574\uc11c \uac00\uc7a5 \uc791\uc740 \uac70\ub9ac\ub85c \ubcc0\uacbd\n\nTakahashi \ud3ec\uc9c0\uc158\uacfc \uac70\ub9ac\ub9cc \uc900\ub2e4.\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == 0\n\nassert solution(\"11\") == 2\n\nassert solution(\"14\") == 0\n\nassert solution(\"61441\") == 2\n\nassert solution(\"571576\") == 10\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 33
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"61441\") == 2\nassert solution(\"2128506\") == 3\n\"\"\"\n\nimport math\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == 2\nassert solution('61441') == 10\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('61441') == 2\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11') == 2\nassert solution('61441') == 10\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\") == 2\nassert solution(\"14\") == 0\nassert solution(\"61441\") == 2\nassert solution(\"571576\") == 10\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 35
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2128506\") == 3\nassert solution(\"61441\") == 2\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11') == '2'\nassert solution('14') == '0'\nassert solution('61441') == '2'\nassert solution('571576') == '10'\n\"\"\"\nfrom collections import Counter\n",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 10\n\"\"\"\n\nimport math\n\nfrom textwrap import dedent\n",
        "num_ids_2": 16,
        "num_ids_4": 25
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\") == 2\n\nassert solution(\"61441\") == 10\n\nassert solution(\"571576\") == 3\n",
        "num_ids_2": 17,
        "num_ids_4": 27
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 3\nassert solution('5') == 5\nassert solution('3') == 3\nassert solution('6') == 6\nassert solution('7') == 7\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == 27\n\"\"\"\n\nimport math",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == 27\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == 27\nprint(solution(\"3\"))\n'''",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == 27\n\"\"\"\n\na = int(input())\n\nprint(a * 9)",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == 27\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == 27\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == 17\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == 27\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == 27\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13\") == 1\nassert solution(\"927\") == 1\nassert solution(\"48\") == 0\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 17,
        "num_ids_4": 25
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13\") == 1\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"13\") == 1\nassert solution(\"927\") == 1\nassert solution(\"48\") == 0",
        "num_ids_2": 17,
        "num_ids_4": 25
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\nassert solution('33') == '0'\nassert solution('23') == '0'\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13\") == 1\nassert solution(\"927\") == 1\nassert solution(\"48\") == 0\n\nprint(solution(\"13\"))\nprint(solution(\"927\"))\nprint(solution(\"48\"))\n\n\n\n--------Test cases---------\n\n4\n5\n6\n7\n8\n9\n15\n16\n18\n19\n20\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794\n795\n796\n797\n798\n799\n800\n801\n802\n803\n804\n805\n806\n807\n808\n809\n810\n811\n812\n813\n814\n815\n816\n817\n818\n819\n820\n821\n822\n823\n824\n825\n826\n827\n828\n829\n830\n831\n832\n833\n834\n835\n836\n837\n838\n839\n840\n841\n842\n843\n844\n845\n846\n847\n848\n849\n850\n851\n852\n853\n854\n855\n856\n857\n858\n859\n860\n861\n862\n863\n864\n865\n866\n867\n868\n869\n870\n871\n872\n873\n874\n875\n876\n877\n878\n879\n880\n881\n882\n883\n884\n885\n886\n887\n888\n889\n890\n891\n892\n893\n894\n895\n896\n897\n",
        "num_ids_2": 17,
        "num_ids_4": 25
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13\") == 1\n\nassert solution(\"927\") == 1\n\nassert solution(\"48\") == 0\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 25
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\nprint(\"Passed\")",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13') == 1\nassert solution('927') == 1\nassert solution('48') == 0\nassert solution('6') == 0\n\n\"\"\"\nfrom collections import Counter\nfrom itertools import product\n\nfrom util.helpers import readlines\n",
        "num_ids_2": 17,
        "num_ids_4": 33
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(int(input()))\n\n\"\"\"\n\nn = int(input())\nlst = list(map(int, input().split()))",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 5 3 1') == '4'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 3 1\") == 4\n\"\"\"\n\nimport unittest\n\nclass Testing(unittest.TestCase):\n\n    def test_1(self):\n        self.assertEqual(solution(\"2 5 3 1\"), 4)\n\n    def test_2(self):\n        self.assertEqual(solution(\"5 6 7 10\"), 14)\n\n    def test_3(self):\n        self.assertEqual(solution(\"5 6 7 10\"), 14)\n\n    def test_4(self):\n        self.assertEqual(solution(\"5 6 7 10\"), 14)",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 5 3 1') == 4\n\"\"\"\n\nn = int(input())\narr = [int(i) for i in input().split()]\n\nprint(sum(arr) if all([a < 10 for a in arr]) else 0)\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5 3 1') == 4\n\n\n-----Example solution-----\n\n\n\"\"\"\n\n\"\"\"\n\nint main() {\n    int N;\n    int M;\n    cin >> N >> M;\n    int a[N];\n    for (int i = 0; i < N; i++) {\n        cin >> a[i];\n    }\n\n    sort(a, a+N);\n\n    int res = 0;\n    for (int i = 1; i <= M; i++) {\n        int cur = a[N-1-i];\n        int next = a[N-2-i];\n        res ^= cur;\n        if (cur == next) {\n            res ^= next;\n        }\n    }\n\n    cout << res;\n}\n\n\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5 3 1\") == \"4\"\n\nprint(solution(\"2 5 3 1\"))\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 3 1\") == \"4\"\n\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5 3 1') == 4\nassert solution('1 2 3 4') == 0\n\n-----Explanation-----\nFor n = 4, the integers are sorted in descending order, and the largest is 5:\n\nGiven array A: [2, 5, 3, 1]\n\nsorted_arr = [1, 3, 5, 2]\n\nThe largest integer is 5:\n\nindex 3 = 2, 1 + 3 = 4\n\nYou need to return 4.\n\n-------\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 3 1\") == 4\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('1 1 1 1') == 0\nassert solution('2 2 2') == 0\nassert solution('1 2 3 4') == 0\nassert solution('2 3 3 3') == 0\n'''\nimport os\nimport io\nimport unittest\n",
        "num_ids_2": 19,
        "num_ids_4": 40
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n\n\n\"\"\"\nimport math\nimport sys\nimport pprint\n\npp = pprint.PrettyPrinter(indent=4)\n",
        "num_ids_2": 22,
        "num_ids_4": 51
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\n\n\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\n\n\"\"\"",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7\\n8 1\\n6 10\") == \"2\\n8\\n1\"\nassert solution(\"4 7\\n8 10\\n6 10\") == \"1\\n8\\n1\"\nassert solution(\"4 7\\n8 10\\n6 11\") == \"1\\n8\\n1\"\n",
        "num_ids_2": 50,
        "num_ids_4": 75
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\n\"\"\"\n\n\nfrom typing import List\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'\nassert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'\nassert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'\nassert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'\nassert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'\n",
        "num_ids_2": 66,
        "num_ids_4": 132
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733') == '2\\n8\\n1\\n999999733\\n1'\nassert solution('9 10\\n999999733 999999732\\n999999733 999999733') == '0\\n999999733\\n1'\nassert solution('1 10\\n999999733 999999732\\n999999733 999999733') == '999999733\\n1'\nassert solution('0 10\\n999999733 999999732\\n999999733 999999733') == '0\\n0'\n",
        "num_ids_2": 88,
        "num_ids_4": 154
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 7') == '2'\nassert solution('8 1') == '8'\nassert solution('6 10') == '1'\nassert solution('999999733 999999732') == '999999733'\nassert solution('999999733 999999733') == '1'\n",
        "num_ids_2": 22,
        "num_ids_4": 51
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\\n999999733 999999732\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"7 10\\n999999733 999999733\") == \"1\\n999999733\\n1\"\n\n\n\"\"\"\n",
        "num_ids_2": 70,
        "num_ids_4": 70
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733') == '2\\n8\\n1\\n999999733\\n1'\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n\n-----Tests-----\nYour code should pass the following tests.\nNote that it may also be run against hidden test cases not shown here.\n\n-- Java tests --\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n3\n\nInput:\nSolution.solution('2 2\n1 2\n2 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('2 2\n1 2\n2 1\n0 1\n0 1\nOutput:\n1\n\nInput:\nSolution.solution('2 2\n1 2\n1 2\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n1\n\nInput:\nSolution.solution('2 2\n1 2\n2 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('2 2\n1 2\n2 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('2 2\n1 2\n2 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n1\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n1\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n1\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n1\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n1\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n1\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n0\n\nInput:\nSolution.solution('3 3\n1 1 2\n1 2\n2 2\n1 2\n0 1\n0 1\n0 1\nOutput:\n2\n\nInput:\nSolution.solution('3 3\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 2\n1 1 2\n0 1''') == \"1\"\nprint(\"Passed\")\n\n\"\"\"\n2\n5 2\n1 2\n0 1\n1 2\n0 1\n3 2\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1\\n') == '1'\n\"\"\"\nimport math\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\nassert solution('2 2\\n1 2\\n1 1\\n0 1') == '0'\nassert solution('3 3\\n1 1 2\\n1 1 3\\n1 2 3\\n0 1 2') == '0'\n\"\"\"\n",
        "num_ids_2": 47,
        "num_ids_4": 78
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\nassert solution(\"3 1\\n1 2\\n2 3\\n0 1\\n0 2\") == \"1\"\nassert solution(\"1 1\\n1 1\") == \"1\"\n\n---------------------\n\"\"\"",
        "num_ids_2": 51,
        "num_ids_4": 66
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == 1\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n2 1 2\\n2 0 2\\n0 1\") == \"3\"\nassert solution(\"2 2\\n1 2 1\\n0 1\") == \"0\"\nassert solution(\"1 1\\n0 1\") == \"0\"\nassert solution(\"2 2\\n1 1 1\\n0 1\") == \"1\"\nassert solution(\"2 1\\n1 2\") == \"0\"\n\n\"\"\"\n",
        "num_ids_2": 45,
        "num_ids_4": 80
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == 1\nprint(\"Test Completed\")\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\n\nlines = stdin.splitlines()\nN, M = [int(i) for i in lines[0].split()]\n\nbulbs = dict()\nfor i in range(1, N + 1):\n    bulbs[i] = [int(i) for i in lines[i].split()[1:]]\n\nstates = dict()\nfor i in range(N, N + M + 1):\n    for switch in lines[i].split():\n        states[int(switch)] = 0\n\non_count = 0\nfor k, v in states.items():\n    count = Counter([bulbs[i][v] for i in k])\n    if sum(count.values()) % 2 == 0:\n        on_count += 1\n\nprint(on_count)\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 9 0') == '5.0'\n\n\"\"\"\n\n\nimport math",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\nprint(\"Passed\")\n\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 9 0\") == \"5.0\"\n\"\"\"\n\nimport math\nimport sys\nimport typing",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 9 0\") == \"5.0\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 9 0\") == \"5.0\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\nassert solution(\"3 1 1 0\") == \"0.0\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1\") == \"8\"\nassert solution(\"4 1\") == \"6\"\nassert solution(\"6 4\") == \"3\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1') == '8'\nassert solution('3 1') == '6'\nassert solution('15 2') == '97'\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\") == '8'\nassert solution(\"3 1\") == '6'\nassert solution(\"15 2\") == '97'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == 8\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\n\"\"\"\n\nfrom typing import Iterator, List, Tuple\n\n\nclass MedianIterator:\n    \"\"\"\n    Iterator to check number of medians\n    \"\"\"\n    def __init__(self, values: List[int]) -> None:\n        \"\"\"\n        :param values: list of values\n        \"\"\"\n        self._values: List[int] = values\n        self._median: int = values[0]\n        self._left: int = 0\n        self._right: int = len(self._values)\n\n    def __iter__(self) -> Iterator[Tuple[int, int]]:\n        \"\"\"\n        :return: iterator of pairs\n        \"\"\"\n        return self\n\n    def __next__(self) -> Tuple[int, int]:\n        \"\"\"\n        :return: next pair\n        \"\"\"\n        if self._right - self._left > 1:\n            self._right -= 1\n            if self._median >= self._values[self._right]:\n                self._left += 1\n        if self._right - self._left == 1:\n            if self._median >= self._values[self._right]:\n                self._left += 1\n            self._median = self._values[self._left]\n        else:\n            self._median = (\n                self._values[self._left] + self._values[self._right]\n            ) // 2\n        return self._left, self._right\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4\\n1 4 5 60 4') == '8'\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4\\n1 4 5 60 4') == 8\nassert solution('3 1\\n1 1 1') == 6\nassert solution('15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3') == 97\n\"\"\"\n\nn, m = [int(x) for x in input().split(' ')]\ns = [int(x) for x in input().split(' ')]\n\ncount = 0\n\nfor i in range(0, n - 1):\n    for j in range(i + 1, n):\n        sorted_s = sorted(s[i:j + 1])\n        if len(sorted_s) % 2!= 0:\n            median_index = len(sorted_s) // 2\n            if median_index == m:\n                count += 1\n        else:\n            median_index = len(sorted_s) // 2\n            if sorted_s[median_index] == m:\n                count += 1\n\nprint(count)\n",
        "num_ids_2": 30,
        "num_ids_4": 56
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\") == \"8\"\nassert solution(\"3 1\") == \"6\"\nassert solution(\"15 2\") == \"97\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\\n\") == \"8\"\n\"\"\"\n\nimport collections",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\n\nimport sys\nimport math\n\nassert len(sys.argv) == 2\n",
        "num_ids_2": 84,
        "num_ids_4": 144
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n\"\"\") == \"\"\"\n6\n2\n1 4 \n\"\"\"\n\nassert solution(\n\"\"\"\n5 4\n2 -2 3 1 2\n3 5\n3 4\n2 4\n2 5\n\"\"\") == \"\"\"\n7\n2\n3 2 \n\"\"\"\n\nassert solution(\n\"\"\"\n1 0\n1000000\n\"\"\") == \"\"\"\n0\n0\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n\"\"\"",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n2 3\\n4 5') == '3', 'case1'\nassert solution('3 2\\n4 3\\n1 5') == '2', 'case2'\nassert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5') == '6', 'case3'\nassert solution('1 0\\n1000000') == '0', 'case4'\nassert solution('1 0\\n0') == '0', 'case5'\n",
        "num_ids_2": 46,
        "num_ids_4": 100
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == '6\\n2\\n1 4'\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == '7\\n2\\n3 2'\nassert solution(\"1 0\\n1000000\") == '0\\n0'\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == '7\\n2\\n3 2'\n",
        "num_ids_2": 84,
        "num_ids_4": 144
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3''') == '6\\n2\\n1 4'\n\nassert solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5''') == '7\\n2\\n3 2'\n\nassert solution('''1 0\n1000000''') == '0\\n0'\n\nprint(solution(input()))\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\n",
        "num_ids_2": 84,
        "num_ids_4": 144
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input) == result\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('fced') == 'Yes'\nassert solution('xyz') == 'Yes'\nassert solution('r') == 'Yes'\nassert solution('dabcef') == 'Yes'\nassert solution('az') == 'No'\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"fced\\nxyz\\nr\\ndabcef\\naz\\n\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\ndabcef\\naz\\n\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\ndabcef\\naz\\n\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\ndabcef\\naz\\n\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\"\n\n\"\"\"\n",
        "num_ids_2": 90,
        "num_ids_4": 180
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('fced') == 'Yes'\nassert solution('xyz') == 'Yes'\nassert solution('r') == 'Yes'\nassert solution('dabcef') == 'Yes'\nassert solution('az') == 'No'\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"0\"\nassert solution(\"5 4\") == \"7\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"1 1000000\") == \"0\"\nassert solution(\"2 -2 3 1 2\") == \"6\"\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"7\\n2\\n4 1\"\n\n\"\"\"",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 2 -2 3 1 2\") == \"6\"\nassert solution(\"5 4 3 -2 3 1 2\") == \"7\"\nassert solution(\"1 0\") == \"0\"",
        "num_ids_2": 34,
        "num_ids_4": 45
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution([\"5\", \"4\", \"-2\", \"3\", \"1\", \"2\"]) == \"6\"\nassert solution([\"5\", \"4\", \"-2\", \"3\", \"1\", \"2\", \"1\", \"3\"]) == \"7\"\nassert solution([\"1\", \"0\"]) == \"0\"\nassert solution([\"1\", \"1000000\"]) == \"0\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 60,
        "num_ids_4": 91
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\"\n",
        "num_ids_2": 80,
        "num_ids_4": 80
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n\n\"\"\"\n\nn, m = [int(x) for x in stdin.split()]\nnums = [int(x) for x in stdin.split(\"\\n\")[1:-1]]\nsegments = [int(x) for x in stdin.split(\"\\n\")[2:]]\nprint(nums, segments)\n",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n",
        "num_ids_2": 84,
        "num_ids_4": 102
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n\"\"\"\n\n\nfrom collections import deque\nfrom functools import lru_cache\n",
        "num_ids_2": 48,
        "num_ids_4": 87
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 1 5 4 3\\n') == '4'\nassert solution('7\\n1 3 5 6 7 4 2\\n') == '7'\nassert solution('3\\n1 2 3\\n') == '3'\nassert solution('4\\n1 2 4 3\\n') == '4'\n\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 75
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin_1) == output_1\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2 1 5 4 3\") == \"4\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 4 3\") == \"4\"",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 1 5 4 3') == 4\nassert solution('7\\n1 3 5 6 7 4 2') == 7\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\"\nassert solution(\"3\\n1 2 3\") == \"3\"\nassert solution(\"4\\n1 2 4 3\") == \"4\"\nassert solution(\"2\\n1 3\") == \"1\"\n\nprint(solution(stdin))\n",
        "num_ids_2": 36,
        "num_ids_4": 67
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 5 4 3\") == '4'\nassert solution(\"1 2 3 4 5\") == '5'\nassert solution(\"1 3 5 7 4 2\") == '7'\nassert solution(\"1 3 5 7 4 2\") == '7'\n",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n1 2 5 3 4\n''') == '4'\nassert solution('''\n1 2 5 3 4\n''') == '4'\n\nassert solution('''\n1 2 5 3 4\n''') == '4'\nassert solution('''\n1 2 5 3 4\n''') == '4'\n\nassert solution('''\n1 2 5 3 4\n''') == '4'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 5 3 4\") == 4\nassert solution(\"1 2 5 3 4\") == 4\nassert solution(\"6 5 4 3 2 4 3\") == 2\n",
        "num_ids_2": 24,
        "num_ids_4": 38
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 5 3 4\\n\") == \"4\"\nassert solution(\"7\\n6 5 4 3 2 4 3\\n\") == \"2\"\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 5 3 4\") == \"4\"\nassert solution(\"1 2 5 3 4\") == \"4\"\nassert solution(\"1 2 5 3 4\") == \"4\"\nassert solution(\"1 2 5 3 4\") == \"4\"\nassert solution(\"1 2 5 3 4\") == \"4\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1 2 4 3\\n') == '4'\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 5 3 4') == '4'\n\nassert solution('6 5 4 3 2 4 3') == '2'\nassert solution('1 2') == '2'\nassert solution('1 2 3 4 5') == '5'\n\n\n\"\"\"\n\nfrom typing import List, Dict, Tuple, Set, Sequence, Optional",
        "num_ids_2": 30,
        "num_ids_4": 55
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\nassert solution(\"2\\n1 2\") == \"2\"",
        "num_ids_2": 31,
        "num_ids_4": 64
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 2 5 3 4\") == 4\nassert solution(\"1 2 5 3 4\") == 2\nassert solution(\"1 2 5 3 4\") == 2",
        "num_ids_2": 25,
        "num_ids_4": 37
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 50
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 3 3 3') == '0'\nassert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 3 4 5') == '2'\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 3\n1 2 2 4 5''') == '1'\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 2 3 3 3\") == \"0\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 1 1\") == \"0\"\nassert solution(\"1 1 1 1 1\") == \"0\"\nassert solution(\"1 2 2 4 5\") == \"2\"\n",
        "num_ids_2": 29,
        "num_ids_4": 56
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\n\"\"\"\nimport sys\nfrom collections import Counter\n\nn, k = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\n\ncounter = Counter(a)\nprint(sum(1 for i in counter.values() if i >= k))",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 2 3 4 5\") == \"0\"",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1'\n\"\"\"\nimport math\n\nn, k = map(int, input().split())\n\na = list(map(int, input().split()))\n\na.sort()",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 3\n1 2 2 4 5\"\"\") == \"1\"\nassert solution(\"\"\"5 3\n1 2 3 4 5\"\"\") == \"2\"\n\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 3 3 3') == '0'\nassert solution('7 5\\n1 2 2 3 3 5 3 4') == '2'\nassert solution('7 5\\n1 2 3 3 5 3 4 5') == '2'\n",
        "num_ids_2": 26,
        "num_ids_4": 65
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 3 4 5') == '2'\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\"\n\nimport unittest\n\n\nclass TestPseudoRandomNumberGenerator(unittest.TestCase):\n\n    def test_solution1(self):\n        self.assertEqual(solution(8, 3, 4), 4)\n\n    def test_solution2(self):\n        self.assertEqual(solution(8, 3, 5), 0)\n\n    def test_solution3(self):\n        self.assertEqual(solution(16, 5, 6), 0)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 1\\n') == '4'\nassert solution('3 3 3\\n') == '0'\n\n-----Test 1-----\nstdin:\n8 3 4\n\n-----Test 2-----\nstdin:\n5 3 4\n\n-----Test 3-----\nstdin:\n4 2 1\n\n'''\n\n'''\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3 4\\n\") == \"4\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3 4\") == '4'\n\n-----------\n\nN A B\n\nN     Number of balls\nA     Number of blue balls\nB     Number of red balls\n\n1     If all the balls in the row are blue, then the result is B\n2     Otherwise, the result is B + (A - 1) * r\n\n3     Therefore, the result is (A - 1) * r + B * r\n\n-----------",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3 4\\n') == '4'\nassert solution('8 3 5\\n') == '2'\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n8 2 12 6 4 24 16 3') == '48'\nassert solution('1\\n2') == '-1'\n\"\"\"",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n6\n4 2 3\n8\n8 2 12 6 4 24 16 3\n5\n2 3 5\n7\n2 4 6 7\n''') == '48', 'Incorrect'\nassert solution('''\n6\n4 2 3\n8\n8 2 12 6 4 24 16 3\n5\n2 3 5\n7\n2 4 6 7\n''') == '4', 'Incorrect'\n\"\"\"\n\nfrom math import ceil, gcd",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n8 2 12 6 4 24 16 3') == '48'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1\\n2\") == \"48\\n\"\nassert solution(\"8\\n8\\n2\") == \"4\\n\"\nassert solution(\"8\\n8\\n2\\n1\\n1\\n1\\n1\\n1\") == \"4\\n\"\nassert solution(\"8\\n8\\n2\\n2\\n2\\n1\\n1\\n1\\n1\") == \"-1\\n\"\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 105
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"48\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n8 2 12 6 4 24 16 3''') == '48'\n\"\"\"\n\nimport math",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5",
        "num_ids_2": 1670,
        "num_ids_4": 1670
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\nfrom collections import defaultdict\n\nfrom typing import List, Set\n\nfrom icontract import require, ensure\n\n\n@ensure(lambda result: result > 0, \"greater than 0\")\n@ensure(lambda result: result < 2 ** 32, \"less than 2 ** 32\")\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == '48'\nassert solution('''\n2\n1\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == '4'\nassert solution('''\n2\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == '-1'\nassert solution('''\n2\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == '-1'\n\nassert solution('''\n1\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == '-1'\n",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8 16 24') == '48'\n\"\"\"\nimport math\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n6 6 6 6 6\") == \"3\\n6\"\nassert solution(\"1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n1 5 1 6 1\") == \"3\\n5 6 1\"\n\"\"\"\n\nn = int(input())\nmy_list = [int(num) for num in input().split(' ')]\nmy_set = set()\nmy_list_final = []\nfor i in range(n):\n    if my_list[i] not in my_set:\n        my_set.add(my_list[i])\n        my_list_final.append(my_list[i])\nprint(len(my_list_final))\nprint(' '.join(map(str, my_list_final)))\n",
        "num_ids_2": 40,
        "num_ids_4": 78
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 2 3') == '2 1 3'\nassert solution('2 4 2 4') == '2 4'\nassert solution('6 6 6 6 6') == '1 6'\nassert solution('5 6 6 6 6') == '1 6'\nassert solution('1 2 3') == '1'\n",
        "num_ids_2": 29,
        "num_ids_4": 59
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\n\"\"\"",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 6 6 6 6\") == \"1 6\"\nassert solution(\"5 6 6 6 6\") == \"1 6\"\nassert solution(\"5 4 4 4 4\") == \"1 5\"\nassert solution(\"2 4 4 4 4\") == \"2 4\"\nassert solution(\"2 4 2 4 4\") == \"2 4\"",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5 5 6 6') == '2'\nassert solution('2 4 2 4 4') == '2'\nassert solution('6 6 6 6 6') == '1'\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n6 6 6 6 6') == '1\\n6'\nassert solution('5\\n6 6 6 6') == '1\\n6'\nassert solution('5\\n5 5 1 6 1') == '2\\n5 6 1'\n\"\"\"\nimport math",
        "num_ids_2": 39,
        "num_ids_4": 61
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '6\\n1 5 5 1 6 1'\n) == '3\\n5 6 1'\n\nassert solution(\n    '5\\n2 4 2 4 4'\n) == '2\\n2 4'\n\nassert solution(\n    '5\\n6 6 6 6 6'\n) == '1\\n6'\n\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 6 6 6 6\") == \"1 6\"\nassert solution(\"1 5 5 1 6 1\") == \"3 5 6 1\"\nassert solution(\"5 4 2 4 4\") == \"2 4\"",
        "num_ids_2": 33,
        "num_ids_4": 48
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n6 6 6 6\") == \"1\\n6\"\n",
        "num_ids_2": 43,
        "num_ids_4": 62
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n1 5 5 1 6 1') == '3\\n5 6 1'\nassert solution('5\\n2 4 2 4 4') == '2\\n2 4'\nassert solution('5\\n6 6 6 6 6') == '1\\n6'\nassert solution('5\\n6 6 6 6 6') == '1\\n6'\n\n'''\n",
        "num_ids_2": 44,
        "num_ids_4": 84
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n\"\"\"\n\nimport math\n\na = int(input())\n\ni = 0\nsum = 0\nwhile a!= 0:\n    sum += a % 10\n    a //= 10\n    i += 1\n\nsum = sum + i\n\nwhile True:\n    if (sum % 4 == 0):\n        break\n    else:\n        sum += 1\n\nprint(sum)",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n\"\"\"\n\nfrom collections import deque",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\nassert solution('634') == '634'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n\n\"\"\"\n\nfrom math import ceil, floor",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n432\n\"\"\"\n) == \"\"\"\n435\n\"\"\"\n\nassert solution(\n\"\"\"\n99\n\"\"\"\n) == \"\"\"\n103\n\"\"\"\n\nassert solution(\n\"\"\"\n237\n\"\"\"\n) == \"\"\"\n237\n\"\"\"\n\nassert solution(\n\"\"\"\n42\n\"\"\"\n) == \"\"\"\n44\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"\") == \"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"a\") == \"a\"\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abac') == 'aac'\nassert solution('abc') == 'b'\nassert solution('abba') == 'aba'\nassert solution('ecoosdcefr') == 'codeforces'\nassert solution('aeiou') == 'aeiou'\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 32
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\"\"\"\nimport re\nimport sys",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\nprint(\"Hooray!\")\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abc') == 'abc'\nassert solution('aba') == 'aba'\nassert solution('abac') == 'aac'\nassert solution('abba') == 'aba'\nassert solution('ecoosdcefr') == 'codeforces'\n\"\"\"\nimport collections\nimport heapq\nimport functools",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"ab\") == \"a\"\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import accumulate\nfrom typing import List\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"b\"\n\"\"\"\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"b\"\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"a\"\nassert solution(\"2\") == \"b\"\nassert solution(\"26\") == \"z\"\nassert solution(\"27\") == \"aa\"\nassert solution(\"28\") == \"ab\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 'b'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip())",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n') == 'b'\nassert solution('1000000000000001\\n') == 'z'\nassert solution('27\\n') == 'aa'\nassert solution('703\\n') == 'zzz'\nassert solution('18279\\n') == 'zzzz'\n",
        "num_ids_2": 27,
        "num_ids_4": 52
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2') == 'b'\nassert solution('27\\n28') == 'aa'\nassert solution('703\\n704') == 'aaa'\nassert solution('18279\\n18280') == 'aaaa'\nassert solution('475255\\n475256') == 'aaaaa'",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('7') == 'a'\nassert solution('1') == 'a'\nassert solution('723') == 'zz'\nassert solution('735') == 'zzz'\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == 'b'\n\"\"\"\n\nfrom itertools import product, count\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2''') == 'b'\nassert solution('''1000000000000001''') == 'z'\n'''\nfrom typing import List\nfrom itertools import chain",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(2) == 'b'\nassert solution(27) == 'a'\nassert solution(70) == 'z'\n\"\"\"\nimport unittest\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('to be or not to be') == 12\nassert solution('aa bb aa aa bb bb') == 11\nassert solution('aa bb aa aa bb bb') == 11\n",
        "num_ids_2": 31,
        "num_ids_4": 49
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"a ab a a b ab a a b c\") == \"a AAAB AAAB c\"\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\"\n",
        "num_ids_2": 42,
        "num_ids_4": 67
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aa bb aa aa bb bb') == '11'\nassert solution('to be or not to be') == '12'\nassert solution('aa bb aa aa bb bb') == '11'",
        "num_ids_2": 35,
        "num_ids_4": 55
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\n\n\"\"\"\n\nfrom string import ascii_lowercase\n",
        "num_ids_2": 30,
        "num_ids_4": 48
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\n",
        "num_ids_2": 30,
        "num_ids_4": 48
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\n",
        "num_ids_2": 30,
        "num_ids_4": 48
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('to be or not to be') == 'TB or not TB'\nassert solution('a ab a a b ab a a b c') == 'AB aa AB bb'\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\nassert solution(\"ab aa ab bb\") == 6",
        "num_ids_2": 30,
        "num_ids_4": 61
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\nto be or not to be\n''') == '12'\nassert solution('''10\na ab a a b ab a a b c\n''') == '13'\nassert solution('''6\naa bb aa aa bb bb\n''') == '11'\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 48
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2000 2000 2\") == \"4000\\n2 2\"\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"1\"\nassert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\"\n\"\"\"\n\nfrom functools import lru_cache",
        "num_ids_2": 43,
        "num_ids_4": 62
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2\\n') == '20\\n3 2 3'\nassert solution('5 1\\n1 1 1 1 1\\n') == '1\\n5'\nassert solution('4 2\\n1 2000 2000 2\\n') == '4000\\n2 2'\n\"\"\"\n\nfrom collections import defaultdict, deque\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nmemo = defaultdict(deque)\nmemo[0] = deque([0])\n\nfor i, d in enumerate(a):\n    if i < k:\n        memo[i].append(d)\n    else:\n        memo[i % k].append(d)\n\nans = 0\nfor k in memo:\n    if len(memo[k]) <= 1:\n        continue\n    i = a[k]\n    t = 0\n    for d in memo[k]:\n        if d > i:\n            break\n        t += d\n    else:\n        ans = max(ans, t)\n\nprint(ans)\n\nfor k in memo:\n    if len(memo[k]) > 1:\n        i = a[k]\n        t = 0\n        for d in memo[k][:-1]:\n            if d > i:\n                break\n            t += d\n        else:\n            ans = max(ans, t)\n            print(memo[k][:-1])\n",
        "num_ids_2": 51,
        "num_ids_4": 74
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\\n2 2\"\n\"\"\"\n\nimport sys\n\nfrom collections import deque\n\nINPUT_LINES = sys.stdin.read().splitlines()\nn, k = list(map(int, INPUT_LINES[0].split()))\na = list(map(int, INPUT_LINES[1].split()))\n\ndp = [[0] * (k + 1) for _ in range(n + 1)]\n\nqueue = deque([(a[0], 0)])\nfor i in range(1, n):\n    while queue and queue[0][1] == i - 1:\n        dp[i][queue.popleft()[1]] = max(dp[i][queue.popleft()[1]], a[i])\n    queue.appendleft((a[i], i))\n    queue.append((dp[i][i], i))\n\nfor i in range(k, n):\n    while queue and queue[0][1] == i - 1:\n        dp[i][queue.popleft()[1]] = max(dp[i][queue.popleft()[1]], dp[i - 1][queue.popleft()[1]])\n    queue.append((dp[i][i], i))\n    queue.append((dp[i - 1][i], i))\n\nprint(dp[n - 1][k - 1])\nfor i in range(k - 1, -1, -1):\n    print(dp[n - 1][i], end=\" \")",
        "num_ids_2": 47,
        "num_ids_4": 68
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3 4') == '4'\nassert solution('1 2 3 4 5') == '5'\n",
        "num_ids_2": 19,
        "num_ids_4": 44
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2') == '20'\nassert solution('5 1\\n1 1 1 1 1') == '1'\nassert solution('4 2\\n1 2000 2000 2') == '4000'\n",
        "num_ids_2": 39,
        "num_ids_4": 56
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2\\n') == '20'\nassert solution('5 1\\n1 1 1 1 1\\n') == '1'\nassert solution('4 2\\n1 2000 2000 2\\n') == '4000'\n",
        "num_ids_2": 43,
        "num_ids_4": 62
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\\n2 2\"\n",
        "num_ids_2": 47,
        "num_ids_4": 68
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2') == '20\\n3 2 3'\nassert solution('5 1\\n1 1 1 1 1') == '1\\n5'\nassert solution('4 2\\n1 2000 2000 2') == '4000\\n2 2'\n\n\n\"\"\"\n\nimport math\nimport sys\n",
        "num_ids_2": 47,
        "num_ids_4": 68
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 -2 3 -9 2\") == '1'\nassert solution(\"5 -2 3 -9 2\") == '0'\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == '6'\n\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 56
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 -5 3 2\") == \"1\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 75
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\nassert solution(\"8 -2 -1 2 -8 1 2 -2 -8\") == \"3\"",
        "num_ids_2": 32,
        "num_ids_4": 77
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -1 3 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -1 1 -1 1 -1 1 1 -1 -1\") == \"3\"",
        "num_ids_2": 30,
        "num_ids_4": 78
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"1\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\n\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 56
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data) == test_result\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"1\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\n\"\"\"\nimport sys\n",
        "num_ids_2": 32,
        "num_ids_4": 77
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n-2 3 -9 2') == '0'\nassert solution('5\\n4 -2 3 -9 2') == '0'\nassert solution('9\\n-1 1 -1 1 -1 1 1 -1 -1') == '6'\nassert solution('8\\n16 -5 -11 -15 10 5 4 -4') == '3'\n",
        "num_ids_2": 37,
        "num_ids_4": 87
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 -5 3 2') == '1'\n\nassert solution('5\\n4 -2 3 -9 2') == '0'\n\nassert solution('9\\n-1 1 -1 1 -1 1 1 -1 -1') == '6'\n\nassert solution('8\\n16 -5 -11 -15 10 5 4 -4') == '3'\n\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 86
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\n\"\"\"\n\n\nimport unittest\n",
        "num_ids_2": 32,
        "num_ids_4": 77
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 100\") == \"0\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"5 5\") == \"10\"\nassert solution(\"2 1000000000\") == \"2000000000\"\nassert solution(\"1 1000000000\") == \"1000000000\"\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"10\"\nassert solution(\"2 3\") == \"1\"\n\"\"\"\nimport math",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 100') == '0'\nassert solution('2\\n2 2') == '1'\nassert solution('5\\n5 5') == '0'\nassert solution('2\\n1000000000') == '2'\nassert solution('1000000000 1000000000') == '1000000000'\n\"\"\"\nimport unittest\n\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_upper(self):\n        self.",
        "num_ids_2": 28,
        "num_ids_4": 57
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n1 2 3 4 5') == '0'\nassert solution('3 3\\n1 2 3') == '0'\nassert solution('2 1\\n1 1') == '0'\n\n\"\"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 49
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 10\") == \"0\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"1 100\") == \"0\"\nassert solution(\"5 10\") == \"2\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 100\") == \"0\"\nassert solution(\"5\\n2 2\") == \"2\"\nassert solution(\"5\\n5 5\") == \"10\"\n\"\"\"\n\nimport unittest\nfrom typing import List\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 100\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"2 1000000000\") == \"2000000000\"\nassert solution(\"1 000000000 1000000000\") == \"1000000000\"\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 100') == '0'\nassert solution('2 2') == '0'\nassert solution('5 5') == '0'\nassert solution('2 1000000000') == '2000000000'\nassert solution('1 000000000 1000000000') == '2000000000'\n\n\"\"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"\nassert solution(\"5 100\\n1 1\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n1\\n10\\n1000000000\\n2000000000\"\nassert solution(\"5 100\\n2 2\\n5 5\\n2 1000000000\\n1000000001 1000000000\") == \"0\\n2\\n10\\n1000000001\\n2000000000\"\nassert solution(\"5 100\\n2 2\\n5 5\\n2 1000000000\\n1000000010 1000000000\") == \"0\\n2\\n10\\n1000000010\\n2000000000\"\nassert solution(\"5 100\\n2 2\\n5 5\\n2 1000000000\\n100000000100 1000000000\") == \"0\\n2\\n10\\n100000000100\\n2000000000\"\n",
        "num_ids_2": 92,
        "num_ids_4": 184
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 100\\n2 2\") == \"0\"\nassert solution(\"1 100\\n2 1000000000\") == \"2000000000\"\nassert solution(\"1 100\\n5 5\") == \"2\"\nassert solution(\"1 1000000000\\n1 1000000000\") == \"2000000000\"",
        "num_ids_2": 32,
        "num_ids_4": 65
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101') == '4'\nassert solution('1') == '-1'\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\"\n\n\"\"\"\nNotes:\n\nI have no idea how to solve this, so I'm just going to brute force it.\nSo, I guess I'll try to come up with a O(n) solution and then see if that works.\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('101') == '4'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('101') == '4'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('101') == '4'\n\"\"\"\n\nimport sys",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('101') == '4'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"101\") == \"4\"\nassert solution(\"011\") == \"1\"\nassert solution(\"101\") == \"4\"\n\"\"\"\n\nimport math\n\nK = int(input(''))\ncount = 0",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('101') == '4'\nassert solution('10') == '-1'\nassert solution('11') == '-1'\nassert solution('13') == '-1'\nassert solution('14') == '-1'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101\\n777') == \"4\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('101') == '4'\n\"\"\"\n\nK = int(input())\n\nfirst = -1\nfor i in range(1, K + 1):\n    if i % K == 0:\n        first = i\n        break\n\nprint(first)\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 64
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4\\n2 4 5 3 1') == '4'\n\"\"\"\n\nimport sys\nimport heapq\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == '4'\nassert solution(\"5 5\\n1 2 3 4 5\") == '1'\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == '48'\n\"\"\"\nimport math\nimport collections\n\nfrom typing import Dict, List, Set, Tuple",
        "num_ids_2": 36,
        "num_ids_4": 64
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2 5 1 3 4\") == \"5\"\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"",
        "num_ids_2": 36,
        "num_ids_4": 64
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 4\") == \"0\"\nassert solution(\"6 5\") == \"0\"\nassert solution(\"6 6\") == \"1\"\nassert solution(\"7 7\") == \"1\"\nassert solution(\"8 5\") == \"0\"\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == '1'\nassert solution(\"5 4\") == '1'\nassert solution(\"5 5\") == '1'\nassert solution(\"1 2 3 4 5\") == '1'\nassert solution(\"5 3 1 4 2\") == '0'\n",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == '4'\nassert solution(\"5 5\\n1 2 3 4 5\") == '1'\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == '48'\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 64
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 4\n2 4 5 3 1''') == '4'\n\nassert solution('''5 5\n1 2 3 4 5''') == '1'\n\nassert solution('''15 8\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9''') == '48'\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 8\\n1 7 2 6 3 4 5\") == \"1\"\n\"\"\"\n\nimport math",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '-1'\nassert solution('4 8') == '4'\nassert solution('1 3 1 1 2') == '4'\nassert solution('5 15') == '2'\nassert solution('5 26') == '-1'\n",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\n\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"\n\nimport sys\nimport numpy as np\nfrom typing import List\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\ndays = 0\nfor i in range(n):\n    if a[i] <= i + 1:\n        days += 1\n    else:\n        days += i + 1",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\\n\") == '4'\nassert solution(\"7 10\\n5 5 5 5 5\\n\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == '-1'\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == '-1'\nassert solution(\"5 16\\n5 5 5 5 5\\n\") == '2'\n",
        "num_ids_2": 40,
        "num_ids_4": 82
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 15\") == \"-1\"\nassert solution(\"5 26\") == \"-1\"\nassert solution(\"5 16\") == \"2\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n",
        "num_ids_2": 36,
        "num_ids_4": 73
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 24 21 14 10\") == 3\nassert solution(\"2 500 500\") == 0\nassert solution(\"3 14 5 1\") == -1\nassert solution(\"5 1 3 6 9 12\") == 1\nprint('The code ran successfully')\n",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 24 21 14 10\") == \"3\"\nassert solution(\"5 500 500\") == \"0\"\nassert solution(\"5 14 3 6 9 12\") == \"1\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))",
        "num_ids_2": 26,
        "num_ids_4": 41
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"1 3 6 9 12\") == \"1\"\nassert solution(\"5 1 3 6 9 12\") == \"-1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 53
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n24 21 14 10') == '3'\nassert solution('2\\n500 500') == '0'\nassert solution('3\\n14 5 1') == '-1'\nassert solution('5\\n1 3 6 9 12') == '1'\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 63
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 3 6 9 12') == '1'\nassert solution('500 500') == '0'\nassert solution('14 5 1') == '-1'\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 41
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n24 21 14 10\") == \"3\"\nassert solution(\"2\\n500 500\") == \"0\"\nassert solution(\"3\\n14 5 1\") == \"-1\"\nassert solution(\"5\\n1 3 6 9 12\") == \"1\"\n\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 21 14 10\") == 3\nassert solution(\"500 500\") == 0\nassert solution(\"1 3 6 9 12\") == -1\nassert solution(\"1 2 4 5\") == 0\n\"\"\"\n\nimport sys\nfrom typing import List\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n24 21 14 10''') == '3'\nassert solution('''5\n1 3 6 9 12''') == '1'\nassert solution('''2\n500 500''') == '0'\nassert solution('''3\n14 5 1''') == '-1'\nassert solution('''5\n1 3 6 9 12''') == '1'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"1 3 6 9 12\") == \"1\"\n",
        "num_ids_2": 24,
        "num_ids_4": 38
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n24 21 14 10') == '3'\nassert solution('2\\n500 500') == '0'\nassert solution('5\\n1 3 6 9 12') == '-1'\nassert solution('3\\n14 5 1') == '1'\n\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 30,
        "num_ids_4": 63
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected_result\n\n-----Test-----\n\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n1 2 15 15 15\\n') == '5'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n1 2 15 15 15\\n') == '5'\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n1 2 15 15 15\\n') == '5'\n\"\"\"\n\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(input())\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 10 100 1000\") == \"4\"\nassert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 54
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n1 2 15 15 15') == 5\nassert solution('6 1\\n36 4 1 25 9 16') == 2\nassert solution('4 4\\n1 10 100 1000') == 4\n\"\"\"\n\n\n\nimport sys\n\nlines = sys.stdin.readlines()\n\nn, k = int(lines[0].split(' ')[0]), int(lines[0].split(' ')[1])\n\nskills = list(map(int, lines[1].split(' ')))",
        "num_ids_2": 33,
        "num_ids_4": 48
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2\\n15 15\\n') == '5'",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n\n------Time Limit Exceeded in Pypy3------\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\nprint(\"Test pass.\")\n\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 10 3 6\") == 8\n\"\"\"\n\nfrom sys import stdin, stdout\nimport math",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == '8'\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == '8'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n\nn, k, m = input().split()\nn, k, m = int(n), int(k), int(m)\nsubjects = [int(i) for i in input().split()]\n\npoints = 0\nfor i in range(1, n):\n    points += subjects[i - 1]\n\npoints = points + k * (n - 1)",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == '8'\n\"\"\"\n\nimport sys\nimport numpy as np\n\nN, K, M = [int(x) for x in sys.stdin.readline().strip().split(' ')]\nscores = [int(x) for x in sys.stdin.readline().strip().split(' ')]\n\navg_score = 0\nfor i in range(N-1):\n    avg_score += scores[i]\n\nscores = np.array(scores)\navg_score = avg_score / (N-1)",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\n\"\"\"\n\nimport sys\nimport os\nimport numpy as np\nfrom collections import defaultdict",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 'Yes'\nassert solution('5\\n2 3 1 3 2') == 'No'\n\n\"\"\"\n\nfrom functools import reduce",
        "num_ids_2": 20,
        "num_ids_4": 37
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\n\"\"\"\n\nN, K, Q = map(int, input().split())\nscores = [K] * N\n\nfor _ in range(Q):\n    a = int(input())\n    if a < scores[a - 1]:\n        scores[a - 1] -= 1\n    else:\n        scores[a - 1] += 1\n\nfor score in scores:\n    if score == 0:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\\n1\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\"\n\n-----Problem-----\nN, K, Q are integers in range [1... 10^5]\nA_1, A_2,..., A_Q are integers in range [1... N]\n\"\"\"\n\nimport sys\n\nn, k, q = [int(x) for x in sys.stdin.readline().strip().split()]\n\nscores = [k] * n\n\nfor a in range(q):\n    a = int(sys.stdin.readline().strip())\n    scores[a - 1] -= 1\n\nfor score in scores:\n    if score == 0:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n6 3 4\n3\n1\n3\n2\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\n\"\n\"\"\"",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 4\\n3\\n1\\n3\\n2') == 'No\\nNo\\nYes\\nNo\\nNo'",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6 3 4\n3\n1\n3\n2\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('''\n3 3 2\n3\n1\n3\n2\n''') == 'Yes\\nNo\\nNo'",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == 'YES\\n10'\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == 'YES\\n010\\n0000'\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == 'NO'\nassert solution(\"5 5\\n0 0 0 0 0\\n0 1 1 0 0\\n0 1 1 1 1\\n1 0 0 1 1\\n1 0 1 0 1\") == 'YES\\n101010\\n011020'\nassert solution(\"3 3\\n1 0 1\\n1 1 0\") == 'NO'",
        "num_ids_2": 57,
        "num_ids_4": 138
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n\n\n-----Problem-----\n\nYou are given a binary matrix $a$ of size $n \\times m$. A binary matrix is a matrix where each element is either $0$ or $1$.\n\nYou may perform some (possibly zero) operations with this matrix. During each operation you can inverse the row of this matrix or a column of this matrix. Formally, inverting a row is changing all values in this row to the opposite ($0$ to $1$, $1$ to $0$). Inverting a column is changing all values in this column to the opposite.\n\nYour task is to sort the initial matrix by some sequence of such operations. The matrix is considered sorted if the array $[a_{1, 1}, a_{1, 2}, \\dots, a_{1, m}, a_{2, 1}, a_{2, 2}, \\dots, a_{2, m}, \\dots, a_{n, m - 1}, a_{n, m}]$ is sorted in non-descending order.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $m$ \u2014 the number of rows and the number of columns in the matrix.\n\nThe next $n$ lines contain $m$ integers each. The $j$-th element in the $i$-th line is $a_{i, j}$ ($0 \\le a_{i, j} \\le 1$) \u2014 the element of $a$ at position $(i, j)$.\n\n\n-----Output-----\n\nIf it is impossible to obtain a sorted matrix, print \"NO\" in the first line.\n\nOtherwise print \"YES\" in the first line. In the second line print a string $r$ of length $n$. The $i$-th character $r_i$ of this string should be '1' if the $i$-th row of the matrix is inverted and '0' otherwise. In the third line print a string $c$ of length $m$. The $j$-th character $c_j$ of this string should be '1' if the $j$-th column of the matrix is inverted and '0' otherwise. If there are multiple answers, you can print any.\n\n\n-----Examples-----\nInput\n3 4\n0 0 0 1\n0 0 0 0\n1 1 1 1\n\nOutput\nYES\n010\n101\n\nInput\n3 4\n0 0 0 1\n0 0 0 0\n1 1 1 1\n\nOutput\nNO\n010\n101\n\nInput\n3 4\n0 0 0 0\n0 0 0 0\n1 1 1 1\n\nOutput\nYES\n0110\n1100\n\nInput\n3 4\n0 0 0 1\n0 0 0 0\n0 0 0 0\n\nOutput\nNO\n010\n101\n\nInput\n3 3\n0 0 0\n1 0 1\n1 1 0\n\nOutput\nNO\n010\n101\n\nInput\n3 3\n0 0 0\n1 0 1\n1 1 0\n\nOutput\nYES\n1010\n1010\n\n\n-----Problem-----\n\nYou are given an array A consisting of N elements.\n\nFor each element of the array we are given a sequence of operations of the form \"1 X\" or \"2 X\".\n\nX is one of the following: \"flip\" \u2014 we inverse the value of the array element at position X and then we print the inverse value; \"inverse\" \u2014 we print the Xth element of the array in the reversed order.\n\nFor example, consider the array A such that:\n\nA[0] = 1, A[1] = 2, A[2] = 3\n\nWe have the following sequence of operations:\n\n\"1 2\" - change the value of A[0] to 0, change the value of A[1] to 1, change the value of A[2] to 2;\n\"1 3\" - change the value of A[0] to 1, change the value of A[1] to 3, change the value of A[2] to 2;\n\"2 1\" - change the value of A[0] to 2, change the value of A[1] to 1, change the value of A[2] to 0;\n\"2 3\" - change the value of A[0] to 2, change the value of A[1] to 3, change the value of A[2] to 0;\n\"3 1\" - change the value of A[0] to 3, change the value of A[1] to 1, change the value of A[2] to 0;\n\"3 2\" - change the value of A[0] to 3, change the value of A[1] to 2, change the value of A[2] to 0;\n\"2 0\" - change the value of A[0] to 2, change the value of A[1] to 0, change the value of A[2] to 0;\n\"3 0\" - change the value of A[0] to 3, change the value of A[1] to 0, change the value of A[2] to 0;\nWe print the initial array A in the first line. Then we apply the sequence of operations listed above. After applying the last operation we print an array B that is obtained from the initial array A by inversion.\n\nIn the second line we print the value of the Xth element of B. If the value of the Xth element of B is not equal to zero, we print it, otherwise we print \"0\".\n\nIf it is impossible to obtain a sequence of operations that results in the value of the Xth element of B not equal to 0, we print \"NO\" in the second line.\n\n\n-----Input-----\n\nThe first line of the input contains one integer N (1 \\le N \\le 100) \u2014 the number of operations.\n\nThe next N lines contain three integers each. The first number is the number of the operation, the second number is X (1 \\le X \\le N), and the third number is an element of the array A.\n\n\n-----Output-----\n\nIn the first line we print the initial array A.\n\nIn the second line we print the value of the Xth element of B.\n\nIf",
        "num_ids_2": 60,
        "num_ids_4": 86
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0\\n0 0 0\\n1 1 1\\n\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\\n\") == \"NO\\n010\\n1000\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 59,
        "num_ids_4": 93
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n\"\"\"\nimport re\n\nclass Matrix():\n    def __init__(self, n, m):\n        self.n = n\n        self.m = m\n        self.matrix = [[0] * n for _ in range(m)]\n\n    def input(self, stdin: str):\n        for line in stdin.split('\\n'):\n            if line == '':\n                continue\n            line = re.split(r'\\s+', line)\n            if line[0] == '0':\n                self.matrix[int(line[1])-1][int(line[2])-1] = 0\n            else:\n                self.matrix[int(line[1])-1][int(line[2])-1] = 1\n\n    def __str__(self):\n        return str(self.matrix)\n\n    def __repr__(self):\n        return str(self.matrix)\n\n    def __lt__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        return self.matrix < other.matrix\n\n    def __gt__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        return self.matrix > other.matrix\n\n    def __le__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        return self.matrix <= other.matrix\n\n    def __ge__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        return self.matrix >= other.matrix\n\n    def __eq__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        return self.matrix == other.matrix\n\n    def __ne__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        return self.matrix!= other.matrix\n\n    def __add__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        result = Matrix(self.n, self.m)\n        for i in range(self.n):\n            for j in range(self.m):\n                result.matrix[i][j] = self.matrix[i][j] + other.matrix[i][j]\n        return result\n\n    def __sub__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        result = Matrix(self.n, self.m)\n        for i in range(self.n):\n            for j in range(self.m):\n                result.matrix[i][j] = self.matrix[i][j] - other.matrix[i][j]\n        return result\n\n    def __mul__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        result = Matrix(self.n, self.m)\n        for i in range(self.n):\n            for j in range(self.m):\n                result.matrix[i][j] = 0\n                for k in range(self.n):\n                    result.matrix[i][j] += self.matrix[i][k] * other.matrix[k][j]\n        return result\n\n    def __truediv__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        result = Matrix(self.n, self.m)\n        for i in range(self.n):\n            for j in range(self.m):\n                result.matrix[i][j] = self.matrix[i][j] / other.matrix[i][j]\n        return result\n\n    def __floordiv__(self, other):\n        if self.n!= other.n or self.m!= other.m:\n            raise Exception('\u041c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b')\n        result = Matrix",
        "num_ids_2": 60,
        "num_ids_4": 86
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n010\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\n\"\"\"\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n0 0 0\\n1 0 1\\n1 1 0\") == 'YES\\n010\\n0000'\nassert solution(\"3 4\\n0 0 0\\n1 0 1\\n1 1 0\") == 'NO\\n010\\n0000'\nassert solution(\"2 2\\n1 0\\n0 1\") == 'YES\\n0\\n10'\n\n\"\"\"",
        "num_ids_2": 64,
        "num_ids_4": 89
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == 'YES\\n010\\n0000'\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'YES\\n010\\n0'\nassert solution('10\\n') == 'NO\\n010\\n0'\nassert solution('101\\n110\\n0') == 'YES\\n010\\n1'\nassert solution('101\\n110\\n010\\n110\\n0') == 'NO\\n010\\n1'\n\"\"\"\n\n\nimport sys\nfrom typing import List\n",
        "num_ids_2": 34,
        "num_ids_4": 84
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"NO\"\n\n\"\"\"",
        "num_ids_2": 60,
        "num_ids_4": 89
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('111122') == 'Yes'\nassert solution('111222') == 'Yes'\nassert solution('11212') == 'Yes'\nassert solution('11122233') == 'No'\n",
        "num_ids_2": 25,
        "num_ids_4": 48
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('121') == 'Yes'\nassert solution('123') == 'Yes'\nassert solution('373') == 'Yes'\nassert solution('436') == 'Yes'\nassert solution('123') == 'No'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\nassert solution('873') == 'No'\nassert solution('746') == 'No'",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4237\") == \"Yes\"\nassert solution(\"1234\") == \"No\"\nassert solution(\"1234\") == \"No\"\nassert solution(\"123\") == \"No\"\nassert solution(\"1\") == \"Yes\"\n",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\nassert solution('342') == 'No'\nassert solution('1') == 'Yes'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\n\n\"\"\"\n\nimport re\nimport math\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\nprint(solution(input()))\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('5 6 2 1') == '5'\nassert solution('6 2 1') == '3'\nassert solution('6 2 1 1') == '3'\n",
        "num_ids_2": 18,
        "num_ids_4": 43
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\\n\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\\n\") == \"3\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\n\"\"\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == 5\nassert solution('6 2 1\\n1 0 0 1 0 1') == 3\n\"\"\"",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 1\") == \"3\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\"\"\"\n\n\nfrom sys import stdin\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\n\"\"\"\n\n\nfrom collections import defaultdict\nfrom typing import Dict, List\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\n\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n",
        "num_ids_2": 38,
        "num_ids_4": 50
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\nassert solution('1+2') == '3'\nassert solution('10-3-2-1-4') == '0'\n",
        "num_ids_2": 39,
        "num_ids_4": 63
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\nassert solution('2+3*5/7+5+2*7/9') == '27'\nassert solution('8-9*9+5*8/8+7+8') == '27'\n",
        "num_ids_2": 39,
        "num_ids_4": 75
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n",
        "num_ids_2": 38,
        "num_ids_4": 50
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n\"\"\"\n\nimport re\n\nprint(\n    sum(\n        int(n) for n in re.findall(r'\\d+', input())\n    )\n)\n",
        "num_ids_2": 39,
        "num_ids_4": 51
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\n\"\"\"\n\n\"\"\"\nI have solved the problem on my own. I will check it one more time with the reference solution.\n\n1. I create a class to get the expression and find the result.\n2. I check that there are no parenthesis in the expression.\n3. I check that there is only one operation for each operand.\n4. I check that there are no any operations with no operands.\n5. I check that there are no duplicate operands.\n6. I check that the sum of all operands is 0.\n7. I check that the sum of all operations is 0.\n\nI can check for more conditions, but I didn't.\n\"\"\"\n\nclass Solution:\n    def is_digit(self, char):\n        return ord('0') <= ord(char) <= ord('9')\n\n    def is_operand(self, char):\n        return char in ('+', '-', '*', '/')\n\n    def get_expression(self, stdin):\n        expression = stdin\n        expression_length = len(expression)\n        char = expression[0]\n        if char == '-' and expression[1:].isdigit():\n            expression = '0' + expression\n        while char!= ')' or expression_length == 1:\n            expression_length -= 1\n            char = expression[expression_length]\n            if self.is_operand(char):\n                expression = expression[:expression_length] +'' + char +'' + expression[expression_length:]\n            else:\n                expression = expression[:expression_length]\n                break\n        return expression.split()\n\n    def is_valid(self, expression):\n        expression_length = len(expression)\n        if expression_length == 0:\n            return False\n        if expression_length % 2!= 0:\n            return False\n        if expression[-1] == ')':\n            return False\n        if expression_length == 1:\n            return True\n        operands_amount = 0\n        operators_amount = 0\n        for char in expression:\n            if self.is_digit(char):\n                operands_amount += 1\n            else:\n                if not self.is_operand(char):\n                    return False\n                operators_amount += 1\n                if operators_amount > 1:\n                    return False\n        return operands_amount == expression_length // 2\n\n    def get_result(self, expression):\n        expression_length = len(expression)\n        result = 0\n        for idx, char in enumerate(expression):\n            if self.is_digit(char):\n                result += int(char)\n            elif self.is_operand(char):\n                right_operand_index = idx + 2\n                right_operand = expression[right_operand_index]\n                if self.is_digit(right_operand):\n                    result += int(right_operand)\n                else:\n                    return None\n        return result\n\n    def solution(self, stdin):\n        if self.is_valid(self.get_expression(stdin)):\n            expression = self.get_expression(stdin)[::-1]\n            return self.get_result(expression)\n        return None\n\n\nassert Solution().solution('8-7+6-5+4-3+2-1-0') == 4\nassert Solution().solution('2+2') == -46\nassert Solution().solution('1+1') == 2\n",
        "num_ids_2": 38,
        "num_ids_4": 79
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"46\"\n\nprint(solution(\"112-37\"))",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 50
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-\"+str(-46)\n\"\"\"",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n3 1\\n1 3\\n3 2\\n2 3\\n4 1\\n1 2\\n2 1\\n3 1\\n1 4\\n3 1\\n2 4\\n4 1\\n3 2\\n2 3\\n4 1\\n1 2\\n3 2\\n3 4\\n2 4\\n2 3\\n4 1\\n1 3\\n4 2\\n4 1\\n3 1\\n2 4\\n1 4\\n4 1\\n1 4\\n3 4\\n2 3\\n2 3\\n4 1\\n3 4\\n1 3\\n4 1\\n1 4\\n2 2\\n2 3\\n3 1\\n3 1\\n3 2\\n2 1\\n1 1\\n2 2\\n3 1\\n1 3\\n3 2\\n1 3\\n4 2\\n4 3\\n3 1\\n2 4\\n1 4\\n3 1\\n3 1\\n4 1\\n3 2\\n1 2\\n4 1\\n3 1\\n2 4\\n1 4\\n4 1\\n1 4\\n2 2\\n2 3\\n3 1\\n1 2\\n3 1\\n1 4\\n3 4\\n3 4\\n1 1\\n3 1\\n3 1\\n4 2\\n2 4\\n3 1\\n1 2\\n1 3\\n2 1\\n3 2\\n2 4\\n2 3\\n3 4\\n1 4\\n1 2\\n4 1\\n3 1\\n3 2\\n4 1\\n4 2\\n3 1\\n4 2\\n1 4\\n1 2\\n2 3\\n2 4\\n2 4\\n2 4\\n3 1\\n4 1\\n3 2\\n1 3\\n3 1\\n3 2\\n4 1\\n2 4\\n1 1\\n2 4\\n2 4\\n1 1\\n1 2\\n2 2\\n2 1\\n2 2\\n1 3\\n1 1\\n3 2\\n2 2\\n1 3\\n3 1\\n2 1\\n2 4\\n3 1\\n2 2\\n1 2\\n2 4\\n3 1\\n1 4\\n1 2\\n2 4\\n2 4\\n2 1\\n2 4\\n2 4\\n2 4\\n2 4\\n1 2\\n2 2\\n1 4\\n3 2\\n2 2\\n4 1\\n4 1\\n1 3\\n3 1\\n1 4\\n2 3\\n3 2\\n1 2\\n2 4\\n1 1\\n3 4\\n1 4\\n2 3\\n2 1\\n3 2\\n3 4\\n1 2\\n4 1\\n2 4\\n1 4\\n1 1\\n2 4\\n3 1\\n2 3\\n3 1\\n1 4\\n1 1\\n1 3\\n4 3\\n3 2\\n2 4\\n1 2\\n1 1\\n1 2\\n1 4\\n2 1\\n1 3\\n1 1\\n2 1\\n2 2\\n3 4\\n1 3\\n2 2\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n1 1\\n1 4\\n1 2\\n2 4\\n1 4\\n2 3\\n1 4\\n3 4\\n1 2\\n1 4\\n2 3\\n2 4\\n1 1\\n1 4\\n2 3\\n2 2\\n1 1\\n1 3\\n1 3\\n1 2\\n1 1\\n2 2\\n3 2\\n2 1\\n2 4\\n1 4\\n1 1\\n1 4\\n1 4\\n2 3\\n2 1\\n3 2\\n2 1\\n1 3\\n1 4\\n1 3\\n1 1\\n1 1\\n1 4\\n1 2\\n2 3\\n1 2\\n2 3\\n1 2\\n2 2\\n3 4\\n1 1\\n3 2\\n1 2\\n1 1\\n1 3\\n1 3\\n2 3\\n1 2\\n3 4\\n1 3\\n1 3\\n2 4\\n1 2\\n1 3\\n1 4\\n1 2\\n1 4\\n1 2\\n3 4\\n2 3\\n3 4\\n2 4\\n1 1\\n1 1\\n1 2\\n1 4\\n1 4\\n1 4\\n1 1\\n1 1\\n1 2\\n1 4\\n1 4\\n2 1\\n1 4\\n1",
        "num_ids_2": 1101,
        "num_ids_4": 1101
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3') == 'YES\\n3 1\\n1 3\\n3 2\\n2 3'\nassert solution('10 4') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n2 3'\n\"\"\"\n\nn, k = map(int, input().split())\nans = \"YES\"\nfor i in range(n):\n    for j in range(i + 1, n):\n        if (stdin[i * 2] == stdin[j * 2]) or (stdin[i * 2 + 1] == stdin[j * 2 + 1]):\n            ans = \"NO\"\n            break\n\nprint(ans)\n",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\") == \"YES\\n3 1\\n1 3\\n3 2\"\nassert solution(\"4 3\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\") == \"YES\\n2 1\\n1 3\\n3 2\"\nassert solution(\"4 3\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\") == \"NO\"\nassert solution(\"4 3\\n1 2\\n1 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\") == \"NO\"\nassert solution(\"4 3\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\\n2 3\\n1 3\\n3 2\\n1 2\") == \"NO\"\n",
        "num_ids_2": 158,
        "num_ids_4": 276
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n3 2\\n1 2') == 'YES'\nassert solution('10 4\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n') == 'YES'\nassert solution('13 4\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n') == 'NO'\n\nprint(\"Check succeeded\")",
        "num_ids_2": 76,
        "num_ids_4": 129
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3') == 'YES'\n\nassert solution('10 4') == 'YES'\n\nassert solution('13 4') == 'NO'\n\nassert solution('1 10') == 'NO'\n\nassert solution('2 2') == 'NO'",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 3\n''') == 'YES\n3 1\n1 3\n3 2\n2 3\n\nassert solution('''10 4\n''') == 'YES\n2 1\n1 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n\nassert solution('''13 4\n''') == 'YES\n2 1\n1 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1''')\n\n'''\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('10 4') == 'YES'\nassert solution('13 4') == 'NO'\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n\") == 'YES\\n3 1\\n1 3\\n3 2\\n2 3\\n4 1\\n1 4\\n3 1\\n3 2\\n2 4\\n4 3\\n3 4\\n2 1\\n1 2\\n3 1\\n3 2\\n4 2\\n1 4\\n\")\nassert solution(\"10 4\\n\") == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n3 2\\n2 4\\n4 3\\n3 4\\n2 1\\n1 2\\n3 1\\n3 2\\n4 2\\n1 4\\n\")\nassert solution(\"13 4\\n\") == 'NO\\n'\nassert solution(\"5 4\\n\") == 'YES\\n1 3\\n1 2\\n2 4\\n3 4\\n3 1\\n1 4\\n4 1\\n1 3\\n2 1\\n2 3\\n3 2\\n4 3\\n4 2\\n3 1\\n1 2\\n2 4\\n4 1\\n2 3\\n3 2\\n\") == 'YES\\n1 2\\n2 1\\n3 1\\n2 3\\n1 4\\n4 1\\n3 2\\n2 3\\n4 2\\n1 3\\n3 1\\n4 3\\n3 2\\n1 2\\n2 4\\n4 1\\n2 3\\n3 2\\n'\nassert solution(\"12 5\\n\") == 'NO\\n'\n",
        "num_ids_2": 178,
        "num_ids_4": 362
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('10 4') == 'YES'\nassert solution('13 4') == 'NO'\n\"\"\"\nimport math\nfrom typing import List, Dict, Tuple",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == 18\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n\nsolution.test_cases = [\n    (\n        # input\n        (\n            # first line\n            (5, 2, 3),\n            # second line\n            (5, 1, 3, 10, 1),\n        ),\n        # output\n        18,\n    ),\n    (\n        # input\n        (\n            # first line\n            (6, 1, 5),\n            # second line\n            (10, 30, 30, 70, 10, 10),\n        ),\n        # output\n        -1,\n    ),\n]\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1\\n') == '18'\n\"\"\"\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\np = a[n - 1]\nq = sum(a)",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 1\\n1 100 1 1\\n') == '100'\nassert solution('5 2 3\\n5 1 3 10 1\\n') == '18'\n\"\"\"\n\nfrom collections import defaultdict, deque\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\\n\") == \"18\"\n\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('4 3 1\\n1 100 1 1') == '100'\nassert solution('2 1 1\\n10 10') == '10'\n\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 74
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 3 10 1\") == 18\nassert solution(\"6 1 5\") == -1\nassert solution(\"4 3 1\") == 100\n",
        "num_ids_2": 23,
        "num_ids_4": 33
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 3 10 1\") == 18\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1, 3, 4) == 4\nassert solution(4, 1, 5) == 4\nassert solution(5, 1, 3) == -1\nassert solution(6, 2, 2) == 4\nassert solution(6, 1, 5) == -1\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('abc') == ''\nassert solution('abc', 2) == 'bc'\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 28
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10000') == '1'\nassert solution('0100100') == '1'\nassert solution('0010100') == '5'\nassert solution('0101010') == '10'\nassert solution('10101010') == '15'\n",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".1.1.1.\") == 3\nassert solution(\".1111.\") == 3\nassert solution(\".100.\") == 2\nassert solution(\".11.\") == 2\nassert solution(\".11111.\") == 5\n",
        "num_ids_2": 22,
        "num_ids_4": 40
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10001\") == \"1\"\nassert solution(\"10101\") == \"2\"\nassert solution(\"0101101\") == \"3\"\nassert solution(\"1110101\") == \"3\"\nassert solution(\"1101101\") == \"3\"\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"111111111111111111111111111111101111111111111111111111101\") == 21\nassert solution(\"0101010101010101010101010101010101010101010101010101010101010\") == 10\n\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 69
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11101\") == 5\nassert solution(\"0111\") == 3\nassert solution(\"10111\") == 6\nassert solution(\"001101\") == 5\nassert solution(\"101101\") == 9\n",
        "num_ids_2": 18,
        "num_ids_4": 37
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101010\") == \"8\"\nassert solution(\"11101010\") == \"13\"\nassert solution(\"11101011\") == \"16\"\nassert solution(\"11101010\") == \"8\"\nassert solution(\"11101010\") == \"8\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('00100') == 3\nassert solution('0011') == 4\nassert solution('01110') == 5\nassert solution('011110') == 7\nassert solution('011111') == 8\n",
        "num_ids_2": 18,
        "num_ids_4": 37
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"00100\") == \"3\"\nassert solution(\"11111100\") == \"8\"\nassert solution(\"1101011110111\") == \"18\"\nassert solution(\"110111\") == \"3\"\nassert solution(\"1101111\") == \"3\"\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"01110\") == 6\nassert solution(\"11110\") == 10\nassert solution(\"11111\") == 11\nassert solution(\"11110\") == 10\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('00100') == '3'\nassert solution('101010') == '9'\nassert solution('11101') == '12'",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"azzel\", \"apple\") == \"Yes\"\n\nprint(solution(\"azzel\", \"apple\"))\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'No'\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('fizz') == 'No'\nassert solution('zzz') == 'No'",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"bazzel\") == \"No\"\nassert solution(\"jazzel\") == \"No\"\n\n\"\"\"\nfrom typing import Dict, List, Set\n",
        "num_ids_2": 21,
        "num_ids_4": 45
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'No'\n\nassert solution('f') == 'Yes'\nassert solution('f{1}') == 'No'\n\nassert solution('f{a}') == 'Yes'\n",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"azzel\") == \"Yes\"\n\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('aazzel') == 'No'\nassert solution('zazzel') == 'No'\nassert solution('a') == 'Yes'\n\"\"\"\n",
        "num_ids_2": 21,
        "num_ids_4": 45
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"hello\") == \"No\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".a.a.\") == \"Yes\"\nassert solution(\"abbba\") == \"Yes\"\nassert solution(\"abab\") == \"No\"\n\"\"\"\n\n\"\"\"\nTESTING\n\"\"\"\nfrom collections import Counter",
        "num_ids_2": 24,
        "num_ids_4": 35
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'NOT POSSIBLE'\nassert solution('3 1 2 3') == '8'\nassert solution('5 5 1 3 4 2') == 'NOT POSSIBLE'\nassert solution('10 7 10 7 5 10 5') == '10'\nassert solution('10 10 7 7 5 10 5') == '15'\n",
        "num_ids_2": 26,
        "num_ids_4": 60
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 10\") == \"4\"\nassert solution(\"8 10 10\") == \"8\"\nassert solution(\"8 9 9 9\") == \"8\"\nassert solution(\"9 10 10 10\") == \"18\"\nassert solution
        "num_ids_2": 23,
        "num_ids_4": 49
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 1 5\\n2 4 1 6\") == \"10\"\nassert solution(\"4\\n1 3 1 5\\n2 4 1 6\\n3 5 1 6\") == \"5\"\nassert solution(\"2\\n1 3 1\\n2 4 1\") == \"4\"\nassert solution(\"2\\n1 3 1\\n2 4 1\\n3 5 1\") == \"6\"\nassert solution(\"4\\n1 3 1 5\\n2 4 1 6\\n3 5 1 6\\n4 6 1 6\") == \"11\"\n",
        "num_ids_2": 50,
        "num_ids_4": 95
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 20 10 15\") == \"Yes\\n20\"\nassert solution(\"3 20 10 15\") == \"No\"\nassert solution(\"6 20 10 15\") == \"No\"\nassert solution(\"5 20 10 15\") == \"Yes\\n30\"\nassert solution(\"10 20 10 15\") == \"Yes\\n50\"\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin",
        "num_ids_2": 29,
        "num_ids_4": 58
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 2 1 1 2 2 3 3 1 1') == '4'\n\"\"\"\n\nfrom itertools import combinations\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 2 3 1 4\") == \"8\"\nassert solution(\"3 4 5\") == \"10\"\nassert solution(\"1 3 3 3 2 1 4 3 3 1 1 1 4\") == \"9\"\nassert solution(\"2 4 2 1 1 1 3 2 4 1 1 1\") == \"9\"\nassert solution(\"3 1 5 4 3\") == \"9\"\n",
        "num_ids_2": 27,
        "num_ids_4": 70
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 5\n1 2 3 4\n1 2 1\n1 3 1\n1 4 1\n3 3 3''') == '3'\n\nassert solution('''4 5\n1 2 3 4\n1 2 1\n1 3 1\n1 4 1\n3 3 3''') == '3'\n\nassert solution('''6 3\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 2 1\n2 2 1''') == '1'\n\nassert solution('''10 1\n9 8 7 6 5 4 3 2 1\n1 2 3 4 5 6 7 8 9 10''') == '10'\n\nassert solution('''1 2\n1 1''') == '0'",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10 8\") == \"30\"\nassert solution(\"5 30 4 8\") == \"26\"\n\"\"\"\n\na, b, c = [int(i) for i in input().split()]\nprint(a * b * c)\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"6 6 5 5 6 8\"\n) == \"8 10\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10\") == \"500\"\nassert solution(\"3 15\") == \"1500\"\nassert solution(\"2 10, 1 20\") == \"1000\"\nassert solution(\"3 15, 2 10\") == \"1500\"\nassert solution(\"4 20, 1 2, 2 3\") == \"1,500\"\n",
        "num_ids_2": 22,
        "num_ids_4": 50
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 700\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == '3'\nassert solution('2 10\\n4 2\\n5 1') == '0'\nassert solution('4 400\\n100 100\\n100 100\\n100 100') == '4'\n\"\"\"\n\nfrom math import gcd",
        "num_ids_2": 38,
        "num_ids_4": 61
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 700\") == \"3\"\n\n-----Problem-----\nAt the end of the day, there are a number of activities that need to be done.\nA group of people need to get up early in the morning, get ready to go to work, get ready to go to bed, and then get up in the morning to start work again.\nHowever, each of these activities has its own optimal time.\nSo, the best way to do all of the activities is to run through the day once and start at the earliest time possible.\nThere are n activities to be done, and the times of the start of each activity are given in an array a.\nThe i-th activity starts at time a[i].\nAs mentioned in the description, there are p[i] people needed to do the i-th activity.\nThe p[i] people should get up early in the morning, get ready to go to work, get ready to go to bed, and then get up in the morning to start work again.\nSo, the i-th activity should be done by the earliest number of p[i] people possible.\nFor example, if a = [4, 1, 2, 3, 5], then the schedule of activities is shown below:\nA: Start at time 4 (4 people needed to get up in the morning).\nB: Start at time 1 (1 person needed to get up in the morning).\nC: Start at time 2 (2 people needed to get up in the morning).\nD: Start at time 3 (3 people needed to get up in the morning).\nE: Start at time 5 (5 people needed to get up in the morning).\nThe minimum number of people needed is 2 (1 person needed in the morning and 1 in the evening).\nTo accomplish the schedule, we can take the following actions:\n- Start the activity C at time 1.\n- Start the activity D at time 2.\n- Start the activity E at time 3.\n- Start the activity C at time 3.\n- Start the activity A at time 4.\n- Start the activity B at time 4.\nThe schedule now looks like this:\nA: Start at time 1 (1 person needed to get up in the morning).\nB: Start at time 4 (2 people needed to get up in the morning).\nC: Start at time 1 (1 person needed to get up in the morning).\nD: Start at time 2 (1 person needed to get up in the morning).\nE: Start at time 3 (1 person needed to get up in the morning).\nC: Start at time 3 (1 person needed to get up in the evening).\nA: Start at time 4 (1 person needed to get up in the evening).\nB: Start at time 4 (1 person needed to get up in the evening).\nSo, the minimum number of people needed is 2.\n\n-----Constraints-----\n - 1 \u2264 n \u2264 5 * 10^5\n - 1 \u2264 a[i] \u2264 10^9\n - 1 \u2264 p[i] \u2264 10^5\n - The total number of people needed to do all activities is at most 10^4.\n - The total number of activities is at most 200.\n\n-----Input-----\nThe first line of input contains a single integer t (1 \u2264 t \u2264 200) \u2014 the number of test cases.\nFor each test case, there are lines with the following format:\n- Line 1 contains two space-separated integers n and g (1 \u2264 n \u2264 10^5, 1 \u2264 g \u2264 10^6).\n- The next line contains n space-separated integers a_1, a_2,..., a_n (0 \u2264 a_i \u2264 10^9).\n- The next line contains n space-separated integers p_1, p_2,..., p_n (0 \u2264 p_i \u2264 10^5).\n\n-----Output-----\nFor each test case, output a single line containing one integer \u2014 the minimum number of people needed to do all activities.\n\n-----Sample Input-----\n3\n2 700\n3 500\n5 800\n\n-----Sample Output-----\n2\n3\n4\n\n-----Problem-----\nYou have a case of shoes that you want to sell.\nEach shoe is described by a pair of integers (size, price) whereby size is the shoe size and price is the price per pair of that shoe.\nYou are given the sizes of N pairs of shoes available in your shop and the price of each shoe size.\nYou can sell the shoe of size S with a loss of L, where S is the shoe size and L is the price.\nYou have to find out how many pairs of shoes you can sell to maximize your total revenue.\n\n-----Constraints-----\n - 1 \u2264 N \u2264 10^5\n - 1 \u2264 S, L, P[i] \u2264 10^9\n\n-----Input-----\nThe first line of input contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of shoes in the shop.\nThe next line contains N space-separated integers P_1, P_2,..., P_N (0 \u2264 P_i \u2264 10^9).\nThe next line contains N space-separated integers S, L, P_1, P_2,..., P_N (0 \u2264 S, L, P_i \u2264 10^9).\n\n-----Output-----\nPrint a single integer \u2014 the maximum number of shoes that you can sell.\n\n-----Sample Input-----\n4\n4 1\n5 9\n4 1\n5 10\n\n-----Sample Output-----\n3\n\nIn the sample example, the size 4 shoe cost 9 and the size 5 shoe costs 10.\nYou can sell three pairs of shoes of size 4, one pair of shoes of size 5 and one pair of shoes of size 5.\nThe maximum number of shoes that you can sell is three.\n\n-----Problem-----\nYou have a case of pants that you want to sell.\nEach pair of pants is described by a pair of integers (size, price) whereby size is the size of the pants and price is the price per pair of that pants.\nYou are given the sizes of M pairs of pants available in your shop and the price of each pants size.\nYou can sell the pants of size S with a loss of L, where S is the pants size and L is the price.\nYou have to find out how many pairs of pants you can sell to maximize your total revenue.\n\n-----Constraints-----\n - 1 \u2264 M \u2264 10^5\n - 1 \u2264 S, L, P[i] \u2264 10^9\n\n-----Input-----\nThe first line of input contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of pants in the shop.\nThe next line contains M space-separated integers P_1, P_2,...",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\nimport os\nimport sys\nfrom io import StringIO\nfrom collections import defaultdict",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"6 100\") == \"6\"\nassert solution(\"1 1\") == \"1\"\n\"\"\"\n\nD, G = [int(x) for x in input().split()]\nP = sorted([int(x) for x in input().split()])\nC = sorted([int(x) for x in input().split()])\n\ntotal_score = 0\nperfect_bonus = 0\nfor i in range(len(P)):\n    if P[i] * 100 >= C[i]:\n        total_score += P[i]\n        perfect_bonus += C[i]\n        break\n\ntotal_score += perfect_bonus",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\nimport sys\nimport math",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 300\\n200 500\\n100 200\\n500 600\\n\") == \"3\"\nprint(\"Test 1 OK\")\n\nassert solution(\"4 800\\n100 200\\n500 600\\n300 400\\n\") == \"3\"\nprint(\"Test 2 OK\")",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6\\n100 1000\\n200 500\\n250 600\\n500 300\\n600 200\\n700 100\") == \"3\"\nassert solution(\"2 500\\n3 400\\n5 800\") == \"2\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 300') == '4'\nassert solution('2 700') == '3'\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4') == '3'\n\"\"\"\n\nfrom functools import reduce\n",
        "num_ids_2": 39,
        "num_ids_4": 60
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6') == '2'\n\nassert solution('8\\n4 8 8 7 8 4 4 5') == '2'\n\nassert solution('9\\n2 3 4 2 2 3 2 2 4') == '3'\n",
        "num_ids_2": 39,
        "num_ids_4": 60
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == '2'\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == '2'\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == '3'\n",
        "num_ids_2": 39,
        "num_ids_4": 60
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 4 4 3\") == \"1\\n0\\n2\"\nassert solution(\"5\\n5 4 3 3 2\") == \"1\\n0\\n1\"\nassert solution(\"8\\n1 2 4 4 5 5 6 6\") == \"1\\n0\\n2\"\nassert solution(\"9\\n1 2 2 2 2 3 2 2 4\") == \"1\\n0\\n3\"\n",
        "num_ids_2": 45,
        "num_ids_4": 98
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7\n5 5 4 5 5 5 6''') == '2'\nassert solution('''8\n4 8 8 7 8 4 4 5''') == '2'\nassert solution('''9\n2 3 4 2 2 3 2 2 4''') == '3'''",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8 8 7 8 4 4 5\") == 2\nassert solution(\"2 3 4 2 2 3 2 2 4\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4\") == 3\n",
        "num_ids_2": 31,
        "num_ids_4": 48
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n",
        "num_ids_2": 39,
        "num_ids_4": 60
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\nprint('Success')",
        "num_ids_2": 39,
        "num_ids_4": 60
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5 4 5 5 5 6') == 2\nassert solution('4 8 8 7 8 4 4 5') == 2\nassert solution('2 3 4 2 2 3 2 2 4') == 3\nassert solution('9 2 3 4 2 2 3 2 2 4') == 3\nassert solution('5 6 4 3 4 3 2 1') == 0\n",
        "num_ids_2": 29,
        "num_ids_4": 62
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'''\n7\n5 5 4 5 5 5 6\n''') == \"2\"\n\nassert solution(\n'''\n8\n4 8 8 7 8 4 4 5\n''') == \"2\"\n\nassert solution(\n'''\n9\n2 3 4 2 2 3 2 2 4\n''') == \"3\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\"\nassert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\n\"\"\"\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\na_sum = sum(a)\na_sum -= x",
        "num_ids_2": 39,
        "num_ids_4": 57
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1 3\\n5 1 3 10 1') == 18\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\n\nassert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\n\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\"\n\nassert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 75
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(    \"6 1 5\\n10 30 30 70 10 10\") == \"18\"\n\"\"\"\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nprint(-1 if x > n else sum(a[x-k:x]))\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 3\\n5 1 3 10 1') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('4 1 1\\n10 100 1 1') == '100'\nassert solution('7 1 5\\n7 0 7 0 7 0 7') == '-1'\nassert solution('10 1 1\\n1 100 1 1') == '100'\n\n\"\"\"\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 3\\n1 100 1 1') == '100'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\n\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 1\nassert solution('1 2\\n') == 2\nassert solution('1 2 3\\n') == 6\nassert solution('2 3\\n') == -1\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2\") == \"1\"\nassert solution(\"5 1 3\") == \"10\"\nassert solution(\"5 2 3\") == \"-1\"\nassert solution(\"5 3 3\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\\n\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\\n\") == \"100\"\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"2\") == \"No\"\nassert solution(\"4\") == \"Yes\"\nassert solution(\"7\") == \"Yes\"\n\"\"\"\n\nfrom math import floor, ceil\n\nn = int(input())\n\nprint(\"Yes\" if n <= 2 * (2 * (ceil(n / 4) + floor(n / 7) - 1)) else \"No\")\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == 'Yes'\n\"\"\"\n\n\"\"\"\nInput\n11\n\nOutput\nYes\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == 'Yes'\nassert solution('0') == 'No'\nassert solution('-1') == 'No'\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def __init__(self, stdin):\n        self.stdin = stdin\n        self.cake = 4\n        self.doughnut = 7\n    \n    def solution(self) -> str:\n        N = int(self.stdin)\n        if N % self.cake == 0 and N % self.doughnut == 0:\n            return 'Yes'\n        else:\n            return 'No'\n\nclass TestSolution(unittest.TestCase):\n\n    def setUp(self):\n        self.solution = Solution(None)\n    \n    def test_stdin_is_empty(self):\n        self.assertEqual(self.solution.solution(), 'No')\n\n    def test_stdin_is_11(self):\n        self.assertEqual(self.solution.solution(), 'Yes')\n\n    def test_stdin_is_0(self):\n        self.",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n''') == 'Yes'\nassert solution('''5\n''') == 'No'\nassert solution('''3\n''') == 'Yes'\nassert solution('''8\n''') == 'Yes'\nassert solution('''1\n''') == 'No'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n') == 'No'\nassert solution('10\\n') == 'Yes'\nassert solution('11\\n') == 'Yes'\nassert solution('12\\n') == 'Yes'\nassert solution('13\\n') == 'No'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == 'Yes'\nassert solution('16') == 'Yes'\nassert solution('6') == 'No'\nassert solution('7') == 'No'\nassert solution('13') == 'No'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11') == 'Yes'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"No\"\nassert solution(\"5\") == \"No\"\nassert solution(\"6\") == \"No\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"8\") == \"No\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\") == \"Yes\"\n\"\"\"\n\nN = int(stdin.readline().rstrip())\n\ncake = 7\ndoughnut = 4",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1\\n1\\n2\") == \"Yes\"\nassert solution(\"4\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n3\") == \"No\"\n\"\"\"",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n\nfrom collections import Counter\n\nN = int(input())\nxys = Counter([(int(x), int(y)) for x, y, _ in [input().split() for _ in range(N)]])\nprint(*[xys[(0, 0)] * 2, xys[max(xys.keys())] * 2, max(xys.keys())] if xys else [0, 0, 0])",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\": 1 1 5\\n0 0 5\\n0 0 5\\n: 0 0 5\") == \"1 1 5\"\n\n\"\"\"\n\nfrom collections import Counter\nimport itertools\nimport math\nimport sys",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n4\n2 3 5\n2 1 5\n1 2 5\n3 2 5\n\"\"\"\n) == \"2 2 6\"\n\n\"\"\"\n\u3010\u554f\u984c\u6982\u8981\u3011\n\u516c\u9e7f\u306e\u611b\u5948\u306f\u89e3\u8aac\u304c\u91cd\u8981\u3067\u3001\u30cd\u30c3\u30af\u30ec\u30fc\u30b9\u3067\u3082\u9811\u5f35\u3063\u3066\u3044\u308b\u3088\u3046\u3060\u3002\u516c\u9e7f\u304c\u8a00\u3046\u3068\u3001\u3042\u306a\u305f\u304c\u6301\u3063\u3066\u3044\u308b\u8907\u6570\u306e\u30aa\u30fc\u30d7\u30f3\u30a2\u30a4\u30c6\u30e0\u3092\u58f2\u308a\u8fbc\u307f\u3001\u4ed6\u306b\u8cb7\u3046\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n\n\u3053\u306e\u30a2\u30a4\u30c6\u30e0\u306f\u3001\u63a2\u3057\u306b\u6355\u307e\u3063\u3066\u3044\u308b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306e\u3046\u3061\u3001\u6700\u3082\u30c0\u30e1\u30fc\u30b8\u3092\u4e0e\u3048\u308b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306e\u3069\u308c\u304b\u3067\u3059\u3002\u3053\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u5168\u3066\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u306b\u306f\u3001\u5148\u306b\u30c0\u30e1\u30fc\u30b8\u3092\u4e0e\u3048\u305f\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067\u6700\u3082\u6b8b\u308a\u306e\u30d1\u30ef\u30fc\u3092\u3082\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u9078\u3073\u307e\u3059\u3002\n\n\u305d\u3046\u3059\u308c\u3070\u3001\u305d\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067\u516c\u9e7f\u304c\u6700\u5927\u306e\u30c0\u30e1\u30fc\u30b8\u3092\u4e0e\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u554f\u984c\u306e\u8aac\u660e\u3092\u898b\u308b\u3068\u3001\u8907\u6570\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304c\u3042\u308a\u3001\u516c\u9e7f\u304c\u6700\u5927\u306e\u30c0\u30e1\u30fc\u30b8\u3092\u3082\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u9078\u3073\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\n\u516c\u9e7f\u306b\u3057\u304b\u6301\u3063\u3066\u3044\u306a\u3044\u30a2\u30a4\u30c6\u30e0\u3092\u58f2\u308b\u306e\u3092\u8003\u3048\u308b\u3068\u3001\n\n\u3042\u306a\u305f\u306f\u8907\u6570\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u306b\u306f\u3001\u5148\u306b\u30c0\u30e1\u30fc\u30b8\u3092\u4e0e\u3048\u305f\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067\u6700\u3082\u6b8b\u308a\u306e\u30d1\u30ef\u30fc\u3092\u3082\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u9078\u3073\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u305d\u306e\u3046\u3048\u3067\u306f\u3001\u63a2\u3057\u306b\u6355\u307e\u3063\u3066\u3044\u308b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306e\u3046\u3061\u3001\u6700\u3082\u30c0\u30e1\u30fc\u30b8\u3092\u4e0e\u3048\u308b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306e\u3069\u308c\u304b\u3067\u3059\u3002\n\n\u307e\u305f\u3001\u305d\u308c\u306f\u3001\u516c\u9e7f\u304c\u6700\u5927\u306e\u30c0\u30e1\u30fc\u30b8\u3092\u3082\u3063\u3066\u3044\u308b\u3082\u306e\u3067\u3059\u3002\n\n\u305d\u308c\u3089\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u8cfc\u5165\u3057\u3001\u6700\u3082\u30c0\u30e1\u30fc\u30b8\u3092\u4e0e\u3048\u308b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u5168\u3066\u51fa\u3057\u3066\u3001\u516c\u9e7f\u304c\u6700\u5927\u306e\u30c0\u30e1\u30fc\u30b8\u3092\u3082\u3063\u3066\u3044\u308b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304c\u3044\u304f\u3064\u3042\u308b\u304b\u3092\u6570\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n[\u5236\u7d04]\n - \u8f9e\u66f8\u306e\u30ad\u30fc\u306f\u3001\u5168\u3066\u6574\u6570\u3067\u3042\u308b\u3002\n - N\u306f\u30011\u4ee5\u4e0a 100\u4ee5\u4e0b\u3067\u3042\u308b\u3002\n - \u6b8b\u308a\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u306b\u306f\u3001\u5148\u306b\u30c0\u30e1\u30fc\u30b8\u3092\u4e0e\u3048\u305f\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067\u6700\u3082\u6b8b\u308a\u306e\u30d1\u30ef\u30fc\u3092\u3082\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u9078\u3073\u307e\u3059\u3002\n - \u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306e\u500b\u6570\u306f\u30011\u4ee5\u4e0a 100\u4ee5\u4e0b\u3067\u3042\u308b\u3002\n - \u6bce\u56de\u3001\u30a2\u30a4\u30c6\u30e0\u3092\u58f2\u308b\u3068\u3001\u540c\u3058\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067\u306e\u516c\u9e7f\u304c\u6700\u5927\u306e\u30c0\u30e1\u30fc\u30b8\u3092\u3082\u3063\u3066\u3044\u308b\u3082\u306e\u306b\u4e00\u756a\u6700\u3082\u8ddd\u96e2\u304c\u8fd1\u3044\u3082\u306e\u3092\u9078\u3073\u307e\u3059\u3002\n - \u8907\u6570\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u306b\u306f\u3001\u5148\u306b\u30c0\u30e1\u30fc\u30b8\u3092\u4e0e\u3048\u305f\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067\u6700\u3082\u6b8b\u308a\u306e\u30d1\u30ef\u30fc\u3092\u3082\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u9078\u3073\u307e\u3059\u3002\n\n\u3010\u5236\u7d04\u3092\u6e80\u305f\u3059\u3088\u3046\u306a\u51fa\u529b\u3092\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3011\n\u51fa\u529b\u306f\u3001\u4ee5\u4e0b\u306e\u66f8\u5f0f\u3067\u3042\u308b\u3002\n\nN\nitem_1 item_2 item_3...\n\n\u5165\u529b\u4f8b1\n3\n1 2 3\n1 2 3\n1 1 3\n\n\u51fa\u529b\u4f8b1\n2 3 5\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\n\nx_n, y_n, h_n = [], [], []\nfor _ in range(N):\n    x, y, h = map(int, sys.stdin.readline().strip().split(' '))\n    x_n.append(x)\n    y_n.append(y)\n    h_n.append(h)\n\nmax_h = max(h_n)\nmin_x = min(x_n)\nmin_y = min(y_n)\n\nfor i in range(N):\n    if h_n[i] == max_h:\n        center_x = x_n[i]\n        center_y = y_n[i]\n        break\n\nfor i in range(N):\n    if h_n[i] == max_h:\n        continue\n    x = x_n[i]\n    y = y_n[i]\n    h = h_n[i]\n    if abs(x - center_x) + abs(y - center_y) > h:\n        center_x = -1\n        center_y = -1\n        break\n\nprint(center_x, center_y, max_h)\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\nassert solution(\"2 2 3\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\nassert solution(\"2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n1 2 1\") == \"2 2 6\"\nassert solution(\"1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"1 1 1\"\n",
        "num_ids_2": 58,
        "num_ids_4": 121
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\n\nm = {}\nfor _ in range(n):\n    x, y, z = list(map(int, sys.stdin.readline().split()))\n    m[(x, y)] = z\n\nfrom math import inf\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\nassert solution(\"1 1 1\\n2 3 5\\n3 1 5\") == \"1 1 1\"\nassert solution(\"4\\n1 2 3\\n2 3 4\\n3 4 5\\n4 5 6\") == \"1 2 3\"\n\"\"\"\n\nimport sys\n\nfrom functools import reduce\n",
        "num_ids_2": 53,
        "num_ids_4": 85
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\n---Problem---\n\u4f4f\u5728\u8db3\u67c4\u4e0a\u7684\u4e8c\u5c71\u5fc3\u8df3\u8df3, \u56e0\u70ba\u5403\u4e86\u5f88\u591a\u4e32\u7684\u86cb\u548c\u9b3c\u812f, \u4f46\u7d66\u4e86\u5f88\u591a\u8cea\u7684\u7b11\u8a71, \u53ef\u4ee5\u9032\u884c\u8aaa\u8a71.\n\n\u5728\u4efb\u610f\u4e00\u500b\u4e8c\u5c71\u5fc3\u8df3\u8df3, \u8db3\u8ddf\u624b\u90fd\u6703\u8df3\u8d77\u4f86. \u8db3\u67c4\u4e0a\u6709\u7e3d\u5171n\u500b\u8db3\u8ddf, \u4e8c\u5c71\u5fc3\u8df3\u8df3\u6703\u6709m\u500b\u8a71\u984c. \u4e26\u4e14\u6bcf\u4e00\u500b\u8a71\u984c\u6703\u6709\u4e00\u500b\u8db3\u67c4\u63a5\u7684\u53e6\u4e00\u500b\u8db3\u67c4.\n\n\u63a5\u8457\u8acb\u627e\u51fa\u80fd\u6709\u591a\u5c11\u8a71\u7d44\u53ef\u4ee5\u9078\u51fa\u4f86, \u8a71\u984c\u7684\u500b\u6578\u70ba?\n\n---Problem---\n\u4f4f\u5728\u8db3\u67c4\u4e0a\u7684\u4e8c\u5c71\u5fc3\u8df3\u8df3, \u56e0\u70ba\u5403\u4e86\u5f88\u591a\u4e32\u7684\u86cb\u548c\u9b3c\u812f, \u4f46\u7d66\u4e86\u5f88\u591a\u8cea\u7684\u7b11\u8a71, \u53ef\u4ee5\u9032\u884c\u8aaa\u8a71.\n\n\u5728\u4efb\u610f\u4e00\u500b\u4e8c\u5c71\u5fc3\u8df3\u8df3, \u8db3\u8ddf\u624b\u90fd\u6703\u8df3\u8d77\u4f86. \u8db3\u67c4\u4e0a\u6709\u7e3d\u5171n\u500b\u8db3\u8ddf, \u4e8c\u5c71\u5fc3\u8df3\u8df3\u6703\u6709m\u500b\u8a71\u984c. \u4e26\u4e14\u6bcf\u4e00\u500b\u8a71\u984c\u6703\u6709\u4e00\u500b\u8db3\u67c4\u63a5\u7684\u53e6\u4e00\u500b\u8db3\u67c4.\n\n\u63a5\u8457\u8acb\u627e\u51fa\u80fd\u6709\u591a\u5c11\u8a71\u7d44\u53ef\u4ee5\u9078\u51fa\u4f86, \u8a71\u984c\u7684\u500b\u6578\u70ba?\n\n>>> solution(\"3\\n1 2 3\\n1 2 3\\n1 2 3\")\n2\n>>> solution(\"3\\n1 1 1\\n1 1 1\")\n4\n>>> solution(\"3\\n1 1 1\\n1 1 1\\n1 1 1\")\n3\n\n---Problem---\n\u6709\u4e00\u500b\u4eba, \u4ed6\u53eb\u505aMax, \u904e\u53bb\u500b\u4eba\u4f86\u5230\u4e86\u500b\u68ee\u6797\u88e1\u9762, \u8a72\u68ee\u6797\u6709N\u500b\u68f5\u6811, \u90fd\u67092\u7a2e\u5c5e\u6027: \u53ef\u4ee5\u9078\u64c7\u4e0d\u639b, \u53ef\u4ee5\u9078\u64c7\u639b. \nMax\u6bcf\u4e00\u68f5\u6811\u7684\u639b\u7684\u9ad8\u5ea6\u9084\u6709\u5e73\u5747\u9ad8\u5ea6, \u9078\u64c7\u639b\u7684\u6642\u5019\u6703\u639b\u5728\u5e73\u5747\u9ad8\u5ea6\u7684\u5340\u57df, \u5728\u639b\u7684\u6642\u5019, \u4ed6\u8981\u628a\u68f5\u6811\u639b\u4e0a\u53bb, \u4ed6\u61c9\u8a72\u9078\u64c7\u639b\u7684\u68f5\u6811. \nMax\u8981\u6c42\u5c07N\u68f5\u6811\u7684\u68f5\u6811\u639b\u4e0a\u53bb, \u5176\u6240\u6709\u68f5\u6811\u7684\u639b\u9ad8\u5ea6\u7684\u7e3d\u548c\u5fc5\u9808\u7b49\u65bc\u6700\u5927\u9ad8\u5ea6\u7684\u7e3d\u548c. Max\u662f\u5426\u6703\u639b\u4e0a\u53bb?\n\nMax\u7684\u639b\u9ad8\u5ea6\u7e3d\u548c\u70ba:  h_1 + h_2 +... + h_N\n\u5e73\u5747\u9ad8\u5ea6\u7e3d\u548c\u70ba:  (h_1 + h_2 +... + h_N) / N\n\u5e73\u5747\u9ad8\u5ea6\u7e3d\u548c\u5fc5\u9808\u7b49\u65bc\u6700\u5927\u9ad8\u5ea6\u7684\u7e3d\u548c:  h_1 + h_2 +... + h_N = (h_1 + h_2 +... + h_N) / N\n\u4e0a\u8ff0\u5169\u5f0f\u70ba\u4e00\u6a23\u7684, \u53ef\u4ee5\u53eb\u5e73\u5747\u9ad8\u5ea6\u662f\u5e73\u5747\u9ad8\u5ea6\u7684\u96c6\u5408. \n\u6240\u4ee5\u5e73\u5747\u9ad8\u5ea6\u7e3d\u548c\u70ba\u5e73\u5747\u9ad8\u5ea6\u7684\u96c6\u5408\u4e2d\u7684\u6700\u5927\u503c, \u4e5f\u5c31\u662f\u5e73\u5747\u9ad8\u5ea6\u7684\u6700\u5927\u503c. Max\u9078\u64c7\u639b\u7684\u6642\u5019, \u4ed6\u8981\u9078\u64c7\u6700\u5927\u503c\u5c0d\u61c9\u7684\u5e73\u5747\u9ad8\u5ea6\u7684\u96c6\u5408\u4e2d\u7684\u6700\u5c0f\u503c.\n\nmax\u7684\u5e73\u5747\u9ad8\u5ea6\u96c6\u5408\u70ba:  {h_1, h_2,..., h_N}\nmax\u9078\u64c7\u639b\u7684\u6642\u5019, \u4ed6\u8981\u9078\u64c7\u6700\u5927\u503c\u5c0d\u61c9\u7684\u5e73\u5747\u9ad8\u5ea6\u96c6\u5408\u4e2d\u7684\u6700\u5c0f\u503c.  \n\u6240\u4ee5\u5e73\u5747\u9ad8\u5ea6\u7684\u6700\u5927\u503c = min({h_1, h_2,..., h_N})\nMax\u9078\u64c7\u639b\u7684\ufffd",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abracadabra\") == 5\nassert solution(\"asdasdasdasdasd\") == 5\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"redcoder\") == 1\nassert solution(\"abcde\") == 3\n\"\"\"\n\nimport sys",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"redcoder\") == 1\n\n\"\"\"\n\nimport os\nimport sys\nimport math\nimport timeit\nimport random\nimport hashlib\nimport sympy",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"redcoder\") == \"1\"\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"redcoder\") == \"1\"\n\"\"\"\n\nstdin = input()\n\ncount = 0\nfor i in range(len(stdin)):\n    if stdin[i] == stdin[len(stdin)-i-1]:\n        count += 1\n    else:\n        break\nprint(count)\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('aba') == 'aba'\nassert solution('abb') == 'ab'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abc') == '3'\nassert solution('abcdcba') == '0'\nassert solution('redcoder') == '1'\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 35
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"redcoder\") == 1\nassert solution(\"abc\") == 2\nassert solution(\"aaaa\") == 0\nassert solution(\"abcddcba\") == 1\nassert solution(\"codec\") == 2\n",
        "num_ids_2": 18,
        "num_ids_4": 37
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == 'Yes'\nassert solution('11') == 'No'\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n') == 'Yes'\nassert solution('7\\n') == 'No'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"100\") == \"Yes\"\nassert solution(\"1000\") == \"No\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == 'Yes'\nassert solution(\"5\") == 'No'\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"20\") == \"No\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == 'Yes'\nassert solution('5') == 'No'\nassert solution('13') == 'Yes'\n\n\"\"\"\n\nfrom collections import Counter",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"9\") == \"No\"\nassert solution(\"12\") == \"No\"\nassert solution(\"53\") == \"No\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n') == 'Yes'\nassert solution('3\\n') == 'Yes'\nassert solution('4\\n') == 'Yes'\nassert solution('8\\n') == 'Yes'\nassert solution('10\\n') == 'No'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"Yes\"\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n2\\n2') == 'Yes'\nassert solution('2\\n5\\n2') == 'Yes'\nassert solution('2\\n7\\n2') == 'No'\n\"\"\"\n\nimport sys",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 9 7 5\\n\") == \"5\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom functools import cache",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 9 7 5\") == \"5\"\nassert solution(\"8 3 5 9 7 4 1\") == \"4\"\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple, Callable\n\ndebug: bool = False\ndata: List[int] = []\n\nTriplet = Tuple[int, int, int]\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4 9 7 5\") == \"5\"\n\n------INPUT READER--------\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n4 4 9 7 5') == '5'\n\"\"\"\n\nfrom itertools import combinations",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 9 7 5\") == \"5\"\nassert solution(\"5 4 8 7 5\") == \"0\"\nassert solution(\"2 4 6 8 10\") == \"3\"\nassert solution(\"1 2 3 4 5\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n4 4 9 7 5') == '5'\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4 9 7 5\\n') == '5\\n'\nassert solution('5 6 7 4 4\\n') == '0\\n'\nassert solution('4 4 9 7 5\\n') == '5\\n'\nassert solution('1\\n') == '0\\n'\nassert solution('1 1\\n') == '0\\n'\n",
        "num_ids_2": 36,
        "num_ids_4": 68
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\") == 10\nprint(solution(\"2 5\"))\n\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5\\n') == '10'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 5\n''') == '10'\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5') == '10'\n\"\"\"",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5') == '10'\nprint(solution('2 5'))",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('2 5') == '10'\nassert solution('2 3') == '-1'\n\n2,4\n\n2\n5\n\n2,4\n\n-1\n\n2,10\n\n-1\n\n2,2\n\n2\n5\n\n2,2\n\n2\n10\n\n2,4\n\n-1\n\n1,2\n\n2,2\n\n-1\n\n1,2\n\n2,2\n\n2\n5\n\n2,2\n\n2\n5\n\n1,2\n\n1\n2\n\n1,2\n\n1\n2\n\n1,2\n\n1\n2\n\n1,2\n\n1\n2\n\n1,2\n\n1\n2\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n10\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n-1\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n\n2,5\n\n2\n5\n",
        "num_ids_2": 19,
        "num_ids_4": 31
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\nimport sys\n\nn, m = [int(i) for i in stdin.readline().split()]\nprint(m * n if m * n <= 9 else -1)\n\nassert solution(stdin) == stdout",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 5''') == \"10\"\nassert solution('''1 1''') == \"-1\"\nassert solution('''10 10''') == \"-1\"\nassert solution('''3 3''') == \"9\"\nassert solution('''2 4''') == \"-1\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5') == '10'\nprint(solution(input()))\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n10 12 1 2 14') == 5\n\"\"\"\n\nN, M = list(map(int, input().split()))\n\ncoordinates = list(map(int, input().split()))\n\nx_set = set(coordinates)",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n1 2 3 4 5\\n\") == \"4\"\n\"\"\"\nfrom functools import reduce",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n\"\"\"\n\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 12 1 2 14\") == \"5\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n10 12 1 2 14\\n\") == \"5\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == 5\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3') == '2\\n1110\\n1011'\nassert solution('4 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5') == '1\\n101001\\n111010'\n",
        "num_ids_2": 81,
        "num_ids_4": 81
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\"\n\n\"\"\"\n\n\"\"\"\n|   | 1 0 0 0 0 0 |\n| 1 0 1 1 0 0 0 |\n| 0 1 1 1 0 1 0 |\n| 0 0 1 1 0 1 1 |\n| 0 0 0 1 1 0 1 |\n| 0 0 0 0 1 1 0 |\n| 0 0 0 0 0 1 1 |\n| 0 0 0 0 0 0 0 |",
        "num_ids_2": 64,
        "num_ids_4": 100
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"101001\"\nassert solution(\"4 5 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"111010\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"111100\"\n\n\"\"\"",
        "num_ids_2": 75,
        "num_ids_4": 114
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\\n101001\"\n",
        "num_ids_2": 72,
        "num_ids_4": 72
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 3\\n1 2\\n2 3\\n1 4\\n4 3\") == '111100'\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == '101001'\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == '111010'\nassert solution(\"1 2\\n2 3\") == '11'\nassert solution(\"1 1\\n1 1\") == '1'\n",
        "num_ids_2": 66,
        "num_ids_4": 119
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n\") == \"2\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n\") == \"1\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"2\"\n\"\"\"\n\nimport math\n\nn, m, k = list(map(int, input().split()))\n\nroad_array = [list(map(int, input().split())) for _ in range(m)]\n\nroad_list = []\nfor road in road_array:\n    road_list.append([road[0], road[1]])\n    road_list.append([road[1], road[0]])\nroad_list = set(road_list)",
        "num_ids_2": 68,
        "num_ids_4": 106
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3') == '101001'\n\nassert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3') in ['111010', '101110']\n",
        "num_ids_2": 79,
        "num_ids_4": 79
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\\n1011\"\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 2\\n1 2\\n2 3\\n1 4\\n4 3') == '2\\n1110\\n1011'\nassert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3') == '1\\n101001\\n111010'\nassert solution('5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5') == '2\\n111100\\n110110'\nassert solution('4 3 2\\n1 2\\n2 3\\n1 4\\n4 3') == '2\\n1110\\n1011'\nassert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3') == '1\\n101001\\n111010'\n",
        "num_ids_2": 81,
        "num_ids_4": 162
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '4 5 3\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '1 4\\n'\n    '4 3\\n'\n    '2 4\\n'\n    '1 3\\n'\n) == '2\\n'\nassert solution(\n    '4 5 2\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '1 4\\n'\n    '4 3\\n'\n    '2 4\\n'\n    '1 3\\n'\n) == '1\\n'\nassert solution(\n    '5 6 3\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '1 4\\n'\n    '4 3\\n'\n    '2 4\\n'\n    '1 3\\n'\n) == '2\\n'\nassert solution(\n    '5 6 3\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '1 4\\n'\n    '4 3\\n'\n    '2 4\\n'\n    '1 3\\n'\n) == '1\\n'\nassert solution(\n    '4 5 3\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '1 4\\n'\n    '4 3\\n'\n    '2 4\\n'\n    '1 3\\n'\n) == '2\\n'\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\nassert solution(\"1\\n3 3 3\") == \"NO\"\n\"\"\"\nfrom collections import Counter\n\nn = int(input())\nlst = list(map(int, input().split()))\ncnt = Counter(lst)\nprint(\"YES\" if cnt[lst[0]] >= n - 1 and cnt[lst[n-1]] >= n - 1 else \"NO\")\n",
        "num_ids_2": 32,
        "num_ids_4": 61
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'YES'\nassert solution('2\\n10 10') == 'YES'\nassert solution('3\\n1 2 3') == 'NO'\n",
        "num_ids_2": 32,
        "num_ids_4": 61
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"3 4 5\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\n",
        "num_ids_2": 26,
        "num_ids_4": 38
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"1\\n2 3\") == \"NO\"\n",
        "num_ids_2": 29,
        "num_ids_4": 43
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 1 2 5\\n\") == \"YES\"\nassert solution(\"3\\n1 2 3\\n\") == \"YES\"\nassert solution(\"2\\n10 10\\n\") == \"YES\"\nassert solution(\"3\\n1 2 3\\n\") == \"YES\"\n",
        "num_ids_2": 36,
        "num_ids_4": 69
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\nassert solution(\"5\\n2 1 1 2 5\") == \"YES\"\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 61
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n1 2 3') == 'YES'\nassert solution('2\\n10 10') == 'YES'\nassert solution('3\\n1 2 3') == 'NO'\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 61
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"5\\n2 1 1 2 5\"\n) == \"YES\"\n\nassert solution(\n    \"3\\n1 2 3\"\n) == \"YES\"\n\nassert solution(\n    \"2\\n10 10\"\n) == \"YES\"\n\nassert solution(\n    \"3\\n1 2 3\"\n) == \"NO\"\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 1\\n') == 'YES'\nassert solution('5\\n2 1 1 2 5\\n') == 'YES'\nassert solution('3\\n1 2 3\\n') == 'NO'\n\"\"\"\n",
        "num_ids_2": 35,
        "num_ids_4": 52
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n\n\n\n\n-----Python-----",
        "num_ids_2": 32,
        "num_ids_4": 61
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n\"\"\"",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\n\"\"\"\nimport sys\n\nstdin = sys.stdin\n\nH, n = list(map(int, stdin.readline().split()))\nd = [int(c) for c in stdin.readline().split()]\n\ncurr_hp = H\nfor i in range(n):\n    curr_hp += d[i]\n    if curr_hp <= 0:\n        print(i + 1)\n        break\nelse:\n    print(-1)\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\n\"\"\"\n\nimport math\n\nH, n = [int(i) for i in input().split()]\nd = [int(i) for i in input().split()]\n\ni = 0\nwhile H > 0 and i < n:\n    H += d[i]\n    i += 1\n    if H <= 0:\n        print(i)\n        break\nelse:\n    print(-1)\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000000000000 5\\n-1 0 0 0 0\\n\") == \"4999999999996\"\nprint('Passed!')",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(input().split())\nprint(solution(str(input())))\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\nassert solution('100 100\\n0 1 0 1') == '2'\nassert solution('10000 2\\n0 -1 0 1') == '-1'\nassert solution('10001 10001\\n1 0 -1 1') == '-1'\n\nprint(\"Successfully tested.\")\n",
        "num_ids_2": 48,
        "num_ids_4": 84
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('7 6') == '9'\nassert solution('1 1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 3') == '3'\n\"\"\"\n\nfrom collections import deque\n\nH, N = map(int, input().split())\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 6\", \"-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\", \"-1 0 0 0 0\") == \"4999999999996\"\n\"\"\"\n\nfrom collections import deque\n\nH, n = map(int, stdin.readline().split())\nd = list(map(int, stdin.readline().split()))\nq = deque([(d[0], 1)])\n\nfor i in range(1, n):\n    prev, curr = q.popleft()\n    if prev > 0:\n        q.append((prev + d[i], i + 1))\n    if curr > 0:\n        q.append((curr + d[i], i + 1))\n\nprint(-1 if q[0][0] <= 0 else q[0][1])\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BBAABBBA\") == \"BB\"\nassert solution(\"AZAAAZAA\") == \"AZ\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\nprint(\"Passed\")",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\n\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABCAABAA\") == \"AB\"\nassert solution(\"ABCAABAABAB\") == \"AB\"\nassert solution(\"ABBCBABBB\") == \"AB\"\nassert solution(\"ABBAABABBB\") == \"AB\"\nassert solution(\"ABCAABAABABAAB\") == \"AB\"\n",
        "num_ids_2": 28,
        "num_ids_4": 57
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'\n\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BA\") == \"AB\"\nassert solution(\"AZ\") == \"AZ\"\nassert solution(\"AA\") == \"AA\"\nassert solution(\"ZA\") == \"ZA\"\nassert solution(\"ZZ\") == \"ZZ\"\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABCD\") == \"AB\"\nassert solution(\"ABCABCABCABCABC\") == \"ABCABC\"\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"where\") == \"here\"\nassert solution(\"a\") == \"\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"b\"\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"b\"\n\"\"\"\n\nimport sys\n\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\n",
        "num_ids_2": 23,
        "num_ids_4": 46
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"where\") == \"here\"\nassert solution(\"a\") == \"\"\nassert solution(\"where\") == \"here\"\nassert solution(\"where\") == \"here\"\nassert solution(\"codeforces\") == \"codeforces\"\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"west\") == 2\nassert solution(\"codeforces\") == 9\nassert solution(\"yes\") == 1\nassert solution(\"b\") == 1\n\n\n\n\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 35
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"west\") == 2\nassert solution(\"codeforces\") == 8\nassert solution(\"yes\") == 1\n\nprint(solution(\"test\"))\nprint(solution(\"west\"))\nprint(solution(\"codeforces\"))\nprint(solution(\"yes\"))\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 35
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"west\") == 2\nassert solution(\"codeforces\") == 9\nassert solution(\"yes\") == 1\nassert solution(\"b\") == 1\n",
        "num_ids_2": 16,
        "num_ids_4": 35
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"test\") == \"est\"\nassert solution(\"b\") == \"ab\"\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 43
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"b\"\n",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == 9\nassert solution(\"yes\") == 7\nassert solution(\"test\") == 2\nassert solution(\"b\") == 1\n",
        "num_ids_2": 19,
        "num_ids_4": 35
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"a\"\n",
        "num_ids_2": 23,
        "num_ids_4": 43
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n3 3\n1 7 11\n\"\"\"\n) == \"2\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\n\nfrom sys import stdin\n\nD = int(stdin.readline())\nn = int(stdin.readline())\nx = [int(stdin.readline()) for _ in range(n)]\nx.sort()\n\nresult = 0\n\nfor i in range(n):\n    result = max(result, abs(x[i] - (x[i] + D)))\n    result = max(result, abs(x[i] - (x[i] - D)))\n\nprint(result)",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"3 3\\n1 7 11\"\n) == \"2\"\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\n\nN, X = [int(i) for i in stdin.split(\" \")]\narr = [int(i) for i in stdin.split(\" \")]\n\narr.sort()\n\ncurrent_max = arr[0]\ncount = 0\n\nfor i in range(1, len(arr)):\n    if arr[i] - arr[i - 1] > current_max:\n        count += 1\n        current_max = arr[i] - arr[i - 1]\n\nprint(count + 1)\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7\") == \"1\"\nassert solution(\"4 3\") == \"1\"\nassert solution(\"7 5\") == \"2\"\nassert solution(\"8 10\") == \"3\"\nassert solution(\"3 3\") == \"2\"\n\n\"\"\"\n\n\"\"\"\n\u672c\u984c\u6642\u9593\u505a\u4e0d\u51fa\u4f86\uff0c\u7d93\u5178\u984c\u76ee\u4e0d\u898b\u4efb\u4f55\u985e\u4f3c\u984c\u76ee\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\n\n\"\"\"\nimport math\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\"\n\n\nfrom collections import defaultdict\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"kukaku\") == \"No\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aba') == 'Yes'\nassert solution('abba') == 'Yes'\nassert solution('akasaka') == 'Yes'\nassert solution('madam') == 'No'\nassert solution('madman') == 'No'\n",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('kodok') == 'No'\nassert solution('babad') == 'No'\nassert solution('cbbd') == 'Yes'\nassert solution('aaaa') == 'Yes'\n",
        "num_ids_2": 24,
        "num_ids_4": 47
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\"\n\nimport sys\n\nS = sys.stdin.readline()\n\nwhile S:\n    if len(S) < 3 or len(S) > 99:\n        print(\"No\")\n    else:\n        for i in range(0, len(S)//2):\n            if S[i] == S[len(S)-1-i]:\n                continue\n            else:\n                print(\"No\")\n                break\n        else:\n            print(\"Yes\")\n    S = sys.stdin.readline()",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\u2018akasaka\u2019) == \u2018Yes\u2019\nassert solution(\u2018kawakawaka\u2019) == \u2018Yes\u2019\nassert solution(\u2018racecar\u2019) == \u2018Yes\u2019\nassert solution(\u2018hannah\u2019) == \u2018Yes\u2019\nassert solution(\u2018abcdcb\u2019) == \u2018Yes\u2019\n",
        "num_ids_2": 38,
        "num_ids_4": 72
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(aks) == 'Yes'\nassert solution('sasas') == 'Yes'\nassert solution('asas') == 'Yes'\nassert solution('asasas') == 'Yes'\nassert solution('asasa') == 'No'\n\"\"\"\n\nimport math\nfrom collections import deque",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaka\") == 'Yes'\nassert solution(\"akasaka\") == 'Yes'\nassert solution(\"aasa\") == 'No'\n\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 34
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"a\") == \"Yes\"\nassert solution(\"ab\") == \"No\"\nassert solution(\"abb\") == \"Yes\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(akasaka) == 'Yes'\n\nprint(solution(stdin))",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('akasaka') == 'Yes'\n\nprint(solution(stdin))",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n\nimport sys\n\na, b = sys.stdin.readline().strip().split()\n\nprint(int(int(a) * float(b)))\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"198 1.10\") == \"217\"\nprint(\"Test PASSED\")\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\n\n\"\"\"\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2\\n3\\n5\\n6') == '3\\n0\\n0\\n1\\n999999999\\n'\nassert solution('2\\n1\\n1') == '2\\n0\\n0\\n1\\n'\n",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\"\nassert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\"\nassert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\"\nassert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\"\nassert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\"\n",
        "num_ids_2": 58,
        "num_ids_4": 116
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2\") == \"2\"\nassert solution(\"1\\n2\") == \"0\"\nassert solution(\"4\\n2\") == \"1\"\nassert solution(\"7\\n2\") == \"3\"\nassert solution(\"3\\n2\") == \"0\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3) == \"3\"\nassert solution(5) == \"1\"\nassert solution(7) == \"3\"\nassert solution(6) == \"0\"\n\"\"\"\nfrom collections import defaultdict\nfrom functools import lru_cache",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n5') == '0'\nassert solution('3\\n4') == '1'\nassert solution('2\\n1') == '0'\nassert solution('4\\n2000000000') == '999999999'\nassert solution('6\\n763243547') == '381621773'\n\"\"\"\nimport math\nimport numpy\nimport numpy as np\nimport pandas as pd\nimport scipy as sp\nimport sys",
        "num_ids_2": 26,
        "num_ids_4": 55
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\\n\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\\n\"\n\n\n\nimport sys\nimport math\nfrom collections import Counter\n\nassert len(sys.argv) == 2\nlines = open(sys.argv[1]).readlines()\n\nfor line in lines:\n    line = line.rstrip()\n    print(solution(line))\n",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '0'\nassert solution('7') == '0'\nassert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n5\\n5') == '0'\nassert solution('7\\n3\\n1\\n2') == '1'\nassert solution('3\\n7\\n1\\n2') == '0'\nassert solution('4\\n1\\n2') == '1'\nassert solution('4\\n1\\n2\\n3') == '999999999'\n",
        "num_ids_2": 35,
        "num_ids_4": 70
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == '3'\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == '1'\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"1\"\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"0\"\n\"\"\"\n\n\nfrom sys import stdin\n\nn, m, s = [int(x) for x in stdin.readline().split()]\nd = [set() for _ in range(n)]\nfor _ in range(m):\n    u, v = [int(x) for x in stdin.readline().split()]\n    d[u - 1].add(v - 1)\n    d[v - 1].add(u - 1)\n\nq = [s - 1]\nvis = {s - 1}\nwhile q:\n    u = q.pop()\n    for v in d[u]:\n        if v not in vis:\n            vis.add(v)\n            q.append(v)",
        "num_ids_2": 96,
        "num_ids_4": 144
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1') == '3'\n\nassert solution('5 4 5\\n1 2\\n2 3\\n3 4\\n4 1') == '1'\n\nprint(\"Finished tests\")\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom collections import deque\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\n\n\"\"\"\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n1 2\") == \"3\"\nassert solution(\"5 9 5\\n1 2\\n2 3\\n3 4\\n4 1\\n1 8\") == \"1\"\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\n\n\"\"\"\nfrom collections import deque",
        "num_ids_2": 47,
        "num_ids_4": 95
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\\n2 3\\n1 2\\n1 5\") == \"2\"\nassert solution(\"1 3\\n2 3\\n1 2\\n1 5\\n1 3\") == \"0\"\n\n-----Error in My Solution-----\n\nThe solution is incorrect.\nIt should be \"0\" but is \"1\".\n\n\"\"\"\n\nfrom typing import List, Dict, Tuple, Set, FrozenSet, DefaultDict\nfrom collections import defaultdict, deque\n\n\nclass City:\n    def __init__(self, index: int) -> None:\n        self.index = index\n        self.connected_cities: Set[City] = set()\n    \n    def __repr__(self) -> str:\n        return f\"City(index={self.index})\"\n\n\nclass Solution:\n    # Time complexity: O(n + m)\n    # Space complexity: O(n)\n    def solution(self, stdin: str) -> str:\n        n, m, s = [int(x) for x in stdin.split()]\n\n        cities = [City(i + 1) for i in range(n)]\n        edges: Dict[City, List[City]] = defaultdict(list)\n\n        for i in range(m):\n            city_1, city_2 = [int(x) for x in stdin.split()]\n            city_1, city_2 = cities[city_1 - 1], cities[city_2 - 1]\n\n            edges[city_1].append(city_2)\n            edges[city_2].append(city_1)\n\n        def is_reachable(city: City) -> bool:\n            queue = deque()\n            queue.append(city)\n\n            reachable = {city}\n            while queue:\n                current = queue.pop()\n                for next_city in edges[current]:\n                    if next_city in reachable:\n                        continue\n                    reachable.add(next_city)\n                    queue.appendleft(next_city)\n            return len(reachable) == n\n\n        min_extra_roads = m\n\n        for city in cities:\n            if is_reachable(city):\n                continue\n            \n            for i in range(m):\n                if is_reachable(city):\n                    break\n                if (city in edges[cities[i]]) or (cities[i] in edges[city]):\n                    continue\n                \n                cities[i].connected_cities.add(city)\n                min_extra_roads -= 1\n        \n        return min_extra_roads\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 1\\n1 2\\n2 3\\n3 4\") == \"1\"\nassert solution(\"7 7 1\\n1 2\\n2 3\\n3 4\\n4 1\\n5 6\\n6 7\\n7 1\") == \"0\"",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 7 1') == '2'\nassert solution('5 4 5') == '1'\n\"\"\"\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\nassert solution(\"5 4 1\\n1 2\\n2 3\\n3 4\\n4 1\") == \"0\"",
        "num_ids_2": 76,
        "num_ids_4": 104
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == '3'\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == '1'\nassert solution(\"5 4 0\\n1 2\\n2 3\\n3 4\\n4 1\") == '0'\n",
        "num_ids_2": 76,
        "num_ids_4": 104
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\n\"\"\"\n\n\"\"\"\nfrom typing import List, Dict\n\nclass Solution:\n    def find_max_people(self, boxers: List[int]) -> int:\n        boxers_weights = {}\n        for boxer_weight in boxers:\n            boxers_weights[boxer_weight] = 1 if boxer_weight not in boxers_weights else boxers_weights[boxer_weight] + 1\n        boxers_weights = sorted(boxers_weights.items(), key=lambda item: item[1], reverse=True)\n        return len([boxer_weight for boxer_weight in boxers_weights if boxer_weight[1] >= boxers_weights[0][1]])\n\nassert Solution().find_max_people([3, 2, 4, 1]) == 4\n\"\"\"\n\nclass Solution:\n    def find_max_people(self, boxers: List[int]) -> int:\n        boxers_weights = {}\n        for boxer_weight in boxers:\n            if boxer_weight not in boxers_weights:\n                boxers_weights[boxer_weight] = 1\n            else:\n                boxers_weights[boxer_weight] = boxers_weights[boxer_weight] + 1\n        boxers_weights = sorted(boxers_weights.items(), key=lambda item: item[1], reverse=True)\n        return len([boxer_weight for boxer_weight in boxers_weights if boxer_weight[1] >= boxers_weights[0][1]])\n\nassert Solution().find_max_people([3, 2, 4, 1]) == 4\nassert Solution().find_max_people([1, 1, 1, 1, 1]) == 5\nassert Solution().find_max_people([1, 1, 1, 1, 1, 1]) == 5\n",
        "num_ids_2": 36,
        "num_ids_4": 78
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 2 4 1\") == '4'\nassert solution(\"6\\n1 1 1 4 4 4\") == '5'\n\"\"\"\n\nn = int(stdin.readline())\n\nweights = list(map(int, stdin.readline().split()))\n\nm = min(weights)",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\\n\") == \"5\"\n\"\"\"\n\n\"\"\"\n-----Solution-----\n\nFirst it's necessary to find all unique values, then sort them, then find the biggest number which is divisible by two.\n\"\"\"",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1 1 4 4 4\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n3 2 4 1''') == '4'\nassert solution('''6\n1 1 1 4 4 4''') == '5'\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 4 1\") == \"4\"\nassert solution(\"6 1 1 4 4 4\") == \"5\"\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\"\n\nimport sys\nimport os\nfrom collections import Counter\n\nimport typing\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 4 1') == '4'\n\nassert solution('6 1 1 4 4 4') == '5'\n\nassert solution('5 1 1 1 4 4 4') == '5'\n\nassert solution('3 1 1 4 4 4') == '3'\n\nassert solution('3 2 4 1') == '4'",
        "num_ids_2": 28,
        "num_ids_4": 59
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n1 32\\n2 63') == '000001000002\\n000002000001'\nassert solution('2 1\\n1 12') == '000001000001'\nassert solution('1 1') == '0'\nassert solution('3 3\\n1 3\\n2 3\\n3 3') == '00010\\n00100\\n1010'\nassert solution('1\\n1') == '0'\n",
        "num_ids_2": 45,
        "num_ids_4": 88
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\n\n\"\"\"\nimport sys\nimport os\nfrom typing import List, Tuple\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\n\"\"\"\n\nimport sys\nfrom itertools import combinations",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 32\\n2 63\\n1 12') == '000001000002\\n000002000001\\n000001000001'",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n1 32\\n2 63') == '000001000002\\n000002000001'\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\n\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n2 3\n1 32\n2 63\n1 12\n''') == '''\n000001000002\n000002000001\n000001000001\n'''\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2 3\n1 32\n2 63\n1 12\n''') == '000001000002\\n000002000001\\n000001000001'\n\n-------------------\n\nimport math\n\nn, m = map(int, input().split())\nprefectures = [list() for _ in range(n)]\ncities = [list() for _ in range(n)]\nfor _ in range(m):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    prefectures[x].append(y)\n    cities[y].append(x)\n\nresult = [0] * n\nfor i in range(n):\n    if not prefectures[i]:\n        continue\n    for j in prefectures[i]:\n        result[j] = (result[j] + math.floor(i) * math.pow(10, 6))\n\nfor i in range(n):\n    if not cities[i]:\n        continue\n    for j in cities[i]:\n        result[j] = (result[j] + math.floor(i) * math.pow(10, 6))\n\nfor r in result:\n    print(r)\n\n------",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\":\\n2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n4\n2 10 8 40\n''') == 2\n\n\"\"\"\nn, *a = map(int, stdin.split())\nh = [a[i] for i in range(n)]\n\nd = dict()\nfor i in range(n):\n    if h[i] == 0:\n        d[i] = 1e9\n    else:\n        d[i] = h[i]\n\nwhile len(d) > 1:\n    # d = {key: val for key, val in sorted(d.items(), key=lambda item: item[1])}\n    d = {key: val for key, val in sorted(d.items(), key=lambda item: item[1])}\n    t = list(d.keys())[0]\n    for i in d:\n        if i!= t:\n            d[i] = min(d[i], d[t])\n    d[t] = 0\n\nprint(list(d.keys())[0])\n\n\"\"\"\n\nimport collections\nn, *a = map(int, stdin.split())\nh = [a[i] for i in range(n)]\n\nd = collections.defaultdict(int)\nfor i in range(n):\n    if h[i] == 0:\n        d[i] = 1e9\n    else:\n        d[i] = h[i]\n\nwhile len(d) > 1:\n    # d = {key: val for key, val in sorted(d.items(), key=lambda item: item[1])}\n    d = {key: val for key, val in sorted(d.items(), key=lambda item: item[1])}\n    t = list(d.keys())[0]\n    for i in d:\n        if i!= t:\n            d[i] = min(d[i], d[t])\n    d[t] = 0\n\nprint(list(d.keys())[0])\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 10 8 40\") == \"2\"\nassert solution(\"3 10 4 50\") == \"4\"\nassert solution(\"1 10 10 10\") == \"1\"\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 10 8 40\") == 2\n\"\"\"\n\nimport sys\nimport random\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n2 10 8 40''') == '2'\nassert solution('''5\n1 7 6 3 10''') == '1'\nassert solution('''7\n2 5 4 6 10 9''') == '7'\nassert solution('''5\n10 9 8 7 6''') == '10'\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10 8 40\") == 2\n\"\"\"\n\nimport sys\nfrom math import inf",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\n\n\"\"\"\n\nimport sys\nfrom functools import reduce\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == output\n\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10 8 40\\n\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 10 8 40\") == \"2\"\n\n\"\"\"\nimport sys\nimport random\nimport math\n\nclass Solution:\n    # Solution 1\n    \"\"\"\n    def solve(self, A):\n        A.sort()\n        n = len(A)\n        i = 0\n        while i < n:\n            for j in range(i, n):\n                if A[j] > A[i]:\n                    i += 1\n                    break\n            for j in range(i, n):\n                if A[j] > A[i]:\n                    A[j] -= A[i]\n                    i += 1\n                    break\n        return A[n-1]\n    \"\"\"\n\n    # Solution 2\n    \"\"\"\n    def solve(self, A):\n        A.sort()\n        n = len(A)\n        i = 0\n        while i < n:\n            for j in range(i, n):\n                if A[j] > A[i]:\n                    i += 1\n                    break\n            for j in range(i, n):\n                if A[j] > A[i]:\n                    A[j] -= A[i]\n                    i += 1\n                    break\n        return A[n-1]\n    \"\"\"\n\n    # Solution 3\n    \"\"\"\n    def solve(self, A):\n        A.sort()\n        n = len(A)\n        i = 0\n        while i < n:\n            for j in range(i, n):\n                if A[j] > A[i]:\n                    i += 1\n                    break\n            for j in range(i, n):\n                if A[j] > A[i]:\n                    A[j] -= A[i]\n                    i += 1\n                    break\n        return A[n-1]\n    \"\"\"\n\n    # Solution 4\n    \"\"\"\n    def solve(self, A):\n        n = len(A)\n        sum_ = 0\n        for x in range(n):\n            sum_ += A[x]\n        A.sort()\n        for i in range(n - 1, 0, -1):\n            sum_ -= A[i]\n            A[i] = sum_\n            A.sort()\n            print(A[i])\n        return A[0]\n    \"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a1') == 'a1'\nassert solution('a1a') == 'a1a'\nassert solution('a1b') == 'a1a'\n",
        "num_ids_2": 18,
        "num_ids_4": 44
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"?(___-_+____):-____<____,____<____,_____<____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<",
        "num_ids_2": 1575,
        "num_ids_4": 1575
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"?(___+___-___):-___>__.\\n\") == \"010\"\nassert solution(\"?(__+__/__-__):-__>__,__<__.\\n\") == \"false\"\nassert solution(\"?(___/___+___-___):-__>__.\\n\") == \"false\"\n\n\"\"\"",
        "num_ids_2": 54,
        "num_ids_4": 80
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"?(_____+___+____):-___>__.___+____<____,____<_____,_____<_____,_____<_____,_____<_____.___+____<___,___<____,____<_____,_____<_____\") == \"0250341\"\nassert solution(\"?(____+____+_____):-____>__,____<____,____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____.____+____<____,____<_____,_____<_____,_____\") == \"0101\"\nassert solution(\"?(_____+____+_____):-_____>__,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____._____+_____<_____,_____<_____,_____,_____\") == \"0010\"\nassert solution(\"?(_____+____+_____):-_____>__,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____._____+_____<_____,_____<_____,_____,_____\") == \"1010\"\nassert solution(\"?(_____+____+_____):-_____>__,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____,_____<_____._____+______<_____,_____<_____,_____,_____\") == \"1010\"\n",
        "num_ids_2": 129,
        "num_ids_4": 256
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('?(__+___+__-___):-___>__.') == '01010'\nassert solution('?(__+___+__-___):-__<___,___<____,____<_____,_____<______,______<_______.') == '0250341'\nassert solution('?(____-_+_/____):-__>__,_____<__.') == '0010'\nassert solution('?(____+___+____-__):-__<___,___<____,____<_____,_____<______,______<_______.') == '0250341'\nassert solution('?(_____+_/_____):-__>__,_____<__.') == '0010'\n",
        "num_ids_2": 67,
        "num_ids_4": 137
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('?(__+___+__-___):-___>__.') == '0250341'\nassert solution('?(__-___+__):-___>__.') == '0250'\nassert solution('?(__-___+__):-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___>__,__-___",
        "num_ids_2": 49,
        "num_ids_4": 1575
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"?(__+___+__-___):-___>__.\") == \"0250341\"\n\nassert solution(\"?(_______):-__>__,_____<__.\") == \"false\"\nassert solution(\"?(_______):-__>__,_____<__.\") == \"false\"\nassert solution(\"?(_____):-__>__,_____<__.\") == \"false\"\nassert solution(\"?(________):-__>__,_____<__.\") == \"false\"\n",
        "num_ids_2": 46,
        "num_ids_4": 88
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('?(___):-___>__.___<') == '010'\nassert solution('?(__+_*_/____):-__>__,_____<__') == 'false'\n",
        "num_ids_2": 28,
        "num_ids_4": 55
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('?(__+___+__-___):-___>__') == '0250341'\nassert solution('?(____+_____+_____):-___>__,_____<__,____<_____,_____<______,______<_______') == '0250341'\nassert solution('?(_____+_____+_____):-___>__._____<__.____<_____,_____<______,______<_______') == '0101'\nassert solution('?(_____+_____+_____):-___>__,_____<__,____<_____,_____<______,______<_______') == '0250341'\nassert solution('?(_____+_____+_____):-___>__,_____<__,____<_____,_____<______,______<_______') == '0250341'\n\n'''",
        "num_ids_2": 64,
        "num_ids_4": 141
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"?(__+___+__-___):-___>__.\") == \"0250341\"\nassert solution(\"?(__+___+__-___):-___>__,___<___,____<____,____<____,_____<_____,______<_______.\") == \"0250341\"\nassert solution
        "num_ids_2": 70,
        "num_ids_4": 1575
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 11') == '3'\nassert solution('3 4 2') == '5'\nassert solution('3 4 1000000000000000000') == '0'\nassert solution('3 3 3') == '0'\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"4 4 2\") == \"5\"\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n\n\"\"\"\n\n\n\nimport sys\nimport collections\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\nassert solution(\"3 4 1\") == 3\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"3 4 1\") == \"5\"\nassert solution(\"2 3 5\") == \"2\"\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 11') == '3'\nassert solution('3 4 2') == '5'\nassert solution('3 4 1000000000000000000') == '0'",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0",
        "num_ids_2": 20,
        "num_ids_4": 31
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\") == 3\nassert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == 5\nassert solution(\"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == 0\n",
        "num_ids_2": 53,
        "num_ids_4": 82
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"rocesfedoc\") == \"secrofedoc\"\nassert solution(\"orecesfedoc\") == \"secrofedoc\"\n\"\"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"plmaetwoxesisiht\") == \"thisisexampletwo\"\n",
        "num_ids_2": 32,
        "num_ids_4": 69
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"rocesfedoc\") == \"codeforces\"\nassert solution(\"plmaetwoxesisiht\") == \"thisisexampletwo\"\nassert solution(\"z\") == \"z\"\n\"\"\"\n\n\nimport math",
        "num_ids_2": 37,
        "num_ids_4": 47
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\n\nfrom itertools import takewhile",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"orcesfedoc\") == \"rocesfedoc\"\nassert solution(\"a\") == \"a\"\nassert solution(\"\") == \"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 58
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"plmaetwoxesisiht\") == \"thisisexampletwo\"\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s) == t\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"rocesfedoc\") == \"codeforces\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"plmaetwoxesisiht\") == \"thisisexampletwo\"\nassert solution(\"z\") == \"z\"\nassert solution(\"babbajack\") == \"abbajack\"\n\"\"\"",
        "num_ids_2": 37,
        "num_ids_4": 62
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"plmaetwoxesisiht\") == \"thisisexampletwo\"\nassert solution(\"z\") == \"z\"\n\n\"\"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 47
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 14') == 19\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 14\") == \"19\"\n\"\"\"\n\na, b = map(int, input().split())\nprint(a + b)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\"\"\"\nimport re\n\nregex = r\"\\d+ \\d+\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 14') == 19\n\"\"\"\n\na, b = map(int, input().split())\n\nprint(a + b)",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\nassert solution('5 13') == '18'\nassert solution('1 2') == '3'\nassert solution('0 5') == '5'\n",
        "num_ids_2": 24,
        "num_ids_4": 46
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\nprint('The solution is correct!')",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\nprint(solution('5 14'))\nprint(solution('381 492'))\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 14\") == 19\nassert solution(\"381 492\") == 873\nprint(solution(\"5 14\"))\nprint(solution(\"381 492\"))\n\nsolution(\"5 14\")",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2+3') == '++++>'\nassert solution('9-7') == '+++++++++>'\n\"\"\"\nimport re\n\n\nclass Solution:\n    def compute(self, exp):\n        mem = [0] * 30000\n        p = 0\n        i = 0\n        while i < len(exp):\n            if re.match(r\"\\d+\", exp[i:i+1]):\n                mem[p] = int(exp[i:i+1])\n            elif exp[i:i+1] == \",\":\n                p += 1\n            elif exp[i:i+1] == \"+\":\n                mem[p] = mem[p] + 1\n                if mem[p] > 255:\n                    mem[p] %= 256\n            elif exp[i:i+1] == \"-\":\n                mem[p] = mem[p] - 1\n                if mem[p] < 0:\n                    mem[p] %= 256\n            elif exp[i:i+1] == \"<\":\n                p -= 1\n                if p < 0:\n                    p = 29999\n            elif exp[i:i+1] == \">\":\n                p += 1\n                if p > 29999:\n                    p = 0\n            i += 1\n        return \"\".join(map(lambda x: chr(x), mem))\n\n\ns = Solution()\nprint(s.compute(\"2+3\"))\nprint(s.compute(\"9-7\"))\nprint(s.compute(\"2+3\"))\nprint(s.compute(\"9-7\"))\nprint(s.compute(\"9-7\"))\nprint(s.compute(\"2+3\"))\nprint(s.compute(\"9-7\"))\nprint(s.compute(\"2+3\"))\nprint(s.compute(\"9-7\"))\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2+3\") == \"+>\\n+++\\n<[<+>-]<\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\"\nassert solution(\"9*7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\"\nassert solution(\"8-9\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\"\nassert solution(\"0-0\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\"\n",
        "num_ids_2": 53,
        "num_ids_4": 109
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\n\"\"\"\n",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('+++++>+++++<<<<<[>++++>[>-]>+[<+>-]<<<<<-]>[>----]<[<+>-]<<<<<-]<[<+>-]>+[>++++++]>') == '>+++++'\nassert solution('[>++++>[>-]>+[<+>-]<<<<<-]>[>----]<[<+>-]<<<<<-]<[<+>-]>+[>++++++]>') == '>+++++'\nassert solution('[>++++>[>-]>+[<+>-]<<<<<-]>[>----]<[<+>-]<<<<<-]<[<+>-]>+[>++++++]>') == '>+++++'\nassert solution('>++++>') == '>++++>'\n\"\"\"\n\n\nclass BrainFuck:\n    def __init__(self):\n        self.memory = [0] * 30000\n        self.pointer = 0\n        self.code = []\n        self.direction = 1\n\n    def _move(self, n):\n        for _ in range(n):\n            self.pointer += self.direction\n\n    def _turn(self, n):\n        if n == 0:\n            self.direction = -self.direction\n        else:\n            self.direction = int(not self.direction)\n\n    def _input(self, n):\n        assert 0 <= n <= 255\n        self.memory[self.pointer] = n\n        self._move(1)\n\n    def _output(self):\n        self._move(1)\n        return self.memory[self.pointer]\n\n    def _add(self):\n        self.memory[self.pointer] += 1\n        self._move(1)\n\n    def _sub(self):\n        self.memory[self.pointer] -= 1\n        self._move(1)\n\n    def _less_than(self):\n        self._move(1)\n        if self.memory[self.pointer] == 0:\n            self._turn(1)\n\n    def _greater_than(self):\n        self._move(1)\n        if self.memory[self.pointer]!= 0:\n            self._turn(1)\n\n    def _equal(self):\n        self._move(1)\n        if self.memory[self.pointer]!= 0:\n            self._turn(1)\n\n    def _not_equal(self):\n        self._move(1)\n        if self.memory[self.pointer] == 0:\n            self._turn(1)\n\n    def _loop_start(self):\n        self._move(1)\n        return self.memory[self.pointer]\n\n    def _loop_end(self, n):\n        self._move(n)\n        self._move(1)\n        if n == 0:\n            self._turn(1)\n\n    def _increment_loop(self, n):\n        self.memory[self.pointer] += n\n        self._move(1)\n        self._turn(1)\n\n    def _decrement_loop(self, n):\n        self.memory[self.pointer] -= n\n        self._move(1)\n        self._turn(1)\n\n    def _increment_position(self, n):\n        self.memory[self.pointer] += n\n        self._move(1)\n\n    def _decrement_position(self, n):\n        self.memory[self.pointer] -= n\n        self._move(1)\n\n    def _increment_value(self, n):\n        self.memory[self.pointer] += n\n        self._move(1)\n\n    def _decrement_value(self, n):\n        self.memory[self.pointer] -= n\n        self._move(1)\n\n    def _loop_body(self, n, cmds):\n        for c in cmds:\n            self._turn(c)\n        self._move(n)\n        self._turn(0)\n\n    def _decrement_loop_body(self, n, cmds):\n        for c in cmds:\n            self._turn(c)\n        self._move(n)\n        self._turn(1)\n\n    def _parse_commands(self, commands):\n        i = 0\n        while i < len(commands):\n            if commands[i] == '+':\n                self._add()\n            elif commands[i] == '-':\n                self._sub()\n            elif commands[i] == '>':\n                self._move(1)\n            elif commands[i] == '<':\n                self._move(-1)\n            elif commands[i] == '.':\n                yield self._output()\n            elif commands[i] == ',':\n                self._input(ord(stdin[0]))\n                stdin = stdin[1:]\n            elif commands[i] == '+':\n                self._add()\n            elif commands[i] == '-':\n                self._sub()\n            elif commands[i] == '>':\n                self._move(1)\n            elif commands[i] == '<':\n                self._move(-1)\n            elif commands[i] == '.':\n                yield self._output()\n            elif commands[i] == ',':\n                self._input(ord(stdin[0]))\n                stdin = stdin[1:]\n            elif commands[i] == '+':\n                self._add()\n            elif commands[i] == '-':\n                self._sub()\n            elif commands[i] == '>':\n                self._move(1)\n            elif commands[i] == '<':\n                self._move(-1)\n            elif commands[i] == '.':\n                yield self._output()\n            elif commands[i] == ',':\n                self._input(ord(stdin[0]))\n                stdin = stdin[1:]\n            elif commands[i] == '[':\n                self.code.append(1)\n            elif commands[i] == ']':\n                n = self._loop_start()\n                if self.code[-1]:\n                    self._loop_body(n, commands[i + 1:])\n                else:\n                    self._loop_end(n)\n                self.code = self.code[:-1]\n            elif commands[i] == ',':\n                self._input(ord(stdin[0]))\n                stdin = stdin[1:]\n            elif commands[i] == '+':\n                self._add()\n            elif commands[i] == '-':\n                self._sub()\n            elif commands[i] == '>':\n                self._move(1)\n            elif commands[i] == '<':\n                self._move(-1)\n            elif commands",
        "num_ids_2": 132,
        "num_ids_4": 208
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\"\"\"\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3+4+5\") == \">+++>\\n<[<+>-]<\\n\"\nassert solution(\"3-4-5\") == \">+++>\\n<[<+>-]<\\n\"\nassert solution(\"3*4*5\") == \">+++>\\n<[<+>-]<\\n\"\nassert solution(\"3+4-5\") == \">+++>\\n<[<+>-]<\\n\"\nassert solution(\"3*4+5\") == \">+++>\\n<[<+>-]<\\n\"\n",
        "num_ids_2": 56,
        "num_ids_4": 112
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2+3') == '<[<+>-]<'\nassert solution('9-7') == '+++++++++>'\n\n\"\"\"\n\n\"\"\"\nBASIC INFORMATION\n\nBrainfuck interpreters are a family of programs for storing and modifying a single string of memory cells. These programs are often used to simulate a primitive version of the famous computer programming language BASIC (http://en.wikipedia.org/wiki/BASIC).\n\nIn this problem, we will write a simple Brainfuck interpreter. You will be given a string containing a brainfuck program, and you must print the result of its execution.\n\nThe interpreter will be able to read the instructions and do some operations on memory cells. To be more specific:\n\nmemory cells store integers from 0 to 255 with unsigned 8-bit wraparound.\nmemory cells can be read with the command.\nmemory cells can be written with the command <.\nmemory cells can be incremented with the command +.\nmemory cells can be decremented with the command -.\nYou will need to test the correctness of your solution by using the Brainfuck program given in the input data.\n\n-----Instructions-----\n\nWrite 5 lines of code to test the correctness of solution:\nIn this problem you will write a simple generator of Brainfuck (https://en.wikipedia.org/wiki/Brainfuck) calculators.\n\nYou are given an arithmetic expression consisting of integers from 0 to 255 and addition/subtraction signs between them. Output a Brainfuck program which, when executed, will print the result of evaluating this expression.\n\nWe use a fairly standard Brainfuck interpreter for checking the programs:\n\n\n 30000 memory cells.\n\n memory cells store integers from 0 to 255 with unsigned 8-bit wraparound.\n\n console input (, command) is not supported, but it's not needed for this problem.\n\n\n-----Input-----\n\nThe only line of input data contains the arithmetic expression. The expression will contain between 2 and 10 operands, separated with arithmetic signs plus and/or minus. Each operand will be an integer between 0 and 255, inclusive. The calculations result is guaranteed to be an integer between 0 and 255, inclusive (results of intermediary calculations might be outside of these boundaries).\n\n\n-----Output-----\n\nOutput a Brainfuck program which, when executed, will print the result of evaluating this expression. The program must be at most 5000000 characters long (including the non-command characters), and its execution must be complete in at most 50000000 steps.\n\n\n-----Examples-----\nInput\n2+3\n\nOutput\n++>\n+++>\n<[<+>-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\n\nInput\n9-7\n\nOutput\n+++++++++>\n+++++++>\n<[<->-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\n\n\n\n-----Note-----\n\nYou can download the source code of the Brainfuck interpreter by the link http://assets.codeforces.com/rounds/784/bf.cpp. We use this code to interpret outputs.\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"2+3\"\n) == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\"\nassert solution(\n    \"9-7\"\n) == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\"\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\">++++[>++++[>++[>>++++>>+<<[<<<-]>>[-]>>>>>>+<<<<<-]>>]>>.>.\") == \"+++++++++++.>>.>.>\"\nassert solution(\"<-<.>-<<.<<-<.>>\") == \"<<[-].[-[-]<.[-]<.[[-]<.[-[-]<.[-]<.[-]<.[-[-]<.[-]<.\"\nassert solution(\"<<[-]<.<<<.>-<<+>>.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>-<[-]<.>",
        "num_ids_2": 110,
        "num_ids_4": 1634
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"+3+1-3\") == \"++++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\n\n\"\"\"\n\nimport collections\nimport re\n\nProgram = collections.namedtuple('Program', 'code output')\n\nBASE = 30000",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '1'\nassert solution('3\\n2') == '2'\nassert solution('4\\n3') == '3'\nassert solution('5\\n4') == '4'\n",
        "num_ids_2": 21,
        "num_ids_4": 47
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"11212312341234512345612345671234567812345678912345678910\"\n\"\"\"\n\n\nfrom math import log2, ceil\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n1\n3\n20\n38\n56''') == '''1\n2\n5\n2\n0'''\n\nassert solution('''4\n2132\n506\n999999999999999999\n1000000000000000000''') == '''8\n2\n4\n1'''\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\n\"\"\"\n\nimport math\n\nq = int(input())\nfor _ in range(q):\n    k = int(input())\n    i = 1\n    s = \"1\"\n    while len(s) < k:\n        s += str(i)\n        i += 1\n    print(s[k - 1])\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"112123123412345\") == '8'",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\n\"\"\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5123465\") == \"5\"\nassert solution(\"513456\") == \"6\"\nassert solution(\"523456\") == \"6\"\nassert solution(\"5123456\") == \"5\"\nassert solution(\"512345678912345678910\") == \"0\"\n",
        "num_ids_2": 23,
        "num_ids_4": 46
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"112123123412345$\\dots$\") == '1'\n\nassert solution(\"112123123412345$\\dots$11223$\\dots$\") == '1'\n\nassert solution(\"112123123412345$\\dots$111111122222$\\dots$\") == '0'\n\nassert solution(\"112123123412345$\\dots$111111122222$\\dots$1111111111111111111111$\\dots$\") == '0'\n\n\"\"\"",
        "num_ids_2": 47,
        "num_ids_4": 118
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1\\n3\\n20\\n38\\n56\\n\") == \"1\\n2\\n5\\n2\\n0\"\n\n\"\"\"",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1\\n3\\n20\\n38\\n56\") == \"1\\n2\\n5\\n2\\n0\"\n\"\"\"\n\nimport os",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n') == '0'\nassert solution('5\\n') == '2'\nassert solution('7\\n') == '1'\nassert solution('20\\n') == '9'\nassert solution('33\\n') == '5'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('575') == '4'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n575\n''') == 4\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"575\") == \"4\"\nassert solution(\"5750\") == \"4\"\nassert solution(\"1000\") == \"7\"\n\"\"\"",
        "num_ids_2": 21,
        "num_ids_4": 31
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"13\") == \"1\"\nassert solution(\"35\") == \"1\"\nassert solution(\"1234\") == \"0\"\nassert solution(\"1111\") == \"1\"\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('575') == 4\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"575\") == 4\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"575\") == \"4\"\nprint('all tests passed.')\n\n-------",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"575\") == 4\nassert solution(\"1\") == 1\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n\n\"\"\"",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"101\") == 1\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('111') == 0\nassert solution('010') == 1\nassert solution('011') == 2\nassert solution('000') == 1\nassert solution('110') == 0\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"010\") == 1\nassert solution(\"100\") == 0\nassert solution(\"101\") == 2\nassert solution(\"111\") == 3\nassert solution(\"10101010\") == 0\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == 1\nassert solution('1110') == 1\nassert solution('11110') == 2\nassert solution('11110') == 2\nassert solution('11110') == 2\n",
        "num_ids_2": 17,
        "num_ids_4": 35
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"000\") == 1\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1110011\") == 3\nassert solution(\"1110010\") == 0\nassert solution(\"1110001\") == 3\nassert solution(\"1110110\") == 4\nassert solution(\"1110101\") == 3\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == answer\n\n\"\"\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0110\") == 1\n\n\"\"\"\n\nimport sys\n\nS = sys.stdin.readline().strip()\n\nd = {}\nfor c in S:\n    if c in d:\n        d[c] += 1\n    else:\n        d[c] = 1\n\nprint(d['0'] - d['1'])\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('111') == '0'\nassert solution('010') == '0'\nassert solution('100') == '1'\nassert solution('110') == '1'\nassert solution('101') == '2'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('101010') == 5\nassert solution('110101') == 3\nassert solution('101010') == 5\nassert solution('101101') == 4\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 19,
        "num_ids_4": 37
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10 30\") == \"APPROVED\"\nassert solution(\"1 5\") == \"DENIED\"\n\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 6 7 10\") == \"APPROVED\"\nassert solution(\"4 6 9 11 12 15 16\") == \"DENIED\"\n\"\"\"\n\nimport math",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6 7 9 10 31\") == \"APPROVED\"\n\"\"\"",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n6 7 9 10 31') == 'APPROVED'\n\"\"\"\n\nn = int(stdin.readline().strip())\n\nli = [int(stdin.readline().strip()) for i in range(n)]\n\nfor num in li:\n    if num % 2 == 0:\n        if num % 3 == 0 or num % 5 == 0:\n            print('APPROVED')\n        else:\n            print('DENIED')\n    else:\n        print('DENIED')\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 9 3\") == \"APPROVED\"\nassert solution(\"5 9 3\") == \"DENIED\"\n\"\"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6 7 10 12\") == \"APPROVED\"\nassert solution(\"5 6 7 10 12 31\") == \"DENIED\"\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n\nN = int(input())\na = list(map(int, input().split()))\n\nfor i in range(N):\n    if a[i] % 2 == 0 and (a[i] % 3 == 0 or a[i] % 5 == 0):\n        print(\"APPROVED\")\n    else:\n        print(\"DENIED\")\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RURDRRU') == 'Yes'\nassert solution('RUUDRU') == 'No'\n\nprint(solution(stdin.readline()))\n\"\"\"",
        "num_ids_2": 27,
        "num_ids_4": 40
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\n-------",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RULDRDR') == 'No'\nassert solution('RDRDRUULRDRR') == 'Yes'\n\n\"\"\"\n\n\"\"\"\nBy following the rules of a strum of pipes, if you stay at the same position for the same number of consecutive pipes, then you must flip the pipe. If you flip a pipe, then it is now in the opposite position.\n\nYou can pass a pipe, as long as there are no consecutive pipes in the same position.\n\nFor example
        "num_ids_2": 26,
        "num_ids_4": 43
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"LRUDDR\") == \"No\"\n\"\"\"",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('LLR') == 'No'\n\"\"\"\n\nimport sys",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RULUDR\") == \"No\"\nassert solution(\"RUDD\") == \"No\"\nassert solution(\"RUDDUDUDR\") == \"No\"\nassert solution(\"RRUDRR\") == \"No\"\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RUDRUULR') == 'No'\nassert solution('RUDLUDRUD') == 'Yes'\nassert solution('RUDRUULRU') == 'No'\n\"\"\"\n",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"LLRRDDLUUDDDRR\") == \"No\"\n\"\"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\"\nimport re",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2\\n4\\n3\\n5\\n') == '7'\nassert solution('1\\n1\\n1\\n1\\n1\\n') == '0'\n\n\"\"\"\n\nfrom typing import List\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5\\n') == '7'\n\"\"\"\nfrom typing import Dict, List, Tuple",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\n\"\"\"\n\nn = int(input())\nl = []\nfor i in range(n):\n    l.append(int(input()))",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 4 3 5\") == \"7\"\nassert solution(\"5 3 2 4 3\") == \"7\"\n\"\"\"\n\nimport sys",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3 5 6\") == \"7\"\nassert solution(\"3 3 3 3 3\") == \"1\"\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\\n\") == \"7\"\nassert solution(\"5\\n2\\n1\\n4\\n3\\n5\\n\") == \"7\"\nassert solution(\"5\\n1\\n1\\n1\\n1\\n1\\n\") == \"0\"\n\nprint(\"All tests passed.\")",
        "num_ids_2": 54,
        "num_ids_4": 81
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"\n\nN, A, B, C, D, E = [int(x) for x in input().split('\\n')]\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"\n\nfrom sys import stdin",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 2 4 3 5') == '7'\n\"\"\"\n\nfrom math import inf",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == 2\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3\\n2\\n1\\n0') == 1\nassert solution('6\\n4\\n5\\n3\\n0\\n2') == 2\n\"\"\"",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3) == 2\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline())",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == 2\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n\") == \"2\"\n\n-----\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n') == 2\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == 2\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == 2\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2') == '4'\nassert solution('2\\n2') == '2'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2\\n1\") == '1'\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"5\"\nassert solution(\"4\") == \"5\"\nassert solution(\"6\") == \"7\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('2') == '2'\nassert solution('4') == '3'\nassert solution('11') == '11'\nassert solution('7') == '7'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20') == '23'\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20') == '23'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(22) == 23\nassert solution(20) == 23\nassert solution(19) == 19\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u043f\u0440\u043e\u0441\u0442\u044b\u043c. \u0427\u0438\u0441\u043b\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0435, \u0435\u0441\u043b\u0438 \u0443 \u043d\u0435\u0433\u043e \u0435\u0441\u0442\u044c \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c, \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0439 \u043e\u0442 \u0441\u0430\u043c\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u00abYES\u00bb \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u0438 \u00abNO\u00bb \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0447\u0438\u0441\u043b\u0430 \u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u0443 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u00abif\u00bb \u0438 \u0435\u0433\u043e \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 if else.\n\nSample Input 1:\n\n2\n\nSample Output 1:\n\nYES\n\nSample Input 2:\n\n3\n\nSample Output 2:\n\nNO\n\nSample Input 3:\n\n5\n\nSample Output 3:\n\nYES\n\nSample Input 4:\n\n7\n\nSample Output 4:\n\nNO\n\nSample Input 5:\n\n7\n\nSample Output 5:\n\nYES\n\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input_1) == expected_1\nassert solution(input_2) == expected_2\nassert solution(input_3) == expected_3\n\"\"\"",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20') == '23'",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20') == '23'",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"23\") == \"23\"\nassert solution(\"20\") == \"23\"\nassert solution(\"2\") == \"3\"\nassert solution(\"4\") == \"5\"\n\nimport math\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"20\") == \"23\"\nassert solution(\"100\") == \"101\"\nassert solution(\"101\") == \"101\"\n\"\"\"\n\nimport math",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\n\"\"\"\n\n\"\"\"\nInput\n4\n3 1 3 2\n\nOutput\n1\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 3 2\") == \"1\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 1 3 2\") == 1\n\"\"\"",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"0\"\n\"\"\"",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 3 2\") == \"1\"\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nlines = sys.stdin.readlines()\nn = int(lines[0])\nsequence = list(map(int, lines[1].split()))\n\nsequence = list(map(int, lines[1].split()))\n\ncounter = Counter(sequence)\n\ncount = 0\n\nfor key in counter:\n    if counter[key] % 2!= 0:\n        count += 1\n        if count > 1:\n            break",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n3 1 3 2''') == '1'\n\n'''\nTo solve this we can use a sliding window algorithm. \nWe will keep a set of numbers seen so far and a variable that keeps track of how many of the numbers are in our set so far. \nWe will scan through the sequence, if we have two distinct numbers then we increment our counter and decrement the numbers we've seen so far. \nIf we have 3 distinct numbers we know we can replace at least one of the numbers, and if we have all three distinct numbers we can replace all the numbers. \nIn both cases we'll decrement the counter and add the current number to the set.\nAt the end we'll check our counter and return the minimum number of elements we need to replace.\n\nSince we are scanning through the sequence in O(n) and all of the operations are constant we will have an O(n) time complexity.\n'''\nimport collections",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 3 2\") == \"1\"\nassert solution(\"4 1 3 3\") == \"2\"\nassert solution(\"4 1 3 3\") == \"2\"\nassert solution(\"4 1 3 3\") == \"2\"\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 1 3 2\") == 1\n'''",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"4\\n3 1 3 2\"\n) == '1'\n\nassert solution(\n\"8\\n4 1 3 2 2 1 3 2\"\n) == '3'\n\"\"\"\nfrom collections import Counter",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 100 90 80') == '23'\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"3 5 7\") == \"12\"\nassert solution(\"9 100 8 100\") == \"24\"\n\"\"\"\n\nimport sys\nfrom collections import deque",
        "num_ids_2": 25,
        "num_ids_4": 38
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"5 100 90 80\"\n) == \"23\"\n\"\"\"\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 100 90 80\") == '23'\nprint(solution(\"5 100 90 80\"))\n\n-----\n5 100 90 80\n98\n40\n30\n21\n80\n\n23\n\n\"\"\"\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\"\n\nn, a, b, c = list(map(int, stdin.split()))\n\ncosts = dict()\ncosts[(a, 0)] = 0\ncosts[(b, 0)] = 0\ncosts[(c, 0)] = 0\n\nfor _ in range(n):\n    l = int(stdin.readline())\n    costs[(l, 1)] = costs[(l, 1)] or (100 + costs[(l - 1, 0)] + costs[(l - 1, 1)])\n    costs[(l, 0)] = costs[(l, 0)] or (costs[(l - 1, 1)] + 100)\n    costs[(l, 2)] = costs[(l, 2)] or (costs[(l - 2, 0)] + 200 + costs[(l - 1, 1)])\n\nprint(min(costs[(a, 0)] + costs[(b, 0)] + costs[(c, 0)], costs[(a, 1)] + costs[(b, 1)] + costs[(c, 1)],\n          costs[(a, 2)] + costs[(b, 2)] + costs[(c, 2)]))\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"5 60 20 30\") == \"18\"\n\"\"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"5 100 90 80\"\n) == \"23\"\nassert solution(\n    \"3 95 94\"\n) == \"10\"\nassert solution(\n    \"4 90 85\"\n) == \"4\"\n\"\"\"\n",
        "num_ids_2": 8,
        "num_ids_4": 12
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\nprint(\"Test 1:\", solution(\"100 90 80\\n98\\n40\\n30\\n21\\n80\"))\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == '23'\nassert solution(\"4 5 10\\n8\\n5\\n3\\n1\\n2\") == '11'\n\"\"\"\n\nimport re",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\n\"\"\"\n\nimport unittest\nimport sys\n\n\nclass Solution:\n    def solve(self, stdin):\n        a, b, c = map(int, stdin.readline().split())\n        n = int(stdin.readline())\n        s = set()\n        for i in range(n):\n            s.add(int(stdin.readline()))\n\n        return self.search(a, b, c, s)\n\n    def search(self, a, b, c, s):\n        if a + b < c:\n            return -1\n\n        n = 1\n\n        while True:\n            mp = 0\n            while mp < n and len(s) > 0:\n                if (c + mp) in s:\n                    break\n                mp += 1\n\n            if mp == n:\n                return -1\n\n            if mp >= 2 and b >= (c + mp - 1):\n                mp -= 1\n\n            if mp < 2:\n                n += 1\n            else:\n                if n < mp:\n                    n = mp\n\n                break\n\n        return n * 10\n\n\nclass TestSolution(unittest.TestCase):\n    def test_case_1(self):\n        stdin = sys.stdin.read()\n        expected = sys.stdin.read()\n        self.assertEqual(Solution().solve(stdin), expected)\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nassert solution(\"FGHIJ\") == \"JKIABC\"\nassert solution(\"AB\") == \"AB\"\n\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 40
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('A') == 'Z'\nassert solution('Z') == 'A'\nassert solution('ABC') == 'CDE'\n\"\"\"\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\nprint(solution('ABCXYZ'))\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\nassert solution('RSTUVW') == 'FGHIJKL'\nassert solution('MNOPQR') == 'STUVWX'\n\n\"\"\"\n\nimport math",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\"",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution( \"ABCXYZ\" ) == \"CDEZAB\"\n\n\"\"\"\n\nimport sys",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\"\n\n\"\"\"\nFirst Solution\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A\") == \"B\"\nassert solution(\"AB\") == \"BC\"\nassert solution(\"ABC\") == \"BCD\"\nassert solution(\"ABBC\") == \"BCCD\"\nassert solution(\"ABBCD\") == \"BCDA\"\n",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 2 3 2 4') == '3 4 2'\n\"\"\"\n\nn = int(input())\nb = list(map(int, input().split()))\nnums = []\nfor num in range(2, 275010):\n    if num % 2 == 1:\n        nums.append(num)\n\nans = []\n\nfor i in range(0, n * 2, 2):\n    ans.append(nums[b[i] % len(nums)])\nprint(' '.join(map(str, ans)))\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n5 2 3 2 4') == '3 4 2'\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import sqrt\n\nfrom typing import List",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\"\n\n\nimport itertools\nimport math\n\nimport sys\n\nsys.setrecursionlimit(10000)\n\nprimes = [2, 3, 5]\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2\") == \"3 4 2\"\nassert solution(\"5 2 3 4\") == \"3 4 2\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = [0] * 2 * n\nfor i in range(n):\n    if a[i] < 3:\n        b[2 * i] = a[i]\n    else:\n        b[2 * i] = a[i] % 3\n        for j in range(2, int(a[i] ** 0.5) + 1):\n            if a[i] % j == 0:\n                b[2 * i + 1] = j\n        if a[i] ** 0.5 == int(a[i] ** 0.5):\n            b[2 * i + 1] = int(a[i] ** 0.5)\nprint(*b)",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\nassert solution(\"1 3\") == \"3\"\n",
        "num_ids_2": 33,
        "num_ids_4": 44
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\"\n\nimport math\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131\") == \"199999\"\n\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n2 4 5 3 1') == '11111'\nassert solution('5 1\\n2 1 3 5 4') == '22112'\nassert solution('7 1\\n7 2 1 3 5 4 6') == '1121122'\n\nprint(solution('5 1\\n2 1 3 5 4'))\nprint(solution('7 1\\n7 2 1 3 5 4 6'))\n",
        "num_ids_2": 38,
        "num_ids_4": 60
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"111111\"\nassert solution(\"5 1\") == \"212121\"\nassert solution(\"7 1\") == \"1121122\"\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\n\"\"\"\nimport heapq\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"21112\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\n",
        "num_ids_2": 38,
        "num_ids_4": 60
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n2 4 5 3 1') == '11111'\nassert solution('5 1\\n2 1 3 5 4') == '22111'\nassert solution('7 1\\n7 2 1 3 5 4 6') == '1121122'\nassert solution('5 1\\n2 4 5 3 1') == '21112'\nassert solution('7 1\\n7 2 1 3 5 4 6') == '1121122'\n",
        "num_ids_2": 38,
        "num_ids_4": 79
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 1\") == \"11111\"\nassert solution(\"1 1\\n1\") == \"11111\"\nassert solution(\"1 1\\n1\\n2\") == \"22111\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\nassert solution(\"5 1\\n2 4 5 3 1\") == \"21112\"\n",
        "num_ids_2": 31,
        "num_ids_4": 71
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"11111\"\n\"\"\"\n\nn, k = [int(n) for n in stdin.readline().split()]\narr = [int(n) for n in stdin.readline().split()]\n\nfirst = []\nsecond = []",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '112122'\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\n\n\"\"\"\nfrom collections import deque\n",
        "num_ids_2": 24,
        "num_ids_4": 37
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 1 2 3') == '2'\nassert solution('3\\n1 2 3') == '4'\nassert solution('4\\n1 2 3 7') == '4'\n\"\"\"\n\nfrom math import comb\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 1 2 3') == 2\nassert solution('4\\n1 3 3 7') == 4\n\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == \"2\"\nassert solution(\"4\\n1 3 3 7\") == \"4\"\nassert solution(\"2\\n100 1\") == \"2\"\nassert solution(\"4\\n100 100 100 100\") == \"4\"\n",
        "num_ids_2": 33,
        "num_ids_4": 63
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n1 2 1 2 3''') == 2\n\nassert solution('''4\n1 3 3 7''') == 4\n\nassert solution('''10\n5 1 2 2 5 3 7 9 8 3\n''') == 10\n\nassert solution('''10\n3 3 3 3 3 3 3 3 3 3\n''') == 1\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 1 2 3') == '2'\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == \"2\"\nassert solution(\"2\\n100 1\") == \"2\"\nassert solution(\"4\\n1 3 3 7\") == \"4\"\n\n\"\"\"\n\nfrom itertools import product\n\nn = int(input().strip())\na = list(map(int, input().strip().split()))\n\nnumbers = set()\n\nfor l, r in product(range(n), range(n)):\n    if l <= r and a[l] == a[r]:\n        numbers.add(a[l])\n    elif a[l] < a[r]:\n        numbers.add(a[l])\n    elif a[l] > a[r]:\n        numbers.add(a[r] + 1)\n\nprint(len(numbers))\n",
        "num_ids_2": 31,
        "num_ids_4": 47
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n2\\n1\\n3\") == 2\n\"\"\"\n\n\nimport collections",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5\n1 2 1 2 3\n''') == 2\n\nassert solution('''\n6\n1 2 3 1 2 3\n''') == 2\n\nassert solution('''\n5\n1 3 2 1 2\n''') == 2\n\nassert solution('''\n5\n1 2 3 2 1\n''') == 2\n\nassert solution('''\n5\n1 3 1 3 1\n''') == 4",
        "num_ids_2": 12,
        "num_ids_4": 24
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n1 2 1 2 3''') == 2\n\nassert solution('''2\n100 1''') == 2\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == ''\n\nprint(solution(stdin))\n'''\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\n\"\"\"\nfrom itertools import combinations\nfrom typing import List",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 7 1 5 4 9') == 1\n\nassert solution('1 2 3 4 5') == 2\n\nassert solution('1 1 1 1023') == 1\n\nassert solution('7 39 89 25 89') == 0\n\nassert solution('16') == 1",
        "num_ids_2": 25,
        "num_ids_4": 49
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\n\n\"\"\"\n\nimport math\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '6\\n4 7 1 5 4 9\\n'\n) == '1\\n'\nassert solution(\n    '5\\n1 2 3 4 5\\n'\n) == '2\\n'\nassert solution(\n    '1\\n16\\n'\n) == '1\\n'\nassert solution(\n    '4\\n1 1 1 1023\\n'\n) == '0\\n'\n\"\"\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7 1 5 4 9\\n\") == \"1\"\nassert solution(\"1 2 3 4 5\\n\") == \"2\"\nassert solution(\"16\\n\") == \"1\"\nassert solution(\"1 1 1 1023\\n\") == \"0\"\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 61
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 29,
        "num_ids_4": 53
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7 1 5 4 9\") == 1\n\"\"\"\n\nfrom collections import Counter\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 1 1 1023\") == \"0\"\n",
        "num_ids_2": 29,
        "num_ids_4": 53
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 1 1 1023\") == \"0\"\n",
        "num_ids_2": 29,
        "num_ids_4": 53
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 1 1 1023\") == \"0\"\nassert solution(\"7 39 89 25 89\") == \"0\"\n\n\"\"\"",
        "num_ids_2": 29,
        "num_ids_4": 53
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin='1110') == '2'\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11111\") == \"1111\"\nassert solution(\"01110\") == \"11110\"\nassert solution(\"11110\") == \"1111\"\nassert solution(\"1111\") == \"11111\"\n\"\"\"",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1110110111\") == \"7\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1110111\") == 5\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0011') == 4\nassert solution('0111') == 6\n\"\"\"\nimport sys",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10111') == '4'\nassert solution('100010') == '2'\nassert solution('100010') == '2'\nassert solution('1111111') == '2'\nassert solution('101101') == '0'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101010') == 4\nassert solution('1110111') == 3\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0011\") == \"4\"\nassert solution(\"1011\") == \"4\"\nassert solution(\"1111\") == \"0\"\nassert solution(\"10111010\") == \"6\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0011') == '4'\n\"\"\"\nimport os\nimport sys\nfrom collections import Counter\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"110\") == 1\nassert solution(\"11110\") == 2\nassert solution(\"1111110\") == 3\nassert solution(\"11111111110\") == 4\nassert solution(\"1111111111110\") == 4\n",
        "num_ids_2": 17,
        "num_ids_4": 36
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == '2'\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 2\n1 3\n2 4''') == '2'\n\nassert solution('''4 1\n2 4''') == '0'\n\nassert solution('''3 3\n1 3\n1 4\n2 4''') == '1'\n\nassert solution('''5 5\n1 2\n1 3\n2 4\n2 5\n4 1''') == '1'\n\nassert solution('''10 10\n1 5\n1 6\n2 3\n2 7\n5 1\n2 8\n5 9\n2 10\n8 1\n1 7\n5 2\n4 6\n4 8\n5 10\n5 6\n9 4\n4 10\n1 2\n9 3\n6 2\n1 8\n3 9\n6 7\n7 3\n3 1\n6 4\n9 5\n2 9\n1 6\n6 5\n9 8\n9 7\n4 8\n4 1\n7 9\n2 3\n7 2\n1 5\n9 5\n6 7\n4 8\n5 10\n4 10\n1 3\n8 1\n4 8\n6 2\n5 6\n7 10\n3 9\n6 10\n1 2\n8 5\n3 6\n10 10\n5 6\n8 10\n3 10\n7 2\n6 10\n3 10\n7 2\n10 1\n3 4\n8 1\n7 3\n6 5\n3 9\n5 2\n3 1\n7 3\n4 9\n7 7\n4 9\n3 4\n7 10\n6 8\n6 6\n5 9\n7 1\n6 7\n5 8\n10 7\n6 10\n6 7\n4 10\n10 9\n3 6\n10 10\n8 7\n6 10\n3 4\n5 10\n9 9\n5 3\n3 5\n4 10\n8 6\n4 9\n9 5\n5 3\n6 10\n3 1\n3 2\n3 1\n4 5\n2 10\n3 5\n6 1\n5 1\n5 9\n8 3\n2 5\n1 2\n3 7\n6 1\n10 9\n3 6\n5 8\n4 5\n8 3\n3 9\n2 4\n5 2\n1 1\n9 2\n7 8\n10 4\n3 3\n10 2\n2 7\n6 10\n7 10\n9 1\n3 9\n4 4\n7 7\n8 10\n4 5\n2 5\n9 3\n7 8\n5 9\n9 1\n6 10\n8 4\n1 7\n9 5\n4 5\n3 3\n2 5\n4 4\n8 2\n2 3\n3 1\n7 10\n7 2\n5 6\n2 9\n6 5\n4 3\n4 10\n10 8\n4 1\n5 5\n7 1\n7 4\n2 1\n10 9\n4 8\n6 1\n8 9\n9 7\n4 1\n6 7\n4 4\n5 8\n2 2\n3 4\n10 1\n6 1\n10 1\n4 8\n5 10\n3 2\n5 7\n7 1\n8 1\n5 1\n2 2\n3 7\n2 5\n4 1\n7 10\n1 3\n5 10\n4 10\n5 1\n6 8\n5 10\n9 2\n4 5\n7 5\n7 9\n8 2\n7 7\n2 7\n5 10\n8 7\n5 3\n8 7\n5 8\n8 6\n3 1\n1 1\n7 8\n8 5\n9 2\n3 2\n5 4\n8 4\n8 4\n5 4\n8 6\n6 3\n3 9\n8 2\n2 3\n5 9\n9 2\n9 2\n5 5\n3 4\n7 6\n3 5\n5 4\n7 1\n5 4\n5 8\n8 8\n5 1\n2 6\n3 9\n9 1\n6 1\n6 7\n2 10\n4 7\n8 3\n3 9\n6 5\n8 2\n4 3\n5 2\n3 1\n4 6\n6 6\n8 7\n3 1\n1 3\n5 2\n3 5\n8 5\n2 7\n4 4\n5 4\n1 5\n2 4\n6 1\n8 1\n1 2\n4 9\n3 1\n1 2\n2 3\n8 4\n8 1\n6 5\n3 2\n6 1\n5 3\n1 3\n3 7\n4 8\n5 2\n3 5\n7 3\n6 5\n9 5\n8 1\n3 5\n2 2\n4 6\n8 1\n5 8\n7 7\n8 7\n2 2\n6 5\n8 4\n8 1\n7 1\n7 8\n4 4\n9 2\n5 6\n4 2\n3 4\n7 2\n3 2\n2 4\n3 4\n7 9\n7 7\n5 1\n3 7\n9 5\n1 9\n2 5\n4 5\n1 2\n4 4\n7 9\n7 2\n4 8\n5 9\n2 1\n4 8\n9 7\n6 1\n2 7\n4 2\n1 3\n7 10\n7 9\n6 9\n3 5\n3 2\n6 10\n4 7\n1 3\n5 7\n5 9\n7 6\n3 6\n7 8\n9 8\n9 9\n2 7\n3 5\n4 6\n8 10\n9 8\n4 6\n5 7\n2 9\n6 1\n3 8\n6 5\n2 1\n4 1\n4 4\n5 2\n4 5\n8 8\n5 2\n3 9\n8 2\n4 1\n9 3\n7 1\n7 2\n8 2\n3 3\n6 1\n4 8\n7 4\n4 9\n6 3\n2 9\n3 1\n4 2\n5 1\n7 1\n6 3\n9 8\n5 2\n3 3\n8 3\n7 4\n1 1\n2 3\n5 5\n3 9\n3 1\n6 6\n8 3\n9 7\n4 2\n3 4\n2 1\n5 2\n5 4\n1 1\n7 3\n2 4\n5 5\n5 1\n5 3\n2 5\n2 4\n6 10\n7 1\n1 4\n8 6\n6 1\n5 2\n6 1\n3 1\n3 2\n4 1\n5 2\n6 3\n6 7\n2 4\n4 7\n2 3\n3 3\n5 4\n4 7\n9 1\n5 9\n5 4\n6 1\n5 6\n5 2\n4 1\n6 4\n3 1\n6 2\n8 1\n4 2\n6 2\n5 6\n5 1\n3 7\n5 2\n5 3\n9 8\n3 4\n4 8\n2 5\n4 7\n1 6\n2 7\n6 3\n2 8\n6 7\n5 3\n3 3\n5 4\n8 3\n5 1\n4 2\n3 1\n7 7\n6 4\n3 7\n5 7\n9 2\n8 8\n1 5\n1 5\n9 7\n8 5\n7 2\n2 1\n3 1\n2 7\n9 4\n4 3\n2 1\n7 7\n3 1\n5 1\n8 2\n9 8\n7 1\n7 2\n3 3\n4 1\n2 4\n5 5\n6 10\n3 1\n6 5\n3 1\n6 1\n7 6\n1 1\n5 6\n8 8\n9 5\n1 1\n8 1\n1 3\n3 9\n2 3\n5 1\n4 1\n5 7\n6 2\n8 7\n9 7\n7 7\n2 7\n4 8\n5 3\n5 8\n3 5\n3 2\n6 2\n6 4\n7 3\n7 1\n2 2\n3 8\n5 1\n5 1\n3 2\n3 3\n9 1\n4 7\n6 10\n5 8\n3 4\n7 3\n9 3\n7",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == 2\n\"\"\"\n",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"1\"\n\n\"\"\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == 2\n\"\"\"\n\nimport math\nfrom functools import reduce",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\nimport sys\n\nT = int(sys.stdin.readline())\nfor _ in range(T):\n    N, M = map(int, sys.stdin.readline().split())\n    left, right = [], []\n    for _ in range(M):\n        l, r = map(int, sys.stdin.readline().split())\n        left.append(l)\n        right.append(r)\n    print(sum(1 for i in range(N) if i in left or i in right))\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == 2",
        "num_ids_2": 17,
        "num_ids_4": 17
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == '1'\n\n\"\"\"\n\nimport sys\n\nfrom collections import deque\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\n\"\"\"\nGift Wrap\n\nThe wrapping paper must be wrapped around the gift.\nThe rule of wrapping is as follows:\n\nTake a rectangular sheet of paper with upper edge length L and lower edge length M.\nOn one edge of the sheet, write down consecutive integers from 1 to N in such a way that the sum of numbers written on the edge is equal to L. On the other edge of the sheet, write down the same integers in the same way, but in the reverse order.\nFor example, if we have L = 3 and M = 5, then on one edge we will write down 1, 2, 3 and on the other edge we will write 3, 2, 1.\n\nNow, we have one gift (m, M). It is very easy to wrap it.\nTake a look on the other two edges.\n\nFor example, if we have L = 3 and M = 5, then our gift will be wrapped on both sides.\n\nIf the gift is wrapped on both sides, then the task is easy: just count total number of gifts (m, M) on the sheet of paper.\n\nHowever, if the gift is wrapped only on one side, then we need to find the maximum possible number of gifts which will fit.\n\nTo solve this problem, we will use the observation that the maximum number of gifts that will fit is equal to the total number of gifts divided by two.\n\nIf this maximum number of gifts is greater than M, then we can't wrap the gift on the other side.\n\nOn the other side, if the maximum number of gifts is less than M, then we can wrap the gift on the other side.\n\nTo find the maximum number of gifts on the first side, we will write down the numbers from 1 to N.\n\nIf the number of written numbers on the first edge is less than the total number of gifts, we write more numbers.\n\nOn the first edge, we write the numbers from the smallest to the largest.\n\nLet's look at the second edge.\n\nIf the number of written numbers on the second edge is less than the total number of gifts, we write more numbers.\n\nOn the second edge, we write the numbers from the largest to the smallest.\n\nTo wrap the gift, we need to find the number of written numbers on the first edge and the number of written numbers on the second edge, which will give us the maximum number of gifts which can fit on the one side.\n\nWe can calculate it using the following formulas:\n\nThe number of gifts on the first side is equal to the total number of gifts minus the number of written numbers on the second edge.\nThe number of gifts on the second side is equal to the total number of gifts minus the number of written numbers on the first edge.\n\nWrite a program which reads one integer - the length of the first edge, followed by one integer - the length of the second edge.\n\nThen your program should print one integer - the maximum number of gifts which can fit on one of the sides of the rectangular sheet of paper.\n\n-----Sample Input-----\n3\n5\n\n-----Sample Output-----\n3\n\n\"\"\"\n\n\"\"\"\nMinimize the value |(A[0] +... + A[P-1]) - (A[P] +... + A[N-1])|.\n\n-----Constraints-----\n1 \\leq P \\leq N \\leq 1,000,000, 1 \\leq A_i \\leq 10,000,000, 0 \\leq i \\leq P, N\n\n-----Input-----\nThe first line contains integers P and N separated by a single space.\nThe second line contains P integers - A_1, A_2,..., A_P.\n\n-----Output-----\nPrint the value of the difference minimized by the second constraint.\n\n-----Sample Input-----\n3 2\n1 5 3\n\n-----Sample Output-----\n2\n\"\"\"\n\n\"\"\"\nYou are given an array of integers,. Your task is to find the maximum sum of all possible contiguous subarrays of.\n\nWrite a function:",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 1') == '2'\nassert solution('4\\n1 2 2 1') == '2'\n\"\"\"\n\nimport sys",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 2 2 1') == 2\n\"\"\"",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n1 2 2 1''') == '2'\nassert solution('''4\n2 2 2 1''') == '0'\nassert solution('''5\n1 2 2 1 2''') == '0'\n\n'''\n\n1 2 2 1\n\n1 2 2 1\n\n2 2 2 1\n\n'''\n\nimport sys\n",
        "num_ids_2": 14,
        "num_ids_4": 21
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\n\n\"\"\"",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 2 1') == 2\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\nh = list(map(int, sys.stdin.readline().strip().split()))\n\nl, r = 1, N\ncount = 0\n\nfor i in range(N):\n    while l <= r and h[l - 1] <= h[i]:\n        l += 1\n    while l <= r and h[r - 1] <= h[i]:\n        r -= 1\n    count += r - l + 1\n    r += 1\n    l += 1\n\nprint(count)",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 2 1\") == 2\nassert solution(\"4\\n1 3 4 2\") == 1\n\"\"\"",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 2 1') == 2\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\narr.sort()\n\ns = 0\n\nfor i in range(n):\n    s += (arr[i] - 1 - s)\n\nprint(s)\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == '3'\nassert solution(\"2 4\\n-1 1\") == '4'\nassert solution(\"4 10\\n2 4 1 2\") == '2'\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 50
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\n\n\n\"\"\"\n\nimport math\nimport sys\n\ni_n, w = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\n\ndp = [0] * (w + 1)\ndp[0] = 1\nfor i in range(i_n):\n    for j in range(w, a[i] - 1, -1):\n        dp[j] = dp[j - a[i]] + dp[j]",
        "num_ids_2": 33,
        "num_ids_4": 50
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5\\n2 1 -3') == '3'\nassert solution('4 10\\n2 4 1 2') == '2'\nassert solution('4 10\\n-1 1') == '4'\nassert solution('4 10\\n0 0 0 0') == '0'\n",
        "num_ids_2": 34,
        "num_ids_4": 67
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\n2 1 -3') == '3'\nassert solution('2 4\\n-1 1') == '4'\nassert solution('4 10\\n2 4 1 2') == '2'",
        "num_ids_2": 33,
        "num_ids_4": 50
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5\\n2 1 -3') == '3'\nassert solution('2 4\\n-1 1') == '4'\nassert solution('4 10\\n2 4 1 2') == '2'\n\"\"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 50
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\n'''\n\n\nfrom typing import List\n\nn, w = map(int, input().split())\na = list(map(int, input().split()))\na = [0] + a\n\ndp = [[0 for _ in range(w + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, w + 1):\n        dp[i][j] = dp[i - 1][j]\n        if j - a[i] >= 0:\n            dp[i][j] += dp[i - 1][j - a[i]]\nprint(dp[-1][-1] % (10 ** 9 + 7))\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 -3\\n') == '3'\nassert solution('2 1 -3\\n') == '3'\nassert solution('2 1 -3\\n') == '3'\nassert solution('2 1 -3\\n') == '3'\nassert solution('2 1 -3\\n') == '3'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == '3'\nassert solution(\"2 4\\n-1 1\") == '4'\nassert solution(\"4 10\\n2 4 1 2\") == '2'\n",
        "num_ids_2": 33,
        "num_ids_4": 50
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n2 1 -3\") == \"3\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\n-----",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10\\n2 1 -3\") == '3'\nassert solution(\"4 10\\n2 4 1 2\") == '2'\nassert solution(\"4 10\\n2 4 1 -3\") == '4'\n\n\"\"\"\n\nimport sys\nimport math",
        "num_ids_2": 34,
        "num_ids_4": 52
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\n\"\"\"\n\nimport unittest\nfrom functools import reduce\n",
        "num_ids_2": 36,
        "num_ids_4": 55
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\n\n'''",
        "num_ids_2": 36,
        "num_ids_4": 55
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\"\"\"\n\n\nfrom functools import reduce",
        "num_ids_2": 36,
        "num_ids_4": 55
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\n\"\"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 86
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1000000000000000000 3000000000000000000\\n') == '3000000000000000000 1000000000000000000'\n\n\"\"\"\nimport collections",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 5 2 1') == '2 5 3 4 1'",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nprint(\"PASSED\")",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"",
        "num_ids_2": 42,
        "num_ids_4": 64
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 0\") == \"0 1\"\nassert solution(\"2\\n2 0\") == \"0 2\"\nassert solution(\"2\\n2 1\") == \"1 0\"\nassert solution(\"2\\n3 0\") == \"0 3\"\nassert solution(\"2\\n4 0\") == \"0 4\"\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1000000000000000000 3000000000000000000\") == '3000000000000000000 1000000000000000000'\n\"\"\"\n\nfrom typing import List, Set, Tuple, Dict\nimport collections\nimport itertools\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2 4 3\") == \"1 2 3\"\nassert solution(\"3 5 4 7 10 12\") == \"7 3 5\"\nassert solution(\"5 -1 2 5 8 11\") == \"1 8\"\nassert solution(\"2 10 2 12 6 20\") == \"12 6 20\"\nassert solution(\"5 -1 2 5 8 11\") == \"1 8\"\n",
        "num_ids_2": 33,
        "num_ids_4": 67
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\"\n\n\"\"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 4 7 10 12\") == \"3\"\nassert solution(\"-1 2 5 8 11\") == \"1\"\n\"\"\"",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 4 7 10 12') == '3'\nassert solution('5 -1 2 5 8 11') == '1'\n\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\ncoordinates = list(map(int, sys.stdin.readline().split()))\n\ndistances = set()\n\nfor i in range(n-1):\n    for j in range(i+1, n):\n        d = (coordinates[i] - coordinates[j])\n        distances.add(abs(d))\n\ndistances = list(distances)\n\nm = 0\nindex = 0\nwhile index < len(distances):\n    x = 2 ** distances[index]\n    if x > m:\n        m = x\n        m_index = index\n    index += 1\n\nprint(m)\n\nfor i in range(m):\n    print(coordinates[m_index - i], end=\" \")\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 5 4 7 10 12\") == '3\\n7 3 5'\n\"\"\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 4 7 10 12') == '3'\nassert solution('-1 2 5 8 11') == '1'",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3 5 4 7 10 12') == '3'\nassert solution('5\\n-1 2 5 8 11') == '1'\nassert solution('6\\n1 2 3 4 5 6') == '3'\nassert solution('7\\n1 2 3 4 5 6 7') == '1'\nassert solution('7\\n3 5 4 7 10 12') == '3'\n\nprint(\"All tests passed.\")\n",
        "num_ids_2": 36,
        "num_ids_4": 73
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 5 8 11') == '3'\nassert solution('5 8 11') == '1'\nassert solution('1 2 5 8 11') == '3'\nassert solution('-1 2 5 8 11') == '1'\nassert solution('3 5 4 7 10 12') == '3'\n",
        "num_ids_2": 26,
        "num_ids_4": 55
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 3\\n') == '0 2'\n\"\"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 3\\n') == '0 2'\n\"\"\"\n\n\"\"\"\nimport sys",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '2 3 3\\n'\n) == '0 2'\n\"\"\"",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\n\n\n\"\"\"\nID: pramp\nTASK: cookies\nLANG: PYTHON3\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\nfrom typing import List",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 3\") == '0 2'\nassert solution(\"1 1 1\") == '1 1'\nassert solution(\"1 1 0\") == '0 0'\nassert solution(\"1 2 3\") == '1 0'\nassert solution(\"0 1 0\") == '0 0'\n\"\"\"",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\"\n\nfrom sys import stdin\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\nassert solution(\"0 3 3\") == \"0 0\"\nassert solution(\"1 1 1\") == \"0 0\"\nassert solution(\"1 1 0\") == \"0 1\"\nassert solution(\"1 0 1\") == \"1 1\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 3') == '0 2'\nassert solution('1 1 1') == '0 1'",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    101\n    \"\"\"\n    ) == \"3\"\n\nassert solution(\n    \"\"\"\n    103\n    \"\"\"\n    ) == \"3\"\n\nassert solution(\n    \"\"\"\n    103\n    \"\"\"\n    ) == \"3\"\n\nassert solution(\n    \"\"\"\n    10000000000\n    \"\"\"\n    ) == \"6\"\n\nassert solution(\n    \"\"\"\n    101\n    \"\"\"\n    ) == \"3\"",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100\") == \"3\"\nassert solution(\"101\") == \"3\"\nassert solution(\"102\") == \"2\"\n\"\"\"",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101\") == \"1\"\nassert solution(\"102\") == \"2\"\nassert solution(\"103\") == \"3\"\n\n\"\"\"\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"103\") == \"3\"\nprint(solution(\"103\"))\n\"\"\"\n\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"103\") == '3'\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('103') == '3'\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"103\") == \"3\"\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('101') == '1'\nassert solution('102') == '2'\nassert solution('103') == '3'\nassert solution('104') == '4'\nassert solution('105') == '5'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101\") == \"3\"\nassert solution(\"103\") == \"3\"\nassert solution(\"1000\") == \"18\"\nassert solution(\"1111\") == \"12\"\n\"\"\"\n\n\"\"\"\n\nPlease edit this file in any way you want, this is just an example to help you test your code.\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('101') == '1'\nassert solution('102') == '2'\nassert solution('103') == '3'\nassert solution('104') == '4'\nassert solution('105') == '5'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 9\n\"\"\"\nfrom math import gcd",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '9'\n\"\"\"\n\n\"\"\"\n2\n\n-----Sample Output-----\n9\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '9'\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\n",
        "num_ids_2": 18,
        "num_ids_4": 38
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1') == '9'\nassert solution('2\\n2') == '9'\nassert solution('2\\n3') == '9'\nassert solution('2\\n4') == '9'\nassert solution('2\\n5') == '9'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n2\n''') == '9'\n\"\"\"\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1\\n2') == '9'\nassert solution('3\\n1\\n2\\n3') == '6'\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline())",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"9\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '9'\nassert solution('3') == '6'\nassert solution('4') == '6'\nassert solution('5') == '10'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1 2\\n') == ''\nassert solution('1 2 3\\n') == ''\nassert solution('1 2 3 4\\n') == ''\n",
        "num_ids_2": 18,
        "num_ids_4": 41
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 6') == 10\n\n----\n>>> s = '3 4 6'\n>>> print(f'{s = }')\ns = '3 4 6'\n>>> a = list(map(int, s.split()))\n>>> print(f'{a = }')\na = [3, 4, 6]\n>>> print(f'{max(a) = }')\nmax(a) = 6\n>>> print(f'{(11 % 3) + (11 % 4) + (11 % 6) = }')\n(11 % 3) + (11 % 4) + (11 % 6) = 10\n\n'''",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 6\") == \"10\"\n\n\"\"\"\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n3 4\\n5 6\") == \"10\"\n\"\"\"",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 6\") == 10\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 6\") == \"10\"\n\"\"\"\nimport sys\nimport numpy as np",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n3 4 6\") == \"10\"\n\"\"\"\n\nimport sys\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 4 5') == '11', \"Wrong solution\"\n\"\"\"",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '3\\n3 4 6'\n) == '10'\n",
        "num_ids_2": 4,
        "num_ids_4": 4
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 6\") == 10\n\"\"\"",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n3 3\\n1 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\n\"\"\"\n\nimport sys\n\ndata = sys.stdin.read().split(\"\\n\")\n\nN = int(data[0])\nD = list(map(int, data[1].split(\" \")))\n\ncount = 0\nfor i in range(N - 2):\n    if D[i] == D[i + 1] == D[i + 2]:\n        count += 1\n\nprint(\"Yes\" if count >= 3 else \"No\")\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\n\nfrom collections import deque\n\nN = int(input())\n\nqueue = deque()\n\nfor i in range(N):\n    queue.append(tuple(map(int, input().split())))\n\nresult = False\n\nwhile len(queue) > 1:\n    next_queue = deque()\n    while len(queue) > 0:\n        a, b = queue.popleft()\n        if a == b:\n            if len(queue) > 0 and a == queue[0][0] and b == queue[0][1]:\n                result = True\n            else:\n                next_queue.append((a, b))\n        else:\n            next_queue.append((a, b))\n    queue = next_queue"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\nassert solution(\"1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n3 4\\n3 2\\n3 4\") == \"No\"\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n4\n1 1\n1 1\n1 1\n1 1\n\"\"\") == \"No\"\nassert solution(\n\"\"\"\n4\n1 1\n2 2\n2 2\n2 2\n\"\"\") == \"Yes\"\nassert solution(\n\"\"\"\n5\n1 1\n1 1\n1 1\n2 2\n2 2\n\"\"\") == \"Yes\"\nassert solution(\n\"\"\"\n5\n1 1\n2 1\n3 1\n3 2\n4 4\n\"\"\") == \"No\"\nassert solution(\n\"\"\"\n1\n1\n1\n1\n1\n\"\"\") == \"Yes\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n\") == \"4\"\n\"\"\"\nimport math\n\nr = input()\n\nradius_1 = 1\narea_1 = math.pi * radius_1 ** 2\n\narea_2 = math.pi * (r ** 2)"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '4'\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"100\") == \"10\"\nassert solution(\"50\") == \"9\"\nassert solution(\"0\") == \"0\"\nassert solution(\"-1\") == \"0\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3) == 1\nassert solution(4) == 0\nassert solution(4.0) == 0\nassert solution(6.0) == 0\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(2) == 4\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"7\") == \"2\"\nassert solution(\"22\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == '4'\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"6\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"8\"\n\"\"\"\n\nr = int(input())\nprint(r ** 2 * 3.141592 / (3.141592 ** 2))\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 5 1') == 'Yes'\nassert solution('5 5 1 5') == 'No'\nassert solution('10 10 10 10 10') == 'No'\nassert solution('3 7 7 2') == 'Yes'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 5 1') == 'Yes'\nassert solution('4 3 8 5 1') == 'No'\n\"\"\"\n\nimport sys\n\nfrom typing import List, Set\nfrom functools import partial\nfrom math import gcd\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 8 5 1\") == \"Yes\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 3 1\\n\") == \"Yes\"\nassert solution(\"4\\n3 8 5 1\\n\") == \"Yes\"\nassert solution(\"4\\n3 8 5 10\\n\") == \"No\"\nassert solution(\"4\\n3 8 6 1\\n\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\nassert solution('4\\n3 6 5 2') == 'No'\nassert solution('4\\n3 8 5 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 8 5 1\") == \"Yes\"\n\n'''"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8 5 1\") == \"Yes\"\n\n'''\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\nL = list(map(int, sys.stdin.readline().strip().split()))"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8 5 1\") == \"Yes\"\n\"\"\"\n\nfrom math import sqrt\nimport sys\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\"\"\"\n\n\"\"\"\n====SOLUTION====\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1\\n1 7\\n2 3\\n5 9') == '702'\nassert solution('4 1\\n1 0\\n2 0\\n5 9') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == '-1'\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\nassert solution('4 3\\n1 6\\n3 2\\n1 6') == '-1'\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\nassert solution('2 3\\n1 7\\n3 2') == -1\nassert solution('1 2\\n2 3') == -1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        # TODO: implement solution\n        pass\n\n\nclass TestSolution(unittest.TestCase):\n    \n    def test_example_1(self):\n        assert Solution().solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2') == '9'\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n3 2\") == \"5\\n\"\nassert solution(\"2 4\\n3 2\") == \"0\\n\"\nassert solution(\"10 15\\n3 2\") == \"15\\n\"\n\"\"\"\nfrom math import gcd\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n') == 9\n\"\"\"\n\nN, K = input().split()\nK = int(K)\nK = K-1\ncount = 0\n\nfor i in range(1,int(N)+1):\n    for j in range(i,int(N)+1):\n        if i+j < int(N)+1:\n            if i%K == 0 and j%K == 0:\n                count += 1\n\nprint(count)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1') == 1\nassert solution('1 3') == 2\nassert solution('3 2') == 9\n\"\"\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"9\"\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3,2) == 9\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2') == 9\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2') == '9'\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == 9\n\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n') == 9\nassert solution('10 10\\n') == 55\nassert solution('10 1\\n') == 25\nassert solution('10 2\\n') == 30\nassert solution('10 3\\n') == 32\n\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"-9\") == \"1011\"\n\n---\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('-9') == '1011'\nassert solution('-1') == '1101'\nassert solution('0') == '1100'\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('-9') == '1011'\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('-9') == '1011'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '10'\nassert solution('3') == '11'\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('-9') == '1011'\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 9\\n2 4') == '12'\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 9\\n2 4\\n\") == \"12\"\nassert solution(\"3 4\\n2 3\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 9\\n2 4\") == \"12\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5\\n4 9\\n2 4\\n') == '12'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 4\\n2 3') == '2'\nassert solution('3 2\\n4 9\\n2 3') == '6'\n\n\"\"\"\n\nimport sys\n\nn, m = [int(x) for x in sys.stdin.readline().rstrip().split()]\n\ns = 0\nr = 0\n\nfor _ in range(n):\n    a, b = [int(x) for x in sys.stdin.readline().rstrip().split()]\n    s += a\n    r += b\n    r = min(r, m)\n\nprint(s if r <= m else m)\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 9\\n2 4\") == \"12\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5\\n4 9\\n2 4') == '12'\n\"\"\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 5\n4 9\n2 4''') == '12'\n\n'''\n    def solution(stdin):\n    pass\n'''"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\\n\") == \"12\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n3 2\\n1 1\") == \"7\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import inf\n\nn, m = map(int, input().split())\na, b = map(int, input().split())\nstore = {}\nmoney = defaultdict(lambda: inf)\n\nfor i in range(n):\n    store[i] = list(map(int, input().split()))\n\nmoney[a] = 0\n\nfor i in range(n):\n    _, amount = store[i]\n    for j in range(b):\n        amount_in_store = amount - (b - j) * amount // b\n        money[amount_in_store] = min(money[amount_in_store], money[amount] + amount_in_store)\n\nprint(money[m])\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\nprint(solution(\"5\\n10 4 8 7 3\"), 2)\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n10 4 8 7 3\\n\") == \"2\"\n\"\"\"\n\nn = int(input())\nseq = list(map(int, input().split()))\n\ncount = 0\nfor i in range(n - 1):\n    if seq[i + 1] >= seq[i]:\n        count += 1\nprint(count)\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n8 7 3\") == \"2\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n10 4 8 7 3\\n\") == 2\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n10 4 8 7 3\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4 8 7 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n10 4 8 7 3\\n') == '2'\n\"\"\"\n\nn = int(input())\nh = list(map(int, input().split()))\nm = 0\n\nfor i in range(n):\n    if h[i] > m:\n        m = h[i]\n    if i < n - 1 and m < h[i + 1]:\n        m = h[i + 1]\n\nprint(m)\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\\n\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\\n\") == \"2\"\n\"\"\"\n\nfrom sys import stdin\n\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\nd = {}\n\nfor ai in a:\n    d[ai] = d.get(ai, 0) + 1\n\nmin_ops = 0\n\nfor ai in d.keys():\n    min_ops += d[ai] // 2\n\nfor ai in d.keys():\n    min_ops -= min(d[ai] // 2, k - d[ai])\n\nprint(min_ops)\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 3 3 3\") == \"0\"\nassert solution(\"1 2 2 2 2\") == \"3\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"0\"\nassert solution(\"4 3\", \"4 1\") == \"1\"\n\nassert solution(\"4 1\", \"1 2 3 4\") == \"2\"\nassert solution(\"4 1\", \"1 2 3 4\", \"4 1\") == \"1\"\nassert solution(\"4 1\", \"1 2 3 4\", \"1 1\") == \"0\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\n\"\"\"\n\nimport sys\nfrom math import ceil"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\n\"\"\"\n\nfrom math import floor\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n1 2 3\") == 1\n\"\"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\\n\") == 1\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 2 3 3 3\") == \"0\"\n\n'''\n\nimport math\n\nfrom collections import Counter"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n\"\"\"\n\nn,k = map(int,input().split())\na = list(map(int,input().split()))\n\ncnt = 0\nfor i in a:\n    if i % 2!= 0:\n        cnt += 1"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 5\\n1 2 2 4 2 3') == '3'\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 2 3 3\\n\") == \"3\"\nassert solution(\"1 2 1 3 3\\n\") == \"4\"\nassert solution(\"1 1 1 1 1 1\\n\") == \"0\"\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\na = deque(a)\n\nindex = 0\nmoves = 0\nwhile a and k:\n    if a[0] == min(a):\n        moves += a.popleft() - index\n        index += 1\n    a.pop()\n    k -= 1\n\nprint(moves)\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 1 1 1 1') == '2'\n\nassert solution('3 2\\n1 1 3') == '3'\n\nassert solution('5 1\\n3 3 3 3 3') == '0'\n\nassert solution('8 4\\n3 4 1 4 1 4 3 4') == '4'\n\nassert solution('8 6\\n2 2 1 2 2 1 1') == '3'"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 1 2 1 1 3') == '4'\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n1 2 2 4 2 3') == '3'\nassert solution('6 5\\n1 2 2 4 2 3') == '4'\nassert solution('7 5\\n3 3 2 1 1 1 3') == '4'\n\"\"\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 5') == '3'\nassert solution('2 2') == '0'\nassert solution('3 2 1 1 1 3') == '4'\n\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n1 2 2 4 2 3\") == \"3\"\nassert solution(\"4 5\\n3 3 2 1 1 1 3\") == \"4\"\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 2 4 2 3\\n3 3 2 1 1 1 3\") == \"3\", \"Bad output\"\nassert solution(\"1 2 2 4 2 3\\n2 3 3 2 1 1 1 3\") == \"4\", \"Bad output\"\n\n\"\"\"\n\n\nimport unittest\nfrom typing import List, Set, Dict, Tuple, Optional, Callable, Iterator\nfrom math import inf\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 5\\n1 2 2 4 2 3\\n') == '3'\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(example_input) == example_output\n\nprint(solution(input()))\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == [10, 9, 1000, 42000000000000]\n\n'''\n\nimport math\nimport sys"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n\") == [10, 9, 1000, 42000000000000]"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n\") == '10\\n9\\n1000\\n42000000000000'\nprint('Passed')\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\""
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\""
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(100010)"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\nassert solution(\"3 3\\n1 2 3\") == 1\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 6\n3 4 5''') == '2'\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6\\n3 4 5\") == \"2\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"5\"\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n\"\"\"\n\nN, X = input().split()\nn = int(N)\nx = int(X)\n\npoints = []\n\nfor i in range(n):\n    x = input()\n    points.append(int(x))\n\ntotal = 0\n\nfor i in range(1, n + 1):\n    if i == 1:\n        if 0 <= points[0] <= x:\n            total += 1\n    else:\n        if (points[i - 2] + points[i - 1]) <= x:\n            total += 1\n\nprint(total)\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 6\n3 4 5''') == '2'\n\n-----------------------\n-----Test1-----\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 6\n3 4 5''') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 6\n3 4 5''') == '2'\nprint('Test succeeded')\n\n-----\n\nA ball will bounce along a number line, making N + 1 bounces. It will make the first bounce at coordinate D_1 = 0, and the i-th bounce (2 \\leq i \\leq N+1) at coordinate D_i = D_{i-1} + L_{i-1}.\n\nWrite a function to determine the number of times the ball will make a bounce.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq L_i \\leq 100\n - 1 \\leq X \\leq 10000\n - All values in input are integers.\n\n-----Input-----\nThe first line contains the number of test cases.\nEach test case will contain 3 lines.\nThe first line contains the number N, the second line contains N space-separated integers L_1, L_2,..., L_N, and the third line contains X.\n\n-----Output-----\nPrint the number of times the ball will make a bounce.\n\n-----Sample Input-----\n2\n4\n1 5 6\n0\n\n-----Sample Output-----\n3\n1\n\nThe ball makes 3 bounces, 1 bounce at the coordinates 0, 1, 2, 2 bounces at the coordinates 0, 1, 2, and 4, 1 bounce at the coordinates 0, and 1, 2, and 3, and 1 bounce at the coordinates 0 and 1, 2 and 3."
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 6\\n3 4 5') == '2'\n\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794\n795\n796\n797\n798\n799\n800\n801\n802\n803\n804\n805\n806\n807\n808\n809\n810\n811\n812\n813\n814\n815\n816\n817\n818\n819\n820\n821\n822\n823\n824\n825\n826\n827\n828\n829\n830\n831\n832\n833\n834\n835\n836\n837\n838\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 6\\n3 4 5') == '2'\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\") == \"2\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"hoge\\nenglish\\nhoge\\nenigma\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'No'\nassert solution('hoge') == 'No'\nassert solution('hoge\\nhoge') == 'No'\nassert solution('hoge\\negga') == 'Yes'\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma') == 'No'\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"hoge\\nenglish\\nhoge\\nenigma\") == \"Yes\"\nassert solution(\"hoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\n\n\"\"\"\n\u89e3\u8aac\n\u9577\u3055\u304c 1~10(\u542b\u3080)\u306e\u6587\u5b57\u5217\u304c\u4e0e\u3048\u3089\u308c\u308b\u306e\u3067\u3001W_i\u306e\u9577\u3055\u3084\u6700\u521d\u306e\u6587\u5b57\u304c\u540c\u3058\u3067\u3042\u308c\u3070\u3001\u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u5b9a\u3067\u304d\u308b\u3002\n\"\"\"\n\nN = int(input())\nans = \"Yes\"\nfor _ in range(N):\n    w = input()\n    if w == w[::-1]:\n        ans = \"No\"\nprint(ans)\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\n\n\"\"\"\nthis problem is a problem from \"ACM ICPC Asia Regionals and World Finals\".\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\nassert solution(\"4\\nenigma\\nhoge\\nhoge\\nhoge\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n') == '6'\nassert solution('3 4\\n') == '8'\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"6\"\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"1 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '2 3'\n) == '6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"4 3\") == \"3\"\nassert solution(\"2 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n') == '6'"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3') == '6'\nassert solution('5 9') == '2'\n\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n') == 6\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n\") == \"6\"\nassert solution(\"2 4\\n\") == \"0\"\nassert solution(\"1 1\\n\") == \"0\"\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"4 1\") == \"3\"\nassert solution(\"4 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('sardine') == 'xxxxxxx'\nassert solution('momma') =='mmmxxx'\nassert solution('sssmmm') == 'xxxxxxx'"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\nassert solution(\"5\\n1 1 1 2 3\") == \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 1 3\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3 4\\n\") == \"Yes\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"No\"\nassert solution(\"4\\n1 1 1 1 1\\n\") == \"Yes\"\nassert solution(\"4\\n1 2 1 1\\n\") == \"No\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"Yes\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\nassert solution(\"5\\n3 3 3 3 3\") == \"No\"\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 1 3\") == \"Yes\"\nassert solution(\"5 1 4 3 2\") == \"No\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\nheight = list(map(int, sys.stdin.readline().strip().split()))\n\nstack = []\nprev = -1\nfor h in height:\n    if prev < h:\n        stack.append(h)\n    elif prev == h:\n        continue\n    else:\n        prev = h"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 2 1 1 3\n''') == 'Yes'\n\nassert solution('''\n5\n1 2 3 1 1\n''') == 'No'\n\nassert solution('''\n6\n1 2 3 3 2 2\n''') == 'Yes'\n\nassert solution('''\n4\n3 3 3 3\n''') == 'No'\n\nassert solution('''\n6\n3 3 2 1 1 2\n''') == 'Yes'"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1 1 3\") == \"Yes\"\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\narr = sorted(arr)\nwhile len(arr) > 0:\n    if arr[0] == arr[-1]:\n        arr.pop()\n    else:\n        break\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == 1\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\n\"\"\"\n\nn, m, c = map(int, stdin.readline().split())\nb = list(map(int, stdin.readline().split()))\na = []\nfor i in range(m):\n    a.append(list(map(int, stdin.readline().split())))\n\ncount = 0\nfor i in range(n):\n    sum = 0\n    for j in range(m):\n        sum += a[j][i] * b[j]\n    if sum + c > 0:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 3 -10\n1 2 3\n3 2 1\n1 2 2''') == '1'\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 1 0\\n1 1 2 2 2\\n1 1 2 2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\") == \"1\"\n\"\"\"\nfrom collections import deque\n\n\"\"\"\n    Step 1:\n        - Store every line into a list and remove the last character (newline)\n        - Iterate through every line\n        - Use split method to obtain every number into a list\n        - Store all numbers into a deque\n    Step 2:\n        - Iterate through every line\n        - Use split method to obtain every number into a list\n        - Calculate the sum of every list with the first value of the deque, and use if to test whether the sum is larger than 0\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1') == '1'\n\"\"\"\n\nimport sys\nimport numpy as np\n\nN, M, C = np.array(sys.stdin.readline().split(), dtype=int)\nB = np.array(sys.stdin.readline().split(), dtype=int)\nA = np.array([sys.stdin.readline().split() for i in range(N)], dtype=int)\n\nprint(np.sum(np.sum(A * B, axis=1) + C > 0))\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2 -10') == '1'\nassert solution('4 5 1') == '0'\n\n\"\"\"\n\nimport unittest\nimport sys\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100\") == \"100\"\nassert solution(\"1000\") == \"1000\"\nassert solution(\"10050\") == \"4900\"\nassert solution(\"100100\") == \"9900\"\nassert solution(\"10000\") == \"10000\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n') == '1\\n'\nassert solution('2\\n') == '0\\n'\nassert solution('10\\n') == '10\\n'\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1900') == 100\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline())\nchange = 1000 - N"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1900\") == \"100\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '1'\nassert solution('10000') == '0'\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 2\nassert solution(\"3\") == 3\nassert solution(\"4\") == 4\nassert solution(\"5\") == 5\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == 1\nassert solution(\"11\") == 2\nassert solution(\"12\") == 2\nassert solution(\"13\") == 3\nassert solution(\"14\") == 3\n\"\"\"\nimport math"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11') == '2'\nassert solution('10') == '1'\nassert solution('1') == '0'\nassert solution('0') == '0'\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 2\\n4 5\\n') == '9'\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 2\\\\n4 5\\\\n\") == 9\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n3 5 2\\n4 5') == 9\nprint(solution(input()))\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n5 2\\n4 5\\n') == '9'\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n3 5 2\\n4 5') == '9'\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 2\\n4 5\") == \"9\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\\n\") == \"9\"\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5 2\\n4 5') == '9'\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n3 5 2\\n4 5') == '9'\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22\\n') == 'No War'\n\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 2 10 20\n8 15 13''') == 'No War'\nassert solution('''3 2 10 20\n8 15 13\n16 22''') == 'War'\nassert solution('''4 2 10 20\n8 15 13\n16 22\n16 33''') == 'War'\nassert solution('''5 3 10 20\n8 15 13\n16 22\n16 33\n16 44\n16 55''') == 'War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 10 20\\n8 15 13\\n16 22\\n\") == \"No War\"\nassert solution(\"2 2 10 20\\n8 15 13\\n16 16\\n\") == \"War\"\n\"\"\"\n\nn, m, x, y = map(int, stdin.split())\n\nfor i in range(n):\n    for j in range(m):\n        if x <= int(stdin.split()[i]) <= y and int(stdin.split()[j]) < x:\n            print(\"War\")\n            exit()\nprint(\"No War\")\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"\n\nimport unittest\nimport sys"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'3 2 10 20\\n8 15 13\\n16 22\\n'\n) == 'No War\\n'\n\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22') == 'No War'\nassert solution('3 2 10 20\\n8 15 13\\n16 25') == 'War'\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"\n\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22') == 'No War'\n\"\"\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n3\\n6') == '6'\nassert solution('2\\n3\\n2\\n1\\n1\\n1') == '2'\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2\n2\n3\n\"\"\") == \"6\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\nassert solution(\"1\\n1\\n1\") == \"1\"\n\"\"\"\nfrom typing import Iterator\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n1\\n\") == \"0\"\nassert solution(\"2\\n5\\n1\\n\") == \"6\"\n\"\"\"\n\nN, *t = map(int, open(0).read().split())\nt = sorted(t)\n\ndiff = []\nfor i in range(len(t) - 1):\n    diff.append(t[i + 1] - t[i])\n\nprint(sum(diff) // N)\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n2\\n3') == '6'\nassert solution('1\\n2') == '3'\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\nassert solution(\"1\\n2\\n3\") == \"5\"\nassert solution(\"2\\n4\\n3\") == \"8\"\nassert solution(\"2\\n6\\n9\") == \"18\"\nassert solution(\"5\\n1\\n5\\n3\") == \"11\"\n\n\"\"\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n2\\n3') == '6'\nassert solution('2\\n1\\n3') == '5'\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def __init__(self):\n        pass\n    \n    def solution(self, stdin):\n        \"\"\"\n        Parameters:\n        ----------\n        stdin : str\n            Input from stdin.\n\n        Returns:\n        -------\n        str\n            Output from stdout.\n        \"\"\"\n        sys.stdin = open('inputs.txt', 'r')\n        sys.stdout = open('outputs.txt', 'w')\n        n = int(stdin.split('\\n')[0])\n        t = [int(i) for i in stdin.split('\\n')[1:]]\n        \n        def check(x):\n            count = 0\n            while count < n:\n                if x % 360 == 0:\n                    count += 1\n                x = x + t[count]\n            return x\n        \n        time = 0\n        for i in range(360):\n            time = check(time)\n        \n        return str(time)"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3\\n6\") == '6'\nprint('Success')"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\nassert solution(\"5\\n5\\n3\\n2\\n1\\n1\\n4\") == \"5\"\n\"\"\"\nimport os\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"5\n5\n3\n2\n1\n1\n4\"\"\"\n        output = \"\"\"5\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"2\n5\n3\n2\n1\n1\n4\"\"\"\n        output = \"\"\"5\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"3\n1\n5\n10\"\"\"\n        output = \"\"\"25\"\"\"\n        self."
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\":\\n2\\n3\\n\") == \"6\"\nassert solution(\":\\n3\\n3\\n\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 1') == 0\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1 2 4') == '1'\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3') == '0'\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == 0\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n') == '0'\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2 3''') == '0'\n\nassert solution('''2\n1 2\n''') == '0'\n\nassert solution('''3\n1 2 3''') == '0'\n\nassert solution('''3\n1 2 3''') == '0'\n\nassert solution('''5\n1 2 3 4 5''') == '1'"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 2 3\") == '0'\nassert solution(\"3\\n1 2 3\") == '0'\n\"\"\"\nimport sys"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3') == '0'\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\nfrom typing import List, Set, Union\n\n\nclass N:\n    \"\"\"\n    N class.\n    \"\"\"\n\n    def __init__(self, input_str: str):\n        \"\"\"\n        Initialize an N class.\n        :param input_str: input string\n        \"\"\"\n        assert isinstance(input_str, str), \"Input must be string.\"\n        self.input_str = input_str\n        self.input_nums: List[int] = list(map(int, input_str.split()))\n        self.divisors: Set[int] = self.get_divisors()\n        self.min_dif: int = math.inf\n        self.t: int = 0\n\n    def get_divisors(self) -> Set[int]:\n        \"\"\"\n        Get divisors of N.\n        :return: divisors of N\n        \"\"\"\n        return set(d for i in range(1, self.input_nums[0] + 1)\n                   if self.input_nums[0] % i == 0 for d in self.get_divisors_helper(i) if self.input_nums[0] > d)\n\n    def get_divisors_helper(self, n: int) -> List[int]:\n        \"\"\"\n        Get divisors of N.\n        :param n: divisor\n        :return: divisors of N\n        \"\"\"\n        return [i for i in range(n + 1, self.input_nums[0] // n + 1)\n                   if self.input_nums[0] % i == 0] if self.input_nums[0] > n else []\n\n    def solution(self) -> None:\n        \"\"\"\n        Find the minimum possible absolute difference of S_1 and S_2.\n        :return: None\n        \"\"\"\n        for i in range(2, self.input_nums[0]):\n            if self.input_nums[0] in self.divisors:\n                self.divisors.remove(self.input_nums[0])\n                self.t = i\n                if i in self.divisors:\n                    self.divisors.remove(i)\n                    break\n                self.divisors = self.get_divisors()\n            if self.input_nums[0] in self.divisors:\n                break\n            else:\n                self.divisors = self.get_divisors()\n        self.min_dif = abs(sum(self.input_nums) - self.t * sum(self.input_nums[:self.t]))\n\n    def get_result(self) -> str:\n        \"\"\"\n        Get results.\n        :return: the minimum possible absolute difference of S_1 and S_2\n        \"\"\"\n        return str(self.min_dif)\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n3 2 1\\n1 2 3\\n4 5 6') == '6'\nassert solution('4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '2'"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\n\"\"\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n1 2 3\\n4 5 6\\n') == '6'\nassert solution('4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n') == '2'\nassert solution('3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n') == '0'\nassert solution('2 2\\n1 2\\n') == '1'\nassert solution('5 6\\n1 2 3 4 5\\n6 7 8 9 10\\n11 12 13 14 15\\n16 17 18 19 20\\n21 22 23 24 25\\n') == '10'\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == 6\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == 2\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == 0\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == 2\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3, 3, [3, 2, 1], [1, 2, 3]) == 6\nassert solution(4, 3, [1, 6, 3, 4], [5, 10, 7, 8], [9, 2, 11, 12]) == 2\nassert solution(3, 4, [1, 6, 3, 4], [5, 10, 7, 8], [9, 2, 11, 12]) == 0\nassert solution(4, 4, [1, 6, 3, 4], [5, 10, 7, 8], [9, 2, 11, 12]) == 2\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n5 10 2 3 14 5') == '5'\nassert solution('2\\n1 100') == '99'\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 10 2 3 14 5') == '5'\nassert solution('1 100') == '99'"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\nassert solution(\"7\\n1 1 1 1 1 1\") == \"1\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"1\"\nassert solution(\"3\\n1 100\") == \"100\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 10 2 3 14 5\") == \"5\"\nassert solution(\"1 100\") == \"99\"\n\"\"\"\nfrom itertools import combinations"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 100\\n\") == \"99\"\nprint(solution(open(\"input.txt\", \"r\").read()))\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == '5'\nassert solution(\"2\\n1 100\") == '99'\nassert solution(\"1\\n2\") == '2'\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10 2 3 14 5\") == \"5\"\nassert solution(\"1 100\") == \"99\"\nassert solution(\"2 1000 1 10\") == \"1000\"\nassert solution(\"2 10 1 10\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10 7 3 4 15 1\") == \"8\"\nassert solution(\"6 10 6 7 7 2 4\") == \"7\"\nassert solution(\"2 10 1 7 7\") == \"14\"\nassert solution(\"1 10 7 7\") == \"14\"\nassert solution(\"1 10\") == \"10\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\nans = n//2\n\nb = sorted(a)\n\nfor i in range(n//2):\n    if i < ans:\n        if b[i] < b[n-1-i]:\n            ans -= 1\n\nprint(ans)\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 0 1 0 1\\n') == '2'\nassert solution('6\\n0 1 0 1 1 0\\n') == '2'\nassert solution('7\\n1 0 1 1 1 0 1\\n') == '3'\nassert solution('3\\n0 0 0\\n') == '0'\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 0 1 0 1\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\""
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n0 0 0 1 0\") == \"2\"\nassert solution(\"6\\n0 0 1 0 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 0 1 0 1') == '2'\nassert solution('6\\n0 1 0 1 1 0') == '2'\nassert solution('7\\n1 0 1 1 1 0 1') == '3'\nassert solution('3\\n0 0 0') == '0'\n\nimport os, sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_sample_1(self):\n        self."
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == '2'\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == '2'\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == '3'\nassert solution(\"3\\n0 0 0\\n\") == '0'\nassert solution(\"1\\n0\\n\") == '0'\n\nimport numpy as np"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n\nimport re\nre.findall(\"^(.*?)\\n\", stdin, re.MULTILINE)"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 0 1 0 1\\n') == '2'\nassert solution('6\\n0 1 0 1 1 0\\n') == '2'\nassert solution('7\\n1 0 1 1 1 0 1\\n') == '3'\nassert solution('3\\n0 0 0\\n') == '0'\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\nmax_length = 0\ncurrent_length = 0\nrest_time = 0\n\nfor i in range(n):\n    if a[i] == 0:\n        rest_time = i\n    else:\n        max_length = max(max_length, current_length)\n        current_length = i - rest_time\n\nmax_length = max(max_length, current_length)\n\nprint(max_length)\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 0 1 0 1\\n') == '2'\nassert solution('6\\n0 1 0 1 1 0\\n') == '2'\nassert solution('7\\n1 0 1 1 1 0 1\\n') == '3'\nassert solution('3\\n0 0 0\\n') == '0'\n\n------Hint-----\n\nThe $i$-th hour is resting if $a_i=1$ and working if $a_i=0$.\n\nYou need to return the maximum number of continuous hours during which Polycarp rests.\n\nTry to use the same logic that you used in the solution to the previous problem:\ngiven the sequence $a_1, a_2, \\dots, a_n$, determine which hour will be resting and which will be working.\n\nWhat if you have a sequence $a_1, a_2, \\dots, a_n$, where there are exactly two different values in $a_1, a_2, \\dots, a_n$?\n\nTo solve this problem, use the fact that $a_1, a_2, \\dots, a_n$ must be either all 0 or all 1.\n\nFor example, if $a_1=1$, then all values in $a_2, a_3, \\dots, a_n$ must be 0, otherwise, if $a_1=0$, all values in $a_2, a_3, \\dots, a_n$ must be 1.\n\nFind the length of the longest such sequence.\n\nNote that the sequence is endless.\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 0 1 0 1') == '2'\nassert solution('6\\n0 1 0 1 1 0') == '2'\nassert solution('7\\n1 0 1 1 1 0 1') == '3'\nassert solution('3\\n0 0 0') == '0'"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 0 1 0 1\\n') == '2'\nassert solution('6\\n0 1 0 1 1 0\\n') == '2'\nassert solution('7\\n1 0 1 1 1 0 1\\n') == '3'\nassert solution('3\\n0 0 0\\n') == '0'\n\n\"\"\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\n\nassert solution(\"4\") == \"0\"\n\nassert solution(\"16\") == \"0\"\n\nassert solution(\"2\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 1\nassert solution('7') == 0\n\"\"\"\n\nn = input()\nprint(n)\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\") == \"0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7') == '0'\n\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\") == \"0\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == 1\n\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"7\") == \"0\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\") == 0\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\") == \"0\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''9\nbrie soft\ncamembert soft\nfeta soft\ngoat soft\nmuenster soft\nasiago hard\ncheddar hard\ngouda hard\nswiss hard''') == 3\nassert solution('''6\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard''') == 4\n\"\"\"\nimport sys"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == \"3\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n brie soft\\n camembert soft\\n feta soft\\n goat soft\\n muenster soft\\n asiago hard\\n cheddar hard\\n gouda hard\\n swiss hard\\n\") == \"3\"\nassert solution(\"6\\n parmesan hard\\n emmental hard\\n edam hard\\n colby hard\\n gruyere hard\\n asiago hard\\n\") == \"4\"\n\n[End of File]\"\"\"\n\nimport collections"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == \"3\"\nassert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == 3\nassert solution(\"parmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == 4\n\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == '3'\nassert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == '4'\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == \"3\"\nassert solution(\"parmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == \"3\"\nassert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == \"4\"\nassert solution(\"4\\nparmesan hard\\nemmental hard\\ncedar hard\\ngouda hard\") == \"2\"\nassert solution(\"6\\nparmesan hard\\nemmental hard\\ncedar hard\\ngouda hard\") == \"2\"\nassert solution(\"5\\nparmesan hard\\nemmental hard\\ngouda hard\\ncheddar hard\\nswiss hard\") == \"2\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_0) == \"0\"\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == 3\nassert solution(\"parmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n\") == 4\n\"\"\""
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\nassert solution('7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1') == '0 0 0 1 0 2 4'\n\"\"\"\nimport sys\nimport heapq"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2 1\") == \"1 0 0 2\"\n\"\"\"\n\nimport itertools\nimport sys\n\nfrom typing import Dict, List, Tuple\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == '1 0 0 2'\n\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == '0 0 0 1 0 2 4'"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\n\nprint(solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\"))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\nassert solution('7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1') == '0 0 0 1 0 2 4'\n\n\"\"\""
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\nassert solution('7\\n2 5 1 5 3 4 3') == '0 0 0 1 0 2 4'"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a, b) == c\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2 1\") == \"1 0 0 2\"\nassert solution(\"7 2 1 5 3 4 3\") == \"0 0 0 1 0 2 4\""
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 1 3\\n2 3 1 1\") == '1 0 0 2'\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1101\") == \"1\"\n\nassert solution(\"1110\") == \"1\"\n\nassert solution(\"1111\") == \"1\"\n\nassert solution(\"1101\") == \"0\"\n\nassert solution(\"1111\") == \"0\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('110110') == '1'\nassert solution('011010') == '0'\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"010111\") == \"0\"\nassert solution(\"011011\") == \"0\"\nassert solution(\"011010\") == \"1\"\nassert solution(\"111011\") == \"1\"\nassert solution(\"111010\") == \"0\"\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0111\") == 0\nassert solution(\"0110\") == 0\nassert solution(\"1000\") == 1\nassert solution(\"1001\") == 1\nassert solution(\"0111100\") == 1\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(0) == \"1\"\nassert solution(1) == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"011011\") == \"0\"\nassert solution(\"111011\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"011110\") == \"0\"\nassert solution(\"101110\") == \"1\"\nassert solution(\"111011\") == \"1\"\nassert solution(\"111110\") == \"1\"\nassert solution(\"111111\") == \"0\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 1 0\") == \"0\"\n----------------\nInput\n1\n1\n0\n\nOutput\n1\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101010') == '0'\nassert solution('0101010') == '1'\nassert solution('1101010') == '0'\nassert solution('1101011') == '1'\nassert solution('1111110') == '0'\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1010101\") == \"1\"\nassert solution(\"11100010\") == \"0\"\nassert solution(\"1111111111111111\") == \"0\"\nassert solution(\"10111011110111010\") == \"1\"\nassert solution
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 15 80') == 'Yes'\nassert solution('5000 4 200') == 'Yes'\nassert solution('3005 10 100') == 'No'\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000 15 80') == 'Yes'\nassert solution('2000 15 50') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 15 80\") == 'Yes'\nassert solution(\"100 2 100\") == 'No'\nassert solution(\"1000 15 80\") == 'Yes'\nassert solution(\"1000 15 80\") == 'Yes'\nassert solution(\"1000 15 80\") == 'Yes'\n\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u0435\u0448 \"\\\".\n\nSample Input:\n\n\\hello\\world\\n\\n\\n\\n\\n\\n\\nwelcome\n\nSample Output:\n\n\\hello\\world\n\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"1000 15 80\n\"\"\"\n) == \"Yes\"\n\nassert solution(\n\"\"\"1000 15 60\n\"\"\"\n) == \"No\"\n\nassert solution(\n\"\"\"10000 15 100\n\"\"\"\n) == \"No\"\n\nassert solution(\n\"\"\"10000 15 50\n\"\"\"\n) == \"Yes\"\n\nassert solution(\n\"\"\"10000 15 100\n\"\"\"\n) == \"Yes\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"10 2000 3\") == \"No\"\nassert solution(\"5000 10000 4\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\nfrom math import ceil\n\nD, T, S = [int(x) for x in stdin.split()]\nans = ceil((D / S) * 60)\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'No'\nassert solution('\\n') == 'No'\nassert solution('\\n\\n') == 'No'\nassert solution('\\n\\n\\n') == 'Yes'\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n') == 'Yes'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\n\"\"\"\nimport sys"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\nimport sys\nfrom itertools import chain, combinations, permutations\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\n\"\"\"\nfrom typing import List\nimport numpy as np\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\n\"\"\"\nimport collections"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(sample_input) == \"Yes\"\n'''\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 2 3 4\\n2 3 1 2') == '-1'\nassert solution('10 10\\n1 2 3 4 5 6 7 8 9 10') == '20'\nassert solution('6 2\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == '10'\n\"\"\"\n\nn, m = [int(i) for i in input().split()]\np = [int(i) for i in input().split()]\nq = [int(i) for i in input().split()]\n\nans = 0\nfor i in range(1, m + 1):\n    if q[i - 1] >= p[i - 1]:\n        ans += 1\n    else:\n        break\n\nprint(ans)\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n2 3 1\\n3 2 3') == '6'\nassert solution('3 3\\n2 3 1\\n3 2 3') == '-1'\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('41 2\\n5 6\\n') == '30'\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\narr = list(map(int, sys.stdin.readline().split()))\narr = list(filter(lambda x: x <= m, arr))"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"41 2\\n5 6\") == 30\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n\") == \"3\"\n\"\"\"\n\nn, m = map(int, input().split())\nA = list(map(int, input().split()))\n\nt = 0\nfor i in range(n):\n    if A[i] <= t:\n        continue\n    t = max(t, A[i])\n\nprint(t) if t > 0 else print(-1)\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 2 3 4 5\") == 30\n\"\"\"\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nprint(sum([min(a, N) for a in A]))"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2\\n3 4\") == \"1\"\nassert solution(\"4 2\\n5 6\") == \"1\"\nassert solution(\"5 2\\n1 2\\n3 4\") == \"1\"\nassert solution(\"4 2\\n5 6\\n10 11\") == \"1\"\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().strip().split(' '))\nassignments = list(map(int, sys.stdin.readline().strip().split(' ')))\n\nsorted_assignments = sorted(assignments)\nsorted_assignments.reverse()\n\nfor i in sorted_assignments:\n    m -= i\n    if m < 0:\n        break"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 2\\n') == '4'\nassert solution('1 4\\n') == '2'\nassert solution('2 2\\n') == '1'\nassert solution('3 3\\n') == '1'\nassert solution('0 5\\n') == '5'\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 5\\n') == '5'\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 2\\n\") == \"1\"\nassert solution(\"0 1\\n\") == \"2\"\nassert solution(\"0 0\\n\") == \"1\"\nassert solution(\"1 1\\n\") == \"2\"\nassert solution(\"2 1\\n\") == \"3\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 5\") == \"5\"\nassert solution(\"1 10\") == \"4\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"2 20\") == \"13\"\nassert solution(\"2 20\") == \"13\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 5\\n') == '5'\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 5\") == \"5\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"4 2\") == \"1\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''0 5\n''') == '5'\n\nassert solution('''0 0\n''') == '1'\n\nassert solution('''1 2\n''') == '2'\n\nassert solution('''0 1\n''') == '1'\n\nassert solution('''0 2\n''') == '1'"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 5\") == \"5\"\nassert solution(\"1 10\") == \"10\"\nassert solution(\"2 10\") == \"5\"\nassert solution(\"1 100\") == \"5\"\nassert solution(\"2 100\") == \"10\"\n\"\"\"\n\n\"\"\"\nIt is known that, for any integer N, we can write N as a2 + b2 for integers a, b such that a, b, a^2 + b^2, and b^2 are all positive integers.\n\nFor example, 6 = 1^2 + 2^2 = 9, and 9 = 3^2 + 4^2 = 169.\n\nIt turns out that only 9 and 169 are not absurd numbers, as they are divisible by 3 and 7, respectively.\n\nThe incredible thing is that you can go further and argue that all integers greater than 169 are absurd numbers!\n\nFind the largest integer N such that N is not absurd.\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 8') == '2'\nassert solution('7 6 8') == '2'\nassert solution('7 6 8') == '2'\nassert solution('7 6 8') == '2'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 6 8\") == 2\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 6 8\") == 2\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n7 6 8\") == \"2\"\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n7 6 8\") == \"2\"\nassert solution(\"2\\n7 6\") == \"1\"\nassert solution(\"1\\n7 6\") == \"1\"\nassert solution(\"4\\n7 6 8\") == \"2\"\nassert solution(\"1\\n7 8\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 6 8\") == 2\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 7 6\") == 2\nassert solution(\"5 3 2\") == 1\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read().splitlines()\n\nn = int(stdin[0])\na = list(map(int, stdin[1].split()))"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 1\\n\") == \"1\"\nassert solution(\"3\\n1 2 3\\n\") == \"1\"\nassert solution(\"3\\n1 2 8\\n\") == \"2\"\nassert solution(\"3\\n1 2 3\\n\") == \"2\"\n\"\"\"\nfrom functools import reduce\n\nn = int(input())\nnums = list(map(int, input().split()))\nmin_n = min(nums)\nmax_n = max(nums)"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n    5\n    1 2 3 4 5\n    \"\"\"\n    ) == '1'\nassert solution(\n    \"\"\"\n    6\n    2 3 4 5 6 7\n    \"\"\"\n    ) == '2'\nassert solution(\n    \"\"\"\n    5\n    1 1 1 1 1\n    \"\"\"\n    ) == '1'\nassert solution(\n    \"\"\"\n    6\n    5 7 8 9 6 7\n    \"\"\"\n    ) == '6'\n\n\"\"\"\nimport math\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 1\") == \"3 1 2\"\nprint('Passed')\n\nassert solution(\"4 3 5 7 4 2 6 1 5\") == \"4 3 2 1 6 5 7 5 4 3\"\nprint('Passed')\n\nassert solution(\"5 4 3 2 1 6 7 8\") == \"5 4 3 2 1 6 7 8\"\nprint('Passed')\n\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"1 2 3 4 5 6 7 8 9 10\"\nprint('Passed')\n\nassert solution(\"10 6 4 3 7 2 1 8 5 9\") == \"10 6 4 3 7 2 1 8 5 9\"\nprint('Passed')"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 1\") == \"3 1 2\"\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 1\") == \"3 1 2\"\n\"\"\"\n\nfrom typing import List, Set"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n-----Explanation-----\nThere are 3 students in the class.\n\nStudent 1 entered the classroom after student 2 entered the classroom.\nStudent 2 entered the classroom after student 3 entered the classroom.\nStudent 3 entered the classroom after student 1 entered the classroom.\nTherefore, the correct order of the students in the class is 3 1 2.\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\nassert solution(\"5\\n2 3 4 1 5\") == \"3 4 1 5 2\"\nassert solution(\"5\\n5 4 3 2 1\") == \"1 2 3 4 5\"\nassert solution(\"5\\n3 4 1 2 5\") == \"3 4 1 2 5\"\n\n-----Sample Output-----\n3 1 2\n4 3 1 2\n5 4 3 1 2\n3 4 1 2 5\n4 5 3 1 2 3\n5 3 4 1 2 3\n4 3 5 1 2 3 4\n5 4 3 2 1 3 4\n3 5 1 2 3 4 5\n4 5 2 3 1 3 4 5\n5 3 4 2 1 3 4 5\n3 4 2 5 1 3 4 5\n4 3 5 2 1 3 4 5\n5 3 4 2 5 1 3 4 5\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2 3 1') == '3 1 2'\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2 3 1') == '3 1 2'\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '3\\n'\n    '2 3 1'\n) == '3 1 2'"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 1') == '3 1 2'\n\"\"\"\n\nfrom sys import stdin\n\nnum_students = int(stdin.readline())"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 7 100\") == '9'\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\"\n\nA, B, X = [int(i) for i in stdin.split()]"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 7 100') == '9'\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 7 100') == '9'\n\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"100 300 10000\") == \"0\"\nassert solution(\"1 1 1000000000\") == \"1\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\nprint(\"Passed\")\n\n\"\"\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 150\\n150 140 100 200') == 2\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"4 150\\n150 140 100 200\"\n) == \"2\"\nassert solution(\n    \"2 1\\n1 0\"\n) == \"1\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 150\n150 140 100 200''') == '2'\nprint('Test passed')"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 150\\n150 140 100 200') == 2\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\nassert solution('1 1\\n1') == '1'\nassert solution('2 5\\n3 7') == '0'\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 150\\n150 140 100 200') == 2"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\"\n\n\n\n\"\"\"\nStudents are asked to stand in non-decreasing order of heights for an annual photo.\n\nReturn the minimum number of students that must move in order for all students to be standing in non-decreasing order of height.\n\nNotice that when a group of students is selected they can reorder in any possible way between themselves and the non selected students remain on their seats.\n\n \n\nExample 1:\n\nInput: heights = [1,1,4,2,1,3]\nOutput: 3\nExplanation: \nCurrent array : [1,1,4,2,1,3]\nTarget array  : [1,1,1,2,3,4]\nOn index 2 (0-based) we have 4 vs 1 so we have to move this student.\nOn index 4 (0-based) we have 1 vs 3 so we have to move this student.\nOn index 5 (0-based) we have 3 vs 4 so we have to move this student.\nExample 2:\n\nInput: heights = [5,1,2,3,4]\nOutput: 5\nExample 3:\n\nInput: heights = [1,2,3,4,5]\nOutput: 0\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"4\\n1 2 5 4\") == \"No\"\nassert solution(\"4\\n1 2 1 2\") == \"No\"\n\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\nYou have access to a database with the following tables:\nTable item with columns item_id (primary key, auto-increment), name, price.\nTable sell with columns item_id, warehouse_id, sell_date, sell_price.\nTable warehouse with columns warehouse_id (primary key, auto-increment), city, warehouse_type.\nYour task is to implement the function count_sales, which returns the number of items in each warehouse that are on sale today, and is presented as a map:\n\n{\n    WarehouseType1: {\n        city1: {\n            item1: sales1,\n            item2: sales2,\n           .\n           .\n           .\n        },\n        city2: {\n            item1: sales1,\n            item2: sales2,\n           .\n           .\n           .\n        }\n    }\n   .\n   .\n   .\n}\n\nIn each cell of the map, itemN is a string representing the name of the item, and warehouseN is a string representing the type of the warehouse. warehouseN, cityN and itemN are in lowercase. warehouseType is one of the strings \"wh1\", \"wh2\" and \"wh3\".\n\nReturn the result as a list of pairs (warehouse_id, number_of_items_on_sale) in ascending order of the number_of_items_on_sale.\n\n-----\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\nimport heapq"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\nassert solution(\"4 2\\n1 1 2 2\") == \"No\"\n\nassert solution(\"5 4\\n1 2 5 4 2\") == \"Yes\"\nassert solution(\"5 3\\n1 1 2 2 5\") == \"No\"\n\nassert solution(\"8 2\\n1 1 1 1 1 1 1 1\") == \"Yes\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 1\n5 4 2 1''') == 'Yes'\nassert solution('''4 2\n5 4 2 1''') == 'No'\nassert solution('''5 2\n5 5 5 5 5''') == 'Yes'\nassert solution('''5 2\n5 5 5 5 5''') == 'No'\nassert solution('''5 3\n5 5 5 5 5''') == 'No'\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 2 3 4 5\\n\") == \"Yes\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\nassert solution(\"2 1\\n2 1\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"\nassert solution(\"3 3 3\\n...\\n#.#\\n#.#\\n\") == \"1\"\nassert solution(\"3 3 3\\n...\\n...\\n#.#\\n#.#\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n\nimport sys"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 2\\n..#\\n###') == '5'\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"\n\"\"\"\n\nfrom math import comb\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"\nassert solution(\"1 1 1\\n\") == \"1\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\nprint(\"PASSED\")\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == 5\n\"\"\"\n\n\nimport numpy as np"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2020 2040\") == 2\n\"\"\"\nimport sys"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a1) == e1\nassert solution(a2) == e2\n\n\"\"\"\n\n\"\"\"\nimport math\n\na1, a2 = map(int, stdin.split())\nprint(math.gcd(a1, a2))\n\"\"\"\nimport math\n\nL, R = map(int, input().split())\n\nprint(math.gcd(L, R))\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2020 2040') == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2020 2040') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(output())\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('20 20') == '2'\nassert solution('20 40') == '2'\nassert solution('7 20') == '5'\nassert solution('5 20') == '5'\nassert solution('3 20') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2020 2040') == '2'\n\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2020 2040') == '2'\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('abc') == 'WA'\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('AtCoder') == 'AC'\n\n\"\"\"\n\nimport unittest\nfrom collections import Counter\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    'AtCoder'\n) == 'AC'\nassert solution(\n    'Atcoder'\n) == 'WA'\nassert solution(\n    'acCoder'\n) == 'AC'\n\"\"\"\nimport unittest"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"Atcoder\") == \"WA\"\nassert solution(\"atCoder\") == \"AC\"\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('Atcoder') == 'WA'\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"AtCoder\") == \"AC\"\nassert solution(\"AtCoder\") == \"AC\"\nassert solution(\"AtCoder\") == \"AC\"\nassert solution(\"AtCoder\") == \"AC\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\n----\n\n\n\n\n'''"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('AtCoder') == 'AC'\nassert solution('AtCoder') == 'AC'\nassert solution('AtCoder') == 'AC'\nassert solution('AtCoder') == 'AC'\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AtCoder') == 'AC'\n\"\"\"\n\nimport sys\n\ninput_ = sys.stdin.readline()\nprint('AC' if input_.startswith('A') and input_.count('C') == 1 and input_.lower().replace('a', '').replace('c', '') == '' else 'WA')\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"Atcoder\") == \"WA\"\nassert solution(\"Aatcoder\") == \"WA\"\n\"\"\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1214\") == '2'\nassert solution
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1214) == '2'\nassert solution(2214444) == '4'\nassert solution(333333333222222221111111111111) == '9'\nassert solution(12345678910111213141516171819) == '9'\nassert solution(1214) == '2'\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1214') == '2'\nassert solution('1333224444') == '2'\nassert solution('133333333322224444444444444444') == '2'\n\"\"\"\nimport math"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1214') == '2'\nassert solution('1010') == '0'\nassert solution('9999') == '9'\nassert solution('111') == '1'\nassert solution('1111') == '1'"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1234\") == '4'\nassert solution(\"211212121\") == '5'\nassert solution(\"1234567890\") == '0'\nassert solution(\"12345678910\") == '1'\nassert solution(\"12345678910111213141516171819\") == '8'\n\"\"\"\n\nfrom typing import Iterator, Union, Generator, Dict, List, Optional, Tuple\nfrom decimal import Decimal, getcontext\nfrom itertools import chain"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"11111\") == \"1\"\nassert solution(\"8123\") == \"2\"\nassert solution(\"111111111\") == \"8\"\nassert solution(\"11111111111111111\") == \"0\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(1324) == \"2\"\nassert solution(1) == \"1\"\nassert solution(1214) == \"2\"\nassert solution(111) == \"1\"\nassert solution(222) == \"2\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1214') == '2'\n\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1214') == '2'\n\"\"\"\nfrom typing import List, Any\nimport math\nfrom itertools import repeat"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1214\") == \"2\"\n\"\"\"\n\nfrom collections import deque\nfrom typing import List\nfrom typing import Tuple\n\n\nclass Solution:\n    def __init__(self, string: str, k: int) -> None:\n        self._string = string\n        self._k = k\n\n    def solution(self) -> str:\n        if len(self._string) == 1:\n            return self._string\n\n        queue = deque()\n        queue.appendleft((1, 0))\n        i = 0\n\n        while len(queue) > 0:\n            digit, cur_idx = queue.pop()\n            if digit == 10 ** 15:\n                return self._string[i]\n            elif digit == 10 ** 14 and cur_idx == self._k - 1:\n                return self._string[i]\n\n            for next_digit in range(0, 10):\n                if digit * 10 + next_digit >= 10 ** 15:\n                    break\n                queue.appendleft((digit * 10 + next_digit, cur_idx))\n            i += 1\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3 4 1\") == 'YES'\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 3 4 1') == 'YES'\nassert solution('5\\n5 2 3 4 1') == 'NO'\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\np = list(map(int, sys.stdin.readline().split()))\nflag = False\nfor i in range(N - 1):\n    if p[i] > p[i+1]:\n        flag = True\n        break\nprint('YES' if flag else 'NO')\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\nassert solution('5 2 3 1 4') == 'NO'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '5 2 3 4 1'\n) == 'YES'\n\nassert solution(\n    '5 2 3 4 1'\n) == 'YES'\n\nassert solution(\n    '5 2 3 4 1'\n) == 'YES'\n\nassert solution(\n    '5 2 3 4 1'\n) == 'YES'\n\nassert solution(\n    '5 2 3 4 1'\n) == 'YES'"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n5 2 3 4 1''') == 'YES'\n\nassert solution('''3\n3 1 2''') == 'NO'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4') == 'YES'\nassert solution('4\\n5 2 3 4') == 'NO'\nassert solution('5\\n5 2 3 4 1') == 'YES'\nassert solution('7\\n7 5 3 4 1 2') == 'YES'\nassert solution('8\\n8 7 5 3 4 1 2') == 'NO'\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n5 2 3 4 1') == 'YES'\nassert solution('4\\n4 1 3 2') == 'NO'\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 3 4 1') == \"YES\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\"\n\nfrom collections import deque\n\nn = int(input().strip())\narr = deque([int(item) for item in input().split()])\nwhile len(arr) > 1:\n    if arr[0] > arr[1]:\n        arr.popleft()\n        arr.append(arr.popleft())\n    else:\n        break\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3121') == 2\nassert solution('6') == 1\nassert solution('201920181') == 4\n\"\"\""
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"1000000000000000000000000000000000\") == 33\n\"\"\"\n\nfrom typing import Dict\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\"\n\"\"\"\nfrom typing import List, Tuple\n\nimport pytest\n\nfrom solutions.num_20 import solution\n\n\n@pytest.mark.parametrize(\n    (\"inp\", \"exp\"),\n    [\n        (\"3121\", \"2\"),\n        (\"6\", \"1\"),\n        (\"201920181\", \"4\"),\n    ],\n)\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\n\nassert solution('201920181') == '4'\n\n\"\"\"\n\nfrom typing import List\nimport math"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3121\") == 2\n\nassert solution(\"6\") == 1\n\nassert solution(\"1000000000000000000000000000000000\") == 33\n\nassert solution(\"201920181\") == 4\n\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\"\nassert solution(\"12345\") == \"0\"\nassert solution(\"100010101\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\nassert solution('1000000000000000000000000000000000') == '33'\n\n\"\"\""
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3121') == 2\nassert solution('6') == 1\nassert solution('1000000000000000000000000000000000') == 33\nassert solution('201920181') == 4\n\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"1000000000000000000000000000000000\") == 33\n\n\"\"\""
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5\n1 2 3 4 5\n2 4 7 11 3\"\"\") == 2\nassert solution(\"\"\"3\n13 37 39\n1 2 3\n\n-6 -12 6\n\n3\n1 2 -1\n-6 -12 6\n\n4\n0 0 0 0\n1 2 3 4\n\n0\n\n0\"\"\") == 2\nassert solution(\"\"\"5\n1 2 3 4 5\n2 4 7 11 3\n\n4\n0 0 0 0\n1 2 3 4\n\n0\n\n0\n\"\"\") == 0\nassert solution(\"\"\"3\n1 2 -1\n-6 -12 6\n\n0\n\n0\n\n1\n\"\"\") == 0\nassert solution(\"\"\"5\n1 2 3 4 5\n2 4 7 11 3\n\n2\n0 0 0 0\n1 2 3 4\n\n0\n\n0\n\n0\n\"\"\") == 0\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == '2'\nassert solution(\"3\\n1 2 3\\n-6 -12 6\\n\") == '3'\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == '0'"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 4 7 11 3') == '2'\nassert solution('3\\n13 37 39\\n1 2 3') == '2'\nassert solution('4\\n0 0 0 0\\n1 2 3 4') == '0'\nassert solution('3\\n1 2 -1\\n-6 -12 6') == '3'\n\"\"\""
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n1 2 3 4 5\n2 4 7 11 3\n''') == '2'\nassert solution('''3\n13 37 39\n1 2 3\n''') == '2'\nassert solution('''4\n0 0 0 0\n1 2 3 4\n''') == '0'\nassert solution('''3\n1 2 -1\n-6 -12 6\n''') == '3'\nprint('OK!')\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 4 7 11 3\\n') == '2'\nassert solution('3\\n13 37 39\\n1 2 3\\n') == '2'\nassert solution('4\\n0 0 0 0\\n1 2 3 4\\n') == '0'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == ''\nassert solution('1 2 3 4 0') == '0'\nassert solution('1 2 -1') == '2'\nassert solution('-6 -12 6') == '3'\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\n\n\"\"\"\nimport sys\nfrom typing import List, Dict, Tuple\n\nfrom collections import Counter\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_str_1) == \"6\"\nassert solution(test_str_2) == \"4\"\nassert solution(test_str_3) == \"0\"\nassert solution(test_str_4) == \"0\"\nassert solution(test_str_5) == \"0\""
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 4 7 11 3') == 2\n\"\"\""
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5\\n2 4 7 11 3\\n') == '2'\n\nassert solution('3\\n13 37 39\\n1 2 3\\n') == '2'\n\nassert solution('4\\n0 0 0 0\\n1 2 3 4\\n') == '0'\n\nassert solution('5\\n-1 -2 -3 -4 -5\\n1 2 3 4 5\\n') == '2'\n\nassert solution('6\\n0 0 0 0\\n1 2 3 4\\n') == '0'"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"10\"\nassert solution(\"abaca?b\") == \"5\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"0\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"codeforces\") == 5\nassert solution(\"dodivthree\") == 7\nassert solution(\"bambarbia\") == 0\nassert solution(\"hellocode\") == 0\n\"\"\"\nimport unittest\n\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"codeforces\"), 5)\n        self."
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"5\"\nassert solution(\"abaca?b\") == \"5\"\nassert solution(\"zabbbcc\") == \"5\"\nassert solution(\"hellocode\") == \"0\"\n\"\"\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(example1) == \"3\\n1 7\\n7 2\\n4 9\\n9 5\\n5 1\\n2 6\\n6 8\\n8 10\\n10 9\"\nassert solution(example2) == \"5\\n1 8\\n8 4\\n4 7\\n7 3\\n3 5\\n5 1\\n2 6\\n6 9\\n9 10\"\nassert solution(example3) == \"0\"\nassert solution(example4) == \"5\\n1 2\\n2 4\\n4 8\\n8 3\\n3 7\\n7 1\\n1 6\\n6 10\\n10 9\"\nassert solution(example5) == \"0\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == 5\nassert solution(\"dodivthree\") == 7\nassert solution(\"bambarbia\") == 0\nassert solution(\"hellocode\") == 0\nassert solution(\"abaca?b\") == 5\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(codeforces) == 5\nassert solution(dodivthree) == 7\nassert solution(bambarbia) == 0\nassert solution(hellocode) == 10\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2 3\"\nassert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"1 1 1 1\") == \"4\"\n\n\"\"\"\n\nimport sys\n\nSUM_NUMBERS = 0\nN = int(sys.stdin.readline().strip())\nA = list(map(int, sys.stdin.readline().strip().split()))\nMAX_RANGE = max(A)\nINPUT_LENGTH = len(A)\nNUMBER_FOUND = 0\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"4\\n4 4\") == \"1 1\"\nassert solution(\"4\\n4 4\\n1 1\") == \"2 2\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"4\\n2 2\") == \"1 1\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"4 1 2 2 1 5 3\") == \"3\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3\\n7 7\\n2 3'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4\\n1 1'\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"7\n4 1 2 2 1 5 3\n\"\"\") == \"\"\"3\n7 7\n2 3\n4 5\n\"\"\"\nassert solution(\"\"\"11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n\"\"\") == \"\"\"2\n3 4\n1 1\n2 2\n3 3\n\"\"\"\nassert solution(\"\"\"4\n1 1 1 1\n\"\"\") == \"\"\"4\n4 4\n1 1\n2 2\n3 3\n\"\"\"\n\"\"\"\n3\n4 1 2 2 1 5 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n3 2 2 2 2 2 2 3\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == \"2\\n3 4\\n1 1\\n2 2\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"4\\n4 4\\n1 1\\n2 2\"\n\"\"\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('7 -4 1 2 2 1 5 3') == '3'\nassert solution('4 1 1 1') == '4'\nassert solution('10 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '3'\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == '3\\n7 7'\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == 12\nassert solution(\"5 2\\n3 7 19 3 3\") == 0\n\"\"\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1234\\n12345\") == 7\nassert solution(\"1234\\n1235\") == 0\nassert solution(\"1234\\n1235\\n1236\") == 0\nassert solution(\"1234\\n1235\\n1236\\n1237\") == 0\nassert solution(\"1234\\n1235\\n1236\\n1237\\n1238\") == 12\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\ncount = 0\n\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        count += 1 if (a[i] + a[j]) % k == 0 else 0\n\nprint(count)\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 11\") == \"7\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"4 2\") == \"12\"\nassert solution(\"4 2\") == \"12\"\nassert solution(\"5 2\") == \"0\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 11\\n45 1 10 12 11 7') == '7'\nassert solution('4 2\\n2 78 4 10') == '12'\nassert solution('5 2\\n3 7 19 3 3') == '0'\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\nassert solution(\"4 2\\n2 78 4 10\") == \"12\"\n\n\"\"\""
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n2 78 4 10') == '12'\nassert solution('5 2\\n3 7 19 3 3') == '0'\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12\\n34\") == 1\nassert solution(\"1\\n1\") == 0\nassert solution(\"10\\n0\") == 10\nassert solution(\"8\\n2\") == 7\nassert solution(\"10\\n10\") == 0\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"45 1 10 12 11 7\") == 7\nassert solution(\"4 2 78 4 10\") == 12\nassert solution(\"3 7 19 3 3\") == 0"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n2 78 4 10') == '12'\nassert solution('5 2\\n3 7 19 3 3') == '0'\nassert solution('5 2\\n1 10 10 5 5') == '0'\nassert solution('5 2\\n1 1 1 1 1') == '0'\nassert solution('5 2\\n1 1 1 1 1') == '0'\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\nassert solution(\"4 2\\n2 78 4 10\") == \"12\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n6\\n4 3\\n7\\n10 10') == '13'\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 5\") == 9\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nA = [int(x) for x in sys.stdin.readline().split()]\nB = [int(x) for x in sys.stdin.readline().split()]\n\nprint(sum(max(A[i:i + 2]) for i in range(N - 1)))\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5\\n') == '9'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nb = list(map(int, sys.stdin.readline().split()))\n\ndp = [0] * (n + 1)\ndp[0] = b[0]\ndp[1] = b[0] + b[1]\n\nfor i in range(1, n - 1):\n    dp[i + 1] = max(dp[i], dp[i - 1] + b[i])\n    \nprint(dp[n - 1])\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 5') == '9'\n\"\"\"\nimport sys"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2 5') == 9\n\"\"\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2 5\\n') == '9'\nassert solution('3\\n1 5\\n') == '6'\nassert solution('3\\n-1 5\\n') == '6'\nassert solution('3\\n0 5\\n') == '5'\nassert solution('4\\n2 2 2\\n') == '10'\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\nassert solution(\"3\\n-1 -2 -3\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 5') == '9'\n\"\"\"\nimport sys"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 1 3 1 2\") == \"9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == '110'\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 2\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n\"\"\"\n\nimport sys\n\n_, n, m, q = [int(i) for i in sys.stdin.readline().split()]\nscores = [[0] * (m + 1) for _ in range(n + 1)]\nfor _ in range(q):\n    a, b, c, d = [int(i) for i in sys.stdin.readline().split()]\n    scores[a][b] = c\n    scores[b][a] = c"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\nprint(solution(\"4 5 2\\n3 4 1 100\\n2 3 2 10\\n1 1 1 1\"))\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == '110'\n\"\"\"\n\nN, M, Q = input().split()\nn = int(N)\nm = int(M)\nq = int(Q)\na = []\nb = []\nc = []\nd = []\nfor i in range(q):\n    x, y, z, w = input().split()\n    a.append(int(x))\n    b.append(int(y))\n    c.append(int(z))\n    d.append(int(w))\n\nscore = 0\nfor i in range(len(a)):\n    if (a[i] - b[i]) == c[i]:\n        score += d[i]\nprint(score)\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n\nfrom collections import namedtuple\n\nEdge = namedtuple(\"Edge\", [\"start\", \"end\", \"cost\"])"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_stdin) == test_solution\n\"\"\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n\"\"\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\"\"\"\n\nfrom typing import List\n\n\"\"\"\n1. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441\u043e \u0437\u043d\u0430\u043a\u043e\u043c + \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043f\u043e\u0438\u0441\u043a\u043e\u043c \n\u0430\u043c\u043e\u0437\u0430\u0446\u0438\u0438, \u0435\u0441\u043b\u0438 \u0432\u043c\u0435\u0441\u0442\u043e + \u0441\u0442\u043e\u0438\u0442 - \u043d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u0430\u0440\u044b \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 A[i] \u0438 A[j] \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0438\u0445 \u0441\u0443\u043c\u043c\u0443 \n\u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0443, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0441\u0443\u043c\u043c\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \n\u044d\u0442\u043e\u043c\u0443 \u0437\u043d\u0430\u043a\u0443.\n2. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u0432\u043e\u0438\u0447\u043d\u043e\u0433\u043e \u043f\u043e\u0438\u0441\u043a\u0430. \u041f\u043e\u0438\u0441\u043a \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0435\u0439, \u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0435\u0437 \u043d\u0435\u0435 \u043d\u0435\u043b\u044c\u0437\u044f.\n3. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u0432\u043e\u0438\u0447\u043d\u043e\u0433\u043e \u043f\u043e\u0438\u0441\u043a\u0430 \u0441 \u0430\u0446\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0434\u0435\u043b\u0435\u043d\u0438\u044f\u043c\u0438.\n\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u0443\u043c\u0430\u0439\u0442\u0435, \u043a\u0430\u043a\u043e\u0435 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443.\n\n\u041c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043a \u043f\u0440\u0438\u043c\u0435\u0440\u0443 \u043f\u0440\u043e \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435. \u0415\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u0447\u0435\u043c \u0434\u0432\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445, \u0442\u043e \u0431\u0435\u0440\u0435\u043c \n\u0442\u0440\u0435\u0442\u0438\u0439 \u0438 \u0441\u0442\u0430\u0440\u0448\u0438\u0439, \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u0447\u0435\u0442\u044b\u0440\u0435\u0445, \u0442\u043e \u0431\u0435\u0440\u0435\u043c \u0442\u0440\u0438 \u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u0439. \u0415\u0441\u043b\u0438 \u0434\u0430\u0436\u0435 \u043d\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430, \u0442\u043e \n\u0447\u0438\u0441\u043b\u0430 \u0443\u0436\u0435 \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c.\n\n\u041c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u043c \u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u043e \u0437\u043d\u0430\u043a\u043e\u043c \u043d\u0430\u043a\u043b\u043e\u043d\u0430. \u0410 \u0438\u043c\u0435\u043d\u043d\u043e \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435, \u043d\u043e \n\u0437\u0430\u0447\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0445\u043e\u0434\u0430 \u043f\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0443 \u0432 \u043f\u043e\u0438\u0441\u043a\u0430\u0445 \u0430\u043c\u043e\u0437\u0430\u0446\u0438\u0438? \u041d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u043f\u0440\u0438 \n\u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0438 \u0430\u043c\u043e\u0437\u0430\u0446\u0438\u0438 \u043d\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u044b \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0441\u0430\u043c\u0430 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f. \u0422\u043e\u0447\u043d\u043e \n\u043d\u0435\u0442. \u041d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0441\u0435 \u043f\u0430\u0440\u044b \u043f\u043e \u0442\u0430\u043a\u043e\u043c\u0443 \u0436\u0435 \u0437\u043d\u0430\u043a\u0443. \u0421\u043f\u0435\u0440\u0432\u0430 \u043d\u0430\u0439\u0434\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440, \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0432 \u043f\u043e\u0432\u0442\u043e\u0440\u044b. \u041e\u0442 \u043e\u0431\u0449\u0435\u0433\u043e \n\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u0430\u043c\u043e\u0437\u0430\u0446\u0438\u044e \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0449\u0438\u0445 \u043f\u0430\u0440.\n\n\u041e\u0441\u0442\u0430\u0432\u0448\u0435\u0435\u0441\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0430\u0440 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0430\u0440, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \n\u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u0438\u0437 \u0432\u0441\u0435\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0439. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u0443\u043c\u0430\u0439\u0442\u0435, \u043a\u0430\u043a\u043e\u0439 \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u0449\u0438\u0439 \u0437\u043d\u0430\u043a \u0434\u043b\u044f \n\u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u043e\u0431\u0449\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0430\u0440 \u0441 \u044d\u0442\u0438\u043c \u0437\u043d\u0430\u043a\u043e\u043c. \u0412 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0437\u043d\u0430\u043a \u043d\u0435 \u043d\u0443\u0436\u0435\u043d, \u0442.\u043a. \u0443 \u043d\u0430\u0441 \u0441\u043f\u0438\u0441\u043a\u0438.\n\n\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u044b \u0443\ufffd"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a) == e\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 4 6 3\\n\") == \"5\"\n\"\"\"\n\nfrom typing import List, Dict"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 6 3\") == \"5\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 4 6 3\\n\") == '5'\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n1 4 6 3''') == '5'\nassert solution('''5\n1 2 3 4 5''') == '0'"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n2') == ''\nassert solution('1\\n2\\n') == ''\nassert solution('1\\n2\\n3') == ''\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0 0\\n1 0\") == \"1.4142135623730951\"\n\"\"\""
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n0 0\n1 0\n0 1''') == \"2.2761423749\"\nassert solution('''2\n0 0\n1 0''') == \"1.41421356237\"\nassert solution('''8\n-1000 -1000\n1000 -1000\n1000 1000\n-1000 1000\n-1000 -1000\n-1000 -1000\n1000 -1000\n1000 1000''') == \"1000.0\"\nassert solution('''7\n-1 -1\n1 -1\n-1 1\n1 1\n-1 1\n1 -1\n1 1''') == \"1.41421356237\"\n\nimport math\nimport math\nimport statistics"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"3\\n0 0\\n1 0\\n0 1\") == '2.2761423749'\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0 0\\n1 0\\n0 1') == '2.2761423749'\n\n-----\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open('./input.txt').read()) == '2.2761423749'"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\\n\") == \"2.2761423749\"\nassert solution(\"5\\n1 1\\n0 0\\n1 1\\n0 1\\n1 1\\n\") == \"2.2715743869\"\nassert solution(\"8\\n0 0\\n1 0\\n0 1\\n1 1\\n0 1\\n1 1\\n1 1\\n1 1\\n\") == \"2.0847297411\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(int(input()))) == str(2.2761423749)\n\"\"\"\n\nimport numpy as np\nimport math"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 0 0 1 0\\n0 0\") == \"2.2761423749\"\n\"\"\"\n\nimport sys\n\nclass City:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def distance(self, other):\n        return (self.x - other.x) ** 2 + (self.y - other.y) ** 2\n\n\nn = int(sys.stdin.readline())\npoints = [City(*map(int, line.split())) for line in sys.stdin]\navg_distance = 0\nfor i, p1 in enumerate(points):\n    for j, p2 in enumerate(points):\n        if i == j:\n            continue\n        avg_distance += p1.distance(p2)\navg_distance /= (n * (n-1))\n\nprint('%.6f' % avg_distance)\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3\n0 0\n1 0\n0 1\n\"\"\") == \"2.2761423749\"\nprint(\"PASSED\")\n\nassert solution(\"\"\"3\n0 0\n0 1\n0 0\n\"\"\") == \"1.41421356237\"\nprint(\"PASSED\")\n\nassert solution(\"\"\"3\n-1 -1\n-1 1\n1 1\n\"\"\") == \"1.41421356237\"\nprint(\"PASSED\")\n\nassert solution(\"\"\"3\n-1 1\n1 1\n-1 1\n\"\"\") == \"2.8284271247\"\nprint(\"PASSED\")\n\nassert solution(\"\"\"5\n0 0\n1 1\n0 0\n1 1\n1 1\n\"\"\") == \"3.4641016151377544\"\nprint(\"PASSED\")"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12 4') == 4\n\"\"\"\nimport sys"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12 4\") == 4\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12 4') == '4'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12 4') == '4'\nassert solution('5 4') == '0'\n\na, b = map(int, stdin.strip().split())\nprint(max(a-b, 0))"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12 4\\n') == 4\nassert solution('10 6\\n') == 6\nassert solution('10 7\\n') == 8\n\"\"\"\n\na, b = list(map(int, input().split()))\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\") == \"4\"\nassert solution(\"12 4\") == \"4\"\nassert solution(\"100 100\") == \"0\"\nassert solution(\"10 3\") == \"6\"\nassert solution(\"10 10\") == \"0\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 4\") == \"4\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"10 20\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12 4\") == \"4\"\n\"\"\"\n\na, b = map(int, stdin.split())\nprint(a - b)\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10000') == '3'\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2') == 3\nassert solution('1000 1') == 10\n\"\"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10000\") == 3\n\"\"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10000') == '3'\nassert solution('9') == '1'\n\"\"\"\n\nfrom math import log10"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000\") == 3\n\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10000') == 3\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n3\\n100\\n1\\n1000') == '3'\n\"\"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == 1\n\"\"\"\n\nN, M = map(int, input().split(' '))\nA = {}\nfor i in range(M):\n    K, *foods = map(int, input().split(' '))\n    A[i] = foods\n\nfoods = {}\nfor i in range(N):\n    for j in range(M):\n        if A[j][i] not in foods:\n            foods[A[j][i]] = 1\n        else:\n            foods[A[j][i]] += 1\nfor food in foods:\n    if foods[food] == N:\n        print(food)\n        break\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n2 1 3 4 5\\n3 1 2 3\\n2 3 2\") == \"1\"\nassert solution(\"5 3\\n1 1 1 1\\n1 1 2\\n1 2 1\") == \"2\"\nassert solution(\"3 4\\n2 1 3\\n2 3 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"\n\"\"\"\n\n\nfrom itertools import product"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == '1'\n\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 3 4 5\\n3 1 2\\n2 3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n3 1 2\\n2 3 2') == '1'\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 4\n2 1 3\n3 1 2 3''') == '1'\n\nassert solution('''3 4\n2 1 3\n3 1 2 3''') == '1'\n\nassert solution('''3 4\n2 1 3\n3 1 2 3''') == '1'\n'''\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(4) == '0.5'\n\"\"\"\nimport sys\nfrom math import factorial"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n') == '0.5'\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3) == '0.6666666666'\nassert solution(4) == '0.5'\n\"\"\"\n\nfrom math import factorial as fac"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n') == '0.5'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == '0.5'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3) == 0.5\nassert solution(4) == 0.5\n\"\"\""
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\nprint(solution(\"4\\n\"), \"0.5\")\nassert solution(\"20\\n\") == \"0.0714285714285714\"\nprint(solution(\"20\\n\"), \"0.0714285714285714\")\nassert solution(\"100\\n\") == \"0.4838709677419354\"\nprint(solution(\"100\\n\"), \"0.4838709677419354\")\nassert solution(\"1000\\n\") == \"0.4983870967741936\"\nprint(solution(\"1000\\n\"), \"0.4983870967741936\")\nassert solution(\"10000\\n\") == \"0.4985365853658537\"\nprint(solution(\"10000\\n\"), \"0.4985365853658537\")\n\"\"\""
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n') == '0.5'\nassert solution('8\\n') == '0.8333333333'\nassert solution('8\\n') == '0.8333333333'\nassert solution('10\\n') == '0.5'\nassert solution('13\\n') == '0.3846153846'\n\"\"\"\n\nimport math\n\nnumber = int(stdin.readline())"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n4\\n3\\n2\\n1') == '0.5'\n\"\"\"\nimport random\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == 2\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == '2'\nassert solution(\"4\\n1\\n2 3\\n1\\n1 1\\n1\\n2 0\\n\") == '3'\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\nassert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\nassert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\nprint(solution(stdin))\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1\\n1\\n1\") == 2\n\"\"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\nprint(solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\"))\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == 2\nassert solution(\"4\\n1\\n2 1\\n1\\n2 1\\n1\\n1 1\\n2\") == 1\nassert solution(\"4\\n2\\n1 2\\n2 1\\n1 1\\n1 1\\n2\") == 2\nassert solution(\"6\\n2\\n1 2\\n2 1\\n1 1\\n1 1\\n2\") == 2\nassert solution(\"8\\n2\\n1 2\\n2 1\\n1 1\\n1 1\\n2\\n2 1\\n1 1\\n1 1\\n2\") == 2\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\nassert solution(\"4\\n1\\n2 1\\n1\\n2 1\") == \"1\"\n\n------Problem-----\nOn the first line, the number of people, N, is given.\nOn the next N lines, people's identities are given in the following format:\n\nPerson i is represented by an integer Ai, 1 \\leq Ai \\leq N\n\nOn the next N lines, there are N(N-1) pairs of integers: x_{ij} and y_{ij}, 1 \\leq x_{ij} \\leq N, 1 \\leq y_{ij} \\leq 2\n\n---Task---\nWrite a function:"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n\nassert solution('abcd') == 'abcd'\n\nprint(solution('nikoandsolstice'))\nprint(solution('abcd'))\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nprint(solution(\"nikoandsolstice\"))\n\nYou can check your solution here\n'''\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\nassert solution('nikoandsolsticehaslength15') == 'nikoand...'\n\nprint(solution('nikoandsolstice'))\nprint(solution('nikoandsolsticehaslength15'))"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\nassert solution('nikoandsolsticehasaverylongstring') == 'nikoandsolsticehasaverylongstring'\n\"\"\"\n\nK, S = input().split(' ')\nK, S = int(K), S"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\nprint(solution(input()))\n\n-----\nimport string"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"nikoand\") == \"nikoand\"\nassert solution(\"nikona\") == \"nikona\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 nikoandsolstice\") == \"nikoand...\"\nassert solution(\"3 helloo\") == \"h...\"\nassert solution(\"4 racecar\") == \"racecar\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"adieu\") == \"adieu\"\nassert solution(\"hello\") == \"hello\"\nassert solution(\"nikolas\") == \"nikolas\"\nassert solution(\"allegiance\") == \"allegiance\"\n\n------Problem code------\n\n------Hint------\n- The string is already passed in the standard input, you can ignore it.\n- The length of the string is passed in the standard input.\n- You can use the builtin function len() to get the length of a string.\n- The solution is trivial, but you can use it to get more practice with variable naming.\n- If you want to test if the string S is less than or equal to K, use K <= len(S).\n- If you want to test if the string S is greater than or equal to K, use len(S) >= K.\n\"\"\"\n\n\n\"\"\"\n----SOLUTION----\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('apple') == 'apples'\nassert solution('apple') == 'apples'\nassert solution('apple') == 'apples'"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"banana\") == \"bananas\"\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"cat\") == \"cats\"\nassert solution(\"dog\") == \"dogs\"\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('apple') == 'apples'\nassert solution('codeforces') == 'codeforces'\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('apple') == 'apples'\nprint(solution('apple'), 'apples')\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('apple') == 'apples'\n\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    'apple'\n) == 'apples'\n\"\"\"\n\nimport sys\nimport re\n\npattern = re.compile(r'^[a-zA-Z]+$')\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\nassert solution('4 2\\n2\\n1 4\\n1\\n4') == '2'\nassert solution('4 3\\n2\\n1 4\\n1\\n4') == '1'\n\"\"\"\n\nN, K = map(int, stdin.readline().split())\nSnakes = [0] + list(map(int, stdin.readline().split()))\nSnacks = list(map(int, stdin.readline().split()))\n\nSnakesWithSnacks = 0\n\nfor Snack in Snacks:\n    if Snack in Snakes:\n        SnakesWithSnacks += 1\n\nprint(SnakesWithSnacks)\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1\\n3\\n1\\n3\") == \"1\"\n\"\"\"\n\nN, K = list(map(int, input().split()))\n\nsnk = []\nfor _ in range(K):\n    snk.append(int(input()))\nsnk.sort()\n\nres = 0\nfor i in range(N):\n    if snk[i] >= i + 1:\n        res += 1\n\nprint(res)"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == '1'\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\"\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\nsnacks = [int(x) for x in sys.stdin.readline().split()]\nsnakes = set()\nfor x in range(k):\n    snakes.add(tuple(sorted([int(y) for y in sys.stdin.readline().split()])))\n\nanswer = 0\nfor i in range(n):\n    snack_count = 0\n    for j in range(k):\n        snack_count += int(snacks[snakes[j][i]])\n    if snack_count == 0:\n        answer += 1\nprint(answer)\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == 1\nassert solution(\"3 2\\n1\\n2\\n3\") == 0\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == '1'\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\"\n\nimport math\n\nn, k = [int(i) for i in input().split(' ')]\nn_snukes = dict()\nfor i in range(1, n+1):\n    n_snukes[i] = int(input())\n\nsnakes = set()\nfor i in range(k):\n    snakes.add(int(input()))\n\nvictims = set()\nfor snuke, snack in n_snukes.items():\n    if snuke not in snakes:\n        if snack in snakes:\n            victims.add(snuke)\n\nprint(len(victims))\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\nprint(solution(\"aabbbbaaca\"))\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\nassert solution(\"abbbbaaca\") == \"5\"\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\n\"\"\"\n\nfrom typing import Iterator"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stub) == stub_ans\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aabbbbaaca') == '5'\n\"\"\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n10\naabbbbaaca\n''') == '5'\n\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aabbbbaaca') == '5'"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ababa') == 1\nassert solution('abbba') == 2\nassert solution('abbbba') == 3\nassert solution('abccba') == 4\nassert solution('abbbabb') == 5\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3\n5 2 4\"\"\") == \"3\"\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n3\n5 2 4\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n5 2 4') == '3'\n\n----------------------\nimport sys"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n5 2 4\") == 3\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n5 2 4') == '3'\nassert solution('3\\n2 2 4') == '1'\nassert solution('5\\n5 2 4') == '3'\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5 2 4\") == 3\n\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 4\\n\") == \"3\"\nassert solution(\"4 3 2\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5 2 4\") == '3'\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"1 2 2 3\") == \"5\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input) == output\n\"\"\"\n\nimport sys\n\nA, B, C, K = [int(i) for i in sys.stdin.readline().split(' ')]\n\nMAX = 0\n\nfor i in range(0, A + 1):\n    for j in range(0, B + 1):\n        if i + j <= C and i * j <= K:\n            MAX = max(MAX, i + j)\n\nprint(MAX)"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1 3\") == 2\n\"\"\"\n\n\"\"\"\nBottom up Solution:\nThis problem is a simple combinatorics problem. We have N distinct cards, each of which can have either 0 or 1 written on it. \n\nThe maximum sum we can obtain is the sum of all the elements in the array. \nThis is because in this array we can combine the largest elements first, and then the second largest elements, and so on.\n\nWe can use a 1D array to store the sums of all possible arrays. Then, we just need to iterate over the array and find the maximum value.\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nprint(\"Teste unit\u00e1rio passou!\")"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"2 3\") == \"No\"\nassert solution(\"2 1\") == \"Yes\"\nassert solution(\"3 3\") == \"Yes\"\nassert solution(\"4 3\") == \"No\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 8\\n') == 'Yes'\nassert solution('2 2\\n') == 'No'\n\n\"\"\"\n\nfrom math import gcd\nfrom functools import reduce"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"2 2\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 8\n4 9\n2 4\n''') == 'Yes'\nassert solution('''4 8\n3 9\n2 5\n''') == 'No'\nassert solution('''6 7\n3 4\n6 7\n2 3\n4 5\n2 5\n''') == 'Yes'\nassert solution('''1 1\n2 2\n''') == 'Yes'\nassert solution('''3 7\n2 3\n''') == 'No'\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3, 8) == \"Yes\"\nassert solution(3, 4) == \"No\"\nassert solution(5, 15) == \"Yes\"\nassert solution(3, 5) == \"No\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 8') == 'Yes'\nassert solution('5 4') == 'No'\n\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\"\"\"\n\nx, y = input().split()\nprint(\"Yes\" if x * 2 + y * 4 == int(x) * int(y) else \"No\")\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8\") == \"Yes\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"4 5\") == \"No\"\nassert solution(\"100 100\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8\\n') == 'Yes'\nassert solution('3 9\\n') == 'No'\nassert solution('3 10\\n') == 'No'\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n1 3\\n2 3\\n1 4\\n1 3\\n3 4\") == \"2\"\n\n---Problem---\n\nLet's learn how to count the number of different paths starting from a vertex A and ending at a vertex B. We will be making use of a graph G[A][B]. A graph G[A][B] is a set of all pairs (i, j) such that there exists an edge between vertex i and vertex j in G.\n\nThe following are the conditions that the graph G[A][B] must satisfy:\n\nIt is an undirected graph.\nIt is an unweighted graph.\nIt has no self-loops.\nIt has no double edges.\n\nWrite a function:"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"7 5\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n2 3\\n2 6\") == \"1\"\nassert solution(\"7 5\\n1 2\\n1 3\\n2 3\\n2 4\\n2 5\\n2 6\\n3 6\\n3 7\\n4 5\\n4 6\\n5 6\\n5 7\\n6 7\") == \"1\"\nassert solution(\"7 5\\n1 2\\n1 3\\n2 3\\n2 4\\n2 5\\n2 6\\n3 6\\n3 7\\n4 5\\n4 6\\n5 6\\n5 7\\n6 7\") == \"1\"\nassert solution(\"7 5\\n1 2\\n1 3\\n2 3\\n2 4\\n2 5\\n2 6\\n3 7\\n4 5\\n4 6\\n5 6\\n5 7\\n6 7\") == \"1\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 3\") == \"2\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2\\n1 3\\n2 3\\n') == '2'\n\"\"\"\n\nn, m = input().split()\nedges = [tuple(map(int, input().split())) for _ in range(int(m))]"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 3\n1 2\n1 3\n2 3''') == '2'\nassert solution('''4 2\n1 2\n2 3\n1 3''') == '1'\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\n\ng = [[0] * n for _ in range(n)]\n\nfor i in range(m):\n    a, b = [int(x) for x in input().split()]\n    g[a - 1][b - 1] = 1\n    g[b - 1][a - 1] = 1\n\nvisited = [0] * n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n2 3\\n4 2\") == \"2\"\n\n-----Note-----\nPlease write your solution in this programming file and upload the solution zip file to the programming server.\nPlease write you solution directly on this console and press Enter to submit your solution.\nYou can also write your solution to a file with the same name as this file, and then upload the file to the server.\n'''\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n1 3\") == \"2\"\nassert solution(\"2 3\\n1 3\") == \"0\"\nassert solution(\"3 3\\n1 2\\n2 3\") == \"2\"\nassert solution(\"3 3\\n1 3\\n2 3\") == \"1\"\n\n---------------------\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n\nimport sys\nimport re\nimport itertools\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == 2\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\") == 2\n\n------\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2') == '18'\n\"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 2 3 4\") == \"13\"\n\"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 2\n''') == '''3+4+5+6'''\n\n-----\n5 2\n4 6\n''') == '''18'''\n\n-----\n10 3\n-5 -6 -6 -3 -1 0 1 1 1 1\n\n5\n\n5 -6\n5 -6 -6 -3 -1 0 1 1 1 1\n\n4\n\n4 -6\n4 -6 -6 -3 -1 0 1 1 1 1\n\n3\n\n3 -6\n3 -6 -6 -3 -1 0 1 1 1 1\n\n2\n\n2 -6\n2 -6 -6 -3 -1 0 1 1 1 1\n\n1\n\n1 -6\n1 -6 -6 -3 -1 0 1 1 1 1\n\n-----\n5 1\n-5 -5 -5 -5 -5 -5\n5\n\n5 -5\n5 -5 -5 -5 -5\n\n4\n\n4 -5\n4 -5 -5 -5 -5\n\n3\n\n3 -5\n3 -5 -5 -5 -5\n\n2\n\n2 -5\n2 -5 -5 -5 -5\n\n1\n\n1 -5\n1 -5 -5 -5 -5\n\n-----\n5 5\n-5 -5 -5 -5 -5 -5\n5\n\n5 -5\n5 -5 -5 -5 -5\n\n4\n\n4 -5\n4 -5 -5 -5 -5\n\n3\n\n3 -5\n3 -5 -5 -5 -5\n\n2\n\n2 -5\n2 -5 -5 -5 -5\n\n1\n\n1 -5\n1 -5 -5 -5 -5\n\n-----\n5 3\n-5 -5 -5 -5 -5 -5\n5\n\n5 -5\n5 -5 -5 -5 -5\n\n4\n\n4 -5\n4 -5 -5 -5 -5\n\n3\n\n3 -5\n3 -5 -5 -5 -5\n\n2\n\n2 -5\n2 -5 -5 -5 -5\n\n1\n\n1 -5\n1 -5 -5 -5 -5\n\n-----\n5 2\n-5 -5 -5 -5 -5 -5\n5\n\n5 -5\n5 -5 -5 -5 -5\n\n4\n\n4 -5\n4 -5 -5 -5 -5\n\n3\n\n3 -5\n3 -5 -5 -5 -5\n\n2\n\n2 -5\n2 -5 -5 -5 -5\n\n1\n\n1 -5\n1 -5 -5 -5 -5\n\n-----\n5 1\n-5 -5 -5 -5 -5 -5\n5\n\n5 -5\n5 -5 -5 -5 -5\n\n4\n\n4 -5\n4 -5 -5 -5 -5\n\n3\n\n3 -5\n3 -5 -5 -5 -5\n\n2\n\n2 -5\n2 -5 -5 -5 -5\n\n1\n\n1 -5\n1 -5 -5 -5 -5\n\n-----\n8 4\n-1 -1 -1 -1 -1 -1 -1 -1\n8\n\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n5\n\n5\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n4\n\n4\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n3\n\n3\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n2\n\n2\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n1\n\n1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n-----\n8 3\n-1 -1 -1 -1 -1 -1 -1 -1\n8\n\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n5\n\n5\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n4\n\n4\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n3\n\n3\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n2\n\n2\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n1\n\n1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n-----\n7 5\n-1 -1 -1 -1 -1 -1 -1\n7\n\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n5\n\n5\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n4\n\n4\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n3\n\n3\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n2\n\n2\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n1\n\n1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n-----\n7 4\n-1 -1 -1 -1 -1 -1 -1\n7\n\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n5\n\n5\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n4\n\n4\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n3\n\n3\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n2\n\n2\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n1\n\n1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n-----\n7 3\n-1 -1 -1 -1 -1 -1 -1\n7\n\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n5\n\n5\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n4\n\n4\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n3\n\n3\n-"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\"\n\nn, l = list(map(int, stdin.readline().split()))\n\napples = []\nfor i in range(n):\n    apples.append(int(stdin.readline()))\n\napples.sort()\n\nsmallest_difference = apples[0] - l\n\nfor i in range(1, len(apples)):\n    difference = apples[i] - l\n    if difference < smallest_difference:\n        smallest_difference = difference\n\nprint(l + smallest_difference)\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n\") == \"18\"\n\"\"\"\n\n\nfrom sys import stdin\n\n_, l = stdin.readline().split()\n\nl = int(l)\n\n_, max_ = 0, 0\n\nfor i in range(1, l+1):\n    _, curr = stdin.readline().split()\n    _ = int(curr)\n    if _ > max_:\n        max_ = _\n\nprint(max_ + max_ - l)\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2') == '18'\n\"\"\"\n\n\"\"\"\nn, l = map(int, input().split())\nlst = list(map(int, input().split()))\nans = sum(lst)\n\nlst.sort()\n\nfor i in range(n):\n    if i == 0:\n        ans -= lst[0]\n    else:\n        ans += lst[i] - lst[i - 1]\n\nprint(ans)\n\"\"\"\n\n\"\"\"\n\uc790\uc5f0\uc218 N\uacfc \uc815\uc218 M\uc774 \uc8fc\uc5b4\uc84c\uc744 \ub54c, \uc544\ub798 \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uac00\uc7a5 \ud070 \uc815\uc218\ub97c \uad6c\ud558\uc2dc\uc624.\n\n1. N\uc740 \ud640\uc218\uc774\ub2e4.\n2. N\uc740 M\uc758 \ubc30\uc218\uc774\ub2e4.\n3. N\uc740 M\uc758 \ubc30\uc218\uc5d0 \uc788\uc9c0 \uc54a\ub294 \uc815\uc218\uc774\ub2e4.\n\"\"\"\n\n\"\"\"\nn, m = map(int, input().split())\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2') == '18'"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"18\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"15\") == \"60\"\nassert solution(\"20\") == \"110\"\nassert solution(\"25\") == \"135\"\nassert solution(\"30\") == \"165\"\nassert solution
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('15\\n') == '60'\n\n\"\"\"\n\n\"\"\"\n\u041f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n\u0417\u0430\u0434\u0430\u0447\u0430: \u043d\u0430\u0439\u0442\u0438 \u043e\u0431\u044a\u0451\u043c \u043a\u043e\u043d\u0443\u0441\u0430, \u043f\u043e\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u0432 \u043c\u043e\u043c\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u043d\u043e\u0447\u0438 \u0434\u043b\u044f \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 20 \u043c/\u0441, \u043f\u0435\u0440\u0432\u043e\u0439 \u043e\u043f\u043e\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u044b\u043b\u0430 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u0441\u043e \u0437\u0432\u0435\u0437\u0434\u044b.\n\n\u041f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043d\u0430\u0431\u043e\u0440\u044b \u0441\u0438\u0441\u0442\u0435\u043c \u0438 \u043d\u0430\u0431\u043e\u0440\u044b \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442 \u0432\u0435\u0440\u0448\u0438\u043d \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.\n\u041a\u0430\u0436\u0434\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0432\u0435\u0440\u0448\u0438\u043d \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 \u0413\u0430\u0443\u0441\u0441\u0430.\n\n\u041f\u0435\u0440\u0432\u044b\u043c \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0442\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u0439\u0434\u0435\u043d \u043e\u0431\u044a\u0451\u043c \u0441\u0430\u043c\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043e\u043f\u043e\u0440\u044b.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0442\u0430\u043a \u043a\u0430\u043a \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043e\u0431\u044a\u0451\u043c, \u043d\u0430\u0439\u0434\u0438\u0442\u0435 \u043f\u0430\u0440\u0443 \u0441\u0438\u0441\u0442\u0435\u043c \u0441 \u0440\u0430\u0437\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043e\u0431\u044a\u0451\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u043e\u0439 \u043e\u043f\u043e\u0440\u044b.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n3\n5\n4 5\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n24.0\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n3\n5\n8 5\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n24.0\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n2\n2\n1 1\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n5.0\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n2\n1\n1 1\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n6.0\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1\n2\n1 1\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1.0\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n5\n3\n3 1\n4 2\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n14.0\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n2\n2\n1 1\n1 1\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n6.0\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n5\n1\n1 1\n2 2\n4 4\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n14.0\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n5\n1\n1 1\n2 2\n3 3\n4 4\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n14.0\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n3\n1\n1 1\n2 2\n3 3\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n3.0\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n5\n4\n1 1\n2 2\n3 3\n4 4\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n12.0\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1\n2\n3\n4\n5\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1.0\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n5\n1\n1 1\n2 2\n3 3\n4 4\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n14.0\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n5\n2\n1 1\n2 2\n3 3\n4 4\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n6.0\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n2\n2\n1 1\n1 1\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n4.0\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n5\n5\n3 1\n4 2\n5 5\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n24.0\n\"\"\"\n\n\"\"\"\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043d\u0430 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435 \u0413\u0430\u0443\u0441\u0441\u0430, \u0432\u0441\u043f\u043e\u043c\u043d\u0438\u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u044b.\n\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u0440\u043e\u043d \u0438 \u043e\u0431\u044a\u0451\u043c \u043e\u043f\u043e\u0440\u044b.\n\u041d\u0430\u0439\u0434\u0435\u043c \u0441\u0430\u043c\u0443\u044e \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"15\") == \"60\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('15\\n') == '60'\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"15\") == \"60\"\n\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"15\") == \"60\"\n\n----Problem-----\nYou are given a sorted (from smallest to largest) array A of N integers, and an integer K.\n\nFind and return the Kth smallest element of A, or -1 if there is no such element.\n\nFor example, given the following array A:\n\nA[0] = -1\nA[1] = -1\nA[2] = 2\nA[3] = 3\nA[4] = 6\nA[5] = 8\nA[6] = 10\nA[7] = 11\nA[8] = 15\nA[9] = 16\nA[10] = 17\nA[11] = 40\nA[12] = 41\nA[13] = 42\nA[14] = 43\nA[15] = 50\nA[16] = 51\nA[17] = 52\nA[18] = 53\nA[19] = 54\nA[20] = 55\nA[21] = 57\nA[22] = 60\nA[23] = 61\nA[24] = 65\nA[25] = 66\nA[26] = 67\nA[27] = 70\nA[28] = 71\nA[29] = 72\nA[30] = 73\nA[31] = 74\nA[32] = 75\nA[33] = 76\nA[34] = 77\nA[35] = 78\nA[36] = 79\nA[37] = 80\nA[38] = 81\nA[39] = 82\nA[40] = 83\nA[41] = 84\nA[42] = 85\nA[43] = 86\nA[44] = 87\nA[45] = 88\nA[46] = 89\nA[47] = 90\nA[48] = 91\nA[49] = 92\nA[50] = 93\nA[51] = 94\nA[52] = 95\nA[53] = 96\nA[54] = 97\nA[55] = 98\nA[56] = 99\nA[57] = 100\nA[58] = 101\nA[59] = 102\nA[60] = 103\nA[61] = 104\nA[62] = 105\nA[63] = 106\nA[64] = 107\nA[65] = 108\nA[66] = 109\nA[67] = 110\nA[68] = 111\nA[69] = 112\nA[70] = 113\nA[71] = 114\nA[72] = 115\nA[73] = 116\nA[74] = 117\nA[75] = 118\nA[76] = 119\nA[77] = 120\nA[78] = 121\nA[79] = 122\nA[80] = 123\nA[81] = 124\nA[82] = 125\nA[83] = 126\nA[84] = 127\nA[85] = 128\nA[86] = 129\nA[87] = 130\nA[88] = 131\nA[89] = 132\nA[90] = 133\nA[91] = 134\nA[92] = 135\nA[93] = 136\nA[94] = 137\nA[95] = 138\nA[96] = 139\nA[97] = 140\nA[98] = 141\nA[99] = 142\nA[100] = 143\nA[101] = 144\nA[102] = 145\nA[103] = 146\nA[104] = 147\nA[105] = 148\nA[106] = 149\nA[107] = 150\nA[108] = 151\nA[109] = 152\nA[110] = 153\nA[111] = 154\nA[112] = 155\nA[113] = 156\nA[114] = 157\nA[115] = 158\nA[116] = 159\nA[117] = 160\nA[118] = 161\nA[119] = 162\nA[120] = 163\nA[121] = 164\nA[122] = 165\nA[123] = 166\nA[124] = 167\nA[125] = 168\nA[126] = 169\nA[127] = 170\nA[128] = 171\nA[129] = 172\nA[130] = 173\nA[131] = 174\nA[132] = 175\nA[133] = 176\nA[134] = 177\nA[135] = 178\nA[136] = 179\nA[137] = 180\nA[138] = 181\nA[139] = 182\nA[140] = 183\nA[141] = 184\nA[142] = 185\nA[143] = 186\nA[144] = 187\nA[145] = 188\nA[146] = 189\nA[147] = 190\nA[148] = 191\nA[149] = 192\nA[150] = 193\nA[151] = 194\nA[152] = 195\nA[153] = 196\nA[154] = 197\nA[155] = 198\nA[156] = 199\nA[157] = 200\nA[158] = 201\nA[159] = 202\nA[160] = 203\nA[161] = 204\nA[162] = 205\nA[163] = 206\nA[164] = 207\nA[165] = 208\nA[166] = 209\nA[167] = 210\nA[168] = 211\nA[169] = 212\nA[170] = 213\nA[171] = 214\nA[172] = 215\nA[173] = 216\nA[174] = 217\nA[175] = 218\nA[176] = 219\nA[177] = 220\nA[178] = 221\nA[179] = 222\nA[180] = 223\nA[181] = 224\nA[182] = 225\nA[183] = 226\nA[184] = 227\nA[185] = 228\nA[186] = 229\nA[187] = 230\nA[188] = 231\nA[189] = 232\nA[190] = 233\nA[191] = 234\nA[192] = 235\nA[193] = 236\nA[194] = 237\nA[195] = 238\nA[196] = 239\nA[197] = 240\nA[198] = 241\nA[199] = 242\nA[200] = 243\nA[201] = 244\nA[202] = 245\nA[203] = 246\nA[204] = 247\nA[205] = 248\nA[206] = 249\nA[207] = 250\nA[208] = 251\nA[209] = 252\nA[210] = 253\nA[211] = 254\nA[212] = 255\nA[213] = 256\nA[214] = 257\nA[215] = 258\nA[216] = 259\nA[217] = 260\nA[218] = 261\nA[219] = 262\nA[220] = 263\nA[221] = 264\nA[222] = 265\nA[223] = 266\nA[224] = 267\nA[225] = 268\nA[226] = 269\nA[227] = 270\nA[228] = 271\nA[229] = 272\nA[230] = 273\nA[231] = 274\nA[232] = 275\nA["
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"15\") == \"60\"\nprint(solution(\"15\"))\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(15) == 60\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\n\"\"\"\nimport sys\n\nX = int(sys.stdin.readline())\nN = int(sys.stdin.readline())\nnums = sys.stdin.readline().split()\n\nfirst, last = X - 1, X + 1\nwhile first > -1 or last < len(nums):\n    if first < 0:\n        first = len(nums) - 1\n    if last > len(nums) - 1:\n        last = 0\n    if abs(int(nums[first]) - X) < abs(int(nums[last]) - X):\n        first -= 1\n    else:\n        last += 1\nprint(nums[first])\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n1 3 5 2') == '4'\nassert solution('6 3\\n1 3 5 2') == '5'\nassert solution('3 4\\n1 3 5 2') == '4'\nassert solution('2 2\\n1 3 5 2') == '3'\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\n\n------Problem-----\nThe classical \"Babai\" algorithm [1] for finding the nearest integer to a given one is remarkably simple:\n\n1. Find a permutation of the input sequence, so that the last element is not the nearest to the given integer X (which is then fixed).\n2. The sequence is cut into two equal parts, and the nearest integer to X in each of them is selected.\n3. The difference between these two integers is the answer.\n\nThis algorithm is correct only for sequences with distinct elements.\n\nThe nearest integer to a given one in this case is the element, which has the smaller index among the elements that are not present in the sequence.\n\nLet us show that this algorithm works for all sequences:\n\n1. If the element that is not present in the sequence is greater than all elements of the sequence, the index of the smaller element is the smallest possible.\n2. If the element that is not present in the sequence is less than all elements of the sequence, the index of the greater element is the smallest possible.\n\nThis means that the minimum difference can be found by choosing the smaller index (option 2).\n\nThe problem here is that this algorithm is correct only for sequences with distinct elements.\n\nWe can make the algorithm work for sequences with distinct elements by inserting the additional step of eliminating duplicates from the sequence:\n\n1. Sort the sequence;\n2. Determine the number of distinct elements of the sequence;\n3. For each element X of the sequence, if X has the index i, then it is the element that is not present in the sequence.\n\nNow we can work with the sorted sequence and eliminate the duplicates by choosing the smallest index among the elements with the same index.\n\nThe worst case time complexity of this algorithm is O(N * log(N)) and its memory usage is O(N).\n\nThis algorithm is known as the \"Hoeffding's method\" [2].\n\nReferences\n[1] https://ru.wikipedia.org/wiki/\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c_\u0431\u0430\u0431\u0438\u0447\u0435\u043d\u043a\u043e_\u0438_\u0431\u0430\u0431\u0438\u0447\u0435\u043d\u043a\u043e\n[2] https://en.wikipedia.org/wiki/Hoeffding%27s_inequality\n\"\"\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\n\n------Solution------\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\"\"\"\n\nrows, columns = (int(n) for n in stdin.split())\nh, w = (int(n) for n in stdin.split())\ncells = rows * columns\nwhite_cells = cells - (h + w)\nprint(white_cells)\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n2 1\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 2\n2 1''') == '1'\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n\nfrom typing import List\n\nH, W = map(int, stdin.readline().split())\n\nchoose_h = [0] + list(map(int, stdin.readline().split()))\nchoose_w = [0] + list(map(int, stdin.readline().split()))\n\nres = 0\nfor h in range(H + 1):\n    res += choose_h[h] * choose_w[W]\n    res -= choose_h[h] * choose_w[W - 1]\n\nprint(res)\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 2\n2 1''') == '1'\n\"\"\"\n\nh, w = list(map(int, stdin.split()))\nn = 0\nfor i in range(h):\n    for j in range(w):\n        n += int(stdin[i][j])\nprint(n)\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n2 1\\n3 2') == '1'\nassert solution('3 2\\n2 1\\n3 2') == '0'\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n2 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-\"\n\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\ninp = stdin.read().split('\\n')\nn = int(inp[0].split(' ')[0])\nk = int(inp[0].split(' ')[1])\n\nseq = list(map(int, inp[1].split()))\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4\", \"3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\", \"3 7 5 1 10 3 20\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7 4\n3 7 5 1 10 3 20''') == '6'\nassert solution('''7 2\n3 7 5 1 10 3 20''') == '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(['7 4', '3 7 5 1 10 3 20']) == '6'\nassert solution(['7 2', '3 7 5 1 10 3 20']) == '-1'\nassert solution(['7 5', '3 7 5 1 10 3 20']) == '-1'\nassert solution(['5 4', '3 7 5 1 10 3 20']) == '-1'\nassert solution(['7 4', '5 1']) == '-1'"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == '6'\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\nassert solution('7 4\\n3 7 5 1 10 3 20') == '6'\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\"\n\n\n\"\"\""
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n.*\\n.*\\n*.*\\n') == '3\\n2 2 1\\n3 3 1\\n3 4 1'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n') == '3\\n2 2 1\\n3 3 1\\n3 4 1'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n') == '-1'\nassert solution('3 3\\n***.\\n.*.\\n***.\\n') == '-1'\n\n\"\"\""
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\n.*...\\n.*..\\n.*..\\n.*..\\n.....') == '3\\n2 2 1\\n3 3 1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('...*...') == '0'\nassert solution('...*...') == '0'\nassert solution('....*...') == '0'\nassert solution('....*...') == '0'\nassert solution('....*...') == '0'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == '3'\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == '-1'\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == '-1'\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == '-1'\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == '-1'\n\n\"\"\""
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n.*\\n.*\\n.*\\n\") == \"-1\"\nassert solution(\"5 5\\n.*\\n****.\\n.*\\n.*\\n.....\\n\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"5 5\\n.**.\\n****.\\n.**.\\n.**.\\n.....\\n\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\") == \"3\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 2\\n.*...\\n.*...\\n*.*\\n\") == \"2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n\") == \"3 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n\") == \"2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\\n\") == \"3 4 1\\n2 3 1\\n2 4 1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\\n\") == \"3 4 1\\n2 3 1\\n2 4 1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == '3\\n3 4 1\\n3 5 2\\n3 5 1\\n3 4 1'\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == '-1'\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == '-1'\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == '-1'\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == '-1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == '3\\n3 4 1\\n3 5 2\\n3 5 1'\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == '-1'\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == '-1'"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == '3\\n2 2 1\\n3 3 1'\n\"\"\"\n\nfrom sys import stdin, stdout\n\nclass Grid:\n    def __init__(self, n: int, m: int, grid: list):\n        self.n = n\n        self.m = m\n        self.grid = grid\n        self.stars = []\n        self.size_to_stars = {}\n        self.visited_sizes = set()\n        self.solution = -1\n\n    def get_solution(self):\n        if self.solution == -1:\n            return '-1'\n        return str(self.solution)\n\n    def is_valid(self, x: int, y: int, s: int):\n        return x >= 0 and x < self.n and y >= 0 and y < self.m and \\\n               self.grid[x][y] == '*' and (x, y) not in self.stars and \\\n               self.size_to_stars.get(s)!= None\n\n    def stars_at(self, s: int):\n        return [v for v in self.size_to_stars.get(s, []) if v not in self.stars]\n\n    def solve(self):\n        m, n = len(self.grid), len(self.grid[0])\n        self.solution = 0\n        self.stars = []\n        self.size_to_stars = {}\n        self.visited_sizes = set()\n        for x in range(m):\n            for y in range(n):\n                if self.grid[x][y] == '*':\n                    if self.is_valid(x, y, 1):\n                        self.stars.append((x, y))\n                        self.size_to_stars.setdefault(1, [])\n                        self.size_to_stars[1].append((x, y))\n                        self.solution += 1\n                    break\n        if self.solution == 0:\n            self.solution = -1\n            return\n        self.visited_sizes = set()\n        self.size_to_stars = {}\n        for s in range(1, self.solution + 1):\n            for x, y in self.stars_at(s):\n                self.stars.append((x, y))\n                self.size_to_stars.setdefault(s + 1, [])\n                if self.is_valid(x - 1, y, s + 1):\n                    self.stars.append((x - 1, y))\n                    self.size_to_stars.setdefault(s + 1, [])\n                    self.size_to_stars[s + 1].append((x - 1, y))\n                    self.solution += 1\n                if self.is_valid(x + 1, y, s + 1):\n                    self.stars.append((x + 1, y))\n                    self.size_to_stars.setdefault(s + 1, [])\n                    self.size_to_stars[s + 1].append((x + 1, y))\n                    self.solution += 1\n                if self.is_valid(x, y - 1, s + 1):\n                    self.stars.append((x, y - 1))\n                    self.size_to_stars.setdefault(s + 1, [])\n                    self.size_to_stars[s + 1].append((x, y - 1))\n                    self.solution += 1\n                if self.is_valid(x, y + 1, s + 1):\n                    self.stars.append((x, y + 1))\n                    self.size_to_stars.setdefault(s + 1, [])\n                    self.size_to_stars[s + 1].append((x, y + 1))\n                    self.solution += 1\n        self.solution = -1\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('good') == ''\n\n\"\"\"\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"good\") == \"0\"\nassert solution(\"aabc\") == \"2\"\nassert solution(\"aaa\") == \"3\"\n\"\"\""
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aabc') == 'ab'\nassert solution('aaaa') == 'a'\nassert solution('abcdefghi') == 'a'\n\n\"\"\"\nimport sys\n\nnumber_of_lines = int(input())\n\nstring = input()\n\ni = 0\n\nwhile i < len(string) - 1:\n    if string[i] == string[i + 1]:\n        string = string[:i] + string[i + 2:]\n    else:\n        i += 1"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('good') == 0\nassert solution('aabc') == 2\nassert solution('aaa') == 3\n\"\"\"\n\n\"\"\"\nSolution 3\n\nMy solution\n\"\"\""
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"good\") == 0\nassert solution(\"string\") == 0\nassert solution(\"xyyx\") == 1\nassert solution(\"aabc\") == 2\nassert solution(\"aa\") == 0\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('good') == 0\nassert solution('aabc') == 2\n\"\"\""
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aabc\") == \"ab\", \"aabc\"\nassert solution(\"aaa\") == \"a\", \"aaa\"\nassert solution(\"aaaaa\") == \"\", \"aaaaa\"\nassert solution(\"\") == \"\", \"empty string\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ab') == 'b'\nassert solution('abb') == 'ba'\nassert solution('abc') == 'b'\n\nassert solution('abcd') == 'c'\nassert solution('abcde') == 'e'\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aabc\") == \"ab\"\nassert solution(\"aaa\") == \"a\"\n\nprint(solution(\"aabc\"))\nprint(solution(\"aaa\"))\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"good\") == \"0\"\nassert solution(\"bad\") == \"2\"\nassert solution(\"aa\") == \"1\"\nassert solution(\"aabc\") == \"2\"\nassert solution(\"aabcccc\") == \"3\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"\n\"\"\"\n\nclass Graph(object):\n    def __init__(self, num_v):\n        self.adj = [[] for _ in range(num_v)]\n        self.num_v = num_v\n        self.num_e = 0\n\n    def add_edge(self, src, dest):\n        self.adj[src].append(dest)\n        self.adj[dest].append(src)\n        self.num_e += 1\n\n    def __str__(self):\n        return f\"Graph [{self.num_v} vertices, {self.num_e} edges]\"\n\n    def __repr__(self):\n        return f\"Graph [{self.num_v} vertices, {self.num_e} edges]\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"\n\n\n'''"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin_text) == answer_text"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == 'YES\\n10100'\nassert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == 'NO'\n\n\"\"\"\nimport sys\nimport queue\n\nclass Solution:\n    def __init__(self):\n        self.visited = set()\n        self.q = queue.Queue()\n        self.has_cycle = False\n\n    def clear(self):\n        self.visited = set()\n        self.q = queue.Queue()\n        self.has_cycle = False\n\n    def build_graph(self, edges):\n        graph = {}\n        for e in edges:\n            u, v = e\n            if u not in graph:\n                graph[u] = []\n            if v not in graph:\n                graph[v] = []\n            graph[u].append(v)\n            graph[v].append(u)\n        return graph\n\n    def dfs(self, graph, v, parent, is_back):\n        self.visited.add(v)\n        self.q.put(v)\n        for u in graph[v]:\n            if u == parent:\n                continue\n            if u in self.visited:\n                self.has_cycle = True\n                return\n            if not is_back:\n                self.dfs(graph, u, v, True)\n        if is_back:\n            self.q.get()\n\n    def has_two_paths(self, graph):\n        for v in graph:\n            if v not in self.visited:\n                self.dfs(graph, v, None, False)\n                if self.has_cycle:\n                    return True\n        return False\n\n    def orientation(self, edges):\n        edges = list(edges)\n        graph = self.build_graph(edges)\n        if not self.has_two_paths(graph):\n            return ''.join('1' if edge[0] < edge[1] else '0' for edge in edges)\n        return 'NO'\n\n    def solution(self, stdin):\n        n, m = [int(x) for x in stdin.split()]\n        edges = []\n        for _ in range(m):\n            edges.append([int(x) for x in stdin.split()])\n\n        return self.orientation(edges)"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == 'NO'\nassert solution(\"7 3\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 1\") == 'YES\\n10110'\nassert solution(\"7 3\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 1\") == 'YES\\n10110'\n\"\"\"\nimport collections\n\nfrom typing import List\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\\n') == 'YES\\n10100'\n\nassert solution('8 5\\n2 1\\n3 2\\n5 4\\n6 1\\n3 6\\n3 1\\n4 3\\n2 5\\n') == 'NO\\n'\n\nassert solution('10 20\\n7 9\\n2 8\\n8 1\\n6 6\\n7 5\\n4 5\\n4 10\\n8 8\\n2 2\\n7 3\\n7 4\\n9 2\\n7 7\\n4 4\\n9 10\\n') == 'YES\\n101001100100'\n\nassert solution('10 20\\n7 9\\n2 8\\n8 1\\n6 6\\n7 5\\n4 5\\n4 10\\n8 8\\n2 2\\n7 3\\n7 4\\n9 2\\n7 7\\n4 4\\n9 10\\n') == 'NO\\n'\n\n-----\nThe idea:\n\nAs you can see, we will want to construct a bipartite graph and find if it can be oriented in such a way, that it won't contain any paths of length at least two.\n\nSo, if you understand the problem, think in a breadth-first way of how you can construct the graph:\n\n1. We create the graph. We store it as a dictionary of dicts.\n   {edge1: {edge2: {edge3: {...}, edge4: {...}}, edge5: {edge6: {...}},...},...}\n   (note: edges = nodes)\n\n2. Now we want to create the bipartite graph.\n   We have to \"attach\" the edges from the original graph to the neighbors.\n   We need to know how many neighbors there are for each vertex.\n   I use a dictionary for that: {vertex: neighbor1, neighbor2,...}\n   I can iterate over the list of vertices and for each of them I add the number of its neighbors.\n   \n3. Now we want to create a list of edges that we want to keep.\n   We want to keep all the edges that start with the neighbors of the vertices.\n   So, we have to create a list of edges from the dictionary of dicts of edges and\n   we iterate over each of them and if it starts with one of the neighbors,\n   then we append it to the list of edges.\n   \n   If you know a bit about bipartite graphs, you can notice, that each of the edges\n   from the original graph will be replaced by two edges in the bipartite graph.\n   For example, if we have an edge between vertices 1 and 3,\n   in the bipartite graph we will have two edges: {1, 3} and {3, 1}\n   (note: edges = vertices)\n\n4. Now we will want to convert the list of edges to a string,\n   because we need to output the answer in the form of a binary string.\n   \n   For example, the list of edges in the example above is:\n   [{1, 3}, {3, 1}]\n   \n   So, we want to convert it to: 10100\n\nAs you can see, it is a little bit tricky, but I believe that\nthis is a breadth-first solution.\n\n-----"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"6 5\n1 5\n2 1\n1 4\n3 1\n6 1\"\"\") == \"YES\\n10100\"\n\nassert solution(\"\"\"5 3\n1 5\n2 1\n1 4\n3 1\n5 3\"\"\") == \"NO\"\n\nassert solution(\"\"\"8 12\n1 5\n2 1\n1 4\n2 5\n3 1\n4 1\n4 5\n5 6\n5 7\n6 8\n7 8\"\"\") == \"YES\\n101100\"\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1') == 'YES\\n10100'\n\"\"\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 7') == '0'\nassert solution('2 2') == '2'\nassert solution('1 7') == '0'\n\"\"\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"5 5\\n1 2\\n5 5\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"1 1\\n1 1\") == \"0\"\nassert solution(\"1 2\\n2 2\") == \"0\"\nassert solution(\"1 2\\n1 2\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\n\"\"\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"1 3\\n1 4\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_str_1) == test_output_str_1\nassert solution(test_input_str_2) == test_output_str_2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n1 2\\n5 5\") == '2\\n3 4'\nassert solution(\"1 7\\n1 7\") == '0'\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 7\\n1 7\") == \"0\"\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 9 2 3') == 2\nassert solution('4 9 2 4') == 0\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 9 2 3') == 2\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 9 2 3\") == \"2\"\n\"\"\"\nfrom functools import reduce"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '4 9 2 3'\n) == 2\n\"\"\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 9 2 3') == 2\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 9 2 3') == 2, 'fails'\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 9 2 3') == '2'\n\"\"\"\nfrom math import gcd\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 9 2 3\") == 2\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 9 2 3\") == 2\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\n----"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"12345678\") == \"No\"\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"987654321\") == \"No\"\nassert solution(\"9\") == \"Yes\"\nassert solution(\"10\") == \"No\"\nassert solution(\"8\") == \"Yes\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('2222222222222222') == 'No'\nassert solution('5') == 'Yes'\nassert solution('12') == 'No'\nassert solution('1') == 'Yes'\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('123456789') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('123456789') == 'Yes'\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('123456788') == 'No'\nassert solution('1') == 'Yes'\nassert solution('0') == 'No'\nassert solution('111111111') == 'Yes'\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('123456789') == 'Yes'\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('123456789') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('1234456789') == 'No'\n\"\"\"\nimport sys"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('127') == '4'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\n\ncount = 0\nwhile N > 0:\n    if N % 9 == 0:\n        count += N // 9\n        break\n    count += 1\n    N -= 1\nprint(count)\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('127') == '4'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('127') == '4'\n\n-------\n\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == ''\nassert solution('3') == ''\nassert solution('4') == ''\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('127') == '4'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"127\") == \"4\"\nassert solution(\"3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('127') == '4'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('hey') == 'hye'\nassert solution('hye') == 'hey'\nassert solution('o') == 'o'\nassert solution('x') == 'x'\nassert solution('a') == 'a'\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"No\"\n\n\"\"\"\n\n\n\"\"\"\nAlgorithm\n\nYou are given a string S and T consisting of lowercase English letters.\nDetermine if S equals T after rotation.\nThat is, determine if S equals T after the following operation is performed some number of times:\nOperation: Let S = S_1 S_2... S_{|S|}. Change S to S_{|S|} S_1 S_2... S_{|S|-1}.\nHere, |X| denotes the length of the string X.\n\n-----Constraints-----\n - 2 \\leq |S| \\leq 100\n - |S| = |T|\n - S and T consist of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\nT\n\n-----Output-----\nIf S equals T after rotation, print Yes; if it does not, print No.\n\n-----Sample Input-----\nkyoto\ntokyo\n\n-----Sample Output-----\nYes\n\n - In the first operation, kyoto becomes okyot.\n - In the second operation, okyot becomes tokyo.\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\nassert solution(\"tokyo\") == \"kyoto\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('kyoto') == 'tokyo'\nassert solution('tokyo') == 'kyoto'\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nS, T = stdin.split('\\n')\nS = list(S)\nT = list(T)\n\ni = 0\nwhile i < len(S):\n    S[i] = S[i][::-1]\n    i += 1\n\nprint('Yes' if S == T else 'No')\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcde\") == \"deabc\"\nassert solution(\"qrstu\") == \"uqrst\"\nassert solution(\"abc\") == \"cba\"\nassert solution(\"qwertyuiopasdfghjklzxcvbnm\") == \"zxcvbnmuytrewqpaefgjklohi\"\nassert solution(\"qwertyuiop\") == \"zxcvbnmuytrewqpaefgjkl\"\n\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"tokyo\") == \"kyoto\"\nassert solution(\"kyoto\") == \"tokyo\"\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abc', 'cab') == 1\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(s) == ans"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('cabacc') == 1\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == 1\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('aaaa') == ''\nassert solution('aabbc') == ''\nassert solution('abbca') == '1'\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('cabacc') == '1'\nassert solution('abc') == '0'\nassert solution('s') == '0'\n\nprint('All test cases passed.')\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"cabacc\") == \"1\"\nassert solution(\"abc\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('cabacc') == 1, 'Wrong output'\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('cabacc') == '1'\n\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcd', 'a') == 1\nassert solution('a', 'a') == 0\nassert solution('abc', 'abc') == 0\nassert solution('aaaa', 'a') == 0\nassert solution('abcd', 'a') == 1\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 12 2') == '2'\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1\") == 1\n\n\"\"\"\n\n\"\"\"\n\uc5ec\uae30\uc11c \ub098\uc628 \uc22b\uc790\ub294 \uc18c\uc218\uc774\ub2e4.\n\uadf8\ub798\uc11c \uc18c\uc218\uac00 \uc544\ub2c8\ub2e4.\n\ubcc0\uc218 \uc774\ub984\uc744 \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc11c \ub3cc\ub824\ubc84\ub9ac\uae30\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 12 2\\n\") == \"2\"\n\"\"\"\n\na, b, k = input().split()\na, b = int(a), int(b)\nk = int(k)\n\nlst = list(filter(lambda x: x > 0 and a % x == 0 and b % x == 0, range(1, a // 2 + 1)))\nlst.sort(reverse=True)\nprint(lst[k-1])\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 12 2') == '2'\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_1) == test_output_1\n\ntest_input_2 = stdin(test_input_2)\nassert solution(test_input_2) == test_output_2\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 12 2') == 2\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 12 2\\n\") == \"2\"\n\"\"\"\nfrom math import sqrt\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 12 2') == '2'\n\"\"\"\nfrom math import gcd\n\nA, B, K = list(map(int, stdin.split()))\nprint(gcd(A, B) * (K - 1) // (A + B) + 1)\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 7 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1024') == '2020'"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1024') == '2020'\n\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1024') == '2020'\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1024') == '2020'\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1024') == 2020\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1024') == '2020'\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1024') == '2020'\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\n\n\"\"\"\n\nimport sys\n\nfrom math import inf"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline().rstrip())\nx = list(map(int, stdin.readline().rstrip().split()))\n\nprint(sum((i - min(x)) ** 2 for i in x))\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 4\") == \"5\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 4\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n3 2 3') == '3\\n2'\nassert solution('4\\n2 1 4 2') == '4\\n1'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 4') == '5'\n\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 4') == '5'\n\"\"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == b\n\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"4 10\"\n) == \"3\"\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 10\") == \"3\"\n\"\"\"\n\na, b = map(int, stdin.split())\ns = 0\nwhile a > b:\n    s += a // b\n    a = a % b\nprint(s + a)\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10\") == 3\n\"\"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10\") == \"3\"\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 10') == '3'\n\"\"\"\nimport sys\nfrom math import ceil"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 10') == '3'\n\n'''\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 10\") == 3\nassert solution(\"4 20\") == 2\nassert solution(\"4 50\") == 1\nassert solution(\"4 100\") == 0"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 10''') == '3'\nassert solution('''20 10''') == '1'\nassert solution('''2 3''') == '2'\n'''\n'''\n)\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 10\") == \"3\"\nassert solution(\"4 0\") == \"0\"\nassert solution(\"10 1\") == \"0\"\nassert solution(\"20 20\") == \"0\"\nassert solution(\"2 10\") == \"0\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '2'\n\"\"\"\n\ns, t = input(), input()\n\ncnt = 0\nfor i in range(3):\n    if (s[i] == t[i]):\n        cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('CSS') == 2\nassert solution('CSR') == 1\n\n----\n\nWrite a function that takes in a string of one or more words,\nand returns the same string, but with all five or more letter words reversed.\nStrings passed in will consist of only letters and spaces.\nSpaces will be included only when more than one word is present.\n\n-----Constraints-----\n - The string consists of one or more words that consist of only letters and spaces\n - No string will contain any numbers or special characters\n\n-----Input-----\nInput is taken from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the reversed string to the Standard Output\n\n-----Sample Input-----\nThe quick brown fox jumped over the lazy dog.\n\n-----Sample Output-----\n.owk qck brwn fx jmped ver over thlzy dg\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"CSS\") == 2\nassert solution(\"CSR\") == 0"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('CSS') == 2\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('CSS') == 2\n\n---------------------------------------------------------------------------------------------------------------------------------------\n\nCompile:\npython3 solution.py\n\nTest:\npython3 -m unittest solution_unittest\n\nSolution:\npython3 solution.py\n\n---------------------------------------------------------------------------------------------------------------------------------------\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(['CSS', 'CSR', 'CCS']) == 2\n\"\"\"\n\nfrom typing import Tuple, List\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('CSS') == 2\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"CSC\") == \"3\"\nassert solution(\"CSS\") == \"2\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"1\"\n\n------Solution------\ns = stdin[0]\nt = stdin[1]\n\ncorrect = 0\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        correct += 1\n\nprint(correct)\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"CSS\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    5\n    1 3 5 4 2\n    \"\"\"\n) == \"2\"\n\n---\n\n> get_first_and_third(numbers)\n>\n>     Return a tuple with the first and third largest elements in numbers.\n>\n>     Numbers is a list of integers.\n>\n>     The order of the largest two elements is not important.\n>\n>     The first and third largest are equal.\n>\n>     Example:\n>         get_first_and_third([4, 1, 2, 3])  # (1, 3)\n>\n>     Time Complexity:\n>         O(n)\n>\n>     Space Complexity:\n>         O(1)"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 5 2') == 2\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 3 5 4 2') == 2\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 3 5 4 2') == 2\nassert solution('3\\n1 3 5 4 2') == 0\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n1 3 5 4 2''') == '2'\nassert solution('''3\n1 3 5 4''') == '0'\n\n'''\n4. Read two integers and print the sum of their inverses.\n\n-----Input-----\nThe first line contains T, the number of test cases.\nThe first line of each test case contains two integers, N and M.\n\n-----Output-----\nPrint the sum of the inverses of N and M, rounded to a scale of decimal place.\n\n-----Sample Input-----\n2\n2 4\n3 6\n\n-----Sample Output-----\n1\n1\n'''"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 3 5 4\") == \"2\"\n\"\"\"\n\nn = int(stdin.readline().strip())\narr = list(map(int, stdin.readline().split()))\n\ni = 0\nj = 1\ncount = 0\n\nwhile j < n:\n    if arr[i] > arr[j] and arr[i] > arr[j + 1]:\n        count += 1\n    i += 1\n    j += 1\n\nprint(count)\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 3 5 4 2\") == 2\n\"\"\"\n\nn = int(input())\np = sorted(map(int, input().split()))\n\ncount = 0\nfor i in range(1, n - 1):\n    if p[i] < p[i - 1] < p[i + 1]:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 1 3 4\") == \"2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3 5 4 2') == 2\n\n\"\"\"\n\nimport heapq\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n1 3 5 4 2''') == 2\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10''') == 6\n\n'''\nSample Input 1\n\n5\n1 3 5 4 2\n\nSample Output 1\n\n2\n\nSample Input 2\n\n5\n10 9 8 7 6\n\nSample Output 2\n\n6\n\nSample Input 3\n\n2\n10 10\n\nSample Output 3\n\n0\n'''\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n\") == '5.410'\n\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\\n\") == '5.620'\n\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\\n\") == '6.040'\n\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\\n\") == '6.040'\n\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\\n\") == '6.720'\n\nprint(solution('7'))"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"6.040\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.720\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n') == '5.410'\nassert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\\n') == '5.620'\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\\n') == '6.040'\nassert solution('7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\\n') == '6.720'\n\"\"\"\n\nn = int(input())\n\npoints = []\nfor i in range(n):\n    points.append(list(map(float, input().split())))\n\nprint('{:.2f}'.format(math.sqrt((points[0][0] - points[1][0]) ** 2 + (points[0][1] - points[1][1]) ** 2)))"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n\") == \"5.410\"\n\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\\n\") == \"5.620\"\n\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\\n\") == \"6.040\"\n\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\\n\") == \"6.720\"\n\n\"\"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"6.040\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.720\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"\n\"\"\"\n\nn = int(stdin.readline().strip())\np = []\nfor i in range(n):\n    x, y = list(map(float, stdin.readline().split()))\n    p.append((x, y))\n\nx, y = zip(*p)\n\ndx = x[1] - x[0]\ndy = y[1] - y[0]\n\ns = abs(dx / dy)\nt = 1 / (2 * s)"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\\n\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\\n\") == \"6.040\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\\n\") == \"6.720\"\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n\") == \"5.410\"\n\nprint(solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\"))\n\nprint(solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\"))\n\nprint(solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\"))\n\nprint(solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\"))\n\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.040\"\n\nprint(solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\"))\n\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.040\"\n\nprint(solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\"))\n\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.040\"\n\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.040\"\n\nprint(solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\"))"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62') == '5.410'\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76') == '5.480'\nassert solution('8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92') == '6.040'\nassert solution('8\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04') == '6.720'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"6.040\"\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == \"6.720\"\n\n\"\"\"\n\nimport re\nfrom typing import List\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == '5.410'\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\") == '5.620'\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == '5.480'\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == '6.040'\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == '6.720'\n\"\"\""
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 10\\n1 3 4 2 1 4 2\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\nassert solution(\"5 16\\n5 5 5 5 5\") == '2'\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\n\n-----Comments-----\nThe idea of the solution is to compute the maximal number of pages Polycarp can write, and then to find the smallest number of days that is required to finish writing that number of pages in the worst case.\n\nIf the maximal number of pages is equal to the number of pages in the coursework, then the number of days is equal to the number of cups of coffee.\n\nIf the maximal number of pages is less than the number of pages in the coursework, then the number of days is equal to the number of cups of coffee minus the maximal number of pages that Polycarp can write in a day.\n\nIf the maximal number of pages is greater than the number of pages in the coursework, then the number of days is equal to the number of cups of coffee minus the maximal number of pages that Polycarp can write in a day minus one.\n\nHow can we compute the maximal number of pages Polycarp can write in a day?\n\nIf we sort the cups of coffee in descending order, then the maximal number of pages that Polycarp can write is the number of cups of coffee.\n\nIf we sort the cups of coffee in ascending order, then the maximal number of pages that Polycarp can write is equal to the number of cups of coffee minus one.\n\nIf we sort the cups of coffee in descending order, then the maximal number of pages that Polycarp can write is equal to the number of cups of coffee minus one.\n\nThus we can determine the maximal number of pages that Polycarp can write in a day by sorting the cups of coffee and then subtracting the number of cups of coffee minus one, which is equal to the number of cups of coffee."
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input_test_data) == expected_test_result\nprint('expected:'+ str(expected_test_result))\nprint('actual:'+ str(solution(input_test_data)))\n\"\"\"\n\nn, m = input().split(' ')\nn, m = int(n), int(m)\narr = [int(i) for i in input().split(' ')]\ndays = 1\nmax_i = max(arr)\n\nfor i in range(n):\n    if arr[i] == max_i:\n        days += 1\n        max_i -= 1\n        if max_i == 0:\n            break\n\nprint(days if max_i == 0 else -1)\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\n\"\"\""
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\\n\") == \"4\"\n\nassert solution(\"7 10\\n1 3 4 2 1 4 2\\n\") == \"2\"\n\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == \"1\"\n\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"-1\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '2'\n\n\"\"\""
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == \"1 1\"\n\"\"\""
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1 2 3'\nassert solution('1 2 1 1 2 1 1 2 1 2 1 1 1 1') == '1 1'\nassert solution('1 2 3 2 1 3 1') == '1 2 3 2 1 3 1'\n\n-------\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3\") == '1 2 3'\nassert solution(\"10 4\") == '1 3 1 3'\nassert solution(\"15 2\") == '1 1'\n\n\n-----Solution-----\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3') == '1 2 3'\nassert solution('10 4') == '7 3 1 3'\nassert solution('15 2') == '1 1'\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n1 2 1 2 1 2 1 1\") == \"1 1\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == \"1 1\""
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"1 3 1 3\"\nassert solution(\"15 2\") == \"1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 2 4 3 1\\n\") == \"1 2 3\"\nassert solution(\"1 2 3 2 4 3 1\\n2 2 1 1 1 2 1 1 2 1 2 1 1 1 1\\n\") == \"7 3 1 3\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == '1 2 3'\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == '7 3 1 3'\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == '1 1'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"7 3 1 3\"\nassert solution(\"15 2\") == \"1 1\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\") == \"3\"\n\n\n'''\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == 5\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == 0\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == 3\n\"\"\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4') == '3'\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4') == '3'\nassert solution('4 2\\n1 2 3 4\\n10 3 7 3') == '0'\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\") == \"3\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 2 3\\n4 5 6\") == \"3\"\nassert solution(\"2 2\\n1 1\") == \"0\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"2 2\\n1 1\\n3 3\") == \"2\"\nassert solution(\"5 5\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nassert len(sys.argv) == 2\nlines = sys.stdin.readlines()\n\nn, m = map(int, lines[0].split())\nmatrix = [[int(i) for i in lines[j].split()] for j in range(1, n + 1)]\n\nk = 0\nfor row in matrix:\n    freq = Counter(row)\n    for i in range(1, len(row)):\n        if abs(row[i] - row[i - 1]) >= k:\n            k = max(k, abs(row[i] - row[i - 1]))\nprint(k)\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 2\n9 9\n10 8\n5 3\n4 3''') == \"5\"\nassert solution('''2 4\n1 2 3 4\n10 3 7 3''') == \"0\"\nassert solution('''6 1\n3\n6\n2\n5\n1\n4''') == \"3\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4') == '3'\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\\n\") == \"5\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\\n\") == \"3\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\\n\") == \"0\"\nassert solution(\"2 3\\n3 3\\n3 3\\n\") == \"0\"\n\n\n'''\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('xxxiii') == '1'\nassert solution('xxoxx') == '0'\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"xxxxx\") == \"1\"\nassert solution(\"xxixx\") == \"0\"\nassert solution(\"xxoxx\") == \"8\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"exxxii\") == 1\nassert solution(\"xxxixxx\") == 0\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_str) == expected\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xxxiii\") == 1\n\nassert solution(\"xxoxx\") == 0\n\nassert solution(\"xxxxxxxxxx\") == 8\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('xxxiii') == 1\nassert solution('xxoxx') == 0\nassert solution('xxxxxxxxxx') == 8\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('xxxiii') == 1\nassert solution('xxoxx') == 0\nassert solution('xxxxxxxxxx') == 8\nassert solution('xxxiii') == 1\nassert solution('xxoxx') == 0\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"xxxiii\") == '1'\nassert solution(\"xxxx\") == '0'\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"xxii\") == \"1\"\nassert solution(\"xxx\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '48'\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == \"12\"\nprint(solution(4))\n\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n\"\"\"\n\n\"\"\"\nint r\n\nint x\n\nr = int(input())\nx = r*r*3\nprint(x)\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == 48\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '48'\n\nprint(solution('4'))\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n') == '48'\n\n\"\"\"\nimport sys\nimport os\n\nDEBUG_MODE = True\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '48'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '48'\nassert solution('3') == '18'\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '48'\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == '48'\nassert solution('3') == '27'\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\n') == 'unsafe'\n\"\"\"\n\nS, W = map(int, input().split())\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5') == 'unsafe'\nprint(solution('4 5'))\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5') == 'unsafe'\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\nassert solution(\"4 3\") == \"safe\"\nassert solution(\"100 100\") == \"unsafe\"\nassert solution(\"1 1\") == \"safe\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\"\"\"\n\na, b = map(int, input().split())\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n\") == \"unsafe\"\nassert solution(\"4 6\\n\") == \"safe\"\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5') == 'unsafe'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5') == 'unsafe'\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 4 5\n''') == '6'\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 5') == '6'\n\"\"\"\n\na, b, c = map(int, stdin.split())"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\n-----"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\") == '6'\n\"\"\"\n\nimport sys\n\na, b, c = (int(i) for i in sys.stdin.read().split())\n\nprint(a * b / 2)\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 5\") == '6'\n\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nprint(\"Passed!\")\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 5') == 6\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n\na, b, c = [int(s) for s in input().split()]"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 11 4\\n') == '4'\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 11 4\\n') == '4', 'error'\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\\n\") == 1\n\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(4, 11, 4) == 4\n\"\"\"\n\nfrom math import ceil, floor\nfrom decimal import Decimal, getcontext\n\ngetcontext().prec = 100\n\na, b, c = map(int, input().split(' '))\n\nf = ceil(Decimal(a / b))\n\nprint(floor((b * (f - 1)) / a))\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 11 4\") == 4\n\"\"\"\n\n\"\"\"\nThis solution may be broken into three:\n\n1) Take the input.\n2) Separate the input into its three components: A, B, and C.\n3) Convert each input component to an integer.\n4) Return the product of the three integers.\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 11 4') == '4'\n\"\"\"\n\nA, B, C = input().split(' ')\nA = int(A)\nB = int(B)\nC = int(C)\n\nx = (A - 1) // B\nz = (A - 1) % B\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 10 5') == '5'\nassert solution('2 4 2') == '0'\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 11 4\\n\") == \"4\"\n\"\"\"\n\nA, B, C = [int(i) for i in stdin.readline().split()]\n\nresult = 0\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '2 11 4'\n) == '4'\n\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"4 5\") == \"20\"\nassert solution(\"9 9\") == \"81\"\nassert solution(\"2 3\") == \"6\"\nassert solution(\"1 2\") == \"2\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5\\n') == 10\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5') == '10'\nprint(solution('2 5'))\n'''\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\") == \"10\"\nprint(solution(\"2 5\"))\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 5') == '10'\n'''\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5') == '10'\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"10\"\nassert solution(\"1 2\") == \"2\"\n\n\"\"\"\nimport ast\nimport sys"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5') == '10'\nassert solution('2 5') == '10'\n\"\"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\"\n\na, b, t = [int(x) for x in stdin.split()]\n\nc = int((t + 0.5) / a)\nd = int((t + 0.5) / (a * 2))\ne = int((t + 0.5) / (a * 3))\n\nprint(c - d + e)"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3, 5, 7) == 10\n\"\"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5 7') == '10'\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\"\n\nA, B, T = [int(num) for num in stdin.split()]\n\nseconds = 0\ntotal_biscuits = 0\n\nwhile True:\n    seconds += 1\n    if seconds % A == 0:\n        total_biscuits += B\n    if seconds >= T + 0.5:\n        break\n\nprint(total_biscuits)\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5 7') == '10'\n\"\"\"\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 7') == '10'\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"OK\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == \"OK\"\n\"\"\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\nassert solution(\"7 600 567\") == \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n500 600\") == \"OK\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\nassert solution(\"2 4\") == \"NG\"\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n500 600') == 'OK'\nassert solution('5\\n917 333') == 'NG'\n\"\"\"\nK, A, B = [int(x) for x in stdin.split('\\n')]\nlst = range(A, B+1)\nfor x in lst:\n    if x % K == 0:\n        print('OK')\n        break\nelse:\n    print('NG')\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('567\\n500 600') == 'OK'\n\"\"\"\n\nimport sys\n\nA, B, K = [int(x) for x in input().split()]\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('567 678') == 'OK'\nassert solution('854 -987') == 'NG'\nassert solution('862 -887') == 'OK'\nassert solution('-5 -8') == 'NG'\nassert solution('-5 -1') == 'OK'\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n500 600') == 'OK'\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(sys.stdin.read())) == str(sys.stdin.read())\n\"\"\"\n\n\n\"\"\"\nTakahashi the Jumbo will practice golf.\nHis objective is to get a carry distance that is a multiple of K, while he can only make a carry distance of between A and B (inclusive).\nIf he can achieve the objective, print OK; if he cannot, print NG.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq A \\leq B \\leq 1000\n - 1 \\leq K \\leq 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nK\nA B\n\n-----Output-----\nIf he can achieve the objective, print OK; if he cannot, print NG.\n\n-----Sample Input-----\n7\n500 600\n\n-----Sample Output-----\nOK\n\nAmong the multiples of 7, for example, 567 lies between 500 and 600.\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 3') == '2.6666666667'\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n0\") == \"1\"\nassert solution(\"1 2\\n0\") == \"1\"\nassert solution(\"3 1\\n0\") == \"3\"\nassert solution(\"3 2\\n0\") == \"2\"\nassert solution(\"3 3\\n0\") == \"1\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 3') == '2.6666666667'\n\"\"\"\n\nimport sys\n\nT, X = [int(s) for s in sys.stdin.read().splitlines()]\n\nt = 0\n\nwhile t < T:\n    t *= X\n\nprint(t/T)\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 3\\n') == '2.6666666667'\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3\\n') == '2.6666666667'\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\nprint(\"PASSED\")\n\n\"\"\"\n\nfrom math import *"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\"\nassert solution(\"8 2\\n\") == \"2.5\"\nassert solution(\"7 2\\n\") == \"2.0\"\nassert solution(\"1 1\\n\") == \"1.0\"\nassert solution(\"100 100\\n\") == \"0.0\"\n\"\"\"\n\nT, X = map(int, input().split())"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3') == '2.6666666667'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 4 3\") == '1'\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 4 3') == '1'\n'''"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 4 3') == '1'\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 4 3') == '1'\nassert solution('4 4 4') == '0'\nassert solution('6 0 4') == '0'\n\n-----\n\n\"\"\"\n\nA, B, C = input().split()\nA = int(A)\nB = int(B)\nC = int(C)"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 4 3') == '1'\n\"\"\"\n\na, b, c = [int(num) for num in stdin.split()]\nprint(c-max(0,b-a))\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 1') == '1'\nassert solution('20 10 10') == '10'\nassert solution('20 20 10') == '0'\nassert solution('6 5 5') == '0'\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 4 3') == '1'\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\nassert solution(\"5\\n1 3 2 5 4\") == \"2\"\nassert solution(\"5\\n2 5 1 3 4\") == \"1\"\n\n-------"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 2 4\\n4 1 3 2\") == \"2\"\nassert solution(\"4\\n1 2 3 4\\n4 1 2 3\") == \"1\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3 2 5 4\") == \"3\"\nassert solution(\"6\\n1 5 3 2 6 4\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(solution(input()))\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\nassert solution(\"3\\n1 1 2\\n3 1 2\") == \"0\"\nassert solution(\"3\\n1 2 3\\n2 1 3\") == \"1\"\nassert solution(\"3\\n1 2 2\\n3 1 2\") == \"1\"\nassert solution(\"3\\n1 3 2\\n2 1 3\") == \"0\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 3 2\\n3 1 2') == '3'\n\"\"\"\nfrom collections import deque\nfrom math import factorial"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1 3 2\n3 1 2''') == '3'\nassert solution('''3\n3 1 2\n1 3 2''') == '3'\nassert solution('''4\n1 3 2 4\n3 1 4 2''') == '3'\nassert solution('''2\n1 3\n3 1''') == '1'\nassert solution('''4\n1 4 2 3\n3 1 2 4''') == '1'\n\nSolution.main(solution)\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ATCODER') == 3\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ATCODER') == 'ATC'\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ATCODER') == 3\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ATCODER\") == 3\nassert solution(\"AATCODER\") == 5\nassert solution(\"AACODER\") == 3\nassert solution(\"AAACODER\") == 4\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ATCODER') == 3\n\"\"\"\n\n\"\"\"\nGiven an input string consisting of uppercase English letters, find the length of the longest ACGT string that is a substring (see Notes) of S.\n\nNote:\nACGT string is a string that contains no characters other than A, C, G and T.\n\nExample:\nS = ATCODER\n\nThe longest ACGT string that is a substring of S is ATC\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ATCODER\") == \"ATC\"\nassert solution(\"CATCODER\") == \"ATC\"\nassert solution(\"CATCODER\") == \"ATC\"\nassert solution(\"AAC\") == \"AAC\"\nassert solution(\"AAAC\") == \"AAAC\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ATCODER\") == \"ATC\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11') == '9'\nassert solution('10') == '0'\nassert solution('12') == '2'\nassert solution('5') == '0'\n\"\"\"\n\nfrom math import ceil, log10\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(11) == 9\n\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '11'\n) == '9'\nprint(solution(input()))\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == '9'\n\n----------\n-------\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == '9'\n\"\"\"\nfrom math import ceil\nfrom functools import reduce\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11') == '9'\n\"\"\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11') == '9'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('11') == '9'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"cupofcoffee\") == \"coffee\"\nassert solution(\"cupofhottea\") == \"hottea\"\nassert solution(\"cupsofcoffee\") == \"coffee\"\nassert solution(\"cupsofhottea\") == \"hottea\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"cupofcoffee\") == \"hotteacupofcoffee\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\n\"\"\"\n\nimport sys\n\nS = sys.stdin.readline().strip()\nT = sys.stdin.readline().strip()"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea'\n\n\"\"\"\n\nfrom string import ascii_lowercase\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"cupofcoffee\") == \"cuphofhottea\"\nassert solution(\"abcdef\") == \"abcdef\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('cupofcoffee') == 'hotteacupofcoffee'\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"cupofcoffee\") == \"cuphottea\"\nassert solution(\"cupofhottea\") == \"cuphottea\"\nassert solution(\"\") == \"\"\nassert solution(\"a\") == \"a\"\nassert solution(\"a\" * 100) == \"a\" * 100\n\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea'\nassert solution('foo') == 'bar'\nassert solution('xy') == 'yx'\nassert solution('x') == 'y'\nassert solution('z') == 'z'\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 7') == '5 6 7 8 9'\n\"\"\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\") == \"8 4 7\", \"WA-1\"\nassert solution(\"7 5\") == \"8 5 7 9\", \"WA-2\"\nassert solution(\"10 10\") == \"10 10\", \"WA-3\"\nassert solution(\"3 1\") == \"1 1\", \"WA-4\"\nassert solution(\"2 3\") == \"2 3\", \"WA-5\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 7\\n\") == \"5 6 7 8 9\"\nassert solution(\"3 5\\n\") == \"6 7\"\n\"\"\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7\\n\") == \"5 6 7 8 9\"\n\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\n\"\"\"\n\nfrom math import ceil, log10"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 7') == '5 6 7 8 9'\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 3') == ''\nassert solution('1 1') == '1'\nassert solution('4 3') == '3'\nassert solution('5 1') == '5'\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 7') == '5 6 7 8 9'\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\") == \"5 6 7 8 9\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"25\") == \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 'Yes'\nassert solution('3') == 'Yes'\nassert solution('5') == 'Yes'\nassert solution('10') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('25') == 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('25') == 'No'\n\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('25') == 'No'\nassert solution('1') == 'Yes'\n\"\"\"\n\nX = int(input())\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'No'\nassert solution('12') == 'Yes'\nassert solution('-12') == 'No'\nassert solution('-12') == 'No'\nassert solution('-20') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == 'No'\nassert solution('30') == 'Yes'\nassert solution('25') == 'Yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('25') == 'No'\n\"\"\"\n\ntemperature = int(input())"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('25') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"25\") == \"No\"\n\nassert solution(\"15\") == \"Yes\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('5 5') == 1\nassert solution('2 2') == 0\n\"\"\"\nimport math"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1500)\n\ninput = sys.stdin.read()\ndata = list(map(int, input.split(\"\\n\")))\n\nn, d = data[0:2]\n\nx = data[2:n + 2]\n\nfor i in range(0, n):\n    for j in range(i + 1, n):\n        dx = x[i] - x[j]\n        if dx == 0:\n            print(\"1\")\n            return\n        elif dx == 1 or dx == -1:\n            continue\n        else:\n            m = dx ** 0.5\n            if m == int(m):\n                print(\"1\")\n                return\n\nprint(\"0\")\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\n\"\"\"\n\n\n\"\"\"\nWrite a Python program to count the number of strings where the string length is 2 or more, and the first and last character are same from a given list of strings.\nSample List : ['abc', 'xyz', 'aba', '1221']\nExpected Result : 2\n\"\"\""
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 2\\n1 1\") == \"1\"\nassert solution(\"3 3\\n1 1\\n2 2\\n3 2\") == \"1\"\n\n-----Problem-----\nThe number of pairs (i, j) (i < j) such that the distance between the i-th point and the j-th point is an integer, when the points are located in a D-dimensional space is known.\n\nInput Format\nThe first line contains the number of points, N.\nThe next N lines contain two integers each, Xij and Yij, which are the coordinates of the i-th point and the j-th point, respectively.\n\nOutput Format\nPrint the number of pairs (i, j) (i < j) such that the distance between the i-th point and the j-th point is an integer.\n\nSample Input\n3\n1 2\n2 3\n1 1\n\nSample Output\n2\n\nExplanation\nThe distance between the first point and the second point is |1-2| + |2-3| = \\sqrt{5}, which is an integer.\nThe distance between the first point and the third point is |1-1| + |2-2| = \\sqrt{3}, which is not an integer.\n\"\"\""
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1\\n'\n\"\"\"\n\nimport math\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 2\\n2 2') == '1'\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\nassert solution('2 2\\n1 2\\n-2 8') == '0'\nassert solution('2 2\\n1 2\\n3 4') == '0'\n\n------------------------------------------------------------------------------------------------------\nhttps://www.pramp.com/challenge/R61PVZuR5GvmdhWMJX\n\nThere are N coins in a line. Two players take turns to take one or two coins from right side until there are no more coins left. The player who take the last coin wins.\n\nCould you please decide the first player will win or lose?\n\nGiven the number of coins N. Return True if the first player will win.\n\n\n-----Constraints-----\n - 1 \\leq N \\leq 105\n\n-----Input-----\nThe first and only line of input contains the number of coins, N.\n\n-----Output-----\nPrint True if the first player wins and False if the first player loses.\n\n-----Sample Input-----\n4\n\n-----Sample Output-----\nTrue\n\n------------------------------------------------------------------------------------------------------\nhttps://www.pramp.com/challenge/G0b5FZmGzSSC8jA12Yd\n\nYou are given a string. You have to find if the string is a palindrome or not.\n\nThe characters in the string are in lowercase.\n\nInput Format:\nThe only line of input contains the string s.\n\nConstraints:\n1 \\leq |s| \\leq 10^6\n\nOutput Format:\nPrint True if the string is a palindrome otherwise print False.\n\nSample TestCase 1\nInput\n\naba\nOutput\n\nTrue\n\nSample TestCase 2\nInput\n\nabca\nOutput\n\nFalse\n------------------------------------------------------------------------------------------------------\nhttps://www.pramp.com/challenge/R12yBVj2i4Kg8w8qdw\n\nYou are given an array of integers. You have to find and print the product of the k maximal numbers taken from the array.\n\nInput Format\nFirst line of input contains n and k separated by a space.\nSecond line contains array elements.\n\nConstraints\n1 \\leq n,k \\leq 10^5\n1 \\leq A[i] \\leq 10^9\n\nOutput Format\nPrint the product of the k maximal numbers taken from the array.\n\nSample Input 0\n\n5 3\n1 2 3 4 5\nSample Output 0\n\n60\n------------------------------------------------------------------------------------------------------\nhttps://www.pramp.com/challenge/4EZRqTKQxHRMnv7Kxw\n\nGiven a string, find all the permutations of it.\n\nInput Format\nThe first and only line of input contains a string without any leading and trailing spaces.\n\nConstraints\n- 1 \\leq len(string) \\leq 10^5\n\nOutput Format\nPrint all the permutations of the given string on separate lines.\n\nSample Input 0\n\nab\nSample Output 0\n\nab\nba\n------------------------------------------------------------------------------------------------------\nhttps://www.pramp.com/challenge/GYW2Nuq7UdXlDpXqQtJ7\n\nA website requires the users to input username and password to register.\nWrite a program to check the validity of password input by users.\n\nFollowing are the criteria for checking the password:\n1. At least 1 letter between [a-z]\n2. At least 1 number between [0-9]\n1. At least 1 letter between [A-Z]\n3. At least 1 character from [$#@]\n4. Minimum length of transaction password: 6\n5. Maximum length of transaction password: 12\nYour program should accept a sequence of comma separated passwords and will check them according to the above criteria. Passwords that match the criteria are to be printed, each separated by a comma.\n\nExample\nIf the following passwords are given as input to the program:\nABd1234@1,a F1#,2w3E*,2We3345\nThen, the output of the program should be:\nABd1234@1\n\nHints:\nIn case of input data being supplied to the question, it should be assumed to be a console input.\n\n-----Constraints-----\n - Passwords are case-sensitive.\n - They must contain at least 6 characters.\n - They mustn't contain any spaces.\n - They must contain at least one letter between [a-z].\n - They must contain at least one number between [0-9].\n - They must contain at least one letter between [A-Z].\n - They must contain at least one character from [$#@].\n - Maximum length is 12 characters. Minimum length is 6 characters.\n\n-----Input-----\nThe first line of input will consists of the number of test cases.\nEach test case consist of a line of input containing a string.\n\n-----Output-----\nFor each test case, print the valid passwords in a comma-separated sequence on a new line.\n\nSample Input 0\n\n1\nABd1234@1\nSample Output 0\n\nABd1234@1\n------------------------------------------------------------------------------------------------------\nhttps://www.pramp.com/challenge/DkG2YH3s1K5fq2nL5dHU\n\nA website requires the users to input username and password to register.\nWrite a program to check the validity of password input by users.\n\nFollowing are the criteria for checking the password:\n1. At least 1 letter between [a-z]\n2. At least 1 number between [0-9]\n1. At least 1 letter between [A-Z]\n3. At least 1 character from [$#@]\n4. Minimum length of transaction password: 6\n5. Maximum length of transaction password: 12\nYour program should accept a sequence of comma separated passwords and will check them according to the above criteria. Passwords that match the criteria are to be printed, each separated by a comma.\n\nExample\nIf the following passwords are given as input to the program:\nABd1234@1,a F1#,2w3E*,2We3345\nThen, the output of the program should be:\nABd1234@1\n\nHints:\nIn case of input data being supplied to the question, it should be assumed to be a console input.\n\n-----Constraints-----\n - Passwords are case-sensitive.\n - They must contain at least 6 characters.\n - They mustn't contain any spaces.\n - They must contain at least one letter between [a-z].\n - They"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 2\\n5 5\\n-2 8\\n\") == '1'\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('6154') == 'Good'\nassert solution('1654') == 'Bad'\n\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1234\") == \"Bad\"\nassert solution(\"1223\") == \"Good\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1234\") == \"Good\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"1234\") == \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('1234') == 'Good'\nassert solution('1999') == 'Bad'\nassert solution('1111') == 'Bad'\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1234\") == \"Good\"\nassert solution(\"1231\") == \"Bad\"\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2234') == 'Good'\nassert solution('9090') == 'Bad'\nassert solution('9999') == 'Bad'\nassert solution('1234') == 'Bad'\nassert solution('1111') == 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(1234)) == \"Good\"\nassert solution(str(2134)) == \"Good\"\nassert solution(str(2234)) == \"Bad\"\nassert solution(str(2224)) == \"Bad\"\nassert solution(str(1224)) == \"Bad\"\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1234') == 'Good'\nassert solution('1224') == 'Bad'\nassert solution('1099') == 'Good'\nassert solution('1221') == 'Bad'\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('4774') == 'Good'\nassert solution('1234') == 'Bad'\nassert solution('6174') == 'Good'\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3776') == \"Bad\"\nassert solution('2837') == \"Bad\"\nassert solution('1234') == \"Good\"\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n'''\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2') == ''\nassert solution('1 2\\n3 4') == '3.5'\nassert solution('1 2\\n3 4\\n6 5') == '3.5'\nassert solution('1 2\\n3 4\\n6 5\\n7 8') == '3.5'\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\") == \"5\"\nassert solution(\"2 3\") == \"2\"\n\"\"\"\n\n\"\"\"\nimport unittest"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('4 3\\n') == '3.5'\nassert solution('2 3\\n') == '3'\nassert solution('3 2\\n') == '3.5'\nassert solution('4 5\\n') == '4.5'\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(2) + \"\\n\" + str([3, 4])) == str(3.5)\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3 4\") == '3.5'\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n4\n4 4\n''') == '5.5'\nassert solution('''\n4\n2 5\n''') == '3'\nassert solution('''\n5\n1 2 4 4 2\n''') == '4.5'\nassert solution('''\n5\n1 2 3 4 5\n''') == '5.0'\nassert solution('''\n3\n2 1\n''') == '2'\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n3 4') == '3.5'\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n3 4') == '3.5'\nassert solution('1\\n1') == '1.0'\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\n\"\"\"\n\nN = int(input())\nIngredients = list(map(int, input().split()))\nMax = 0\nx, y = 0, 0\n\nfor i in range(N - 1):\n    if i == 0:\n        Max = sum(Ingredients) / 2\n        continue\n    x, y = Ingredients[0], Ingredients[1]\n    Ingredients.pop(0)\n    Ingredients.pop(0)\n    Ingredients.append((x + y) / 2)\n    Max = max(Max, x + y)\n\nprint(Max)\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"\n\nn = int(stdin.readline())\n\na = [int(x) for x in stdin.readline().split()]\nb = [int(x) for x in stdin.readline().split()]\nc = [int(x) for x in stdin.readline().split()]\n\nx = 0\nfor i in range(n-1):\n    x += b[i] + c[i]\n\nprint(x)\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n3 1 2\\n2 5 4\\n3 6\") == \"14\"\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == \"14\"\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\") == 14\n\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\nassert solution(\"1 1 1\\n1 1 1\\n1 1 1\") == 6\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1 2\\n2 5 4\\n3 6') == '14'\n\"\"\"\n\nimport collections\nimport sys\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2\\n2 5 4\\n3 6') == '14'\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a\\nbc\\ndef') == '2'\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ZABCDBABCQ') == '2'\n\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABCDBABCQ\") == 2\n\"\"\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABBBBCCCDDDD\") == \"4\"\nassert solution(\"ABCDDD\") == \"1\"\nassert solution(\"AA\") == \"0\"\nassert solution(\"ZZ\") == \"0\"\n\"\"\"\n\nN = int(input())\ns = input()"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aababca\") == \"3\"\nassert solution(\"aaaa\") == \"2\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nABC\\nAB\") == \"0\"\nassert solution(\"10\\nABABCAABABCAAABAB\\n\") == \"1\"\nassert solution(\"10\\nABABCAB\\n\") == \"2\"\nassert solution(\"10\\nABC\\nABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC\\n\") == \"9\"\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline()\n\ninput = input.split('\\n')\nN = int(input[0])\nS = input[1]\n\nnumber_of_occurrences = 0\n\nfor i in range(0, N - 2):\n    if S[i:i + 3] == 'ABC':\n        number_of_occurrences += 1\n\nprint(number_of_occurrences)\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\\nGAGAGAGAAGAGA\") == 2\nassert solution(\"6\\nABCDABCDABC\") == 1"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\">ABCD<\") == \"2\"\nassert solution(\"ABCDEF<ABC\") == \"3\"\nassert solution(\"ABC<ABCABC\") == \"3\"\n\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected_output"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABCD\") == \"0\"\nassert solution(\"ABABABCAAABABC\") == \"3\"\nassert solution(\"AABCABABCAAABABC\") == \"3\"\nassert solution(\"ABABCAAAAABABCAAABABC\") == \"6\"\nassert solution(\"BBAAAAABBABC\") == \"1\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n\nN = int(stdin.readline())\nA = set(stdin.readline().strip() for _ in range(N))"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == result\nprint(result)\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n3\nA\nB\nC\n\nSample Output:\n1\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nInput:\n2\nA\nB\n\nOutput:\n1\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n2\nA\nB\n\nSample Output:\n1\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n3\nA\nA\nC\n\nSample Output:\n1\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n4\nA\nA\nA\nC\n\nSample Output:\n0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n4\nA\nB\nB\nD\n\nSample Output:\n0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nM\nM\nS\nS\nX\n\nSample Output:\n0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n4\nM\nM\nR\nS\n\nSample Output:\n2\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n4\nR\nR\nR\nS\n\nSample Output:\n0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n4\nR\nS\nR\nS\n\nSample Output:\n1\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n4\nR\nR\nR\nR\n\nSample Output:\n4\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n4\nS\nR\nR\nR\n\nSample Output:\n4\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n3\nC\nR\nS\n\nSample Output:\n0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n3\nS\nS\nR\n\nSample Output:\n0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n3\nM\nM\nS\n\nSample Output:\n1\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n3\nM\nS\nM\n\nSample Output:\n1\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n3\nM\nM\nR\n\nSample Output:\n0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nM\nR\nS\nS\nS\n\nSample Output:\n0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nR\nM\nS\nS\nS\n\nSample Output:\n2\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nM\nM\nM\nR\nS\n\nSample Output:\n0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n6\nM\nR\nM\nM\nR\nS\n\nSample Output:\n1\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n6\nM\nM\nR\nS\nS\nS\n\nSample Output:\n2\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n7\nM\nM\nM\nR\nR\nS\nS\nS\n\nSample Output:\n2\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n7\nM\nM\nS\nS\nS\nR\nR\nR\n\nSample Output:\n0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nR\nM\nS\nR\nS\n\nSample Output:\n3\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nR\nM\nM\nS\nS\n\nSample Output:\n3\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nM\nS\nS\nS\nR\n\nSample Output:\n4\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nS\nS\nS\nS\nR\n\nSample Output:\n2\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nR\nS\nM\nS\nM\n\nSample Output:\n2\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nR\nS\nM\nR\nM\n\nSample Output:\n0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nS\nR\nM\nS\nR\n\nSample Output:\n2\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n6\nM\nM\nM\nS\nS\nS\n\nSample Output:\n0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n6\nM\nS\nS\nS\nM\nS\n\nSample Output:\n0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n7\nM\nM\nM\nS\nR\nS\nS\n\nSample Output:\n3\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n7\nS\nR\nS\nS\nM\nM\nS\n\nSample Output:\n0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nM\nS\nS\nR\nS\n\nSample Output:\n4\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nM\nS\nS\nS\nR\n\nSample Output:\n4\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nR\nM\nS\nS\nR\n\nSample Output:\n3\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nR\nM\nM\nS\nR\n\nSample Output:\n3\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nS\nR\nR\nS\nM\n\nSample Output:\n2\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nS\nR\nM\nS\nR\n\nSample Output:\n2\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nR\nR\nM\nR\nM\n\nSample Output:\n1\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nS\nS\nR\nS\nS\n\nSample Output:\n4\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nR\nR\nR\nS\nS\n\nSample Output:\n0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nR\nM\nM\nR\nS\n\nSample Output:\n3\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nM\nM\nM\nS\nM\n\nSample Output:\n1\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nM\nM\nS\nS\nS\n\nSample Output:\n0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nM\nR\nM\nS\nR\n\nSample Output:\n0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nS\nM\nM\nS\nR\n\nSample Output:\n2\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nR\nM\nS\nS\nR\n\nSample Output:\n0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nM\nS\nS\nM\nS\n\nSample Output:\n0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nM\nR\nM\nR\nS\n\nSample Output:\n0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nM\nS\nM\nS\nM\n\nSample Output:\n1\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n5\nM\nS\nR\nS\nM\n\nSample Output:\n2\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n6\nM\nM\nR\nS\nS\nM\n\nSample Output:\n1\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n6\nR\nR\nM\nS\nS\nS\n\nSample Output:\n3\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n6\nM\nM\nS\nM\nS\nS\n\nSample Output:\n3\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n6\nM\nS\nR\nR\nM\nS\n\nSample Output:\n0\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n7\nM\nS\nS\nM\nS\nS\nR\nM"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n\nimport math\nimport collections\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\n\"\"\"\n\nfrom typing import List\n\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass Person:\n    name: str\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n\nimport itertools\nimport functools\n\n@functools.lru_cache(maxsize=None)\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3') == 'Yes'\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"Yes\"\n\n-------------------"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\nassert solution(\"2 2\") == \"No\"\n\"\"\"\n\nimport ast\n\nfor line in map(str.rstrip, open('./input.txt').readlines()):\n    if '|' in line:\n        N, M = map(int, line.split('|'))\n    else:\n        N, M = map(int, line.split())\n    assert N >= 1 and N <= 100\n    assert M >= 0 and M <= N\n    "
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 3\n1 1\n2 3\n1 3''') == 'Yes'\nassert solution('''2 2\n1 1\n1 3''') == 'No'\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\nac = 0\nfor i in range(n):\n    if m == sum([int(x) for x in input().split()]):\n        ac += 1\nprint(\"Yes\" if ac == n else \"No\")\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 1\\n0 2\\n0 0') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"2 1\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3') == 'Yes'\nassert solution('2 4') == 'No'\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"3 1\") == \"Yes\"\nassert solution(\"100 100\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n3 1') == 'Yes'\nassert solution('4 5\\n1 2\\n1 3\\n1 4\\n3 2\\n2 4') == 'No'\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 1\\n1 1\\n1 1\") == \"Yes\"\nassert solution(\"3 3\\n1 1\\n1 1\\n1 1\") == \"No\"\nassert solution(\"4 2\\n1 2\\n1 3\\n1 1\\n1 1\") == \"Yes\"\nassert solution(\"4 2\\n1 1\\n1 3\\n1 1\\n1 1\") == \"No\"\nassert solution(\"5 3\\n1 1\\n1 1\\n1 1\\n1 1\") == \"Yes\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"aabcbba\") == \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('aabbccdd') == 'No'\nassert solution('abcccdd') == 'Yes'\nassert solution('aabbdd') == 'No'\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"sipuuu\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(sippuu) == 'Yes'\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"coffee\") == \"No\"\nassert solution(\"aabbbb\") == \"No\"\nassert solution(\"aabbcc\") == \"Yes\"\nassert solution(\"aabbcd\") == \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('ippuu') == 'Yes'\nassert solution('ipppp') == 'No'\nassert solution('pippu') == 'No'\nassert solution('pippp') == 'No'\n\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"sipppuu\") == \"No\"\nassert solution(\"sippppuu\") == \"No\"\nassert solution(\"sippuuu\") == \"No\"\nassert solution(\"sippuuuu\") == \"Yes\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('mocha') == 'No'\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('sipppuu') == 'No'\nassert solution('sippuuu') == 'No'\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('bejxz') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\\n\") == \"4\"\nassert solution(\"1 10\\n100 100\\n\") == \"TLE\"\nassert solution(\"5 10\\n7 100\\n3 100\\n100 100\\n1 100\\n\") == \"TLE\"\n\n\"\"\""
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n7 60\\n1 80\\n4 50') == '4', 'WA'\nassert solution('4 2\\n7 60\\n1 80\\n4 50') == 'TLE', 'WA'\n\n------Solution------\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\\n\") == '4'\n\"\"\""
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\n\n-----Test 5-----\nInput:\n5 10\n3 3\n2 2\n1 1\n1 3\n2 5\n3 7\n3 9\n\nOutput:\n2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '3 70\\n7 60\\n1 80\\n4 50'\n) == '4', 'Test 1'\n\nassert solution(\n    '3 70\\n7 60\\n1 80\\n4 50'\n) == 'TLE', 'Test 2'\n\nassert solution(\n    '10 5\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10'\n) == '1', 'Test 3'\n\nassert solution(\n    '3 70\\n7 60\\n1 80\\n4 50'\n) == '4', 'Test 4'\n\nassert solution(\n    '3 70\\n7 60\\n1 80\\n4 50'\n) == 'TLE', 'Test 5'\n\n\"\"\"\n\nimport sys\nfrom typing import List, NamedTuple\n\nimport pytest\n\nDEBUG = True\n\n\nclass Case(NamedTuple):\n    n: int\n    t: int\n    costs: List[int]\n    targets: List[int]\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\"\n\n----------Solution----------"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 70\") == \"4\"\nassert solution(\"1 80\") == \"TLE\"\n\"\"\""
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 70') == '4'\nassert solution('3 70') == 'TLE'\n\"\"\""
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50\\n') == '4'"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50\\n') == '4'\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 2 9''') == 8\nassert solution('''4 1 4\n2 3 4''') == 6\nassert solution('''4 1 4\n2 4 6''') == 6\nassert solution('''4 1 4\n2 4 6\n8 3 2''') == 12\nassert solution('''4 1 4\n2 4 6\n8 3 2\n5 5 4\n7 4 6''') == 12\n'''"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 9\") == \"8\"\nprint(\"test passed\")\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 9') == '8'\nassert solution('1 1 1') == '1'\nassert solution('2 0 1') == '1'\nassert solution('6 10 7') == '8'"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 9') == '8'\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 9\") == 8\n\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 9\") == \"8\"\nprint(\"test passed\")\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\"\n\nimport sys\n\nn, a, b = map(int, sys.stdin.readline().split())\n\nprint(a*n + min(a, b)*(n-1))\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 9') == 8\nassert solution('4 2 3') == 4\nassert solution('1 1 1') == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 9\") == 8\n\"\"\"\n\nN, A, B = [int(x) for x in input().split()]\n\nprint(N * A if A < B else N * (A - B))\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\nacornistnt\\npeanutbomb\\nconstraint') == '1'\nprint('Test passed')\n\n\"\"\"\n\n\"\"\"\nSOLUTION:\nWe want to count the number of distinct pairs i, j such that s_i is an anagram of s_j,\nwhere s_i is a string of length 10 and each character in s_i is a lowercase English character.\n\nThis problem is equivalent to finding the number of pairs of integers i, j (1 \\leq i < j \\leq N)\nsuch that i < j and the first 10 characters of s_i and s_j are equal.\n\nWe'll do this by using a hash map to map characters to their occurrence count.\nWe'll build the hash map by iterating over s_1. As we iterate,\nwe'll add the characters of s_i to the hash map.\n\nAfter iterating over all s_i, we'll iterate over s_2,\nfinding the corresponding hash map in the hash map for each character.\nIf the character occurs, we'll increment the occurrence count.\n\nThen we'll iterate over s_N, updating our hash map.\nOnce we've finished iterating over all s_i, we'll iterate over s_N,\ncalculating the occurrence count for each character.\nIf the character occurs, we'll add to our total count of occurrences.\n\nOnce we've finished iterating over all s_i and s_j, we can return the total count.\n\nTime complexity: O(N)\n\nSpace complexity: O(N)\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\":\\n3\\npeanutbomb\\nconstraint\\n\") == '1'\n\"\"\"\n\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"acornistnt\") == 1\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\":\\n4\\ns1\\ns2\\n:\") == '1'\nassert solution(\":\\n1\\ns\\n:\") == '0'\nassert solution(\":\\n2\\ns\\n:\") == '1'\nassert solution(\":\\n2\\nba\\n:\") == '2'\nassert solution(\":\\n2\\nab\\n:\") == '0'\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"acornistnt\") == \"1\"\nassert solution(\"peanutbomb\") == \"0\"\nassert solution(\"constraint\") == \"1\"\n\"\"\"\n\n\n\n\"\"\"\n---SOLUTION---\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\nacornistnt\npeanutbomb\nconstraint''') == '1'\n\"\"\"\n\n\"\"\"\nimport sys\nimport string\nfrom collections import Counter"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\nacornistnt\\npeanutbomb\\nconstraint\\n') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"acornistnt\") == 1\nassert solution(\"peanutbomb\") == 1\nassert solution(\"constraint\") == 1\n\n\"\"\"\n\nfrom functools import reduce\nfrom operator import mul"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\nacornistnt\\npeanutbomb\\nconstraint') == '1'\n\"\"\"\nfrom collections import Counter\nimport sys\n\nN = int(sys.stdin.readline())\nstrings = sys.stdin.readline().strip().split('\\n')\n\nresult = []\n\nfor i in range(N):\n    for j in range(i+1, N):\n        if Counter(strings[i]) == Counter(strings[j]):\n            result.append(i+1)\n            result.append(j+1)\n\nprint(len(result)/2)\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2132\\n506\\n999999999\\n1000000000') == '8\\n2\\n9\\n8'\n\"\"\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"112123123412345$\\\\dots$\") == \"1\"\nassert solution(\"112123123412345$\\\\dots$\") == \"2\"\nassert solution(\"112123123412345$\\\\dots$\") == \"5\"\nassert solution(\"112123123412345$\\\\dots$\") == \"2\"\nassert solution(\"112123123412345$\\\\dots$\") == \"0\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('112123123412345$\\dots$') == '5'\n\"\"\"\n\nimport sys\n\nq = int(sys.stdin.readline())\n\nfor i in range(q):\n    k = int(sys.stdin.readline())\n    n = 0\n    while k > 0:\n        k, d = divmod(k, 10)\n        n = n * 10 + d\n    print(n)\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"56\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"20\") == \"5\"\nassert solution(\"38\") == \"2\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"112123123412345$\\dots$\") == '0'\nassert solution(\"123321$\\dots$\") == '1'\nassert solution(\"12345$\\dots$\") == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n\n\"\"\"\nimport sys\nfrom typing import Dict\n\nsys.setrecursionlimit(10 ** 7)\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"1\"\nassert solution(\"112123123412345$\\dots$\") == \"2\"\nassert solution(\"112123123412345$\\dots$\") == \"5\"\nassert solution(\"112123123412345$\\dots$\") == \"2\"\nassert solution(\"112123123412345$\\dots$\") == \"0\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n'''\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"112123123412345$\\dots$\") == '1'\nassert solution(\"1122334455$\\dots$\") == '2'\nassert solution(\"112233445567812345678912345678910$\\dots$\") == '5'\nassert solution(\"1122334455678123456789123456789101112131415$\\dots$\") == '2'\nassert solution(\"112233445567812345678912345678910111213141567812345678912345678910111213141567891234567891011121314156781234567891234567891011121314156789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101112131415678123456789123456789101"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2132\\n506\\n999999999\\n1000000000\\n\") == \"8\\n2\\n9\\n8\"\n\"\"\""
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 4\\n1 2\\n1 3\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\\n1 1 2 3 2 3 1 3 1\""
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == '2\\n1 2 1 1 2'\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\") == '1\\n1 1 1'\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == '3\\n1 1 2 3 2 3 1 3 1'\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == '1\\n1 1 1'\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == '1\\n1 1 1'\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6 2\n1 4\n4 3\n3 5\n3 6\n5 2''') == '2', '1'\nassert solution('''4 2\n3 1\n1 4\n1 2''') == '1', '1'\n\n-----Note-----\nFor the first example, the required number is $2$, and the answer is $2$, because it is possible to assign $r=2$ companies to the roads such that:\n\n    1. The cities $1$ and $4$ have two roads.\n    2. The city $5$ has one road.\n    3. The cities $2$ and $6$ have one road.\n    4. The cities $3$ and $7$ have one road.\n\nFor the second example, the required number is $1$, and the answer is $1$, because it is possible to assign $r=1$ companies to the roads such that:\n\n    1. The cities $1$ and $4$ have two roads.\n    2. The city $2$ has one road.\n    3. The city $3$ has one road.\n    4. The cities $5$ and $6$ have one road.\n    5. The city $7$ has one road.\n\nThe number of cities which are not good in the first example is $1$, which is greater than $k=2$. It is impossible to have at most $k=2$ not good cities in case of one company.\n'''\n\nimport sys\nimport heapq\nfrom collections import defaultdict\n\nn, k = map(int, sys.stdin.readline().split())\nroads = []\nfor _ in range(n - 1):\n    roads.append(list(map(int, sys.stdin.readline().split())))\n\nvisited = set()\nanswer = []\nmin_heap = []\ncompanies = defaultdict(int)"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"6 2\"\n) == \"2\"\nassert solution(\n\"4 2\"\n) == \"1 2 1 1 2\"\nassert solution(\n\"10 2\"\n) == \"3 1 1 1 3 1 1 3 1\"\n\n-----Additional-----\n\nImagine that there is an undirected tree T consisting of n nodes. Each node has a number, and the number of an ancestor equals the number of a descendant. If two nodes have the same number, they are connected by an edge.\n\nIn the treeland, there are n-1 roads. The roads are undirected, they connect two distinct nodes. The government decides to sell roads to the private road companies. Each road is assigned to one of the n companies.\n\nEach road is assigned to one of the n companies, then the number of roads that belong to one company is the number of edges in the tree that have the same color as the road. The government wants to privatize the roads in a way that the number of roads that belong to one company does not exceed k. In other words, if for a city all the roads belong to the different companies then the city is good.\n\nFind the minimal number of companies to which the roads are sold so that the number of cities that are not good does not exceed k.\n\n\n-----Test data-----\n5 3\n1 2\n3 4\n1 2\n1 3\n2 3\n\"\"\""
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 4\\n1 2\\n1 3\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\\n1 1 2 3 2 3 1 3 1\"\n\nassert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\\n\") == \"2\\n1 1 1 2 3 2 3 1 3 1\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 4\\n2 3\\n1 2\\n3 1\\n2 1\\n1 1\\n1 1\") == \"1\\n1\\n1\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\\n\") == \"3\\n1\\n1\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\\n') == '2\\n1 2 1 1 2'\n\"\"\"\n\nimport heapq\n\nclass Solution:\n    def min_cost(self, n: int, k: int, roads: List[List[int]]) -> int:\n        graph = [[] for _ in range(n + 1)]\n        for i, j, c in roads:\n            graph[i].append((j, c))\n            graph[j].append((i, c))\n\n        dist = [INF] * (n + 1)\n        pq = [(0, 1)]\n        dist[1] = 0\n        \n        while pq:\n            cur_cost, cur_node = heapq.heappop(pq)\n            if cur_cost > dist[cur_node]:\n                continue\n            for next_node, next_cost in graph[cur_node]:\n                new_cost = cur_cost + next_cost\n                if new_cost < dist[next_node]:\n                    dist[next_node] = new_cost\n                    heapq.heappush(pq, (new_cost, next_node))\n        \n        return dist[1:].count(k)\n\n\"\"\"\n[Method 2]: Union Find\n[Time]: O(n^2 * log(n) + n * log(n))\n[Space]: O(n)\n\"\"\"\nclass Solution:\n    def min_cost(self, n: int, k: int, roads: List[List[int]]) -> int:\n        uf = [i for i in range(n + 1)]\n        cities = collections.defaultdict(set)\n        for i, j, c in roads:\n            cities[i].add(j)\n            cities[j].add(i)\n        \n        ans = 0\n        for i in range(1, n + 1):\n            for j in cities[i]:\n                if uf[i] == uf[j]:\n                    continue\n                uf[j] = uf[i]\n                ans += c\n        return ans if ans <= k else -1\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 2\n3 1\n1 4\n1 2\n''') == '3\\n1 1 2 3 2 3 1 3 1'\nassert solution('''6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n''') == '2\\n1 2 1 1 2 2 1 2 1'\nassert solution('''6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n''') == '3\\n1 1 2 3 2 3 1 3 1'\nassert solution('''10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\n''') == '3\\n1 1 2 3 2 3 1 3 1'\n\nprint(solution(input()))"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n1 2\\n1 3') == '1 1 2 3 2 3 1 3 1'\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\\n1 2 1 1 2\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\\n1 1 2 3 2 3 1 3 1\"\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(set)\n        self.visited = set()\n        self.cities = set()\n        self.n = 0\n        self.k = 0\n\n    def addEdge(self, u, v):\n        self.graph[u].add(v)\n        self.graph[v].add(u)\n        self.cities.add(u)\n        self.cities.add(v)\n        self.n += 1\n\n    def dfs(self, u, component):\n        if u in self.visited:\n            return\n        self.visited.add(u)\n        component.append(u)\n        for v in self.graph[u]:\n            self.dfs(v, component)\n    \n    def bfs(self, u):\n        queue = [u]\n        component = []\n        while queue:\n            u = queue.pop(0)\n            if u in self.visited:\n                continue\n            component.append(u)\n            self.visited.add(u)\n            for v in self.graph[u]:\n                if v not in self.visited:\n                    queue.append(v)\n        return component\n\n    def findComponents(self):\n        components = []\n        for u in self.cities:\n            if u in self.visited:\n                continue\n            component = []\n            self.dfs(u, component)\n            components.append(component)\n        return components\n\n    def findCommunities(self):\n        communities = []\n        components = self.findComponents()\n        for component in components:\n            self.k += 1\n            community = []\n            for city in component:\n                community.append(self.bfs(city))\n            communities.append(community)\n        return communities\n\n    def findPartition(self):\n        communities = self.findCommunities()\n        partition = []\n        for component in communities:\n            if len(component) == 1:\n                partition.append(1)\n            else:\n                partition.append(len(component))\n        return partition\n\n    def solve(self, stdin):\n        self.addEdge(0, 1)\n        self.addEdge(1, 2)\n        self.addEdge(2, 3)\n        self.addEdge(3, 4)\n        self.addEdge(1, 5)\n        self.addEdge(5, 6)\n        self.addEdge(6, 7)\n        self.addEdge(7, 8)\n        self.addEdge(8, 9)\n        self.addEdge(9, 0)\n        self.addEdge(8, 10)\n        self.addEdge(10, 11)\n        self.addEdge(11, 12)\n        self.addEdge(12, 13)\n        self.addEdge(13, 14)\n        self.addEdge(14, 15)\n        self.addEdge(15, 16)\n        self.addEdge(16, 17)\n        partition = self.findPartition()\n        for part in partition:\n            print(part)"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\n\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\n\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\n\"\"\"\n\nn = int(stdin.readline())\nx = list(map(int, stdin.readline().split()))\n\nk = 0\nm = 0\n\nfor i in range(n):\n    if x[i] > 0:\n        k += 1\n    if x[i] < n + 1:\n        m += 1\n\nprint(k, m)\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 4 4\\n\") == '2 4'\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\\n\") == '3 8'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n1 2 4 4\n''') == '2 4'\n\nassert solution('''9\n1 1 8 8 8 4 4 4 4\n''') == '3 8'\n\nassert solution('''7\n4 3 7 1 4 3 3\n''') == '3 6'\n\nassert solution('''5\n2 1 4 2 3\n''') == '2 4'\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 4 4\\n\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\\n\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\\n\") == \"3 6\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n\n\"\"\"\nimport sys\nimport collections"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 4 4\\n') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4\\n') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3\\n') == '3 6'\n\n\n----\n'''\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3') == '3 2 4 1 5'\nassert solution('3\\n2 3\\n3 1\\n1 2') == '3 1 2'\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3') == '3 2 4 1 5'\nassert solution('3\\n2 3\\n1 1') == '1 1 2'\n\n\"\"\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3''') == '3 2 4 1 5'\n\nassert solution('''3\n2 3\n3 1\n1 2''') == '3 1 2'\n\n'''\nfrom math import factorial"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n\") == \"3 2 4 1 5\"\n\n\"\"\"\n\nfrom itertools import permutations\nfrom collections import deque"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n') == '3 2 4 1 5'\nassert solution('3\\n2 3\\n3 1\\n1 2\\n') == '3 1 2'\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3\n''') == '3 2 4 1 5'\n\nassert solution('''3\n2 3\n3 1\n1 2\n''') == '3 1 2'\n\nassert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3\n''') == '3 2 4 1 5'\n\nprint('Hooray!')\n\n\"\"\"\nYou are given a set of $n$ positive integers, each of which can be expressed as a sum of two squares of integers. Your task is to find all pairs of integers $(x_1, x_2), (x_3, x_4),..., (x_n-1, x_n)$, such that:\n\n1. The numbers $x_i$ are consecutive, and;\n2. For every $i$, $x_i + x_{i+1} = n$, where $x_{i+1}$ is the number immediately after $x_i$ in the set;\n3. For every $i$ and $j$ such that $x_i + x_j = n$, we have $x_i + x_j = n$, and $x_j - x_i = 1$;\n4. For every $i$ and $j$ such that $x_i + x_j = n$, we have $x_i + x_j = n$, and $x_j - x_i = 1$, and $x_j > x_i$.\n\nYou can assume that there is at least one solution. The first line of the input contains $n$ distinct integers $x_1, x_2,..., x_n$ such that each of them can be expressed as a sum of two squares. It is guaranteed that each number is at least $1$ and at most $1000$. The second line of the input contains $n$ distinct integers $y_1, y_2,..., y_n$ such that each of them can be expressed as a sum of two squares. It is guaranteed that each number is at least $1$ and at most $1000$.\n\nOutput\nPrint all pairs of integers $(x_1, x_2), (x_3, x_4),..., (x_n-1, x_n)$, such that:\n\n1. The numbers $x_i$ are consecutive, and;\n2. For every $i$, $x_i + x_{i+1} = n$, where $x_{i+1}$ is the number immediately after $x_i$ in the set;\n3. For every $i$ and $j$ such that $x_i + x_j = n$, we have $x_i + x_j = n$, and $x_j - x_i = 1$;\n4. For every $i$ and $j$ such that $x_i + x_j = n$, we have $x_i + x_j = n$, and $x_j - x_i = 1$, and $x_j > x_i$.\n\nIt is guaranteed that at least one solution exists. The first line of the output should contain $n$ integers $x_1, x_2,..., x_n$, such that each of them can be expressed as a sum of two squares. It is guaranteed that each number is at least $1$ and at most $1000$. The second line of the output should contain $n$ integers $y_1, y_2,..., y_n$, such that each of them can be expressed as a sum of two squares. It is guaranteed that each number is at least $1$ and at most $1000$.\n\nExample\nInput\n5\n1 3\n2 4\n2 5\n3 4\n3 5\n\nOutput\n2 4 3 1 5\n1 2 3 4 5\n\nInput\n5\n3 7\n1 3\n2 5\n4 9\n2 4\n\nOutput\n3 1 2 4 9\n1 2 3 4 5\n\nInput\n3\n4 9\n3 5\n1 2\n4 9\n\nOutput\n1 2 3 4 9\n1 2 4 3 9\n\nInput\n4\n1 9\n1 8\n1 9\n1 10\n\nOutput\n1 2 9 10\n1 2 9 10\n\n\"\"\""
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5') == '1 2 3 4 5'\nassert solution('3 5 1 4 2') == '3 5 1 2 4'\nassert solution('3 2 1 5 4') == '3 2 1 4 5'\n\"\"\"\n\nimport sys\n\nn = int(input())\nres = [0] * n\nfor i in range(n):\n    a1, a2 = [int(j) for j in input().split()]\n    if a1 > a2:\n        res[i] = a1\n        res[(i + 1) % n] = a2\n    else:\n        res[i] = a2\n        res[(i + 1) % n] = a1\nprint(*res)\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == '3 2 4 1 5'\nassert solution(\"3\\n2 3\\n3 1\\n1 2\") == '3 1 2'\n\"\"\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n2 3\n3 1\n1 2\n\"\"\") == \"3 1 2\"\nassert solution(\"\"\"\n5\n3 5\n1 4\n2 4\n1 5\n2 3\n\"\"\") == \"3 2 4 1 5\"\nassert solution(\"\"\"\n5\n1 4\n2 4\n1 5\n2 3\n\"\"\") == \"3 2 4 1 5\"\n\n\"\"\""
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5\n3 5\n1 4\n2 4\n1 5\n2 3\n\"\"\") == \"3 2 4 1 5\"\nassert solution(\"\"\"5\n3 5\n1 4\n2 4\n1 5\n2 3\n\"\"\") == \"3 1 4 5 2\"\nassert solution(\"\"\"5\n3 5\n1 4\n2 4\n1 5\n2 3\n\"\"\") == \"3 1 5 2 4\"\nassert solution(\"\"\"5\n3 5\n1 4\n2 4\n1 5\n2 3\n\"\"\") == \"3 1 5 2 4\"\nassert solution(\"\"\"5\n3 5\n1 4\n2 4\n1 5\n2 3\n\"\"\") == \"3 1 5 2 4\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n1 10 17 12 15 2') == 3\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == 10\n\"\"\"\n\nn = int(input())\n\nl = list(map(int, input().split(' ')))\nl.sort()\nprint(l[(n - 1) // 2])\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 10 17 12 15 2\") == 3\nassert solution(\"1 1000 10000 10 100 1000000000\") == 1\nassert solution(\"6 1 1000 10000 10 100 1000000000\") == 1\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\\n\") == 3\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\\n\") == 10\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\\n\") == 1\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\\n\") == 10\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n1 10 17 12 15 2') == 3\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == 10\nassert solution('6\\n1 1000 10000 10 100 1000000000') == 1\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == 10\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n1 10 17 12 15 2\\n') == '3'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\\n') == '10'\nassert solution('6\\n1 1000 10000 10 100 1000000000\\n') == '1'\nassert solution('10\\n
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"5\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\""
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == 3\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == 10\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == 1\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == 10\n\nfrom solution import solution\nimport timeit"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"3\\n\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"2\\n\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\\n\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\\n\") == \"3\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\\n\") == \"10\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\\n\") == \"1\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n\n\"\"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\\n\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\nassert solution(\"8 5 5 2\\n10 5 5 2\\n15 5 5 2\\n20 5 5 2\\n1 10 5 2\\n\") == \"1\\n1\\n-1\\n-1\\n1\"\nassert solution(\"4 6 6 1\\n4 6 6 2\\n4 6 6 3\\n4 6 6 4\\n5 6 6 4\\n6 6 6 4\\n\") == \"1\\n-1\\n-1\\n2\\n0\"\nassert solution(\"4 6 6 1\\n4 6 6 2\\n4 6 6 3\\n4 6 6 4\\n5 6 6 4\\n6 6 6 4\\n\") == \"1\\n-1\\n-1\\n2\\n0\"\nassert solution(\"1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n\") == \"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\nassert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\\n') == '-1\\n5\\n2\\n0\\n1'\nassert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\\n') == '-1\\n5\\n2\\n0\\n1'\nassert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\\n') == '-1\\n5\\n2\\n0\\n1'\nassert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\\n') == '-1\\n5\\n2\\n0\\n1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\nprint(solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3'))\n\nassert solution('15 3 2 1\\n16 7 5 2') == '-1\\n1'\nprint(solution('15 3 2 1\\n16 7 5 2'))\n\nassert solution('15 3 2 2\\n16 7 5 2') == '0\\n0'\nprint(solution('15 3 2 2\\n16 7 5 2'))\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''6\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3''') == '4 -1\\n5 2\\n2 0\\n0 1'\n\nassert solution('''6\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3''') == '-1\\n5 2\\n2 0\\n0 1'\n\nassert solution('''6\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3''') == '4\\n5 2\\n2 0\\n0 1'\n\nassert solution('''6\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3''') == '5\\n2\\n2 0\\n0 1'\n\nassert solution('''6\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3''') == '5\\n2\\n2 0\\n0 1'"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(\"input_test_1.txt\").read()) == \"4\\n-1\\n5\\n2\\n0\\n1\"\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\\n\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n\n\"\"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\\n\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\nassert solution(\"1 1 1 1\\n\") == \"0\"\nassert solution(\"1 2 3\\n\") == \"0\"\nassert solution(\"1\\n\") == \"0\"\n\"\"\"\n\nimport collections\n\nstdin = open(\"C:/Users/user/Desktop/repos/AoC2020/07/input.txt\")\ninput = stdin.read().split(\"\\n\")"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 5 2 1') == '-1'\nassert solution('15 5 3 2') == '4'\nassert solution('15 5 4 3') == '-1'\nassert solution('15 5 2 1') == '5'\nassert solution('15 5 5 1') == '2'\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ac?b?c') == 24\nassert solution('???????') == 2835\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\n\nassert solution(\"a???c\") == \"46\"\n\nassert solution(\"acb??b\") == \"11\"\n\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"a???c\") == 2835\nassert solution(\"cccbbbaaa\") == 0\nassert solution(\"a??c\") == 46\nassert solution(\"aa?bac?c\") == 2\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"???????\") == \"2835\"\nassert solution(\"a???c\") == \"46\"\nassert solution(\"cccbbbaaa\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''ac?b?c''') == '24'\nassert solution('''???????''') == '2835'\nassert solution('''a??c''') == '46'\nassert solution('''cccbbbaaa''') == '0'\n\nassert solution('ac?b?c') == '24'\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ac?b?c\") == 24\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('ac?') == 3\nassert solution('??bc') == 6\nassert solution('??bc??') == 24\nassert solution('??bc??ac???') == 2835\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ac?b?c\") == 24\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ac?b?c') == '24'\nassert solution('aaaa??') == '2835'\nassert solution('ac???') == '46'\nassert solution('ac????c') == '44'"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ac?b?c\") == 24\n\nprint(solution(\"ac?b?c\"))"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 0\\n1 3 3 7\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\n\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 3 3\\n2 3 5\\n2 1 1\\n') == '5'\nassert solution('4 0\\n1 3 3 7\\n') == '16'\n\n\"\"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n1 3 3\\n2 3 5\\n2 1 1') == '5'\nassert solution('4 0\\n1 3 3 7') == '16'\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n3 2\n1 3 3\n2 3 5\n2 1 1\n    \"\"\"\n) == \"5\"\n\nassert solution(\n    \"\"\"\n4 0\n1 3 3 7\n    \"\"\"\n) == \"16\"\n\nassert solution(\n    \"\"\"\n5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n    \"\"\"\n) == \"18\"\n\n\"\"\"\n[Some hints]\n1. Think about the graph (list of lists). How many edges you have to connect?\n2. Think about the graph (list of lists). Are there any isolated vertices?\n3. Think about the graph (list of lists). How many vertices do you have to connect?\n\n\"\"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 3 3\\n2 3 5\\n2 1 1') == '5'\nassert solution('4 0\\n1 3 3 7\\n') == '16'\nassert solution('5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15') == '18'\n\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\n\nadp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor _ in range(m):\n    x, y, w = map(int, sys.stdin.readline().split())\n    adp[x - 1][y - 1] = w\n    adp[y - 1][x - 1] = w\n\nadp[0][0] = a[0]\nfor i in range(n):\n    for j in range(n):\n        if adp[i][j] == 0:\n            adp[i][j] = adp[j][i] = a[i] + a[j]\n\ndp = [[float('inf') for _ in range(n + 1)] for _ in range(n + 1)]\n\ndp[0][0] = 0\nfor i in range(1, n + 1):\n    for j in range(0, n + 1):\n        if dp[i - 1][j]!= float('inf'):\n            dp[i][j] = dp[i - 1][j]\n            if j < n:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j + 1] + adp[i - 1][j])"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 0\\n1 3 3 7\\n1 2 1\\n1 3 10\\n1 4 7\\n1 5 15\\n') == '18'\nassert solution('4 0\\n1 3 3 7\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\\n') == '14'\n\n\"\"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\n1 3 3\\n1 2 1') == '4'\nassert solution('4 0\\n1 3 3 7') == '16'\n\"\"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 2\n1 3 3\n2 3 5\n2 1 1''') == '5'\nassert solution('''4 0\n1 3 3 7''') == '16'\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n1 3 3\\n2 3 5\\n2 1 1') == '5'\nassert solution('4 0\\n1 3 3 7') == '16'\n\n\"\"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 2\n1 3 3\n2 3 5\n2 1 1\"\"\") == \"5\"\nassert solution(\"\"\"4 0\n1 3 3 7\n\"\"\") == \"16\"\nassert solution(\"\"\"5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n\"\"\") == \"18\"\n\"\"\"\n\n\n\n\n\nclass Graph:\n    def __init__(self, n: int):\n        self.v = n\n        self.graph = [[0 for _ in range(n)] for _ in range(n)]\n\n    def add_edge(self, v1: int, v2: int, w: int) -> None:\n        self.graph[v1][v2] = w\n        self.graph[v2][v1] = w\n\n    def is_connected(self, v1: int, v2: int) -> bool:\n        self.BFS(v1)\n        return v2 in self.visited\n\n    def BFS(self, source: int) -> None:\n        self.visited = set()\n        queue = deque()\n        queue.append(source)\n        self.visited.add(source)\n        while queue:\n            node = queue.popleft()\n            for i in range(self.v):\n                if i not in self.visited and self.graph[node][i]!= 0:\n                    queue.append(i)\n                    self.visited.add(i)\n\n    def dijkstra(self, source: int, destination: int) -> int:\n        dist = [float('inf') for _ in range(self.v)]\n        dist[source] = 0\n        pq = [(dist[i], i) for i in range(self.v)]\n        heapq.heapify(pq)\n        while pq:\n            curr_dist, curr = heapq.heappop(pq)\n            if curr == destination:\n                return dist[curr]\n            for i in range(self.v):\n                if self.graph[curr][i]!= 0:\n                    distance = curr_dist + self.graph[curr][i]\n                    if dist[i] > distance:\n                        dist[i] = distance\n                        heapq.heappush(pq, (dist[i], i))\n        return -1\n\n    def __str__(self) -> str:\n        return '\\n'.join([\n            str(lst)\n            for lst in self.graph\n        ])\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2') == '14'\n\"\"\""
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 1 1\\n0 9\\n0 5\") == '45'\nassert solution(\"10 1 1\\n0 9\\n1 5\") == '-1'\nassert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\") == '14'\nassert solution(\"10 1 1\\n0 9\\n1 5\") == '-1'\nassert solution(\"10 1 1\\n0 9\\n0 5\") == '45'\n\"\"\"\nfrom functools import lru_cache\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10 1 1\n0 9\n0 5''') == '-1'\nassert solution('''10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2''') == '14'\n\n\"\"\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_stdin_1) == test_expected_1\n\n\"\"\""
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\n\"\"\"\n\na, n, m = map(int, input().split())\n\nevents = []\nfor _ in range(n):\n    l, r = map(int, input().split())\n    events.append((l, r))\n\nevents.sort()\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2''') == '14'\n\nassert solution('''10 1 1\n0 9\n0 5''') == '45'\n\nassert solution('''10 1 1\n0 9\n1 5''') == '-1'\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == \"-1\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == 14\nassert solution(\"10 1 1\\n0 9\\n0 5\") == 45\nassert solution(\"10 1 1\\n0 9\\n1 5\") == -1"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2''') == '14'\n\nassert solution('''10 1 1\n0 9\n0 5''') == '45'\n\nassert solution('''10 1 1\n0 9\n1 5''') == '-1'\n\nassert solution('''10 1 1\n0 9\n8 1''') == '-1'\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"-1\"\nassert solution(\"10 10 10\\n0 0\\n0 0\") == \"0\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"5 7 4\") == \"No\"\nassert solution(\"1 2 3\") == \"No\"\nassert solution(\"1 2 3\") == \"No\"\nassert solution(\"1 2 3\") == \"No\"\n\"\"\"\n\n\"\"\"\nBryson\nI feel like there are a lot of redundancies in this code\nI've added comments to the lines that I think they have some issues, and how I would solve them\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 7 5') == 'Yes'\n\nA and C are equal, but B is different from those two numbers, so this triple is poor.\n\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 2 3''') == 'Yes'\nassert solution('''1 2 1''') == 'No'\nassert solution('''1 2 1''') == 'Yes'\nassert solution('''1 2 1''') == 'No'\nassert solution('''1 2 3''') == 'Yes'\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5 7 5') == 'Yes'\nassert solution('5 7 7') == 'No'\nassert solution('3 3 3') == 'No'\nassert solution('1 1 1') == 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"5 7 7\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 7 5\\n\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 7 5\\n') == 'Yes'\n\"\"\"\n\na, b, c = map(int, stdin.split(' '))"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\n\"\"\"\n\nA, B, C = [int(i) for i in stdin.split(' ')]\nprint('Yes' if (A == B or B == C or C == A) and A!= B and A!= C and B!= C else 'No')\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7 5') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"5 5 5\") == \"No\"\nassert solution(\"7 5 7\") == \"No\"\nassert solution(\"7 5 5\") == \"Yes\"\nassert solution(\"5 7 7\") == \"Yes\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"2\\n12 5\\n1000 2000\"\n) == \"1\"\n\n\"\"\"\n\nfrom typing import List, Callable, NamedTuple\nfrom functools import reduce\nfrom math import inf\n\n\nclass Input(NamedTuple):\n    n: int\n    t: int\n    heights: List[int]\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n') == '1'\nassert solution('1\\n1\\n3\\n') == '0'\n\n'''\n'''\nIt is guaranteed that the solution is unique.\n\n- T is an integer in the range [0, 50]\n- A is an integer in the range [0, T]\n- H_1, H_2,..., H_N are integers in the range [0, 10^5]\n\n'''\nimport sys"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n\"\"\"\n\n\"\"\"\nOptimal solution\n\"\"\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'''\n4\n12 5\n1000 2000 1500 1800\n''') == '1'\nassert solution(\n'''\n3\n12 5\n1000 2000 1500\n''') == '2'\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n\"\"\"\nimport sys\n\nclass Solution:\n    def __init__(self, stdin):\n        self.stdin = stdin\n        self.n = int(stdin.readline())\n        self.a, self.t = map(float, stdin.readline().split())\n        self.h = list(map(int, stdin.readline().split()))\n\n    def solution(self):\n        h.sort()\n        self.min_delta = sys.maxsize\n        ans = 0\n        for i in range(self.n):\n            delta = abs(self.h[i]-self.a)\n            if self.min_delta > delta:\n                self.min_delta = delta\n                ans = i+1\n        return ans"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 12 3 1000 2000\") == \"1\"\nassert solution(\"4 12 3 1000 2000\") == \"1\"\nassert solution(\"4 12 3 1000 2000\") == \"1\"\nassert solution(\"4 12 3 1000 2000\") == \"1\"\n\"\"\"\nimport math"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n4') == '3'\nassert solution('1\\n2\\n3\\n4\\n') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n') == '4'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == '5'\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3\n5 12\n1000 2000 3333 4000 5000\n6 14\n1113 234 234 5 10\n''') == '1'\nprint('passed')\n\n---\n5.4 - Remove the Nth Node From End\nProblem Statement\nGiven a linked list, remove the n-th node from the end of list and return its head.\n\nExample:\n\nGiven linked list: 1->2->3->4->5, and n = 2.\n\nAfter removing the second node from the end, the linked list becomes 1->2->3->5.\n\nNote:\n\nGiven n will always be valid.\n\nFollow up:\n\nCould you do this in one pass?\n\nSolution:\n'''\n\nclass ListNode:\n    def __init__(self, val = 0, next = None):\n        self.val = val\n        self.next = next"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'''2\n12 5\n1000 2000''') == '1'\nassert solution(\n'''3\n15 -60\n2000 2000\n2500 -50''') == '1'\nassert solution(\n'''3\n15 -60\n2000 2000\n2500 -50''') == '1'\nassert solution(\n'''4\n15 -60\n2000 2000\n2500 -50\n30 -100''') == '2'\nassert solution(\n'''5\n15 -60\n2000 2000\n2500 -50\n30 -100\n20 -30''') == '3'\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n') == '1'\n\"\"\"\n\nn, m = map(int, input().split())"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n\") == \"1\"\n\n---\n\nWrite a program that prints out all Pythagorean triples less than 1000.\nA Pythagorean triple is a set of three natural numbers, a < b < c, for which,\n\na^2 + b^2 = c^2\nFor example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.\n\nThere exists exactly one Pythagorean triple for which a + b + c = 1000.\nFind the product abc.\n\n---\n\nWrite a function, check_pythagorean_triplet(a, b, c), that takes three integer arguments and returns True if they form a Pythagorean triple, and False otherwise.\n\nThe arguments are assumed to be three positive integers.\n\nA Pythagorean triple is a triple (a,b,c) such that a^2 + b^2 = c^2.\n\nWrite a function solution(a, b, c) that prints the product abc if (a,b,c) is a Pythagorean triple, and prints 0 otherwise.\n\nNote that the product should be printed as a string.\n\nYou should write solution in a recursive manner.\n\n---\n\nA number n is called a palindrome number if it reads the same both ways. For example, 121 is a palindrome number.\n\nIn a given integer n, you have to find the smallest palindrome number greater than n.\n\nFor example,\n\ngiven n = 121, the next palindrome number would be 124.\nGiven n = 10, the next palindrome number would be 11.\n\n---\n\nThe Harshad problem\nWrite a program to find the next Harshad number.\n\nGiven a number N, the task is to find the next Harshad number.\n\nA number is called Harshad number if the sum of its digits is divisible by the number of digits in the number.\n\nFor example,\n\nN = 154\n\nDigits of N = 1 + 4 + 5 + 4 = 15\n\nSum of digits of 15 = 1 + 5 = 6\n\nSo, next Harshad number after N will be 166.\n\nAlso, if N is already an Harshad number then output the next Harshad number after N.\n\nFor example,\n\nGiven N = 154, the next Harshad number will be 166.\n\nHarshad numbers are also called Harsh numbers in this code problem.\n\n---\n\nWrite a function:"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 1\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2\\n2 1') == '1'\n\"\"\""
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1\\n') == '1'\nassert solution('4 4\\n') == '0'\nassert solution('2 5\\n') == '0'\nassert solution('3 4\\n') == '0'\n\nassert solution('1 1\\n') == '0'\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == '1'\n\"\"\""
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1') == '1'\n\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nFor each number in the input, we will maintain a count of the number of times it appears in the input.\nFor example, if our input is {2,1}, then we will have 2:2, 4:0, 1:1.\n\nWe can go through the numbers in the input, for each number, we will count the number of times it appears in the input.\nThe count of the number determines the number of ways the number could occur as the sum of the two balls.\n\nIf the count is even, it could only occur once in the sum.\nIf it is odd, it could occur twice in the sum.\nThus, the number of ways the sum of the two balls could occur is the product of two counts of the number in the input.\n\nHow can we determine these counts?\n\nIf we write the number in the input as a sum of the two balls, then we have two options for the number of times the number appears in the input:\n\nThe number itself is a sum of the two balls.\nWe choose the number itself as the sum.\nWe choose the number itself as the sum, because the sum is in range [0, N].\nThis means that the number itself is only counted once in the count of the number, and is ignored in all other cases.\nThis means that we only need to count the number itself.\n\nNow, for every number that is not equal to the number itself, we need to multiply the count of this number by 2.\nThis means that we need to count the number itself twice, and also the number itself.\n\nThus, the count of the number is the product of two counts of the number in the input.\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n1 2\\n1 4\\n2 4\\n') == '1'\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"CATCATCAT\") == \"3\"\nassert solution(\"CATACATCAT\") == \"0\"\nassert solution(\"AAACATTTTT\") == \"0\"\nassert solution(\"TTT\") == \"3\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ACACTACG\", 3, 7) == 2\nassert solution(\"ACACTACG\", 2, 3) == 0\nassert solution(\"ACACTACG\", 1, 8) == 3\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ACACTACG\", 3, 7) == 2\nassert solution(\"ACACTACG\", 3, 0) == 0\nassert solution(\"ACACTACG\", 8, 3) == 3\nassert solution(\"ACACTACG\", 0, 8) == 3\nassert solution(\"ACACTACG\", 3, 3) == 1\n\nprint(\"Success\")\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(AATCODER) == \"2 1 1\"\nassert solution(CATCODER) == \"0 1 2\"\nassert solution(ATCODER) == \"3 1 1\"\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ACACTACG\\n3 7\\n2 3\\n1 8\") == \"2\\n0\\n3\"\nassert solution(\"AACTACG\\n3 7\\n2 3\\n1 8\") == \"2\\n0\\n3\"\n\"\"\"\n\nclass Solution:\n    def __init__(self, stdin: str):\n        self.stdin = stdin\n\n    def solution(self) -> str:\n        pass"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ACACTACG', 3, 7) == 2\nassert solution('ACACTACG', 2, 3) == 0\nassert solution('ACACTACG', 1, 8) == 3\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ACACTACG', 3, 7) == '2'\nassert solution('ACACTACG', 2, 3) == '0'\nassert solution('ACACTACG', 1, 8) == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ACACTACG') == 2\nassert solution('TTTTTTTT') == 0\nassert solution('CTCTCTT') == 5\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ACACTACG\", 3, 7) == \"2\"\nassert solution(\"ACACTACG\", 3, 7) == \"2\"\nassert solution(\"ACACTACG\", 3, 7) == \"2\"\nassert solution(\"ACACTACG\", 3, 7) == \"2\"\nassert solution(\"ACACTACG\", 3, 7) == \"2\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ACACTACG\") == \"2\\n0\\n3\"\nassert solution(\"ATCOCATC\") == \"3\\n0\\n2\"\nassert solution(\"AGGTAB\") == \"1\\n4\\n1\"\n\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline())\n\nwhile T > 0:\n    N, Q = map(int, sys.stdin.readline().split())\n    S = sys.stdin.readline().strip()\n    queries = []\n    for _ in range(Q):\n        l, r = map(int, sys.stdin.readline().split())\n        queries.append((l, r))\n\n    # the cnt of each sub-string\n    cnt = [0] * N\n    for l, r in queries:\n        cnt[l - 1] += 1\n        cnt[r - 1] += 1\n\n    # the prefix sum\n    prefix_sum = [0] * N\n    prefix_sum[0] = cnt[0]\n\n    for i in range(1, N):\n        prefix_sum[i] = prefix_sum[i - 1] + cnt[i]\n\n    ans = \"\"\n    for l, r in queries:\n        ans += str(prefix_sum[r - 1] - prefix_sum[l - 1]) + \"\\n\"\n\n    print(ans)\n\n    T -= 1\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == \"210\"\n\n\"\"\"\nimport sys\n\nn, k = map(int, input().split())\nprices = list(map(int, input().split()))\n\ntotal = 0\nfor i in range(k):\n    total += prices[i]\nprint(total)\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"50 100 80 120 80\") == 210\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 3\n50 100 80 120 80''') == '210'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n 50 100 80 120 80\") == 210\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == \"210\"\nprint(\"Teste 1 - Ok\")\n\nassert solution(\"5 1\\n50 100 80 120 80\\n\") == \"100\"\nprint(\"Teste 2 - Ok\")\n\nassert solution(\"5 2\\n50 100 80 120 80\\n\") == \"80\"\nprint(\"Teste 3 - Ok\")\n\nassert solution(\"5 1\\n50\\n\") == \"50\"\nprint(\"Teste 4 - Ok\")\n\nassert solution(\"5 1\\n50 0 80 120 80\\n\") == \"100\"\nprint(\"Teste 5 - Ok\")"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n50 100 80 120 80') == '210'\nprint(solution(stdin))"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n50 100 80 120 80\\n') == '210'\n\n\"\"\"\n\nfrom collections import defaultdict, Counter\nfrom typing import List\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\\n1 5 3 2\") == \"6\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3 4') == '4'\n\"\"\""
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('1 1 1') == '4'\nassert solution('10 1 2') == '8'\nassert solution('10 10 10') == '18'\n\"\"\""
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"4 5 7\") == \"12\"\nassert solution(\"3 4 2\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"1 2 3\") == \"5\"\nassert solution(\"3 4 4\") == \"8\"\nassert solution(\"2 3 4\") == \"8\"\nassert solution(\"2 2 2\") == \"7\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3 4') == 4\nassert solution('1 3 5') == 6\nassert solution('1 3 6') == 7\nassert solution('1 3 7') == 8\nassert solution('1 3 8') == 9"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('1 2 5') == '12'\nassert solution('5 2 2') == '4'\nassert solution('2 5 4') == '12'\n\n\"\"\"\n\nimport unittest\nimport os\nimport sys\nsys.path.append(os.path.join(os.path.dirname(__file__), \"../solutions\"))\nfrom solution import solution\n\n\nclass TestSolution(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution('1 3 4'), '4')\n    def test_2(self):\n        self."
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3 4') == '4'\nprint('Passed')\n\n-------------\n\n5 3 4\n1 3 4 5 1 3 4\n5 3 4 1 3 4 1\n5 1 3 4 3 2 3\n5 2 1 3 4 4 1\n5 3 4 3 2 1 2\n\n1 5 5 4 5 3\n2 4 4 5 5 4\n3 4 3 4 5 5\n4 4 5 5 4 4\n3 3 5 5 4 5\n\n5 5 5 5 5 5\n5 4 4 5 5 5\n5 4 3 5 5 5\n5 4 3 5 4 5\n5 4 3 4 5 5\n5 4 3 4 4 5\n5 4 3 3 4 5\n5 4 3 3 4 4\n5 4 3 2 4 5\n5 4 3 2 4 4\n5 4 3 2 3 4\n5 4 3 2 3 3\n5 4 3 2 2 3\n5 4 3 2 2 2\n5 4 3 2 1 2\n5 4 3 2 1 1\n5 4 3 2 1 1\n5 4 3 1 2 2\n5 4 3 1 2 1\n5 4 3 1 1 2\n5 4 3 1 1 1\n5 4 3 1 1 1\n5 4 2 1 2 2\n5 4 2 1 1 2\n5 4 2 1 1 1\n5 4 2 1 1 1\n5 4 2 1 1 1\n5 4 1 1 2 2\n5 4 1 1 2 1\n5 4 1 1 1 2\n5 4 1 1 1 1\n5 3 1 1 1 1\n5 2 1 1 1 1\n5 1 1 1 1 1\n\n5 5 5 5 5 5\n5 4 4 5 5 5\n5 4 3 5 5 5\n5 4 3 5 4 5\n5 4 3 5 4 4\n5 4 3 5 3 5\n5 4 3 5 3 4\n5 4 3 5 2 4\n5 4 3 5 2 3\n5 4 3 5 2 2\n5 4 3 5 2 1\n5 4 3 5 2 1\n5 4 3 5 1 2\n5 4 3 5 1 1\n5 4 3 4 5 5\n5 4 3 4 5 4\n5 4 3 4 5 3\n5 4 3 4 4 5\n5 4 3 4 4 4\n5 4 3 3 4 5\n5 4 3 3 4 4\n5 4 3 3 3 4\n5 4 3 3 2 4\n5 4 3 3 2 3\n5 4 3 3 2 2\n5 4 3 3 2 1\n5 4 3 3 2 1\n5 4 3 3 1 2\n5 4 3 3 1 1\n5 4 3 2 1 2\n5 4 3 2 1 1\n5 4 3 2 1 1\n5 4 3 1 1 2\n5 4 3 1 1 1\n5 3 1 1 1 1\n5 2 1 1 1 1\n5 1 1 1 1 1\n\n4 3 2 4 3\n4 1 2 3 2\n2 2 3 3 1\n1 1 3 3 2\n1 1 1 3 3\n2 3 2 3 1\n1 2 3 3 3\n1 1 3 2 3\n1 1 2 3 2\n1 2 2 2 2\n1 1 2 2 2\n3 2 1 1 1\n1 3 2 2 1\n1 2 1 1 2\n2 3 1 1 1\n3 1 1 1 1\n\n1 2 1 1 1\n1 1 2 1 1\n1 1 1 2 1\n2 1 1 1 1\n1 1 2 1 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 2 1 1\n1 1 1 2 1\n2 1 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 2 1 1 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 1 1 2 1\n1 2 1 1 1\n1 1 1 2 1\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3 4') == '4'\n\"\"\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5') == '0'"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\"\n\nx, y = map(int, input().split(' '))\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\n') == '0\\n'\nassert solution('0 3\\n') == '10\\n'\nassert solution('7 1\\n') == '0\\n'\nassert solution('3 3\\n') == '0\\n'\nassert solution('5 7\\n') == '0\\n'\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\") == \"0\"\nassert solution(\"6 6\") == \"10\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\") == \"0\"\nassert solution(\"5 3\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5') == '0'\nassert solution('1 2') == '10'\nassert solution('9 9') == '10'\n\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3, 5) == '0'\nassert solution(4, 4) == '10'\nassert solution(2, 5) == '0'\nassert solution(5, 2) == '0'\n\"\"\"\nimport re"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin=\"3 5\") == \"0\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 4') == '1'\n\"\"\"\n\nimport unittest\nimport sys\n\nclass Solution:\n    def solution(self, N, K):\n        ans = N\n\n        while N!= K:\n            N = abs(N - K)\n            ans = min(ans, N)\n\n        return ans\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution().solution\n\n    def test_solution(self):\n        self.assertEqual(self.solution('7 4'), '1')\n        self.assertEqual(self.solution('7 1'), '0')\n        self.assertEqual(self.solution('-5 -5'), '0')\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 4') == '1'\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(8, 4) == '1'\nassert solution(7, 4) == '1'\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 4') == '1'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 4') == '1'\n\"\"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(7, 4) == 1\n\n-----\n7 4\n1 3\n1 1\n2 2\n3 4\n3 3\n4 5\n5 6\n5 5\n\n1\n\n-----\n6 7\n1 1\n1 1\n2 2\n3 3\n3 3\n4 4\n4 4\n4 4\n\n0"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 4') == '1'\nassert solution('5 4') == '1'\nassert solution('7 3') == '1'\nassert solution('7 7') == '0'\nassert solution('0 7') == '0'\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\"\n\nfrom sys import stdin\nfrom typing import Iterator, Callable, List\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == test_output_1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 7 9\") == \"win\"\nassert solution(\"5 7 9\") == \"win\"\nassert solution(\"7 7 7\") == \"bust\"\nassert solution(\"4 6 8\") == \"win\"\nassert solution(\"4 6 7\") == \"bust\"\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == 'win'\nassert solution('1 2 20') == 'bust'\nassert solution('2 3 10') == 'win'\nassert solution('20 2 10') == 'bust'\nassert solution('3 3 3') == 'win'\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 7 9') == 'win'\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == \"win\"\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 7') == 'win'\nassert solution('4 7 5') == 'bust'\n\"\"\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 7 9') == 'win'\n\"\"\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"win\"\nassert solution(\"1 1 1\") == \"bust\"\nassert solution(\"9 9 9\") == \"bust\"\n\"\"\"\n\na1, a2, a3 = map(int, input().split())"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(5,7,9) == \"win\"\nassert solution(7,9,5) == \"win\"\nassert solution(9,5,7) == \"win\"\nassert solution(9,7,5) == \"win\"\nassert solution(9,5,5) == \"bust\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 7 9\") == \"win\"\nassert solution(\"1 1 1\") == \"bust\"\nassert solution(\"3 3 3\") == \"bust\"\nassert solution(\"9 9 9\") == \"bust\"\nassert solution(\"1 2 3\") == \"win\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 7 9') == \"win\"\nassert solution('3 5 8') == \"bust\"\nassert solution('6 3 5') == \"win\"\nassert solution('20 5 7') == \"bust\"\nassert solution('1 10 11') == \"win\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"6\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport math"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3) == 6\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\""
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '6'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '6'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == 6\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"6\"\n\n-----------Problem 065-----------\nThe Fibonacci sequence is defined as follows: the first number of the sequence is 0, the second number is 1, and the nth number is the sum of the (n-1)th and (n-2)th numbers. Write a function that takes in an integer n and returns the nth Fibonacci number.\n\nConstraints:\n- n will be positive.\n- The input of your function will always be valid.\n\nFor example:\n- n = 5 should return 3 (0, 1, 1, 2, 3)\n- n = 10 should return 34 (0, 1, 1, 2, 3, 5, 8, 13, 21, 34)\n\n------------Problem 066------------\nWrite a function to determine the number of bits needed to represent an integer in binary.\n\nConstraints:\n- The input is always a positive integer of arbitrary size.\n\nFor example:\n- The number 1234 takes up 4 bits.\n- The number 1024 takes up 10 bits.\n\n----------Problem 067----------\nWrite a function that takes in a string and returns a list of words constructed from the string, sorted alphabetically.\n\nFor example:\n- For the string: \"Hey fellow warriors\" the function should return the list: [\"Hey\", \"fellow\", \"warriors\"]\n\n------------Problem 068------------\nWrite a function that takes in a list of positive integers and returns the maximum sum of non-adjacent elements in the list.\n\nFor example:\n- For the input list, [2, 4, 6, 2, 5] the function should return 13\n- Since elements 2 and 6 are non-adjacent and the maximum sum is 6+5, the function should return 13.\n\n----------------Problem 069----------------\nWrite a function that takes in a string and returns the minimum number of deletions required to make the string a palindrome.\n\nFor example:\n- The string: \"racecar\" is already a palindrome, so 0 deletions are needed.\n- The string: \"google\" the deletions can be:\n  - g -> r\n  - o -> o\n  - g -> e\n  - l -> l\n  - o -> g\n  - e -> g\n  - g -> l\n  Thus, the function should return 5.\n\n---------------Problem 070---------------\nWrite a function that takes in a string and returns the number of anagrams of the string that can be made using words from a given dictionary.\n\nFor example:\n- For the input string: \"abc\" the function should return 2\n  - a -> c\n  - b -> c\n- For the input string: \"cde\" the function should return 1\n  - c -> d\n  - e -> d\n\n--------------Problem 071--------------\nWrite a function that takes in a string and returns the number of substrings of the string that contain at least one vowel.\n\nFor example:\n- The string: \"coolbeans\" contains the substrings: \"o\", \"oo\", \"ooo\", \"oooo\", and \"cool\".\n- The string: \"lunchtime\" contains the substrings: \"l\", \"ul\", \"un\", \"u\", \"lunch\", \"lla\", \"lll\", and \"lunchtime\"\n\n--------------Problem 072--------------\nWrite a function that takes in a string and returns the longest substring in the string.\n\nFor example:\n- The longest substring in the string: \"It was the best of times, it was the worst of times.\" should be: \"was the best of times\"\n- The longest substring in the string: \"It was the best of times, it was the worst of times.\" should be: \"times the was the\"\n\n---------------Problem 073---------------\nA palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 \u00d7 99.\n\nFind the largest palindrome made from the product of two 3-digit numbers.\n\n---------------Problem 074---------------\nA pangram is a sentence that contains every single letter of the alphabet at least once. For example, the sentence: \"The quick brown fox jumps over the lazy dog\" is a pangram, because it uses the letters A-Z at least once (case is irrelevant).\n\nGiven a string, detect whether or not it is a pangram. Return True if it is, False if not. Ignore numbers and punctuation.\n\n------------Problem 075------------\nGiven a string of space separated integers, write a function to determine if it is a palindrome.\n\nFor example:\n- For the input string, \"9 22 34 55 77 88 99\", should return True\n- For the input string, \"12 22 33\", should return False\n\n---------------Problem 076---------------\nWrite a function that returns the longest palindromic substring in a given string of characters.\n\n---------------Problem 077---------------\nWrite a function that takes in a string of one or more words, and returns the same string, but with all five or more letter words reversed (like the name of this kata).\n\nStrings passed in will consist of only letters and spaces.\nSpaces will be included only when more than one word is present.\n\n---------------Problem 078---------------\nWrite a function that takes a list of integers and returns the number of even integers in the list.\n\n---------------Problem 079---------------\nWrite a function that takes a list of numbers and returns the smallest number in the list.\n\nFor example:\n- The list: [34, 15, 88, 2] should return 2\n- The list: [34, -345, -1, 100] should return -345\n\n---------------Problem 080---------------\nWrite a function that takes a list of numbers and returns the largest number in the list.\n\nFor example:\n- The list: [34, 15, 88, 2] should return 88\n- The list: [34, -345, -1, 100] should return 100\n\n---------------Problem 081---------------\nWrite a function that takes a list of numbers between 1 and 10 (inclusive) and returns the missing number from the list.\n\nFor example:\n- The list: [1, 2, 3, 4, 6, 7, 8, 9, 10] should return 5\n- The list: [7, 2, 3, 6, 5, 9, 1, 4, 8] should return 10\n\n---------------Problem 082---------------\nWrite a function that takes an array of unique integers and returns the missing number from the array.\n\nFor example:\n- The array: [4, 0, 3, 1] should return 2\n- The array: [2, 5, 1, 3] should return 4\n\n---------------Problem 083---------------\nWrite a function that takes a list of 10 numbers (between 0 and 9) that are positioned on a common drawing board. The function should return where the numbers are positioned relative to each other on the board.\n\n- The list: [2, 0, 4, 3, 9, 7, 1, 6, 8, 5] should return: [3, 1, 5, 4, 2, 8, 9, 7, 6, 0]\n- The list: [0, 2, 4, 3, 9, 7, 1, 6, 8, 5] should return: [3, 1, 5, 4, 2, 8, 9, 7, 6, 0]\n\n---------------Problem 084---------------\nWrite a function that takes a list of 10 numbers (between 0 and 9) that are positioned on a common drawing board. The function should return where the numbers are positioned relative to each other on the board.\n\n- The list: [2, 0, 4, 3, 9, 7, 1, 6, 8, 5] should return: [2, 0, 4, 3, 9, 7, 1, 6, 8, 5]\n- The list: [0, 2, 4, 3, 9, 7, 1, 6, 8, 5] should return: [0, 2, 4, 3, 9, 7, 1, 6, 8, 5]\n\n---------------Problem 085---------------\nWrite a function that takes a list of 10 numbers (between 0 and 9) that are positioned on a common drawing board. The function should return where the numbers are positioned relative to each other on the board.\n\n- The list: [2, 0, 4, 3, 9, 7, 1, 6, 8, 5] should return: [2, 0, 4, 3, 9"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3) == \"6\"\nassert solution(10) == \"2520\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(sample_input)) == str(sample_output)\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\\n\") == 2\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == 2\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2\") == \"2\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2\\n\") == 2\n\"\"\"\nimport sys"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n3 1\\n2 1\\n3 1\\n4 1\") == \"2\"\n\n\"\"\"\n\n\"\"\"\n----SOLUTION----\n\"\"\"\n\nn, d = map(int, stdin.split(\" \"))"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 2\\n') == '2'\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n') == '2'\nassert solution('6 2\\n') == '2'\nassert solution('6 3\\n') == '3'\nassert solution('6 4\\n') == '3'\n\"\"\"\n\nn, d = [int(i) for i in input().split(' ')]"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2\\n\") == \"2\"\nprint(\"Tests passed.\")\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"12\") == \"hon\"\nassert solution(\"102\") == \"bon\"\n\nprint(solution(\"16\"))\nprint(solution(\"12\"))\nprint(solution(\"102\"))\n\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('16') == 'pon'\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"101\") == \"hon\"\nassert solution(\"123\") == \"bon\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('16') == 'pon'\nassert solution('100') == 'hon'\nassert solution('22') == 'hon'\nassert solution('101') == 'hon'\nassert solution('222') == 'bon'\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"23\") == \"hon\"\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"16\") == \"pon\"\n\n---\n\"\"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\"\n\nimport sys\nfrom typing import List, Any"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"999\") == \"hon\"\n\"\"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('16') == 'pon'\nassert solution('0') == 'bon'\nassert solution('3') == 'hon'\nassert solution('9') == 'hon'\nassert solution('17') == 'pon'\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"16\") == \"pon\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 4') == '8'\nassert solution('3\\n1 2 3') == '6'\nassert solution('3\\n2 1 3') == '4'\nassert solution('3\\n2 3 1') == '6'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2\") == \"20\"\nassert solution(\"5 1 1 1 1\") == \"0\"\nassert solution(\"5 2 2 2 2\") == \"8\"\nassert solution(\"5 1 1 1 1\") == \"0\"\n\"\"\"\nfrom itertools import combinations\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\") == 11\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\\n\") == \"11\"\n\n------------------------------------------------------------------------------------------------------------------------------------\n\nYou are given a list of integers. You have to sort the elements by their difference with a user-given element e.\n\nInput Format:\nThe first line contains n and e separated by a space.\nThe next line contains n integers a_1,a_2...a_n\n\nOutput Format:\nOutput the sorted list\n\nSample Input:\n2 2\n1 2 3\n\nSample Output:\n1 2 3\n\nExplanation:\nGiven a list [1,2,3,4,5,6,7,8,9] and x = 2, we will calculate the difference of every element from x and sort them in ascending order.\nThe sorted list is [1,2,3,4,5,6,7,8,9] and the differences are [1,2,3,4,5,6,7,8,9].\nThe difference of 2 with every element is 1, 2, 3, 4, 5, 6, 7, 8, 9, so 1 is the minimum difference.\nWe return the sorted list and print it.\n----------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nYou are given a list of integers. You have to sort the elements by their difference with a user-given element e.\n\nInput Format:\nThe first line contains n and e separated by a space.\nThe next line contains n integers a_1,a_2...a_n\n\nOutput Format:\nOutput the sorted list\n\nSample Input:\n5 2\n2 5 3 7 9\n\nSample Output:\n2 3 5 7 9\n\nExplanation:\nGiven a list [2, 5, 3, 7, 9], we will calculate the difference of every element from x and sort them in ascending order.\nThe sorted list is [2, 3, 5, 7, 9] and the differences are [1, 1, 2, 2, 2].\nThe difference of 2 with every element is 1, 1, 2, 2, 2, so 2 is the minimum difference.\nWe return the sorted list and print it.\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nYou are given a list of integers. You have to sort the elements by their difference with a user-given element e.\n\nInput Format:\nThe first line contains n and e separated by a space.\nThe next line contains n integers a_1,a_2...a_n\n\nOutput Format:\nOutput the sorted list\n\nSample Input:\n5 2\n2 5 3 7 9\n\nSample Output:\n2 3 5 7 9\n\nExplanation:\nGiven a list [2, 5, 3, 7, 9], we will calculate the difference of every element from x and sort them in ascending order.\nThe sorted list is [2, 3, 5, 7, 9] and the differences are [1, 1, 2, 2, 2].\nThe difference of 2 with every element is 1, 1, 2, 2, 2, so 2 is the minimum difference.\nWe return the sorted list and print it.\n------------------------------------------------------------------------------------------------------------------------------------------------------\n\nYou are given a list of integers. You have to sort the elements by their difference with a user-given element e.\n\nInput Format:\nThe first line contains n and e separated by a space.\nThe next line contains n integers a_1,a_2...a_n\n\nOutput Format:\nOutput the sorted list\n\nSample Input:\n5 2\n2 5 3 7 9\n\nSample Output:\n2 3 5 7 9\n\nExplanation:\nGiven a list [2, 5, 3, 7, 9], we will calculate the difference of every element from x and sort them in ascending order.\nThe sorted list is [2, 3, 5, 7, 9] and the differences are [1, 1, 2, 2, 2].\nThe difference of 2 with every element is 1, 1, 2, 2, 2, so 2 is the minimum difference.\nWe return the sorted list and print it.\n--------------------------------------------------------------------------------------------------------------------------------------------------------\n\nYou are given a list of integers. You have to sort the elements by their difference with a user-given element e.\n\nInput Format:\nThe first line contains n and e separated by a space.\nThe next line contains n integers a_1,a_2...a_n\n\nOutput Format:\nOutput the sorted list\n\nSample Input:\n5 2\n2 5 3 7 9\n\nSample Output:\n2 3 5 7 9\n\nExplanation:\nGiven a list [2, 5, 3, 7, 9], we will calculate the difference of every element from x and sort them in ascending order.\nThe sorted list is [2, 3, 5, 7, 9] and the differences are [1, 1, 2, 2, 2].\nThe difference of 2 with every element is 1, 1, 2, 2, 2, so 2 is the minimum difference.\nWe return the sorted list and print it.\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nYou are given a list of integers. You have to sort the elements by their difference with a user-given element e.\n\nInput Format:\nThe first line contains n and e separated by a space.\nThe next line contains n integers a_1,a_2...a_n\n\nOutput Format:\nOutput the sorted list\n\nSample Input:\n5 2\n2 5 3 7 9\n\nSample Output:\n2 3 5 7 9\n\nExplanation:\nGiven a list [2, 5, 3, 7, 9], we will calculate the difference of every element from x and sort them in ascending order.\nThe sorted list is [2, 3, 5, 7, 9] and the differences are [1, 1, 2, 2, 2].\nThe difference of 2 with every element is 1, 1, 2, 2, 2, so 2 is the minimum difference.\nWe return the sorted list and print it.\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nYou are given a list of integers. You have to sort the elements by their difference with a user-given element e.\n\nInput Format:\nThe first line contains n and e separated by a space.\nThe next line contains n integers a_1,a_2...a_n\n\nOutput Format:\nOutput the sorted list\n\nSample Input:\n5 2\n2 5 3 7 9\n\nSample Output:\n2 3 5 7 9\n\nExplanation:\nGiven a list [2, 5, 3, 7, 9], we will calculate the difference of every element from x and sort them in ascending order.\nThe sorted list is [2, 3, 5, 7, 9] and the differences are [1, 1, 2, 2, 2].\nThe difference of 2 with every element is 1, 1, 2, 2, 2, so 2 is the minimum difference.\nWe return the sorted list and print it.\n----------------------------------------------------------------------------------------------------------------------------------------------------------\n\nYou are given a list of integers. You have to sort the elements by their difference with a user-given element e.\n\nInput Format:\nThe first line contains n and e separated by a space.\nThe next line contains n integers a_1,a_2...a_n\n\nOutput Format:\nOutput the sorted list\n\nSample Input:\n5 2\n2 5 3 7 9\n\nSample Output:\n2 3 5 7 9\n\nExplanation:\nGiven a list [2, 5, 3, 7, 9], we will calculate the difference of every element from x and sort them in ascending order.\nThe sorted list is [2"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"3 1 2\\n\"\n) == \"11\"\nassert solution(\n\"3 1 2\\n\"\n) == \"11\"\nassert solution(\n\"3 1 2\\n\"\n) == \"11\"\nassert solution(\n\"3 1 2\\n\"\n) == \"11\"\nassert solution(\n\"3 1 2\\n\"\n) == \"11\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1 2') == '3'\nassert solution('3\\n1 2 3') == '9'\nassert solution('4\\n2 3 4') == '12'\nassert solution('5\\n3 4 5') == '20'\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 2\\n') == 11\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '11'"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'''3\n3 1 2''') == '11'\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\\n\"\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3\n1\n4\n3\n\"\"\") == \"\"\"4\n3\n4\n\"\"\"\n\nassert solution(\"\"\"5\n1\n4\n2\n3\n5\n\"\"\") == \"\"\"5\n4\n5\n5\n5\n\"\"\"\n\nassert solution(\"\"\"5\n3\n5\n1\n2\n4\n\"\"\") == \"\"\"5\n4\n4\n5\n4\n\"\"\"\n\nassert solution(\"\"\"6\n5\n5\n5\n1\n2\n4\n\"\"\") == \"\"\"6\n5\n6\n6\n5\n\"\"\"\n\nassert solution(\"\"\"6\n1\n5\n1\n2\n4\n\"\"\") == \"\"\"6\n5\n5\n5\n5\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5\\n1\\n2\\n3\\n4\\n5') == '5\\n5\\n5\\n5\\n5'\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"\nassert solution(\"3\\n4\\n3\\n1\") == \"4\\n3\\n4\"\nassert solution(\"4\\n4\\n3\\n4\\n3\\n4\\n5\") == \"5\\n5\\n5\\n5\"\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\"\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1\\n4\\n3\\n') == '4\\n3\\n4'\nassert solution('3\\n1\\n2\\n3\\n') == '3\\n3\\n3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\\n\", \"Checking\"\nprint(\"Test passed\")\n\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1\\n4\\n3\\n') == '4\\n3\\n4\\n'\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 3''') == '9'\nassert solution('''7 4''') == '7'\nassert solution('''3 2''') == '1'\nassert solution('''10 20''') == '110'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 3\n''') == '9'\nprint('Test pass.')"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n') == '9'\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3') == 9\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"9\"\nprint(\"Test PASSED\")\n\n-----\nInput:\n5 3\n\nOutput:\n9\n\nYou can get 5 + 4 = 9 coins by pressing the button of size 5 twice, and this is the maximum result.\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('1 1') == 1\nassert solution('1 2') == 2\nassert solution('2 1') == 2\nassert solution('5 1') == 5\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n') == 9\n'''\n\nimport sys\n\nMAX_SIZE = 20\n\nfor line in sys.stdin:\n    A, B = line.split()\n    A, B = int(A), int(B)\n    sizes = [A, B]\n    coins = 0\n    while sizes[0] > 0 and sizes[1] > 0:\n        first_size, second_size = sizes[0], sizes[1]\n        if first_size > second_size:\n            if second_size == 0:\n                break\n            coins += second_size\n            sizes[0] -= 1\n        else:\n            if first_size == 0:\n                break\n            coins += first_size\n            sizes[1] -= 1\n    print(coins)\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3') == '9'\n\"\"\""
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n-30 -10 10 20 50') == \"40\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2 1 3\") == \"6\"\nassert solution(\"2 3\\n-1 -2\") == \"4\"\nassert solution(\"1 10\\n10\") == \"0\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n5 3\n-30 -10 10 20 50\n''') == '40'\nassert solution('''\n5 3\n10 20 30 40 50\n''') == '10'\n\"\"\"\nfrom functools import lru_cache\nimport itertools\n\n\nclass Solution:\n    def get_min_move_count(self, N: int, K: int, X: list[int]) -> int:\n        @lru_cache(None)\n        def dp(i, k):\n            if k == K:\n                return 0\n            res = float('inf')\n            for x in X:\n                if i + x < N:\n                    res = min(res, dp(i + x, k + 1))\n                if i - x >= 0:\n                    res = min(res, dp(i - x, k + 1))\n            return res + 1\n\n        return dp(0, 0)\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5 3\n-30 -10 10 20 50\"\"\") == \"40\"\n\"\"\""
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\\n\") == \"40\"\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom collections import deque\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(sys.stdin.read())) == str(sys.stdin.read())\n\"\"\""
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n2 5 4 3\") == \"2\"\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == '40'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys\nfrom typing import List\n\ntest_cases = [(4, 2, [1, 2, 3, 4, 5]),\n    (6, 3, [1, 1, 2, 3, 5, 8]),\n    (7, 4, [1, 1, 2, 2, 4, 5, 8])]"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n-30 -10 10 20 50') == '4'\n\"\"\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2\\n3 4') == '3'\n\"\"\"\nimport sys\n\na, b = sys.stdin.readline().split()\na = int(a)\nb = int(b)\n\nresult = 0\n\nfor i in range(1, a+b):\n    result += i\n\nprint(result)\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 13') == '2'\n\"\"\""
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 13\") == \"2\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 14') == 2\nassert solution('8 13') == 2\nassert solution('7 1') == 0\nassert solution('8 1') == 1\nassert solution('3 1') == 0\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 7\") == \"2\"\nassert solution(\"8 13\") == \"2\"\n\"\"\""
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3,4) == 1\nassert solution(100,100) == 100\nassert solution(3,7) == 1\nassert solution(30,7) == 1\nassert solution(100,400) == 98\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''8 13''') == '2'\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 15\") == \"2\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 15\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == \"2\"\n\"\"\"\n\na, b = map(int, input().split())\n\nprint(a - b + 1)\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 4') == '3'\n\"\"\"\nimport sys\nimport os\nfrom io import StringIO\nfrom io import BytesIO\nfrom io import TextIOWrapper"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 4') == '3'\nassert solution('10 3') == '4'\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 4\\n') == '3'\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 4\\n') == '3'\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 4\") == 3\n\"\"\"\n\nh, a = map(int, stdin.split())\nprint(h - a - 1)"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4\") == \"3\"\nprint(solution(\"10 4\"))\n\n----\n\nWrite a function solution(H, A) \nwhere H and A are defined above, that takes H and A as input and returns the number of attacks Serval needs to make before winning.\n\nIf there is no way to win, return -1.\n\nFor example, if H is 10 and A is 4, then the monster's health is 6.\n\nAfter one attack, the monster's health will be 6.\n\nAfter two attacks, the monster's health will be 2.\n\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make 3 attacks to win.\n\nFor example, if H is 10 and A is 4, then the monster's health is 6.\n\nAfter one attack, the monster's health will be 6.\n\nAfter two attacks, the monster's health will be 2.\n\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make 3 attacks to win.\n\nIf H or A are not positive integers, return -1.\n\nFor example, if H is -1 and A is 4, then the monster's health is 6.\n\nAfter one attack, the monster's health will be 6.\n\nAfter two attacks, the monster's health will be 2.\n\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make 3 attacks to win.\n\nIf H is 1 and A is 1, then the monster's health will be 6.\n\nAfter one attack, the monster's health will be 6.\n\nAfter two attacks, the monster's health will be 2.\n\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make 3 attacks to win.\n\nThe function should return -1 if there is no way to win.\n\nFor example, if H is 10 and A is 4, then the monster's health is 6.\n\nAfter one attack, the monster's health will be 6.\n\nAfter two attacks, the monster's health will be 2.\n\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make 3 attacks to win.\n\nHowever, if H is 10 and A is 5, then the monster's health will be 6.\n\nAfter one attack, the monster's health will be 6.\n\nAfter two attacks, the monster's health will be 2.\n\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make 2 attacks to win.\n\nFor example, if H is 10 and A is 4, then the monster's health is 6.\n\nAfter one attack, the monster's health will be 6.\n\nAfter two attacks, the monster's health will be 2.\n\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make 2 attacks to win.\n\nIf H is 10 and A is 10, then the monster's health will be 6.\n\nAfter one attack, the monster's health will be 6.\n\nAfter two attacks, the monster's health will be 2.\n\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make 1 attack to win.\n\nFor example, if H is 10 and A is 4, then the monster's health is 6.\n\nAfter one attack, the monster's health will be 6.\n\nAfter two attacks, the monster's health will be 2.\n\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make 1 attack to win.\n\nIf H is 10 and A is 6, then the monster's health will be 6.\n\nAfter one attack, the monster's health will be 6.\n\nAfter two attacks, the monster's health will be 2.\n\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make 1 attack to win.\n\nIf H is 10 and A is 5, then the monster's health will be 6.\n\nAfter one attack, the monster's health will be 6.\n\nAfter two attacks, the monster's health will be 2.\n\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make 2 attacks to win.\n\nIf H is 10 and A is 4, then the monster's health will be 6.\n\nAfter one attack, the monster's health will be 6.\n\nAfter two attacks, the monster's health will be 2.\n\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make 2 attacks to win.\n\nIf H is 10 and A is 3, then the monster's health will be 6.\n\nAfter one attack, the monster's health will be 6.\n\nAfter two attacks, the monster's health will be 2.\n\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make 2 attacks to win.\n\nIf H is 10 and A is 2, then the monster's health will be 6.\n\nAfter one attack, the monster's health will be 6.\n\nAfter two attacks, the monster's health will be 2.\n\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make 1 attack to win.\n\nIf H is 10 and A is 1, then the monster's health will be 6.\n\nAfter one attack, the monster's health will be 6.\n\nAfter two attacks, the monster's health will be 2.\n\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make 1 attack to win.\n\nIf H is 10 and A is 0, then the monster's health will be 6.\n\nAfter one attack, the monster's health will be 6.\n\nAfter two attacks, the monster's health will be 2.\n\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make 1 attack to win.\n\nIf H is not a positive integer or A is not an integer, return -1.\n\nFor example, if H is \"4\" and A is \"1\", then the monster's health will be 6.\n\nAfter one attack, the monster's health will be 6.\n\nAfter two attacks, the monster's health will be 2.\n\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make 3 attacks to win.\n\nThe function should return -1 if H or A are not positive integers.\n\nFor example, if H is -1 and A is \"1\", then the monster's health will be 6.\n\nAfter one attack, the monster's health will be 6.\n\nAfter two attacks, the monster's health will be 2.\n\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make 3 attacks to win.\n\nThe function should return -1 if H is not a positive integer.\n\nFor example, if H is -1 and A is \"1\", then the monster's health will be 6.\n\nAfter one attack, the monster's health will be 6.\n\nAfter two attacks, the monster's health will be 2.\n\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make 3 attacks to win.\n\nThe function should return -1 if A is not an integer.\n\nFor example, if H is \"4\" and A is \"a\", then the monster's health will be 6.\n\nAfter one attack, the monster's health will be 6.\n\nAfter two attacks, the monster's health will be 2.\n\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make 3 attacks to win."
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4\") == \"3\"\nassert solution(\"100 100\") == \"2\"\nassert solution(\"50 500\") == \"1\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 4\") == \"3\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 4\") == 3\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    h, a = line.split()\n    h, a = int(h), int(a)\n    assert h >= 1 and h <= 10 ** 4 and a >= 1 and a <= 10 ** 4\n    print(h - a, end=\"\\n\" if not sys.stdin.readline() else \"\")\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 75 25 100') == '50'\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 0 75 25\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 75 25 100') == '50'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 75 25 100') == '50'\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 75 25 100') == '50'\nassert solution('0 75 25 101') == '51'\nassert solution('0 75 25 100 101') == '101'\nassert solution('0 75 25 101 101') == '110'\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"0 75 25 1000\") == \"50\"\nassert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"0 75 25 100\") == \"50\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 75 25 100') == '50'\nprint(solution('0 75 25 100'))\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 75 25 100') == '50'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('105') == '1'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\"\nfrom math import sqrt\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"105\\n\") == \"1\\n\"\n\"\"\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('105') == 1\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('105') == '1'\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('105') == '1'\nassert solution('15') == '0'\nassert solution('3') == '0'\nassert solution('29') == '3'\n\nimport math"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(105) == 1\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"105\") == 1\n\"\"\"\n\nfrom itertools import count"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''7 3\n1 2 3 4 5 6 7''') == '1'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3\\n2 2 3') == '1'\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\\n2 2 3\") == \"1\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n\") == \"1\"\nassert solution(\"7 3\\n\") == \"1\"\nassert solution(\"10 4\\n\") == \"1\"\nassert solution(\"6 3\\n\") == \"0\"\nassert solution(\"20 10\\n\") == \"1\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\\n2 2 3\") == \"1\"\n\"\"\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n2 2 3\") == 1\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\") == 1\nprint(solution(\"7 3\"))\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3\\n2 2 3') == '1'\nassert solution('7 3\\n1 2 3') == '0'\nassert solution('7 3\\n2 2 2') == '0'\nassert solution('7 3\\n2 2 3\\n1 3 3') == '0'\nassert solution('7 3\\n2 2 3\\n1 3 3\\n2 3 3') == '1'\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('111') == '111'\nassert solution('101') == '101'\nassert solution('222') == '222'\n\n-----Test 1-----\nInput\n111\nOutput\n111\n\n-----Test 2-----\nInput\n1000\nOutput\n999\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(123) == \"123\"\nassert solution(\"456\") == \"456\"\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('111') == '111'\nassert solution('110') == '110'\nassert solution('110') == '110'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('111') == '111'\nassert solution('1234') == '1234'\n\"\"\"\nimport re\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\") == \"11\"\nassert solution(\"111\") == \"111\"\nassert solution(\"10\") == \"10\"\nassert solution(\"20\") == \"20\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('111') == '111'\nprint(solution('111'))\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\n\"\"\"\n\nN = int(input())"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"\n\nimport math\nimport numpy as np\nfrom utils import checkValue\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 6 3\") == 5\n\"\"\"\n\nA = [int(a) for a in stdin.strip().split()]\n\nbest_cost = 0\nbest_cost_completed = []\n\nfor i, a_i in enumerate(A):\n    for j, a_j in enumerate(A[i:]):\n        best_cost += abs(a_j - a_i)\n        if a_j > a_i:\n            best_cost_completed.append(j + i + 1)\n\nfor b in best_cost_completed:\n    print(best_cost)\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 6 3\") == '5'\n\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 6 3') == '5'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 6 3') == '5'\nassert solution('7 8 9') == '8'\n\"\"\"\n\nA = [int(i) for i in input().split()]\ncount = 0\nfor i in range(len(A)):\n    if i < 2:\n        count += 0\n    else:\n        count += (A[i] - A[i - 2])\nprint(count)\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1 6 3''') == '5'\n'''\n---Problem 2---\nWrite a function, solution(A, B), where A and B are lists of integers, and returns the number of ways one can\nselect B items from A such that:\n\n- The absolute difference between the total of items from A selected and B is minimum, and\n- The total of items from A selected is maximum.\nNote: The total of items from A selected is the sum of all the items that are selected.\n\nFor example:\n- If A = [5, 1, 2] and B = [1, 2], the function should return 2, because the following ways can be selected:\n- [5, 1, 2] [1, 2]\n- [1, 5, 2] [1, 2]\n\n- If A = [5, 1, 2] and B = [1, 2, 3], the function should return 1, because the only way to select [1, 2, 3] is\n- [1, 2, 3]\n\n- If A = [5, 1, 2] and B = [1, 2, 3, 4], the function should return 0, because no selection of items from A can make\nthe total of selected items be maximum, or the absolute difference between the total of items from A selected and B\nbe minimum.\n\n-----Constraints-----\n - 1 \\leq A_i, B_i \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 1 2\n4 1 4\n1 2 3\n\n-----Output-----\nPrint the number of ways to select B items from A such that:\n\n- The absolute difference between the total of items from A selected and B is minimum, and\n- The total of items from A selected is maximum.\n\n-----Sample Input-----\n5 1 2\n4 1 4\n1 2 3\n\n-----Sample Output-----\n2\n\nThe minimum total cost to select B items is 5, and the maximum total cost to select B items is 9, so the minimum\ndifference between the total cost and B is 5 - 9 = -4. Therefore, there are 2 ways to select B items with the\nminimum total cost and maximum total cost, making the total cost equal to 0.\n\nWhen the tasks are selected in the following order, the total cost will be 2, which is the minimum:\n - Select the third item from A.\n - Select the second item from A.\n - Select the third item from A.\n\n'''\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"5\"\nassert solution(\"1 6 3\") == \"5\"\nassert solution(\"1 6 3\") == \"5\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(2000)"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8') == '5'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'5'\n) == '5'\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8') == '5'\nassert solution('4') == '2'\nassert solution('2') == '1'\nassert solution('1') == '1'\nassert solution('8') == '5'\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8') == '5'\nprint(solution(input()))\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8') == '5'\nprint(solution('8'))\n\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(8) == 5\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"5 10 10 10\") == \"Yes\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"1 1 1 1\") == \"Yes\"\nassert solution(\"5 5 10 10\") == \"No\"\nassert solution(\"10 20 100 100\") == \"No\"\nassert solution(\"10 20 100 10\") == \"Yes\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == 'No'"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 9 10 10') == 'No'\nassert solution('10 1 10 10') == 'No'\nassert solution('10 10 10 10') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"\n\na, b, c, d = [int(i) for i in stdin.split()]\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"No\"\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"10 9 9 10\") == \"Yes\"\nassert solution(\"9 9 9 9\") == \"No\"\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"10 9 10 11\") == \"Yes\"\nassert solution(\"20 11 10 10\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 9 10 10') == 'No'\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4') == '5'\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4\\n') == '5'\n\"\"\"\nimport sys"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 2 5\\n6 3 4\") == 5\n\"\"\"\n\n\nfrom sys import stdin"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n6 7 8 9\") == \"17\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == '5'\n\"\"\"\n\n\"\"\"\nN, *v_c = map(int, stdin.readline().split())\n\nassert 1 <= N <= 20\nassert 1 <= v_c[i] <= 50\n\n\"\"\"\n\nimport sys\nfrom functools import lru_cache\n\nfrom itertools import accumulate, combinations\n\nfrom typing import Callable, Iterable, Iterator, List, Tuple, TypeVar\n\nI = TypeVar('I')\nO = TypeVar('O')"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 4\") == 5\n\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == 5\n\"\"\"\n\nn = int(input())\nv, c = [], []\nfor _ in range(n):\n    v_c = list(map(int, input().split()))\n    v.append(v_c[0])\n    c.append(v_c[1])\n\nprint(sum([v_i - c_i for v_i, c_i in zip(v, c)]))\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n##.#\\n....\\n##.#\\n.#.#\\n') == '###\\n###\\n.##\\n'\nassert solution('4 4\\n.##\\n.##\\n.##\\n') == '###\\n###\\n.##\\n'\nassert solution('4 4\\n#.#\\n.##\\n.##\\n') == '###\\n###\\n.##\\n'\n\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\nassert solution(\"4 4\\n##.#\\n....\\n##.#\\n#.#.\") == \"###\\n###\\n.##\"\n\n\"\"\"\n\nimport sys\n\nH, W = map(int, sys.stdin.readline().split())\ngrid = []\nfor _ in range(H):\n    grid.append(sys.stdin.readline().strip())\n\ncurr_grid = [[grid[i][j] for j in range(W)] for i in range(H)]\n\nfinal_grid = [[]]"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n4 4\n##.#\n....\n##.#\n.#.#\n''') == '''\n3 3\n.##\n.##\n.##\n'''\n\nassert solution('''\n5 5\n####\n####\n####\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n#.#\\n....\\n#.#\\n.#.#\") == \"###\\n###\\n.##\"\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\nassert solution(\"5 5\\n###\\n###\\n###\\n###\\n###\") == \"###\\n###\\n###\\n###\\n###\"\nassert solution(\"5 5\\n###\\n#.#\\n###\\n#.#\\n###\") == \"###\\n#.#\\n###\\n#.#\\n###\"\nassert solution(\"3 3\\n.##\\n###\\n.##\") == \"###\\n###\\n###\"\nassert solution(\"3 3\\n#.#\\n###\\n#.#\") == \"###\\n#.#\\n###\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\n\"\"\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\\n\") == \"###\\n###\\n.##\\n\"\nassert solution(\"2 2\\n.#\\n.\") == \".#\\n.\"\nassert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\\n\") == \"###\\n###\\n.##\\n\"\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n##.#\\n....\\n##.#\\n.#.#\\n') == '###\\n###\\n.##\\n'\n\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\\n\") == \"###\\n###\\n.##\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n##.#\\n....\\n##.#\\n.#.#') == '###\\n###\\n.##'\nassert solution('4 4\\n#..#\\n....\\n##.#\\n.#.#') == '#..#\\n....\\n##.#\\n#.#'\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n1\") == \"4.0\"\nassert solution(\"5\\n3\") == \"12.0\"\nassert solution(\"10\\n5\") == \"60.0\"\n\"\"\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"6.28318530717958623200\"\n\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n1\n''') == '6.28318530717958623200'\nassert solution('''\n1\n''')!= '6.28'\nassert solution('''\n1\n''')!= '6'\nassert solution('''\n1\n''')!= 6.28\nassert solution('''\n1\n''')!= 6\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n') == '6.28318530717958623200'\nassert solution('100\\n') == '5040.0'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '6.28318530717958623200'\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n') == '6.28318530717958623200'\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n') == '6.28318530717958623200'\nassert solution('2\\n') == '12.566370614359172953850'\nassert solution('3\\n') == '19.433981132056603'\nassert solution('4\\n') == '30.0'\nassert solution('100\\n') == '3393.775539613'\n\n\"\"\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == '6.28318530717958623200'\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '6.28318530717958623200'\nassert solution('100') == '2.8025906735756301964543629263861384932807560576922643888764029179634'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ASSS\") == \"Yes\"\nassert solution(\"ASSSS\") == \"No\"\nassert solution(\"AAABBBCCCCCDDDD\") == \"Yes\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ASSA') == \"Yes\"\nassert solution('ABBA') == \"No\"\nassert solution('AAAA') == \"Yes\"\nassert solution('AAAB') == \"No\"\nassert solution('AABAAB') == \"Yes\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'Yes'\nassert solution('AAAA') == 'No'\nassert solution('AAAAA') == 'No'\nassert solution('AAABB') == 'Yes'\nassert solution('AAABBB') == 'No'\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"ZZZZ\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ASA') == \"Yes\"\nassert solution('ASS') == \"No\"\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ASSA') == 'Yes'\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"AAAS\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ASSS') == \"Yes\"\nassert solution('AASSS') == \"Yes\"\nassert solution('SSAS') == \"No\"\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ASSS\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('-13 3') == '-10'\n\"\"\"\n\na, b = (int(x) for x in stdin.strip().split())\nprint(max(a+b, a-b, a*b))\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"-13 3\") == -10\n'''"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"-13 3\") == \"13\"\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())\nprint(-max(a + b, a - b, a * b))\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"2 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\") == \"5\"\nassert solution(\"6 3\") == \"12\"\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '1'\nassert solution('1 2 3 4') == '2'\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n4\n6 5 6 8\n''') == '3'\nprint('Sample PASSED')\n\n-----Test Input-----\n4\n8 6 8 9\n\n-----Test Output-----\n1\n\n-----Runtime Measurement-----\nMemory Usage: 14.2 MB, less than 98.41% of Python3 submissions\nTime: 64 ms, more than 95.93% of Python3 submissions\n\n'''\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3, [2, 4, 6]) == 1\nassert solution(3, [6, 5, 4]) == 2\n\"\"\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n3 1 5 6') == '2'\n\n-------\n-------\n\n------\n------\n\n------\n------\n\n\"\"\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\nassert solution('1\\n1') == '0'\nassert solution('2\\n1 1') == '1'\nassert solution('2\\n2 1') == '0'\nassert solution('2\\n1 2') == '1'\n\"\"\"\n\nimport sys\n\n_input = sys.stdin.readline().split()\nN = int(_input[0])\n_h = list(map(int, _input[1:]))\n\n_count = 0\n_count_1 = 0\nfor _i in _h:\n    if _i > _h[_count]:\n        _count += 1\n_count_1 = _count"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n6 5 6 8\") == 3\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 1 2 3 4') == '2'\nassert solution('1 1 1 1') == '4'\nassert solution('1 2 3 4 5') == '1'\nassert solution('1 2 1 2 1') == '3'\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == 2\nassert solution(\"4\\n1 1 1 1\") == 4\nassert solution(\"5\\n1 2 1 2 1\") == 3\nassert solution(\"5\\n1 2 1 2 1\") == 3"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 1 1 1') == '4\\n1 1 1 1'\nassert solution('5\\n1 2 1 2 1') == '5\\n1 2 1 2 1'\nassert solution('5\\n4 2 1 2 1') == '3\\n4 2 1 2 1'\nassert solution('5\\n1 2 1 2 1') == '3\\n2 1 2 1'\nprint('PASSED')\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n1 2 3 1 2 3 4') == '2\\n3 4'\nassert solution('4\\n1 1 1 1') == '4\\n1 1 1 1'\nassert solution('5\\n1 2 1 2 1') == '1\\n5'\n\nassert solution('5\\n1 2 1 2 1') == '1\\n5'\nassert solution('5\\n1 2 1 2 1') == '1\\n5'\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7\n1 2 3 1 2 3 4''') == 2\nassert solution('''4\n1 1 1 1''') == 4\nassert solution('''5\n1 2 1 2 1''') == 3\nassert solution('''5\n1 2 1 2 1''') == 3\nassert solution('''5\n1 2 1 2 1''') == 3\n\n'''\n10\n1 2 1 2 1 3 4 1 2 2\n3\n4 4\n1 1 1 1\n3 3\n3 3\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n'''\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n1 2 3 1 2 3 4') == '2\\n3 4'\nassert solution('4\\n1 1 1 1') == '4\\n1 1 1 1'\nassert solution('5\\n1 2 1 2 1') == '1\\n2 2 1'\n\"\"\"\n\n\"\"\"\nSolution:\n\"\"\"\n\nfrom math import sqrt\n\nn = int(input())\n\na = [int(i) for i in input().split()]\n\nnum_stairs = len(a)\n\nstairs = []\nfor i in range(num_stairs):\n    stairs.append(a[i])\n\nstairs.sort()\n\nprev_num = -1\ncount = 0\nfor i in range(num_stairs):\n    if stairs[i] == prev_num:\n        count += 1\n    else:\n        count = 1\n    prev_num = stairs[i]\n\nprint(count)\n\nnum_stairs = len(a)\n\nstep = []\nfor i in range(num_stairs):\n    step.append(a[i])\n    print(a[i])\n\nstep.sort()\n\nprint(step)\n\nprev_num = -1\ncount = 0\nfor i in range(num_stairs):\n    if step[i] == prev_num:\n        count += 1\n    else:\n        count = 1\n    prev_num = step[i]\n\nprint(count)\n\n\n\"\"\"\nl = [1, 1, 2, 2, 1, 1, 1, 1, 2]\n\na = [1, 2, 3, 1, 2, 3, 1, 2, 3]\n\nb = [1, 1, 2, 1, 1, 1, 2, 2, 2]\n\"\"\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(input()).strip()\n\nprint(solution(str(input())))\n\n\"\"\""
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1\") == \"1\"\nassert solution(\"10\\n20\") == \"0\"\nassert solution(\"6\\n6\") == \"1\"\nassert solution(\"7\\n21\") == \"1\"\nassert solution(\"7\\n28\") == \"2\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n6\") == \"1\"\nassert solution(\"7\\n21\") == \"4\"\nassert solution(\"9\\n999999999\") == \"333333333\"\nassert solution(\"9\\n999999984\") == \"333333328\""
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n6') == '1'\nassert solution('7\\n21') == '7'\nassert solution('999\\n999999999') == '33333333'\nassert solution('999999984') == '333333328'\n\n\"\"\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3\") == '1'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '1'\nassert solution('2\\n3') == '2'\nassert solution('1\\n2') == '1'\nassert solution('1\\n3') == '2'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"4999999999\") == \"999999999\"\nassert solution(\"3\") == \"1\"\nassert solution(\"999999999\") == \"999999999\"\nassert solution(\"9999999998\") == \"999999984\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n6\") == \"1\"\nassert solution(\"9\\n10\") == \"8\"\nassert solution(\"5\\n20\") == \"7\"\nassert solution(\"1\\n100\") == \"33\"\nassert solution(\"10\\n10\") == \"10\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n6\") == \"1\"\nassert solution(\"7\\n21\") == \"2\"\nassert solution(\"999999999\\n999999984\") == \"333333333\"\nassert solution(\"999999999\\n999999984\") == \"333333328\"\n\n\"\"\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"21\") == \"7\"\nassert solution(\"28\") == \"4\"\nassert solution(\"999999999\") == \"333333333\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n6\\n7\\n21\\n28\\n999999999\\n999999984\") == \"1\\n2\\n1\\n7\\n4\\n3333333333\\n33333333328\"\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"512 4\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('512 4') == '50'\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('512 4') == '50'\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"512 4\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"512 4\") == \"50\"\n\nassert solution(\"1000000000 9\") == \"1\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\"\"\"\n\nn, k = input().split()\nn = int(n)\nk = int(k)\n\nwhile k:\n    n = n % 10\n    if n > 0:\n        n -= 1\n    else:\n        n //= 10\n    k -= 1\nprint(n)"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('512 4') == '50'\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''512 4''') == '50'\nassert solution('''1000000000 9''') == '1'\nassert solution('''100 100''') == '100'\nassert solution('''100000000 1''') == '1'\nassert solution('''1 2''') == '0'\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\nassert solution('5\\n1 4') == '2\\n5 5'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 1\") == \"5\\n2 1 1 2 3\"\n\"\"\"\n\nn = int(input())\nA = list(map(int, input().split()))\n\nA.sort(reverse=True)\nans = 1\n\nfor i in range(n):\n    if i % 2 == 0:\n        ans += A[i]\n    else:\n        ans -= A[i]\n\nprint(ans)\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\\n\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\\n\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\\n\") == \"2\\n4 5\"\nassert solution(\"7\\n2 2 3 2 1 2 2\\n\") == \"7\\n1 2 2 2 2 3 2\"\nassert solution(\"8\\n5 7 2 9 5 3 1\\n\") == \"5\\n1 3 4 2 5 7\""
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\nassert solution(\"7\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\"\n\n\"\"\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 5 1 2 2 1\") == \"5\"\nassert solution(\"7 3 5 1 5\") == \"2 1 1 2 3\"\nassert solution(\"5 1 4\") == \"2 5\"\nassert solution(\"3 7 5 1 5\") == \"2 1 1 2 3\"\nassert solution(\"7 2 4\") == \"2 7\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nleft_sum = [0] * n\nright_sum = [0] * n\n\nleft_sum[0] = a[0]\nfor i in range(1, n):\n    left_sum[i] = left_sum[i - 1] + a[i]\n\nright_sum[n - 1] = a[n - 1]\nfor i in range(n - 2, -1, -1):\n    right_sum[i] = right_sum[i + 1] + a[i]\n\nmax_diff = float(\"-inf\")\nmax_diff_points = ()\nfor i in range(n - 1):\n    if abs(left_sum[i] - right_sum[i + 1]) > max_diff:\n        max_diff = abs(left_sum[i] - right_sum[i + 1])\n        max_diff_points = (i + 1, i + 1)\n\nprint(n - max_diff_points[0])\nprint(*(max_diff_points[1:]))"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\\n\") == '5\\n2 1 1 2 3'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\nassert solution(\"7\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\nassert solution(\"7\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nprint(\"Passed!\")\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 5 1 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5 3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"7 5 1 4\") == \"2\\n5 5\"\nassert solution(\"2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\n\nassert solution(\"7\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == '2'\n\"\"\""
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == '2'\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == '-1'\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == '2'\n\n\"\"\"\n\nimport sys\nfrom typing import List, Dict, Tuple\nimport time\n\nt = time.process_time()\n\nsys.stdin = open('input.txt')\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"2\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\n\"\"\"\nfrom collections import namedtuple\n\nCase = namedtuple(\"Case\", [\"n\", \"m\", \"books\"])\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 21\n10 8\n7 4\n3 1\n5 4''') == '2'\n\nassert solution('''4 16\n10 8\n7 4\n3 1\n5 4''') == '-1'\n\nassert solution('''4 17\n10 8\n7 4\n3 1\n5 4''') == '1'\n\nassert solution('''4 17\n10 8\n7 4\n3 1\n5 4\n7 8\n6 6\n4 1\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n1 1\n5 4\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == '2'\nassert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == '-1'\n\"\"\"\n\nfrom collections import Counter\n\nnum_songs, max_capacity = map(int, input().split())\nsongs = {int(num): int(size) for num, size in [input().split() for _ in range(num_songs)]}\nsongs = Counter(songs)\n\nsum_sizes = 0\nfor song, size in songs.items():\n    sum_sizes += size\n    if sum_sizes > max_capacity:\n        break"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == '-1'\n\nassert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == '2'\n\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 21\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'\nassert solution('4 21\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\n\"\"\"\nimport sys\nimport collections"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\") == \"tleelte\\nqwerty\\nvvvvvv\\nabcde\"\n\"\"\"\n\nfrom itertools import permutations\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\n\n\"\"\"\n\nimport string\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(s) == \"tleelte\"\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 5 3\\n6 1 1\\n6 6 1') == 'tleelte\\nqwerty\\nvvvvvv\\nabcde'\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 5 3\n6 1 1\n6 6 1\n5 2 2''') == 'tleelte'\nassert solution('''7 5 3\n6 1 1\n6 6 1\n5 2 2''') == 'qwerty'\nassert solution('''7 5 3\n6 1 1\n6 6 1\n5 2 2''') == 'vvvvvv'\nassert solution('''7 5 3\n6 1 1\n6 6 1\n5 2 2''') == 'abcde'\nassert solution('''7 5 3\n6 1 1\n6 6 1\n5 2 2\n7 6 2\n6 5 1\n6 5 1\n6 4 1\n6 4 1\n6 3 1\n6 3 1\n6 3 1\n6 3 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n6 2 1\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"tleelte\\nqwerty\\nvvvvvv\\nabcde\"\n\n\"\"\"\nfrom typing import List\nimport collections"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"tleelte\\nqwerty\\nvvvvvv\\nabcde\""
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"tleelte\\nqwerty\\nvvvvvv\\abcde\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 12 6\\n\") == \"12\"\nassert solution(\"10 15 10\\n\") == \"5\"\nassert solution(\"100 200 200\\n\") == \"7\"\nassert solution(\"100 500 200\\n\") == \"11\"\nassert solution(\"100 200 500\\n\") == \"14\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '20 12 6'\n) == '12'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20 12 6') == '12'\n\"\"\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20 12 6') == '12'\n\"\"\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''20 12 6''') == '12'\nassert solution('''20 12 6''') == '12'\n\n'''"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''20 12 6''') == '12'\nassert solution('''20 12 10''') == '12'\nassert solution('''100 10 20''') == '5'\nassert solution('''100 10 100''') == '10'\nassert solution('''100 100 10''') == '10'\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\"\"\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 12 6\\n') == '12\\n'\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20 12 6') == '12'\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\"\"\"\n\nN, X, T = list(map(int, input().split()))\n\nn = N//X + 1"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '8'\n) == '2'\n\n-------------Test Case Details------------\nInput:\n    8\n\nOutput:\n    2\n\n-------------Test Case Details------------\nInput:\n    9\n\nOutput:\n    2\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n') == '2'\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n5') == '2'\n\nassert solution('8\\n8') == '4'\n\nassert solution('7\\n7') == '1'\n\nassert solution('1\\n2') == '0'"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"8\"\n) == \"2\"\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\") == \"2\"\nassert solution(\"13\") == \"5\"\n\"\"\"\n\nn = input()\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n3\") == '2'\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\">1<0<\") == \"0\"\nassert solution(\">4<2<\") == \"1\"\nassert solution(\">5<3<\") == \"1\"\nassert solution(\">5<4<\") == \"1\"\nassert solution(\">5<0<\") == \"0\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"2\"\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"3\"\nassert solution(\"3 1\") == \"0\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"10 5\") == \"5\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == 3\nassert solution(\"10 10\") == 4\nassert solution(\"2 2\") == 2\nassert solution(\"100 100\") == 10\n\"\"\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3') == '1'\nassert solution('3 3') == '1'\nassert solution('3 2') == '0'\nassert solution('10 100') == '1'\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3') == '3'\nassert solution('4 0') == '4'\nassert solution('6 9') == '2'\n\"\"\"\nimport sys\nfrom itertools import accumulate"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"3\"\nassert solution(\"3 1\") == \"2\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"10 100\") == \"100\"\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3\\n\") == \"3\"\n\"\"\"\n\n\"\"\"\n1.\na = int(input())\np = int(input())\n\na_pie = (a + p - 1) // p"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"3\"\nprint(solution(\"1 3\"))\nprint(solution(\"1 3\"), \"3\")\nprint(solution(\"3 4\"), \"1\")\nprint(solution(\"2 4\"), \"1\")\nprint(solution(\"2 3\"), \"0\")\n\n\"\"\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == 3\nassert solution(\"1 2\") == 2\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3') == '3'\nassert solution('1 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"4 12\\n\"\n) == \"16\"\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 12\\n') == '16'\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 12\") == \"16\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 12\\n\") == \"16\"\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 12\") == \"16\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"2 2\") == \"0\"\n\n-------------------------------------------------------------------------------"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 12\\n\") == \"16\"\nassert solution(\"1 1\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 12\\n') == '16'\n\"\"\"\n\na, b = map(int, input().split(' '))"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 12') == '16'\n\"\"\"\n\nA, B = input().split()\nA, B = int(A), int(B)\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 12\") == \"16\"\nprint(solution(\"4 12\"))\n\n------Problem------\nhttps://www.hackerrank.com/challenges/a-very-big-sum/problem\n------Solution------\n\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\nassert solution(\"chokudaaiz\") == \"No\"\nassert solution(\"chokudai0\") == \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n\n'''\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n\n----\n\nTakahashi wants to be a member of some web service.\nHe tried to register himself with the ID S, which turned out to be already used by another user.\nThus, he decides to register using a string obtained by appending one character at the end of S as his ID.\nHe is now trying to register with the ID T. Determine whether this string satisfies the property above.\n\n-----Constraints-----\n - S and T are strings consisting of lowercase English letters.\n - 1 \\leq |S| \\leq 10\n - |T| = |S| + 1\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\nT\n\n-----Output-----\nIf T satisfies the property in Problem Statement, print Yes; otherwise, print No.\n\n-----Sample Input-----\nchokudai\nchokudaiz\n\n-----Sample Output-----\nYes\n\nchokudaiz can be obtained by appending z at the end of chokudai.\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n\n\"\"\"\n\nimport re\n\nS = input()\nT = input()"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\nassert solution(\"banana\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == IMPOSSIBLE\nassert solution('1 2\\n') == IMPOSSIBLE\nassert solution('2 16\\n') == 9\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 10\") == \"IMPOSSIBLE\"\nassert solution(\"5 9\") == \"4\"\nassert solution(\"1 1\") == \"IMPOSSIBLE\"\nassert solution(\"2 5\") == \"4\"\nassert solution(\"1 10\") == \"6\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2') == 'IMPOSSIBLE'\nassert solution('2 16') == '9'\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 16') == '9'\n\n\"\"\"\n\na, b = map(int, input().split())"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 16\\n') == '9'\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.read().split('\\n'))"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 16\\n\") == \"9\"\n\n\"\"\"\n\n\n\n\"\"\"\nReturning the shortest path\nGiven an array of points, find the shortest path between the first point and the second point.\nThe input is given from Standard Input in the following format:\nPoint A Point B\n\n-----Constraints-----\n - There are at least 3 points in the array.\n - The first point will be a point on the x-axis and the second point will be a point on the y-axis.\n - The points are distinct.\n\n-----Input-----\n3 1\n3 2\n5 -1\n\n-----Output-----\n3\n\n-----Sample Input-----\n1 1\n2 2\n3 3\n\n-----Sample Output-----\n0\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 16') == '9'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 16') == '9'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 16\") == \"9\"\n\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"117\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('123') == 'No'\nassert solution('717') == 'Yes'\nassert solution('928') == 'No'\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('42') == 'Yes'\nassert solution('742') == 'No'\nassert solution('117') == 'Yes'\nassert solution('971') == 'Yes'\nassert solution('971') == 'Yes'\n\n\"\"\"\nimport sys\nimport os\nimport unittest\nimport io\nimport re"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('117') == 'Yes'\nassert solution('832') == 'No'\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('117') == 'Yes'\nassert solution('1234') == 'No'\n\"\"\"\n\nnum = input()"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == 'Yes'\nassert solution('21') == 'No'\nassert solution('21', '11') == 'No'\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7') == 'Yes'\nassert solution('111') == 'No'"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"117\") == \"Yes\"\n\n\"\"\"\nimport re\n\nimport sys\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"987\") == \"No\"\nassert solution(\"1087\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"117\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(12) == \"Yes\"\n\n-------Solution---------\n\"\"\"\n\n\"\"\"\n\ubb38\uc81c\nN\uc774 \uc8fc\uc5b4\uc84c\uc744 \ub54c, S(N)\uc774 N\uc744 \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c0\ub294\uc9c0 \uc54c\uc544\ubcf4\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc2dc\uc624.\n\n\uc785\ub825\n\uccab\uc9f8 \uc904\uc5d0 N\uc774 \uc8fc\uc5b4\uc9c4\ub2e4. N\uc740 1,000,000\ubcf4\ub2e4 \uc791\uac70\ub098 \uac19\uc740 \uc790\uc5f0\uc218\uc774\ub2e4.\n\n\ucd9c\ub825\n\uccab\uc9f8 \uc904\uc5d0 N\uc774 S(N)\ub85c \ub098\ub204\uc5b4\ub5a8\uc5b4\uc9c0\uba74 \"Yes\", \uc544\ub2c8\uba74 \"No\"\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n\uc608\uc81c \uc785\ub825 1\n12\n\uc608\uc81c \ucd9c\ub825 1\nYes\n\n\uc608\uc81c \uc785\ub825 2\n21\n\uc608\uc81c \ucd9c\ub825 2\nNo\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline())"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(12) == 'Yes'\nassert solution(0) == 'No'\nassert solution(19) == 'Yes'\nassert solution(100) == 'No'"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12') == \"Yes\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12') == 'Yes'\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('101') == 'Yes'\n\"\"\"\n\nn = int(stdin.readline())"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12\\n\") == \"Yes\\n\"\n\"\"\"\n\nimport sys\n\n\"\"\"\nFor each divisor d, for all digits in the decimal notation of d,\nwe check if the sum of the digits in the decimal notation of N\nis divisible by d.\nIf any of the conditions is not met, d is not a divisor.\nFinally, we print Yes if d divides N, or No otherwise.\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\") == \"Yes\"\nprint(solution(\"12\"))"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"\n\nimport sys\n\nN = int(input().strip())"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\""
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 0 1\") == \"1 1 -1 0\"\nassert solution(\"0 0 0 -1\") == \"-1 1 -1 0\"\nassert solution(\"1 0 0 0\") == \"0 0 1 1\"\n\"\"\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\"\"\"\n\nx1, y1, x2, y2 = input().split()\nx1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\nassert solution(\"0 1 0 0\") == \"0 0 0 1\"\nassert solution(\"1 0 0 0\") == \"-1 1 -1 0\"\nassert solution(\"0 1 1 1\") == \"0 0 0 1\"\nassert solution(\"1 0 0 0\") == \"0 0 0 1\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\n\nimport sys\n\nlines = sys.stdin.readlines()\n\nx1, y1, x2, y2 = map(int, lines[0].split(\" \"))\n\nprint(\"{} {} {} {}\".format(x2, y2, x1, y1))\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 0 1\") == \"1 1 -1 0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''0 0 0 1''') == '-1 1 -1 0'\nassert solution('''0 0 0 1\n0 1 0 1\n0 0 0 1\n''') == '-1 1 -1 0'\nassert solution('''0 0 0 1\n0 1 0 1\n0 0 0 1\n0 0 0 1\n''') == '0 0 0 1'\nassert solution('''0 0 0 1\n0 1 0 1\n0 0 0 1\n0 0 0 1\n''') == '0 0 0 1'\n\nprint(\"all tests passed.\")\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('red blue') == '2 4'\n\n-----Paste-----\n8\nHello World!\n\n-----Test cases-----\n1.\n    Input:\n        red blue\n        3 4\n    Output:\n        2 4\n2.\n    Input:\n        red blue\n        10 10\n    Output:\n        9 10\n3.\n    Input:\n        red blue\n        100 100\n    Output:\n        99 100\n4.\n    Input:\n        red blue\n        10 10\n    Output:\n        9 10\n\"\"\""
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(['red', 'blue']) == '2 4'\n\"\"\"\n\nS, T = input().split()\nA, B = map(int, input().split())\nU = input()\n\ncount_S = A - (B - 1)\ncount_T = A\n\nprint(count_S, count_T)\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\n\nS, T = map(str, input().split(' '))\nA, B = map(int, input().split(' '))\nU = input()\n\nfor i in range(A):\n    if S == U:\n        S = ''\n    else:\n        S = U\n\nfor i in range(B):\n    if T == U:\n        T = ''\n    else:\n        T = U\n\nprint(S, T)\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('red blue') == '2 4'\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\nS = input()\nT = input()\nA, B = [int(x) for x in input().split()]\nU = input()\n\nprint(\"%d %d\" % (A - 1 if S == U else A, B - 1 if T == U else B))\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('red blue') == '2 4'\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(s) == t\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'No'\nassert solution('a') == 'Yes'\nassert solution('aa') == 'Yes'\nassert solution('ab') == 'No'\nassert solution('aba') == 'Yes'\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abccba') == 'Yes'\nassert solution('ab') == 'No'\nassert solution('aa') == 'No'\nassert solution('a') == 'No'\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == 'Yes'\nassert solution(test_input_2) == 'No'\nassert solution(test_input_3) == 'No'\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(s) == expected\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"abcabcdd\") == \"No\"\nassert solution(\"aaaaa\") == \"Yes\"\nassert solution(\"abcde\") == \"No\"\nassert solution(\"abcdee\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('aaabbb') == 'No'\nassert solution('ababab') == 'Yes'\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('abcd') == 'Yes'\nassert solution('abcab') == 'Yes'\nassert solution('abcabc') == 'Yes'\nassert solution('abcabcd') == 'No'\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"abcabca\") == \"No\"\nassert solution(\"abcbac\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"abca\") == \"No\"\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"aabbcc\") == \"No\"\n\n\"\"\"\n\n\"\"\"\nGiven are a positive integer N and a string S consisting of lowercase English letters.\nDetermine whether the string is a concatenation of two or more strings.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - S consists of lowercase English letters.\n - |S| = N\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS\n\n-----Output-----\nPrint Yes if S is a concatenation of two or more strings, and No otherwise.\n\n-----Sample Input-----\n5\nabcabc\n\n-----Sample Output-----\nYes\n\nLet T =  abc, and S = T + T.\n\"\"\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 1 2') == \"3.000000 0\"\n\"\"\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1 2\") == \"3.0 0\"\nassert solution(\"2 3 1 1\") == \"0.5 1\"\nassert solution(\"1 1 1 1\") == \"0.0 0\"\nassert solution(\"1 2 1 1\") == \"0.0 0\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\n\"\"\"\n\nW, H, x, y = list(map(int, input().split()))\nx, y = x - 1, y - 1\n\nmax_area = W * H"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\nassert solution(\"1 1 1 1\") == \"0.000000 1\"\nassert solution(\"2 1 1 1\") == \"1.000000 1\"\nassert solution(\"1 1 1 2\") == \"1.000000 0\"\nassert solution(\"1 1 1 1\") == \"0.000000 0\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\nassert solution(\"5 5 1 1\") == \"0.955594 0\"\nassert solution(\"6 5 5 5\") == \"0.955594 0\"\n\"\"\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '0'\nassert solution('1 1 1 1') == '0'\nassert solution('1 1 1 2') == '1'\nassert solution('1 2 3 4') == '3.0'\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 G W Y P Y W\") == \"Four\"\nassert solution(\"8 G G G G G G G\") == \"Eight\"\nassert solution(\"7 P P P P P P\") == \"Seven\"\n\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\nG W Y P Y W') == 'Four'\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"G W Y P Y W\") == \"Four\"\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 W G Y P') == 'Four'\nassert solution('1 P') == 'Three'\nassert solution('7 Y G W P') == 'Four'\n\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 P W') == 'Four'\nassert solution('4 Y P') == 'Four'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 G W P Y W') == 'Four'\nassert solution('6 G G Y G Y P P') == 'Four'\nassert solution('4 P P P P P') == 'Four'"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\nG W Y P Y W') == 'Four'\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''6\nG W Y P Y W''') == 'Four'\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('G W Y P Y W') == 'Four'\nassert solution('G W Y P Y W P') == 'Three'\nassert solution('G W Y P Y W P G') == 'Four'\nassert solution('G W Y P Y W G G') == 'Four'\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1 3 4 2\") == \"6\"\nassert solution(\"5 3 3\") == \"2\"\nassert solution(\"5 5 6\") == \"2\"\n\"\"\"\n\nimport math\n\nn, x, y = [int(x) for x in stdin.readline().split()]\n\ndoors = [int(x) for x in stdin.readline().split()]\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\\n\") == 6\nassert solution(\"5 3 3\\n1 2 4 2 3\\n\") == 2\n\n\"\"\"\n\nimport collections\n\nn, x, y = [int(x) for x in stdin.readline().strip().split()]\na = [int(x) for x in stdin.readline().strip().split()]\n\na = collections.defaultdict(int, enumerate(a))\n\nm = collections.defaultdict(int)\n\ni = 1\nd = 0\nt = 0\nwhile i <= 1000000000:\n    if d!= 0:\n        d -= 1\n        if m[d] == 0:\n            t += 1\n        continue\n    if t == 0:\n        if m[0] == 0:\n            print(i)\n            break\n        d = max(a.keys())\n        t = 0\n        continue\n    d = a[d]\n    if m[d] == 0:\n        m[d] = 1\n        t -= 1\n        continue\n    a[d] += 1\n    m[d] = 0\n    t += 1\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\\n\") == 2\n\n\"\"\"\n\nn, x, y = map(int, input().split())\ndoors = list(map(int, input().split()))\n\ncount = 0\n\nfor i in doors:\n    count += i - x if i > x else 0\n\nfor i in range(n):\n    if doors[i] + y >= x:\n        count += 1\n    else:\n        break\n\nprint(count)\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1 3 4 2\") == 6\n\"\"\""
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 3 2\\n2 3 1 3 4 2') == '6'\nassert solution('5 3 3\\n1 2 4 2 3') == '2'\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 3\\n1 2 6 10 3') == 2\nassert solution('6 3 2\\n2 3 1 3 4 2') == 6\nassert solution('5 5 6\\n1 2 6 10 3') == 2\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\") == \"6\"\nassert solution(\"5 3 3\\n1 2 4 2 3\") == \"2\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 3 2\\n2 3 1 3 4 2') == 6\nassert solution('5 3 3\\n1 2 4 2 3') == 2\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\\n\") == \"2\"\n\"\"\"\n\nfrom typing import List\nimport sys\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 2\") == 6\nassert solution(\"1 2 3 4\") == 2\n\"\"\"\nimport math\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 2 6 2\\n4 5 4 1 3\\n\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('12\\n4 5 4 1 3') == 7\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n5\n4 8 2 6 2\n4 5 4 1 3\n\n\"\"\"\n) == \"7\"\nprint('OK')\n\nassert solution(\n\"\"\"\n4\n1 3 2 4\n1 3 2 4\n\n\"\"\"\n) == \"0\"\nprint('OK')\n\n\"\"\"\nn = int(stdin.readline())\n\nteacher = list(map(int, stdin.readline().split()))\nstudents = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 2 6 2\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 8 2 6 2\\n4 5 4 1 3') == '7'\n\nassert solution('1 3 2 4\\n1 3 2 4') == '0'\n\nassert solution('5 9 8 7 3\\n3 9 8 7 3') == '4'\n\nassert solution('4 5 9 7 2\\n2 5 8 7 1') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == \"7\"\n\n\"\"\"\nimport heapq\nimport math\nfrom collections import Counter\n\nimport sys\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 6 2 2\") == 7\n\"\"\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8 2 6 2\\n4 5 4 1 3\\n') == 7\n\"\"\""
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8 2 6 2\\n4 5 4 1 3') == '7'\nassert solution('1 3 2 4\\n1 3 2 4') == '0'\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8 2 6 2\\n4 5 4 1 3') == '7'\nassert solution('1 3 2 4\\n1 3 2 4') == '0'\nassert solution('4 8 2 6 2\\n4 5 4 1 3\\n3 1 1 3') == '7'\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('4\\n1 1 2 3\\n') == '1 1 2 3'\nassert solution('6\\n1 2 3 4 5 6\\n') == '1 2 3 4 5 6'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10\\n') == '1 2 3 4 5 6 7 8 9 10'\n\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_stdin) == test_stdout\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin_1) == stdout_1\nassert solution(stdin_2) == stdout_2\n\n\"\"\"\n\nfrom collections import Counter\n\nfrom typing import List, Tuple\n\nN = int(input())\na = list(map(int, input().split()))\n\ncnt = Counter(a)\n\nb = []\n\nfor k, v in cnt.items():\n    b.append(k * (v // 2) + k * (v % 2))\n\nprint(*b)\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 4 5 10') == '1 1 3 5 9'\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\nprev = a[0]\nfor i in a[1:]:\n    if prev == 1:\n        prev = 2\n    elif prev == 2:\n        prev = 1\n    elif prev == 3:\n        prev = 4\n    elif prev == 4:\n        prev = 3\n    elif prev == 5:\n        prev = 6\n    elif prev == 6:\n        prev = 5\n    elif prev == 10**9:\n        prev = 10**9 - 1\n    else:\n        prev = 10**9\n\nprint(*[prev]*n)\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n1 2 4 5 10''') == '1 1 3 5 9'\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split()))\n\ndp = [l]\n\nfor i in range(1, n):\n    new_dp = [l]\n    for l in dp:\n        new_dp.append(list(map(lambda x: x + 1 if x % 2 == 1 else x + 2, l)))\n        new_dp.append(list(map(lambda x: x - 1 if x % 2 == 1 else x - 2, l)))\n        new_dp.append(list(map(lambda x: x + 10 if x % 10 == 9 else x, l)))\n        new_dp.append(list(map(lambda x: x - 10 if x % 10 == 9 else x, l)))\n    dp = new_dp\n\nprint(*[i for l in dp for i in l], sep='\\n')\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 4 5 10') == '1 1 3 5 9'\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n1 2 4 5 10''') == '''1 1 3 5 9'''\nassert solution('''10\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000''') == '''9999 9 50605065 1 5 89 5 999999999 60506055 999999999'''\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nb = []\n\nfor i in range(n):\n    if a[i] == 1:\n        b.append(2)\n    elif a[i] == 2:\n        b.append(1)\n    elif a[i] == 3:\n        b.append(4)\n    elif a[i] == 4:\n        b.append(3)\n    elif a[i] == 5:\n        b.append(6)\n    elif a[i] == 6:\n        b.append(5)\n    elif a[i] == 10**9:\n        b.append(10**9-1)\n    else:\n        b.append(a[i] - 1)\n\nfor i in range(len(b)):\n    print(b[i], end=\" \")"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 2\\n3 4\\n5 4\\n3 5\") == '1'\nassert solution(\"5 3\\n1 2\\n3 4\\n5 4\\n3 5\") == '2'\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\") == \"2\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\") == \"2\"\nassert solution(\"5 5\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n1 2\\n3 4\\n5 4\\n3 5') == '1'\nassert solution('17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4') == '2'"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3 4\n1 2\n3 4\n5 4\n3 5\"\"\") == \"1\"\nassert solution(\"\"\"7 8\n1 2\n1 3\n1 4\n2 4\n2 6\n3 5\n3 6\n3 7\n4 5\n4 6\n4 7\n5 6\n6 7\n7 1\n7 3\n7 6\n7 8\"\"\") == \"2\"\nassert solution(\"\"\"1 2\n1 3\n2 3\"\"\") == \"1\"\nassert solution(\"\"\"2 2\n1 1\"\"\") == \"1\"\nassert solution(\"\"\"4 4\n1 2\n1 3\n1 4\n3 1\n4 2\n4 3\"\"\") == \"4\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 4\n1 2\n3 4\n5 4\n3 5''') == '1'\n\nassert solution('''17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6''') == '2'''"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\n\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 4\n1 2\n3 4\n5 4\n3 5''') == '1'\nassert solution('''17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6''') == '2'''\n\n\n\n===============================\n= \u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 =\n===============================\n\n\u0412\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u043d\u0430\u0431\u043e\u0440 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430, \u043f\u043e\u043c\u0435\u043d\u044f\u0432 \u0438\u0445 \u043f\u043e\u0440\u044f\u0434\u043e\u043a.\n\n\u041f\u043e\u0437\u0438\u0446\u0438\u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u0442\u044c\u0441\u044f \u0432 \u0442\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\nInput:\n2 -3 1 5 7\n\nOutput:\n-3 2 1 7 5\n\nInput:\n-1 -3 -5 -7\n\nOutput:\n-7 -3 -5 -1\n\n\n===============================\n= \u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 =\n===============================\n\n\u0412\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u043d\u0430\u0431\u043e\u0440 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430, \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0435 \u043a \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443.\n\n\u041f\u043e\u0437\u0438\u0446\u0438\u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u0442\u044c\u0441\u044f \u0432 \u0442\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\nInput:\n2 1 5 6\n\nOutput:\n2+1i 5+6i\n\nInput:\n1 -3 1 -1\n\nOutput:\n-1-3i 1-1i\n\n\n===============================\n= \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438 =\n===============================\n\n\u0412\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u043d\u0430\u0431\u043e\u0440 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430. \u0415\u0441\u043b\u0438 \u043d\u0430\u0431\u043e\u0440 \u0438\u043c\u0435\u0435\u0442 \u043e\u0434\u0438\u043d \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0432 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 \u0443\u0441\u043b\u043e\u0432\u0438\u044f.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\nInput:\n1 -2 5 1\n\nOutput:\n1 -2 5\n\nInput:\n3 -1 2 1\n\nOutput:\n3 -1 2\n\n\n===============================\n= \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0415\u0432\u043a\u043b\u0438\u0434\u0430 =\n===============================\n\n\u0412\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u043d\u0430\u0431\u043e\u0440 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044f \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0435 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u0435\u0433\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0432 \u044d\u0442\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n\n\u041f\u043e\u0437\u0438\u0446\u0438\u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u0442\u044c\u0441\u044f \u0432 \u0442\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \ufffd"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n\n\"\"\"\nfrom collections import defaultdict\nfrom typing import Dict, DefaultDict, List\n\n\nclass Graph:\n    def __init__(self):\n        self.graph: DefaultDict = defaultdict(list)\n\n    def add_edge(self, source: int, destination: int):\n        self.graph[source].append(destination)\n        self.graph[destination].append(source)\n\n    def find_all_components(self) -> List:\n        visited = [False for _ in range(len(self.graph))]\n        components = list()\n        for node in range(len(self.graph)):\n            if not visited[node]:\n                components.append(self.dfs(visited, node))\n        return components\n\n    def dfs(self, visited: List, node: int) -> List:\n        visited[node] = True\n        component = list()\n        component.append(node)\n\n        for child in self.graph[node]:\n            if not visited[child]:\n                component.extend(self.dfs(visited, child))\n\n        return component\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == \"1\"\nassert solution(\"5 5\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == \"2\"\nassert solution(\"5 6\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == \"0\"\nassert solution(\"5 5\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n1 2\\n3 4\\n5 4\\n3 5') == '1'\nassert solution('17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6') == '2'\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n') == '1'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '4'\nassert solution('3\\n1 1 2\\n2 3\\n1 3\\n') == '0'\n\n\"\"\""
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n') == '1'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '4'\nassert solution('5\\n1 1 1 1 2\\n2 3\\n2 4\\n3 5\\n4 5\\n') == '0'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '4'\nassert solution('3\\n1 1 2\\n2 3\\n1 3\\n') == '0'\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n') == '1'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n2 0 0 0 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"4\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n\"\"\"\nimport sys\nimport math\nsys.setrecursionlimit(10 ** 7)\nINT_MAX = sys.maxsize\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2\\n2 3\\n1 3') == '0'\nassert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5') == '1'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n2 0 0 1 2\n1 2\n2 3\n2 4\n2 5''') == '1'\nassert solution('''5\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5''') == '4'\nassert solution('''3\n1 1 2\n2 3\n1 3''') == '0'\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"asdijf\") == \"qoztvz\"\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"nijfvj\") == \"tvqhwp\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\naz\nbf\") == \"bc\"\nassert solution(\"5\nafogk\nasdji\") == \"alvuw\"\nassert solution(\"6\nnijfvj\ntvqhwp\") == \"qoztvz\"\n\"\"\""
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"ab\") == \"ab\"\nassert solution(\"a\") == \"a\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a) == b\n\"\"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('az') == 'ba'\nassert solution('bf') == 'bc'\nassert solution('aefg') == 'abdg'\nassert solution('abc') == 'acb'\nassert solution('aab') == 'aba'\n\"\"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"alvuw\"\nassert solution(\"nijfvj\") == \"qoztvz\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"afogk\") == \"qoztvz\"\nassert solution(\"asdji\") == \"alvuw\"\nassert solution(\"nijfvj\") == \"qoztvz\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"nijfvj\") == \"qoztvz\"\nassert solution(\"asdji\") == \"tvqhwp\"\n\n\"\"\"\n\nfrom typing import Dict, List, Optional\nimport math"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('az') == 'bc'\n\nassert solution('bf') == 'bc'\n\nassert solution('nijfvj') == 'qoztvz'\n\nassert solution('asdji') == 'alvuw'\n\nassert solution('tvqhwp') == 'qoztvz'"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\n\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\\n\") == \"YES\\n1 2 5\\n\"\nassert solution(\"5 4\\n15 13 15 15 12\\n\") == \"NO\\n\"\nassert solution(\"4 4\\n20 10 40 30\\n\") == \"YES\\n1 2 3 4\\n\"\nassert solution(\"3 5\\n9 9 9 9\\n\") == \"NO\\n\"\n\n\"\"\"\n\n\nimport math\nfrom collections import Counter\nimport re\n\nn, k = map(int, input().split())\na = [int(x) for x in input().split()]\nres = \"NO\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n15 13 15 15 12\\n\") == \"YES\\n1 2 5\\n\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\\n\") == 'YES\\n1 2 5'\nassert solution(\"5 4\\n15 13 15 15 12\\n\") == 'NO'\n\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\\n\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n20 10 40 30\\n\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\\n\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\\n\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\\n\"\n\"\"\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\nassert solution(\"3 2\\n30 20 40\") == \"NO\"\nassert solution(\"4 2\\n30 20 40\") == \"YES\\n1 2\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\\n\") == \"YES\\n1 2 5\\n\"\nassert solution(\"4 4\\n20 10 40 30\\n\") == \"NO\\n\"\nassert solution(\"4 4\\n20 10 10 30\\n\") == \"YES\\n1 2 3 4\\n\"\nassert solution(\"4 4\\n20 20 10 10\\n\") == \"YES\\n1 2 3 4\\n\"\nassert solution(\"4 4\\n5 5 10 10\\n\") == \"YES\\n1 2 3 4\\n\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n15 13 15 15 12') == 'YES\\n1 2 5'\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n15 13 15 15 12\\n') == 'YES\\n1 2 5\\n'\nassert solution('5 4\\n15 13 15 15 12\\n') == 'NO\\n'\nassert solution('4 4\\n20 10 40 30\\n') == 'YES\\n1 2 3 4\\n'\nassert solution('6 5\\n15 13 15 15 15 12\\n') == 'YES\\n1 2 5\\n'\nassert solution('3 4\\n15 15 15 15\\n') == 'YES\\n1 2 3 4\\n'\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''9\n5 1 3 6 8 2 9 0 10''') == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution('''5\n1 2 4 0 2''') == 'NO\\n'\nassert solution('''5\n1 2 3 4 0''') == 'NO\\n'\nassert solution('''1\n0''') == 'YES\\n0'\nassert solution('''2\n0 1''') == 'YES\\n0 1'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 4') == 'YES\\n1 0 0 0 1'\nassert solution('3\\n1 2 3') == 'NO\\n0 1 1'\nassert solution('3\\n1 3 2') == 'NO\\n0 1 1'\nassert solution('2\\n3 4') == 'NO\\n0 1 1'\nassert solution('2\\n1 4') == 'YES\\n1 0'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(print())\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'NO'\nassert solution('7 1 3 4 2 5 0 6') == 'YES\\n1 0 0 1 0 1 0 1 0'\nassert solution('6 1 3 4 5 0 2') == 'YES\\n0 1 1 1 0 0 1 1'\nassert solution('5 1 3 6 8 2 9 0 10') == 'YES\\n1 0 0 1 0 1 1 0 1 0'\n\n\"\"\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"1 2 4 0 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9\\n5 1 3 6 8 2 9 0 10') == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution('5\\n1 2 4 0 2') == 'NO\\n1 0 0 0 1 0'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"NO\"\nassert solution(\"4\\n0 1 2 3\") == \"YES\\n0 1 1 1\"\n\nassert solution(\"8\\n0 1 2 3 4 5 6 7\") == \"NO\"\nassert solution(\"6\\n0 1 2 3 4 5\") == \"YES\\n1 1 1 1 1 1\"\n\nassert solution(\"6\\n0 1 2 3 4 5\") == \"YES\\n1 1 1 1 1 1\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 10 10 0 5 4 3 2 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 8 7 6 5 4 3 2 1 0\") == \"YES\\n0 1 0 1 1 0 1 0 1 1 0 1 1 0 1 1 0 1 0 1 1 0 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 4 9\") == \"3\"\nassert solution(\"8 5 5 8\") == \"0\"\nassert solution(\"2 1 2 6\") == \"3\"\nassert solution(\"2 1 2 5\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\"\"\") == \"3\\n0\\n1134\\n0\"\n\"\"\""
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\\n\") == '3\\n0\\n1134\\n0'\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom typing import DefaultDict, Dict, List, NamedTuple, Tuple\n\nimport unittest\n\n\nclass Star(NamedTuple):\n    is_star: bool\n    period: int\n    pos: int\n\n\nclass Segment(NamedTuple):\n    l: int\n    r: int\n    star: Star\n\n\nclass Query(NamedTuple):\n    pos: int\n    star: Star\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\"\"\") == '3\\n0\\n1134\\n0'\n\n\"\"\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n''') == '3'\n\nassert solution('''\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n''') == '0'\n\nassert solution('''\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n''') == '1134'\n\nassert solution('''\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n''') == '0'\n\nassert solution('''\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n''') == '1134'\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2 3 7\\n100 51 51 51\\n1234 1 100 199\") == \"3\\n0\\n1134\\n0\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nlines = [line.strip() for line in open(sys.argv[1], 'r').readlines()]\n\nlines = lines[1:]\n\nfor i in range(0, len(lines)):\n    lines[i] = list(map(int, lines[i].split()))"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n10 2 3 7') == '3'\nassert solution('3\\n100 51 51 51') == '0'\nassert solution('3\\n1234 1 100 199') == '1134'\nassert solution('3\\n1000000000 1 1 1000000000') == '0'\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1 1 1\\n2 1 1 2\\n3 1 1 2\\n4 1 1 3\\n5 1 1 4\") == \"3\\n0\\n1134\\n0\"\n\nassert solution(\"2\\n100 51 51 51\\n1234 1 100 199\") == \"0\\n1134\\n0\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '''3\n0\n1134\n0'''\nassert solution('''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '''3\n0\n1134\n0'''\nassert solution('''2\n10 2 3 7\n100 51 51 51\n1234 1 100 199''') == '''0\n1134\n0'''\nassert solution('''1\n10 2 3 7\n100 51 51 51\n1234 1 100 199''') == '''0\n0\n1134'''\nassert solution('''1\n10000000 1 1 1000000000\n10000000 1 1 1000000000\n10000000 1 1 1000000000\n10000000 1 1 1000000000''') == '''0\n0\n0\n0'''\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\nassert solution(\"1\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"0\\n0\\n1134\\n0\"\nassert solution(\"2\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"1134\\n0\\n1134\\n0\"\nassert solution(\"1\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"0\\n0\\n1134\\n0\"\nassert solution(\"2\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"1134\\n0\\n1134\\n0\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n') == '1'\nassert solution('4\\n') == '3'\nassert solution('8\\n') == '1260'\nassert solution('20\\n') == '12164510040883200'\n\n\"\"\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\nassert solution(\"20\") == \"12164510040883200\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n') == '1'\nassert solution('4\\n') == '3'\nassert solution('8\\n') == '1260'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\n\nassert solution('4') == '3'\n\nassert solution('8') == '1260'\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('4') == '3'\nassert solution('20') == '12164510040883200'"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\n\n\"\"\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\nassert solution(\"20\") == \"12164510040883200\"\n\"\"\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == 3\n\"\"\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 3\nassert solution(\"8\") == 1260\nassert solution(\"20\") == 12164510040883200\n\n\n\n\"\"\""
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == ''\nassert solution('') == ''\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == \"\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\"\"\""
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('a') == ''\nassert solution('aa') == ''\nassert solution('ba') == ''\nassert solution('ab') == ''\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\"\"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''15 3\ncccaabababaccbc''') == 'cccbbabaccbc'\nassert solution('''15 9\ncccaabababaccbc''') == ''\nassert solution('''1 1\nu''') == ''\nassert solution('''5 1\nz''') == '''z\nz'''\nassert solution('''6 1\nbb''') == '''bb\nbb'''"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccccc\"\n\"\"\"\n\nn, k = map(int, input().split())\ns = input()\n\nfor i in range(k):\n    cnt = 0\n    for j in range(n):\n        if s[j] == 'a':\n            cnt += 1\n        elif s[j] == 'b':\n            cnt += 1\n            break\n        elif s[j] == 'z':\n            cnt += 1\n            break\n    if cnt == 0:\n        break\n    s = s[cnt:]"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\n\"\"\"\n\nimport sys\nimport itertools\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == ''\n\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 0 2 0') == '4'\n\"\"\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\ninput_str = \"\"\"5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n\"\"\"\n\nassert solution(input_str) == '8'\n\ninput_str = \"\"\"5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n\"\"\"\n\nassert solution(input_str) == '20'\n\ninput_str = \"\"\"5 6\n1 1 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n\"\"\"\n\nassert solution(input_str) == '8'\n\ninput_str = \"\"\"5 3\n2 1 0 2 0\n3 5\n4 2\n2 5\n\"\"\"\n\nassert solution(input_str) == '20'\n\"\"\"\nimport re\nfrom typing import List, Dict\nfrom collections import defaultdict"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(s) == e\n\"\"\"\n\nimport sys\nimport bisect"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 1 3 2\") == \"8\"\nassert solution(\"5 3\") == \"9\"\nassert solution(\"4 2 1 3 2\") == \"8\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('2 3 0 2 0') == '8'\n'''\n\nn, m = [int(x) for x in input().split()]\nk = [int(x) for x in input().split()]"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5') == '20'\n\"\"\"\n\nimport sys\nfrom itertools import permutations\n\nn, m = map(int, sys.stdin.readline().split())\nk = list(map(int, sys.stdin.readline().split()))\nmoffers = [list(map(int, sys.stdin.readline().split())) for _ in range(m)]"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 8 1\\n2 3 5\\n1 5\\n2 3\\n1 5\\n1 2\\n1 5\\n2 3\\n1 5\\n1 2\") == 20\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n\nassert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n') == '20'\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 0 2 1 3 2') == '4'\nassert solution('5 3 0 1 4 2 2') == '7'\nassert solution('4 2 1 3 3 2') == '6'\n\"\"\"\n\nfrom collections import Counter, deque\n\nn, m = map(int, input().split())\n\nm_i = []\nfor _ in range(m):\n    m_i.append(list(map(int, input().split())))\n\nmicro = Counter()\nfor _ in range(n):\n    micro.update(map(int, input().split()))\n\nmicro = deque(micro.items())\nans = 0\n\nwhile micro:\n    d, m = micro.popleft()\n    i = m\n    while i and micro:\n        d_, m_ = micro.popleft()\n        if m_ > m:\n            i -= 1\n            m = m_\n        elif m_ == m:\n            i -= 1\n    ans += d*i\nprint(ans)\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == \"8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n.*\\n.*\\n.*\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\\n\"\nassert solution(\"2 2\\n**\\n.*\") == \"3\\n2 2 1\\n3 3 1\\n\"\nassert solution(\"5 5\\n.*...\\n.*...\\n.*...\\n.*...\\n*....\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\\n3 5 1\\n\"\nassert solution(\"5 5\\n.*...\\n.*...\\n.*...\\n.*...\\n.**..\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\\n\"\nassert solution(\"5 5\\n.*...\\n.*...\\n.*...\\n.*...\\n.*...\\n**..\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\\n\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"2 2 1\\n3 3 1\"\nassert solution(\"5 5\\n.*.*\\n.*.*\\n.*.*\\n.*.*\") == \"3\\n2 2 1\\n3 3 1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\n\n\"\"\"\n\nfrom collections import Counter\n\n\nclass Solution:\n    def solution(self, stdin):\n        n, m = map(int, stdin.split())\n        grid = [list(stdin.strip()) for stdin in stdin.split('\\n')]\n        stars = Counter(grid[row][col] for row in range(n) for col in range(m) if grid[row][col] == '*')\n        if len(stars) > n * m:\n            return \"-1\"\n        stars = list(stars.items())\n        stars.sort(key=lambda x: x[1], reverse=True)\n        stars = [stars[0][0]] + [('.', 0)] * (n * m - 1)\n        sizes = Counter(stars)\n        stars = set(stars)\n        to_be_removed = []\n        for r1, c1, s1 in stars:\n            for r2, c2, s2 in stars:\n                if r1!= r2 and c1!= c2 and (r1 + s1 + 1) == (r2 + s2 + 1) and (r1 + s1)!= (r2 + s2):\n                    to_be_removed.append(((r1, c1, s1), (r2, c2, s2)))\n        for r1, c1, s1 in stars:\n            for r2, c2, s2 in stars:\n                if r1!= r2 and c1!= c2 and (r1 + s1 + 1) == (r2 + s2 + 1) and (r1 + s1)!= (r2 + s2):\n                    if ((r1, c1, s1), (r2, c2, s2)) in to_be_removed:\n                        continue\n                    for r3, c3, s3 in stars:\n                        if r3!= r1 and c3!= c1 and r3!= r2 and c3!= c2 and (r3 + s3 + 1) == (r1 + s1 + 1) and (r3 + s3)!= (r1 + s1):\n                            to_be_removed.append(((r1, c1, s1), (r2, c2, s2), (r3, c3, s3)))\n        for r1, c1, s1 in stars:\n            for r2, c2, s2 in stars:\n                if r1!= r2 and c1!= c2 and (r1 + s1 + 1) == (r2 + s2 + 1) and (r1 + s1)!= (r2 + s2):\n                    for r3, c3, s3 in stars:\n                        if r3!= r1 and c3!= c1 and r3!= r2 and c3!= c2 and (r3 + s3 + 1) == (r1 + s1 + 1) and (r3 + s3)!= (r1 + s1):\n                            to_be_removed.append(((r1, c1, s1), (r2, c2, s2), (r3, c3, s3)))\n                            to_be_removed.append(((r3, c3, s3), (r1, c1, s1), (r2, c2, s2)))\n        for r1, c1, s1 in stars:\n            for r2, c2, s2 in stars:\n                if r1!= r2 and c1!= c2 and (r1 + s1 + 1) == (r2 + s2 + 1) and (r1 + s1)!= (r2 + s2):\n                    for r3, c3, s3 in stars:\n                        if r3!= r1 and c3!= c1 and r3!= r2 and c3!= c2 and (r3 + s3 + 1) == (r1 + s1 + 1) and (r3 + s3)!= (r1 + s1):\n                            to_be_removed.append(((r1, c1, s1), (r2, c2, s2), (r3, c3, s3)))\n                            to_be_removed.append(((r1, c1, s1), (r3, c3, s3), (r2, c2, s2)))\n                            to_be_removed.append(((r3, c3, s3), (r1, c1, s1), (r2, c2, s2)))\n                    for r4, c4, s4 in stars:\n                        if r4!= r1 and c4!= c1 and r4!= r2 and c4!= c2 and (r4 + s4 + 1) == (r1 + s1 + 1) and (r4 + s4)!= (r1 + s1):\n                            to_be_removed.append(((r1, c1, s1), (r2, c2, s2), (r4, c4, s4)))\n                            to_be_removed.append(((r4, c4, s4), (r1, c1, s1), (r2, c2, s2)))\n                            to_be_removed.append(((r"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\\n\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\\n\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n\") == \"3\\n-1\\n\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\\n\") == \"3\\n-1\\n\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == '3\\n2 2 1\\n3 3 1'\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\\n\") == '-1'\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n\") == '3\\n2 2 1\\n3 3 1'\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n\") == '3\\n2 2 1\\n3 3 1'\n\n\nimport unittest\nfrom utils import checkValue\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        checkValue(3, solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\"))\n        checkValue(-1, solution(\"3 3\\n*.*\\n.*.\\n*.*\\n\"))\n        checkValue(3, solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n\"))\n        checkValue(3, solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n\"))"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\\n3 5 1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n\") == \"3\\n-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\\n\") == \"2\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\\n\") == \"2\\n2 2 1\\n3 3 1\\n3 4 1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n.*..\\n.*..\\n.*..\\n.*..\\n.*..\") == \"3\\n2 2 1\\n3 3 1\"\nassert solution(\"4 4\\n..*..\\n.*.*\\n.*.*\\n.*.*\\n*.*.*\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\\n*.*\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.*\\n.*.*\") == \"3\\n2 2 1\\n3 3 1\"\nassert solution(\"2 2\\n*.*\\n*.*\") == \"1\\n1 1 1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"3\"\nassert solution(\"3 3\\n.*.*\\n.*.\\n*.*\\n\") == \"2 2 1\"\nassert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n\") == \"3\"\nassert solution(\"3 3\\n.*.*\\n.*.\\n*.*\\n\") == \"-1\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"3\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('...*...') == '3'\nassert solution('*.*') == '-1'\nassert solution('.*.*') == '2'\nassert solution('*.*.*') == '3'\nassert solution('...*...') == '3'\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 1\\n3 3 1\\n3 4 1\") == \"3\\n2 2 1\"\n\"\"\"\n\nfrom math import floor\n\nimport sys\n\n\"\"\"\nn, m = [int(i) for i in sys.stdin.readline().split()]\ngrid = [[i for i in sys.stdin.readline()] for j in range(n)]\nprint(grid)\n\"\"\"\n\nn, m = [int(i) for i in input().split()]\ngrid = [[i for i in input()] for j in range(n)]\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 1\\n3 3 1\") == \"-1\"\nassert solution(\"2 2 1\\n3 4 1\") == \"3 3 1\"\nassert solution(\"3 3 1\\n2 2 1\") == \"3 3 1\"\nassert solution(\"3 3 1\\n2 2 1\") == \"-1\"\nassert solution(\"5 5\\n.***\\n.**.\\n.***\\n.**.\\n.***\\n.**.\\n.***\\n\") == \"3 4 1\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('575') == 'Yes'\nassert solution('101') == 'No'\n\"\"\"\n\nn = input()\nprint(n[::-1]) == n\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\"\n\nN = int(stdin.readline())\nN_str = str(N)"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"575\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"575\") == \"Yes\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('575') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(575) == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('101') == 'Yes'\nassert solution('1010') == 'Yes'\nassert solution('10101') == 'Yes'\nassert solution('10110') == 'No'\nassert solution('11') == 'No'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin_example_1) == \"Alice\"\n\"\"\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('3 4') == 'Draw'\nassert solution('1 1') == 'Draw'\nassert solution('1 2') == 'Draw'\nassert solution('1 3') == 'Bob'\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''8 6''') == 'Alice'\nassert solution('''2 2''') == 'Draw'\nassert solution('''10 10''') == 'Bob'\n\n'''\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 6\n5 6\n3 6\n4 5\n2 2\n3 3\n4 4\n5 1\n2 4\n5 3\n4 2\n5 4''') == 'Bob'\nassert solution('''5 5\n4 4\n3 3\n2 2\n1 1\n1 1\n3 2\n1 3\n3 1''') == 'Draw'\nassert solution('''8 1\n4 6\n7 1\n9 5\n2 7\n7 9\n2 9\n6 2\n8 4\n4 1\n4 4\n9 9\n5 6\n7 7\n9 9\n4 5\n8 7\n9 5\n3 3\n7 3\n2 3\n5 3\n5 5\n2 2\n3 9\n8 9\n3 7\n3 2\n3 1\n9 6\n9 6\n4 9\n7 7\n2 1\n4 1\n6 8\n7 9\n8 5\n3 6\n8 7\n4 3\n7 3\n9 9\n3 4\n8 1\n9 2\n5 5\n5 7\n3 8\n2 1\n5 1\n8 6\n3 8\n5 6\n3 6\n6 3\n8 4\n5 7\n4 9\n3 5\n2 2\n3 1\n6 3\n2 3\n5 8\n8 9\n6 4\n7 4\n9 6\n2 3\n7 1\n5 5\n7 8\n4 2\n8 2\n3 8\n7 9\n8 6\n8 2\n4 1\n4 3\n4 3\n3 6\n2 5\n4 5\n4 2\n5 8\n5 1\n4 1\n7 2\n4 1\n5 9\n5 6\n4 6\n7 9\n5 8\n6 9\n7 3\n6 3\n6 3\n5 6\n6 1\n5 6\n3 6\n8 3\n2 1\n4 3\n7 1\n3 6\n6 8\n6 6\n2 9\n8 5\n8 3\n5 2\n5 3\n8 2\n6 9\n4 2\n6 1\n3 1\n9 9\n7 6\n4 3\n8 6\n8 4\n6 7\n2 9\n4 9\n5 7\n6 7\n8 8\n4 8\n5 6\n4 4\n8 8\n8 5\n3 4\n2 6\n6 9\n5 7\n9 8\n2 1\n5 2\n6 1\n6 6\n6 2\n8 2\n2 6\n9 9\n7 4\n2 3\n5 1\n2 3\n5 7\n4 7\n2 2\n2 3\n3 1\n7 7\n4 2\n4 5\n6 5\n7 4\n6 7\n3 3\n3 5\n6 6\n5 9\n4 3\n7 3\n6 7\n6 4\n6 5\n7 9\n7 2\n6 2\n9 8\n9 4\n3 2\n2 4\n9 1\n4 7\n8 5\n7 3\n4 8\n9 1\n5 7\n5 8\n5 5\n7 4\n8 4\n6 8\n7 5\n4 6\n7 1\n5 2\n2 8\n3 4\n2 4\n2 1\n7 6\n4 2\n5 7\n4 4\n5 2\n6 8\n7 7\n5 7\n4 4\n2 2\n6 8\n3 6\n2 2\n3 8\n9 1\n8 8\n3 8\n4 9\n6 7\n2 1\n5 3\n3 4\n9 1\n5 2\n7 7\n4 8\n8 9\n8 4\n4 4\n5 3\n5 6\n3 2\n6 3\n2 7\n7 7\n4 4\n5 4\n5 7\n4 6\n9 9\n5 3\n8 7\n8 6\n8 3\n9 4\n8 4\n4 2\n4 3\n4 6\n5 2\n6 7\n4 5\n4 1\n5 2\n6 4\n4 2\n5 7\n5 7\n5 3\n2 9\n6 4\n7 7\n6 9\n2 3\n8 7\n8 5\n5 4\n5 8\n5 9\n6 7\n7 6\n4 9\n7 7\n6 5\n8 8\n3 7\n8 5\n2 6\n5 5\n7 6\n5 2\n5 7\n4 5\n7 7\n4 6\n2 7\n5 8\n2 8\n9 1\n6 8\n2 8\n3 1\n5 2\n6 3\n6 8\n5 4\n3 5\n3 8\n7 8\n7 3\n4 5\n5 7\n2 2\n4 2\n4 4\n5 3\n6 7\n4 5\n7 7\n5 6\n8 1\n5 4\n4 6\n9 2\n6 7\n4 1\n3 5\n5 5\n4 3\n5 6\n4 1\n3 1\n6 1\n4 3\n5 1\n6 3\n8 8\n5 8\n3 9\n2 6\n6 7\n4 7\n8 1\n3 2\n9 7\n8 1\n8 3\n9 1\n6 9\n5 5\n8 4\n6 1\n4 7\n8 5\n9 2\n3 2\n3 2\n3 5\n9 6\n2 4\n3 7\n7 7\n4 7\n3 4\n6 8\n4 4\n6 9\n8 3\n2 3\n9 6\n7 6\n3 6\n4 6\n8 1\n4 3\n6 5\n4 6\n8 7\n3 1\n6 7\n2 9\n7 1\n7 1\n2 8\n2 5\n5 6\n2 7\n5 6\n8 4\n3 4\n7 5\n7 4\n8 9\n5 7\n6 2\n8 1\n3 5\n6 7\n8 4\n2 4\n3 4\n9 7\n6 2\n5 6\n6 9\n8 3\n6 4\n8 9\n6 7\n2 3\n7 1\n3 4\n4 3\n9 1\n7 7\n4 6\n3 6\n4 6\n8 8\n2 5\n6 3\n5 7\n4 2\n3 5\n4 6\n2 6\n2 2\n4 4\n6 6\n3 3\n2 5\n5 7\n8 7\n2 7\n4 8\n8 1\n4 4\n6 9\n5 2\n6 6\n4 7\n5 7\n5 8\n8 7\n2 7\n6 7\n5 7\n4 5\n4 7\n2 2\n7 1\n4 8\n8 7\n5 8\n5 4\n2 1\n4 2\n6 5\n2 3\n6 4\n7 7\n4 4\n7 6\n8 3\n5 6\n2 9\n7 7\n4 5\n7 5\n6 7\n9 8\n3 1\n9 4\n4 3\n6 3\n7 3\n8 1\n6 6\n5 7\n4 4\n5 6\n5 1\n3 5\n6 4\n9 8\n4 6\n2 3\n2 1\n7 5\n5 1\n5 8\n4 9\n3 6\n4 3\n2 7\n4 5\n3 3\n2 2\n4 6\n3 3\n8 2\n5 8\n9 9\n9 4\n3 7\n6 3\n8 3\n8 2\n9 2\n9 9\n5 5\n4 7\n4 3\n3 2\n7 4\n8 3\n7 7\n4 2\n9 9\n8 8\n2 6\n5 8\n3 2\n3 5\n2 1\n9 1\n6 5\n2 6\n7 8\n3 9\n8 5\n2 4\n5 7\n5 3\n9 2\n7 3\n8 9"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"4 2\") == \"Bob\"\nassert solution(\"2 2\") == \"Draw\"\nassert solution(\"9 1\") == \"Bob\"\nassert solution(\"3 5\") == \"Draw\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"2 9\") == \"Bob\"\nassert solution(\"1 2\") == \"Draw\"\nassert solution(\"1 1\") == \"Draw\"\nassert solution(\"8 2\") == \"Alice\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 6') == 'Alice'\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"Alice\"\nassert solution(\"4 6\") == \"Bob\"\nassert solution(\"7 7\") == \"Draw\"\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 6') == 'Alice'\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2') == 'Alice'\nassert solution('2 8') == 'Bob'\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\nassert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\nassert solution('h,p,p,y,,n,,w,e,,l, e,!,,n,,y,,e,,j, o, v,,e,,n,,g') == 'h p p y, n w e, l e!, n y e, j o v e, n g'\n\n\"\"\"\n\ns = stdin\n\ns = s.replace(',','')\nprint(s)\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\n-------"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(',a,a,,b') =='a a b'\nassert solution(',a,a,a,,b') =='a a a b'\nassert solution('a,a,,b') =='a a b'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\nSample Input 2\nAbc,de,f\n\nSample Output 2\nAbc de f\n\nSample Input 3\nAa,Bb,Cc,Dd,Ee,Ff\n\nSample Output 3\nAa Bb Cc Dd Ee Ff\n\nSample Input 4\nabc,def,ghi,jkl,mno,pqr,stu,vwx,y,z\n\nSample Output 4\nabc def ghi jkl mno pqr stu vwx y z\n'''\n\nimport numpy as np"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\nassert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\nassert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\nassert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\nassert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"hi,this,is,a,test,comma,separated,string\") == \"hi this is a test comma separated string\"\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"\n\ns = input()\ns = s.replace(\",\", \" \")\nprint(s)\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == '2\\n1'"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\"\"\"\nfrom collections import defaultdict\nimport math\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n2 0\\n0 0\\n-1 0\\n1 0') == '2\\n1'\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == '2\\n1'\n\"\"\"\n\nimport sys\nfrom collections import namedtuple\nfrom typing import Dict, List\n\n\nStudent = namedtuple('Student', ['x', 'y'])\nCheckpoint = namedtuple('Checkpoint', ['x', 'y'])\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n') == '2\\n1'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n\") == \"2\\n1\"\nassert solution(\"2 2\\n2 0\\n0 0\\n1 0\\n\") == \"2\\n1\"\nassert solution(\"2 2\\n1 0\\n0 0\\n1 0\\n\") == \"1\\n2\"\nassert solution(\"2 2\\n-1 0\\n1 0\\n0 0\\n1 0\\n\") == \"1\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\n-------\n\"\"\"\nimport math"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n2 2\n2 0\n0 0\n-1 0\n1 0\n\"\"\"\n) == \"\"\"\n2\n1\n\"\"\"\n\nassert solution(\n\"\"\"\n2 2\n2 0\n0 0\n0 0\n\"\"\"\n) == \"\"\"\n1\n1\n\"\"\"\n\nassert solution(\n\"\"\"\n2 2\n2 0\n0 0\n-1 0\n1 0\n\"\"\"\n) == \"\"\"\n2\n1\n\"\"\"\n\nassert solution(\n\"\"\"\n2 2\n2 0\n0 0\n-1 0\n1 0\n\"\"\"\n) == \"\"\"\n1\n1\n\"\"\"\n\nassert solution(\n\"\"\"\n2 2\n0 0\n2 0\n-1 0\n1 0\n\"\"\"\n) == \"\"\"\n1\n2\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n') == '2\\n1'\nassert solution('3 3\\n1 0\\n0 0\\n0 0\\n-1 0\\n0 0\\n') == '2\\n1\\n3'\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n\") == \"2\\n1\"\nassert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n\") == \"1\\n1\"\n\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nstudent_coords = {i: tuple(map(int, sys.stdin.readline().split())) for i in range(1, N + 1)}\ncheckpoint_coords = {j: tuple(map(int, sys.stdin.readline().split())) for j in range(1, M + 1)}\n\nnearest_checkpoint = {i: 0 for i in range(1, N + 1)}\n\nfor student in student_coords:\n    for checkpoint in checkpoint_coords:\n        manhattan_distance = abs(student_coords[student][0] - checkpoint_coords[checkpoint][0]) + abs(\n            student_coords[student][1] - checkpoint_coords[checkpoint][1])\n        nearest_checkpoint[student] = min(manhattan_distance, nearest_checkpoint[student])\n\nprint('\\n'.join(map(str, [checkpoint for checkpoint in nearest_checkpoint if nearest_checkpoint[checkpoint] == 0])))\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"14\"\nassert solution(\"10\") == \"70\"\nassert solution(\"15\") == \"255\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == 14\n\n\"\"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"14\"\n\nprint(solution(\"2\"))\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '14'\n\nassert solution('6') == '36'\n\nprint(solution(stdin.read()))\n\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5) == 25\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a=2) == 14\n\"\"\"\nimport sys"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2) == \"14\"\nassert solution(5) == \"121\"\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"14\"\n\nprint(solution(\"2\"))\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == '14'\n\n\"\"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"14\"\nassert solution(\"3\") == \"17\"\nassert solution(\"5\") == \"27\"\nassert solution(\"10\") == \"110\"\n\nimport sys\na = int(sys.stdin.readline().strip())\nprint(a + a**2 + a**3)\n\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 2\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.') == 'Yes'\nassert solution('4 5\\n..#.\\n#..#\\n##.#\\n#...') == 'No'\nassert solution('3 2\\n#.#\\n.#.') == 'No'\nassert solution('1 1\\n.') == 'Yes'\nassert solution('1 1\\n..') == 'No'\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 2\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\nassert solution(\"1 1\\n#\") == \"Yes\"\nassert solution(\"5 5\\n.##.##.##.##.\\n##...#...##..#\\n##...#...##..#\\n##...#...##..#\\n.##.##.##.##.\") == \"Yes\"\nassert solution(\"3 2\\n#.#\\n.#.\") == \"No\"\nassert solution(\"5 5\\n.##.##.##\\n##...#...##\\n##...#...##\\n##...#...##\\n.##.##.##.\") == \"No\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.') == 'Yes'\nassert solution('3 2\\n###\\n###\\n###') == 'Yes'\nassert solution('3 2\\n###\\n###\\n#.') == 'No'\n\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n3 2\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n#.#\\n.#.') == 'Yes'\n\n---\n\nclass Solution:\n    def isRectangleCover(self, A: List[List[str]], B: List[List[str]]) -> bool:\n        import numpy as np\n        \n        def get_points(img: List[List[str]]):\n            return np.array(np.nonzero(img), dtype=np.int64).T\n        \n        def get_area(A, B):\n            \"\"\"\n            Area of rectangle A in B is calculated as the sum of the areas of the four triangles defined by points A and B.\n            \"\"\"\n            A_points = get_points(A)\n            B_points = get_points(B)\n            \n            A_area = 0\n            for i in range(A_points.shape[0]):\n                A_area += (A_points[i][0] * A_points[i][1] - B_points[i][0] * B_points[i][1])\n            \n            return A_area\n        \n        A_area = get_area(A, B)\n        B_area = get_area(B, A)\n        return A_area + B_area == (A[0][0] + A[0][1] + A[1][0] + A[1][1] - B[0][0] - B[0][1] - B[1][0] - B[1][1])\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.#\") == 'Yes'\n\n----\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 2\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"#.#\\n\"\n\".#.\") == \"Yes\"\nassert solution(\n\"#.#\\n\"\n\"..#\") == \"No\"\n\n\"\"\"\nfrom typing import List, Set"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nprint('Passed')\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '0'\nassert solution('1 1 2') == '1'\nassert solution('1 1 3') == '3'\nassert solution('1 1 4') == '5'\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 5 2') == '53'\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12 5 2\") == \"53\"\n\"\"\"\n\nimport sys\n\na, b, c = sys.stdin.read().strip().split(\" \")\na, b, c = int(a), int(b), int(c)\n\nt = a + b + c\nm = a * b * c\ns = t - m\n\nprint(s)\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n\na, b, c = map(int, input().split())"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 5 2\\n') == '53'\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5 2') == '53'\nassert solution('2 3 2') == '13'\nassert solution('1 2 5') == '23'"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n4980\\n7980\\n6980') == '15950'\n\"\"\"\n\nn = int(input())\nl = []\nfor i in range(n):\n    l.append(int(input()))\n\nl.sort(reverse=True)\n\nprint(sum(l[:n//2]) + sum(l[n//2:])/2)\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4980\\n7980\\n6980\") == \"15950\"\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\\n\") == \"15950\"\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n4980\\n7980\\n6980\\n') == '15950'\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '3\\n4980\\n7980\\n6980'\n) == '15950'\nprint(solution(input()))"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n4980\\n7980\\n6980\\n') == '15950'\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\n\"\"\"\nfrom decimal import Decimal\nimport sys\n\nlines = [l.rstrip(\"\\n\") for l in sys.stdin]\nn = int(lines[0])\nline_1 = [Decimal(l) for l in lines[1].split(\"\\n\")]\nline_2 = [Decimal(l) for l in lines[2].split(\"\\n\")]\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\"\n\n\"\"\"\nLet us consider the following example:\n\nMr. Takaha has a discount coupon with a 50% discount on the item with price 1000 yen.\nThe remaining items cost their regular prices of 600 yen each. Mr. Takaha can buy one item with the highest price for half the regular price.\nThe remaining items cost their regular prices of 300 yen each. Mr. Takaha can buy one item with the highest price for half the regular price.\nThe remaining items cost their regular prices of 150 yen each. Mr. Takaha can buy one item with the highest price for half the regular price.\nThe remaining items cost their regular prices of 75 yen each. Mr. Takaha can buy one item with the highest price for half the regular price.\nThe remaining items cost their regular prices of 36 yen each. Mr. Takaha can buy one item with the highest price for half the regular price.\nThe remaining items cost their regular prices of 18 yen each. Mr. Takaha can buy one item with the highest price for half the regular price.\nThe remaining items cost their regular prices of 6 yen each. Mr. Takaha can buy one item with the highest price for half the regular price.\nThe remaining items cost their regular prices of 3 yen each. Mr. Takaha can buy one item with the highest price for half the regular price.\n\nIn this example, Mr. Takaha has to buy the cheapest item (1) with the price of 36 yen.\n\nInput\nThe first line of the input contains a single integer T denoting the number of test cases.\nThe description of T test cases follows.\nThe first line of each test case contains a single integer N.\nThe second line contains N space-separated integers p_1,p_2,...,p_N.\n\nOutput\nFor each test case, print a single line containing one integer \u2015 the total amount Mr. Takaha will pay.\n\nConstraints\n1 \\leq T \\leq 100\n1 \\leq N \\leq 1000\n1 \\leq p_i \\leq 10000\np_i is even\n\nInput\n3\n3\n2 1 1\n5\n60 200 100 20 50\n5\n10000 10000 10000 10000 10000\n\nOutput\n5\n58100\n10000\n\nThe first case has only one item (p_1=2) with price of 1, and the total is 2 + 1 / 2 + 1 = 1.\nThe second case has three items (p_1=60, p_2=200, p_3=100) with the prices 60, 200 and 100, respectively, and the total is 60 + 200 / 2 + 100 = 58100.\nThe third case has five items (p_1=10000, p_2=10000, p_3=10000, p_4=10000, p_5=10000) with the prices 10000, 10000, 10000, 10000 and 10000, respectively, and the total is 10000 + 10000 + 10000 + 10000 + 10000 = 58100.\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n5\\n4\\n3\\n2\\n1\\n\") == \"15\"\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n4980\\n7980\\n6980') == '15950'\nprint('Test passed')"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('29\\n20\\n7\\n35\\n120\\n') == '215'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('29\\n20\\n7\\n35\\n120\\n') == '215'\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\n\nfrom math import floor\nimport numpy as np\n\nA, B, C, D, E = map(int, input().split())"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('29\\n20\\n7\\n35\\n120') == '215'\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"29\"\n    \"20\"\n    \"7\"\n    \"35\"\n    \"120\"\n    ) == \"215\"\n\nassert solution(\n    \"12\"\n    \"12\"\n    \"7\"\n    \"35\"\n    \"120\"\n    ) == \"214\"\n\nassert solution(\n    \"2\"\n    \"2\"\n    \"7\"\n    \"35\"\n    \"120\"\n    ) == \"210\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 30\") == \"7.5\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\n\"\"\"\n\nfrom math import log10\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n10 30') == '7.5'\nassert solution('3\\n1 1 1') == '0'\nassert solution('5\\n1 1 1 1 1') == '0'\nassert solution('4\\n1 1 1 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\n\"\"\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 30') == '7.5'\n\"\"\"\nfrom math import gcd\nfrom functools import reduce\nfrom typing import List\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\nassert solution(\"3\\n30 40 100\") == \"7.5\"\nassert solution(\"3\\n10 20 30\") == \"7.5\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 30\") == \"7.5\"\n\"\"\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 30\") == \"7.5\"\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == 2\n\"\"\"\n\nfrom math import gcd\nfrom typing import List\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12\\n') == '2'\n\"\"\"\n\nN, K = map(int, input().split())\nH = list(map(int, input().split()))\nH.sort()\n\nans = 0\nfor i in range(K - 1):\n    ans += H[K - 1] - H[i]\n\nprint(ans)\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n10 15 11 14 12\\n') == '2'\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1\\n2\\n3\\n4\") == \"1\"\nassert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\nassert solution(\"5 5\\n1\\n2\\n3\\n4\\n5\") == \"0\"\nassert solution(\"5 5\\n1\\n2\\n3\\n4\\n5\") == \"0\"\n\nprint(solution(\"3 1\\n1\\n2\\n3\")) # 0\nprint(solution(\"3 3\\n1\\n2\\n3\")) # 0\nprint(solution(\"3 3\\n1\\n2\\n3\\n3\")) # 0\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n) == \"2\"\n\"\"\"\n\n-----\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n-----\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n-----\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n10\n15\n11\n14\n12\n\"\"\"\n\n5 3\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 15\\n11\\n14\\n12\\n\") == 2\n\"\"\"\n\nimport heapq\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('B') == 'A'\nassert solution('b') == 'a'\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"B\") == \"A\"\n\"\"\"\n\n\"\"\"\nYou are given a string S and you have to print all possible permutations of size K of the string in lexicographic sorted order.\n\nInput Format\n\nA single line containing the string S and integer value K separated by a space.\n\nConstraints\n\n0 < len(S) < 200\n0 < K < len(S)\n\nOutput Format\n\nPrint the permutations of the string S on separate lines.\n\nSample Input\n\nHACK 2\n\nSample Output\n\nAC\nAH\nAK\nCA\nCH\nCK\nHA\nHC\nHK\nKA\nKC\nKH\n\nExplanation\n\nAll possible size 2 permutations of the string \"HACK\" are printed in lexicographic sorted order.\n\"\"\"\n\nfrom itertools import permutations\n\nS, K = map(str, input().split())\n\nfor perm in sorted(set(permutations(S, int(K)))):\n    print(''.join(perm))"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('B') == 'A'\n\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\nassert solution('A') == 'A'\n\n\"\"\"\n\n\"\"\"\nSOLUTION"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"B\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"b\") == \"A\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"B\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"A\") == \"A\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"b\") == \"A\"\nassert solution(\"B\") == \"A\"\nassert solution(\"B'\") == \"A\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"B\") == \"A\"\n\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('A') == 'A'\nassert solution('a') == 'a'\nassert solution('B') == 'A'\nassert solution('b') == 'a'\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('B') == 'A'\n\nprint(solution('B'))\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"6\"\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\nassert solution(\"2 4\\n\") == \"0\"\nassert solution(\"1 1\\n\") == \"1\"\nassert solution(\"3 6\\n\") == \"15\"\nassert solution(\"100 200\\n\") == \"0\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2') == '6'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n') == '6'\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == '6'\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"3 3\") == \"0\"\n\"\"\"\nfrom math import comb\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(2) +'' + str(2)) == '6'\n\"\"\"\n\nfrom utils import checkValue\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == '6'\n\"\"\"\nfrom typing import List\n\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1905') == 'YYMM'\nassert solution('1905') == 'YYMM'\nassert solution('1905') == 'YYMM'\nassert solution('1905') == 'YYMM'\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"19052020\") == \"AMBIGUOUS\"\nassert solution(\"190520\") == \"AMBIGUOUS\"\nassert solution(\"052020\") == \"YYMM\"\nassert solution(\"05202020\") == \"AMBIGUOUS\"\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1914\") == \"MMYY\"\nassert solution(\"1901\") == \"YYMM\"\nassert solution(\"1903\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1917\") == \"YYMM\"\nassert solution(\"19\") == \"YYMM\"\nassert solution(\"XYZ\") == \"AMBIGUOUS\"\nassert solution(\"1905\") == \"YYMM\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905XX\") == \"AMBIGUOUS\"\nassert solution(\"20XX\") == \"NA\"\nassert solution(\"19XX\") == \"NA\"\nassert solution(\"1905XX\") == \"YYMM\"\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1909') == 'MMYY'\nassert solution('190519') == 'AMBIGUOUS'\nassert solution('190509') == 'NA'\nassert solution('19051922') == 'NA'\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1219\") == \"MMYY\"\nassert solution(\"1950\") in [\"YYMM\", \"MMYY\"]\nassert solution(\"1905\") in [\"YYMM\", \"MMYY\"]\nassert solution(\"1905\") not in [\"YYMM\", \"MMYY\"]\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('190501') == 'YYMM'\nassert solution('200105') == 'MMYY'\nassert solution('200501') == 'AMBIGUOUS'\nassert solution('200101') == 'NA'"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n') == '2'\nassert solution('2\\n') == '1'\nassert solution('1\\n') == '0'\nassert solution('4\\n') == '2'\nassert solution('2\\n') == '1'\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == 2\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2') == ''\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == '2'\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == 2\nassert solution('5') == 4\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n\") == \"4\"\nassert solution(\"10\\n\") == \"14\"\nassert solution(\"20\\n\") == \"126\"\n\n---\n\nFind the number of ways to choose a pair of an even number and an odd number from the positive integers between 1 and K (inclusive). The order does not matter.\n\n---Constraints ---\n2 \\leq K \\leq 100\nK is an integer.\n\n---Input ---\nFrom Standard Input we read a single line with the integer K.\n\n---Output ---\nPrint the number of ways to choose a pair of an even number and an odd number from the positive integers between 1 and K (inclusive).\n\n---Sample Input ---\n4\n\n---Sample Output ---\n2\n\nThere are two pairs: (2,3) and (2,1)."
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n') == '2'\n\"\"\"\n\nK = int(stdin.readline())"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n') == '1\\n1\\n1\\n'\nassert solution('1\\n2\\n3\\n') == '2\\n2\\n1\\n1\\n1\\n1\\n'\nassert solution('1\\n2\\n3\\n4\\n') == '1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n'\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '2\\n'\nassert solution('3\\n') == '1\\n'\nassert solution('4\\n') == '0\\n'\nassert solution('5\\n') == '0\\n'\n\nimport numpy as np"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 12\\n\") == \"21\"\n\n------------Solution------------\n\"\"\"\n\nA, B = map(int, input().split())\n\nC = (A + B) % 12\nD = (A + B) // 12\n\nprint(C)"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 12\\n\") == \"21\"\n\nassert solution(\"10 2\\n\") == \"8\"\n\nassert solution(\"12 15\\n\") == \"9\"\n\nassert solution(\"12 36\\n\") == \"18\"\n\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 12\") == \"21\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"9 12\"\n) == \"21\"\n\"\"\"\n\n\"\"\"\n---------------------- SOLUTION ----------------------\n\"\"\"\n\nimport ast\nfrom typing import NamedTuple\n\nclass Input(NamedTuple):\n    t: str"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9 12\\n') == '21'\n\n\"\"\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 12\") == \"21\"\nassert solution(\"10 10\") == \"11\"\nassert solution(\"10 18\") == \"18\"\nassert solution(\"10 20\") == \"20\"\nassert solution(\"10 24\") == \"24\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 12\\n') == '21'\n\n\"\"\"\n\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass Line:\n    hours: int\n    minutes: int\n    seconds: int\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 12\\n\") == \"21\"\n\"\"\"\nfrom dataclasses import dataclass\n\n@dataclass\nclass Contest:\n    start: int\n    end: int\n    \n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9 12\\n') == '21'\n\"\"\"\n\nfrom typing import List, Tuple, Union"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(9, 12) == 21\n\"\"\"\n\nimport sys\n\nA, B = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2919\\n\") == \"3719\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2919\\n') == '3719'\n\"\"\"\n\nN, R = input().split()\nN, R = int(N), int(R)"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2919\\n') == '3719'\n\"\"\"\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\n\nN, R = map(int, INPUT_LINES[0].split())\n\nprint(R if N < 10 else R - 100 * (10 - N))\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2919\\n\") == \"3719\"\n\"\"\"\n\nN, R = map(int, input().split())"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2919\\n\") == \"3719\"\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n2 3') == '1'\nassert solution('1 2\\n2 3') == '5'\nassert solution('1 2\\n2 2') == '0'\nassert solution('1 2\\n2 1') == '4'\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2919\\n\") == \"3719\"\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 2\") == 4\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 2\") == \"4\"\nprint(\"PASS\")\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 2\") == \"4\"\nprint(\"Passed\")\n\n\"\"\"\nimport os"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(12) == 3\nassert solution(25) == 2\n\n\"\"\"\n\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    def test_upper(self):\n        self.assertEqual('foo'.upper(), 'FOO')\n\n    def test_isupper(self):\n        self.assertTrue('FOO'.isupper())\n        self.assertFalse('Foo'.isupper())\n\n    def test_split(self):\n        s = 'hello world'\n        self."
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 2\") == \"4\"\nprint(solution(\"11 2\"))\n\n\"\"\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''11 2\n''') == '4'\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11 2') == '4'"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 2') == 4\nassert solution('11 5') == 2\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11 2') == '4'\n\"\"\"\n\nn, k = map(int, input().split())\nprint(len(bin(n)[2:]))\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11 2') == '4'\n\"\"\"\n\nn, k = map(int, stdin.readline().strip().split())"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"3\"\n'''\n\nimport sys"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n5\\n\") == \"3\"\nassert solution(\"4\\n5\\n\") == \"4\"\nassert solution(\"3\\n5\\n\") == \"3\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n') == '3'\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"6\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n') == '3'\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('2\\n') == '0'\nassert solution('1\\n2\\n') == '1'\nassert solution('1\\n2\\n3\\n') == '2'\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"Yay!\"\nassert solution(\"4 5\") == \"Yay!\"\nassert solution(\"1 1\") == \"Yay!\"\nassert solution(\"16 16\") == \"Yay!\"\nassert solution(\"15 16\") == \":(!\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4') == 'Yay!'\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n\") == 'Yay!'\n\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3') == 'Yay!'\nassert solution('3 5') == 'Yay!'\nassert solution('5 6') == 'Yay!'\nassert solution('3 2') == 'Yay!'\nassert solution('2 6') == 'Yay!'\n\n'''\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\") == 'Yay!'\nassert solution(\"7 8\") == ':(\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n\") == \"Yay!\"\nassert solution(\"3 5\\n\") == \"Yay!\"\nassert solution(\"8 16\\n\") == \"Yay!\"\nassert solution(\"5 5\\n\") == \":(\nassert solution(\"7 6\\n\") == \"Yay!\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'Yay!'\nassert solution('1 2') == 'Yay!'\nassert solution('3 4') == 'Yay!'\nassert solution('5 4') == 'Yay!'\nassert solution('3 8') == 'Yay!'\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ':(', 'No input'\nassert solution('1 2') == 'Yay!', 'Bad input'\nassert solution('1 4') == 'Yay!', 'Bad input'\nassert solution('5 10') == 'Yay!', 'Bad input'\nassert solution('13 16') == ':(', 'Bad input'\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4') == 'Yay!'\n\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1234\") == \"4\"\nassert solution(\"10\") == \"0\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1234567876\") == \"34\"\nassert solution(\"1234\") == \"0\"\nassert solution(\"123\") == \"0\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1234567876') == '34'\n\"\"\"\n\n\"\"\"\nSolution:\n1. Sort the string of digits.\n2. Take the difference between the digit on the first position and the digit on the last position.\n\nComplexity analysis:\nTime complexity: O(NlogN).\nSpace complexity: O(1).\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1234567876') == '34'\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1234567876') == '34'\nprint('Test pass.')\n\n---"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1234567876\") == \"34\"\nassert solution(\"87654321\") == \"0\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1234567876') == '34'\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1234567876') == '34'\nassert solution('12347876') == '34'\nassert solution('12345678910') == '34'\nassert solution('1234567890') == '34'\nassert solution('1234567') == '34'\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\na_dict = dict()\nfor i in range(n):\n    a_dict[i] = a[i]\nprint(a_dict)\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 12 6') == '5 3'\n\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\nassert solution(\"6 13 52 0 13 26 52\") == \"2999999987 2\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 12 6\\n\") == \"5 3\"\nassert solution(\"2 9\\n\") == \"1 7\"\nassert solution(\"7\\n13 52 0 13 26 52\\n\") == \"12 13\""
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('4') == '4'\nassert solution('5') == '5'\nassert solution('6') == '6'\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 52 0 13 26 52') == '12 13'\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 12 6''') == '5 3'\nassert solution('''2 9''') == '1 7'\nassert solution('''7 13 0 13 26 52''') == '12 13'\nassert solution('''6 13 52 0 13 26 52''') == '12 13'\nassert solution('''6 13 52 13 26 52''') == '12 13'\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 4 1\") == \"3\"\nassert solution(\"3 1 4 1\") == \"2\"\nassert solution(\"5 1 1 2 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 4 1\\n') == '3'\nassert solution('3 1 4 1\\n') == '1'\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 1 4 1\") == 3\n\"\"\"\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nk = a[0]\nfor i in range(1, n):\n    if a[i] < k:\n        k = a[i]\n\nprint(k)"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"3\"\nassert solution(\"3\\n1 1 1\") == \"1\"\nassert solution(\"5\\n1 1 1 2 2\") == \"2\"\nprint(solution(input()))\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 4 1\") == 3\nassert solution(\"3 1 4 1\") == 1\nassert solution(\"5 1 1 2 2\") == 2\n\"\"\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 1 4 1\\n') == '3'\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input) == expected_result\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\ncnt = 1\nk = 1\n\nfor i in range(n):\n    if a[i] >= k:\n        k += 1\n        cnt += 1\n    else:\n        cnt = 0\n        break\n\nprint(cnt)\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 4 1\\n3 1 4 1\") == 3\nassert solution(\"3 1 4 1\\n3 1 4 1\") == 1\nassert solution(\"5 1 4 1\\n3 1 4 1\") == 2\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3 1 4 1') == 3\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 4 1\") == '3'\n\"\"\"\nfrom collections import deque\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\n\nqueue = deque()\nqueue.append(0)\ni = 1\nwhile queue:\n    curr = queue.pop()\n    if a[curr] >= i:\n        queue.append(curr)\n        i += 1\nprint(i - 1)\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2\\n4 2'\nassert solution('2 0\\n') == '1\\n1 2'\nassert solution('3 2\\n1 3\\n2 3') == '2'\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == 2\nassert solution('2 0\\n') == 1\nassert solution('3 2\\n1 3\\n2 3') == 2\nassert solution('3 2\\n1 2\\n2 2') == 1\nassert solution('3 2\\n1 2\\n2 1') == 2\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\\n\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"4 3\\n1 3\\n2 4\\n3 4\") == \"3\"\nassert solution(\"5 7\\n2 4\\n3 5\\n4 5\\n5 6\\n6 7\\n7 6\") == \"3\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\\n\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"3 2\\n1 2\\n1 3\") == \"2\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 3\\n2 3\") == '2'\nassert solution(\"4 2\\n1 3\\n2 3\") == '2'\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '5\\n'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '5\\n'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '5\\n'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '5\\n'\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"4 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"4 2\\n1 2\\n2 3\") == \"1\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('2 0') == '1'\nassert solution('3 2\\n1 3\\n2 3') == '2'\n\"\"\"\nfrom itertools import combinations\nfrom math import inf"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\\n\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('2 0\\n') == '1'\nassert solution('3 2\\n1 3\\n2 3') == '2'\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1 2 1 2 1 1') == 4\nassert solution('6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4') == 4\n\n\"\"\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a_s) == answer\n\na_l, k = [int(s) for s in stdin.split(\" \")]\na = [int(s) for s in stdin.split(\" \")]\n\ndp = {}\n\nans = 0\n\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        if i!= j:\n            if a[i] == a[j]:\n                dp[(i, j)] = dp.get((i, j), 0) + 1\n                ans = max(ans, dp.get((i, j)))\n\nprint(ans)"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n\") == \"11\"\nassert solution(\"7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n\") == \"4\"\n\nprint(\"Success\")"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input_string) == answer\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input_string) == output_string\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4') == '4'"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n2 3\\n3 4\\n5 5\\n\") == \"11\"\n\"\"\""
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\nprint('Test passed')\nassert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n') == '4'\nprint('Test passed')\n\n\"\"\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n\") == \"11\"\nassert solution(\"7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n\n    def addEdge(self, u, v):\n        self.graph[u].append(v)\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"\"\"1 1\n1 9\n2 2\n2 13\n3 1\n3 12\"\"\"\n\n\"\"\"\n12 12\n1 2 3 4 5 6 7 8 9 10 11\n\"\"\""
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6\\n1 9 12 23 26 37\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2\") == \"2 1\"\nassert solution(\"3 6\") == \"1 9\"\nassert solution(\"2 3\") == \"2 1\"\n\"\"\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"5 6 9999999999\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n\n\"\"\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('201 101 101 200') == '1 100 100'\n\n\nimport collections"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\""
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str([3, 6, 5, 4])) == '2 1 3'\nassert solution(str([40, 40, 40, 60])) == '20 20 20'\nassert solution(str([201, 101, 101, 200])) == '1 100 100'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6 5 4\") == '2 1 3'\nassert solution(\"40 40 40 60\") == '20 20 20'\nassert solution(\"201 101 101 200\") == '1 100 100'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n\n\"\"\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('201 101 101 200') == '1 100 100'\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\n\"\"\"\nimport re\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\n\"\"\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n\n\"\"\"\n\na,b,c,d = map(int, input().split())\ns = set()\nfor i in range(1, a+1):\n    for j in range(1, b+1):\n        for k in range(1, c+1):\n            s.add(i+j+k)\ns = sorted(list(s))\nprint(s[1], s[2], s[3])\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9\\nRBGRRBRGG') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRBRBGBGBGRG'\n\n\"\"\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\") == \"6\\nBGRRRRRRBBBB\"\nassert solution(\"8\\nRRGBBGGGB\") == \"1\\nRRRRRGGGGB\"\nassert solution(\"3\\nRRR\") == \"0\\nRRR\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9\\nRBGRRBRGG') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRRRBGBGBGRG'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\") == \"6\\nBGRRRBGBGBGRG\"\n\"\"\"\n\nn = int(input())\nstring = input()\nlst = list(string)\n\ncolors = [\"R\", \"B\", \"G\"]\n\nans = 0\nfor i in range(n - 1):\n    if lst[i] == lst[i + 1]:\n        ans += 1\nprint(ans)\n\nfor i in range(n - 1):\n    if lst[i]!= lst[i + 1]:\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n        print(\"\".join(lst))\n        break\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('B') == 'B'\nassert solution('RRRGGGGBBBBBBBBBRRR') == 'BGRRRBGRRRBGRRRRRR'\nassert solution('R') == 'R'\nassert solution('RGBG') == 'RGGBBGB'\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\nBBBGBRRR\") == \"2\\nRBGRGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\") == \"6\\nBGRBRBGBGBGRG\"\n\"\"\"\n\nn = int(input())\ns = input()\n\ntemp = [0] * n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\nRBGRRBRGG\\n\") == 2\nassert solution(\"8\\nBBBGBRRR\\n\") == 2\nassert solution(\"13\\nBBRRRRGGGGGRR\\n\") == 6\n\n\"\"\"\n\nn = int(input())\ngarland = input()\nlamps = ['R', 'G', 'B']\ndiverse = True\nl = 1\n\nfor i in range(1, len(garland)):\n    if garland[i]!= garland[i-1]:\n        l += 1\n    if l > n:\n        diverse = False\n        break"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9\\nRBGRRBRGG\\n') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR\\n') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR\\n') == '6\\nBGRRRRRGBGGRRRG'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\nBGRRRRGGGGGRR\") == \"5\\nBGRRRGBGGRR\"\nassert solution(\"5\\nGGBBBBBRRR\") == \"1\\nBBGGBRBB\"\nassert solution(\"4\\nRGGRRRB\") == \"1\\nRBRRR\"\nassert solution(\"1\\nRR\") == \"0\\nRR\"\nassert solution(\"2\\nGRGR\") == \"0\\nGGRG\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RRRRRRRRRR') == 'R'\nassert solution('BBBGBRRR') == 'R'\nassert solution('BBBGRRRR') == 'R'\nassert solution('GGBBGRRR') == 'G'\nassert solution('RRGGGBB') == 'G'\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 4 7 5 6 8\") == \"4\"\nassert solution(\"1 3 5 2 4 6\") == \"2\"\nassert solution(\"10 9 8 7\") == \"1\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"1 3 5 2 4 6\") == \"2\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == 4\nassert solution(7) == 4\nassert solution(6) == 2\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7') == '4'\nassert solution('6') == '2'\nassert solution('4') == '1'\nassert solution('9') == '6'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3\\n\"\nassert solution(\"10 9 8 7\") == \"1\\n1\\n\"\nassert solution(\"1 3 5 2 4 6\") == \"2\\n1 4\\n\"\nassert solution(\"3 3 4 7 5 6\") == \"4\\n1 2 3\\n\"\n\nassert solution(\"10 9 8 7\") == \"1\\n1\\n\""
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '7\\n3 3 4 7 5 6 8'\n) == '4\\n2 3 5 6'\n\nassert solution(\n    '6\\n1 3 5 2 4 6'\n) == '2\\n1 4'\n\nassert solution(\n    '4\\n10 9 8 7'\n) == '1\\n1'\n\nassert solution(\n    '9\\n6 7 8 3 4 5 9 10 11'\n) == '6\\n1 2 3 7 8 9'\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n3 3 4 7 5 6 8\") == '4\\n2 3 5 6', 'wrong result'\nassert solution(\"6\\n1 3 5 2 4 6\") == '2\\n1 4', 'wrong result'\nassert solution(\"4\\n10 9 8 7\") == '1\\n1', 'wrong result'\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == '6\\n1 2 3 7 8 9', 'wrong result'\nprint('test passed')\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\n3 3 4 7 5 6 8') == '4'\nassert solution('6\\n1 3 5 2 4 6') == '2'\nassert solution('4\\n10 9 8 7') == '1'\nassert solution('9\\n6 7 8 3 4 5 9 10 11') == '6'\nassert solution('1\\n10') == '1'\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 4 7 5 6\") == \"4\"\nassert solution(\"1 3 5 2 4 6\") == \"2\"\nassert solution(\"1 3 5 2 4 6\") == \"2\"\nassert solution(\"1 3 5 2 4 6\") == \"2\"\nassert solution(\"1 3 5 2 4 6\") == \"2\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n3 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\"\nassert solution(\"4\\n10 9 8 7\") == \"1\\n1\"\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n\n\n\n-----\nIf you think it is too easy, you are right. You are not the first to want to try some weird ideas. We gave you an easy solution to get started. You are expected to find a solution on your own.\n\nThe difficulty of this problem is that the array can be too big to calculate and store in a single variable. In order to optimize the code you should use a sparse representation, so that you only store the known items.\n\nThat means you should not work with a single variable with all the elements, but you should have two arrays - one with values, one with indices.\n\nThese arrays should be sparse - that means that you should not store any elements for which the corresponding index is equal to the maximum array length.\n\nThe array should be able to accommodate any value, not only the indices in range from $1$ to $n$.\n\nThis means that even if you know that the first element with index $1$ is equal to the second element with index $2$, you should store the second element with index $2$ in the array, even if the first element with index $1$ is unknown.\n\nYou should not use any additional data structures for the solution, and the complexity should be linear in the length of the array.\n\n===Sample Tests===\nTest #1\n\nInput:\n4\n2 4 3 1\n\nOutput:\n3\n2 3 1\n\nTest #2\n\nInput:\n6\n6 2 7 8 1 3 4\n\nOutput:\n4\n2 3 4 5 1\n\n\nTest #3\n\nInput:\n8\n9 8 7 6 5 4 3 2\n\nOutput:\n3\n2 3 4 5 6 7 8\n\nTest #4\n\nInput:\n9\n10 9 8 7 6 5 4 3 2 1\n\nOutput:\n4\n2 3 4 5 6 7 8 9\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split()))\nd = dict()\n\nfor i in range(n):\n    d[l[i]] = i\n\nseq = list()\nfor i in range(n):\n    if i > 0 and l[i] < l[i-1]:\n        seq.append(l[i])\n    elif d.get(l[i]):\n        seq.append(l[i])\n\nprint(len(seq))\nprint(*seq)\n\n\n\"\"\"\n6\n6 2 7 8 1 3 4\n\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split()))\nd = dict()\n\nfor i in range(n):\n    d[l[i]] = i\n\nseq = list()\nfor i in range(n):\n    if i > 0 and l[i] < l[i-1]:\n        seq.append(l[i])\n    elif d.get(l[i]):\n        seq.append(l[i])\n\nprint(len(seq))\nprint(*seq)\n\n\n\"\"\"\n7\n3 3 4 7 5 6 8\n\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split()))\nd = dict()\n\nfor i in range(n):\n    d[l[i]] = i\n\nseq = list()\nfor i in range(n):\n    if i > 0 and l[i] < l[i-1]:\n        seq.append(l[i])\n    elif d.get(l[i]):\n        seq.append(l[i])\n\nprint(len(seq))\nprint(*seq)\n\n\n\n\"\"\"\n3\n1 3 4\n\n\"\"\"\nn = int(input())\nl = list(map(int, input().split()))\nd = dict()\n\nfor i in range(n):\n    d[l[i]] = i\n\nseq = list()\nfor i in range(n):\n    if i > 0 and l[i] < l[i-1]:\n        seq.append(l[i])\n    elif d.get(l[i]):\n        seq.append(l[i])\n\nprint(len(seq))\nprint(*seq)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n3\n1 3 4\n\n\"\"\"\nn = int(input())\nl = list(map(int, input().split()))\nd = dict()\n\nfor i in range(n):\n    d[l[i]] = i\n\nseq = list()\nfor i in range(n):\n    if i > 0 and l[i] < l[i-1]:\n        seq.append(l[i])\n    elif d.get(l[i]):\n        seq.append(l[i])\n\nprint(len(seq))\nprint(*seq)\n\n\n\n\"\"\"\n5\n2 3 4 5\n\n\"\"\"\nn = int(input())\nl = list(map(int, input().split()))\nd = dict()\n\nfor i in range(n):\n    d[l[i]] = i\n\nseq = list()\nfor i in range(n):\n    if i > 0 and l[i] < l[i-1]:\n        seq.append(l[i])\n    elif d.get(l[i]):\n        seq.append(l[i])\n\nprint(len(seq))\nprint(*seq)\n\n\n\"\"\"\n6\n6 2 7 8 1 3 4\n\n\"\"\"\nn = int(input())\nl = list(map(int, input().split()))\nd = dict()\n\nfor i in range(n):\n    d[l[i]] = i\n\nseq = list()\nfor i in range(n):\n    if i > 0 and l[i] < l[i-1]:\n        seq.append(l[i])\n    elif d.get(l[i]):\n        seq."
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3 4 7 5 6 8\\n') == '4\\n2 3 5 6\\n'\nassert solution('6 7 8 3 4 5 9 10 11\\n') == '6\\n1 2 3 7 8 9\\n'\nassert solution('4 10 9 8 7\\n') == '1\\n1\\n'\nassert solution('9 6 7 8 3 4 5 9 10 11\\n') == '6\\n1 2 3 7 8 9\\n'\n\nprint('Successfully tested.')"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n\") == \"Yes\"\nassert solution(\"3 1\\n\") == \"No\"\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('1 2') == 'No'\n\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2') == 'Yes'\nassert solution('1 2 3') == 'No'\nassert solution('1 1') == 'No'\nassert solution('1 3') == 'Yes'\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1 2\n''') == 'Yes'\nassert solution('''1 3\n''') == 'No'\nassert solution('''2 1\n''') == 'No'\nassert solution('''3 1\n''') == 'Yes'\nassert solution('''3 3\n''') == 'No'\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1\\n') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3, 1) == \"Yes\"\n\"\"\"\n\nimport sys\nimport math\n\nA, B = sys.stdin.readline().split()\n\na = int(A)\nb = int(B)"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n\") == \"Yes\"\nassert solution(\"1 2\\n\") == \"No\"\nassert solution(\"3 3\\n\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"81 58\") == \"110\"\nprint(\"Test 1: PASS\")\n\nassert solution(\"21 12\") == \"9\"\nprint(\"Test 2: PASS\")\n\nassert solution(\"81 58\") == \"110\"\nprint(\"Test 3: PASS\")\n\nassert solution(\"2 21\") == \"1\"\nprint(\"Test 4: PASS\")\n\nassert solution(\"81 58\") == \"110\"\nprint(\"Test 5: PASS\")"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n\nimport sys\n\nX, Y = [int(n) for n in sys.stdin.readline().split()]"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"81 58\") == \"110\"\nprint(solution(\"81 58\"))\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"81 58\") == \"110\"\nassert solution(\"85 78\") == \"97\"\n\"\"\"\n\nfrom __future__ import division\n\nX, Y = map(int, stdin.readline().strip().split())\nprint(X + (Y - X) / 2)\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"81 58\") == \"110\"\nassert solution(\"2 8\") == \"4\"\nassert solution(\"100 100\") == \"200\"\nassert solution(\"100 1000\") == \"2000\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('81 58') == '110'\nassert solution('1 2') == '1'\n\"\"\"\n\nfrom fractions import Fraction"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('81 58') == '110'\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('81 58') == '110'\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"8\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == 8\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"8\"\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"8\"\nprint(\"Test PASSED\")\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"8\"\n\"\"\"\n\nimport sys\nimport math\nimport numpy as np\n\nn = int(sys.stdin.readline())\n\ndigit = np.arange(1, n + 1)\n\nprint(math.factorial(n) // np.product(math.factorial(digit)))\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == 8\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nsum = 0\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        if i!= j:\n            for k in range(1, n + 1):\n                if i!= k and j!= k:\n                    print(\"{0}{1}{2}\".format(i, j, k))\n                    sum += 1\nprint(sum)\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nn = int(stdin.readline())"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 8\nprint(solution('2'))\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == 'YES'\nassert solution('6') == 'YES'\nassert solution('8') == 'NO'\nassert solution('9') == 'YES'\n\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"8\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"10\") == \"NO\"\nassert solution(\"1\") == \"NO\"\n\"\"\"\n\nx = int(stdin.readline())"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == 'YES'\nprint(solution('5'))\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == 'YES'\nassert solution('3') == 'YES'\nassert solution('6') == 'NO'\nassert solution('9') == 'NO'\nassert solution('8') == 'NO'\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == 'YES'\nassert solution('3') == 'YES'\nassert solution('7') == 'NO'\nassert solution('9') == 'NO'\n\n-------"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == 'YES'\nassert solution('6') == 'YES'\nassert solution('7') == 'YES'\nassert solution('8') == 'NO'\nassert solution('9') == 'NO'\n\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"10\") == \"NO\"\nprint(solution(\"10\"))"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"9\") == \"NO\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"3\") == \"YES\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 5 3') == 'YES'\nassert solution('11') == 'YES'\nassert solution('6') == 'YES'\nassert solution('5') == 'YES'\nassert solution('4') == 'YES'\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('999') == 'ABC'\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\nassert solution(\"ABC\") == \"ABC\"\nassert solution(\"ABD999\") == \"ABD\"\n\"\"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\n-----"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '999'\n) == 'ABC'\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('999') == 'ABC'\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('999') == 'ABC'\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"999\") == \"ABC\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"999\") == \"ABC\"\nprint(solution(\"999\"))\n\n-----Explanation-----\nThe 999-th round of AtCoder Beginner Contest is labeled as ABC999.\n\"\"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"999\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"999\") == \"ABC\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 4 8 9 15') == 'Yay!'\nassert solution('1 2 5 9 15') == 'Yay!'\nassert solution('1 2 5 11 15') == 'Yay!'\nassert solution('1 2 5 15') == 'Yay!'\nassert solution('1 2 5 17') == 'Yay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 4 8 9 15\") == \"Yay!\"\nassert solution(\"1 2 4 8 9 16\") == \":("
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == \"Yay!\"\n\nimport os, io, unittest\nfrom collections import Counter, defaultdict, deque\nfrom math import sqrt, inf\nfrom itertools import permutations, combinations, accumulate\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom fractions import gcd\nfrom bisect import bisect, bisect_left, bisect_right"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 4 8 9 15\") == \"Yay!\"\nassert solution(\"1 2 5 8 9 15\") == \":(\nassert solution(\"1 2 3 4 5\") == \"Yay!\"\nassert solution(\"1 2 3 4 5 7\") == \":(\nassert solution(\"1 2 3 4 5 6\") == \":(\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'Yay!'\nassert solution('1') == 'Yay!'\nassert solution('1 2') == 'Yay!'\nassert solution('1 2 3') == 'Yay!'\nassert solution('1 2 3 4') == 'Yay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n12\\n13\\n15') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n7\\n8\\n9\\n10\\n12\\n13\\n14\\n15') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n8\\n9\\n10\\n12\\n13\\n14\\n15') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n12\\n13\\n14\\n15') == 'Yay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 4 8 9 15\") == \"Yay!\"\nassert solution(\"1 2 4 8 9 16\") == \":(\n\"\"\"\n\nfrom collections import defaultdict\n\na, b, c, d, e, k = map(int, stdin.split())\ndist = [b - a, c - a, d - a, e - a]\n\nd = {x: y for x, y in zip(dist, [False, False, False, False])}\n\nd[k] = True\n\nfor key in d.keys():\n    if d[key]:\n        for i in dist:\n            if i < key:\n                d[key] = False\n\nprint(\"Yay!\" if d[k] else \":(\")\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3200, \"pink\") == \"pink\"\nassert solution(3200, \"pink\") == \"red\"\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3200pink\") == \"pink\"\nassert solution(\"3200PINK\") == \"pink\"\nassert solution(\"3200pIKKk\") == \"pink\"\n\n'''"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('pink') == 'pink'\nprint(solution(input()))\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3200, 'pink') == 'pink'\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"pink\") == \"pink\"\nassert solution(\"red\") == \"red\"\nassert solution(\"blue\") == \"blue\"\nassert solution(\"green\") == \"green\"\nassert solution(\"pink\") == \"pink\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"3200\"\n) == \"pink\"\nassert solution(\n    \"2999\"\n) == \"red\"\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\na = int(input())"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\n-----Problem-----\nYou've just written a function to check whether an integer is divisible by 5.\nThere's also a function to check whether the integer is divisible by 5 but,\nhowever, it takes a variable amount of arguments, which you'll have to deal with.\n\nWrite a function called divisible_by_five() that takes an arbitrary number of arguments and returns True if at least one of them is divisible by 5.\n\n-----Constraints-----\n - 0 arguments\n - arbitrary amount of arguments\n - return type is boolean\n\n-----Sample Input-----\ndivisible_by_five(7) # False\ndivisible_by_five(5) # True\ndivisible_by_five(25, 12) # True\ndivisible_by_five(6, 3, 9, 12, 4, 8) # True\n\n-----Sample Output-----\nFalse\nTrue\nTrue\nTrue\n\n-----Problem-----\nYou've written a function that uses a conditional to print a message based on whether a given variable x is greater than or equal to 100.\nHowever, there's a bug in the function, as it will always print \"X is equal to or less than 100\" if x is equal to or less than 100.\nFix the function so that a correct message is printed.\n\n-----Constraints-----\n - 0 arguments\n - arbitrary amount of arguments\n - return type is boolean\n\n-----Sample Input-----\n50\n-50\n100\n200\n50\n\n-----Sample Output-----\nX is less than 100\nX is less than 100\nX is equal to or more than 100\nX is equal to or more than 100\nX is less than 100"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"pink\") == \"pink\"\nassert solution(\"red\") == \"red\"\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3200) == \"pink\"\nprint('Test pass.')\n\"\"\"\n\na = int(input())\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1200') == 'ABC'\nassert solution('2800') == 'ARC'\nassert solution('4208') == 'AGC'\nassert solution('1101') == 'ARC'\nassert solution('2476') == 'ABC'"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1100') == 'ARC'\nassert solution('1') == 'ARC'\nassert solution('1250') == 'ABC'\n\"\"\"\n\nratings = {\n    '1100': 'ARC',\n    '1200': 'ABC',\n    '1250': 'AGC'\n}\n\nR = int(input())\nfor k, v in ratings.items():\n    if int(k) <= R:\n        print(v)\n        break\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1999\") == \"AGC\"\nassert solution(\"1239\") == \"ABC\"\nassert solution(\"1939\") == \"ARC\"\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1199\") == \"ABC\"\nprint(solution(\"1199\"))\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1209') == 'ABC'\nassert solution('1209') == 'ABC'\nassert solution('1209') == 'ABC'\nassert solution('1209') == 'ABC'\nassert solution('1209') == 'ABC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1200\") == 'ABC'\nassert solution(\"2800\") == 'ARC'\nassert solution(\"4321\") == 'AGC'\nassert solution(\"4208\") == 'ABC'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1199') == 'ABC'\nassert solution('1548') == 'ARC'\nassert solution('3496') == 'AGC'\n\"\"\"\n\na, b, c, d = input().split()\na = int(a)\nb = int(b)\nc = int(c)\nd = int(d)"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\"\nimport sys"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(123) == 'ABC'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('119') == '991'\nassert solution('111') == '999'\n\"\"\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1218') == '1118'\nassert solution('91201') == '991201'\n\"\"\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('119') == '991'\nassert solution('1') == '9'\nassert solution('9') == '1'\nassert solution('11') == '1'\nassert solution('101') == '9'\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"119\") == \"991\"\nassert solution(\"111\") == \"999\"\nassert solution(\"9\") == \"1\"\n\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12') == '21'\nassert solution('11') == '11'\nassert solution('1') == '1'\nassert solution('9') == '9'\nassert solution('99') == '99'\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('19') == '91'\nassert solution('827') == '929'\n\"\"\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"99\") == \"999\"\n\nprint(solution(\"99\"))\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '9'\nassert solution('9') == '1'\nassert solution('11') == '99'\nassert solution('19') == '91'\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"918\") == \"991\"\nassert solution(\"19\") == \"19\"\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"119\") == \"991\"\n\"\"\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\nassert solution(\"zzz\") == \"z\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(5000)\n\ns = input()\nl = len(s)\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bccddaaf\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\"\n\n\"\"\"\n--SOLUTION--\n\nimport string\nt = int(stdin.readline())\nfor _ in range(t):\n    stdin.readline().rstrip()\n    str_list = [stdin.readline().rstrip()[:2] for _ in range(int(stdin.readline()))]\n    str_list.sort(key=lambda x: len(x), reverse=True)\n    str_list = \"\".join(str_list)\n    for ch in string.ascii_lowercase:\n        if ch * 2 in str_list:\n            print(ch * 2)\n            break\n\"\"\"\n\nt = int(input())\nfor _ in range(t):\n    b = input()\n    a = b[:2]\n    while len(a) < len(b):\n        if a in b and len(a) < len(b):\n            print(a)\n            a = b[:2]\n        else:\n            a += b[:2]\n    print(a)"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n\"\"\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abbaac') == 'abac'\nassert solution('ac') == 'ac'\nassert solution('bccddaaf') == 'bcdaf'\n\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 2') == 1\nassert solution('6 3') == 2\nassert solution('6 4') == 3\nassert solution('7 3') == 3\nassert solution('7 4') == 0\n\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 4\\n13 9\\n100 13\\n123 456\\n92 46') == '2\\n5\\n4\\n333\\n0'\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n10\") == \"0\"\nassert solution(\"10 1\\n100\") == \"0\"\nassert solution(\"10 10\\n100\") == \"0\"\nassert solution(\"13 9\\n123 456\") == \"0\"\nassert solution(\"13 9\\n123 456\") == \"0\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\") == \"2\"\nassert solution(\"13 9\") == \"5\"\n\"\"\""
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 4') == '2'\nassert solution('13 9') == '5'\nassert solution('100 13') == '4'\nassert solution('123 456') == '333'\nassert solution('92 46') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 4') == 2\nassert solution('13 9') == 5\nassert solution('100 13') == 4\nassert solution('123 456') == 333\nassert solution('92 46') == 0\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n10 4\") == \"2\"\nassert solution(\"13 9\") == \"5\"\nassert solution(\"100 13\") == \"4\"\nassert solution(\"123 456\") == \"333\"\nassert solution(\"92 46\") == \"0\"\n\n\n\"\"\"\n\n\"\"\"\nn=int(stdin.readline())\nfor _ in range(n):\n    a,b=map(int,stdin.readline().split())\n    print(a//b)\n\"\"\"\n\n\"\"\"\nimport sys\nfrom collections import Counter\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    a, b = map(int, sys.stdin.readline().split())\n    print(a // b)\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_0) == test_0_result\nassert solution(test_1) == test_1_result\nassert solution(test_2) == test_2_result\nassert solution(test_3) == test_3_result\nassert solution(test_4) == test_4_result\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n10 4\n13 9\n100 13\n123 456\n92 46''') == '2\\n5\\n4\\n333\\n0'\nprint('Test passed')\n\n\"\"\"\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n\"\"\""
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    4 3\n    3 4 1 2\n    \"\"\"\n) == \"2.666666666666667\"\n\"\"\"\n-----Paying off the Debt (Top 100)-----\n\nIf you have been struggling with the previous problem, here is an interesting one. It is often useful to have a ready solution that can be used for later challenges and tests.\n\nSo, here is one of the most popular and simplest problems.\n\nGiven two integers $a$ and $b$, write a program that finds the greatest common divisor of $a$ and $b$.\n\nSince $gcd(a, b) = gcd(b, a)$, you only need to find the smaller of the two integers $a$ and $b$ and recursively call the function on the rest of the divisors of this integer.\n\nThe code for this problem will be below:"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n\n-----Constraints-----\n\nThe numbers in the input are integers between 1 and 5000.\n\n\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n'''"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\nprint(solution(stdin))\n\n-----Solution-----"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == 2.666666666666667"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\nprint(solution('4 3\\n3 4 1 2'))\n\n-----Explanation-----\n\nIn the first example, the average temperature of segments 3, 4, 1, and 2 is 4/4 = 1.\n\nIn the second example, the average temperature of segments 3, 4, 1, and 2 is 4/4 = 1.\n\n-----Solution-----"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 4 1 2''') == '2.666666666666667'\n'''\n-----\n8 3\n6 6 7 2 3 5 4\n\nOutput\n5.0\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().strip().split())\nlst = list(map(int, sys.stdin.readline().strip().split()))\nl = 0\nr = 0\nres = 0\nlst_res = []\n\nwhile r < n:\n    res = 0\n    cnt = 0\n    while r < n and l < n and cnt < k:\n        res += lst[r]\n        cnt += 1\n        r += 1\n    r -= 1\n    if r < n:\n        lst_res.append(res/k)\n    l = l + 1\n\nprint(max(lst_res))\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('2') == 'NO'\nassert solution('2 1') == 'NO'\nassert solution('3 2') == 'YES'\nassert solution('3 2 1') == 'YES'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n4 1 2 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1') == 'YES\\nNO\\nYES\\nYES\\nNO\\nYES\\n'\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\") == \"YES\"\nassert solution(\"4 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES'\n\"\"\""
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input) == expected_output\n\n\"\"\""
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\") == \"YES\"\nassert solution(\"1 3\\n2 1 4 3\\n1 2\\n2 1 4 3\") == \"YES\"\nassert solution(\"1 2\\n3 2 1\\n1 2\\n3 2 1\\n1 3\\n2 1 2 3 3\\n1 4\\n2 1 4 3\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n2') == 'NO'\nassert solution('1 2\\n3') == 'NO'\nassert solution('1 3\\n4') == 'NO'\nassert solution('1 3\\n2') == 'YES'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4') == 'YES'\n\"\"\"\n\n\"\"\"\nInput\n3\n1 1\n2 1\n3 1\n2 3\n2 3\n4 1\n1 2 3\n3 2\n4 2\n4 1 2 3\n1 3\n5 1\n2 1 2 3 3\n1 4\n\nOutput\nNO\nNO\nYES\nYES\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2') == 'NO'\nassert solution('3 2 1') == 'NO'\nassert solution('1 2') == 'YES'\nassert solution('4 2 1 3') == 'NO'\nassert solution('5 1') == 'YES'\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('baabbb') == 'bab'\nassert solution('ooopppssss') == 'oops'\n\nprint(solution('baabbb'))\nprint(solution('ooopppssss'))\n\n\"\"\"\nimport sys\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('baabbb') == 'bab'\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\nassert solution(\"xz\") == \"xz\"\nassert solution(\"xzxz\") == \"xzxz\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n\nprint(solution(\"z\"))\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"baabbb\") == \"bab\"\n\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n\nprint(\"PASSED\")\n\n'''\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('baabbb') == 'bab'\nassert solution('ooopppssss') == 'oops'\nassert solution('z') == 'z'\nassert solution('abb') == 'bb'\nassert solution('foobar') == 'fooobar'\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"baabbb\"\n) == \"bab\"\nassert solution(\n\"ooopppssss\"\n) == \"oops\"\nassert solution(\n\"z\"\n) == \"z\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"bab\") == \"baabbb\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\nprint(\"Passed\")\n\nSolution\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom functools import lru_cache"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4') == '1'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3') == '0'\nassert solution('5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3') == '2'\nassert solution('8 5\\n2 1 3\\n2 4 5\\n1 4 2\\n1 5 3\\n4 6 1\\n4 7 1\\n6 7 3\\n5 8 2\\n1 1 7\\n1 8 6\\n2 7 5\\n3 5 4\\n7 8 5\\n7 6 2') == '3'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3') == '0'\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == \"2\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == \"2\"\n\"\"\"\n\n\nimport heapq\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10\") == \"0\"\nassert solution(\"4 3\") == \"0\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"5 6\") == \"2\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1\\n4 3 4\\n2 4 2\\n1 4 2\\n1 5 3\") == '1'\n\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == '0'\n\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == '1'\n\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == '0'\n\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == '2'\n\n\n\"\"\"\nfrom collections import defaultdict\n\nINF = float(\"inf\")"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"1\"\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"1\"\nassert solution(\"5 6\\n1 2 1\\n2 3 3\\n1 3 3\\n4 5 2\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 10\\\\n1 2 1\\\\n2 3 2\\\\n2 4 5\\\\n1 4 2\\\\n6 3 3\\\\n6 1 3\\\\n3 5 2\\\\n3 7 1\\\\n4 8 1\\\\n6 2 4') == '1'\nassert solution('8 10\\\\n1 2 1\\\\n2 3 2\\\\n2 4 5\\\\n1 4 2\\\\n6 3 3\\\\n6 1 3\\\\n3 5 2\\\\n3 7 1\\\\n4 8 1') == '0'\nassert solution('4 3\\\\n2 1 3\\\\n4 3 4\\\\n2 4 1') == '0'\nassert solution('3 3\\\\n1 2 1\\\\n2 3 3\\\\n1 3 3') == '1'\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n1 4 2\\n1 5 3\\n\") == \"1\"\nassert solution(\"4 5\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"0\"\nassert solution(\"5 5\\n1 2 1\\n2 3 3\\n4 5 1\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"8 10\n1 2 1\n2 3 2\n2 4 5\n1 4 2\n6 3 3\n6 1 3\n3 5 2\n3 7 1\n4 8 1\n6 2 4\"\"\") == \"1\"\nassert solution(\"\"\"4 3\n2 1 3\n4 3 4\n2 4 1\n\"\"\") == \"0\"\nassert solution(\"\"\"3 3\n1 2 1\n2 3 3\n1 3 3\n\"\"\") == \"0\"\nassert solution(\"\"\"1 0\n\"\"\") == \"0\"\nassert solution(\"\"\"5 6\n1 2 2\n2 3 1\n4 5 3\n2 4 2\n1 4 2\n1 5 3\n\"\"\") == \"2\""
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RGBGRBB') == 'RGBRGBR'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBGRR\"\n\nassert solution(\"RRRRRR\") == \"RRRRRR\"\n\nassert solution(\"RGRGRGB\") == \"GGRGRR\"\n\nassert solution(\"GGBGBR\") == \"GGBGRR\"\n\nassert solution(\"GBGBRGB\") == \"GRGRRR\""
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RGBRGBGRGB\") == \"GRB\"\nassert solution(\"RBR\") == \"RR\"\nassert solution(\"RBRG\") == \"RG\"\nassert solution(\"RBRGB\") == \"RR\"\nassert solution(\"RRRR\") == \"RRRR\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\n\"\"\"\n\nimport sys\n\n_, s = input(), set(input())\n\nres = 0\nfor i, item in enumerate(s):\n    # print(i, item)\n    res += len(s) - (s.index(item) - i) % len(s)\n\nprint(res // 3)\nfor i in range(0, res, len(s)):\n    print(s[i % len(s)], end='')\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('RGBGRBB') == 'RGBGRR'\n\"\"\"\nimport collections\nimport itertools\nimport math\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"R\") == \"R\"\nassert solution(\"RGBGRBB\") == \"RGBGRB\"\nassert solution(\"R\") == \"R\"\nassert solution(\"RR\") == \"RR\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RRRRR\") == \"RR\"\nassert solution(\"GGBBBB\") == \"GB\"\nassert solution(\"RGBRBGGRRRBGB\") == \"R\"\nassert solution(\"RGBGGRR\") == \"RGB\"\nassert solution(\"GGRRRGBRBG\") == \"GB\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RBRGRRB\") == \"RRRR\"\n\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RBRGBR\") == \"RBRGGR\"\nassert solution(\"GB\") == \"GR\"\nassert solution(\"GRRBB\") == \"GRRR\"\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('RRRR') == 'RRRR'\nassert solution('R') == 'R'\nassert solution('RR') == 'R'\nassert solution('RGBRGB') == 'RGBRGB'\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n\"\"\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == '48000.0'\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n\"\"\"\nimport re"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\nassert solution(\"3\\n1000000 JPY\\n1.10000000 BTC\") == \"76616.6\"\nassert solution(\"4\\n100000000 JPY\\n1.11111111 BTC\") == \"77260.0\"\nassert solution(\"5\\n10000000000 JPY\\n1.1111111111 BTC\") == \"77260.0\"\nassert solution(\"6\\n100000000000 JPY\\n1.11111111111 BTC\") == \"77260.0\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\n\n\"\"\"\n\nimport io\nimport sys"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\nprint(\"Passed.\")\n\"\"\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\nassert solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\n\"\"\"\n\nN = int(input())\n\nx_list = []\nu_list = []\n\nfor i in range(N):\n    x, u = map(str, input().split())\n    x_list.append(int(x))\n    u_list.append(u)"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\n10000 JPY\n0.10000000 BTC''') == '48000.0'\n\"\"\"\n\nimport sys\nfrom typing import List\n\nassert sys.version_info >= (3, 7)\n\ntest_case_count = int(input())\n\nfor _test_counter in range(test_case_count):\n\n    test_case_number = input()\n\n    input_list = []\n\n    for _input_line in range(int(test_case_number)):\n        input_list.append(input().split())\n\n    jpy_count = 0\n\n    for input_line in input_list:\n        if input_line[1] == 'JPY':\n            jpy_count += int(input_line[0])\n\n    print(jpy_count)\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('4 2') == '3'\nassert solution('2 3') == '1'\nassert solution('4 1') == '3'\n\nprint('all tests passed.')\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2') == '3'\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n') == '3'\nprint(solution(stdin))"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\"\n\n\"\"\"\n\n-----------Solution (Top Voted)------------\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n\") == \"3\"\n\"\"\"\n\n\"\"\"\nWe can think of this problem as having N cars in a line. The i-th car from the front has the number i. The i-th car from the back has the number N - i.\n\nWe can use a loop to iterate over each car. For each car, we can find the car to the left. We use the number of cars from the front (i) to find the number of cars from the back (N - i). This can be done by subtracting the number of cars from the front (i) with the number of cars from the back (N - i).\n\nIf we think of the i-th car from the front as A, the i-th car from the back as B, and the i-th car from the front as C, then the (N - i)th car from the back is C. We know that the (N - i)th car from the front is C. Therefore, C = B + (N - i) - A.\n\nNow we can use a loop to iterate over the N cars, starting from the front. For each car, we know that the (N - i)th car is the (i - 1)th car. Therefore, we know that the (i - 1)th car is A + i - 1.\n\nTo find the j-th car from the back, we subtract the (N - i)th car from the front with the (i - 1)th car from the back. This gives us the (N - i)th car from the front, which is the j-th car from the back."
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n') == '3'\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"3\"\n'''\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"4 2\\n\"\n) == \"3\"\n\"\"\"\n\nN, i = map(int, input().split())\nprint(N-i)\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\nip') == 'i'\nassert solution('2\\ncd') == 'c'\nassert solution('2\\niog') == 'io'\nassert solution('2\\nxy') == 'x'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '4'\n    'ipcc'\n    ) == 'icpc'\nassert solution(\n    '5'\n    'abcde'\n    ) == 'aebcd'\nassert solution(\n    '2'\n    'ipcc'\n    ) == 'icpc'\n\nassert solution(\n    '3'\n    'abc'\n    'xyz'\n    ) == 'abxy'\nassert solution(\n    '2'\n    'aa'\n    'bb'\n    ) == 'baa'\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nS, T = [sys.stdin.readline().strip() for _ in range(2)]"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 ip cc') == 'icpc'\nassert solution('1 aa') == 'a'\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\nassert solution(\"op ic\") == \"op oic\"\nassert solution(\"eo kv\") == \"eokv\"\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ip cc') == 'icpc'\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abc\") == \"cba\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 abc') == 'aab c'\nassert solution('3 ab') == 'a aa b'\n\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == 'Yes'\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABA\") == \"Yes\"\n\"\"\"\n\nimport sys\nimport string"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABA\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABB\") == \"No\"\nassert solution(\"ABC\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABA') == 'Yes'\nassert solution('BBA') == 'Yes'\nassert solution('CAB') == 'No'\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BAB\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"ABB\") == \"No\"\n\"\"\"\n\nS = input()\n\nA = S.count('A')\nB = S.count('B')"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(ABA) == \"Yes\"\nprint(solution(ABA), \"Yes\")\n\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AAA\") == \"No\"\nassert solution(\"BBB\") == \"No\"\nassert solution(\"ABA\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABA') == 'Yes'\nassert solution('ABA') == 'Yes'\nassert solution('BBB') == 'No'\nassert solution('ABB') == 'No'\nassert solution('BBA') == 'Yes'\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RRS') == '2'\nassert solution('SRS') == '2'\nassert solution('SRR') == '3'\nassert solution('SSR') == '1'\nassert solution('RSS') == '2'\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RRS\") == 2"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('SRS') == 2\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RRS\") == 2\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('RRS') == '2'\nassert solution('RRRR') == '4'\nassert solution('SRR') == '3'\nassert solution('SSS') == '1'"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RRS\") == 2\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RRRR\") == \"2\"\nassert solution(\"S\") == \"0\"\nassert solution(\"SSS\") == \"3\"\n\"\"\"\n\nS = input()\nl = []\ncount = 0\nfor i in range(len(S)):\n    if S[i] == \"R\":\n        count += 1\n        l.append(count)\n    else:\n        count = 0\n\nprint(max(l))\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RRS\") == 2\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"S\") == 0\nassert solution(\"RRR\") == 2\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 3\") == \"3 1 2\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\\n2 1 3\") == \"3 1 2\"\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1 2 3''') == '3 1 2'\nassert solution('''3 1 2''') == '1 2 3'\n\"\"\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '3 1 2'\nassert solution('3 2 1') == '2 3 1'\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"2 3 1\") == \"1 3 2\"\nassert solution(\"3 1 2\") == \"1 2 3\"\nassert solution(\"1 1 1\") == \"1 1 1\"\n\nprint(solution(\"1 2 3\"))\nprint(solution(\"2 3 1\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"1 1 1\"))"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\n---\n### Solution\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1 2 3\n4 5 6\n7 8 9''') == '''7 1 4\n8 5 2\n9 6 3'''\nassert solution('''20 10 30\n40 50 60\n70 80 90''') == '''70 10 40\n50 20 90\n80 60 30'''\nassert solution('''35 12 95\n2 18 51\n26 60 8''') == '''51 26 35\n12 18 2\n95 60 26'''\nassert solution('''26 30 16\n36 22 22\n49 50 17\n75 42 28''') == '''75 42 34\n22 16 36\n28 22 49'''\nassert solution('''33 22 53\n17 44 43\n12 16 49''') == '''49 33 22\n43 17 44\n16 12 33'''\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '3 1 2'\nassert solution('3 2 1') == '1 3 2'\nassert solution('4 4 4') == '4 4 4'\nassert solution('4 4 5') == '5 4 4'\nassert solution('6 6 7') == '7 6 6'\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '3 1 2'\nassert solution('1 2 3\\n4 5 6') == '4 5 6'\n\"\"\"\nfrom typing import List\nimport sys"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('30 100') == '100'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"30 100\\n\") == \"100\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"30 100\") == '100'\nprint(solution(stdin))"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('30 100') == '100'\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 20') == '0'\nassert solution('7 100') == '50'\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"30 100\\n\") == \"100\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"30 100\") == \"100\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('30 100') == '100'\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"++\") == \"3\"\nassert solution(\"+-++\") == \"2\"\nassert solution(\"+-0\") == \"1\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('+-') == '2'\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"-+++\") == \"0\"\nassert solution(\"-\") == \"0\"\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"++\") == \"0\"\nassert solution(\"-\") == \"0\"\nassert solution(\"-+++\") == \"0\"\nassert solution(\"-0\") == \"0\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"+-\") == 2\n\"\"\"\n\ns = input()\n\nprint(sum([1 if i == '+' else -1 for i in s]))\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('+-') == 2\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"+-\") == 2\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"+-++\") == \"2\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"+-\") == \"0\"\nassert solution(\"++\") == \"2\"\nassert solution(\"+-++\") == \"2\"\nassert solution(\"+-++-\") == \"0\"\nassert solution(\"+-++-5\") == \"0\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2012/01/08\") == \"TBD\"\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2019/04/30) == 'Heisei'\n\"\"\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == expected_output\n\"\"\"\n\ntest_input = \"2019/04/30\"\nexpected_output = \"Heisei\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\n\"\"\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2018/08/16\") == \"TBD\"\n\"\"\"\n\n\"\"\"\n9. Write a program to test if a string is a palindrome.\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\nprint('Hooray!')\n\n-----"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2020/05/10') == 'TBD'\n\"\"\"\n\nfrom datetime import datetime, date"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/31\") == \"TBD\"\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\n\"\"\"\n\nfrom datetime import datetime"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2015/10/20\") == \"TBD\"\n\"\"\"\n\nimport sys\nimport re\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\n\"\"\""
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\\n\") == \"14\"\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\\n\") == \"9\"\nassert solution(\"3\\n1337 1337 1337\\n\") == \"3\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == 14\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == 9\nassert solution(\"3\\n1337 1337 1337\") == 3\nassert solution(\"3\\n1337 1337 1337 1337\") == 3\nassert solution(\"3\\n1337 1337 1337 1337 1337\") == 3\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == 14\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == '14'\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == '9'\nassert solution(\"3\\n1337 1337 1337\") == '3'\n\"\"\""
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\nassert solution(\"3\\n1337 1337 1337\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == '14'\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == '9'\nassert solution(\"3\\n1337 1337 1337\") == '3'\n\n\"\"\""
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\nassert solution(\"3\\n1337 1337 1337\") == \"3\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\n\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\n\nassert solution(\"3\\n1337 1337 1337\") == \"3\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\nassert solution(\"3\\n1337 1337 1337\") == \"3\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == 2\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == 3\nassert solution(\"10 5\\n2 3 3 1 1 2 1 2 3 3\\n\") == 2\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\nassert solution(\"7 2\\n3 3 1 1 2 1 2 3\\n\") == \"2\\n2 1\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == 2\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == 3\nassert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == 2\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == 3\nassert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == 2\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\n\"\"\""
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == '2\\n2 1'\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == '3\\n1 3 2'\nassert solution(\"3 10\\n1 3 1\") == '1\\n3 1'\nassert solution(\"100 500\\n2 3 2 1 3 2 1 2 3 2 1 2 3 3 2 1 2 1 2 3 2 3 1 1 2 1 3 3 3 3 2 2 1 1 2 3 1 3 2 3 3 2 1 2 3 1 2 3 2 3 1 3 2 2 2 1 1 2 3 2 1 2 1 1 3 1 2 3 3 2 3 1 3 2 3 1 2 3 2 1 3 1 2 2 3 3 3 1 2 2 3 2 2 1 1 2 2 1 3 1 2 3 3 1 2 1 1 1 2 1 2 2 2 1 2 1 1 1 1 1 2 2 1 1 1 1 2 1 2 1 1 2 3 1 2 3 3 2 2 2 3 1 3 1 2 1 2 1 1 1 3 2 2 3 2 2 1 1 2 1 3 2 3 2 3 1 1 2 3 2 3 1 2 1 3 3 1 1 3 2 2 1 2 3 1 2 2 3 2 3 1 2 3 2 2 3 2 1 3 1 2 1 1 1 2 3 2 1 2 3 2 2 3 1 2 3 3 1 3 2 1 3 1 2 1 1 1 3 1 1 3 2 3 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\") == \"2\"\nassert solution(\"10 4\") == \"3\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 2') == '2'\nassert solution('10 4') == '3'\n\"\"\""
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\"\n\n\n\"\"\"\nimport sys\n\nnum, k = map(int, sys.stdin.readline().split())\nlst = list(map(int, sys.stdin.readline().split()))\n\nlst_k = [0] * k\nlst_k_idx = 0\n\nfor i in range(num):\n    if lst_k_idx < k and lst_k[lst_k_idx] == i:\n        lst_k_idx += 1\n    elif lst_k_idx == k:\n        lst_k_idx -= 1\n    else:\n        lst_k[lst_k_idx] = i\n        lst_k_idx += 1\n\nfor idx in lst_k:\n    print(idx + 1, end=' ')"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2\\n') == '2\\n2 1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 2') == '2'\nassert solution('10 4') == '3'\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 8 2 4\", \"8\", \"5\", \"14\", \"10\") == \"3\"\n\"\"\"\n\nfrom collections import deque, defaultdict\n\nimport math\nimport sys"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"1 -1 3 2 2\"\n\"\"\"\n\nn, q = map(int, input().split())\ns = [int(input()) for _ in range(n)]\n\nfor _ in range(q):\n    b = int(input())\n    l = 0\n    r = n - 1\n    while l <= r:\n        m = (l + r) // 2\n        if s[m] > b:\n            r = m - 1\n        elif s[m] < b:\n            l = m + 1\n        else:\n            break\n    print(n - r if r >= 0 else -1)\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n3\\n4\") == \"3\\n3\\n2\"\nassert solution(\"3\\n1\\n3\\n4\\n5\") == \"3\\n3\\n2\\n5\"\n\"\"\"\n\n\nfrom sys import stdin\nfrom itertools import combinations"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 4\n2 4 8 2 4\n8\n5\n14\n10''') == '''1\n-1\n3\n2'''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('test') == 'test'\n\nassert solution('3\\n1\\n1\\n2\\n2') == '1\\n-1\\n2\\n2'\nassert solution('1\\n2\\n3\\n4\\n5') == '-1\\n1\\n2\\n2\\n2'\nassert solution('2\\n1\\n2\\n1\\n2') == '-1\\n2\\n2\\n2\\n2'\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"1 -1 3 2\"\nassert solution(\"2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"1 -1 3 2\""
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 8 2 4\\n8\\n5\\n14\\n10\") == \"1 -1 3 2\"\nprint(solution(\"2 4 8 2 4\\n8\\n5\\n14\\n10\"))\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4 8 2 4\\n8\\n5\\n14\\n10\\n') == '1 -1 3 2'\n\"\"\"\n\nimport sys\n\nn, q = list(map(int, sys.stdin.readline().split()))\narr = list(map(int, sys.stdin.readline().split()))\narr.sort()\n\nfor _ in range(q):\n    b = int(sys.stdin.readline())\n    start = 0\n    end = n-1\n    ans = -1\n    while start <= end:\n        mid = (end - start) // 2 + start\n        if arr[mid] >= b:\n            ans = mid\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    print(ans)\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 8\\n1\\n2\\n4\\n5\\n3\\n6\\n7\\n5\\n8\\n10\\n9\") == \"8\"\nassert solution(\"7 8\\n1\\n2\\n4\\n5\\n3\\n6\\n7\\n5\\n8\\n10\\n9\") == \"8\"\n\"\"\"\n\nfrom sys import stdin\nfrom math import log"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"\n\nprint(\"Successfully solved!\")\n\n'''"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7') == '21'\nassert solution('3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\\n\") == \"21\"\nassert solution(\"4 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\\n\") == \"0\"\nassert solution(\"4 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\\n\") == \"0\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 3\n1 3 2 8 5 5 8 2 2 8 5 2\n1 2 2 5\n2 6 7''') == '21'\n\nassert solution('''4 3\n9 9 9 9 9 9 9 9 9 9\n1 2 3\n1 2 3''') == '0'\n\n\"\"\"\n\nfrom collections import defaultdict, deque\nimport itertools\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\\n\"\n) == \"21\"\nassert solution(\n    \"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\\n\"\n) == \"0\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2 3\\n1 2 3\\n2 6 7\") == 0\n\n\"\"\"\nimport sys\n\nfrom typing import List\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 2 3\\n1 2 3\\n2 6 7\") == '0'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\") == \"21\"\n\nsolution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\")\nassert solution(\"3 3\\n1 2 3\") == \"0\""
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == '21'\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 1 1') == (0, 0, 0)\nassert solution('2 8 10') == (2, 2, 1)\n\n\"\"\""
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('a\\nb') == ''\nassert solution('1 2 3 4 5') == ''\nassert solution('1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n') == '0\\n0\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n2 4 6 6 6''') == '2\nassert solution('''3\n2 8 10''') == '2\nassert solution('''4\n1 1 1 1''') == '0''' == '''5\n2 4 6 6 6''')\nassert solution('''2\n2 4 6''') == '1 2 3'\nassert solution('''3\n2 8 10''') == '2 2 1'\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 6 6 6') == '2'\nassert solution('2 8 10') == '2'\nassert solution('2 8 10') == '2'\nassert solution('2 8 10') == '2'\nassert solution('2 8 10') == '2'\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4 6 6 6') == 2\nassert solution('2 8 10') == 2\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 6 6 6\") == \"2\"\nassert solution(\"8 10 10\") == \"2\"\nassert solution(\"2 8 10\") == \"2\"\nassert solution(\"8 10 10\") == \"2\"\nassert solution(\"2 8 10\") == \"2\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 6 6\") == '2\\n1 2\\n2 3'\nassert solution(\"3 2 8\") == '2\\n2 3'\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 1 3\") == '2\\n2 2 1'\nassert solution(\"5\\n2 4 6 6 6\") == '2\\n1 2 3\\n1 1 2'\nassert solution(\"5\\n2 4 5 6 6\") == '1\\n1 2 2\\n1 1 3'\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 6 6 6\") == 2\nassert solution(\"8 2 10\") == 2\nassert solution(\"2 8 10\") == 2\nassert solution(\"1 1 1 1\") == 0\n\nprint('Successfully solved!')\n\n\n\"\"\""
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\nassert solution(\"11111111\") == 0\nassert solution(\"100101010\") == 3\nassert solution(\"10010101010\") == 4\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10101\") == 2\nassert solution(\"101\") == 0\nassert solution(\"001\") == 1\nassert solution(\"110\") == 2\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\nassert solution(\"11111111\") == 0\nassert solution(\"10101010\") == 2\nassert solution(\"11111100\") == 0\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"0110110\") == 2\n\"\"\"\n\n\nimport sys\nfrom itertools import combinations\nfrom typing import Tuple, Set\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"101010\") == 2\nassert solution(\"10000010\") == 0\nassert solution(\"11101010\") == 0\nassert solution(\"11111111\") == 0\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"11111111\") == 0\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(100010) == 1\nassert solution
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10010001\") == 2\nassert solution(\"10100100\") == 0\nassert solution(\"11111111\") == 0\nassert solution(\"101101010\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"11101010\") == 2\nassert solution(\"10100100\") == 0\nassert solution(\"11111111\") == 0\n\"\"\"\nimport sys\nimport bisect"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n4 6 7'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == '3\\n1 4 5'\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3') == '4\\n1 3 5 6'\n\n\"\"\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n4 6 7'\n\"\"\""
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\"\"\") == '3\n4 6 7'\n\"\"\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6\"\nassert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n4 6 7\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3'\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == '3'\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == '4'\n\nprint(\"The local tests are done.\")\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n4 6 7'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == '3\\n1 4 5'\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3') == '4\\n1 3 5 6'\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\"\"\") == \"3\\n4 6 7\"\n\nassert solution(\"\"\"5 1\n29 30\n30 30\n29 29\n28 30\n30 30\"\"\") == \"3\\n1 4 5\"\n\nassert solution(\"\"\"6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\"\"\") == \"4\\n1 3 5 6\"\n\nassert solution(\"\"\"9 1\n13 13\n12 13\n12 12\n12 13\n13 13\n12 12\n12 12\n13 13\n12 12\n13 13\n12 12\"\"\") == \"8\\n1 6 7 8 9\"\n\nassert solution(\"\"\"9 1\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\"\"\") == \"8\\n1 4 5 6 7 8 9\""
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_str) == test_result\nprint(solution(input_str))\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n4 6 7'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == '3\\n1 4 5'\n\"\"\"\nimport sys\nfrom typing import List\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f'({self.x},{self.y})'\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 5\\n1 2 3\") == '0 1 2'\nassert solution(\"4\\n2 3 4\") == '1 2 3'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nq = int(input())"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\") == \"30\"\n\n\"\"\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6') == '30\\n31\\n10'\n\"\"\""
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n') == '30\\n31\\n10\\n'\nprint('Test passed\\n')\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6') == '30\\n31\\n10'\nprint(solution(stdin))\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n1 2') == '2'\nassert solution('3\\n1 2 3') == '6'\nassert solution('4\\n1 1 2 3') == '4'\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\") == \"30\\n31\\n10\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\") == \"30\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n4\\n6\\n\") == '30\\n'\nassert solution(\"2\\n4\\n6\\n\") == '31\\n'\nassert solution(\"1\\n4\\n6\\n\") == '10\\n'\n\"\"\""
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15') == '30\\n31\\n10'\n\"\"\"\n\nq = int(input())\n\nfor _ in range(q):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    print(max(sum(a) // 3, max(a[0], a[1]) * max(a[0], a[2]) * max(a[1], a[2]) // 2))\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2\\n10 1 20\\n2\\n3 6') == '2\\n1\\n2\\n1'\nassert solution('4\\n4\\n2 10 1 20\\n2\\n3 6') == '1\\n2\\n2\\n1'\n\"\"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3\\n6\\n5\\n2\\n3\\n4\\n99\\n100\") == \"2\"\nassert solution(\"2\\n5\\n3\\n6\\n100\\n2\\n3\\n4\\n99\") == \"2\"\nassert solution(\"1\\n42\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n4\\n2 10 1 20\\n2\\n3 6\") == \"2\"\nassert solution(\"4\\n2\\n3 6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input) == output\n\n\"\"\"\n\nfrom __future__ import annotations\nfrom typing import Any, List, Dict, Tuple, Optional\n\nimport collections\nimport itertools\nimport math\nimport queue\nimport re\n\nfrom enum import Enum\n\nfrom collections import defaultdict\n\n\"\"\"\nhttps://www.interviewcake.com/question/python/two-sum-combinations\nGiven a list of integers, return all the unique pairs that sum up to a certain value.\n\nSo if we want a sum of 42, and the list is:\n\n[1, 3, 2, 4, 7, 5]\n\nThe result would be:\n\n[(3, 7), (2, 5)]\n\nThe idea here is to first iterate through the list and find the complement for every number.\nThen we can then look through the original list and find any matches.\n\"\"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\n\"\"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100') == '2\\n1\\n2\\n1'\n\n\n-----Hint-----\n\nUse dynamic programming.\n\"\"\""
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\\n\") == '2\\n1\\n2\\n1'\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"2\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"2\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 6\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"YES\"\nassert solution(\"3 3 5 18\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 6\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"NO\"\nassert solution(\"3 3 5 18\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_0) == \"YES\"\nassert solution(test_1) == \"NO\"\nassert solution(test_2) == \"NO\"\nassert solution(test_3) == \"YES\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 6\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"YES\"\nassert solution(\"3 3 5 18\") == \"YES\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\\n1 2 3 6\") == \"YES\"\nassert solution(\"5 2 6 27\\n3 3 5 18\") == \"NO\"\nassert solution(\"3 3 5 18\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 2 1\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18') == 'YES'\n\"\"\"\n\n\"\"\"\nProblem 2 - Summation \nGiven a finite positive integer n and an array of integers a, your task is to calculate the sum of a[i] * a[i+1] *... * a[i+k-1] (i+k <= n), where k is the length of the array.\n\nExample\nFor n = 7 and a = [1, 2, 3, 4, 3], the output should be\nsummation(n, a) = 3 + 2 + 1 + 4 + 6 = 22.\n\nInput/Output\n[input] integer n\n\nThe length of the array.\nIt is guaranteed that the length is finite.\n\nConstraints:\n1 \u2264 n \u2264 1000.\n\n[input] array.integer a\n\nAn array of integers. It is guaranteed that a[i] \u2208 {0, 1,..., n - 1}.\n\nConstraints:\n1 \u2264 a.length \u2264 1000,\n0 \u2264 a[i] \u2264 n - 1.\n\n[output] integer\n\nThe sum of a[i] * a[i+1] *... * a[i+k-1] (i+k <= n), for i = 0, 1,..., n - k.\n\"\"\"\n\n\"\"\"\nProblem 3 - Next Permutation \nGiven an integer array nums, return the next permutation of nums in ascending order. \n\nThere is no guarantee that the permutation in the array nums will be ascending, \njust return the lexicographically next permutation in ascending order.\n\n\n-----Example 1-----\nInput: nums = [1,2,3]\nOutput: [1,3,2]\n\n-----Example 2-----\nInput: nums = [3,2,1]\nOutput: [1,2,3]\n\n-----Example 3-----\nInput: nums = [1,1,5]\nOutput: [1,5,1]\n\n-----Example 4-----\nInput: nums = [1]\nOutput: [1]\n\"\"\"\n\n\"\"\"\nProblem 4 - Palindromic Substrings\nGiven a string s, return all the palindromic substrings in s. You may return the answer in any order.\n\nA string is called palindrome if it reads the same backward as forward.\n\n\n-----Example 1-----\nInput: s = \"aab\"\nOutput: [\"aab\", \"abba\"]\n\n-----Example 2-----\nInput: s = \"abc\"\nOutput: [\"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", \"abc\"]\n\"\"\"\n\n\"\"\"\nProblem 5 - Longest Palindromic Substring\nGiven a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n\nExample 1:\n\nInput: \"babad\"\nOutput: \"bab\"\nNote: \"aba\" is also a valid answer.\n\nExample 2:\n\nInput: \"cbbd\"\nOutput: \"bb\"\n\n\"\"\"\n\n\"\"\"\nProblem 6 - String Compression\nGiven an array of characters chars, compress it using the following algorithm:\n\nBegin with an empty string s. For each group of consecutive repeating characters in chars:\n\nIf the group's length is 1, append the character to s.\nOtherwise, append the character followed by the group's length.\nThe compressed string s should not be returned separately, but instead be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.\n\nAfter you are done modifying the input array, return the new length of the array.\n\nYou must write an algorithm that uses only constant extra space.\n\n\n-----Example 1-----\nInput: chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\nOutput: Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\n\nExplanation: The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\".\n\n-----Example 2-----\nInput: chars = [\"a\"]\nOutput: Return 1, and the first character of the input array should be: [\"a\"]\n\nExplanation: The only group is \"a\", which remains uncompressed since it's a single character.\n\n-----Example 3-----\nInput: chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nOutput: Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].\n\nExplanation: The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\".\n\nNote:\n\n1 <= chars.length <= 2000.\nchars[i] is a lower-case English letter, or a digit.\n\n\n\n\"\"\"\n\n\"\"\"\nProblem 7 - Reverse Integer\nGiven a 32-bit signed integer, reverse digits of an integer.\n\nExample 1:\n\nInput: 123\nOutput: 321\nExample 2:\n\nInput: -123\nOutput: -321\nExample 3:\n\nInput: 120\nOutput: 21\nNote:\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\u2212231,  231 \u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\n\n\n\"\"\"\n\n\"\"\"\nProblem 8 - String to Integer (atoi)\nImplement atoi which converts a string to an integer.\n\nThe function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.\n\nThe string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.\n\nIf the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.\n\nIf no valid conversion could be performed, a zero value is returned.\n\nNote:\n\nOnly the space character'' is considered as whitespace character.\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\u2212231,  231 \u2212 1]. If the numerical value is out of the range of representable values, INT_MAX (231 \u2212 1) or INT_MIN (\u2212231) is returned.\n\nExample 1:\n\nInput: \"42\"\nOutput: 42\nExample 2:\n\nInput: \"   -42\"\nOutput: -42\nExplanation: The first non-whitespace character is '-', which is the minus sign.\n             Then take as many numerical digits as possible, which gets 42.\nExample 3:\n\nInput: \"4193 with words\"\nOutput: 4193\nExplanation: Conversion stops at digit '3' as the next character is not a numerical digit."
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 3 6') == 'YES'\nassert solution('1 2 3 6') == 'NO'\nassert solution('5 2 6 27') == 'NO'\nassert solution('3 3 5 18') == 'YES'\n\n-----Additional-----\n\nA good example of a test case to ask a solution is from HackerRank:\n\nhttps://www.hackerrank.com/challenges/correctness-invariant/problem\n\"\"\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18') == \"YES\\nNO\\nNO\\nYES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == 'YES'\nassert solution('1 2 3 6') == 'NO'\nassert solution('5 2 6 27') == 'YES'\nassert solution('3 3 5 18') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3 6\") == 'YES'\nassert solution(\"1 2 3 4\") == 'NO'\nassert solution(\"5 2 6 27\") == 'NO'\nassert solution(\"3 3 5 18\") == 'YES'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == 'YES\\n2\\n3 7\\n5\\n7 4 3 2 1'\nassert solution(\"5 4 3 1 5 3\") == 'YES\\n1\\n3\\n4\\n5 4 3 1'\nassert solution(\"5 1 2 3 4\") == 'YES\\n0\\n'\nassert solution(\"5 2 1 4 3\") == 'NO'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"5 1 2 3 4\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\"\nassert solution(\"5 0 2 3 4\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2 7 3 3 1 4\\n\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\nassert solution(\"5 4 3 1 5 3\\n\") == \"YES\\n1\\n3\\n4 5\\n5 4 3 1\\n\"\nassert solution(\"5 1 1 2 1 2\\n\") == \"NO\\n\"\nassert solution(\"5 4 3 2 1 0\\n\") == \"YES\\n1\\n3\\n4 5\\n5 4 3 1\\n\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 2 7 3 3 1 4') == 'YES'\nassert solution('5 3 1 5 3') == 'YES'\nassert solution('5 3 1 5 2') == 'NO'\n\nassert solution('5 3 1 5 2') == 'NO'\nassert solution('1 1 2 1 2') == 'NO'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input) == expected_output\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\nassert solution(\"5 4 3 2 1 0\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\nassert solution(\"5 0 4 3 2 1\") == \"NO\\n\"\nassert solution(\"0 4 3 2 1 5\") == \"YES\\n0\\n\"\nassert solution(\"4 3 2 1 0 5\") == \"YES\\n0\\n\"\n\nprint('Successfully tested.')"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"5 1 1 2 1 2\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\"\nassert solution(\"5 1 1 2 1 2\") == \"NO\"\nassert solution(\"0 1 2 3 4\") == \"YES\\n0\\n\"\nassert solution(\"0 1 2 3 4\") == \"YES\\n0\\n\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2 1 2\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\"\nassert solution(\"5 4 3 2 1\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\"\nassert solution(\"5 3 4 2 1\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\"\nassert solution(\"5 2 4 3 1\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\"\nassert solution(\"5 1 4 3 2\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 1 2 1\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\"\nassert solution(\"5 2 3 1 4\") == \"YES\\n1\\n3\\n4\\n5 4 2 3\"\nassert solution(\"5 1 4 3 2\") == \"YES\\n1\\n3\\n4\\n5 4 2 3\"\n\nassert solution(\"3 4 2 1\") == \"NO\"\nassert solution(\"3 4 2 1 4 3\") == \"NO\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'NO'\nassert solution('3 1 4 1 4 1') == 'NO'\nassert solution('2 3 4 3 2') == 'YES'\nassert solution('1 4 2 5 3') == 'YES'\nassert solution('4 3 2 1 0') == 'YES'\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == \"18\"\n\"\"\"\n\nfrom typing import List, Tuple\nfrom collections import Counter\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1\n\"\"\") == \"8\"\nassert solution(\"\"\"8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n\"\"\") == \"18\"\nassert solution(\"\"\"7 4\n5 1 0\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n\"\"\") == \"-1\"\nassert solution(\"\"\"5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n\"\"\") == \"8\"\nassert solution(\"\"\"5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n\"\"\") == \"8\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 0 1\\n3 0 1\\n\") == \"8\"\nassert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == \"18\"\nassert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == \"-1\"\nassert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == \"8\""
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == \"18\"\n\"\"\"\n\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0442\u0440\u0438 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430, \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0432 \u0442\u0440\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u043f\u043e\u0442\u043e\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043e\u0441\u0442\u0430\u0432\u0448\u0435\u0435\u0441\u044f \u0447\u0438\u0441\u043b\u043e.\n\n\u041d\u0430 \u0432\u0432\u043e\u0434 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u0434\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0447\u0438\u0441\u043b\u0430.\n\"\"\"\n\na, b, c = int(input()), int(input()), int(input())\nprint(max(a, b, c), min(a, b, c), a+b+c-max(a, b, c)-min(a, b, c), sep='\\n')"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == \"18\"\n\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 0 1\\n3 0 0\") == \"8\"\n\nassert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\\n\") == \"-1\"\n\nassert solution(\"5 3\\n4 0 0\\n1 0 1\\n2 1 1\\n5 0 1\\n3 0 1\\n\") == \"8\"\n\"\"\"\n\n\"\"\"\n1. alice will pick books with most positive rating.\n2. we pick books with the least total rating\n3. it is a binary search problem and we need to pick a right bound\n4. the problem has a solution if we have to pick a left bound\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == \"18\"\n\n\"\"\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n\"\"\") == \"18\"\nassert solution(\"\"\"5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1\n\"\"\") == \"8\"\nassert solution(\"\"\"5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n\"\"\") == \"-1\"\n\"\"\"\n\"\"\""
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0''') == \"18\"\n\nassert solution('''5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1\n''') == \"8\"\n\nassert solution('''5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n''') == \"-1\"\n\n'''\n8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n\n8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n\n5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1\n\n5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n'''\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n') == '18'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == \"18\"\n\"\"\"\n\nn, k = list(map(int, input().split()))\nbooks = [list(map(int, input().split())) for _ in range(n)]"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == '2'\nassert solution('''4 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == '6'\nassert solution('''4 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == '-1'\n\nassert solution('''4 2\n5 2\n8 3 9\n4 6\n4 3\n5 6\n1 4\n7 9\n2 4\n4 5\n5 9\n7 1\n4 5''') == '-1'\nassert solution('''4 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == '6'\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n\") == \"2\\n6\\n-1\\n7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\") == \"2\"\nassert solution(\"4 2\\n6 4 8 5\") == \"6\"\nassert solution(\"4 2\\n1 6\") == \"-1\"\nassert solution(\"4 2\\n3 5\") == \"7\"\n\n------\n\nimport sys\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == '2\\n6\\n-1\\n7'\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == '2\\n6\\n-1\\n7'\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == '2\\n6\\n-1\\n7'\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == '2\\n6\\n-1\\n7'\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100') == '100'\nassert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100') == '100'\nassert solution('') == ''\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5') == '2\\n6\\n-1\\n7'\n\"\"\"\n\nfrom typing import NamedTuple, List\n\nclass Data(NamedTuple):\n    q: int\n    n: int\n    k: int\n    a: List[int]"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1 2 3 1') == '2'\nassert solution('4 2') == '-1'\nassert solution('6 4 8 5') == '7'\nassert solution('2 2') == '-1'\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"1 1\\n1 1 1\\n1\\n1\\n1 1 1 1\") == \"1\\n1\\n1\\n1\\n-1\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"1 1\\n1 1 1\\n1\\n1\\n1 1 1 1\") == \"1\\n1\\n1\\n1\\n-1\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n1 1 2\\n3 2\") == \"2\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\n\"\"\"\n\na = [int(n) for n in stdin.split()]\ns = sum(a) % 6\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def minimum_remove(self, a: List[int]) -> int:\n        return 0\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '0'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n4 8 15 16 23''') == '5'\n\nassert solution('''12\n4 8 4 8 15 16 8 16 23 15 16 42 23 42''') == '0'\n\nassert solution('''15\n4 8 4 8 15 16 8 16 23 15 16 42 23 42\n''') == '3'\n\nprint('Hooray!')\n\nimport sys\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8 15 16 23') == 5\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == 0\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42 4 8 15 16 23 15 16 42 23 42') == 3\n\nprint(solution(input()))\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n\"\"\"\n\nimport sys\nfrom typing import List\n\nn = int(input())\nnums = list(map(int, input().split()))\n\nnum_1_divisor = 6\nnum_2_divisor = 12"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 5\") == \"0\"\nassert solution(\"13 42\") == \"3\"\nassert solution(\"18 4\") == \"2\"\nassert solution(\"1337 420\") == \"92\"\nassert solution(\"123456789 1000000000\") == \"87654322\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\"\nassert solution(\"13 37\\n18 4\") == \"3\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"92\"\n\n\"\"\"\nimport sys\nfrom itertools import permutations"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13 42') == '0'\nassert solution('1337 420') == '2'\nassert solution('123456789 1000000000') == '9'\nassert solution('100500 9000') == '87654322'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\"\nassert solution(\"1337 420\\n18 4\") == \"2\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"92\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 5\n13 42''') == '0\n3\n2\n92\n87654322\n9150''') == '0\\n3\\n2\\n92\\n87654322\\n9150'\n\"\"\""
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\") == 0\nassert solution(\"13 42\") == 3\nassert solution(\"18 4\") == 2\nassert solution(\"1337 420\") == 2\nassert solution(\"123456789 1000000000\") == 9\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\") == \"0\"\nassert solution(\"13 42\") == \"3\"\nassert solution(\"18 4\") == \"2\"\nassert solution(\"1337 420\") == \"92\"\nassert solution(\"123456789 1000000000\") == \"87654322\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\\n3\"\nassert solution(\"13 37\\n18 4\") == \"2\\n\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"92\\n87654322\\n9150\"\n\"\"\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n5 5\\n13 42\\n18 4\\n1337 420\\n123456789 1000000000\\n100500 9000') == '0\\n3\\n2\\n92\\n87654322\\n9150'"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5\\n13 42') == '0'\nassert solution('13 37\\n18 4') == '3'\nassert solution('123456789 1000000000\\n100500 9000') == '92'\nassert solution('123456789 1000000000') == '87654322'\nassert solution('123456789 1000000000') == '9150'\n\n\"\"\""
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''7\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999''') == '12339 0 15 54306 999999999 5 185 9999999998'\n\n\"\"\""
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 5 12345') == '12339'\nassert solution('5 0 4') == '0'\nassert solution('10 5 15') == '15'\nassert solution('17 8 54321') == '54306'\nassert solution('499999993 9 1000000000') == '999999995'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 12345\") == \"12339\"\n\nassert solution(\"5 0 4\") == \"0\"\n\nassert solution(\"10 5 15\") == \"15\"\n\nassert solution(\"17 8 54321\") == \"54306\"\n\nassert solution(\"499999993 9 1000000000\") == \"999999995\""
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n\n\"\"\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n-----\nHere is an important thing to note.\n\nThe program should make the same calculation as it was done in the test.\n\nThat is, we need to find the maximum integer $k$ such that $0 \\le k \\le n$ that $k \\bmod x = y$.\n\nIf it is not clear, we will try to show you what it is in the example.\n\nFor example, in the test case, the answer is $12339 = 7 \\cdot 1762 + 5$ (thus, $12339 \\bmod 7 = 5$).\n\nThe answer is equal to $7 \\cdot 1762 + 5$ (in the example test case, for $x = 7$, $y = 1762$ and $n = 5$) and is greater than $0 \\le 7 \\le 5$.\n\nFor this test case the answer is $12339$.\n\nThe following is the sequence of calculations which was performed in the program:\n\n$12339 % 7 = 5$\n$5 % 7 = 5$\n$5 % 5 = 0$\n$0 % 5 = 0$\n$0 \\le 7 \\le 5$\n\nTherefore, the answer is $12339$ because it is the largest integer not greater than $0$ and has the remainder $0$ modulo $7$.\n\n\"\"\"\n\nfrom typing import AnyStr\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5 12345\") == '12339'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == '6'\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == '8'\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == '4'\n\n---"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\n\nprint('The script is executed successfully!')"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\") == \"6\"\nassert solution(\"8 2\") == \"8\"\nassert solution(\"7 3\") == \"4\"\nassert solution(\"1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"1 2 2 3 2 4 6 10\") == \"8\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\n\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\n\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n\n'''\n\nimport unittest\nfrom typing import Dict, Set, List\n\nclass Solution:\n    def get_pairs(self, boxes: str) -> List[Dict[int, int]]:\n        '''\n        Creates list of pairs of candies, where each pair is represented by dictionary\n        in which the keys are the indices of boxes and values are the number of candies in each box.\n        '''\n        \n        pairs = []\n        for idx, candies in enumerate(boxes.split()):\n            candies = int(candies)\n            if (candies % k) == 0:\n                pairs.append({idx: candies // k})\n            else:\n                pairs.append({idx: candies // k + 1})\n        \n        return pairs\n\n    def count_boxes(self, pairs: List[Dict[int, int]]) -> int:\n        '''\n        Returns the number of boxes in which there are two candies in each pair.\n        '''\n        count = 0\n        for pair in pairs:\n            for key in pair:\n                if pair[key] == 1:\n                    count += 1\n                    break\n        return count\n\n    def count_pairs(self, pairs: List[Dict[int, int]]) -> int:\n        '''\n        Returns the number of pairs.\n        '''\n        return len(pairs)\n\n    def get_max_count(self, pairs: List[Dict[int, int]], boxes: str) -> int:\n        '''\n        Counts the number of boxes that can be used in gifts.\n        Returns the number of boxes.\n        '''\n        boxes = boxes.split()\n        for pair in pairs:\n            for key in pair:\n                boxes[key] = boxes[key] - pair[key]\n        \n        for box in boxes:\n            if box % k!= 0:\n                return -1\n        \n        return len(boxes)\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        solution = Solution()\n        self.assertEqual(solution.get_max_count(solution.get_pairs(\"7 2\\n1 2 2 3 2 4 10\"), \"1 2 2 3 2 4 10\"), \"6\")\n        self.assertEqual(solution.get_max_count(solution.get_pairs(\"8 2\\n1 2 2 3 2 4 6 10\"), \"1 2 2 3 2 4 6 10\"), \"8\")\n        self."
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\nassert solution('6 2\\n1 2 2 3 2 4 5') == '0'\nassert solution('2 2\\n1 2') == '0'\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n\"\"\""
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\n\"\"\""
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\n\"\"\"\n\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())\nd = list(map(int, sys.stdin.readline().split()))\n\nmin_d = min(d)\nmax_d = sum(d)//K\n\nans = -1\nfor i in range(min_d, max_d+1):\n    if sum(divmod(d[j], i) for j in range(N)) == K:\n        ans = i\nprint(ans)\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\u2018ABc\u2019) == \u2018abc\u2019\nassert solution(\u2018ABC\u2019) == \u2018abc\u2019\nassert solution(\u2018ABC\u2019) == \u2018abc\u2019\nassert solution(\u2018ABC\u2019) == \u2018abc\u2019\nassert solution(\u2018ABC\u2019) == \u2018abc\u2019\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC\") == \"abc\"\nprint(solution(\"ABC\"))\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABC') == 'aBC'\nassert solution('ABC') == 'abc'\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC\") == \"abC\"\nassert solution(\"abC\") == \"Abc\"\n\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC\") == \"abc\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC\", 1) == \"aBC\"\n\"\"\"\nimport math"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('ABCD') == 'abcd'\nassert solution('ABCDE') == 'abcde'\n\nprint(solution('ABC'))\nprint(solution('ABCD'))\nprint(solution('ABCDE'))\n\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('abc') == 'abc'\nassert solution('Abc') == 'Abc'\nassert solution('ABc') == 'Abc'\nassert solution('AaB') == 'Ab'\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABc') == 'abc'\nassert solution('A_B_c') == 'a_b_c'\n\"\"\""
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\"\"\"\n\nimport math\nimport re"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n1\\n5\\n2\"\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n1\\n5\\n2\"\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\nab\\ncd\") == \"1\"\nassert solution(\"3\\nab\\nab\\ncd\") == \"1\"\nassert solution(\"2\\nab\\nba\") == \"2\"\nassert solution(\"2\\nab\\nba\") == \"2\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\\n1\\n5\\n2\"\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\\n1\\n5\\n2\\n1\\n5\\n2\\n1\\n5\\n2\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\n') == '3\\n4\\n6\\n1\\n5\\n2\\n'\n\"\"\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\n------"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\"\"\"\n\nimport sys\n\nresult = []\n\nfor line in sys.stdin:\n    city = line.split(\" \")[0]\n    score = int(line.split(\" \")[1])\n    result.append([city, score])\n\nresult.sort(key=lambda x: (x[0], -x[1]))\n\nfor i in result:\n    print(i[0])\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\n-----\nWrite code to test the correctness of solution:\nTakahashi has K 500-yen coins. (Yen is the currency of Japan.) If these coins add up to X yen or more, print Yes; otherwise, print No.\n\n-----Constraints-----\n - 1 \\leq K \\leq 100\n - 1 \\leq X \\leq 10^5\n\n-----Input-----\nInput is given from Standard Input in the following format:\nK X\n\n-----Output-----\nIf the coins add up to X yen or more, print Yes; otherwise, print No.\n\n-----Sample Input-----\n2 900\n\n-----Sample Output-----\nYes\n\n-----\n\"\"\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"No\"\nassert solution(\"2 100\") == \"Yes\"\nassert solution(\"2 900\") == \"Yes\"\nassert solution(\"2 1000\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"\nK, X = map(int, input().split())\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"No\"\nassert solution(\"2 100\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 500\") == \"Yes\"\nassert solution(\"2 600\") == \"No\"\nassert solution(\"0 1000\") == \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 900') == 'Yes'\nassert solution('2 1000') == 'No'\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 900') == 'Yes'\nassert solution('2 901') == 'No'\nassert solution('2 902') == 'No'\n\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    line = line.split()\n    k = int(line[0])\n    x = int(line[1])\n    print('Yes' if k * 500 >= x else 'No')\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3, 10) == '0.145833333333'\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\""
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 10') == '0.145833333333'\n\"\"\"\n\nfrom collections import Counter\nfrom functools import reduce"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 10''') == '0.145833333333'\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 10''') == '0.145833333333'\n'''\nYou can assume that N and K are valid non-negative integers, K \u2264 10^5.\n\nSnuke has a fair N-sided die that shows the integers from 1 to N with equal probability and a fair coin. He will play the following game with them:\n - Throw the die. The current score is the result of the die.\n - As long as the score is between 1 and K-1 (inclusive), keep flipping the coin. The score is doubled each time the coin lands heads up, and the score becomes 0 if the coin lands tails up.\n - The game ends when the score becomes 0 or becomes K or above. Snuke wins if the score is K or above, and loses if the score is 0.\nYou are given N and K. Find the probability that Snuke wins the game.\n\n-----Constraints-----\n - 1 \u2264 N \u2264 10^5\n - 1 \u2264 K \u2264 10^5\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\n\n-----Output-----\nPrint the probability that Snuke wins the game. The output is considered correct when the absolute or relative error is at most 10^{-9}.\n\n-----Sample Input-----\n3 10\n\n-----Sample Output-----\n0.145833333333\n'''\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10\") == '0.145833333333'\n\"\"\""
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\") == '0.145833333333'\nprint('OK!')\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\n\"\"\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('SAT') == 1\n\"\"\"\nimport sys\nimport re\nfrom datetime import date\nfrom typing import Iterable, List\n\nSUNDAY = 0\nMONDAY = 1\nTUESDAY = 2\nWEDNESDAY = 3\nTHURSDAY = 4\nFRIDAY = 5\nSATURDAY = 6\n\nWEEKDAYS = (\n    (SUNDAY, \"SUNDAY\"),\n    (MONDAY, \"MONDAY\"),\n    (TUESDAY, \"TUESDAY\"),\n    (WEDNESDAY, \"WEDNESDAY\"),\n    (THURSDAY, \"THURSDAY\"),\n    (FRIDAY, \"FRIDAY\"),\n    (SATURDAY, \"SATURDAY\"),\n)\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('SAT') == 1\nassert solution('SUN') == 0\nassert solution('MON') == 0\nassert solution('TUE') == 0\nassert solution('WED') == 0\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"SAT\") == \"1\"\nassert solution(\"SUN\") == \"0\""
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(SUN) == '1'\nassert solution(THU) == '2'\n\"\"\""
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"SAT\") == 1\n\"\"\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('SUN') == 0\nassert solution('MON') == 1\nassert solution('TUE') == 2\nassert solution('WED') == 3\nassert solution('THU') == 4\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"SAT\") == 1\n\"\"\"\n\nS = stdin.strip()\n\nd = {'SUN': 0, 'MON': 1, 'TUE': 2, 'WED': 3, 'THU': 4, 'FRI': 5, 'SAT': 6}\n\nprint(d[S] + 1)\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('SAT') == 1\nassert solution('SUN') == 0\nassert solution('MON') == 0\nassert solution('THU') == 0\nassert solution('TUE') == 1\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('SAT') == 1\n\n\"\"\""
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"SAT\") == 1\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 10 20\\n') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\nprint('OK')\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\nprint(solution(\"2 10 20\"))\n\n\"\"\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n\nprint(solution('2 10 20'))"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 10 20\\n') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n\nsolution(input())\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10 20\") == \"30\"\nassert solution(\"2 10 20\") == \"30\"\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\"\n\nr, D, x_2000 = stdin.split()\nx_2000 = int(x_2000)\n\nx = r * x_2000 - D\n\nfor i in range(1, 11):\n    print(x)\n    x = r * x - D\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 10 20\\n\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\""
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\n\n\"\"\"\n\nfrom typing import List, Optional\n\n\nclass SplitArray:\n    def split_array(self, d: List[int]) -> int:\n        n = len(d)\n        total = sum(d)\n        dp = [[0] * (total + 1) for _ in range(n + 1)]\n\n        for i in range(1, n + 1):\n            for j in range(1, total + 1):\n                if j >= d[i - 1]:\n                    dp[i][j] = max(dp[i - 1][j - d[i - 1]] + d[i - 1], dp[i - 1][j])\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return total - dp[-1][-1]\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3 1 1 4') == 5\nassert solution('1 3 2 1 4') == 4\nassert solution('1 3 2') == 0\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2\") == \"0\"\nassert solution(\"1 3 1 1 4\") == \"5\"\nassert solution(\"1 3 2 1 4\") == \"4\"\nassert solution(\"1 3 2 3 4\") == \"8\"\nassert solution(\"1 3 2 3 3 4\") == \"13\"\n\"\"\"\nimport heapq\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 2') == '0'\nassert solution('4 3 2') == '4'\nassert solution('5 1 3 1 1 4') == '5'\nassert solution('5 1 3 2 1 4') == '4'\nassert solution('3 4 1 2') == '0'"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\n\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"5\\n1 3 2 2 4\") == \"0\"\nassert solution(\"3\\n4 1 2\") == \"0\""
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 1\") == \"YES\"\nassert solution(\"8 6 3\") == \"NO\"\nassert solution(\"4 2 4\") == \"YES\"\nassert solution(\"100 100 100\") == \"NO\"\nassert solution(\"50 49 49\") == \"NO\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 3\") == \"YES\"\nassert solution(\"3 2 1\") == \"YES\"\nassert solution(\"100 100 100\") == \"NO\"\nassert solution(\"50 49 49\") == \"NO\"\nassert solution(\"10 30 20\") == \"YES\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\"\"\"\n\n\nfrom collections import Counter\nimport sys"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 3\") == \"YES\\n3 2 1\"\nassert solution(\"100 100 100\") == \"YES\\n100 100 100\"\nassert solution(\"50 49 49\") == \"YES\\n50 49 49\"\nassert solution(\"10 30 20\") == \"NO\"\nassert solution(\"1 1000000000 1000000000\") == \"YES\\n1 1000000000 1000000000\"\n\"\"\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 3\") == \"NO\"\nassert solution(\"3 2 3\") == \"YES\"\nassert solution(\"100 100 100\") == \"NO\"\nassert solution(\"50 49 49\") == \"YES\"\nassert solution(\"10 30 20\") == \"YES\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\""
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\nassert solution(\"1 1 1\\n100 100 100\") == \"YES\\n1 1 1\"\nassert solution(\"100 100 100\\n1 1 1\") == \"YES\\n1 1 1\"\nassert solution(\"1 1000000000 1000000000\") == \"NO\"\nassert solution(\"10 30 20\\n1 1 1000000000\") == \"YES\\n1 1 1000000000\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n\"\"\") == \"\"\"YES\n3 2 1\nYES\n100 100 100\nNO\nNO\nYES\n1 1 1000000000\"\"\"\n\n\"\"\"\nSolution:\n\n\"\"\"\n\ntest_cases = int(stdin.readline().strip())\nfor t in range(0, test_cases):\n    inputs = stdin.readline().strip().split()\n    inputs = [int(x) for x in inputs]\n    for x in inputs:\n        if x <= 0:\n            print(\"NO\")\n            break\n    if len(inputs) == 3:\n        a, b, c = inputs\n        if b < c:\n            a, b, c = c, a, b\n        if a < b:\n            a, b, c = b, a, c\n        print(\"YES\")\n        print(a, b, c)\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == 'NO'\nassert solution('1 2 3 4') == 'YES'\nassert solution('1 2 3') == 'NO'\nassert solution('1 2 3 4') == 'YES'\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\\n\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\\n\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\\n\") == \"5\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\\n\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\\n\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\\n\") == \"5\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == '4'\nassert solution(\"5 1 4\\n4 2 3 4 1\") == '1'\nassert solution(\"5 3 3\\n1 2 3 1 1\") == '5'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\n\"\"\"\n\nimport sys\n\nn, m, k = map(int, sys.stdin.readline().split())\nobjects = [0] + list(map(int, sys.stdin.readline().split()))\n\ndistribution = [0] * (m + 1)\nfor i in range(1, n + 1):\n    distribution[objects[i]] += 1\n\nresult = 0\ni = 1\nwhile i <= m:\n    if distribution[i]!= 0:\n        result += distribution[i] // k\n        distribution[i] %= k\n    i += 1\n\nprint(result)\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == '4'\n\"\"\""
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == '4'\nassert solution(\"5 1 4\\n4 2 3 4 1\") == '1'\nassert solution(\"5 3 3\\n1 2 3 1 1\") == '5'\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 21\nassert solution(\"sadfaasdda\") == 0\n\"\"\""
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == 12\n\n\"\"\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"sadfaasdda\") == 21\nassert solution(\"aaaaaaa\") == 0\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n\n\"\"\""
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abacaba') == 12\nassert solution('aaaaaaa') == 0\n\"\"\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\nassert solution(\"f a d\") == 0\n\n\n\"\"\""
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abacaba') == 12\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcde\") == \"abcd\"\nassert solution(\"abcdef\") == \"abcdef\"\nassert solution(\"aabbccdefghi\") == \"abcdefghi\"\nassert solution(\"abcabcabcabc\") == \"abcabcabc\"\nassert solution(\"abcdeabcdef\") == \"abcdef\"\n\n\"\"\"\n\nfrom itertools import product\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abacaba') == 12\nassert solution('aaaaaaa') == 0\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nn, k = [int(x) for x in stdin.readline().strip().split()]\ns = stdin.readline().strip()\n\nk_set = {x for x in stdin.readline().strip().split()}\n\nres = 0\nfor i in range(n):\n    for j in range(i + 1, n + 1):\n        if len(s[i:j]) > k:\n            continue\n        if len(s[i:j]) == 0:\n            continue\n        if set(s[i:j]) <= k_set:\n            res += 1\n\nprint(res)"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == 12\n\nassert solution(\"aaaaaaa\") == 0\n\nassert solution(\"sadfaasdda\") == 21\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == \"2\\n-1\"\nassert solution(\"4\\n4\\n-1 -2 -1 -3\") == \"-1\"\nassert solution(\"4\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"6\\n-2999999997\""
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == \"2\"\nassert solution(\"4\\n4\\n-1 -2 -1 -3\") == \"-1\"\nassert solution(\"10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"6\"\nassert solution(\"6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"-2999999997\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == '2\\n-1\\n6\\n-2999999997'\nprint(solution(stdin))"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"5\\n4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"5\\n4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"5\\n4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"5\\n4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\\n-2999999997\"\n\n\"\"\"\n\nfrom typing import List\nimport sys\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == \"2\"\nassert solution(\"4\\n4\\n-1 -2 -1 -3\") == \"0\"\nassert solution(\"10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"6\""
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"1\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"2\\n4\\n-1 -2 -1 -3\\n10\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == '2\\n-1\\n6\\n-2999999997'"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"5\\n4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"5\\n4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"5\\n4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n\n\"\"\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n2 4\") == \"3 2\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"3 5\"\nassert solution(\"6 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n4 5\\n5 6\") == \"3 1\\n2 5\"\nassert solution(\"7 7\\n1 2\\n2 3\\n2 4\\n3 4\\n4 5\\n5 6\\n6 7\") == \"3 1\\n2 6\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin_str) == expected_str\nprint(solution(stdin_str))\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n\") == \"3 5\\n2 1\\n3 2\\n3 4\"\n\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"4 1\\n1 2\\n1 3\\n\"\n\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"5 5\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\nassert solution(\"5 5\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\nassert solution(\"1 2\\n1 3\") == \"1 3\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"4 1\\n1 2\\n1 3\\n\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n\"\"\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\n\"\"\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('2 1\\n1 2') == '2 1\\n1 2'\nassert solution('3 2\\n2 3\\n1 3') == '3 2\\n2 1\\n3 2'\n\nassert solution('5 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4') == '4 1\\n1 2\\n1 3\\n2 3\\n3 4'\nassert solution('5 6\\n1 2\\n2 3\\n3 4\\n4 5') == '4 1\\n1 2\\n2 3\\n3 4'"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\""
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n5\\n') == '4'\nassert solution('3\\n5\\n7\\n') == '10'\nassert solution('4\\n7\\n4\\n1\\n') == '20'\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\") == \"1\"\nassert solution(\"1\\n3\") == \"2\"\nassert solution(\"1\\n4\") == \"3\"\nassert solution(\"1\\n5\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"499993\") == \"40\"\n\"\"\"\n\n\"\"\"\n\u0415\u0441\u043b\u0438 \u0434\u0435\u043b\u0430\u0435\u043c \u0432\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c \u043e\u0442\u0432\u0435\u0442\u043e\u043c, \u043e\u0442\u0432\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439:\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0441\u0435\u0442\u043a\u0438.\n\u0414\u0430\u043b\u0435\u0435 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u043e\u043a \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043e\u0434\u0438\u043d \u0441\u0438\u043c\u0432\u043e\u043b \u043d\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0438:\n3\n4\n3\n4\n5\n1\n2\n3\n\"\"\"\nimport sys\n\nlines = sys.stdin.readlines()\n\nfor line in lines[1:]:\n    sys.stdout.write(line.rstrip())\n    print(int(line) - 1)\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n1\n5\n499993''') == '0\\n40\\n41664916690999888'\n\nassert solution('''4\n2\n100\n100010\n''') == '14\\n164986\\n'\nassert solution('''1\n100\n500\n''') == '0\\n500'\nassert solution('''4\n1000\n1000\n1000\n1000\n''') == '0\\n500\\n'''\n\n'''\n-----Problem-----\n\nWe consider the game of Go. A board of $n \\times n$ is given as a sequence of $n^2$ strings, where the $i^{th}$ string consists of $n^2$ characters, where \"B\" means a black stone and \"W\" means a white stone.\n\nIt is allowed that a black stone is put on an empty cell or a white stone is put on a black one. Black stones are always placed first. There can be more than one black stone on a cell. It is also allowed that the white stones are not all placed at the beginning of the sequence.\n\nBlack stones are always placed first. It is also allowed that white stones are not all placed at the beginning of the sequence.\n\nIt is allowed to skip cells and to repeat cells.\n\nWe define the value of a player as the sum of the values of all its stones. If the value of a player is $0$, then it is considered to be out of the game. It is also allowed to skip the game step and to repeat cells in the same way as if there was only one player.\n\nOur task is to find the largest value of the player.\n\nYou are given $n^2$ cells.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Solution-----\n\nDP: https://www.youtube.com/watch?v=XVu9_r0_f1U\n\nimport copy\nimport numpy as np\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n3\") == \"1\"\nassert solution(\"2\\n1\") == \"0\"\nassert solution(\"2\\n5\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_0) == test_0_result\nassert solution(test_1) == test_1_result\nassert solution(test_2) == test_2_result\nassert solution(test_3) == test_3_result\nassert solution(test_4) == test_4_result"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3\") == \"1\"\nassert solution(\"3\\n2\") == \"1\"\nassert solution(\"1\\n2\") == \"0\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"499993\") == \"41664916690999888\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('5') == '40'\nassert solution('499993') == '41664916690999888'\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n\"\"\") == \"0\"\nassert solution(\"\"\"\n499993\n\"\"\") == \"40\"\nassert solution(\"\"\"\n5\n\"\"\") == \"41664916690999888\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(a) == d\n\na, d = [int(c) for c in stdin.split('\\n')]\n\n------Comments-------\n\nThe problem is related to the number of connected components of an undirected graph. I've decided to give a simple answer.\n\nFor each element $a_i$ in the array a, I want to know the minimum number of moves required to reach any position $j$ such that $a_j$ has the opposite parity from $a_i$ (i.e. if $a_i$ is odd then $a_j$ has to be even and vice versa).\n\nTherefore, I'll maintain a map $m$ that for each element $a_i$ will contain the minimum number of moves required to reach the position $j$ such that $a_j$ has the opposite parity from $a_i$.\n\nI'll start iterating from the position $1$ to $n$:\n\n1. If the position $i$ is already in $m$, then there is no need to compute further.\n2. If the position $i$ is not in $m$, then it's time to compute.\n    a. I'll compute the minimum number of moves required to reach the position $j$ such that $a_j$ has the opposite parity from $a_i$.\n    b. I'll keep the minimum number of moves required to reach the position $j$ in $m$ in order to speedup the future computation.\n\nThe result I'll print is the minimum number of moves required to reach any position with the opposite parity from any position.\n\nIf for each position $i$ the answer is $-1$, then it means that it is impossible to reach such a position.\n\nThe complexity is $\\mathcal{O}(n)$ where $n$ is the number of elements in the array $a$.\n\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n4 5 7 6 7 5 4 4 6 4\") == '1 1 1 2 -1 1 1 3 1 1'\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\n'''"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\nassert solution('8 3 7 5 5 7 3 1') == '3 2 1 3 2 -1 1 1 3'\nassert solution('8 3 7 5 5 7 3 1') == '3 2 1 3 2 -1 1 1 3'\nassert solution('8 3 7 5 5 7 3 1') == '3 2 1 3 2 -1 1 1 3'\nassert solution('4 4 4 2 2') == '1 1 2 2 -1 1 2'\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10\\n4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('64 32 97 2 12345') == 'YES 2 4 8'\nassert solution('23 18 32 2 45') == 'NO'\nassert solution('2 6 4 8') == 'YES 2 4 8'\nassert solution('2 4 8') == 'YES 2 4 8'\nassert solution('2 8') == 'YES 2 4 8'\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(12345) == \"YES 2 4 8\"\n\"\"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n64\n32\n97\n2\n12345''') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"64 32 97 2 12345\") == \"YES 2 4 8\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == 'YES'\nassert solution('2') == 'YES'\nassert solution('3') == 'YES'\nassert solution('4') == 'YES'\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(12345) == \"YES\"\nassert solution(64) == \"2 4 8\"\nassert solution(97) == \"3 5 823\"\n\n------\n\nimport sys\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\\n\") == \"YES\\n2 4 8\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"YES\"\nassert solution(\"2\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\") == \"NO\"\nassert solution(\"2\\n4\\n8\\n16\\n32\\n64\\n128\\n256\\n512\\n1024\") == \"YES\"\nassert solution(\"2\\n4\\n8\\n16\\n32\\n64\\n128\\n256\\n512\\n1024\") == \"YES\"\nassert solution(\"2\\n4\\n8\\n16\\n32\\n64\\n128\\n256\\n512\\n1024\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"a\") == 1\nassert solution(\"aa\") == 1\nassert solution(\"aba\") == 2\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abbbaa\") == 2\nassert solution(\"bbbb\") == 2\nassert solution(\"abaabbb\") == 0\nassert solution(\"bbbbabb\") == 0\nassert solution(\"bbbbba\") == 2\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abba') == 2\nassert solution('ababab') == 0\nassert solution('aa') == 1\nassert solution('baa') == 1\n\"\"\"\n\nn = int(input())\n\ns = input()\n\ncount_a = 0\ncount_b = 0\nfor i in s:\n    if i == 'a':\n        count_a += 1\n    else:\n        count_b += 1\n    \n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('bbbb') == 2\nassert solution('aba') == 1\n\n\"\"\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aaaa\") == 0\nassert solution(\"baabaa\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"ba\") == 0\nprint(\"Passed all tests\")\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\n\"\"\"\n\nn = int(stdin.readline())\ns = stdin.readline().strip()"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"bbbb\") == 2\nassert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"aba\") == 1\n\"\"\""
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abba') == '2'\nassert solution('ababab') == '0'\nassert solution('aa') == '1'\nassert solution('bb') == '2'\nassert solution('ababb') == '2'\n\"\"\""
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n0 0 1 1 0 1\\n0 1 0 1 1 0 1\\n0 1 0 1 1 0 1\\n0 0 1 1 1 0 1\\n0 0 0 1 1 0 1\\n0 1 1 1 1 1 1\") == \"11\"\nassert solution(\"5\\n1 1\\n0 0\\n2 0\\n2 0\\n2 2\\n2 2\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n\n\"\"\"\n\n\nfrom collections import defaultdict\nimport bisect"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 2\\n1 4\\n2 3\") == \"15\\n\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\") == \"9\\n\"\n\nsolution(\"4\\n2 2\\n1 4\\n2 3\") == \"15\\n\"\nsolution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\") == \"9\\n\""
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n') == '15'\nassert solution('5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n') == '9'\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n') == '15'\nassert solution('5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n') == '9'"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2') == '15'\nassert solution('5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n') == '9'"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == '15'\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == '9'\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"8\n2 2\n1 4\n2 3\n3 1\n3 4\n1 1\n4 3\n1 2\"\"\") == \"15\"\nassert solution(\"\"\"5\n2 1\n1 0\n2 0\n3 2\n0 3\"\"\") == \"9\"\nassert solution(\"\"\"2\n2 1\n1 0\n2 0\n3 2\n0 3\"\"\") == \"9\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1') == '2'\nassert solution('1 3') == '2'\nassert solution('3 3') == '1'\nassert solution('2 2') == '1'\nassert solution('1 1') == '1'"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\") == \"2\"\n\"\"\"\n\nA, B = (int(x) for x in stdin.split())\n\nprint(2 if A == B else (1 if A < B else 3))\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1\\n') == '2'\nassert solution('3\\n2\\n') == '1'\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1') == '2'\n\"\"\"\n\nA = int(input())\nB = int(input())"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\") == \"2\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '2'\nassert solution('1\\n2\\n3\\n2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1') == '2'\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1') == '2'\nassert solution('2 1') == '2'\nassert solution('3 1 1') == '1'\nassert solution('1 3 1') == '2'\nassert solution('1 2 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1') == '2'\n\"\"\"\n\na, b = input().split(' ')"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\n\"\"\""
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == 1.000000000000"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n''') == '1.000000000000'\n\n\"\"\"\nL = 3\n1"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3) == \"1.000000000000\"\n\"\"\""
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1\\n1\\n1') == '1.000000000000'\nprint(solution(stdin))\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.00000000\") == \"1.00000000\"\nassert solution(\"2.1\") == \"2.1\"\nassert solution(\"3\") == \"3.00000000\"\nassert solution(\"0.3\") == \"0.3\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1\\n1\\n1\\n') == '1.000000000000'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '1.000000000000'\nprint(solution('3'))\n\n\"\"\"\n\n\"\"\"\nEXAMPLE\n\nA cube of side length 3 has an area of 6.\nA cube of side length 4 has an area of 12.\nSo, a cube of side length 3 is at maximum volume.\n\n\"\"\"\n\nL = int(input())\n\nprint(3**3)\n\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n') == 'Hello World\\n'\nassert solution('2\\n1\\n1\\n1\\n') == '3\\n'\nassert solution('2\\n3\\n3\\n3\\n') == '6\\n'\nassert solution('2\\n0\\n1\\n1\\n') == '2\\n'\nassert solution('2\\n1\\n9\\n3\\n') == '9\\n'\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == '3'\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1) == \"Hello World\"\nassert solution(2) == \"3\"\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == '4'\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\n\"\"\"\nimport sys\n\nN = sys.stdin.readline().strip()\nprint(int(N) + sum(map(int, sys.stdin.readline().strip().split(\" \"))))\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\nassert solution(\"2\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 'Hello World'\n\nassert solution('2') == '3'"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3') == '3333'\n\nassert solution('5 6') == '556'\n\nassert solution('9 7') == '999'\n\nprint('Success')\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"3333\"\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"3333\"\nassert solution(\"1 1\") == \"11\"\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3') == '3333'\n\"\"\"\n\na, b = map(int, input().split())\nstring1 = str(a) * b\nstring2 = str(b) * a"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"3333\"\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3') == '3333'\nassert solution('1 1') == '11'\nassert solution('4 4') == '4444'\n\"\"\"\n\n\"\"\"\nThe problem is to return the lexicographically smallest string formed by concatenating these strings. \nThe first input line has a single integer a denoting the number of digits in the first string. \nThe second line has a single integer b denoting the number of digits in the second string. \nIn the third line, the strings a and b are given, each separated by a single space. \nThe strings a and b consist of digits from 1 to 9. \nYour program should output the lexicographically smallest string formed by concatenating these strings. \nIf the strings are equal, print one of them.\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3') == '3333'\n\"\"\"\n\na, b = map(int, input().split())\nc = int(''.join(['0' if i == '0' else '9' if i == '9' else '8' if i == '8' else '7' for i in str(a) + str(b)]))\nd = int(''.join(['0' if i == '0' else '9' if i == '9' else '8' if i == '8' else '7' for i in str(b) + str(a)]))\nprint(str(c) if c < d else str(d))\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == '3333'\n\"\"\"\n\na, b = stdin.split(' ')\n\na = int(a)\nb = int(b)\n\na = str(a)\nb = str(b)"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3') == '3333'"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"3333\"\n\n-------\n\nGiven are 1-digit positive integers a and b. Consider these two strings: the concatenation of b copies of the digit a, and the concatenation of a copies of the digit b. Which of these is lexicographically smaller?\n\n-----Constraints-----\n - 1 \\leq a \\leq 9\n - 1 \\leq b \\leq 9\n - a and b are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\na b\n\n-----Output-----\nPrint the lexicographically smaller of the two strings. (If the two strings are equal, print one of them.)\n\n-----Sample Input-----\n4 3\n\n-----Sample Output-----\n3333\n\nWe have two strings 444 and 3333. Between them, 3333 is the lexicographically smaller.\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a') == 'b'\nassert solution('x') == 'y'\nassert solution('z') == 'a'\nassert solution('c') == 'd'\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a') == 'b'\n\n-----Sample Input-----\nm\n\n-----Sample Output-----\nn\n\nm is followed by n.\n\n------\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a\") == \"b\"\n\n--------"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution( \"a\" ) == \"b\"\nassert solution( \"c\" ) == \"d\"\nassert solution( \"z\" ) == \" \"\nassert solution( \"a\" ) == \"b\"\nassert solution( \"b\" ) == \"c\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"b\") == \"c\"\nassert solution(\"c\") == \"d\"\nassert solution(\"d\") == \"e\"\nassert solution(\"e\") == \"f\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"c\") == \"d\"\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin), end='')\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a\") == \"b\"\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a') == 'b'\n\nfrom collections import deque"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a\") == \"b\"\nprint(\"test passed\")\n\n-----Test Input-----\nh\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\"\"\"\n\nimport sys\n\nS = sys.stdin.readline().strip()\nT = sys.stdin.readline().strip()\n\nprint(T + S)\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('oder atc') == 'atcoder'\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"order atc\") == \"atcoder\"\n'''\n\nimport os\nimport sys\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('oder atc') == 'atcoder'\n\"\"\"\n\nS, T = stdin().split()\n\nprint(T + S)\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\"\"\"\n\nS = input()\nT = input()\nprint(S + T)\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('order') == 'atcoder'\n\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"oder atc\") == \"atcoder\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('oder atc') == 'atcoder'\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"order\", \"atc\") == \"atcorder\"\nassert solution(\"acd\", \"abcd\") == \"abcdacd\"\nassert solution(\"aaa\", \"aaa\") == \"aaaa\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('oder atc') == 'atcoder'\n\"\"\""
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 2\\n3 4 5') == '3'\nassert solution('1 1 2\\n3 4 6') == '1'\nassert solution('1 1 1\\n2 3 4') == '0'\nassert solution('1 2\\n1 2') == '1'\nassert solution('1 2\\n3 4') == '1'\n\"\"\"\n\nn = int(input())\narr = [int(x) for x in input().split()]"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == \"0\"\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nodd = []\neven = []\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        even.append(a[i])\n    else:\n        odd.append(a[i])\n\ns_odd = sum(odd)\ns_even = sum(even)\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == \"0\"\nassert solution(\"6\\n5 1 2 4 6 3\") == \"0\"\nassert solution(\"2\\n1000000 1000000\") == \"1000000\"\nassert solution(\"3\\n1 2 3\") == \"0\"\nassert solution(\"4\\n1 2 3 5\") == \"0\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1 2 4 6 3') == 0\nassert solution('5 1 2 3') == 1\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split()))\n\nprev = a[0]\ns = 0\nfor el in a[1:]:\n    if el % 2!= prev % 2:\n        s += el\n    prev = el\nprint(s)\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == test_output_1\nprint(solution(input()))\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 2 4 6 3\") == \"0\"\nassert solution(\"5 1 2 8 2\") == \"3\"\nassert solution(\"6 5 4 3 2 1\") == \"0\"\nassert solution(\"6 5 4 2 1\") == \"1\"\nassert solution(\"6 5 4 3 2\") == \"0\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\narray = list(map(int, sys.stdin.readline().rstrip().split()))\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1 2 4 6 3') == '0'\nassert solution('5 1 2 4 6') == '0'\nassert solution('1 1000000000 1000000000') == '1'\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2 4 6 3\") == 0\n\nassert solution(\"6 5 1 2 4 6 3\") == 1"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == 0\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 2 4 6 3\") == 0\nassert solution(\"6 5 4 3 2 1\") == 0\nassert solution(\"1 0 2 0 4 6\") == 0\nassert solution(\"1 1 1 1 1 1\") == 0\nassert solution(\"1 1 2 3 4 5\") == 4\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_1) == solution(test_2) == solution(test_3) == answer_1\nassert solution(test_4) == answer_2\nassert solution(test_5) == answer_3\nassert solution(test_6) == answer_4\nassert solution(test_7) == answer_5\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\\n\") == \"5\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3 3\\n1 3 5 4 2 7 6\") == \"5\"\nassert solution(\"6 2 3 3\\n7 10 50 12 1 8\") == \"5\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str([6, 2, 3, 3])) == 5\n\n\"\"\"\n\nfrom typing import List\nimport math"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 4 2 1\\n1 3 5 4 2 7 6') == '6'\n\"\"\"\n\nn, a, b, k = map(int, input().split())\n\nH = [int(x) for x in input().split()]\n\nprint(sum(H) - max(H)*(n - k))"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3 3\\n7 10 50 12 1 8\") == \"5\"\nassert solution(\"1 1 100 99\\n100\") == \"1\"\nassert solution(\"7 4 2 1\\n1 3 5 4 2 7 6\") == \"6\"\n\n\"\"\""
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 2 3 3\\n7 10 50 12 1 8') == '5'\nassert solution('1 1 100 99\\n100') == '1'\n\"\"\"\n\nimport sys\n\nn, a, b, k = map(int, sys.stdin.readline().split())\nhealths = list(map(int, sys.stdin.readline().split()))\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\\n\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 2 1\\n1 3 5 4 2 7 6\") == '6'\n\"\"\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n3 1 1 3\n''') == '3'\nassert solution('''\n6 2 3 3\n7 10 50 12 1 8\n''') == '5'\nassert solution('''\n3 3 3 3\n7 10 50 12 1 8\n''') == '5'\n\nprint(\"All test cases passed.\")\n\n-----\n3 3 3 3\n7 10 50 12 1 8\n\n7 4 2 1\n1 3 5 4 2 7 6\n\n5\n\"\"\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\"\nassert solution(\"4 2\\n0 1 2 3\") == \"0\"\nprint(solution(input()))\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\\n0 1 2 3\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n0 1 2 3') == '0'\nassert solution('4 2\\n1 2 3 4') == '0'\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\\n0 1 2 3\"\n\nassert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\\n3 2 0 7 10 14\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\\n0 1 2 3\"\nassert solution(\"5 3\\n0 1 2 3 4\") == \"0\\n1 1\\n0 2\\n0 3\\n1 2\\n1 3\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 2 3 4\\n') == '0 1 2 4\\n0 1 2 3\\n'\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\\n0 1 2 3\"\nassert solution(\"5 2\\n0 1 2 3 4\") == \"0\\n0 1 2 3 4\"\nassert solution(\"6 2\\n0 1 2 3 4 5\") == \"0\\n0 1 2 3 4 5\"\nassert solution(\"7 2\\n0 1 2 3 4 5 6\") == \"0\\n0 1 2 3 4 5 6\"\nassert solution(\"8 2\\n0 1 2 3 4 5 6 7\") == \"0\\n0 1 2 3 4 5 6 7\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\\n0 1 2 3\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\\n3 2 0 7 10 14\"\nassert solution(\"4 2\\n0 1 2 3\") == \"0\\n0 1 2 3\"\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\"\nassert solution(\"4 2\\n0 1 2 3\") == \"0\"\n\"\"\"\n\nfrom collections import Counter\nfrom functools import reduce\nfrom operator import mul\nfrom typing import List\nfrom unittest import main, TestCase"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3''') == '8'\nassert solution('''5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n''') == '20'\n'''\n\n'''\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\n3 4\\n3 2\\n3 4\\n2 2\\n1 5\\n2 5') == '8'\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == \"8\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3''') == '8'\nprint(solution(stdin))\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1 3 2\") == \"20\"\nassert solution(\"5 6\") == \"8\"\nassert solution(\"5 3\") == \"20\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 1 3 2\\n3 5\\n4 2\\n2 5') == 20\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5') == '20'\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\n\"\"\"\n\nn, m = map(int, input().split())\n\nk = list(map(int, input().split()))\n\nt = [list(map(int, input().split())) for _ in range(m)]"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\n\"\"\""
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1\\n1 1\\n1 2\\n1 3\\n1 4\") == \"YES\"\nassert solution(\"4\\n2\\n1 1\\n1 2\\n1 3\\n1 4\") == \"NO\"\n\"\"\"\n\nfrom itertools import combinations, permutations"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1\\n1 1 2\\n2\\n1 1 1 1') == 'NO'\nassert solution('5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5') == 'YES'\nassert solution('5\\n1\\n1 1 10 10\\n2\\n10 5 1 10 5 1 1 1') == 'NO'\nassert solution('5\\n1\\n1 1 10 10\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1') == 'YES'\nassert solution('5\\n1\\n1 1 10 10\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n2\\n1 1 1 1 1 1 1 1') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n1 1 10 10\") == \"YES\"\nassert solution(\"2\\n10 5 2 10 1 1 2 5\") == \"NO\"\nassert solution(\"3\\n10 5 1 10 5 1 1 1\") == \"YES\"\nassert solution(\"4\\n1 1 1 1 1 1 1 1\") == \"YES\"\nassert solution(\"5\\n10000 10000 10000 10000\") == \"NO\"\nprint(\"Passed all tests...\")\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2 3 4\") == \"YES\"\nassert solution(\"4 1 1 3 4\") == \"YES\"\nassert solution(\"4 1 1 1 2 2\") == \"NO\"\nassert solution(\"4 1 1 1 2 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\n\nprint(solution(input()))\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\nassert solution(\"4\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n1\\n10000 10000 10000 10000\") == \"NO\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n'''"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\") == \"YES\"\nassert solution(\"2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\"\nassert solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\") == \"NO\"\nassert solution(\"4\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"NO\"\nassert solution(\"4\\n10000 10000 10000 10000\\n1\\n1 1 1 1 1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 1\\n2 1 3\\n1 2 2\\n1 3 1\\n2 3 2\") == \"3\"\nassert solution(\"4 4 2\\n3 1 2\\n1 3 2\\n3 2 2\\n1 1 1\") == \"6\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 2\\n1 3 1\\n2 3 1\") == 2\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 2\") == \"0\"\n\n\"\"\"\n\nfrom sys import stdin\nfrom heapq import heappush, heappop\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 10 3\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n') == '3'\nassert solution('6 10 3\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n') == '9'\n\"\"\"\n\nfrom math import log"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 10\\n1 2 1\\n2 3 2\") == \"2\"\nassert solution(\"5 4 3\\n1 2 1\\n2 3 1\\n1 3 10\\n2 4 1\") == \"1\"\nassert solution(\"6 3 3\\n1 2 1\\n2 3 1\\n1 3 10\\n2 5 1\\n3 4 10\") == \"3\"\nassert solution(\"4 1 1\\n1 2 1\\n1 3 10\") == \"10\"\n\n-----End of file-----\n\"\"\""
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 2\\n1 2 1\\n1 3 3\\n2 3 3\\n3 4 4\") == \"5\"\nassert solution(\"4 7 5\\n1 2 5\\n1 3 1\\n2 3 2\\n2 4 3\\n3 4 4\\n4 1 3\\n3 1 2\\n3 5 6\\n4 5 7\\n5 1 1\\n4 2 4\\n5 2 2\\n5 3 5\\n4 3 1\") == \"6\"\nassert solution(\"7 5 5\\n1 2 1\\n1 3 3\\n2 3 1\\n2 4 2\\n3 4 2\\n3 5 3\\n4 5 3\\n4 6 4\\n5 6 5\\n6 4 5\\n5 1 1\\n6 2 2\\n6 3 5\\n5 1 5\") == \"6\"\n\nassert solution(\"6 15 19\\n1 2 1\\n2 3 1\\n3 4 1\\n4 5 1\\n5 6 1\\n1 6 1\\n2 5 2\\n2 6 1\\n4 7 2\\n6 7 2\\n6 7 3\\n7 8 2\\n3 8 4\\n8 9 2\\n8 9 4\\n8 9 5\\n9 10 5\\n9 11 5\\n6 11 5\\n9 12 2\\n11 12 2\\n8 13 2\\n11 13 2\\n9 12 1\\n9 13 1\\n12 13 1\\n13 14 1\\n13 15 1\\n13 16 1\\n14 16 1\\n14 17 1\\n16 17 1\\n14 18 1\\n17 18 1\\n14 19 1\\n18 19 1\\n15 19 1\\n17 19 1\") == \"6\"\nassert solution(\"6 22 3\\n1 2 1\\n1 3 1\\n2 3 1\\n2 4 1\\n3 4 1\\n3 5 1\\n4 5 1\\n4 6 1\\n5 6 1\\n5 7 1\\n6 7 1\\n6 8 1\\n7 8 1\\n7 9 1\\n8 9 1\\n8 10 1\\n9 10 1\\n9 11 1\\n10 11 1\\n9 12 1\\n10 12 1\\n11 12 1\\n10 13 1\\n11 13 1\\n12 13 1\\n13 14 1\\n14 15 1\\n14 16 1\\n15 16 1\\n14 17 1\\n16 17 1\\n14 18 1\\n17 18 1\\n14 19 1\\n18 19 1\\n15 19 1\\n17 19 1\\n14 20 1\\n19 20 1\\n16 20 1\\n19 21 1\\n19 22 1\\n17 21 1\\n21 22 1\\n17 21 1\\n20 21 1\\n17 22 1\\n21 22 1\\n17 23 1\\n22 23 1\\n21 23 1\\n20 23 1\") == \"5\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == output\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n6 10 5\n2 5 1\n5 3 9\n6 2 2\n1 3 1\n5 1 8\n6 5 10\n1 6 5\n6 4 6\n3 6 2\n3 4 5\n''') == '3'\n\nassert solution('''\n7 15 18\n2 6 3\n5 7 4\n6 5 4\n3 6 9\n6 7 7\n1 6 4\n7 1 6\n7 2 1\n4 3 2\n3 2 8\n5 3 6\n2 5 5\n3 7 9\n4 1 8\n2 1 1\n''') == '9'\n\"\"\""
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7 10\\n1 3 1\\n3 1 5\\n1 2 2\\n2 3 6\\n4 3 2') == '2'\nassert solution('6 12 1\\n2 5 1\\n2 4 3\\n4 6 2\\n3 4 2\\n6 5 5\\n1 3 1\\n4 3 2\\n5 4 4\\n5 2 5\\n3 2 6\\n2 3 6\\n2 1 4\\n1 2 3') == '2'\n\"\"\"\n\n\nfrom math import inf\nfrom collections import deque, defaultdict\n\n\nclass Graph:\n    def __init__(self, n):\n        self.n = n\n        self.edges = defaultdict(list)\n\n    def add_edge(self, u, v, w):\n        self.edges[u].append([v, w])\n        self.edges[v].append([u, w])\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 3 4 2\\n\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\\n\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\\n\") == \"7486 3\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 3 2') == '4 2 1 1 1'\n\nassert solution('6 1 5 12 13 2 15') == '7 2 1 1 2 1'\n\nassert solution('10 1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3 3 3 2 2 2 2 1 1 1'\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\""
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1 2 3\\n\") == \"1 1 1 1 1\"\nassert solution(\"5\\n1 1 2 3 4 2\\n\") == \"3 1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\\n\") == \"7 2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\\n\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import permutations"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\nassert solution(\"100\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\") == \"100 58\"\nassert solution(\"500\\n
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\n\"\"\""
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n5009\\n7\\n9876\\n10000\\n10\\n') == '2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\\n', 'Wrong solution'\n\nprint('Hooray!')\n\"\"\"\n\nimport sys\n\nsys.stdin = open('input.txt')\ninput = sys.stdin.readline"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5009') == '2\\n5000 9'\n\"\"\""
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n3\") == \"2\\n1\"\nassert solution(\"1\\n4\") == \"4\"\nassert solution(\"1\\n2\") == \"2\\n1\"\nassert solution(\"1\\n2\\n3\") == \"1\\n2\\n1\"\nassert solution(\"1\\n2\\n3\\n4\") == \"4\\n3\\n2\\n1\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nfrom math import log, ceil\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3\\n2\\n1\") == \"1\\n3\\n6\"\n\"\"\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5\n5009\n7\n9876\n10000\n10\n''') == '2 5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\\n'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5009\") == \"2\\n5000 9\"\n\"\"\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"\nprint(solution(\"5009\\n7\\n9876\\n10000\\n10\"))"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1\") == \"1\"\nassert solution(\"4\\n2\") == \"2\"\nassert solution(\"4\\n3\") == \"2\"\nassert solution(\"4\\n4\") == \"3\"\nassert solution(\"4\\n5\") == \"2\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"\nprint(solution(\"5009\\n7\\n9876\\n10000\\n10\"))\n\"\"\"\n\nimport itertools\nfrom functools import partial\nfrom math import inf\n\nfrom tools import timing\n\nINPUT_1 = \"\"\"5\n5009\n7\n9876\n10000\n10\n\"\"\"\nINPUT_2 = \"\"\"5\n19\n1\n21\n1\n10\n\"\"\"\nINPUT_3 = \"\"\"1\n1\n1\n1\n1\n\"\"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2 2\") == \"2 2 2 2\"\nassert solution(\"1 1 1 1 1\") == \"1 1 1 1 1\"\nassert solution(\"1 2 3 4 5\") == \"1 1 1 1 1\"\n\nassert solution(\"3 3 3\") == \"3 3 3\"\nassert solution(\"3 3 2 3 1\") == \"1 1 1 1\""
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \\\n        \"1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \\\n        \"3 3 3\"\n\"\"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\"\n\n\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 1 2\\n4 3 1 2\") == \"2 3 3 2 1 3\"\n\"\"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_1) == test_output_1"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 1 2\") == \"1 1 1 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '''\n1 1 1 1 1 \n3 3 3 \n2 3 3 2 1 3 \n1 \n2 2 2 2 \n4 4 4 1 4\n'''\n\nassert solution('''\n1\n6\n4 6 2 1 5 3\n''') == '''\n1\n1\n1\n'''\n\nassert solution('''\n2\n4\n4 1 2 3\n6\n4 6 2 1 5 3\n''') == '''\n3\n3\n2 3 3 2 1 3\n'''\n\nassert solution('''\n1\n3\n1 2 3\n''') == '''\n2\n2\n1 2\n'''\n\nassert solution('''\n1\n2\n2 3 1\n''') == '''\n1\n1\n'''"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \\\n        \"1 1 1 1 1\"\n\"\"\""
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\nassert solution(test_stdin_2) == test_stdout_2\nassert solution(test_stdin_3) == test_stdout_3\n\nprint('The code ran Correctly')\n\n-----Solution-----\n\n```python3\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3\\n1 2 3 4\\n3\\n1 1 1') == '2'\n\"\"\""
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 4\\n3\\n1 1 1') == '2'\n\"\"\"\n\nimport sys\nfrom typing import List, Any, Callable, IO\n\n\nclass Solution:\n    # https://www.geeksforgeeks.org/minimum-sum-prices-buy-and-sell-stocks/\n    # Sum of all prices - (smallest price * quantity)\n    # min(sum_prices, sum_prices_old)\n    # Time complexity: O(n)\n    # Space complexity: O(n)\n    def solve(self, stdin: IO, stdout: IO) -> None:\n        def min_summable_prices(prices: List[int], quantity: int) -> int:\n            summable_prices = 0\n            quantity_old = quantity\n            for price in prices:\n                quantity = quantity_old\n                while quantity >= 0:\n                    summable_prices += price\n                    quantity -= 1\n                quantity_old = quantity\n            return summable_prices\n\n        for _ in range(int(stdin.readline())):\n            n = int(stdin.readline())\n            prices = list(map(int, stdin.readline().split()))\n            stdout.write(str(min_summable_prices(prices, n)))\n            stdout.write('\\n')\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"3\\n2\\n1\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n3\\n1 2 2\\n4\\n1 1 1 1') == '3\\n2\\n1'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 1 3 4\") == \"2\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"1\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3 4') == '1'\n\nassert solution('1\\n1') == '1'\n\nassert solution('2\\n1 1') == '2'\n\nassert solution('4\\n1 2 3 4') == '3'\n\nassert solution('4\\n1 2 2') == '2'"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 1 1 1\\n') == '2'\n\"\"\""
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n4 1 2 3\\n1 2 3 4\") == '1'\nassert solution(\"5\\n4 1 2 3 5\") == '3'\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == '1'\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nfrom collections import defaultdict\nfrom heapq import heapify, heappush, heappop"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 1 1 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n\"\"\""
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\") == \"5 4 0 5 3 3 9 0 2 5\"\n\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\\n\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5\"\nassert solution(\"10 10\\n8 10\\n7 9\\n5 8\\n10 6\\n4 7\\n9 4\\n10 4\\n5 5\\n5 8\\n10 9\\n7 8\\n\") == \"10 10\\n8 10\\n7 9\\n5 8\\n10 6\\n4 7\\n9 4\\n10 4\\n5 5\\n5 8\\n10 9\\n7 8\\n\"\nassert solution(\"10 10\\n8 10\\n7 9\\n5 8\\n10 6\\n4 7\\n9 4\\n10 4\\n5 5\\n5 8\\n10 9\\n7 8\\n\") == \"10 10\\n8 10\\n7 9\\n5 8\\n10 6\\n4 7\\n9 4\\n10 4\\n5 5\\n5 8\\n10 9\\n7 8\\n\"\n\n\"\"\"\n\n\nimport sys\nimport heapq"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n10 4 10 15\\n1 2\\n4 3') == '0 0 1 2'\n\nassert solution('10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\n\n\"\"\"\n\n\nimport sys\nimport typing\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n') == '5 4 0 5 3 3 9 0 2 5'\n\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n10 4 10 15\\n1 2\\n4 3\\n') == '0 0 1 2'\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n10 4 10 15\") == \"0 0 1 2\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4 2 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5\""
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n\n\"\"\"\n\n\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\nassert solution(\"4 2\\n2 4 1\\n3 1 2\") == \"NO\"\n\"\"\"\n\nimport sys\nimport random\n\nn, k = [int(i) for i in input().split()]\np = [int(i) - 1 for i in input().split()]\nq = [int(i) - 1 for i in input().split()]"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('qwertyu') == 'wertu'\nassert solution('qweertu') == 'qwertu'\nassert solution('qeertu') == 'qeertu'\nassert solution('qertu') == 'qertu'\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str_input_one) == str_expected_one\n\nassert solution(str_input_two) == str_expected_two\n\n\n\n-----Input-----\n\n4 2\n1 2 3 4\n1 4 2 3\n\nOutput\nYES\nabba\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n1 2 3\\n1 3 2') == 'abb'\n\"\"\""
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\nassert solution(\"3 2\\n1 2 3\\n2 3 1\") == \"NO\"\nassert solution(\"3 2\\n1 3 2\\n2 1 3\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(['a', 'b', 'c', 'd']) == 'b'\n\"\"\"\nimport heapq"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3', '1 3 2') == 'abb'\nassert solution('1 2 3', '1 2 3') == 'abc'\nassert solution('1 2 3', '2 1 3') == 'acb'\nassert solution('1 2 3', '2 3 1') == 'acb'\nassert solution('1 2 3', '3 1 2') == 'bac'\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'NO'\nassert solution('abc') == 'abc'\nassert solution('abcc') == 'acb'\nassert solution('abcba') == 'abc'\nassert solution('abac') == 'abc'\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"abb\"\n\n-----Instructions-----\n1. Keep track of a set of unique characters of the string. The order of characters in the set should be the same as the order in the original string.\n2. To make the string unique, swap characters in the strings if the conditions are met.\n3. Write down a function swap(s1: str, s2: str, i1: int, i2: int) -> str: which swaps characters from the strings s1 and s2.\n4. Write a function permutation(s: str, i: int) -> str: which returns a permutation of the characters of the string s.\n5. Try to find the answer using the function swap(s1, s2, i1, i2) and permutation(s, i)."
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open('test.in').read()) == \"YES\\nbb\"\n\"\"\"\n\n\nimport sys\nimport math\n\nsys.stdin = open('test.in', 'r')\nsys.stdout = open('test.out', 'w')\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1 2\\n') == '1 3'\nassert solution('1 2 3\\n') == '1 3 2'\nassert solution('1 2 3 4\\n') == '1 3 2 4'\n\n---\n\nThe naive solution to this problem is to make a list of cans in the order of increasing durability. Then, we will start shooting from the first can, knock it down, and then the second can, knock it down, and so on.\n\nThen we will start to shoot the cans in the order in which they appear in the input. So we will shoot the first can, knock it down, then the second can, knock it down, then the third can, and so on.\n\nThis solution will work correctly if the cans are ordered from the smallest durability to the largest. Otherwise, the list of cans will not be correct.\n\nclass Solution:\n    def min_shots(self, stdin):\n        n = int(stdin)\n        cans = [int(i) for i in stdin.split()]\n        cans.sort()\n        shots = cans[0] * len(cans) + 1\n        for i in range(1, len(cans)):\n            shots += cans[i] * (i + 1)\n        return shots"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n20 10 20') == '43'\nassert solution('4\\n10 10 10 10') == '64'\nassert solution('6\\n5 4 5 4 4 5') == '69'\nassert solution('2\\n1 4') == '3'"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n20 10 20') == '43'\n\"\"\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n20 10 20') == '43'\nassert solution('4\\n10 10 10 10') == '64'\nassert solution('6\\n5 4 5 4 4 5') == '69'\nassert solution('2\\n1 4') == '3'"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\nprint('The local tests are done. Try Solution Online')"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n20 10 20\\n') == '43'\nassert solution('4\\n10 10 10 10\\n') == '64'\nassert solution('6\\n5 4 5 4 4 5\\n') == '69'\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n20 10 20''') == '43'\nassert solution('''4\n10 10 10 10''') == '64'\nassert solution('''6\n5 4 5 4 4 5''') == '69'\nassert solution('''2\n1 4''') == '3'\nassert solution('''1\n4''') == '2'\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 10 20\") == 43\nassert solution(\"10 10 10 10\") == 64\nassert solution(\"5 4 5 4 4 5\") == 69\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\ncount = 0\nd = [0]*n\nd[0] = 0\n\nfor i in range(1, n):\n    d[i] = d[i-1] + a[i-1]\n    if i!= n-1:\n        count += d[i-1] * (d[i] - 1)\n    else:\n        count += d[i] * (d[i-1] - 1)\nprint(count)\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n20 10 20') == '43'\nassert solution('4\\n10 10 10 10') == '64'\nassert solution('6\\n5 4 5 4 4 5') == '69'\nassert solution('2\\n1 4') == '3'\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n4 2 5 1 3') == '3'\n\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == output\n\n\"\"\"\nimport unittest\n\nclass TestPermutation(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('4\\n4 3 5 2 1'), '3')\n        self.assertEqual(solution('7\\n7 5 2 1 3 6 4'), '5')\n        self.assertEqual(solution('6\\n1 2 3 4 5 6'), '0')\n        self.assertEqual(solution('5\\n3 4 1 2 5'), '1')\n        self."
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 5 1 3') == '3'\nassert solution('5 4 3 2 1') == '0'\nassert solution('5 1 3 4 2') == '0'"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 5 1 3') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 5 1 3') == '3'\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5\n4 2 5 1 3\n''') == 3\n\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 3 3\") == \"1\"\nassert solution(\"4 2 4 1 4 2 4\") == \"0\"\nassert solution
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 3 3\") == \"1\"\n\"\"\"\n\nimport collections\nimport functools\nimport math\nimport re\nimport sys\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nMOD = 10 ** 9 + 7"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n3 3 3 3''') == '1'\nassert solution('''4\n4 4 4 4''') == '0'\n\n'''\n3 3 3 3\n3 3 3 3\n1 2 2\n'''\n'''\n3 3 3 3\n3 3 3 3\n1 2 2\n3 3\n'''\n'''\n3 3 3 3\n3 3 3 3\n1 1 1\n3 3\n'''\n'''\n3 3 3 3\n3 3 3 3\n1 1 1\n3 3\n'''\n'''\n4\n2 2 2 2\n2 2 2 2\n3 3\n3 3\n'''\n'''\n4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n'''\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 3 3\") == 1\n\"\"\"\n\nimport math\nimport sys\n\nN = int(input())\nA = list(map(int, input().split()))\nA.sort()\n\nremoval_count = 0\n\nfor i in range(N):\n    cnt = 0\n    for j in range(N):\n        if i == j:\n            continue\n        if A[i] == A[j]:\n            cnt += 1\n    if cnt % 2 == 0:\n        continue\n    removal_count += 1\n\nprint(removal_count)\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n\"\"\"\n\nfrom typing import List\nimport sys\n\nclass Solution:\n    def getInput(self, stdin: str) -> List[int]:\n        rawInput: List[str] = stdin.strip().split('\\n')\n        n: int = int(rawInput[0])\n        a: List[int] = list(map(int, rawInput[1].split()))\n        return [n, a]\n\n    def solve(self, stdin: str) -> str:\n        n, a = self.getInput(stdin)\n        ans: int = 0\n        for x in a:\n            if a.count(x) > x:\n                ans += x\n            else:\n                ans += a.count(x)\n        return str(ans)\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 3 3\") == \"1\"\n\"\"\"\nfrom collections import Counter\n\nimport sys"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n3 3 3 3''') == 1\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 3 3') == 1\n\n\"\"\"\n\n\"\"\"\n\u89e3\u984c\u601d\u8def:\n\u8a18\u5f97\u8981\u5148\u628aa\u4e2d\u7684\u6578\u5b57\u6392\u5e8f\u597d\uff0c\u6392\u5e8f\u9700\u8981\u7528\u5230\u5012\u5e8f\u7684\u6392\u5e8f\u7a0b\u5f0f\uff0c\u9084\u6709\u4e00\u500bsort\u6392\u5e8f\u65b9\u6cd5\n\u8a18\u5f97\u8981\u5148\u628aa\u4e2d\u7684\u6578\u5b57\u6392\u5e8f\u597d\uff0c\u6392\u5e8f\u9700\u8981\u7528\u5230\u5012\u5e8f\u7684\u6392\u5e8f\u7a0b\u5f0f\n\n\u7136\u5f8c\u7d93\u904e\u4e00\u6b21sort\u6392\u5e8f\uff0c\u6703\u5f97\u5230\u4e00\u500b\u9577\u5ea6\u70baN\u7684\u6392\u5e8f\u5f8c\u7684list\uff0c\u9019\u500blist\u6bcf\u500b\u5143\u7d20\u4ee3\u8868\u5728a\u4e2d\u51fa\u73fe\u7684\u6b21\u6578\uff0c\n\u63a5\u8457\u5c31\u662f\u8981\u627e\u51fa\u73fe\u6b21\u6578\u4e0d\u70ba1\u7684\u90a3\u4e9b\u5143\u7d20\uff0c\u6392\u5e8f\u4e4b\u5f8c\u7684list\u6bcf\u500b\u5143\u7d20\u4ee3\u8868\u5728a\u4e2d\u51fa\u73fe\u7684\u6b21\u6578\n\n\u90a3\u5982\u679c\u5169\u500blist\u76f8\u4e92\u505a\u904b\u7b97\uff0c\u4f8b\u5982a[0] + a[1] + a[2]\uff0c\u5c31\u6703\u5f97\u52303\uff0c\u56e0\u70baa[0] * 2 + a[1] * 2 + a[2] * 2\n\u90a3\u4e48\u6211\u5011\u60f3\u8981\u505a\u7684\u5c31\u662f\u6bd4\u8f03a[0]\u548ca[1]\uff0c\u56e0\u70baa[0]\u548ca[1]\u7684\u6b21\u6578\u5df2\u7d93\u4e0d\u662f1\u4e86\n\u6240\u4ee5a[0]\u548ca[1]\u5c31\u4e0d\u662f\u7b54\u6848\n\n\u6700\u5f8c\u5c31\u662f\u8981\u627e\u51faa\u4e2d\u51fa\u73fe\u6b21\u6578\u4e0d\u70ba1\u7684\u5143\u7d20\uff0c\u4f46\u662f\u662f\u4e00\u500b\u9577\u5ea6\u70baN\u7684list\uff0c\u6bcf\u500b\u5143\u7d20\u4ee3\u8868\u5728a\u4e2d\u51fa\u73fe\u7684\u6b21\u6578\n\u63a5\u8457\u5c31\u662f\u628aa\u4e2d\u6240\u6709\u51fa\u73fe\u6b21\u6578\u4e0d\u70ba1\u7684\u5143\u7d20\u653e\u5230\u4e00\u500blist\u4e2d\uff0c\u7136\u5f8c\u5c07\u9577\u5ea6\u70baN\u7684list\u6392\u5e8f\n\u6700\u5f8creturn\u7684\u5c31\u662f\u6700\u5c11\u8981\u6e1b\u6389\u7684\u6578\u91cf\n\"\"\"\n\nimport operator\nimport collections\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"0 2 3 4 5\") == \"2\"\nassert solution(\"0 0 3 4 5\") == \"3\"\nassert solution(\"0 0 0 4 5\") == \"4\"\nassert solution(\"0 0 0 0 5\") == \"5\"\n\"\"\"\n\ninput_list = [int(i) for i in stdin.split()]\n\nfor i in range(0, len(input_list)):\n    if input_list[i] == 0:\n        print(i + 1)\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\nprint(solution(\"0 2 3 4 5\"))\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n\nfrom sys import stdin\nfrom collections import deque\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 2 3 4 5') == '1'\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 2 3 4 5') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"0\"\nassert solution(\"0 2 3 4 0\") == \"1\"\nassert solution(\"0 2 3 0 4\") == \"2\"\nassert solution(\"0 0 0 0 0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"0\"\n\nsolution(\"3 5\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n\") == \"0\"\nprint(\"all tests passed.\")\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3, 5) == 0\n\"\"\"\nimport sys\nfrom typing import List"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\nYou can do it!\n\n'''\n\nimport sys\n\nh, w = map(int, sys.stdin.readline().strip().split())\nprint(min(h, w) - max(h, w) + min(h, w) - 2*min(h, w))\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5\\n') == 0\n\"\"\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4\\n5 6\\n7 8\\n9 10') == '0'\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == \"0\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 5\") == \"0\"\nassert solution(\"10 10\") == \"0\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\nIntuition\n\nSince S has a limit of 4, it is only possible to have a product of even numbers between two odd numbers.\n\nAlgorithm\n\nWe can modify the recursive algorithm for Snuke's recursive function as follows:\n\nStep 1: Reject if n is not within the range (2, 10^5) or if the product of ai and ai+1 is not a multiple of 4.\n\nStep 2: Return if the length of a is less than 2, otherwise return recursive function on a[1:] with the added condition.\n\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 100 1\") == \"Yes\"\nassert solution(\"10 100 10\") == \"No\"\nassert solution(\"10 1 10\") == \"Yes\"\nassert solution(\"3 1 10\") == \"No\"\nassert solution(\"10 1 2\") == \"No\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 10 100\") == \"Yes\"\nassert solution(\"3\\n100 10 1\") == \"No\"\nassert solution(\"4\\n1 3 6 4\") == \"Yes\"\nassert solution(\"7\\n7 7 7 7 7 7 7\") == \"No\"\n\"\"\"\nfrom collections import Counter\n\nN = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\nassert solution(\"2 10 10\") == \"No\"\nassert solution(\"2 10 11\") == \"Yes\"\nassert solution(\"1 10 1\") == \"No\"\n\"\"\"\n\nimport itertools\nfrom typing import List, Dict\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 10 100\\n\") == \"Yes\"\nassert solution(\"3\\n1 10 20\\n\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 10 100\") == \"Yes\"\n\"\"\"\nfrom math import gcd\nfrom typing import List"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 10 100\") == \"Yes\"\n\"\"\"\n\nfrom functools import reduce\n\nN = int(input())\n\nnumbers = [int(i) for i in input().split()]\n\nis_valid = True\nfor i in range(1, N - 1):\n    if numbers[i - 1] * numbers[i] % 4!= 0:\n        is_valid = False\n        break"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10 100\\n\") == 'Yes'"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'Yes'\nassert solution('a') == 'No'\nassert solution('ab') == 'Yes'\nassert solution('abc') == 'Yes'\nassert solution('xyz') == 'Yes'\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'Yes'\n\"\"\"\n\nfrom typing import List, Tuple, Dict\n\nclass Solution:\n    def __init__(self):\n        self.ALPHABET: List[str] = [chr(i) for i in range(ord('a'), ord('z') + 1)]\n        self.ALPHABET_DICT: Dict[str, int] = {chr(i): i for i in range(ord('a'), ord('z') + 1)}\n        self.pairs: Dict[str, int] = {}\n\n    def solution(self, stdin: str) -> str:\n        stdin_splitted: List[str] = stdin.splitlines()\n\n        self.make_pairs(stdin_splitted[0], stdin_splitted[1])\n\n        result: str = 'Yes' if self.is_less(stdin_splitted[0], stdin_splitted[1]) else 'No'\n        return result\n\n    def make_pairs(self, a: str, b: str) -> None:\n        a_idx: int = 0\n        b_idx: int = 0\n\n        a_length: int = len(a)\n        b_length: int = len(b)\n\n        a_char: str = None\n        b_char: str = None\n\n        while a_idx < a_length and b_idx < b_length:\n            a_char = a[a_idx]\n            b_char = b[b_idx]\n\n            if a_char == b_char:\n                a_idx += 1\n                b_idx += 1\n            elif a_char > b_char:\n                self.add_pair(b_char, b_idx)\n                b_idx += 1\n            else:\n                self.add_pair(a_char, a_idx)\n                a_idx += 1\n\n    def add_pair(self, char: str, idx: int) -> None:\n        if char in self.pairs:\n            self.pairs[char] += 1\n        else:\n            self.pairs[char] = 1\n\n    def is_less(self, a: str, b: str) -> bool:\n        a_idx: int = 0\n        b_idx: int = 0\n\n        a_length: int = len(a)\n        b_length: int = len(b)\n\n        while a_idx < a_length and b_idx < b_length:\n            a_char = a[a_idx]\n            b_char = b[b_idx]\n\n            if a_char == b_char:\n                a_idx += 1\n                b_idx += 1\n            elif self.pairs[a_char] > self.pairs[b_char]:\n                return False\n            else:\n                return True\n\n    def is_less_solution(self, a: str, b: str) -> bool:\n        a_idx: int = 0\n        b_idx: int = 0\n\n        a_length: int = len(a)\n        b_length: int = len(b)\n\n        while a_idx < a_length and b_idx < b_length:\n            if a_idx == b_idx:\n                a_idx += 1\n                b_idx += 1\n\n            if a[a_idx] < b[b_idx]:\n                return True\n\n            a_char = a[a_idx]\n            b_char = b[b_idx]\n\n            if a_char == b_char:\n                a_idx += 1\n                b_idx += 1\n            elif self.pairs[a_char] > self.pairs[b_char]:\n                return False\n            else:\n                return True\n\n    def lexicographic_order(self, a: str, b: str) -> bool:\n        if len(a)!= len(b):\n            return False\n\n        a_idx: int = 0\n        b_idx: int = 0\n\n        a_length: int = len(a)\n        b_length: int = len(b)\n\n        while a_idx < a_length and b_idx < b_length:\n            a_char = a[a_idx]\n            b_char = b[b_idx]\n\n            if a_char!= b_char:\n                if a_char < b_char:\n                    a_idx += 1\n                else:\n                    return False\n\n            a_idx += 1\n            b_idx += 1\n\n        if a_idx == a_length and b_idx == b_length:\n            return True\n\n        return False\n\nsolution = Solution()\nprint(solution.solution(stdin))"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xy\") == \"Yes\"\nassert solution(\"yx\") == \"Yes\"\nassert solution(\"ayx\") == \"No\"\nassert solution(\"ya\") == \"No\"\nassert solution(\"aa\") == \"Yes\"\n\n\"\"\"\n\n\nfrom typing import List\nfrom collections import Counter\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"xy\") == \"Yes\"\nassert solution(\"yxa\") == \"No\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('atcoder') == 'No'\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('xy') == 'Yes'\nassert solution('atcoder') == 'Yes'\nassert solution('atlas') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('abcd') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"zxb\") == \"No\"\nassert solution(\"z\") == \"No\"\n\nprint(solution(\"yx\"))\nprint(solution(\"axy\"))\nprint(solution(\"zxb\"))\nprint(solution(\"z\"))\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('abc') == 'No'\nassert solution('abac') == 'Yes'\nassert solution('abacd') == 'No'\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 5 1\\n') == 'YES'\nassert solution('7 1 1\\n') == 'NO'\n\nassert solution('1 1 1\\n') == 'YES'\nassert solution('1 2 1\\n') == 'NO'\n\nassert solution('7 1 0\\n') == 'NO'\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 5 1\\n') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 5 1') == 'YES'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\nassert solution(\"2 6 1\") == \"NO\"\nassert solution(\"0 5 2\") == \"YES\"\nassert solution(\"0 0 1\") == \"NO\"\nassert solution(\"0 0 0\") == \"YES\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 5 1') == 'YES'\nassert solution('7 8 1') == 'NO'"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 5 1\\n') == 'YES'\nassert solution('3 7 1\\n') == 'NO'\nassert solution('4 4 6\\n') == 'YES'\nassert solution('7 9 10\\n') == 'YES'\nassert solution('8 9 10\\n') == 'NO'\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\nassert solution(\"7 5 3\") == \"NO\"\nassert solution(\"1 1 0\") == \"YES\"\nassert solution(\"7 1 0\") == \"NO\"\nassert solution(\"1 0 0\") == \"YES\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 5 1') == 'YES'\nassert solution('4 8 0') == 'NO'\nassert solution('6 1 5') == 'NO'\n\n------"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n') == '1'\n\nassert solution('5 5\\n') == '1'\n\nassert solution('1 1\\n') == '0'\n\nassert solution('1 1\\n') == '0'\n\nassert solution('1 1\\n') == '0'"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n\") == \"1\"\n\n-----\n\n3 3\n\n-----Sample Output-----\n9\n\nIn this case, the area is 9 square yards.\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\n\"\"\"\nimport math"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2') == '1'\nprint('Tests passed!')"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3, 4) == 6\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__) == \"1\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2') == '1'\n\nassert solution('3 3') == '6'\n\nassert solution('7 7') == '28'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"1\"\n\"\"\"\n\nfrom sys import stdin\n\na, b = [int(x) for x in stdin.readline().strip().split()]\nprint(abs(a-b))\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '2 2\\n'\n) == '1'\n\nassert solution(\n    '5 2\\n'\n) == '2'\n\nassert solution(\n    '10 2\\n'\n) == '5'\n\nassert solution(\n    '9 10\\n'\n) == '54'\n\nassert solution(\n    '3 4\\n'\n) == '16'"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 1\\n') == '3'\nassert solution('1 1 1\\n') == '1'\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n3 1 1\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n4 1 3\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n5 5 4\n\"\"\") == \"4\"\nassert solution(\n\"\"\"\n7 7 7\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n13 3 1\n\"\"\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 1') == '2'\nassert solution('10 5 3') == '3'\nassert solution('3 3 2') == '1'\nassert solution('4 3 3') == '1'\nassert solution('4 3 2') == '0'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13 3 1\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13 3 1\\n\") == 3\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13 3 1\\n\") == \"3\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n\"\"\"\nimport math\n\nX, Y, Z = map(int, input().split())"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 0\\n0 4\\n5 5\") == 2\n\"\"\"\n\nn = int(input())\n\nx_s = set()\ny_s = set()\n\nfor i in range(n):\n    x, y = map(int, input().split())\n    x_s.add(x)\n    y_s.add(y)\n\nx_s = list(x_s)\ny_s = list(y_s)\n\ncount = 0\nfor i in range(n):\n    for j in range(n):\n        if (x_s[i] < x_s[j] and y_s[i] < y_s[j]) or (x_s[i] > x_s[j] and y_s[i] > y_s[j]):\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n2 0\n3 1\n1 3''') == '2'\nassert solution('''4\n5 5\n1 3\n0 4''') == '1'\n\"\"\"\n\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 0\\n3 1\\n1 3\") == 2\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline())\na, b = [], []\nc, d = [], []\nfor i in range(N):\n    a.append(int(sys.stdin.readline()))\n    b.append(int(sys.stdin.readline()))\nfor i in range(N):\n    c.append(int(sys.stdin.readline()))\n    d.append(int(sys.stdin.readline()))\n\nans = 0\nfor i in range(N):\n    for j in range(N):\n        if a[i] < c[j] and b[i] < d[j]:\n            ans += 1\nprint(ans)\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 0\\n3 1\\n1 3\") == \"2\"\n\"\"\"\n\nN = int(input())\npairs = {}\nfor _ in range(N):\n    a, b = map(int, input().split())\n    pairs[(a, b)] = 0\n\nfor _ in range(N):\n    c, d = map(int, input().split())\n    for key, value in pairs.items():\n        if key[0] <= c <= key[1] and key[0] <= d <= key[1]:\n            pairs[key] += 1\n\nprint(max(pairs.values()))"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == 2\nassert solution(\"4\\n0 5\\n1 1\\n3 2\\n4 2\") == 2\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5''') == '2'\nassert solution('''2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == 2\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 3\\n0 1\\n0 2\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 4\\n0 3') == '7'\n\nIf you are stuck at any point, you can always refer back to the sample questions.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == b\n\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(int(input()))\nprint(solution(str(input())))\n\n\"\"\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 4\n0 3\n''') == '7'\n\n---Problem---\nYou and the computer are standing at a magical roundabout.\nThere is a small pond in front of you, and there are N cars driving in that pond.\nEach car has a positive integer speed S, and the i-th car has speed S_i.\nYou have to choose the car in front of you (i.e., the i-th car) to start the race.\nThe race is run using one lap, and in each lap you can choose to change your choice of car.\nIn each lap, you must change to the car to the left of your current choice of car.\n\nThe race ends when there are no more cars left in the pond.\n\nYou have to determine the number of laps that the race will last.\n\n-----Constraints-----\n - 2 \u2264 N \u2264 20,\n - 1 \u2264 S_i \u2264 100, for all i.\n\n-----Input-----\nThe first line of the input contains a single integer T denoting the number of test cases.\nThe description of T test cases follows.\nThe first line of each test case contains a single integer N.\nThe second line contains N space-separated integers S_1, S_2,..., S_N.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the number of laps that the race will last.\n\n-----Sample Input-----\n1\n1\n\n-----Sample Output-----\n1\n\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('5 4\\n0 3\\n') == '7'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 4\n0 3\n''') == '7'\nassert solution('''3 2\n0 1\n1 2\n''') == '5'\nassert solution('''4 3\n0 2\n1 3\n''') == '4'\nassert solution('''2 4\n0 1\n''') == '4'\n\"\"\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\"\nimport sys\n\nn, t = [int(x) for x in sys.stdin.readline().split()]\ntimes = [int(x) for x in sys.stdin.readline().split()]\n\nres = t\nfor i in range(n):\n    res += t - times[i]\n\nprint(res)\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '8\\n'\n    'L 1\\n'\n    'R 2\\n'\n    'R 3\\n'\n    '? 2\\n'\n    'L 4\\n'\n    '? 1\\n'\n    'L 5\\n'\n    '? 1\\n'\n) == '1\\n1\\n2'\n\nassert solution(\n    '10\\n'\n    'L 100\\n'\n    'R 100000\\n'\n    'R 123\\n'\n    'L 101\\n'\n    '? 123\\n'\n    'L 10\\n'\n    'R 115\\n'\n    '? 100\\n'\n    'R 110\\n'\n    '? 115\\n'\n) == '0\\n2\\n1'\n\n\"\"\""
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\nL 10\\nR 115\\n? 100\\nL 10\\nR 115\\n? 100\\nR 110\") == \"2\"\n\n\n\n-----Big O Notation-----\n\nThe solution will be $O(n \\cdot m)$ where $n$ is the number of queries and $m$ is the length of the longest query.\n\n\n----- Complexity Analysis -----\n\nThe complexity of the solution will be $O(n \\cdot m)$ where $n$ is the number of queries and $m$ is the length of the longest query.\n\nIn the worst case, the shelf will look like $[1, 2, 3, \\ldots, n]$.\n\nThe worst case happens when the last query is of type $3$ and the query in that position is of type $3$ and has an index $j$ equal to $n$, which can be checked as follows:\n\nSuppose that the shelf has the form $[1, 2, 3, \\ldots, n]$ and the last query is of type $3$ and has an index $j$, then for the next query to be of type $3$ there is at least one book between $i$ and $j$ on the shelf.\n\nThat is because the last query must have been answered to place the book with index $j$ on the shelf, so the next query must be for a book with index $j+1$ or greater, which will definitely be on the shelf.\n\nFor the next query to be of type $3$ there is at least one book between $i$ and $j+1$ on the shelf.\n\nIn other words, if $n$ is the number of books on the shelf, then the number of queries of type $3$ is equal to $n+1$.\n\nSo there will be $O(n+1)$ queries of type $3$.\n\nThe complexity of the solution will be $O(n \\cdot m)$ where $n$ is the number of queries and $m$ is the length of the longest query.\n\n\n----- Space Complexity -----\n\nThe complexity of the solution will be $O(n \\cdot m)$ where $n$ is the number of queries and $m$ is the length of the longest query.\n\nThe length of the longest query is equal to the maximum index $j$ on the shelf across all queries, so the complexity of the solution is $O(n)$.\n\n\n----- Time Complexity -----\n\nThe complexity of the solution will be $O(n \\cdot m)$ where $n$ is the number of queries and $m$ is the length of the longest query.\n\nIn the worst case, the shelf will look like $[1, 2, 3, \\ldots, n]$.\n\nThe worst case happens when the last query is of type $3$ and the query in that position is of type $3$ and has an index $j$ equal to $n$, which can be checked as follows:\n\nSuppose that the shelf has the form $[1, 2, 3, \\ldots, n]$ and the last query is of type $3$ and has an index $j$, then for the next query to be of type $3$ there is at least one book between $i$ and $j$ on the shelf.\n\nThat is because the last query must have been answered to place the book with index $j$ on the shelf, so the next query must be for a book with index $j+1$ or greater, which will definitely be on the shelf.\n\nFor the next query to be of type $3$ there is at least one book between $i$ and $j+1$ on the shelf.\n\nIn other words, if $n$ is the number of books on the shelf, then the number of queries of type $3$ is equal to $n+1$.\n\nSo there will be $O(n+1)$ queries of type $3$.\n\nThe complexity of the solution will be $O(n \\cdot m)$ where"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_solution\nprint(solution(stdin))\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\n\n\"\"\""
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1''') == '1'\nassert solution('''10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n''') == '0'\nassert solution('''8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1''') == '1'\nassert solution('''10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115''') == '2'\nassert solution('''8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1''') == '1'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n\") == \"1\\n1\\n2\\n\"\n\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == \"0\\n2\\n1\\n\""
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\"\nassert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\n\nassert solution(\"10\\n100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"\n\n\"\"\""
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"30\\n25\\n24\\n13\\n1\\n\") == \"6\"\nassert solution(\"3\\n1\\n5\\n1\\n\") == \"2\"\nassert solution(\"30\\n25\\n14\\n27\\n1000000000000000000\\n\") == \"6\"\n\n\n\nSolution Overview:\n------------------\nFind the middle value of the input list.\nKeep a counter that counts the number of times the middle value occurs.\nIf the middle value occurs more than once, then the input list cannot be represented as a sequence of arithmetic sums.\nIterate through the input list to replace each element with the sum of the previous and next elements (or the middle element if the current element is the last one).\nIf the input list only contains one element, then the middle value and the number of occurrences of the middle value is the minimum number of moves required.\nIf the input list only contains two elements, then the middle value and the number of occurrences of the middle value is the minimum number of moves required.\nIf the input list is longer than 3 elements, then the middle value, the number of occurrences of the middle value and the minimum number of moves required are calculated.\nIf the middle value occurs more than once, then the input list cannot be represented as a sequence of arithmetic sums.\nIterate through the input list to replace each element with the sum of the previous and next elements (or the middle element if the current element is the last one).\nIf the input list only contains one element, then the middle value and the number of occurrences of the middle value is the minimum number of moves required.\nIf the input list only contains two elements, then the middle value and the number of occurrences of the middle value is the minimum number of moves required.\nIf the input list is longer than 3 elements, then the middle value, the number of occurrences of the middle value and the minimum number of moves required are calculated.\nIf the middle value occurs more than once, then the input list cannot be represented as a sequence of arithmetic sums.\nIterate through the input list to replace each element with the sum of the previous and next elements (or the middle element if the current element is the last one).\nIf the input list only contains one element, then the middle value and the number of occurrences of the middle value is the minimum number of moves required.\nIf the input list only contains two elements, then the middle value and the number of occurrences of the middle value is the minimum number of moves required.\nIf the input list is longer than 3 elements, then the middle value, the number of occurrences of the middle value and the minimum number of moves required are calculated.\nIf the middle value occurs more than once, then the input list cannot be represented as a sequence of arithmetic sums.\nIterate through the input list to replace each element with the sum of the previous and next elements (or the middle element if the current element is the last one).\nIf the input list only contains one element, then the middle value and the number of occurrences of the middle value is the minimum number of moves required.\nIf the input list only contains two elements, then the middle value and the number of occurrences of the middle value is the minimum number of moves required.\nIf the input list is longer than 3 elements, then the middle value, the number of occurrences of the middle value and the minimum number of moves required are calculated.\nIf the middle value occurs more than once, then the input list cannot be represented as a sequence of arithmetic sums.\nIterate through the input list to replace each element with the sum of the previous and next elements (or the middle element if the current element is the last one).\nIf the input list only contains one element, then the middle value and the number of occurrences of the middle value is the minimum number of moves required.\nIf the input list only contains two elements, then the middle value and the number of occurrences of the middle value is the minimum number of moves required.\nIf the input list is longer than 3 elements, then the middle value, the number of occurrences of the middle value and the minimum number of moves required are calculated.\nIf the middle value occurs more than once, then the input list cannot be represented as a sequence of arithmetic sums.\nIterate through the input list to replace each element with the sum of the previous and next elements (or the middle element if the current element is the last one).\nIf the input list only contains one element, then the middle value and the number of occurrences of the middle value is the minimum number of moves required.\nIf the input list only contains two elements, then the middle value and the number of occurrences of the middle value is the minimum number of moves required.\nIf the input list is longer than 3 elements, then the middle value, the number of occurrences of the middle value and the minimum number of moves required are calculated.\nIf the middle value occurs more than once, then the input list cannot be represented as a sequence of arithmetic sums.\nIterate through the input list to replace each element with the sum of the previous and next elements (or the middle element if the current element is the last one).\nIf the input list only contains one element, then the middle value and the number of occurrences of the middle value is the minimum number of moves required.\nIf the input list only contains two elements, then the middle value and the number of occurrences of the middle value is the minimum number of moves required.\nIf the input list is longer than 3 elements, then the middle value, the number of occurrences of the middle value and the minimum number of moves required are calculated.\nIf the middle value occurs more than once, then the input list cannot be represented as a sequence of arithmetic sums.\nIterate through the input list to replace each element with the sum of the previous and next elements (or the middle element if the current element is the last one).\nIf the input list only contains one element, then the middle value and the number of occurrences of the middle value is the minimum number of moves required.\nIf the input list only contains two elements, then the middle value and the number of occurrences of the middle value is the minimum number of moves required.\nIf the input list is longer than 3 elements, then the middle value, the number of occurrences of the middle value and the minimum number of moves required are calculated.\nIf the middle value occurs more than once, then the input list cannot be represented as a sequence of arithmetic sums.\nIterate through the input list to replace each element with the sum of the previous and next elements (or the middle element if the current element is the last one).\nIf the input list only contains one element, then the middle value and the number of occurrences of the middle value is the minimum number of moves required.\nIf the input list only contains two elements, then the middle value and the number of occurrences of the middle value is the minimum number of moves required.\nIf the input list is longer than 3 elements, then the middle value, the number of occurrences of the middle value and the minimum number of moves required are calculated.\nIf the middle value occurs more than once, then the input list cannot be represented as a sequence of arithmetic sums.\nIterate through the input list to replace each element with the sum of the previous and next elements (or the middle element if the current element is the last one).\nIf the input list only contains one element, then the middle value and the number of occurrences of the middle value is the minimum number of moves required.\nIf the input list only contains two elements, then the middle value and the number of occurrences of the middle value is the minimum number of moves required.\nIf the input list is longer than 3 elements, then the middle value, the number of occurrences of the middle value and the minimum number of moves required are calculated.\nIf the middle value occurs more than once, then the input list"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''7\n1\n10\n25\n30\n14\n27\n1000000000000000000''') == '''0\n4\n6\n6\n-1\n6\n72'''\n\n\"\"\"\n\nfrom collections import deque\n\nfrom sys import stdin\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8') == '8'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8') == '8'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8') == '8'\n\"\"\""
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\\n5\\n16\\n16\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\n449\\n450\\n451\\n452\\n453\\n454\\n455\\n456\\n457\\n458\\n459\\n460\\n461\\n462\\n463\\n464\\n465\\n466\\n467\\n468\\n469\\n470\\n471\\n472\\n473\\n474\\n475\\n476\\n477\\n478\\n479\\n480\\n481\\n482\\n483\\n484\\n485\\n486\\n487\\n488\\n489\\n490\\n491\\n492\\n493\\n494\\n495\\n496\\n497\\n498\\n499\\n500\\n501\\n502\\n503\\n504\\n505\\n506\\n507\\n508\\n509\\n510\\n511\\n512\\n513\\n514\\n515\\n516\\n517\\n518\\n519\\n520\\n521\\n522\\n523\\n524\\n525\\n526\\n527\\n528\\n529\\n530\\n531\\n532\\n533\\n534\\n535\\n536\\n537\\n538\\n539\\n540\\n541\\n542\\n543\\n544\\"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7\n1\n10\n25\n30\n14\n27\n1000000000000000000''') == '''0\n4\n6\n6\n-1\n6\n72'''\n\n\"\"\"\n\nfrom typing import List, Tuple\n\nfrom utils import timed\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"30\\n14\\n27\\n1000000000000000000\") == \"6\\n6\\n-1\\n6\\n72\"\nprint(solution(\"30\\n14\\n27\\n1000000000000000000\"))\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n6\\n7\\n2\\n1\\n2\\n1\\n5\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"4\\n6\\n6\\n6\\n-1\\n6\\n72\"\nprint(solution(\"4\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\"))\n\"\"\""
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10\\n1') == '4'\nassert solution('10\\n30') == '-1'\nassert solution('10\\n30\\n20') == '3'\nassert solution('1\\n10') == '0'\nassert solution('3\\n30\\n14\\n27') == '6'\n\"\"\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000') == '4\\n6\\n6\\n-1\\n6\\n72'\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"2\\n11 11\\n1\\n100\") == \"NO\"\nassert solution(\"4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\n\n\"\"\"\nimport math\nimport sys\n\nassert len(sys.argv) == 2\ntests = int(sys.argv[1])\n\nfor test_n in range(1, tests + 1):\n    n = int(input())\n    h = [int(n) for n in input().split()]\n    m = max(h)\n    i = h.index(m)\n    if m < n:\n        print(\"NO\")\n    else:\n        while m > 0:\n            if h[i] - 1 >= 0:\n                h[i] = h[i] - 1\n                m = max(h)\n            else:\n                print(\"NO\")\n                break\n        else:\n            print(\"YES\")"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 2 1\\n3\") == \"NO\"\nassert solution(\"3\\n1 1 3\\n4\") == \"YES\"\nassert solution(\"1\\n100\") == \"YES\"\nassert solution(\"100\\n100\") == \"NO\"\nassert solution(\"100\\n1\") == \"NO\"\n\nprint(\"Success\")\n\n------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100') == 'NO'\nassert solution('2\\n11 11\\n1\\n100') == 'YES'\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3\\n1 1 3\\n4\\n1 1 2 1') == \"YES\"\nassert solution('2\\n11 11\\n1\\n100') == \"NO\"\nassert solution('4\\n4\\n1 1 2 1\\n2\\n11 11') == \"YES\"\nassert solution('4\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100') == \"NO\"\n\nprint('Success')\n\n-----Problem-----\n\nYou are given a string s of even length consisting of characters \"x\" and \"y\" only. You are allowed to swap any two characters that are not on the same position.\n\nReturn the lexicographically smallest string that is obtained after performing the allowed swap operations on s.\n\nConstraints:\n\n    2 <= s.length <= 100\n    s[i] is either \"x\" or \"y\".\n\nYou can swap any two characters that are not on the same position.\n\n\n-----Solution-----"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n1\n1\n3\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"\n1\n1\n2\n\"\"\") == \"NO\"\nassert solution(\n\"\"\"\n1\n1\n2\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"\n1\n1\n1\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"\n1\n2\n1\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\nassert solution(\"3\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"2\\n11 11\\n1\\n100\") == \"NO\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4\\n10 0\\n5 1\\n3 0\\n2 1\\n1 1\\n1 0\\n1 1\\n5 1\\n3 1\\n1 0\\n2 1\\n1 1\\n1 1\\n4 1\\n5 1\\n3 0\\n3 1\\n1 0\\n2 0\\n1 1\\n1 0\\n3 0\\n5 0\\n1 0\\n2 0\\n1 1\\n1 1\\n1 1\\n1 0\\n1 1\\n2 0\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n2 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"2\\n11 11\\n1\\n100\") == \"NO\"\nassert solution(\"3\\n10\\n100 100 100\\n1\") == \"YES\"\nassert solution(\"2\\n10\\n100 100 100\\n1\") == \"NO\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3\n3\n3 3 3\n4\n1 1 2 1\n2\n11 11\n1\n100\n\"\"\"\n) == \"NO\"\nassert solution(\n\"\"\"\n2\n2\n1 1\n1\n1 1\n\"\"\"\n) == \"YES\"\nassert solution(\n\"\"\"\n2\n1 1\n1\n2 2\n\"\"\"\n) == \"YES\"\nassert solution(\n\"\"\"\n2\n1 1\n1\n2 2\n\"\"\"\n) == \"NO\"\nassert solution(\n\"\"\"\n1\n3\n3 3 3\n\"\"\"\n) == \"YES\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1 3\") == \"NO\"\nassert solution(\"4\\n1 1 2 1\") == \"YES\"\nassert solution(\"2\\n11 11\") == \"NO\"\nassert solution(\"1\\n100\") == \"YES\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"zcabd\") == \"0\"\nassert solution(\"dbacz\") == \"0\"\nassert solution(\"abacaba\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\", \"bacabaa\") == 4\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('zcabd') == 0\nassert solution('dbacz') == 0\nassert solution('aba') == 1\nassert solution('aab') == 2\nassert solution('abc') == 0\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abacaba') == 4\nassert solution('zcabd') == 0\nassert solution('dbacz') == 0\n\n\"\"\"\n\nn = int(stdin.readline().strip())\na = stdin.readline().strip()\nb = stdin.readline().strip()\n\naa = [0]\nbb = [0]\nfor i in range(n):\n    aa.append(max(aa[i], a[i]))\n    bb.append(max(bb[i], b[i]))\n\nnum_of_swaps = 0\nfor i in range(1, n + 1):\n    if aa[i]!= bb[i]:\n        num_of_swaps += 1\n        if aa[i] < bb[n - i + 1]:\n            aa[i] = bb[n - i + 1]\n        else:\n            bb[n - i + 1] = aa[i]\n\nprint(num_of_swaps)\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aba', 'baa') == '2'\nassert solution('abacaba', 'bacabaa') == '4'\nassert solution('zcabd', 'dbacz') == '0'\nassert solution('zcabd', 'dbacz') == '0'\nassert solution('zcabd', 'dbacz') == '0'\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(5, \"zcabd\", \"dbacz\") == 0\nassert solution(7, \"abacaba\", \"bacabaa\") == 4\n\n\"\"\""
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcde\", \"edcba\") == 1\nassert solution(\"abab\", \"abab\") == 0\nassert solution(\"zzzab\", \"zzzab\") == 0\nassert solution(\"zzzab\", \"zzzba\") == 1\nassert solution(\"zzzab\", \"zzzbb\") == 2\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == \"4\"\nassert solution(\"zcabd\") == \"0\"\n\"\"\"\nimport re"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"bacabaa\") == 0\nassert solution(\"zcabd\") == 0\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"bacabaa\") == 0\n\"\"\"\n\nimport sys\n\nn = int(input())\na = input()\nb = input()\n\nmin_swap = sys.maxsize\n\nfor i in range(n):\n    new_a = a[:i] + b[i] + a[i + 1:]\n    new_b = b[:i] + a[i] + b[i + 1:]\n    min_swap = min(min_swap, min(countSwap(new_a, new_b), countSwap(new_b, new_a)))\n\nprint(min_swap)\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \\\n    \"8 -17 2999999997 0 1\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 1 2\\n3 4 5') == '0 1 2 3 4 5\\n0 1 2 3 4 5'\nassert solution('2\\n1 2 1\\n1 2 1') == '2 4 3\\n4 4 3'"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\n\nassert solution(\"2\\n1 1\\n1 1\") == \"0\\n0\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5 2 3\") == \"8\\n198\\n-17\\n2999999997\"\n\"\"\"\n\n\nfrom sys import stdin\n\nwhile True:\n    n = int(stdin.readline())\n    if n == 0:\n        break\n    for _ in range(n):\n        a, b, k = map(int, stdin.readline().split())\n        print(a*k - b*(k-1))\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_str) == correct_str\nprint(solution(stdin))\n\nfrom operator import sub, add\nfrom itertools import chain\nimport operator"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999') == '8 198 -17 2999999997 0 1'\n\nassert solution('10 10 1000000000\\n1 10 1000000000\\n10 1 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n10 10 1000000000\\n1 10 1000000000\\n1 10 1000000000\\n10 10 100"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test) == test_solution\nprint(solution(input))\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8198-17299999999701\""
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8 198 -17 2999999997 0 1\"\nassert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8 198 -17 2999999997 0 1\"\n\"\"\"\nfrom dataclasses import dataclass\nfrom typing import List\nfrom math import inf\n\n\n@dataclass\nclass Frog:\n    x: int\n    y: int\n    m: int\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n') == '1\\n4\\n4\\n9\\n'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n8') == '1'\nassert solution('3\\n5') == '5'\nassert solution('2\\n4') == '3'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n3') == '3'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\") == \"3\"\nassert solution(\"4\\n2\") == \"4\"\nassert solution(\"4\\n3\") == \"7\"\nassert solution(\"4\\n4\") == \"7\"\nassert solution(\"4\\n5\") == \"10\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\\n') == '1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089'\n\n'''"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n5') == '8'\nassert solution('1\\n2') == '3'\n\"\"\"\n\nq = int(input())\n\nfor i in range(q):\n    n = int(input())\n    count = 0\n    for i in range(n):\n        for j in range(i, n+1):\n            if (j*j + (j//3)*(j//3)) >= n:\n                count = j\n                break\n    print(count)"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\") == \"\"\"1\n3\n9\n13\n27\n6561\n19683\n1350851717672992089\n\"\"\"\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1') == '1'\n\"\"\""
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3\\n1\\n2\\n10\\n') == '5'\n\"\"\"\nfrom typing import Dict\n\nimport sys\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"4\\n3\\n4\\n5\\n\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n\") == \"70\\n77\\n177177\\n999999999\\n55\\n10\""
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\">10\\n>8\\n>7\\n>2\\n1\\n1\\n1\") == \"70\"\nassert solution(\">10\\n>8\\n>7\\n>2\\n1\\n1\\n1\") == \"77\"\nassert solution(\">1234\\n>43\\n>4543\\n>39\\n>123212\\n1\\n1\\n1\") == \"177177\"\nassert solution(\">1000000000000000\\n>1000000000000000\\n>1\\n>1\\n>1\\n>1\") == \"999999999000000000\"\nassert solution(\">1000000000000000\\n>1000000000000000\\n>1\\n>1\\n>1\\n>1\") == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == '70\\n77\\n177177\\n999999999000000000\\n999999999\\n55\\n10'\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n7\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n\"\"\") == \"\"\"\n70\n77\n177177\n999999999\n999999999\n55\n10\n\"\"\""
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n\") == \"70 77 177177 999999999999999999 1 1 1\"\n\nassert solution(\"3 7 8 2\\n12 8 8 7\\n123 1 234\\n1 1 1\\n2 1 2\\n
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n') == '70\\n77\\n177177\\n999999999000000000\\n999999999\\n55\\n10'\n\nassert solution('7 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n') == '70\\n77\\n177177\\n999999999000000000\\n999999999\\n55\\n10'\n\n\"\"\"\n\n\n\"\"\"\n3 5\n2 5 3\n10 10 4 2\n2 2 1\n\n\"\"\"\n\n\n\nimport sys"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 10 8 5 3') == 70\nassert solution('12 8 8 7 2') == 77\nassert solution('12343 43 4543 39 123212') == 177177\nassert solution('1000000000 1000000000 1 1 1') == 9999999999999999999\nassert solution('1000000000 1000000000 1 1 1000000000') == 999999999999999999999999999999999999999999999999999999999999999\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n\") == \"70771771779999999999999\\n999999999\\n5510\"\nassert solution(\"8 7 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8 10 9 12\\n9 8"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3') == '2'\nassert solution('2\\n3\\n4') == '0'\nassert solution('2\\n3\\n5') == '2'\nassert solution('2\\n1\\n2') == '0'\nassert solution('3\\n1\\n2') == '2'\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n4 5') == '2'\nassert solution('3 3\\n4 5') == '0'\nassert solution('10 3\\n7 4') == '2'\nassert solution('2 4\\n1 1') == '1'"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"7 4\") == \"2\"\nassert solution(\"9 3\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"7 4\") == \"2\"\nassert solution(\"9 3\") == \"1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n10 10') == '1'\nassert solution('2 4\\n7 4') == '0'\nassert solution('9 3\\n2 4') == '2'\nassert solution('2 4\\n7 4') == '2'\n\"\"\"\n\nimport sys\nfrom math import ceil, log"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n10 10\") == '1'\nassert solution(\"2 4\\n7 4\") == '0'\nassert solution(\"9 3\\n\") == '2'\n\n-----Problem-----\n\nThe task is still described in the statement.\n\n\n\n\"\"\"\n\nfrom math import sqrt\nfrom sys import stdin\n\nINPUT_LINES = stdin.read().splitlines()\nassert len(INPUT_LINES) == 5\n\nINPUT_CASES = []\nfor _ in range(5):\n    case = [int(x) for x in INPUT_LINES[_].split()]\n    INPUT_CASES.append(case)\n\nOUTPUT_CASES = []\nfor case in INPUT_CASES:\n    case[0] += 1\n    OUTPUT_CASES.append(case[0] - case[1])\n\nfor _ in range(5):\n    print(OUTPUT_CASES[_])\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '1'\nassert solution('2\\n3') == '0'\nassert solution('7\\n7') == '0'\nassert solution('2\\n10') == '2'\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n2 3\n10 10\n2 4\n7 4\n9 3\n''') == '''1\n0\n2\n2\n1\n'''\nassert solution('''5\n9 8\n1 1\n5 7\n4 6\n4 9\n''') == '''0\n1\n1\n1\n1\n'''\nassert solution('''3\n10 10\n5 10\n4 9\n3 8\n2 7\n2 9\n1 5\n''') == '''2\n2\n0\n0\n0\n'''\nassert solution('''1\n5\n5\n''') == '''1\n0\n'''\nassert solution('''1\n100\n50\n''') == '''0\n'''"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n10 10') == '1'\nassert solution('2 4\\n7 4') == '0'\nassert solution('2 4\\n7 4') == '0'\nassert solution('2 4\\n7 4') == '0'\nassert solution('2 4\\n7 4') == '0'\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == '0'\nassert solution(\"7 4\") == '2'\nassert solution(\"9 3\") == '1'\n\nassert solution(\"2 3\") == '1'\nassert solution(\"10 10\") == '0'\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\nprint(solution(\"22\\n9999\\n1\\n777\"))\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1\n11\n1111\n1111\n1111\n2\n22\n2222\n2222\n2222\n2\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n7777\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('22\\n9999\\n1\\n777') == 13\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\n\"\"\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n22\n9999\n1\n777''') == '13\\n90\\n1\\n66'\nprint('Test passed\\n')\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('22') == '13'\nassert solution('9999') == '90'\nassert solution('1') == '1'\nassert solution('777') == '66'\n\"\"\""
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1') == 'YES\\n2 6\\n1 2'\nassert solution('4\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2') == 'YES\\n2 2\\n4 1'\nassert solution('4\\n6\\n2 2 2 2 2\\n5\\n2 2 2 2 2') == 'YES\\n2 2\\n4 1'\nassert solution('3\\n1\\n5\\n5\\n1 1 1 1 1') == 'NO'\n\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1') == 'YES\\n2 6\\n1 2'\nassert solution('4\\n6\\n2 2 2 2 2\\n5\\n2 2 2 2 2') == 'YES\\n2 2\\n4 1'\nassert solution('2\\n5\\n2 3') == 'NO'\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"4\\n6\\n2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\") == \"NO\"\nassert solution(\"3\\n1\\n1\\n1\\n1\") == \"NO\"\nassert solution(\"4\\n1\\n2\\n2\\n1\") == \"YES\\n1 2\\n1 3\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"4\\n2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"4\\n2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"NO\"\nassert solution(\"4\\n2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"NO\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 2 2 2 2\\n5\\n2 2 2 2 2\") == 'YES\\n2 2\\n4 1'\n\nassert solution(\"2\\n3\\n2 2 2\\n5\\n2 2 2 2\") == 'NO'\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\") == \"NO\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"5\\n2\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n1 2\\n2 1\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n\"\"\") == 'YES\\n2 6\\n1 2'\nassert solution(\"\"\"\n4\n6\n2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n\"\"\") == 'YES\\n2 2\\n4 1'\nassert solution(\"\"\"\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n3\n2 2 2\n5\n2 2 2 2 2\n\"\"\") == 'NO'\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\\n') == 'YES\\n2 6\\n1 2'\nassert solution('3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\\n') == 'NO'\nassert solution('4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\\n5\\n2 2 2 2 2\\n') == 'YES\\n2 2\\n4 1'\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nsys.stdin = open('input.txt')\nsys.stdout = open('output.txt', 'w')\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'NO'\nassert solution('2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1') == 'YES\\n2 6\\n1 2'\nassert solution('3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3') == 'NO'\nassert solution('4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2') == 'YES\\n2 2\\n4 1'"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n\"\"\") == 'YES\\n2 6\\n1 2\\n'\n\nassert solution(\"\"\"\n4\n2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n\"\"\") == 'YES\\n2 2\\n4 1'\n\nassert solution(\"\"\"\n6\n1 1 2 2 2 1\n6\n1 1 2 2 2 1\n\"\"\") == 'NO\\n'\n\nassert solution(\"\"\"\n6\n1 1 2 2 2 1\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n\"\"\") == 'YES\\n2 2\\n4 1'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3\") == 5\nassert solution(\"3 -1 0 2\") == 6\nassert solution(\"2 -3 -1 5 -4\") == 13\n\n\"\"\"\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        # \u6211\u4eec\u5148\u5c06\u6570\u7ec4\u5168\u90e8\u8d1f\u6570\uff0c\u7136\u540e\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u6b63\u6570\uff0c\u5219\u8fd9\u4e2a\u6b63\u6570\u4e3a\uff08\u6700\u5927\u503c\uff09\u7684\u7d22\u5f15\n        A = [-x for x in A]\n        # print(A)\n        ans = sum(A)\n        for i in range(K):\n            j = A.index(max(A))\n            A[j] = -A[j]\n            ans += A[j]\n\n        return ans\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 3') == '5'\nassert solution('3 -1 0 2') == '6'\nassert solution('2 -3 -1 5 -4') == '13'\nassert solution('2 1') == '2'\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(A = [4,2,3], K = 1) == 5\nassert solution(A = [3,-1,0,2], K = 3) == 6\nassert solution(A = [2,-3,-1,5,-4], K = 2) == 13\n\"\"\"\n\n\nfrom typing import List\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        # print(A)\n        for i, a in enumerate(A):\n            if a < 0 and K > 0:\n                A[i] = -A[i]\n                K -= 1\n        # print(A)\n        if K % 2 == 1:\n            A[-1] = -A[-1]\n        return sum(A)\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 3\") == \"5\"\nassert solution(\"3 -1 0 2\") == \"6\"\nassert solution(\"2 -3 -1 5 -4\") == \"13\"\nassert solution(\"2 0 2\") == \"3\"\n\n\"\"\"\n\n\nimport heapq\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A, K: int) -> int:\n        for i in range(K):\n            heapq.heapify(A)\n            minA = A[0]\n            A[0] = -A[0]\n            for j in range(1, len(A)):\n                A[j] = -A[j] if minA < A[j] else A[j]\n        return sum(A)\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3\") == 5\nassert solution(\"3 -1 0 2\") == 6\nassert solution(\"2 -3 -1 5 -4\") == 13\nassert solution(\"2 -3 -1 5 -4\") == 13\n\"\"\""
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 3') == '5'\nassert solution('3 -1 0 2') == '6'\nassert solution('2 -3 -1 5 -4') == '13'\n\n'''\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        \n        A.sort()\n        i = 0\n        while i < len(A) and K > 0 and A[i] < 0:\n            if K % 2 == 1:\n                A[i] *= -1\n            else:\n                A[i] = abs(A[i])\n            K -= 1\n            i += 1\n        return sum(A)\n        \n        \n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 3') == 5\nassert solution('3 -1 0 2') == 6\nassert solution('2 -3 -1 5 -4') == 13\n\"\"\"\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(A, K) == actual"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\", 5, 1) == \"\", \"Empty string, 5 times\"\nassert solution(\"\", 5, 3) == \"\", \"Empty string, 3 times\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\", 3, 1) == \"15\", \"Single number, 5 times\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\", 2, 1) == \"16\", \"Single number, 2 times\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\", 2, 2) == \"22\", \"Single number, 2 times\"\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 3') == 5\nassert solution('3 -1 0 2') == 6\nassert solution('2 -3 -1 5 -4') == 13\nassert solution('0 -1 0 1') == 1\nassert solution('1 1 1') == 1\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\n\n'''"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\n\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        if len(A) < 3:\n            return False\n        # \u7d2f\u52a0\n        sum_A = sum(A)\n        sum_div3 = sum_A // 3\n        # print(sum_A, sum_div3)\n        if sum_A % 3!= 0:\n            return False\n        sums = 0\n        for i in range(len(A) - 1):\n            sums += A[i]\n            if sums == sum_div3:\n                sums = 0\n                if i + 1 < len(A):\n                    sums += A[i + 1]\n                    if sums == sum_div3:\n                        sums = 0\n                        if i + 2 < len(A):\n                            sums += A[i + 2]\n                            if sums == sum_div3:\n                                return True\n        return False\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A = [0,2,1,-6,6,-7,9,1,2,0,1]\") == \"true\"\nassert solution(\"A = [0,2,1,-6,6,7,9,-1,2,0,1]\") == \"false\"\nassert solution(\"A = [3,3,6,5,-2,2,5,1,-9,4]\") == \"true\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\n\n\"\"\"\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        sum_ = sum(A)\n        if sum_ % 3!= 0:\n            return False\n        partition_num = sum_ // 3\n        cur_sum = 0\n        partition_index = -1\n        for i in range(len(A)):\n            cur_sum += A[i]\n            if cur_sum == partition_num:\n                partition_index = i\n                break\n        if partition_index == -1:\n            return False\n\n        partition_num_l = partition_num\n        partition_num_r = partition_num\n        cur_sum_l = 0\n        cur_sum_r = 0\n        for j in range(partition_index, -1, -1):\n            cur_sum_l += A[j]\n            if cur_sum_l == partition_num_l:\n                break\n        for j in range(partition_index + 1, len(A)):\n            cur_sum_r += A[j]\n            if cur_sum_r == partition_num_r:\n                break\n\n        return cur_sum_l == cur_sum_r and partition_index + 1 < j\n\n\nassert Solution().canThreePartsEqualSum([0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]) == True\nassert Solution().canThreePartsEqualSum([0, 2, 1, -6, 6, 7, 9, -1, 2, 0, 1]) == False\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 2 1 -6 6 -7 9 1 2 0 1') == 'true'\nassert solution('0 2 1 -6 6 7 9 -1 2 0 1') == 'false'\nassert solution('3 3 6 5 -2 2 5 1 -9 4') == 'true'\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('', [0,2,1,-6,6,-7,9,1,2,0,1]) == True\nassert solution('', [0,2,1,-6,6,7,9,-1,2,0,1]) == False\nassert solution('', [3,3,6,5,-2,2,5,1,-9,4]) == True\nassert solution('', [3,3,6,5,-2,2,5,1,-9,4,-2]) == False\n\n\"\"\""
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\n\"\"\"\nimport functools\nimport operator\nimport unittest\nimport numpy as np\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: 'List[int]') -> 'bool':\n        n = len(A)\n        if n < 3:\n            return False\n        total = sum(A)\n        if total % 3!= 0:\n            return False\n        target = total // 3\n        curr_sum = 0\n        i = 0\n        while i < n:\n            curr_sum += A[i]\n            if curr_sum == target:\n                break\n            i += 1\n        if curr_sum!= target:\n            return False\n        j = i + 1\n        while j < n:\n            curr_sum += A[j]\n            if curr_sum == 2 * target:\n                return True\n            j += 1\n        return False\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.s = Solution()\n\n    def test_solution(self):\n        A = [0,2,1,-6,6,-7,9,1,2,0,1]\n        self.assertEqual(True, self.s.canThreePartsEqualSum(A))\n\n        A = [0,2,1,-6,6,7,9,-1,2,0,1]\n        self.assertEqual(False, self.s.canThreePartsEqualSum(A))\n\n        A = [3,3,6,5,-2,2,5,1,-9,4]\n        self."
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('[0,2,1,-6,6,-7,9,1,2,0,1]') == True\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == False\nassert solution('[3,3,6,5,-2,2,5,1,-9,4]') == True\nassert solution('[1,2,1,2]') == False\nassert solution('[0,0,0]') == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == \"true\"\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == \"false\"\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == \"true\"\n\n\"\"\"\nfrom typing import List\n\nfrom sortedcontainers import SortedDict\n\nfrom Helpers import helper as hlp\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        s = sum(A)\n        if s % 3!= 0:\n            return False\n        target = s // 3\n        target_count = 0\n        running_sum = 0\n        for i in range(len(A)):\n            running_sum += A[i]\n            if running_sum == target:\n                target_count += 1\n                running_sum = 0\n            if target_count == 2:\n                return True\n        return False\n\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        dic = SortedDict()\n        for num in A:\n            dic[num] = dic.get(num, 0) + 1\n\n        s = sum(A)\n        if s % 3!= 0:\n            return False\n\n        count = 0\n        for key in dic:\n            if dic[key] > 0:\n                count += 1\n                if count == 3:\n                    break\n                dic[key] -= 1\n        if count == 3:\n            target = s // 3\n            running_sum = 0\n            for i in range(len(A)):\n                running_sum += A[i]\n                if running_sum == target:\n                    return True\n            return False\n        return False\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        s = sum(A)\n        if s % 3!= 0:\n            return False\n\n        s1, s2 = 0, 0\n        for i in range(len(A)):\n            s1 += A[i]\n            if s1 == s / 3:\n                break\n\n        if i == 0 or i == len(A) - 1:\n            return False\n\n        for j in range(i + 1, len(A)):\n            s2 += A[j]\n            if s2 == s / 3:\n                break\n\n        return s2 == s / 3\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1\\n1\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"6\\n1\\n1\\n1\\n2\\n1\\n1\") == \"2\"\nassert solution(\"6\\n2\\n2\\n2\\n2\\n2\\n2\") == \"2\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\nbeat\\n: \\nbeet\\n: \\nvet\\n: \\nbeet\\n: \\nbet\") == \"beet\\nvet\"\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\nimport sys\nimport itertools\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\nbeat\\n: beat\\nvet\\n: vet\\nbeet\\n: beet\\nbed\\n: bed\\nbet\\n: bet\") == \"beet and vet\"\n\"\"\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\nbea\nr\nbe\nv\ne\"\"\") == \"bea\"\n\"\"\"\n\nimport sys\n\nlines = list(map(lambda s: s.strip(), sys.stdin.readlines()))\ncounts = dict()\n\nfor i in range(1, len(lines)):\n    for letter in lines[i]:\n        if letter in counts.keys():\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n\ncounts = dict(sorted(counts.items(), key=lambda kv: (-kv[1], kv[0])))\n\nfor count in counts.values():\n    print(counts[count])\n\n\"\"\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\nbeat\\n: \\nbeat\\nvet\\n: \\nvet\\nbeet\\n: \\nbeet\\nbed\\n: \\nbed\\nvet\\n: \\nvet\\nbet\\n: \\nbet\\nbeet\\n') == 'beet\\nvet\\n'\n\"\"\"\n\nfrom typing import List, Dict"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\nbeet\\n:vet\\n:beet\\nbed\\n:vet\\nbet\\n:beet\\n\") == 'beet\\nvet'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\nbeat\\n:\\nbeet\\nvet\\n:\\nbeet\\n:\") == ['beet','vet']\nassert solution(\"4\\nab\\nba\\n:\\nab\\n\") == ['ab', 'ba']\n\n\"\"\"\n\nimport unittest\nfrom collections import defaultdict"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\neat\\n:vet\\n:beet\\n:bed\\n:vet\\n:bet\\n:beet') == 'beet\\nvet'\nassert solution('5\\nbeet\\n:vet\\n:beet\\n:bed\\n:vet\\n:bet\\n:beet') == 'beet\\nvet'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\nbeat\\n: \\nbeat\\nvet\\n: \\nvet\\nbeet\\n: \\nbeet\\nbed\\n: \\nbed\\nvet\\n: \\nvet\\nbet\\n: \\nbet\") == 'beet vet'\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\nbeat\\n:\\nbeet\\nvet\\n:\\nbeet\\nbet\\n:\\nbeet\") == \"beet and vet\"\n\n'''"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8\\n\") == \"8\"\n\"\"\"\nimport sys\n\nnum_of_cases = int(sys.stdin.readline())\ncost_matrix = []\nfor i in range(num_of_cases):\n    cost_matrix.append([int(num) for num in sys.stdin.readline().split()])\nfor row in cost_matrix:\n    row.sort()"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8\") == \"8\"\n\"\"\""
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == \"3\\n1 1 1\"\nassert solution(\"5\\n1 1 1 1 2\") == \"4\\n1 1 1 1 1\"\n\"\"\""
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8\") == '8'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n4 8\") == \"8\"\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n4 8\\n') == '8'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8\") == \"8\"\n\"\"\""
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8\\n') == '8'\n\"\"\"\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8\\n') == '8'\n\n\"\"\"\n\nimport sys\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nresult = 0\n\nfor i in range(len(a)):\n    for j in range(len(a)):\n        if i!= j:\n            result += (a[i]-a[j])**2\n\nprint(result)"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8\\n') == '8'\nassert solution('4 8\\n3 6\\n') == '8'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1234 150 100') == '84'\nprint('Test pass.')"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1234 150 100') == '84'\n\"\"\"\n\nX = int(input())\nA = int(input())\nB = int(input())\nleft_money = X - A - B\nprint(left_money)\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"4\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1234 150 100') == '1084'\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"150 100\") == \"84\"\nprint(\"Test succeeded.\")\n\n\"\"\""
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1234 150 100') == '84'\n\"\"\""
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\n1\\n1\\n') == '84'\nassert solution('3\\n1\\n2\\n') == '1'\n\n----\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1234 150 100') == '84'\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1234 150 100') == '84'\n\n------Solution-----\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2') == 8\nassert solution('1 1') == 1\nassert solution('2 0') == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2') == '8'\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == 8\n\"\"\"\n\nfrom math import comb"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"4\"\nassert solution(\"2 3\") == \"6\"\nassert solution(\"4 2\") == \"4\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"10 20\") == \"0\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n\") == 8\n\"\"\"\n\n\"\"\"\nSOLUTION:\nThis is a combinatorics problem. It can be solved by generating permutations of dogs and monkeys, and checking if they are distinct.\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n') == '8'\n\"\"\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2') == 8"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"8\"\nprint(\"Success!\")\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\\n\") == \"POSSIBLE\"\n\"\"\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"IMPOSSIBLE\"\nassert solution(\"3 2\\n1 3\\n1 2\\n2 3\") == \"IMPOSSIBLE\"\nassert solution(\"3 2\\n1 2\\n1 2\\n2 3\") == \"IMPOSSIBLE\"\nassert solution(\"1 1\\n1 1\") == \"POSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == 'POSSIBLE'\nassert solution(\"3 2\\n1 3\\n2 3\") == 'IMPOSSIBLE'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == IMPOSSIBLE\n\"\"\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"POSSIBLE\"\n\n---------------------------------------------------------------\n\nInput:\n4 4\n1 2\n1 3\n1 4\n2 3\n\nOutput:\nPOSSIBLE\n\n---------------------------------------------------------------\n\nInput:\n5 4\n1 2\n1 3\n1 4\n2 3\n3 4\n\nOutput:\nPOSSIBLE\n\n---------------------------------------------------------------\n\nInput:\n4 4\n1 3\n2 3\n2 4\n3 4\n\nOutput:\nIMPOSSIBLE\n\n---------------------------------------------------------------\n\nInput:\n3 1\n1 2\n2 3\n\nOutput:\nIMPOSSIBLE\n\n---------------------------------------------------------------\n\nInput:\n3 2\n1 2\n1 3\n1 4\n\nOutput:\nIMPOSSIBLE\n\n---------------------------------------------------------------\n\nInput:\n3 2\n1 3\n2 3\n1 4\n\nOutput:\nPOSSIBLE\n\n---------------------------------------------------------------\n\nInput:\n4 4\n2 3\n1 3\n2 4\n3 4\n\nOutput:\nPOSSIBLE\n\n---------------------------------------------------------------\n\nInput:\n5 5\n1 2\n1 3\n1 4\n2 3\n3 4\n\nOutput:\nPOSSIBLE\n\n---------------------------------------------------------------\n\nInput:\n5 5\n1 2\n1 3\n1 4\n2 3\n3 4\n4 5\n\nOutput:\nIMPOSSIBLE\n\n---------------------------------------------------------------\n\nInput:\n5 5\n1 2\n1 3\n1 4\n3 4\n4 5\n\nOutput:\nPOSSIBLE\n\n---------------------------------------------------------------\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == \"POSSIBLE\"\nassert solution('3 2\\n1 2\\n2 1') == \"IMPOSSIBLE\"\n\"\"\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n\"\"\"\n\nfrom typing import Dict"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\n-----"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(st.string) == sol.string\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solution(self, string: str) -> str:\n        return \"\".join([string[i] for i in range(1, len(string), 2)])\n\nimport sys"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"atcoder\"\n) == \"acdr\"\nassert solution(\n    \"abcde\"\n) == \"abcd\"\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoder\") == 'acdr'\nprint(solution(\"atcoder\"))\n\n\n-----\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nprint(\"test passed\")"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('atcoder') == 'acdr'\nassert solution('abc') == 'abc'\nassert solution('x') == 'x'\nassert solution('cccc') == 'cccc'"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoder\") == \"acdr\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('atcoder') == 'acdr'\nprint('Test Successful')\n\nIf you submit your code, the following test cases will be run:\n\nInput: atcoder\nExpected output: acdr\n\nInput: codeerr\nExpected output: edoer\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atcoder\nExpected output: acdr\n\nInput: atc"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'NO'\nassert solution('rng gorilla apple') == 'YES'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(A) == solution(B) == solution(C) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\n\n\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('rng gorilla apple') == 'YES'\nassert solution('rng l gorilla apple') == 'NO'\n\"\"\"\nimport sys\n\n\"\"\"\n1 2 3 4\n1 2 3\n1 3 2\n1 3\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('rng gorilla apple') == 'YES'\nassert solution('rng gorilla banana') == 'NO'\n\n\"\"\"\n\n\"\"\"\nUnderstand\n\nloop through each char in str\nfor each char, get the next chars \n\nIf we get the same char twice then we know it's a word chain\n\n\nPlan\n\nloop through each char\n        \n    for each char, get next chars\n        add to list\n\n    if char is in list, we have a word chain\n\n    otherwise, return False\n\n\n\nCode"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"rng peggy apple\") == \"NO\"\n\nprint('Hello, World!')\n\n\n\n1, 2, 3, 4, 5, 6\n\na = [1, 2, 3, 4, 5, 6]\n\nprint(a[-1])\nprint(a[-2])\n\nprint('Hello, World!')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint('Hello, World!')\n\n\n\n\n\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n\n\n\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6, 7]\n\nprint(a[-1])\nprint(a[-2])\n\n\n\n1, 2, 3, 4, 5, 6, 7\n\na = [1, 2, 3, 4, 5, 6,"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('rng gorilla apple') == 'YES'\nprint('Test passes successfully')\n\n----\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"rng kigo apple\") == \"NO\"\nassert solution(\"kigo rng apple\") == \"YES\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\n\nA = int(input())\nB = int(input())"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"\n\nimport sys\n\na, b = sys.stdin.readline().split()\nprint(\"GREATER\" if int(a) > int(b) else \"LESS\" if int(a) < int(b) else \"EQUAL\")\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\n\na, b = input().split(' ')"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\nprint(solution(\"36 24\"))\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\n\"\"\""
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\":2:1:1:\") == \"2\"\n\"\"\""
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\nprint(\"Teste passou!\")\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a:b') == 'a'\nassert solution('a:a') == ''\n\"\"\"\n\nimport ast"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\\n\") == 2\n\"\"\"\n\nn = int(input())\nstr1 = input()\nstr2 = input()\n\nfor i in range(1, n):\n    a, b = input().split()\n    if str1.count(a) < str2.count(b):\n        print(i)\n        break\nelse:\n    print(0)\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\n\"\"\"\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data) == test_result\n\n\"\"\"\n\nimport ast\nimport sys"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"3\\napple\\norange\\napple\\n1\\ngrape\\n\"\n) == \"2\"\nassert solution(\n    \"3\\napple\\napple\\napple\\n1\\ngrape\\n\"\n) == \"0\"\nassert solution(\n    \"3\\n\"\n) == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\\n\") == \"2\"\n\"\"\"\n\nN = int(input())\ns = input()\nt = input()\nM = int(input())\nm = input()\n\ns = s.split('\\n')\nt = t.split('\\n')\n\nans = 0\n\nfor i in range(N):\n    if s[i] == t[i]:\n        ans += 1\n    else:\n        break\n\nans += M - i\nprint(ans)\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\napple\\norange\\napple\\n1\\ngrape') == '2'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == 2\n\"\"\"\n\nn = int(input())\n\ns = input()\nt = input()\n\nm = int(input())\n\ncnt = 0\n\nfor i in range(m):\n    s_i, t_i = input(), input()\n    if s_i == s and t_i == t:\n        cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'C'\nassert solution('T') == 'A'"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == expected_output\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'C'\nassert solution('T') == 'A'\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\"\n\nletter_map = {\n    \"A\": \"T\",\n    \"T\": \"A\",\n    \"C\": \"G\",\n    \"G\": \"C\"\n}"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'C'\nassert solution('T') == 'A'\n\"\"\"\n\n\"\"\"\nEXAMPLE #2\n-------\nLet's say that A bonds with C, C bonds with G, G bonds with T, and T bonds with A.\n\nThe base A bonds with A, the base C bonds with C, the base G bonds with G, the base T bonds with T.\n\nWrite 5 lines of code to test the correctness of solution:\nOn the Planet AtCoder, there are four types of bases: A, C, G and T. A bonds with T, and C bonds with G.\nYou are given a letter b as input, which is A, C, G or T. Write a program that prints the letter representing the base that bonds with the base b.\n\n-----Constraints-----\n - b is one of the letters A, C, G and T.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nb\n\n-----Output-----\nPrint the letter representing the base that bonds with the base b.\n\n-----Sample Input-----\nA\n\n-----Sample Output-----\nA"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A\") == \"T\"\n\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == \"14\"\n\"\"\""
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == 14\n\"\"\"\n\n\"\"\"\nThe algorithm below uses dp approach to solve the problem.\n\nLet dp[i][j] be the number of candies collected if you start in (i, j) and end in (2, n)\n\ndp[i][j] = A[i][j] + dp[i+1][j] + dp[i][j+1] + dp[i+1][j+1]\n\ni.e. we want to collect the maximum number of candies we can when we reach the end of the right-most column or the bottom-most row.\n\nIf we move right, we add the candies to the rightmost column, and we also need to add the candies we currently have to the next row.\nIf we move down, we add the candies to the bottommost row, and we also need to add the candies we currently have to the next column.\n\nWe can split this into two subproblems:\n\n1. dp[i+1][j] - the candies in the right-most column\n2. dp[i][j+1] - the candies in the bottom-most row\n\nBoth these subproblems are solved using the same algorithm.\n\nSo we can solve this problem using O(N) space and O(N^2) time.\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == 14\n\"\"\"\n\nn = int(input())\na = [list(map(int, input().split())) for i in range(2)]\n\nmax_sum = 0\n\nfor i in range(n):\n    for j in range(n):\n        max_sum = max(max_sum, a[0][j] + a[1][i])\n\nprint(max_sum)\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 2 2 4 1\") == \"14\"\n\"\"\""
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3 2 2 4 1\") == \"14\"\n\"\"\""
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n3 2 2 4 1') == '14'"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n3 2 2 4 1') == '14'\nassert solution('6\\n3 2 5 4 1') == '15'\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n3 2 2 4 1') == '14'\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n3 2 2 4 1') == '14'\nassert solution('5\\n1 2 2 4 1') == '14'\n\"\"\""
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2 3 4\") == \"4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n\nimport sys\n\nn, x = list(map(int, sys.stdin.readline().split()))\na = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1\\n1 1 1 1 1\") == \"7\"\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def __init__(self, input: str):\n        self.input = input\n\n    def solution(self):\n        pass"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 2\\n') == '1'\nassert solution('5 7 9\\n') == '3'\nassert solution('1 2 2\\n') == '0'\nassert solution('7 7 7\\n') == '0'\n\"\"\""
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5') == '3'"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\nassert solution(\"5 10\\n1 3 5 1 1\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 3 4\") == \"8\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"4\"\nassert solution(\"10 10\\n1 2 3 4 5 6 7 8 9 10\") == \"14\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"2\"\n\nassert solution(\"1 1\") == \"0\"\n\nassert solution(\"3 3\") == \"1\"\n\nassert solution(\"6 3\") == \"2\"\n\nassert solution(\"8 3\") == \"3\""
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2\") == \"1\"\nassert solution(\"3 3 1 1 1 1\") == \"4\"\nassert solution(\"3 3 0 1 1 1\") == \"4\"\nassert solution(\"4 2 2 1 1 1\") == \"5\"\nassert solution(\"10 7 5 4 3 3\") == \"13\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\nassert solution('1 0 1\\n2 1 2\\n1 1 1') == 'No'\n\"\"\""
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\n---------------------\n\nWe have a 3 \\times 3 grid. A number c_{i, j} is written in the square (i, j), where (i, j) denotes the square at the i-th row from the top and the j-th column from the left.\n\nAccording to Takahashi, there are six integers a_1, a_2, a_3, b_1, b_2, b_3 whose values are fixed, and the number written in the square (i, j) is equal to a_i + b_j.\n\nDetermine if he is correct.  \n\n-----Constraints-----\n - c_{i, j} \\ (1 \\leq i \\leq 3, 1 \\leq j \\leq 3) is an integer between 0 and 100 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nc_{1,1} c_{1,2} c_{1,3}\nc_{2,1} c_{2,2} c_{2,3}\nc_{3,1} c_{3,2} c_{3,3}\n\n-----Output-----\nIf Takahashi's statement is correct, print Yes; otherwise, print No.\n\n-----Sample Input-----\n1 0 1\n2 1 2\n1 0 1\n\n-----Sample Output-----\nYes\n\nTakahashi is correct, since there are possible sets of integers such as: a_1=0,a_2=1,a_3=0,b_1=1,b_2=0,b_3=1.\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'Yes'\nassert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\n\n'''\nfrom collections import defaultdict\n\nmapping = defaultdict(int)\ntotal_count = 0\n\nfor line in stdin.splitlines():\n    if line:\n        i, j = [int(x) for x in line.split()]\n        mapping[i] += j\n        total_count += j\n\nprint('Yes' if mapping[1] == total_count and mapping[2] == total_count and mapping[3] == total_count else 'No')"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1 0 1\n2 1 2\n1 0 1\n''') == 'Yes'\nassert solution('''1 0 1\n2 1 2\n1 0 1\n''') == 'No'\n\n'''\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"1 0 1\\n2 1 2\\n1 0 1\\n\") == \"Yes\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1\\n') == 'Yes'\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"2 1 2\\n1 0 1\\n1 0 1\") == \"No\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\"\"\"\nfrom __future__ import print_function\nimport sys\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABC\") == \"ARC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC\") == \"ARC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC\") == \"ARC\"\n\nprint(solution(\"ABC\"))\n\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ARC') == 'ABC'\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC\") == \"ARC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ARC\") == \"ARC\"\nassert solution(\"ABC\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(ABC) == ARC\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 8 2\\n') == '3'\nprint('Success')"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 8 2\\n') == '3'\n\"\"\"\n\na, b, x = [int(s) for s in stdin.split()]\n\nn = 0\nfor i in range(a, b + 1):\n    if i % x == 0:\n        n += 1\nprint(n)\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 2\") == \"3\"\nprint(solution(\"4 8 2\"))\n\nimport math"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 8 2') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8 2') == '3'\nassert solution('1 2 4') == '0'\nassert solution('2 4 6') == '1'\nassert solution('2 2 2') == '0'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"4 8 2\"\n) == \"3\"\nassert solution(\n\"4 8 6\"\n) == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 8 2''') == '''3'''\nassert solution('''1 2 3''') == '''0'''\nassert solution('''4 9 2''') == '''1'''\nassert solution('''2 20 3''') == '''0'''\nassert solution('''1 10 3''') == '''2'''\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"25\") == \"Christmas\"\n\n-------"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"25\") == \"Christmas\"\nassert solution(\"24\") == \"Christmas Eve\"\nassert solution(\"23\") == \"Christmas Eve Eve\"\nassert solution(\"22\") == \"Christmas Eve Eve Eve\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"25\") == \"Christmas\"\nassert solution(\"24\") == \"Christmas Eve\"\nassert solution(\"23\") == \"Christmas Eve Eve\"\n\"\"\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(12) == 'Christmas'\nassert solution(25) == 'Christmas'\nassert solution(24) == 'Christmas Eve'\nassert solution(23) == 'Christmas Eve Eve'\nassert solution(22) == 'Christmas Eve Eve Eve'\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"12\") == \"Christmas\"\nassert solution(\"13\") == \"Christmas Eve\"\nassert solution(\"14\") == \"Christmas Eve Eve\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('25') == 'Christmas'\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(25) == \"Christmas\"\nassert solution(24) == \"Christmas Eve Eve Eve\"\nassert solution(23) == \"Christmas Eve\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n\"\"\"\n\nD = int(input())"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('25') == \"Christmas\"\nassert solution('24') == \"Christmas Eve\"\nassert solution('23') == \"Christmas Eve Eve\"\nassert solution('22') == \"Christmas Eve Eve Eve\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7') == '4'\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n\") == \"4\"\nassert solution(\"8\\n\") == \"4\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7') == '4'\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\") == \"4\"\nprint(solution(\"7\"))\n\"\"\"\n\nN = int(stdin.readline())\n\nmax_div2_count = -1\nmax_num = -1\nfor i in range(1, N + 1):\n    div2_count = 0\n    while i % 2 == 0:\n        i = i // 2\n        div2_count += 1\n    if div2_count > max_div2_count:\n        max_div2_count = div2_count\n        max_num = i\n\nprint(max_num)\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n') == '4\\n'\n\n\"\"\"\n\nn = int(input())\nprint(n // 2 + 1)\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == 4\nprint(solution('3'))\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7') == '4'\nprint('Test passes.')\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"Yes\"\nassert solution(\"1 2 3 5\") == \"No\"\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\"\n\na, b, c, d = (int(x) for x in stdin.split())"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\"\n\n\"\"\"\n(0)\n(1)\n(2)\n(3)\n(4)\n(5)\n(6)\n(7)\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def indirect(self, a, b, c, d):\n        if a + b <= d and a + c <= d:\n            return \"Yes\"\n        else:\n            return \"No\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 7 9 3') == 'Yes'\nassert solution('1 2 3 4') == 'No'\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 7 9 3') == 'Yes'\nassert solution('4 4 6 6') == 'No'\nassert solution('4 6 5 4') == 'Yes'\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7 9 3') == 'Yes'"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n\n\"\"\"\nStep 1: \nCreate a list from the 3 input strings.\n\nStep 2:\nInitialize an empty string\n\nStep 3:\nFor every word in the list,\nsplit the word into a list of lowercase characters,\nthen for every character in the list,\nappend it to the empty string.\n\nStep 4:\nConvert the empty string to uppercase and return it\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100 200 300\\n') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"20 50 100\") == \"No\"\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('50 100 120') == 'Yes'\nassert solution('100 150 150') == 'No'\nassert solution('50 100 120') == 'Yes'\nassert solution('50 100 120') == 'Yes'\nassert solution('50 100 120') == 'Yes'\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"50 100 125\") == \"No\"\nassert solution(\"50 100 90\") == \"No\"\n\"\"\"\n\nA, B, C = map(int, input().split())"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('50 100 120') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\"\"\"\n\na, b, c = map(int, input().split())"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"50 100 300\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == 'Yes'\nassert solution('0 0 0') == 'No'\nassert solution('0 0 120') == 'Yes'\nassert solution('0 1 1') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"50 101 120\") == \"No\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 9 8 9\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 8\n7 9 8 9\n''') == '5'\n\n\"\"\"\ninput: \n\n4 8\n7 9 8 9\n\noutput:\n5\n\"\"\"\n\n\"\"\"\ninput: \n4 8\n1 1 1 1\n\noutput:\n1\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == '5'\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\nassert solution('3 5\\n8 5 1 2') == '1'\nassert solution('5 8\\n3 2 2 2 3') == '0'\nassert solution('6 9\\n2 3 4 5 3 6') == '4'\nassert solution('2 6\\n3 4 1 5 2 6') == '1'\n\"\"\"\n\nN, A = input().split(' ')\nN, A = int(N), int(A)\n\ncards = [int(i) for i in input().split(' ')]\n\nsum_cards = 0\n\nfor card in cards:\n    sum_cards += card\n\nsum_cards = sum_cards / N\n\ncount = 0\n\nfor i in range(N):\n    if (sum_cards + cards[i]) / (i + 1) == A:\n        count += 1\n\nprint(count)"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\n\"\"\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 2 3') == '4 2 1 3'\nassert solution('4 1 2 3 4') == '4 2 1 3'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"4 2 1 3\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\"\"\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == \"4 2 1 3\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\") == '4 2 1 3'\n\"\"\""
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4\\n') == '4 2 1 3'\n\n----------\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\n\"\"\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\nassert solution('5\\n1 2 3 4 5') == '5 4 2 1 3'\nassert solution('6\\n1 2 3 4 5 6') == '6 5 4 2 1 3'\nassert solution('7\\n1 2 3 4 5 6 7') == '7 6 5 4 2 1 3'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '8 7 6 5 4 2 1 3'\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\"\"\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\nimport sys\n\nH, N = map(int, sys.stdin.readline().split())\n\nA = list(map(int, sys.stdin.readline().split()))\n\ncount = 0\nresult = \"Yes\"\nfor i in range(N):\n    if A[i] >= H:\n        count += 1\n    elif A[i] == 1:\n        count += 1\n    if count >= 2:\n        result = \"No\"\n        break\n\nprint(result)\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\nassert solution(\"20 10\\n10 10 10 10 10 10 10 10 10 10 10 10\") == \"No\"\n\"\"\"\n\nimport unittest\nimport sys"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''10 3\n4 5 6''') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 3\\n4 5 6') == 'Yes'\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5 6') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 3\\n4 5 6\") == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 3\\n4 5 6\\n') == 'Yes'\n\"\"\"\n\nimport sys\n\nH, N = map(int, sys.stdin.readline().split())\nA = [int(x) for x in sys.stdin.readline().split()]\n\nA.sort()\nprint('Yes' if H > sum(A[N - 1:]) else 'No')\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 3\\n4 5 6\\n\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abaababaab') == 6\nassert solution('aaaaa') == 5\n\"\"\"\n\nfrom typing import Dict, List\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abaababaab\") == 6\n\"\"\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abaababaab\") == 6\nassert solution(\"aaaaaa\") == 3\nassert solution(\"ababab\") == 3\nassert solution(\"aaaa\") == 1\n\"\"\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ababab\") == \"6\"\nassert solution(\"aaaaa\") == \"6\"\nassert solution(\"abaababaab\") == \"6\"\nassert solution(\"ababab\") == \"6\"\nassert solution(\"a\") == \"1\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abaababaab') == 6\nassert solution('aaaabaab') == 8\nassert solution('abaababa') == 6\nassert solution('aaaaaa') == 6\nassert solution('aab') == 3\n\"\"\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abaababaab\") == 6\n\"\"\"\n\ns = input()\n\ni = 1\nj = -1\nwhile j < len(s):\n    if s[j] == s[i]:\n        i += 1\n        j += 1\n    else:\n        j += 1\n\nprint(i)\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\nprint(\"Hooray!\")\n\n'''"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcdefghij') == 10\nassert solution('abcd') == 4\n\"\"\"\n\nimport sys\nimport re\n\nstdin = sys.stdin.readline().strip()\nstdin = stdin.replace(' ', '')"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abaababaab') == 6\nassert solution('aaaabab') == 6\nassert solution('ababab') == 4\nassert solution('abab') == 2\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('abc') == 'No'\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"bac\") == \"No\"\n\nsolution(\"abac\")\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bac\") == \"Yes\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    'bac'\n) == 'Yes'\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abcd') == 'dcba'\nassert solution('abc') == 'cba'\nassert solution('cde') == 'dec'\nassert solution('ade') == 'eac'\nassert solution('abf') == 'fab'\n\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('bca') == 'No'\nassert solution('cab') == 'Yes'\nassert solution('cba') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"abca\") == \"Yes\"\nassert solution(\"abcb\") == \"No\"\nassert solution(\"abcba\") == \"No\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abc\") == \"Yes\", \"Wrong answer\"\nassert solution(\"abc\") == \"Yes\", \"Wrong answer\"\nassert solution(\"abd\") == \"No\", \"Wrong answer\"\nassert solution(\"cba\") == \"Yes\", \"Wrong answer\"\nassert solution(\"aaa\") == \"No\", \"Wrong answer\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"bac\") == \"Yes\"\nassert solution(\"bca\") == \"No\"\nassert solution(\"acb\") == \"No\"\nassert solution(\"cab\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1) == 1\nassert solution(2) == 0\nassert solution(3) == 3\n\"\"\"\nfrom sys import stdin, stdout"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\nprint(solution(\"1\\n1000000\\n1000000\"))\n\"\"\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 8 7 2 4\\n9 7 2 9 3') == '646'\n\"\"\"\n\nfrom math import factorial\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\narr = []\nfor i in range(n):\n    arr.append((a[i], b[i]))\n\narr.sort(key=lambda x: x[0] * x[1])\n\nprint(sum([a * b for a, b in arr]))\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3\\n4 2') == '20'\n\n\"\"\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\nassert solution(\"1\\n1000000\\n1000000\") == \"757402647\"\n\"\"\"\n\nimport math\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na.sort()\nb.sort()\n\nresult = 0\n\nfor i in range(n):\n    result += a[i] * b[i]\n\nprint(result % 100000000)\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('1 2') == '2'\nassert solution('1 3') == '1'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\nassert solution(\"1\\n1000000\\n1000000\") == \"757402647\"\nassert solution(\"2\\n1 3\\n4 2\") == \"20\""
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"5\\n1 8 7 2 4\\n9 7 2 9 3\"\n) == \"646\"\nassert solution(\n    \"1\\n1000000\\n1000000\"\n) == \"757402647\"\nassert solution(\n    \"2\\n1 3\\n4 2\"\n) == \"20\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5\n1 8 7 2 4\n9 7 2 9 3\"\"\") == \"646\"\n\nassert solution(\"\"\"5\n1 8 7 2 4\n9 7 2 9 3\"\"\") == \"646\"\n\nassert solution(\"\"\"5\n1 8 7 2 4\n9 7 2 9 3\"\"\") == \"646\"\n\nassert solution(\"\"\"4\n1 2 3 4\n2 3 4 1\"\"\") == \"24\"\n\nassert solution(\"\"\"10\n98776 79050 69123 90115 219549 62980 3\n169940 99738 72939 61198 99169 93067 792489\n163885 56115 8930 85342 43334 66834 76687 99568\n59956 72661 09866 55926 75699 79992 92996 51568\n92371 06497 68422 81565 70454 87081 56773 53799\n73412 75826 46441 07571 44118 86596 58737 42510\n73859 65622 92764 84655 14598 9904 91607 47829\n96450 42141 78792 03880 52434 06810 51675 26144\n83439 02556 71275 80438 98940 62449 82697 67880\n09905 61172 85938 82496 64898 71156 81286 51803\"\"\") == \"0\""
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2\\n2 5 7 4 6\") == \"17\"\n\"\"\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n\") == '7'\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == '17'\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == '17'"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1') == '7'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7') == '17'\nassert solution('5 1 4\\n2 5 7 4 6\\n5 4\\n') == '17'\n\"\"\"\n\n\nimport sys\nimport heapq\n\n\nclass Offer:\n    def __init__(self, price, n_free, x_free, y_free):\n        self.price = price\n        self.n_free = n_free\n        self.x_free = x_free\n        self.y_free = y_free\n\n    def __lt__(self, other):\n        return self.price < other.price\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 3\\n2 5 7 4 6\\n5 4\\n2 1\\n3 1\") == \"7\"\n\n\"\"\"\n\nn, m, k = [int(i) for i in input().split()]\nprice = [int(i) for i in input().split()]\noffer = []\nfor i in range(m):\n    offer.append([int(i) for i in input().split()])\n\ncost = 0\nstart, end = 0, min(k, n)\n\nfor i in range(start, end):\n    cost += price[i]\nfor i in range(m):\n    if offer[i][0] <= k:\n        for j in range(k // offer[i][0]):\n            for j in range(offer[i][1]):\n                cost += price[offer[i][0] - 1 + j]\nprint(cost)\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1') == '17'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n') == '17'\nassert solution('5 1 4\\n2 5 7 4 6\\n5 4\\n') == '17'\n\"\"\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"7\"\n\n\"\"\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1') == '7'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7') == '17'\n\"\"\"\n\nn, m, k = [int(x) for x in input().split()]\nshovels = [int(x) for x in input().split()]\nshovels.sort()\nk -= 1"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == '7'\n\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == '17'\n\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == '17'\n\n\"\"\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1') == '7'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7') == '17'\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\n1\\n') == '1'\nassert solution('\\n2\\n') == '2'\nassert solution('\\n3\\n') == '3'\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"1\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''7\n1 2\n2 3\n3 4\n4 5\n4 6\n5 7''') == '2'\n\nassert solution('''7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7''') == '0'\n\nassert solution('''7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7''') == '1'\n\nassert solution('''5\n1 2\n1 3\n2 4\n3 4''') == '1'\n\nassert solution('''5\n1 2\n2 3\n3 4\n4 5''') == '0'"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\") == \"2\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == \"1\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2\\n') == '0'\nassert solution('4\\n1 2\\n1 3\\n2 3\\n') == '1'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n') == '0'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n') == '1'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '2'\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n4\") == \"2\"\nassert solution(\"4\\n1 2\\n2 1\\n3 4\\n4\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == \"1\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"1\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"1\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\"\n) == \"2\"\nassert solution(\n    \"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\"\n) == \"0\"\nassert solution(\n    \"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\"\n) == \"1\"\n\n\"\"\""
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"1\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7') == '2'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7') == '0'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7') == '1'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n2 3\") == \"2\"\nassert solution(\"1 2\\n2 3\\n3 4\") == \"1\"\nassert solution(\"1 2\\n2 3\\n3 4\\n4 5\") == \"0\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\") == \"10\\n15\\n1999999999\\n113\\n1000000001\\n1\"\nassert solution(\"1\\n1\\n1\\n1\") == \"2\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3,7) == 10\nassert solution(4,12) == 15\nassert solution(2,1000000000) == 1999999999\nassert solution(7,97) == 113\nassert solution(1000000000,10000000) == 1\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 12') == '5'\nassert solution('3 7') == '10'\nassert solution('2 1000000000') == '1000000001'\nassert solution('7 97') == '113'\nassert solution('1000000000 1000000000') == '1999999999'\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 7\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 12\") == \"13\"\nassert solution(\"3 7\") == \"10\"\nassert solution(\"2 1000000000\") == \"1000000001\"\nassert solution(\"7 97\") == \"113\"\nassert solution(\"1000000000 1000000000\") == \"1999999999\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7\") == \"10\"\nassert solution(\"4 12\") == \"15\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\nassert solution(\"1000000000 1000000000\") == \"1000000001\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\n''') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\n\n\"\"\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\nprint('All tests passed.')"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(output)"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n\n\"\"\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\") == '2'\nassert solution(\"10 4\") == '3'\n\n\"\"\""
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7 2\n1 2 3 2 1 3 2\n''') == '2\n2 1'\n\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3\n''') == '3\n1 3 2'\n'''\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2') == '2'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3') == '3'\n\"\"\"\n\nn, k = map(int, input().split())\nnums = list(map(int, input().split()))"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7 2\n1 2 3 2 1 3 2''') == '2\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3''') == '3\nassert solution('''10 5\n2 3 3 1 1 2 1 2 3 3''') == '3\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3''') == '2\nassert solution('''10 5\n2 3 3 1 1 2 1 2 3 3''') == '3\n''') == '3\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2') == '2\\n2 1'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3') == '3\\n1 3 2'\nassert solution('5 4\\n2 3 3 1 1 2') == '1\\n3 2'\nassert solution('6 4\\n2 3 3 1 1 2') == '1\\n3 2'\nassert solution('1 1\\n2') == '0'\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\nassert solution(\"10 4\\n2 3 3 2 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\") == \"2\"\nassert solution(\"10 4\") == \"3\"\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2') == '2'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n\"\"\""
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100''') == '263'\n\n\n'''\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\nassert Solution().solution('''5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100''') == '263'\n'''\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == '263'\n\"\"\""
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\nassert solution(\"10\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"265\"\nassert solution(\"6\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"255\"\nassert solution(\"1\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"255\"\nassert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"255\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(\"The input/output is correct!\")\n\"\"\"\nimport sys\n\nsys.stdin = open(\"input.txt\")\nsys.stdout = open(\"output.txt\", \"w\")\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n\"\"\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n\"\"\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n\"\"\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\nassert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"253\"\nassert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"264\"\n\n-----Solution-----\n\n\"\"\"\nfrom typing import List, Tuple\n\nimport sys\n\nDEBUG = False\ndata = sys.stdin.read().strip()\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n\n\"\"\"\n\nimport sys\nimport time\nimport re\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''abacaba''') == '''3'''\nassert solution('''dfcbbcfeeedbaea''') == '''6'''\nassert solution('''abcdeeeeeeeeeeeefghiiiiijkkllllmmmmmnnnoopppqrrrrssssstttttuuuvvwwwwyyzzz''') == '''23'''\nassert solution('''codeforces''') == '''5'''\nassert solution('''codeforce''') == '''1'''\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"6\"\n\"\"\""
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''codeforces''') == '''codeforces'''\nassert solution('''codeforces''') == '''codeforces'''\nassert solution('''codeforces''') == '''codeforces'''\n\nassert solution('''codeforces''') == '''codeforces'''\nassert solution('''codeforces''') == '''codeforces'''\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('codeforces') == 'force'\nassert solution('codeforces', 5) == 'codeforces'\nassert solution('codeforces', 15) == 'frcbccceeefddeb'\nassert solution('codeforces', 10 ** 5) == 'codeforc'\nassert solution('codeforces', 10 ** 5, 5) == 'codeforces'\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"5\"\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"2\"\nassert solution(\"abcde\") == \"5\"\nassert solution(\"aaaa\") == \"6\"\nassert solution(\"aaaaaaaaaaa\") == \"8\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abacaba') == '3'\nassert solution('dfcbbcfeeedbaea') == '5'\nassert solution('codeforces') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"5\"\nassert solution(\"abcab\") == \"2\"\nassert solution(\"abbcabb\") == \"3\"\nassert solution(\"aaabbbb\") == \"2\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"5\"\nassert solution(\"gjjg\") == \"1\"\nassert solution(\"bbbcdfbb\") == \"4\"\n\"\"\""
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacaba') == '3'\nassert solution('dfcbbcfeeedbaea') == '5'\n\"\"\""
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563') == '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n9') == '8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n9'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9') == '1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n10') == '1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n10'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n11') == '1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n11'\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563') == '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('154873296') == '154873396'\nassert solution('386592714') == '336592714'\nassert solution('729641835') == '729645835'\nassert solution('863725149') == '863725145'\nassert solution('975314628') == '979314628'\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"154873296\") == \"154873396\"\nassert solution(\"386592714\") == \"336592714\"\nassert solution(\"729641835\") == \"729645835\"\nassert solution(\"863725149\") == \"863725145\"\nassert solution(\"975314628\") == \"979314628\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\\n\"\n\"\"\"\n\nimport math\nfrom itertools import permutations, product\n\nt = int(input())\n\nfor i in range(t):\n    lines = input()\n    rows = []\n    cols = []\n    blocks = []\n    result = \"\"\n    for j in range(9):\n        lines = lines.replace(str(j + 1), \" \")\n        rows.append(list(map(int, lines[j * 9: j * 9 + 9])))\n    for j in range(9):\n        cols.append([i[j] for i in rows])\n    for i in range(3):\n        for j in range(3):\n            blocks.append([rows[i + k][j + l] for k, l in product(range(3), range(3))])\n    blocks = list(map(list, zip(*blocks)))\n    for row in range(9):\n        for col in range(9):\n            if rows[row][col] == 0:\n                rows[row][col] = list(range(1, 10))\n                for block in blocks:\n                    if col in block:\n                        block.remove(col)\n                    if row in block:\n                        block.remove(row)\n                for i in range(9):\n                    if col in rows[i]:\n                        rows[i].remove(col)\n                    if row in rows[i]:\n                        rows[i].remove(row)\n                for i in range(9):\n                    if col in cols[i]:\n                        cols[i].remove(col)\n                    if row in cols[i]:\n                        cols[i].remove(row)\n                for i in range(3):\n                    for j in range(3):\n                        if col in blocks[i + j]:\n                            blocks[i + j].remove(col)\n                        if row in blocks[i + j]:\n                            blocks[i + j].remove(row)\n    for row in rows:\n        result += \"\".join(map(str, row))\n    print(result)\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"154873296\\n\"\n\"386592714\\n\"\n\"729641835\\n\"\n\"863725149\\n\"\n\"975314628\\n\"\n\"412968357\\n\"\n\"631457982\\n\"\n\"598236471\\n\"\n\"247189563\") == \"154873396\\n\" \"336592714\\n\" \"729645835\\n\" \"863725145\\n\" \"979314628\\n\" \"412958357\\n\" \"631457992\\n\" \"998236471\\n\" \"247789563\"\n\n\"\"\"\nimport string\nimport itertools\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'154873296'\n) == '154873396'\nassert solution(\n'386592714'\n) == '336592714'\nassert solution(\n'729641835'\n) == '729645835'\nassert solution(\n'863725149'\n) == '863725145'\nassert solution(\n'975314628'\n) == '979314628'\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(s) == s\n\n-----Constraints-----\n\n$t$: $1 \\le t \\le 10^4$\n$s$: $9 \\times 9$ matrix\n$s[i][j]$: $1 \\le s[i][j] \\le 9$\n\"\"\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n6\\n8\\n-1\\n9\\n4\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 1\\n1 3\") == \"2\"\nassert solution(\"4 3\\n1 1\\n1 3\\n2 4\") == \"2\"\nassert solution(\"4 3\\n1 1\\n1 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"4 3\\n1 1\\n1 3\\n2 4\\n2 5\\n2 6\") == \"1\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n') == '1 2 3'\nassert solution('1 2 3\\n4 5 6\\n') == '1 2 3 4 5 6'\n\"\"\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n3 1\\n2 3\\n4 4\\n2 5\\n4 6\\n1 6\\n1 7\\n2 7\\n1 8\\n2 8\\n1 9\\n2 9\\n3 9\\n5 9\\n') == '3\\n3\\n-1\\n9\\n8\\n7\\n7\\n8\\n9\\n8\\n-1\\n9\\n'\n\"\"\"\n\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open('./input.txt').read()) == open('./output.txt').read()"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n3 1') == '1'\nassert solution('4 2\\n3 2') == '2'\nassert solution('3 2\\n1 2') == '1'\nassert solution('4 2\\n2 1') == '2'\n\nassert solution('5 3\\n1 3\\n3 1\\n1 2') == '2'\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\\n0 2\\n3 5\\n0 4\") == \"4\"\nassert solution(\"1 2 3\\n0 2\\n3 5\\n0 4\\n0 1\\n0 7\") == \"7\"\nassert solution(\"1 2 3\\n0 2\\n3 5\\n0 4\\n0 1\\n0 7\\n0 8\\n0 9\\n0 6\\n0 10\\n0 11\") == \"7\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 7\") == 3\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nstructure = [[] for _ in range(n + 1)]\n\nfor i in range(1, n):\n    a, b = map(int, sys.stdin.readline().split())\n    structure[b].append(a)\n\nfor _ in range(m):\n    a, b = map(int, sys.stdin.readline().split())\n    for i in structure[a]:\n        if b == i:\n            print(a)\n            break\n    else:\n        print(-1)\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n1 3\\n1 2\") == \"2\\n1\\n1\\n-1\"\nassert solution(\"6 2\\n1 5\\n1 4\\n2 3\\n2 4\") == \"2\\n1\\n1\\n2\\n1\\n2\"\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test(self):\n        pass"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"9 6\\n\"\n\"1 1 1 3 5 3 5 7\\n\"\n\"3 1\\n\"\n\"1 5\\n\"\n\"3 4\\n\"\n\"7 3\\n\"\n\"1 8\\n\"\n\"1 9\"\n) == \"3\\n6\\n8\\n-1\\n9\\n4\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\"\"\") == \"YES\\nYES\\nNO\\nNO\\nYES\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1 100000\") == \"YES\"\nassert solution(\"3 3 1 100010\") == \"NO\"\nassert solution(\"3 3 1 100100\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3') == 'YES'\nassert solution('5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3') == 'YES'\nassert solution('5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3') == 'YES'\nassert solution('5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3') == 'YES'\nassert solution('5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3') == 'YES'\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"NO\"\nassert solution(\"101 101 101 3\") == \"YES\"\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline().strip())\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2 3 4\") == \"NO\"\nassert solution(\"2\\n5 4 3\") == \"NO\"\nassert solution(\"3\\n3 2 5\") == \"NO\"\nassert solution(\"4\\n4 2 4\") == \"NO\"\nassert solution(\"5\\n4 2 3\") == \"YES\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n3 2 1 8''') == 'YES'\n\nassert solution('''100 101 102 105''') == 'YES'\n\nassert solution('''3 2 1 100000000''') == 'NO'\n\nassert solution('''10 20 15 14''') == 'NO'\n\nassert solution('''101 101 101 3''') == 'YES'\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 3 4\\n 1 2 3 4\\n 5 6 7 8\\n 1 2 3 4\\n\") == \"YES\"\n\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 'NO'\nassert solution('1\\n0\\n0\\n0\\n0') == 'YES'\nassert solution('2\\n3\\n2\\n9\\n5') == 'NO'\nassert solution('2\\n3\\n2\\n0\\n9\\n5') == 'YES'\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1 2 3 4\\n\") == \"3 4 6 5\"\n\n\"\"\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n1 2 3 4') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"3 4 6 5\", 'Wrong answer for input \"4 4\"'\nassert solution(\"5 5\") == \"9 8 12 6 8\", 'Wrong answer for input \"5 5\"'\nassert solution(\"2 10\") == \"3 3\", 'Wrong answer for input \"2 10\"'\nassert solution(\"1 2 1 1 2 2 2 2 2 2\") == \"3 3\", 'Wrong answer for input \"1 2 1 1 2 2 2 2 2 2\"'\n\n\"\"\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 4\n1 2 3 4\n''') == '3 4 6 5'\nassert solution('''5 5\n2 1 5 3 5\n''') == '9 8 12 6 8'\nassert solution('''2 10\n1 2 1 1 2 2 2 2 2 2\n''') == '3 3'\nassert solution('''3 3\n1 2 3\n''') == '0 0 0'\nassert solution('''5 5\n2 1 5 3 5\n''') == '9 8 12 6 8'\n\n----\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\n\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n1 2 3 4\\n') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5\\n') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2\\n') == '3 3'\n\nassert solution('2 4\\n1 2 1 1\\n') == '0 0'\nassert solution('2 5\\n1 2 1 1 2\\n') == '0 0'\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n1 2 3 4\\n') == '3 4 6 5'\n\nassert solution('5 5\\n2 1 5 3 5\\n') == '9 8 12 6 8'\n\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2\\n') == '3 3'\n\n\"\"\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n1 2 3 4\\n') == '3 4 6 5'\n\nassert solution('5 5\\n2 1 5 3 5\\n') == '9 8 12 6 8'\n\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2\\n') == '3 3'\n\nassert solution('2 10\\n1 2 2 2 1 2 2 2 2 2\\n') == '3 3'\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2\\n1 3\\n1 4\") == \"YES\"\nassert solution(\"3\\n1 2\\n1 3\\n1 4\\n4\\n8 9 10\") == \"YES\"\nassert solution(\"3\\n1 2\\n1 3\\n1 4\\n4\\n8 9 10\\n3 2 4 6\") == \"YES\"\nassert solution(\"3\\n1 2\\n1 3\\n1 4\\n4\\n8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\") == \"YES\"\nassert solution(\"3\\n1 2\\n1 3\\n1 4\\n4\\n8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\nassert solution(\"10 5\\n1 2\\n1 3\\n1 4\\n2 5\\n3 6\\n6 7\\n8 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"NO\\nNO\"\n\n\"\"\"\n\nimport sys\nimport queue\nfrom collections import defaultdict\nfrom typing import Dict, List, Set, Tuple\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\") == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n\"\"\"\n\n\n\"\"\"\nYou are given a rooted tree consisting of $n$ vertices numbered from $1$ to $n$. The root of the tree is a vertex number $1$.\n\nA tree is a connected undirected graph with $n-1$ edges.\n\nYou are given $m$ queries. The $i$-th query consists of the set of $k_i$ distinct vertices $v_i[1], v_i[2], \\dots, v_i[k_i]$. Your task is to say if there is a path from the root to some vertex $u$ such that each of the given $k$ vertices is either belongs to this path or has the distance $1$ to some vertex of this path.\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $m$ ($2 \\le n \\le 2 \\cdot 10^5$, $1 \\le m \\le 2 \\cdot 10^5$) \u2014 the number of vertices in the tree and the number of queries.\n\nEach of the next $n-1$ lines describes an edge of the tree. Edge $i$ is denoted by two integers $u_i$ and $v_i$, the labels of vertices it connects $(1 \\le u_i, v_i \\le n, u_i \\ne v_i$).\n\nIt is guaranteed that the given edges form a tree.\n\nThe next $m$ lines describe queries. The $i$-th line describes the $i$-th query and starts with the integer $k_i$ ($1 \\le k_i \\le n$) \u2014 the number of vertices in the current query. Then $k_i$ integers follow: $v_i[1], v_i[2], \\dots, v_i[k_i]$ ($1 \\le v_i[j] \\le n$), where $v_i[j]$ is the $j$-th vertex of the $i$-th query.\n\nIt is guaranteed that all vertices in a single query are distinct.\n\nIt is guaranteed that the sum of $k_i$ does not exceed $2 \\cdot 10^5$ ($\\sum\\limits_{i=1}^{m} k_i \\le 2 \\cdot 10^5$).\n\n\n-----Output-----\n\nFor each query, print the answer \u2014 \"YES\", if there is a path from the root to some vertex $u$ such that each of the given $k$ vertices is either belongs to this path or has the distance $1$ to some vertex of this path and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n\nOutput\nYES\nYES\nYES\nYES\nNO\nNO\n\n\n\n-----Note-----\n\nThe picture corresponding to the example:\n\n[Image]\n\nConsider the queries.\n\nThe first query is $[3, 8, 9, 10]$. The answer is \"YES\" as you can choose the path from the root $1$ to the vertex $u=10$. Then vertices $[3, 9, 10]$ belong to the path from $1$ to $10$ and the vertex $8$ has distance $1$ to the vertex $7$ which also belongs to this path.\n\nThe second query is $[2, 4, 6]$. The answer is \"YES\" as you can choose the path to the vertex $u=2$. Then the vertex $4$ has distance $1$ to the vertex $1$ which belongs to this path and the vertex $6$ has distance $1$ to the vertex $2$ which belongs to this path.\n\nThe third query is $[2, 1, 5]$. The answer is \"YES\" as you can choose the path to the vertex"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\nassert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'NO'\nassert solution('1 1') == 'YES'\nassert solution('2 2') == 'NO'\nassert solution('1 2') == 'YES'\nassert solution('1 2\\n2 1') == 'YES'\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n\"\"\""
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"NO\"\nassert solution(\"4 2\\n1 2\\n2 3\\n1 4\") == \"YES\"\nassert solution(\"4 2\\n1 2\\n2 3\\n1 4\\n2 5\") == \"YES\"\nassert solution(\"4 2\\n1 2\\n2 3\\n1 4\\n2 5\\n1 6\") == \"NO\"\nassert solution(\"4 2\\n1 2\\n2 3\\n1 4\\n2 5\\n1 6\\n2 7\") == \"YES\"\n\n\"\"\"\n\nfrom collections import deque\nfrom sys import stdin"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3\\n1 2 3 4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\"\nassert solution(\"4\\n3\\n1 2 3 4\\n1 2 3 4\") == \"NO\\nYES\\n1 2\\n1 3\\n1 4\"\nassert solution(\"4\\n3\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 2\\n1 3\\n1 4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 2\\n1 3\\n1 4\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"NO\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 2\\n1 3\"\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import permutations\n\n\nclass Graph:\n    def __init__(self, n):\n        self.n = n\n        self.edges = []\n\n    def add_edge(self, u, v):\n        self.edges.append([u, v])\n\n    def get_edges(self):\n        return self.edges\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\"\n\n\"\"\"\nWrong answer for case 1\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\",\n\"\"\"\nYES\n1 3\n3 5\n5 4\n1 2\n\"\"\"\n\nassert solution(\"\"\"\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\") == \"NO\\n1 2\"\n\n\"\"\"\nWrong answer for case 1\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\"\nassert solution(\"\"\"\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\") == \"NO\\n1 2\"\n\n\"\"\"\nWrong answer for case 1\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\"\nassert solution(\"\"\"\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\") == \"NO\\n1 2\"\n\n\"\"\"\nWrong answer for case 1\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\"\nassert solution(\"\"\"\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\") == \"NO\\n1 2\"\n\n\"\"\"\nWrong answer for case 1\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'NO'\nassert solution('5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\nassert solution('5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\nassert solution('5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\nassert solution('5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\"\nassert solution(\"4\\n3\\n1 1 1\\n2 3 2\\n3 4 3\\n2 2 1\\n\") == \"YES\\n1 2\\n2 3\\n3 4\"\nassert solution(\"3\\n1 1 1\\n2 3 2\\n3 4 3\\n\") == \"NO\"\nassert solution(\"3\\n1 1 1\\n1 2 3\\n1 3 2\\n\") == \"YES\\n1 2\\n1 3\"\nassert solution(\"2\\n1 1 1\\n1 2 3\\n1 3 2\\n\") == \"NO\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\"\n\"\"\""
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\n\n\"\"\"\n\nfrom math import inf\nfrom collections import deque\nfrom copy import deepcopy\nfrom typing import List, Dict"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_cases_to_solve[0]) == test_cases_results[0]\nprint(solution(input_to_solve))\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\"\n\n\"\"\""
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\\nYES\\n1 2\\n1 3\\n1 4\\n\"\n\n\"\"\""
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11011010') == '01111010'\n\n\"\"\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11101110') == '11101110'\nassert solution('111111010') == '11101110'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11011010') == '0111110'\n\"\"\"\nfrom typing import List, Dict\n\nfrom utils import timing\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('10') == '0'\nassert solution('01') == '0'\nassert solution('11') == '1'\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11011010\") == \"01011110\"\nassert solution(\"11101101\") == \"01011110\"\nassert solution
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str1) == str2\n\n\n\"\"\"\n\nimport sys\nimport os\nimport numpy as np"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11101110\") == \"0111111\"\nassert solution(\"11101110\") == \"0111111\"\nassert solution(\"11101110\") == \"0111111\"\nassert solution(\"11101110\") == \"0111111\"\nassert solution(\"11101110\") == \"0111111\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(A) == B\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11101010\") == \"011110\"\nassert solution(\"11101011\") == \"0111111\"\nassert solution(\"11111010\") == \"1111110\"\n\"\"\""
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11011010') == '011110'\n\"\"\"\nfrom collections import deque\nimport heapq\nfrom typing import List\nimport string\nimport numpy as np\n\n\nclass Solution:\n    def get_neighbors(self, curr, n):\n        \"\"\"\n        Returns all the possible neighbors for curr\n        \"\"\"\n        neighbors = []\n        for i in range(n):\n            neighbors.append(curr[:i] + str((int(curr[i]) + 1) % 2) + curr[i + 1:])\n        return neighbors\n\n    def min_string(self, curr, k, n):\n        \"\"\"\n        Returns the lexicographically minimum string, starting from curr, of length n, that can be obtained by performing at most k moves on curr\n        \"\"\"\n        # If k == 0, then there are no more moves left.\n        if k == 0:\n            return curr\n\n        # If the current string is the sorted string, then we have our answer\n        if curr == ''.join(sorted(curr)):\n            return curr\n\n        # Otherwise, we have to check if our current string can be sorted.\n        for neighbor in self.get_neighbors(curr, n):\n            if ''.join(sorted(neighbor)) == neighbor:\n                return neighbor\n\n        # If we have exhausted all the neighbors, then we have to backtrack to our last move.\n        return self.min_string(self.get_neighbors(curr, n)[-1], k - 1, n)\n\n    def solve(self, stdin: str) -> str:\n        q = int(stdin.split('\\n')[0])\n        for _ in range(q):\n            n, k = map(int, stdin.split('\\n')[1].split())\n            s = stdin.split('\\n')[2]\n            print(self.min_string(s, k, n))\n\n\nSolution().solve('\\n'.join(stdin.split('\\n')[1:]))\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9''') == '3\nassert solution('''5 1\n29 30\n30 30\n29 29\n28 30\n30 30''') == '3\nassert solution('''6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3''') == '4"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_result\nprint(solution(input()))\n\n\"\"\"\n\nfrom collections import defaultdict\n\nn, k = map(int, input().split())\nsegments = []\nfor _ in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\nsegments = sorted(segments, key=lambda x: x[0])\n\nbad_points = []\n\nsegment_mappings = defaultdict(set)\n\nstart = 0\nend = 0\nfor i, (l, r) in enumerate(segments):\n    if l < end:\n        segment_mappings[start].add(i)\n    start = i\n    end = r\n    segment_mappings[start].add(i)\n\nbad_points = set(range(1, n + 1))\nfor k, v in segment_mappings.items():\n    bad_points -= v\n\nprint(len(bad_points))\nprint(*sorted(bad_points), sep=' ')\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9''') == '3\\n1 4 7'\nassert solution('''5 1\n29 30\n30 30\n29 29\n28 30\n30 30''') == '3\\n1 2 4'\nassert solution('''6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3''') == '4\\n1 3 5 6'\nassert solution('''9 3\n7 1\n6 1\n4 1\n3 1\n2 1\n5 2\n4 3\n4 5\n4 6\n6 7\n6 8\n7 9\n7 10\n8 10\n9 10\n9 11\n10 11\n10 12\n11 12\n11 13\n12 13\n12 14\n12 15\n13 15\n13 16\n14 16\n14 17\n15 17\n15 18\n16 18\n16 19\n17 19\n17 20\n18 20\n18 21\n19 21\n19 22\n20 22\n20 23\n21 23\n21 24\n22 24\n22 25\n23 25\n23 26\n24 26\n24 27\n25 27\n25 28\n26 28\n26 29\n27 29\n27 30\n28 30''') == '9\\n1 3 5 6 7 8 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29'\n\n\n\n'''\nimport sys\n\nn, k = (int(x) for x in sys.stdin.readline().split())\n\nlines = []\nfor i in range(n):\n    x, y = (int(x) for x in sys.stdin.readline().split())\n    lines.append((x, y))\n\nlines.sort()\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3\\n1 4 7'\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == '3\\n1 2 4'\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == '4\\n1 3 5 6'\nprint('PASSED')\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9''') == '3\nassert solution('''5 1\n29 30\n30 30\n29 29\n28 30\n30 30''') == '3\nassert solution('''6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3''') == '4\nassert solution('''11 9\n1 10\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10 10\n10 11\n10"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3\\n1 4 7'\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == '3\\n1 2 4'\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == '4\\n1 3 5 6'\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict, namedtuple\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n1 4 7\"\n\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 2 4\"\n\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\n\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4\"\n\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\""
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 4 3 5\\n2 2 2 3 4\") == 19\n\"\"\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 1\\n-3 0') == '0'\nassert solution('3\\n1 3 2\\n-100 2 3') == '3'\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 3 2 -2 6 5\") == \"3\"\nassert solution(\"5\\n1 3 2 6 5\") == \"10\"\nassert solution(\"3\\n1 3 2\") == \"0\"\nassert solution(\"2\\n1 1\") == \"0\"\n\"\"\"\n\nfrom collections import defaultdict\nimport bisect\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3\\n') == 3\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == 3\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == 19\nassert solution(\"2\\n2 1\\n-3 0\") == 0\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\nx = list(map(int, sys.stdin.readline().rstrip().split()))\nv = list(map(int, sys.stdin.readline().rstrip().split()))\n\ndistance = [None] * n\n\nfor i in range(n):\n    distance[i] = x[i] * v[i]\n\nsum_distance = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        sum_distance += min(distance[i], distance[j])\n\nprint(sum_distance)\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3') == '3'\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 4 3 5\") == \"19\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 4 3 5\\n2 2 2 3 4\") == \"19\"\n\"\"\""
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3 2\\n-100 2 3') == '3'\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nfrom collections import defaultdict, deque"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\"\"\") == \"21 7 15 21 3\"\nassert solution(\"\"\"1 2\n2 3 2\n1 3 2\"\"\") == \"0 0\"\nassert solution(\"\"\"3 3\n1 2 1\n2 3 2\n1 3 2\"\"\") == \"1 3 3\"\n\n\"\"\"\n\nhttps://www.coursera.org/learn/competitive-programming/discussions/weeks/1/threads/YcAQHbUcZOQcBHMeVp4Qw\nhttps://codeforces.com/blog/entry/61554\n\n\"\"\"\n\"\"\"\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u0443\u043c\u043c\u0443 \u0441\u0442\u0440\u043e\u043a\n\"\"\"\n\nlines = int(input())\ns = 0\nfor i in range(lines):\n    s += int(input())\nprint(s)\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\n\"\"\"\n\nrows, cols = [int(x) for x in input().split()]\nprint(\"\".join([input().replace(\" \", \"\") for x in range(rows)]))\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0442\u0440\u0438 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430, \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0432 \u0442\u0440\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u043f\u043e\u0442\u043e\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043e\u0441\u0442\u0430\u0432\u0448\u0435\u0435\u0441\u044f \u0447\u0438\u0441\u043b\u043e.\n\n\u041d\u0430 \u0432\u0432\u043e\u0434 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u0434\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0447\u0438\u0441\u043b\u0430.\n\nSample Input 1:\n\n8\n2\n14\nSample Output 1:\n\n14\n2\n8\nSample Input 2:\n\n23\n23\n21\nSample Output 2:\n\n23\n21\n23\n\"\"\"\n\na = int(input())\nb = int(input())\nc = int(input())"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1') == '21 7 15 21 3'\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('123\\n') == '123\\n'\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 2\\n\") == \"1 3 3\"\n\nassert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\\n\") == \"21 7 15 21 3\""
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\nassert solution(\"1 2\\n1 2\") == \"0 0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 2\") == \"1 3 3\"\n\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n\"\"\""
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1') == '21 7 15 21 3'\nprint(solution('7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1'))\n\n\n\n----\n\nInput:\n7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\n\nOutput:\n21 7 15 21 3\n\nInput:\n3 3\n1 2 1\n2 3 2\n1 3 2\n\nOutput:\n0 0\n\nInput:\n3 3\n1 2 1\n2 3 2\n1 3 2\n\nOutput:\n1 3 3\n\n\n\n----\n\nInput:\n4 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\n\nOutput:\n1 3 3\n\n\n\n----\n\nInput:\n4 4\n1 2 1\n2 3 2\n1 3 2\n3 4 2\n\nOutput:\n0 0\n\n\n\n----\n\nInput:\n3 4\n1 2 1\n2 3 2\n1 3 2\n3 4 2\n\nOutput:\n1 3 3\n\n\n\n----\n\nInput:\n2 1\n1 2\n\nOutput:\n1 1\n\n\n\n----\n\nInput:\n1 2\n1 2\n\nOutput:\n0 0\n\n----\n\nInput:\n1 1\n1 1\n\nOutput:\n0 0\n\n\n\n----\n\nInput:\n1 1\n1 1\n\nOutput:\n1 1\n\n\n\n----\n\nInput:\n2 2\n1 2 1\n2 3 2\n1 3 2\n\nOutput:\n0 0\n\n----\n\nInput:\n2 1\n1 2\n1 2\n\nOutput:\n0 0\n\n\n\n----\n\nInput:\n3 3\n1 2 1\n2 3 2\n1 3 2\n\nOutput:\n1 3 3\n\n----\n\nInput:\n3 3\n1 2 1\n2 3 2\n1 3 2\n\nOutput:\n0 0\n\n----\n\nInput:\n1 1\n1 1\n\nOutput:\n1 1\n\n\n\n----\n\nInput:\n1 1\n1 1\n\nOutput:\n0 0\n\n\n\n----\n\nInput:\n2 2\n1 2 1\n2 3 2\n1 3 2\n\nOutput:\n0 0\n\n----\n\nInput:\n2 2\n1 2 1\n2 3 2\n1 3 2\n\nOutput:\n1 1\n\n\n\n----\n\nInput:\n3 3\n1 2 1\n2 3 2\n1 3 2\n\nOutput:\n0 0\n\n\n\n----\n\nInput:\n2 2\n1 2 1\n2 3 2\n1 3 2\n\nOutput:\n0 0\n\n----\n\nInput:\n3 3\n1 2 1\n2 3 2\n1 3 2\n\nOutput:\n1 3 3\n\n\n\n----\n\nInput:\n4 4\n1 2 1\n2 3 2\n1 3 2\n3 4 2\n\nOutput:\n0 0\n\n\n\n----\n\nInput:\n2 2\n1 2 1\n2 3 2\n1 3 2\n\nOutput:\n0 0\n\n\n\n----\n\nInput:\n3 3\n1 2 1\n2 3 2\n1 3 2\n\nOutput:\n1 3 3\n\n----\n\nInput:\n5 5\n1 2 1\n2 3 2\n1 3 2\n3 4 2\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\n\nOutput:\n0 0 0\n\n----\n\nInput:\n3 3\n1 2 1\n2 3 2\n1 3 2\n\nOutput:\n0 0\n\n----\n\nInput:\n5 5\n1 2 1\n2 3 2\n1 3 2\n3 4 2\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\n\nOutput:\n1 3 3\n\n----\n\nInput:\n5 5\n1 2 1\n2 3 2\n1 3 2\n3 4 2\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\n\nOutput:\n1 3 3\n\n----\n\nInput:\n5 5\n1 2 1\n2 3 2\n1 3 2\n3 4 2\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\n\nOutput:\n0 0 0\n\n----\n\nInput:\n7 6\n1 2 1\n2 3 2\n1 3 2\n3 4 2\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\n\nOutput:\n1 3 3\n\n----\n\nInput:\n7 6\n1 2 1\n2 3 2\n1 3 2\n3 4 2\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\n\nOutput:\n1 3 3\n\n----\n\nInput:\n6 3\n1 2 1\n2 3 2\n1 3 2\n3 4 2\n4 5 2\n5 6 2\n3 6 2\n5 2 3 4 1\n\nOutput:\n1 3 3\n\n----\n\nInput:\n6 3\n1 2 1\n2 3 2\n1 3 2\n3 4 2\n4 5 2\n5 6 2\n3 6 2\n5 2 3 4 1\n\nOutput:\n0 0\n\n----\n\nInput:\n7 4\n1 2 1\n2 3 2\n1 3 2\n3 4 2\n4 5 2\n5 6 2\n3 6 2\n5 2 3 4 1\n\nOutput:\n0 0\n\n----\n\nInput:\n4 3\n1 2 1\n2 3 2\n1 3 2\n3 4 2\n\nOutput:\n0 0\n\n----\n\nInput:\n2 2\n1 2 1\n2 3 2\n1 3 2\n\nOutput:\n0 0\n\n----\n\nInput:\n2 2\n1 2 1\n2 3 2\n1 3 2\n\nOutput:\n0 0\n\n----\n\nInput:\n4 4\n1 2 1\n2 3 2\n1 3 2\n3 4 2\n\nOutput:\n0 0\n\n----\n\nInput:\n4 4\n1 2 1\n2"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\\n') == '21 7 15 21 3'\n\"\"\"\n\nimport sys\nimport queue\n\nclass Graph:\n    def __init__(self, n, edges, max_w):\n        self.graph = {}\n        for node in range(n):\n            self.graph[node] = []\n        for edge in edges:\n            u, v, w = edge\n            if u in self.graph:\n                self.graph[u].append((v, w))\n            else:\n                self.graph[u] = [(v, w)]\n        self.max_w = max_w\n        self.queue = queue.Queue()\n        self.parent = dict()\n        self.max_depth = -1\n\n    def bfs(self, start_node):\n        self.parent[start_node] = None\n        self.queue.put(start_node)\n        while not self.queue.empty():\n            u = self.queue.get()\n            for v, w in self.graph[u]:\n                if v not in self.parent:\n                    self.parent[v] = u\n                    self.queue.put(v)\n                if w <= self.max_w:\n                    self.max_depth = max(self.max_depth, len(self.parent))\n\n    def dfs(self, u, depth):\n        self.max_depth = max(self.max_depth, depth)\n        for v, w in self.graph[u]:\n            if v not in self.parent:\n                self.parent[v] = u\n                self.dfs(v, depth + 1)\n\n    def solution(self):\n        for u, _ in self.graph.items():\n            self.bfs(u)\n            self.dfs(u, 0)\n        return [self.max_depth] + [len(set(self.parent.values()))] * (self.max_depth + 1)"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 1\\n2 3 2\\n1 3 2\\n\") == \"1 3 3\"\n\"\"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 2 2\\n3\\n1 3 4 4') == 'YES'\nassert solution('2\\n1 2 2\\n3\\n1 2 4') == 'NO'\nassert solution('2\\n1 2 2\\n3\\n1 2 4\\n1 3 4 4') == 'NO'\nassert solution('2\\n1 2 2\\n3\\n1 2 4\\n1 3 4 4') == 'YES'\nassert solution('2\\n1 2 2\\n3\\n1 2 4\\n1 3 4 4') == 'NO'\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n1 2 2\\n4\\n5 5 5 5\") == \"YES\"\nassert solution(\"1\\n100\\n2\\n4\") == \"NO\"\nassert solution(\"2\\n4\\n1 3 4 4\\n1\\n100\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\") == \"YES\"\nassert solution(\"3\\n1 2 2\\n4\\n1 3 4 4\") == \"NO\"\nassert solution(\"3\\n1 2 2\\n4\\n1 3 4\") == \"NO\"\nassert solution(\"3\\n100\\n1 2 4\") == \"YES\""
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 4\") == \"NO\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"100\") == \"YES\"\n\"\"\"\nimport math\nfrom collections import defaultdict, deque\nfrom itertools import combinations\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\") == \"YES\"\nassert solution(\"3\\n1 2 4\\n4\\n1 3 4 4\") == \"YES\"\nassert solution(\"3\\n100\\n1 2 4\") == \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"3\\n1 2 4\\n4\\n1 3 4 4\") == \"NO\"\nassert solution(\"1\\n100\") == \"YES\"\nassert solution(\"4\\n1 2 4\\n4\\n1 3 4 4\") == \"YES\"\n\n\"\"\"\n\nimport sys\nimport os\n\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))\nfrom utils.utils import log\n\nfrom typing import List\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 2\") == \"YES\"\nassert solution(\"4\\n5 5 5 5\") == \"NO\"\nassert solution(\"1\\n100\") == \"YES\""
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"3\\n1 2 4\\n4\\n1 3 4 4\") == \"YES\"\nassert solution(\"1\\n100\") == \"YES\"\nassert solution(\"5\\n1 2 2\\n4\\n5 5 5 5\") == \"YES\"\nassert solution(\"5\\n1 2 2\\n4\\n1 3 4 4\") == \"NO\"\n\n---\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n>1. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043c\u0430\u0441\u0441\u0438\u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c n\u00d7n \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0435\u0433\u043e \u043f\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u043f\u0440\u0430\u0432\u0438\u043b\u0443:\n\u0427\u0438\u0441\u043b\u0430 \u043d\u0430 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438 \u043e\u0442\u043b\u0438\u0447\u043d\u044b \u043e\u0442 \u043d\u0443\u043b\u044f \u0431\u044b\u0432\u0430\u044e\u0442 \u0435\u0434\u0438\u043d\u0438\u0446\u0430\u043c\u0438, \n\u0430 \u0447\u0438\u0441\u043b\u0430, \u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0432\u044b\u0448\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438, \u043d\u0443\u043b\u0435\u043c.\n\u041f\u043e\u043c\u043e\u0433\u0438\u0442\u0435 \u0413\u043e\u0448\u0435 \u043d\u0430\u0439\u0442\u0438 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0441\u0442\u043e\u0438\u0442 \u043d\u0430 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438, \n\u0438 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u044d\u043a\u0440\u0430\u043d.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u043e n \\ge 1 n n \\ge 1, nn \u2014 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0430\u0441\u0441\u0438\u0432\u0430. \n\u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 nn \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u044f\u0432\u043b\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0430. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0442 100.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438.\n\nSample Input 1:\n\n3\n1 2 2\nSample Output 1:\n\n2\nSample Input 2:\n\n4\n1 2 4 1\nSample Output 2:\n\n4\nSample Input 3:\n\n4\n1 2 3 5\nSample Output 3:\n\n0\n\nimport sys\nfrom random import randint"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 4\\n1 3 4 4\\n1\\n100') == 'YES'\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100''') == 'YES'\nassert solution('''5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100''') == 'YES'\nassert solution('''5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100''') == 'NO'\nassert solution('''5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100''') == 'NO'\n'''\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"4 5\") == \"11\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"4 4\") == \"12\"\nassert solution(\"4 5\") == \"11\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected_stdout\n\n\n\n-----Challenge-----\n\nWith the same example, try to solve the problem by executing just one line of code."
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    stdin='''\n4 4\n1010\n1101\n'''\n) == '12'\n\nassert solution(\n    stdin='''\n4 5\n1001\n10101\n'''\n) == '11'\n\nassert solution(\n    stdin='''\n4 5\n1001\n10101\n'''\n) == '11'\n\nassert solution(\n    stdin='''\n4 4\n1010\n1101\n'''\n) == '12'\n\nassert solution(\n    stdin='''\n4 4\n1010\n1101\n'''\n) == '12'"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 1010 1101\") == '12'\nassert solution(\"4 5 10101 1010\") == '11'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'\nprint('Success')"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\""
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1010\\n1101\\n\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\\n\") == \"11\"\nassert solution(\"4 4\\n10010\\n11101\\n\") == \"1\"\nassert solution(\"4 4\\n10010\\n11101\\n\") == \"1\"\nassert solution(\"4 4\\n10010\\n11101\\n\") == \"1\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\n\nassert solution('4 5\\n1001\\n10101') == '11'\n\nassert solution('4 6\\n101010\\n101010') == '1000'\n\n\"\"\"\n\nimport re\n\np = re.compile(r'\\d*0\\d*\\d*\\d*\\d*')\n\nn, m = [int(i) for i in input().split(' ')]\na = p.findall(input())[0]\nb = p.findall(input())[0]\n\nl = []\n\nfor i in range(max(len(a), len(b))):\n    if len(a) <= i:\n        l.append(0)\n    else:\n        l.append(int(a[i]))\n    if len(b) <= i:\n        l.append(0)\n    else:\n        l.append(int(b[i]))\n\nl = [str(i) for i in l]\n\ns = ''.join(l)\n\nprint(int(s, 2) % int(1e9 + 7))\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\""
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1010\\n1101') == '12'\nassert solution('1001\\n10101') == '11'\n\"\"\""
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'NO'\nassert solution('5\\n4') == 'NO'\nassert solution('5\\n6') == 'YES'\nassert solution('5\\n8') == 'YES\\n2 4 1 5'\nassert solution('5\\n10') == 'NO'\n\n\"\"\"\nfrom typing import List, Union\n\nfrom icontract import require, ensure, DBC\n\n\nclass Solution:\n    # fmt: off\n    @require(lambda n: n % 2 == 0)\n    @require(lambda n: 2 <= n <= 2 * 10 ** 5)\n    @require(lambda a: all(x > 0 for x in a))\n    @require(lambda a: len(a) == n // 2)\n    @require(lambda a: all(x % 2 == 0 for x in a[:n // 2]))\n    @require(lambda a: all(x % 2 == 1 for x in a[n // 2:]))\n    @ensure(lambda result: result in (2, 3, 4))\n    # fmt: on\n    def has_consecutive_sum_of_odd_and_even(self, n: int) -> int:\n        a = self.construct_array(n)\n        return self.is_consecutive_sum_of_odd_and_even(a)\n\n    @staticmethod\n    def construct_array(n: int) -> List[int]:\n        return [2 * i + 1 for i in range(n // 2)]\n\n    @staticmethod\n    def is_consecutive_sum_of_odd_and_even(a: List[int]) -> int:\n        return 2 if sum(a) == sum(x for x in a if x % 2 == 1) else 3 if sum(\n            a) == sum(x for x in a if x % 2 == 0) else 4\n\n\n@ensure(lambda result, expected: result in (expected, 2, 3, 4))\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n8\") == \"YES\\n2 4 1 5\"\nassert solution(\"6\\n10\") == \"NO\"\nassert solution(\"8\\n12\") == \"NO\"\nassert solution(\"10\\n14\") == \"NO\"\nassert solution(\"12\\n16\") == \"NO\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n8\") == \"YES\"\nassert solution(\"3\\n6\") == \"NO\"\nassert solution(\"2\\n4\") == \"NO\"\nassert solution(\"1\\n2\") == \"NO\"\nassert solution(\"1\\n2\") == \"YES\"\n\"\"\"\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(\"YES\")\n        a = [2 * x - 1 for x in range(1, n // 2 + 1)] + [2 * x for x in range(n // 2 + 1, n + 1)]\n        print(\" \".join(map(str, a)))\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n8') == 'NO'\nassert solution('6\\n10') == 'YES\\n2 4 1 5'\nassert solution('8\\n10') == 'NO'\nassert solution('10\\n10') == 'YES\\n2 4 6 8 1 3 5 11'\nassert solution('12\\n10') == 'NO'\n\"\"\""
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n4\\n6\\n8\\n10\") == \"NO\"\nassert solution(\"5\\n6\\n8\\n10\") == \"NO\"\nassert solution(\"5\\n6\\n7\\n10\") == \"YES\\n2 4 1 5\"\nassert solution(\"5\\n6\\n7\\n8\\n10\") == \"YES\\n2 4 6 8 1 3 5 11\"\nassert solution(\"5\\n4\\n6\\n8\\n10\") == \"NO\"\n\"\"\"\n\nimport math\nfrom functools import reduce\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n4\\n6\\n8\\n10\") == \"NO\"\nassert solution(\"5\\n2\\n4\\n6\\n8\\n10\") == \"YES\\n2 4 1 5\"\nassert solution(\"5\\n9\\n5\\n2\\n2\\n2\") == \"YES\\n5 9 6 2 2\"\n\"\"\"\n\n\nfrom collections import deque, defaultdict\nfrom itertools import permutations\nfrom math import gcd\nfrom typing import Dict, List\n\nfrom helpers import chronometric, generate_inputs\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n6\") == \"NO\"\nassert solution(\"8\\n10\") == \"NO\"\nassert solution(\"8\\n8\") == \"YES\\n2 4 6 8 1 3 5 11\"\nassert solution(\"8\\n2\") == \"NO\"\nassert solution(\"2\\n2\") == \"YES\\n1 2\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n4\") == \"NO\"\nassert solution(\"6\\n8\") == \"2 4 1 5\"\nassert solution(\"10\\n2\") == \"NO\"\nassert solution(\"2\\n4\") == \"NO\"\nassert solution(\"6\\n8\") == \"2 4 1 5\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2\\n4\\n6\\n8\\n10\") == \"NO\"\nassert solution(\"5\\n5\\n5\\n5\\n5\\n5\") == \"NO\"\nassert solution(\"5\\n6\\n7\\n8\\n9\\n10\") == \"YES\"\nassert solution(\"5\\n6\\n7\\n8\\n9\\n10\\n11\") == \"YES\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"NO\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2\") == \"YES\"\nassert solution(\"6\\n2\") == \"NO\"\nassert solution(\"8\\n4\") == \"NO\"\nassert solution(\"10\\n6\") == \"NO\"\nassert solution(\"12\\n8\") == \"YES\\n2 4 6 8 1 3 5 11\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 1 1 1\\n3\\n1 1 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3\\n1 1 2\") == \"1\"\nassert solution(\"6\\n1 1 1 1 1\") == \"1\"\nassert solution(\"7\\n1 1 1 1 1 1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\nassert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\nassert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\n\"\"\"\n\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n2 2 2 4 2 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2 1 2 1\\n3\\n2 2 2 2"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\nassert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\nassert solution(\"5\\n1 1 1 1 1\") == \"1\"\nassert solution(\"5\\n1 1 1 1 1\") == \"1\"\nassert solution(\"8\\n8 7 6 5 4 3 2 1\") == \"0\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\nassert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\nassert solution(\"5\\n8 7 6 5 4 3 2 1\") == \"0\"\nassert solution(\"5\\n1 1 1 1 1\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\") == \"5\"\nassert solution(\"4\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('2\\n') == ''\nassert solution('3\\n') == ''\nassert solution('4\\n') == ''\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\\n8\\n8 7 6 5 4 3 2 1\\n1\\n1\") == \"5\\n1\\n0\\n4\\n0\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n[3,1,4,1,5,9,2,6,5]) == 5\nassert solution(\n[3,1,4,1,5,9,2,6,5]) == 5\nassert solution(\n[3,1,4,1,5,9,2,6,5]) == 5\nassert solution(\n[3,1,4,1,5,9,2,6,5]) == 5\nassert solution(\n[3,1,4,1,5,9,2,6,5]) == 5\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7''') == '3'\n\nassert solution('''4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7''') == '4'\n\nassert solution('''4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7''') == '2'\n\nassert solution('''4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7''') == '7'\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"7\"\nassert solution(\"3\\n1 3\\n2 4\\n2 3\") == \"3\"\nassert solution(\"4\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"7\"\n\nprint(\"Success\")\n\"\"\"\n\nfrom typing import List, Set"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '3\\n4\\n2\\n7'\nassert solution('4\\n1 3\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '3\\n4\\n2\\n7'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '3\\n4\\n2\\n7'\n\n--------------------------------------------------\n\n\"\"\"\n\nimport sys\nimport random\n\nsys.setrecursionlimit(10 ** 6)\nMOD = 998244353\nn = int(input())\narr = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    arr.append((a, b))\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"3\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"2\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"7\""
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 3\") == '2'\nassert solution(\"4\\n1 3\\n2 2\\n2 3\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"3\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"2\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"7\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"7\"\n\"\"\""
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"3\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"2\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"7\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n') == '1'\nassert solution('1\\n2\\n3\\n') == '1'\nassert solution('2\\n3\\n4\\n') == '2'\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('0\\n3\\n2\\n5') == '2'\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n\nfrom typing import IO\nfrom typing import List\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('23 55\\n23 0\\n0 1\\n4 20\\n23 59') == '5\\n60\\n1439\\n1180\\n1'\n\"\"\"\n\nimport io\nimport sys\n\nstdin = io.StringIO(\"\"\"\n5\n23 55\n23 0\n0 1\n4 20\n23 59\n\"\"\".strip())"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('23 55\\n23 0\\n0 1\\n4 20\\n23 59') == '5\\n60\\n1439\\n1180\\n1'\nprint(solution(stdin))\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('23 55') == '5'\nassert solution('23 0') == '60'\nassert solution('0 1') == '1439'\nassert solution('4 20') == '1180'\nassert solution('23 59') == '1'\n\n\n\"\"\"\n\nimport sys\nimport os\n\nDEBUG = False"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('23 55\\n23 0\\n0 1\\n4 20\\n23 59') == '5\\n60\\n1439\\n1180\\n1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('23 55\\n23 0\\n0 1\\n4 20\\n23 59') == '5\\n60\\n1439\\n1180\\n1'\n\n\"\"\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\\n\") == \"5\\n60\\n1439\\n1180\\n1\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '60'\nassert solution('3') == '360'\nassert solution('4') == '1440'\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('LRUD') == 'UD'\nassert solution('LLDDR') == 'RRUDRD'\nassert solution('LDRLDR') == 'DRLDDRLD'\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"LURD\") == \"LRU\"\nassert solution(\"LDRRRUDU\") == \"LRUD\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('LRUD') == '1 2'\nassert solution('LLDDR') == '1 4'"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == -1\nassert solution('L') == 'L'\nassert solution('LRUD') == 'LRUD'\nassert solution('LRUDD') == 'LRUD'\nassert solution('LLLRRUDRDD') == 'LLLRRD'\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('LRUD') == 'L1R2D3'\nassert solution('LURD') == 'L1R1U1R1D2'\nassert solution('RRUDU') == 'R3U1R1U1R1D2'\nassert solution('LLDDR') == 'L1D1R1D1R2U2R1U1R1D2'\n\nstdin = open(0)\nprint(solution(stdin.readline()))\n\nassert solution(\n    'L1R2D3') == 'L1R2D3'\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(s) == res\n\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"RUULDRD\") == \"1 4\"\nassert solution(\"RRUULDDR\") == \"3 4\"\nassert solution(\"LLUDRDD\") == \"-1\"\nassert solution(\"LLURDDD\") == \"1 2\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"RDRUL\") == \"1 4\"\nassert solution(\"RRUDU\") == \"3 4\"\nassert solution(\"LLDDR\") == \"1 4\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('LURDLDR') == \"1 4\", solution('LURDLDR')\nassert solution('LURDRRUDRU') == \"3 4\", solution('LURDRRUDRU')\n\nassert solution('LURDRRUDRU', 5) == \"3 4\", solution('LURDRRUDRU', 5)\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('L') == 'L'\nassert solution('RRLLRRRLR') == 'RRLLRRRLR'\nassert solution('LL') == 'LL'\nassert solution('RRR') == 'RRR'"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\") == \"3\\n1\\n0\\n2\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\") == '3'\nassert solution(\"5\\n2 1 5 4 3\") == '1'\nassert solution(\"1\\n1\") == '0'\nassert solution(\"4\\n1 1 1 3\") == '2'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5 2 1 5 4 3\") == \"1\"\nassert solution(\"1 1 1 3\") == \"0\"\nassert solution(\"4 1 1 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n7\\n4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5\\n2 1 5 4 3\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"4\\n1 1 1 3\") == \"2\"\n\"\"\"\n\nimport sys\n\n_TEST_CASES = \"\"\"\n4\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n\"\"\"\n\n_SAMPLE_OUTPUT = \"\"\"\n3\n1\n0\n2\n\"\"\"\n\n_MY_SAMPLE_OUTPUT = \"\"\"\n3\n1\n0\n2\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3''') == '3\\n1\\n0\\n2'\n\n\n\n-----Debug-----"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == \"3\\n1\\n0\\n2\"\nassert solution(\"4\\n1 2 3 4\\n2\\n1 2\\n1 1\\n4\\n1 1 1 3\") == \"3\\n1\\n0\\n2\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\") == \"4\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"2\"\nassert solution(\"4\\n1 1 1 3\\n2\\n1 1 1 3\") == \"0\\n0\\n1\"\n\n'''\n\nfrom collections import Counter\nfrom collections import defaultdict"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\\n') == '2'\nassert solution('7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\\n') == '3'\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(['7', '5', '4', '4', '3', '4']) == '3'\nassert solution(['4', '2', '4', '1', '4', '3']) == '1'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8') == '121'\nassert solution('1\\n1337') == '0'\n\n\"\"\"\n\nimport collections\nimport functools\nfrom typing import List, Tuple, Dict\n\n\nclass Graph:\n    def __init__(self, n: int):\n        self.n = n\n        self.edges = {i: set() for i in range(1, n + 1)}\n        self.g = collections.defaultdict(set)\n\n    def add_edge(self, u: int, v: int) -> None:\n        self.g[u].add(v)\n        self.edges[v].add(u)\n\n    def __repr__(self) -> str:\n        return str(self.edges)\n\n    def clone(self) -> 'Graph':\n        g = Graph(self.n)\n        g.edges = {i: set(j) for i, j in self.edges.items()}\n        g.g = self.g.copy()\n        return g\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '0'\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom queue import Queue\n\n\"\"\"\nN = int(input())\narr = list(map(int, input().split()))\ndist = [0] * N\n\nfor i in range(N - 1):\n    u, v = map(int, input().split())\n    dist[u - 1] += 1\n    dist[v - 1] += 1\n\nq = Queue()\nfor i, d in enumerate(dist):\n    if d == 0:\n        q.put(i)\n\ncnt = 0\nwhile not q.empty():\n    e = q.get()\n    cnt += arr[e]\n    for u, v in enumerate(dist):\n        if v == 0 and u!= e:\n            q.put(u)\n\nprint(cnt)\n\"\"\""
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n9 4 1 7 10 1 6 5') == '121'\nassert solution('1\\n1337') == '0'"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('1\\n') == 0\nassert solution('2\\n') == 0\nassert solution('3\\n') == 0\nassert solution('4\\n') == 0\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8') == '121'\nassert solution('1\\n1337') == '0'\n\n\"\"\"\n\n\nfrom typing import List\nfrom math import inf\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\nassert solution(\"1337\\n\") == \"0\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\") == '6'\nassert solution(\"5 10\\n20 100 50 20 100500\") == '0'\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\") == '8'\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 2 1 3\\n10 6') == '6'\nassert solution('5 10\\n20 100 50 20 100500') == '0'\nassert solution('10 25\\n24 24 24 24 24 24 24 24 24 24\\n8 8') == '8'"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"6\\n18\\n0\\n227\\n8\"\n\n\"\"\"\nimport sys\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2 1 3\\n10 6') == '6'\n\"\"\""
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2 1 3') == '6'\nassert solution('10 6\\n8 7 1 8 3 7 5 10 8 9') == '18'\nassert solution('5 10\\n20 100 50 20 100500') == '0'\nassert solution('10 25\\n24 24 24 24 24 24 24 24 24 24') == '8'\n\n\n\"\"\""
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\") == '6'\nassert solution(\"5 10\\n20 100 50 20 100500\") == '0'\nassert solution(\"8 8\\n1 2 3 4 5 6 7 8\") == '8'\n\"\"\"\nfrom typing import Dict, List\nfrom collections import defaultdict\nimport sys\nsys.setrecursionlimit(5000)\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1 3\") == \"6\"\nassert solution(\"10 6\") == \"18\"\nassert solution(\"8 7 1 8 3 7 5 10 8 9\") == \"8\"\nassert solution(\"5 10\") == \"0\"\nassert solution(\"20 100 50 20 100500\") == \"227\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 1 3\") == \"6\"\nassert solution(\"10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"0\"\nassert solution(\"5 10\\n20 100 50 20 100500\") == \"8\"\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"0\"\nassert solution(\"8 8\\n1 2 3 4 5 6 7 8\") == \"8\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2 1 3\") == \"6\"\nassert solution(\"10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"18\"\nassert solution(\"5 10\\n20 100 50 20 100500\") == \"227\"\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"0\"\nassert solution(\"8 8\\n1 2 3 4 5 6 7 8\") == \"0\""
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 2 1 3') == '6'\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    m = 0\n    for j in range(n):\n        for l in range(j + 1, n):\n            if (a[j] + a[l]) % k == 0:\n                m += 1\n    print(m)\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str([1,2,3])) == str(1)\nassert solution(str([1,2,3])) == str(1)\nassert solution(str([1,2])) == str(2)\nassert solution(str([1,2,3])) == str(2)\nassert solution(str([1,2])) == str(2)\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a\\n') == 'a'\nassert solution('a\\nb') == 'a'\nassert solution('a\\nb\\n') == 'b'\n\"\"\"\n\nclass Solution:\n    def findContentChildren(self, g, s):\n        g = sorted(g)\n        s = sorted(s)\n        i, j, res = 0, 0, 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n                j += 1\n                res += 1\n            else:\n                j += 1\n        return res\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n1 2 3') == '2'\nassert solution('4 4\\n1 1 2 2 4') == '4'\nassert solution('4 4\\n1 2 3 4') == '4'\n\n\"\"\"\n\nfrom collections import namedtuple"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1, 2, 3, 2\") == \"2\"\nassert solution(\"1, 2, 3, 1, 2\") == \"2\"\nassert solution(\"1, 2, 3, 1, 2, 3\") == \"3\"\nassert solution(\"1, 2, 3, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 200 20\") == \"1\"\nassert solution(\"110 200 110\") == \"2\"\nassert solution(\"10 200 20 200\") == \"1\"\n\nprint('Passed all tests...')"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 1\") == \"1\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"3\\n1 2\") == \"2\"\nassert solution(\"3\\n1 1\") == \"1\"\nassert solution(\"4\\n1 2\") == \"2\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n1\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"2\\n1\\n1\") == \"1\"\nassert solution(\"1\\n1\\n2\") == \"0\"\n\n\"\"\"\n\nfrom collections import namedtuple\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n1\\n2\\n3\\n\") == 1\nassert solution(\"1\\n1\\n3\\n3\\n\") == 2\nassert solution(\"1\\n2\\n3\\n3\\n\") == 2\nassert solution(\"1\\n2\\n3\\n4\\n\") == 3\nassert solution(\"1\\n2\\n3\\n4\\n\") == 3\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2') == '1'\nassert solution('2\\n1') == '1'\nassert solution('3\\n1') == '2'\nassert solution('3\\n1\\n2') == '2'\nassert solution('2\\n1\\n2\\n1') == '1'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3, 4, 2') == '2'\n\"\"\"\n\n\"\"\"\nAnswer\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == [1,3,3,1]\nassert solution('5') == [1,5,10,10,5,1]\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        triangle = []\n\n        for i in range(rowIndex + 1):\n            row = [None for _ in range(i + 1)]\n            row[0], row[-1] = 1, 1\n            for j in range(1, len(row) - 1):\n                row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]\n            triangle.append(row)\n        return triangle[rowIndex]"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '[1]'\nassert solution('3') == '[1,3,3,1]'\nassert solution('4') == '[1,4,6,4,1]'\n\n\"\"\"\n\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n\n        triangle = [[1], [1, 1]]\n        curr_row = [1, 1]\n        for i in range(3, numRows + 1):\n            prev_row = triangle[-1]\n            curr_row = []\n            for j in range(i):\n                if j == 0 or j == i - 1:\n                    curr_row.append(1)\n                else:\n                    curr_row.append(prev_row[j - 1] + prev_row[j])\n            triangle.append(curr_row)\n        return triangle\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == [1,3,3,1]\n\"\"\"\nimport itertools"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\"\"\""
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1) == [1]\nassert solution(2) == [1,1]\nassert solution(3) == [1,3,3,1]\nassert solution(4) == [1,4,6,4,1]\n\n\"\"\"\n\n\nclass Solution:\n    def getRow(self, rowIndex: int):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n\n        result = [[1], [1, 1]]\n        for i in range(2, rowIndex + 1):\n            result.append([])\n            for j in range(i + 1):\n                if j == 0:\n                    result[i].append(1)\n                elif j == i:\n                    result[i].append(1)\n                else:\n                    result[i].append(result[i - 1][j - 1] + result[i - 1][j])\n        return result[-1]\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == [1,3,3,1]\nassert solution(\"10\") == [1,5,10,10,5,1]\nassert solution(\"20\") == [1,6,15,20,15,6,1]\nassert solution(\"50\") == [1,7,21,35,35,21,7,1]\nassert solution(\"100\") == [1,8,27,64,126,126,27,8,1]\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == [1,3,3,1]\nassert solution(\"4\") == [1,4,6,4,1]\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n\n        result = [1, 1]\n        for row in range(2, rowIndex + 1):\n            for i in range(row - 1):\n                result[i] = result[i] + result[i + 1]\n            result.append(1)\n        return result\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == [1, 3, 3, 1]\nassert solution('4') == [1, 4, 6, 4, 1]\nassert solution('5') == [1, 5, 10, 10, 5, 1]\n\"\"\"\nfrom typing import List\n\nfrom exercise.myUtils import timer\n\n\nclass Solution:\n    # O(N) space, O(N) time\n    @timer\n    def getRow(self, n: int) -> List[int]:\n        if n == 0:\n            return []\n        if n == 1:\n            return [1]\n        if n == 2:\n            return [1, 1]\n        curr = [1, 1]\n        for _ in range(2, n + 1):\n            new = []\n            for i in range(len(curr) - 1):\n                new.append(curr[i] + curr[i + 1])\n            new.append(1)\n            curr = new\n        return curr\n\n\nclass Solution2:\n    # O(N) space, O(N) time\n    @timer\n    def getRow(self, n: int) -> List[int]:\n        if n == 0:\n            return []\n        if n == 1:\n            return [1]\n        if n == 2:\n            return [1, 1]\n        curr = [1, 1]\n        for _ in range(n - 2):\n            new = [1]\n            for i in range(len(curr) - 1):\n                new.append(curr[i] + curr[i + 1])\n            new.append(1)\n            curr = new\n        return curr\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\"\"\"\nimport unittest\nimport math"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == [1,3,3,1]"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\"\"\""
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('00000000000000000000000010000000') == 1\nassert solution('00000000000000000000000010101110') == 2\nassert solution('1110111111111111111111111111111101') == 31\n\"\"\""
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\"\"\"\nimport re\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        # return len(re.findall('1', str(n)))\n        count = 0\n        while n > 0:\n            count += n & 1\n            n >>= 1\n        return count\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('00000000000000000000000010000000') == 1\nassert solution('00000000000000000000000011111111') == 31\nassert solution('000000000000000000000000100100100') == 3\n\nprint(\"all tests passed.\")\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        res = 0\n        while n > 0:\n            if n & 1 == 1:\n                res += 1\n            n >>= 1\n        return res\n    \n    def hammingWeight(self, n: int) -> int:\n        # n & (n - 1) removes the rightmost set bit, i.e. gets rid of the rightmost 1 in n.\n        # n & -n removes the rightmost 1 in n, i.e. gets rid of the rightmost 1 in n, \n        # since the latter is the same as the former and we are removing the rightmost set bit.\n        return bin(n).count('1') - bin(n & -n).count('1')\n    \n    def hammingWeight(self, n: int) -> int:\n        #n & (n - 1) removes the rightmost set bit, i.e. gets rid of the rightmost 1 in n.\n        #n & -n removes the rightmost 1 in n, i.e. gets rid of the rightmost 1 in n,\n        # since the latter is the same as the former and we are removing the rightmost set bit.\n        return bin(n).count('1') - bin(n & -n).count('1')\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\n\"\"\"\nimport math\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        result = 0\n        while n:\n            if n & 1:\n                result += 1\n            n >>= 1\n        return result\n    def hammingWeight_v2(self, n: int) -> int:\n        return bin(n).count('1')\n    def hammingWeight_v3(self, n: int) -> int:\n        return sum(map(int, bin(n)[2:]))\n    def hammingWeight_v4(self, n: int) -> int:\n        return bin(n).count('1')\n    def hammingWeight_v5(self, n: int) -> int:\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n    def hammingWeight_v6(self, n: int) -> int:\n        # count = 0\n        # while n:\n        #     count += n & 1\n        #     n >>= 1\n        # return count\n        return sum([int(i) for i in bin(n)[2:]])\n    def hammingWeight_v7(self, n: int) -> int:\n        count = 0\n        while n:\n            count += 1\n            n &= n - 1\n        return count\n    def hammingWeight_v8(self, n: int) -> int:\n        count = 0\n        while n > 0:\n            n &= (n - 1)\n            count += 1\n        return count\n    def hammingWeight_v9(self, n: int) -> int:\n        return sum(map(int, bin(n)[2:]))\n    def hammingWeight_v10(self, n: int) -> int:\n        return bin(n).count('1')\n    def hammingWeight_v11(self, n: int) -> int:\n        return sum(map(int, str(bin(n))[2:]))\n    def hammingWeight_v12(self, n: int) -> int:\n        count = 0\n        while n:\n            n = n & (n - 1)\n            count += 1\n        return count\n    def hammingWeight_v13(self, n: int) -> int:\n        count = 0\n        while n:\n            count += 1\n            n = n & (n - 1)\n        return count\n    def hammingWeight_v14(self, n: int) -> int:\n        return sum([n >> i & 1 for i in range(32)])\n    def hammingWeight_v15(self, n: int) -> int:\n        count = 0\n        while n > 0:\n            n = n & (n - 1)\n            count += 1\n        return count\n    def hammingWeight_v16(self, n: int) -> int:\n        return n.bit_length() - 1\n    def hammingWeight_v17(self, n: int) -> int:\n        return sum([i for i in range(32) if n & (1 << i)])\n    def hammingWeight_v18(self, n: int) -> int:\n        return bin(n).count('1')"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            count += 1\n            n &= n-1\n        return count"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n'''"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n'''\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        bits = [1 if digit == \"1\" else 0 for digit in bin(n)[2:]]\n        return sum(bits)"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123\") == [1,2,3]\nassert solution(\"9\") == [1,0]\nassert solution(\"99\") == [1,0,0]\nassert solution(\"-123\") == [-1,2,3]\nassert solution(\"-9\") == [-1,0]\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1234\") == \"1235\"\nassert solution(\"9\") == \"10\"\nassert solution(\"99\") == \"100\"\n\"\"\"\n\n\n\"\"\"\nlogic: \n- reverse the input string\n- reverse the reversed string\n- add one to the last element\n- reverse the reversed string again\n\"\"\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1234\") == \"1235\"\nassert solution(\"9012\") == \"9013\"\nassert solution(\"9\") == \"1\"\nassert solution(\"0\") == \"1\"\nassert solution(\"1111111111111111111111111111111111111111111111111111111111111111111111111\") == \"2\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1234') == '1235'\nassert solution('1111') == '1112'\nassert solution('9') == '10'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\") == \"13\"\nassert solution(\"21\") == \"22\"\nassert solution(\"1243\") == \"1244\"\nassert solution(\"93898\") == \"93907\"\nassert solution(\"7\") == \"8\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123\") == \"124\"\nassert solution(\"9123\") == \"9213\"\nassert solution(\"1348\") == \"1449\"\nassert solution(\"0\") == \"1\"\nassert solution(\"9\") == \"10\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1234') == '1235'\nassert solution('9') == '10'\n\n\"\"\"\n\n\"\"\"\nRuntime: 40 ms, faster than 96.54% of Python3 online submissions for Plus One.\nMemory Usage: 12.7 MB, less than 100.00% of Python3 online submissions for Plus One.\n\"\"\"\n\nclass Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        carry = 1\n        i = len(digits)-1\n        while i>=0:\n            curr = digits[i]\n            digits[i] = (curr+carry)%10\n            carry = (curr+carry)//10\n            i -= 1\n        if carry:\n            digits.insert(0,carry)\n        return digits\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution([1,2,3]) == [1,2,4]\nassert solution([1,9,9]) == [2,0,0]\nassert solution([9,9]) == [1,0,0]\nassert solution([9,9,9]) == [1,0,0,0]\nassert solution([9,9,9,9]) == [1,0,0,0,0]\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1234') == '1235'\nassert solution('900010') == '901011'\nassert solution('2349') == '2350'\n\nassert solution('1') == '2'\nassert solution('2') == '3'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('123') == '124'\nassert solution('9') == '10'\n\"\"\"\n\n\"\"\"\n\u5c06\u6570\u5b57\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\uff0c\u9996\u5148\u5c06\u6570\u5b57\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5c06\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a\u6570\u5b57\n\"\"\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"4\"\nassert solution(\"3 1\") == \"4\"\nassert solution(\"3 1\") == \"4\"\nassert solution(\"3 1\") == \"4\"\nassert solution(\"3 1\") == \"4\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1') == '4'\n\"\"\"\n\na, b = [int(i) for i in input().split(' ')]\n\nprint(max([a + b, a - b, a * b]))\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1') == '4'\nassert solution('9 1000') == '1000'\nassert solution('9 9') == '9'\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '3 1\\n'\n    ) == '4'\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\") == \"4\"\nassert solution(\"3 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '3'\nassert solution('1 2 3') == '6'\nassert solution('1 2 3 4') == '10'\n\n'''"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1') == '4'\nassert solution('3 1') == '3'\nassert solution('8 3') == '24'\nassert solution('1 2') == '1'\n\"\"\"\nfrom collections import Counter\nimport operator\nfrom typing import Tuple\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"4\"\n\"\"\"\n\n\"\"\"\nimport math\n\na, b = [int(x) for x in input().split()]\nprint(max(a + b, a - b, a * b))\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n') == '4'\nassert solution('1 1\\n') == '2'\n\"\"\"\n\nimport sys\n\nlines = sys.stdin.readlines()\n\nA, B = list(map(int, lines[0].split(' ')))\n\nlargest = max(A + B, A - B, A * B)\nprint(largest)\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\nassert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\nassert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\nassert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\n\n\"\"\""
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 5\n0 5\n-2 4\n3 4\n4 -4''') == '3'\n\"\"\"\n\n\"\"\"\nSolution\nIf you have a coordinate (x, y), what is the maximum distance the point can be from the origin?\nThe maximum distance for a point (x, y) is the square root of x^2 + y^2.\nSo for each point (x, y), we can keep track of the largest distance it can be from the origin.\nThen we need only to count the number of points (x, y) that have a maximum distance of sqrt(x^2 + y^2) from the origin.\n\"\"\""
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 5\n0 5\n-2 4\n3 4\n4 -4''') == '3'\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\\n') == '3'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == '3'"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(sample_inputs.SAMPLE_INPUT_1)) == \"3\"\nassert solution(str(sample_inputs.SAMPLE_INPUT_2)) == \"2\"\nassert solution(str(sample_inputs.SAMPLE_INPUT_3)) == \"3\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == 3\n\"\"\"\n\nfrom math import sqrt\n\nD, N = map(int, input().split())\n\nX, Y = [], []\nfor _ in range(N):\n    x, y = map(int, input().split())\n    X.append(x)\n    Y.append(y)\n\nnum = 0\nfor i in range(N):\n    if sqrt(X[i] ** 2 + Y[i] ** 2) <= D:\n        num += 1\n\nprint(num)\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12\\n') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12\\n\") == \"Yes\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12') == 'Yes'\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12') == 'Yes'\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\nimport math"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12\") == 'Yes'\n\"\"\"\n\nfrom utils import timing"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(12) == \"Yes\"\nassert solution(15) == \"No\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12') == 'Yes'\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"31\") == \"No\"\nassert solution(\"10\") == \"Yes\"\nassert solution(\"8\") == \"Yes\"\nassert solution(\"827\") == \"No\"\n\"\"\""
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\""
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 -1\") == \"12 8 10\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n5 -1\n''') == '12\\n8\\n10'\nprint(\"PASSED\")\n\nassert solution('''5\n3 1 4 -1\n''') == '14\\n8\\n10'\nprint(\"PASSED\")\n\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1\n''') == '55\\n44\\n45'\nprint(\"PASSED\")"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n5 -1\\n\") == \"12\\n8\\n10\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n\nN = int(input())\nA = list(map(int, input().split()))\n\ncosts = [0]*N\n\nfor i in range(1, N):\n    costs[i] = abs(A[i-1] - A[i])\n\nfor i in range(N):\n    costs[i] += abs(A[i] - 0)\n    costs[i] += abs(0 - A[i])\n\nfor i in range(N):\n    print(costs[i])\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n3 5 -1''') == '''12\n8\n10'''\nassert solution('''2\n1 -1\n2 2''') == '''3\n0\n3'''"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a\") == \"vowel\"\n\"\"\"\n\n\"\"\"\nGiven a lowercase English letter c, determine whether it is a vowel. Here, there are five vowels in the English alphabet: a, e, i, o and u.\n\n-----Constraints-----\n - c is a lowercase English letter.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nc\n\n-----Output-----\nIf c is a vowel, print vowel. Otherwise, print consonant.\n\n-----Sample Input-----\na\n\n-----Sample Output-----\nvowel\n\nSince a is a vowel, print vowel.\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"e\") == \"vowel\"\nassert solution(\"i\") == \"vowel\"\nassert solution(\"o\") == \"vowel\"\nassert solution(\"u\") == \"vowel\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a') == 'vowel'\n\"\"\"\nimport sys"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"b\") == \"consonant\"\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a\") == \"vowel\"\n\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a') == 'vowel'"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BBBWW\") == 1\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('BBBWW') == '1'\n\"\"\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BBBWW\") == 1\n\"\"\"\n\nimport re\n\nstdin = input()\n\nprint(len(re.findall(\"B|W\", stdin)))\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"WWWW\") == \"0\"\nassert solution(\"WWBWWW\") == \"3\"\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def min_new_stones(self, stones: str) -> int:\n        black_stones = 0\n        white_stones = 0\n        for i in range(len(stones)):\n            if stones[i] == \"B\":\n                black_stones += 1\n            elif stones[i] == \"W\":\n                white_stones += 1\n        return min(black_stones, white_stones)\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"WWWWW\") == \"1\"\nassert solution(\"BWWW\") == \"2\"\nassert solution(\"BWWBWWWW\") == \"2\"\n\"\"\"\n\nS = input()\ncount = 0\nfor i in range(0, len(S)):\n    if S[i] == \"W\":\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"WWBBWW\") == \"1\"\nassert solution(\"BWBWBWBW\") == \"2\"\nassert solution(\"WBWBWBWB\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BBBWW\") == 1\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"BBBWBB\") == \"2\"\nassert solution(\"BWBWBW\") == \"1\"\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '0'\nassert solution('WBWBBWBWBW') == '3'\nassert solution('BWBWBBWBWBW') == '5'\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WWWBBW\") == \"1\"\nassert solution(\"WWWWBWW\") == \"0\"\nassert solution(\"WWBBBWW\") == \"2\"\nassert solution(\"WWWWBBWW\") == \"0\"\nassert solution(\"WWBBBWW\") == \"1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 21\") == \"Yes\"\nassert solution(\"1 21\") == \"Yes\"\nassert solution(\"1 20\") == \"No\"\nassert solution(\"1 20\") == \"No\"\nassert solution(\"1 19\") == \"No\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 21\") == \"Yes\"\nassert solution(\"2 22\") == \"No\"\n\"\"\"\n\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 21\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\nassert solution(\"121 21\") == \"Yes\"\nassert solution(\"121 11\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12 33\") == \"Yes\"\nassert solution(\"1 21\") == \"Yes\"\nassert solution(\"2 33\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1 21''') == \"Yes\"\nassert solution('''4 55''') == \"No\"\n\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 1 3\") == 1\nassert solution(\"1 2 3 4\") == 3\nassert solution(\"3 1 4 1 5 9 2\") == 4\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 4 1 5 9 2\") == \"4\"\nassert solution(\"7 3 1 4 1 5 9 2\") == \"4\"\nassert solution(\"2 2 1 2 6 9 2\") == \"6\"\nassert solution
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 4 1 5 9 2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 4 1 5 9 2') == '4'\nassert solution('5 2 6 9 4 2') == '3'\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('3 5 1 4 1 5 9 2') == '4'\n'''"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 4 1 5 9 2') == '4'\nassert solution('2 3 3') == '3'\nassert solution('2 2 2') == '1'\nassert solution('8 1 7 7 9 9 10') == '7'\nassert solution('8 1 7 7 9 9 10 1') == '9'\n\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4\") == '5'\n\"\"\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2\") == \"5\"\nassert solution(\"3\\n3\") == \"5\"\nassert solution(\"5\\n5\") == \"9\"\n\"\"\"\n\nn = int(input())\na = int(input())\n\nprint(a*(n**2) - ((n-a)**2))\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2\") == \"5\"\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n3\n4\n''') == '5'\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3, 4) == 5\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n4''') == '5'\nassert solution('''2\n2''') == '1'\n\n\"\"\"\nfrom math import ceil\nfrom typing import List, Tuple, Dict, Any\nfrom io import StringIO\n\nT = Dict[str, Any]\n\n\nclass Solution:\n    def solution(self, s: StringIO) -> str:\n        n: int = int(next(s))\n        A: int = int(next(s))\n        return str(ceil((n * (n + 1)) / 2) - A)\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n4') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 6\") == 'YES'\nassert solution(\"1 2 3\") == 'NO'\nassert solution(\"1 3 2\") == 'NO'\nassert solution(\"2 1 3\") == 'YES'\nassert solution(\"2 4 6\") == 'YES'\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"2 6 4\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4 6') == 'YES'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\n\"\"\"\n\ninput_list = [int(i) for i in stdin.split()]\n\nprint(all(b - a == c - b for a, b, c in zip(input_list, input_list[1:], input_list[2:])))"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('1 1 1') == 'NO'"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('2 4 5') == 'NO'\nassert solution('1 1 1') == 'YES'\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == 'YES'\nassert solution('2 4 6') == 'YES'\nassert solution('2 4 7') == 'NO'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"1 2 2\") == \"NO\"\nassert solution(\"1 1 1\") == \"NO\"\nassert solution(\"1 4 3\") == \"NO\"\nassert solution(\"1 2 3\") == \"YES\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('29') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"29\") == \"Yes\"\nassert solution(\"10\") == \"No\"\n\"\"\"\nimport re"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('29') == 'Yes'\nassert solution('10') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('29') == 'Yes'\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"29\") == \"Yes\"\nassert solution(\"30\") == \"No\"\nassert solution(\"99\") == \"Yes\"\nassert solution(\"11\") == \"No\"\nassert solution(\"19\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('29') == 'Yes'\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"29\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"29\") == \"Yes\"\nassert solution(\"28\") == \"No\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"29\") == \"Yes\"\nassert solution(\"3\") == \"No\"\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('29') == 'Yes'\nassert solution('80') == 'No'\nassert solution('99') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 3\\n1 2 4\") == \"1\"\nassert solution(\"5 3 3\\n1 2 4\") == \"1\"\nassert solution(\"5 3 2\\n1 2 4\") == \"2\"\nassert solution(\"5 3 3\\n1 2 3\") == \"1\"\nassert solution(\"5 3 2\\n1 2 3\") == \"3\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 3 3\n1 2 4\n''') == '1'\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 3\\n1 2 4') == '1'\n\"\"\"\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 3\\n1 2 4') == '1'\nassert solution('5 3 3\\n1 5 4') == '2'\nassert solution('5 3 3\\n4 1 4') == '2'\n\nassert solution('5 4 3\\n1 2 4') == '1'\nassert solution('5 4 3\\n3 2 4') == '2'\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 3\\n1 2 4') == '1'\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 2\\n2 1 4\\n1 3\\n1 3\\n\") == \"1\"\n\"\"\"\n\n\"\"\"\n\u984c\u610f\uff1a\u82e5\u6709\u8a18\u9304\u4e0b\u6bcf\u4e00\u500b\u9ede\u7684\u524d\u7db4\uff0c\u5247\u9700\u8a18\u9304\u6bcf\u500b\u9ede\u7684\u5404\u500b\u7bc0\u9ede\u7684\u8ddd\u96e2\n\u7e3d\u5171\u6709N+1\u500b\u9ede\uff0c\u7bc4\u570d\u70ba0~N\nX\u70ba\u7b2c\u4e00\u500b\u9ede\n\u5176\u4ed6\u5404\u9ede\u7684\u524d\u7db4\u70ba\u5404\u500b\u9ede\u4e2d\u7684\u7b2c\u5e7e\u500b\u9ede\n\u6bcf\u500b\u9ede\u6709\u5e7e\u500b\u7bc0\u9ede\u8ddf\u4ed6\u76f8\u9023\n\u800c\u4e14\uff0c\u5168\u90e8\u7bc0\u9ede\u8ddfX\u4e0d\u9023\uff0c\u8ddf\u6700\u5f8c\u4e00\u500b\u7bc0\u9ede\u76f8\u9023\n\n\u82e5\u6c92\u6709\u524d\u7db4\u8a18\u9304\uff0c\u9700\u8981\u8a18\u9304\u6bcf\u500b\u9ede\u5230\u81ea\u5df1\u7684\u8ddd\u96e2\n\n\u6bcf\u500b\u9ede\u90fd\u6709A_i\u7576\u4e2d\u4e00\u500b\u9ede\uff0c\u7576\u9019\u500b\u9ede\u63a5\u5230\u81ea\u5df1\u7684\u6642\u5019\uff0c\u9700\u8981\u6309\u7167\u6bcf\u500b\u9ede\u7684\u4f4d\u7f6e\u4f86\u8a08\u7b97\u82b1\u8cbb\n\u4f46\u662fA_i\u662f\u6c92\u6709\u7bc0\u9ede\u7684\uff0c\u6c92\u6709\u8a18\u9304A_i\u7684\u503c\u7684\n\u4f46\u662f\uff0c\u9700\u8981\u8a18\u9304A_i\u7684\u503c\uff0c\u7d00\u9304\u6bcf\u500b\u9ede\u5230\u81ea\u5df1\u7684\u8ddd\u96e2\n\n\u82e5\u6c92\u6709\u524d\u7db4\u8a18\u9304\uff0c\u9700\u8981\u8a18\u9304\u6bcf\u500b\u9ede\u5230\u81ea\u5df1\u7684\u8ddd\u96e2\uff0c\u7e3d\u5171\u6709N+1\u500b\u9ede\uff0c\u5176\u4e2d\u6700\u5f8c\u4e00\u500b\u9ede\u6703\u8b8a\u6210\u7b2c0\u500b\u9ede\n\n\u76f8\u8f03\u65bc\u4e0a\u9762\u7684\u89e3\u6cd5\uff0c\u9019\u7a2e\u89e3\u6cd5\u7684\u512a\u9ede\u662f\n\u6c92\u6709\u6bcf\u500b\u9ede\u7684\u8ddd\u96e2\u8a18\u9304\uff0c\u53ea\u6709\u4e00\u500b\uff0c\u6bcf\u500b\u9ede\u90fd\u6709\u8ddd\u96e2\n\n\u512a\u9ede\uff1a\n\u5230\u9054\u9edeA_i\u5f8c\uff0c\u5c31\u662f\u7b2c\u5e7e\u500b\u9ede\uff0c\u4e0d\u9700\u8981\u64d4\u5fc3\u8d85\u904e\u7bc4\u570d\n\n\u53ef\u89e3\u91cb\uff1a\n\u50cf\u4e0a\u9762\u7684\u89e3\u6cd5\uff0c\u9700\u8981\u6bcf\u500b\u9ede\u90fd\u8a18\u9304\u5230\u81ea\u5df1\u7684\u8ddd\u96e2\uff0c\u6bd4\u8f03\u7db2\u7d61\u7684\u7a7a\u9593\uff0c\n\u82e5\u6709\u8a18\u9304\u5247\u8f03\u5feb\n\n-----\n\u9996\u5148\uff0c\u56e0\u70ba\u4e0d\u9700\u8981\u9ede\u8ddf\u81ea\u5df1\u8ddd\u96e2\uff0c\u6240\u4ee5\u5c31\u4e0d\u9700\u8981\u6bcf\u500b\u9ede\u7684\u524d\u7db4\u8a18\u9304\n\n\u7b2c\u4e00\u6b21\u904d\u6b77\uff0c\u904d\u6b77\u5230\u81ea\u5df1\u7684\u6642\u5019\uff0c\u9700\u8981\u8a18\u9304\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u96e2\n\n\u7b2c\u4e8c\u6b21\u904d\u6b77\uff0c\u904d\u6b77\u5230\u81ea\u5df1\u7684\u6642\u5019\uff0c\u9700\u8981\u8a18\u9304\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u96e2\uff0c\n\u6bcf\u500b\u9ede\u7b2c\u4e00\u6b21\u904d\u6b77\u7684\u8ddd\u96e2\uff0c\u8a18\u9304\u5230\u81ea\u5df1\u7684\u8ddd\u96e2\n\n\u7b2c\u4e09\u6b21\u904d\u6b77\uff0c\u904d\u6b77\u5230\u81ea\u5df1\u7684\u6642\u5019\uff0c\u9700\u8981\u8a18\u9304\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u96e2\uff0c\n\u6bcf\u500b\u9ede\u7b2c\u4e8c\u6b21\u904d\u6b77\u7684\u8ddd\u96e2\uff0c\u8a18\u9304\u5230\u81ea\u5df1\u7684\u8ddd\u96e2\n\n\u5047\u8a2d\u6709\u8a18\u9304\uff0c\u76f4\u63a5\u904d\u6b77\u6642\uff0c\u6240\u6709\u9ede\u7684\u8ddd\u96e2\u90fd\u5df2\u7d93\u6709\u4e86\n\u6bcf\u500b\u9ede\u7b2c\u4e00\u6b21\u904d\u6b77\u7684\u8ddd\u96e2\uff0c\u5c31\u662f\u9ede\u5230\u9ede\u7684\u8ddd\u96e2\n\u6bcf\u500b\u9ede\u7b2c\u4e8c\u6b21\u904d\u6b77\u7684\u8ddd\u96e2\uff0c\u5c31\u662f\u9ede\u5230\u9ede\u7684\u8ddd\u96e2+\u4e00\u500b\u9ede\u7684\u8ddd\u96e2\n\n\u6240\u4ee5\u5c31\u662f\nN+1\u500b\u9ede\u7684\u6bcf\u500b\u9ede\u7684\u8ddd\u96e2\uff1a\n\u4e00\u500b\u9ede\u7684\u8ddd\u96e2\uff1a\u7b2c\u4e00\u6b21\u904d\u6b77\u7684\u8ddd\u96e2\n\u4e00\u500b\u9ede\u7684\u8ddd\u96e2\uff1a\u7b2c\u4e8c\u6b21\u904d\u6b77\u7684\u8ddd\u96e2\n\n\u56e0\u70ba\u6700\u5f8c\u4e00\u500b\u9ede\u4e00\u5b9a\u662f\u7b2c0\u500b\u9ede\uff0c\u6240\u4ee5\u4e0d\u7528\u904d\u6b77\u5b83\n\n\u6240\u4ee5\u5c31\u6709N+1\u500b\u9ede\u7684\u8ddd\u96e2\u8a18\u9304\uff0c\n\u6bcf\u500b\u9ede"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == 1\n\n---\n4.2 - C\u00e2u 5\nC\u00e2u 5 :\nC\u00e2u 4 :\nTrong c\u00e2u 5, ta c\u00f3 m\u1ed9t v\u00f2ng while nh\u1ea3y \u0111\u1ec3 tr\u00e1nh t\u1ea5t c\u1ea3 c\u00e1c c\u00e2u l\u1ec7nh \u0111\u1ec1u bi\u1ebfn \u0111\u1ed5i cho d\u00e3y k\u00fd t\u1ef1 sau m\u1ed7i v\u00f2ng for:\nT\u00ecm \u0111\u01b0\u1ee3c m\u1ed9t d\u00e3y m\u1edbi c\u00f3 k\u00fd t\u1ef1 s\u1ed1 l\u1edbn nh\u1ea5t tr\u00ean d\u00e3y k\u00fd t\u1ef1 kh\u00e1c, nh\u1ea5t trong m\u1ed7i v\u00f2ng for,\nv\u00e0 c\u00f3 s\u1ed1 l\u01b0\u1ee3ng k\u00fd t\u1ef1 kh\u00e1c nh\u1ea5t trong v\u00f2ng for.\n\n-----Constraints-----\n - N \\geq 0\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint a sequence of N + 1 integers, separated by spaces.\n\n-----Sample Input-----\n10\n\n-----Sample Output-----\n0 1 1 1 2 2 2 3 3 3 4\n\nThe optimal solution is as follows:\n - In the first loop, set i = 1, j = N, m = N.\n - In the second loop, set i = i + 1, j = j - 1, m = m - 1.\n - In the third loop, set i = i + 1, j = j - 1, m = m - 1.\n - In the fourth loop, set i = i + 1, j = j - 1, m = m - 1.\n - In the fifth loop, set i = i + 1, j = j - 1, m = m - 1.\n - In the sixth loop, set i = i + 1, j = j - 1, m = m - 1.\n - In the seventh loop, set i = i + 1, j = j - 1, m = m - 1.\n - In the eighth loop, set i = i + 1, j = j - 1, m = m - 1.\n - In the ninth loop, set i = i + 1, j = j - 1, m = m - 1.\n - In the tenth loop, set i = i + 1, j = j - 1, m = m - 1.\n - At the end, we have m = 1, i = 1, j = 0, m = 0.\nIn this case, the total cost incurred is 10.\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 2\\n2 3 5\\n3 2 6\") == \"2\"\nassert solution(\"3 4 1\\n3 2 4\\n4 3 5\") == \"0\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == 1\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 3\\n1 2 4\\n\") == '1'\n\"\"\"\n\nfrom collections import namedtuple\n\nSquare = namedtuple(\"Square\", [\"number\", \"toll\"])"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n###\\n.#.\") == \"Yes\"\nassert solution(\"5 5\\n.**\\n.**\\n.**\\n.**\\n.**\") == \"Yes\"\nassert solution(\"5 5\\n.**\\n#.#\\n.**\\n.**\\n.**\") == \"No\"\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n..\\n#.\") == \"Yes\"\nassert solution(\"3 3\\n#.#\\n..#\") == \"Yes\"\nassert solution(\"3 3\\n.##\\n.#.\") == \"No\"\nassert solution(\"3 3\\n#.#\\n#..\") == \"No\"\nassert solution(\"3 3\\n.#.\\n###\") == \"Yes\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n#.#\\n###\\n#.#\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n.#.\\n###\\n.#.') == 'Yes'\nassert solution('4 4\\n....\\n....\\n....\\n....') == 'Yes'\nassert solution('2 2\\n.#\\n..') == 'No'\nassert solution('4 2\\n#..\\n....') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".#.\\n###\\n.#.\") == \"Yes\"\n\"\"\"\n\nH, W = map(int, input().split())\ns = [[x for x in input()] for _ in range(H)]\n\nfor i in range(1, H):\n    for j in range(1, W):\n        if (s[i][j]!= s[i][j-1] and s[i][j]!= s[i-1][j]):\n            s[i][j] = \".\"\n\nfor row in s:\n    print(''.join(row))"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n.\\n###\\n.#.\") == \"Yes\"\nassert solution(\"1 1\\n.#\") == \"No\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n.#\\n###\\n.#\") == \"Yes\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n.#.\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\\n\".join([\n    \"3 3\",\n    \".#.\",\n    \"###\",\n    \"#.#\"\n])) == \"Yes\"\n\nassert solution(\"\\n\".join([\n    \"3 3\",\n    \"###\",\n    \"#.#\",\n    \"###\"\n])) == \"No\"\n\n-----Tests-----\nTime limit: 5.0 seconds Memory limit: 512MB\nYour memory usage beats 8.66 % of python3 submissions\nYour runtime beats 99.8 % of python3 submissions\n\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n.#.\n###\n.#.\n''') == \"Yes\"\nassert solution('''\n3 3\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 30 20') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 30 20\") == \"Yes\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 30 20\") == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 30 20') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 30 20') == 'Yes'\n\"\"\"\n\na, b, c = map(int, input().split())\ncount_a = a // 5\ncount_b = b // 5\ncount_c = c // 5"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"100 100 100\") == \"Yes\"\nassert solution(\"10 100 10\") == \"No\"\nassert solution(\"10 100 9\") == \"No\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"5 5 5\") == \"No\"\nassert solution(\"6 6 6\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 20 30') == 'Yes'\nassert solution('5 10 20') == 'No'\n\"\"\"\n\na,b,c = map(int, input().split())\nprint('Yes' if b==c or (a+c)==b or (a+b)==c else 'No')"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"3 8 7 1\"\n) == \"Left\"\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n'''\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 8 7 1') == 'Left'\n\"\"\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n\na, b, c, d = map(int, input().split())"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nassert solution(\"5 4 5 2\") == \"Balanced\"\nassert solution(\"1 1 1 1\") == \"Balanced\"\nassert solution(\"1 1 1 1\") == \"Right\"\n\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 8 7 1\") == 'Left'\nassert solution(\"1 2 3 4\") == 'Balanced'\nassert solution(\"4 5 6 7\") == 'Right'\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\": 1 2 0 3 0 0 1 2 1\") == '3', 'Test 1'\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n''') == '8'\n\nassert solution('''1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n''') == '8'\n\nassert solution('''1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n''') == '8'\n\nassert solution('''1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n''') == '8'\n\nassert solution('''1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n''') == '8'"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 1 0 1 0 0 0 1 0 1') == '8'\nassert solution('4\\n1 1 0 1 0 0 0 1 0 1') == '8'\nassert solution('4\\n1 1 0 1 0 0 0 1 0 1') == '8'\nassert solution('4\\n1 1 0 1 0 0 0 1 0 1') == '8'\nassert solution('4\\n1 1 0 1 0 0 0 1 0 1') == '8'\n\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 1 3 1 1 1 0 1 1 0 1 1 1 1\") == \"10\"\nassert solution(\"5 2 1 3 1 1 1 0 1 1 0 1 1 1 1\") == \"8\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"8\"\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\") == \"8\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\"\"\"\nfrom typing import List, Tuple"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n\") == '8'\nassert solution(\"2 1 0 0 0 0 0 0 0 0 1\\n1 1 0 0 0 0 0 0 0 1 1\\n\") == '8'\nassert solution(\"2 1 0 1 0 0 0 1 1 0 1\\n0 1 0 1 0 0 0 0 1 1 0\\n\") == '8'\n\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\") == 8\n\"\"\"\n\nfrom collections import Counter, defaultdict\n\nn = int(stdin.readline())\nf = defaultdict(dict)\np = defaultdict(list)\n\nfor i in range(1, n + 1):\n    for j, k in zip(range(1, 6), range(1, 6)):\n        for x, y in zip(range(1, 6), range(1, 6)):\n            f[i][(j, k, x, y)] = int(stdin.readline())\n\n        for x, y in zip(range(1, 6), range(1, 6)):\n            p[i][(j, k, x, y)] = int(stdin.readline())\n\nfor i in range(1, n + 1):\n    for j in range(1, 6):\n        for k in range(1, 6):\n            a = 0\n            for x in range(1, 6):\n                for y in range(1, 6):\n                    a += f[i][(j, k, x, y)] * p[i][(x, y)]\n            print(a)\n\n\"\"\"\nfrom collections import Counter\n\nn = int(input())\nf = defaultdict(dict)\np = defaultdict(list)\n\nfor i in range(1, n + 1):\n    for j, k in zip(range(1, 6), range(1, 6)):\n        for x, y in zip(range(1, 6), range(1, 6)):\n            f[i][(j, k, x, y)] = int(input())\n\n        for x, y in zip(range(1, 6), range(1, 6)):\n            p[i][(j, k, x, y)] = int(input())\n\nfor i in range(1, n + 1):\n    for j in range(1, 6):\n        for k in range(1, 6):\n            a = 0\n            for x in range(1, 6):\n                for y in range(1, 6):\n                    a += f[i][(j, k, x, y)] * p[i][(x, y)]\n            print(a)\n\"\"\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2') == '8'"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n3 4\n269-6650\n\"\"\"\n) == \"Yes\"\n\nassert solution(\n\"\"\"\n2 2\n7070\n\"\"\"\n) == \"No\"\n\nassert solution(\n\"\"\"\n3 3\n1234-1234\n\"\"\"\n) == \"No\"\n\nassert solution(\n\"\"\"\n1 1\n9999\n\"\"\"\n) == \"Yes\"\n\nprint('\\nPASSED')"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"12345-12345\") == \"No\"\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('269-6650') == 'Yes'\nassert solution('29-945') == 'No'\nassert solution('79-959') == 'No'\nassert solution('87-666') == 'No'\nassert solution('88-999') == 'No'\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"Yes\"\nassert solution(\"3 5\") == \"No\"\nassert solution(\"1 5\") == \"No\"\nassert solution(\"5 1\") == \"Yes\"\nassert solution(\"1 1\") == \"Yes\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4') == 'Yes'\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 6') == '1'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 6\") == \"1\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 2 6''') == '1'\n\"\"\"\n\nfrom collections import namedtuple\n\nRectangle = namedtuple('Rectangle', ('x', 'y', 'width', 'height'))"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 2\") == \"1\"\nassert solution(\"10 4 1\") == \"0\"\nassert solution(\"10 10 10\") == \"0\"\nassert solution(\"1 1 2\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 2 6''') == '1'\nassert solution('''1 1 1''') == '0'\nassert solution('''2 1 2''') == '1'\nassert solution('''2 2 3''') == '1'\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3 2 6\n\"\"\") == \"1\"\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 7 4\") == \"1\"\nassert solution(\"7 2 1\") == \"2\"\nassert solution(\"4 2 6\") == \"1\"\n\n\"\"\"\nimport sys\nimport math\n\nW, a, b = [int(i) for i in sys.stdin.readline().split()]"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 6\") == 1\n\n\"\"\""
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 8 2\") == \"3\"\nassert solution(\"5 7 2\") == \"5\"\nassert solution(\"4 6 2\") == \"4\"\nassert solution(\"4 10 1\") == \"5\"\nassert solution(\"4 10 2\") == \"6\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8 2\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 8 2') == '3'\nassert solution('0 10 2') == '3'\nassert solution('0 10 10') == '0'\nassert solution('0 1 1') == '0'\n\"\"\""
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 8 2') == '3'\nassert solution('2 5 2') == '2'\nassert solution('7 5 2') == '7'\nassert solution('3 8 4') == '3'\n\"\"\"\n\n\"\"\"\nYou are given two integers, A and B.\nReturn the largest integer in range [A..B] which has the property it is a divisor of all the numbers in that range except the number itself.\nIf no such number exists, return -1.\nExample\nFor A = 6 and B = 49, the output should be\ndivisorBi(A, B) = 24.\nAll divisors of 6 except 6 itself are [1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 14, 15, 21, 28, 36, 42, 49]. Of these, the largest divisor that is at most 49 is 24.\nFor A = 6 and B = 52, the output should be\ndivisorBi(A, B) = 49.\nAll divisors of 6 except 6 itself are [1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 14, 15, 21, 28, 36, 42, 49, 55]. Of these, the largest divisor that is at most 52 is 49.\n\"\"\""
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\n\"\"\"\n\n\"\"\"\nGiven an integer A, find and print all the elements of the following array in non-decreasing order:\n - Arr[A],\n - Arr[A + 1],\n - Arr[A + 2],\n -...\n - Arr[B].\n - Here, 1 \\leq A \\leq B \\leq 10^9\n\"\"\"\n\n\"\"\"\n-----Constraints-----\n - 1 \\leq A \\leq B \\leq 10^9\n\n-----Input-----\nThe first line contains the integer, A.\nThe second line contains the integer, B.\n\n-----Output-----\nPrint all the elements of the array in non-decreasing order.\n\n-----Sample Input-----\n4\n6\n\n-----Sample Output-----\n4\n5\n6\n\n\"\"\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(print(...))\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n\"\"\""
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8 2\") == \"3 4 7 8\"\n\"\"\"\n\nimport sys\n\nA, B, K = sys.stdin.read().split()\nA, B, K = int(A), int(B), int(K)\n\nsmall = set()\nlarge = set()\n\nfor i in range(1, 10 ** 9):\n    if i in small:\n        large.add(i)\n    elif i in large:\n        small.add(i)\n    else:\n        if i > A and i <= B:\n            if i < K:\n                small.add(i)\n            else:\n                large.add(i)\n\nprint(*sorted(small), *sorted(large), sep=\"\\n\")\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\n\"\"\"\n\nimport math\n\nA, B, K = [int(x) for x in stdin.split(' ')]\n\nL = B - A + 1\n\nmin_nums = A\nmax_nums = A + L - 1\n\nmin_index = 0\nmax_index = 0\n\nnums = [0] * L\n\nfor i in range(L):\n    nums[i] = min_nums + i"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n\nfrom unittest import TestCase\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n\ns = input()\nprint(s[0] + s[1:].lower())\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(AtCoder s Contest) == \"ABC\"\nassert solution(AtCoder Beginner Contest) == \"ABC\"\n\"\"\"\n\n###############################################\n\"\"\"\nAtCoder Beginner Contest: https://atcoder.jp/contests/abc018/tasks/abc018_2\nAtCoder s Contest: https://atcoder.jp/contests/abc018/tasks/abc018_3\nAtCoder Beginner Contest\n\nABC\n\nAtCoder s Contest\n\nABC\n\"\"\"\n###############################################\n\ns = input()\nprint(s[0] + s[1:].lower())"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\nassert solution('AtCoder Open Contest') == 'AXC'\nassert solution('AtCoder One Contest') == 'AXO'\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 4') == 'YES'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 4') == 'YES'\nassert solution('3 5 5') == 'NO'\nassert solution('10 10 10') == 'YES'\nassert solution('1 10 10') == 'YES'\nassert solution('1 10 11') == 'NO'\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 4\") == \"YES\"\nassert solution(\"2 5 6\") == \"NO\"\nassert solution(\"20 20 20\") == \"YES\"\nassert solution(\"10 15 20\") == \"YES\"\nassert solution(\"10 10 10\") == \"NO\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 4') == 'YES'\n\nprint(solution('3 5 4'))"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5 4') == 'YES'\nassert solution('1 1 1') == 'NO'\n\"\"\"\n\nA, B, X = input().split()\nA, B, X = int(A), int(B), int(X)"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5 4') == 'YES'\nassert solution('2 2 1') == 'NO'\nassert solution('1 5 2') == 'YES'\n\n'''"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 5 4''') == 'YES'\n\"\"\""
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100 17\") == 83\n\"\"\"\n\nimport math\n\nx, t = map(int, input().split())\nprint(math.floor(x - x * t * 0.1))\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 17\") == \"83\"\nprint(\"Passed\")"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100 17') == '83'\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100 17') == '83'\n\"\"\"\nfrom typing import List\n\nX, t = input().split()\nX, t = int(X), int(t)\nsand = X\nfor i in range(t):\n    sand -= 1\nprint(sand)\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100 17') == '83'\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''100 17''') == '''83'''\nprint(solution(input()))\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\""
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 17\") == \"83\"\nprint(solution(\"100 17\"))\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(int(input())*1000 + int(input()))) == '83'\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 17\") == \"83\"\nprint(\"Passed.\")\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 4') == '24'\nassert solution('4\\n1 1 1 1') == '1'\nassert solution('2\\n1 2') == '2'\nassert solution('2\\n3 4') == '-1'\n\"\"\"\nimport sys"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n') == '1'\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n') == '2'\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == 1\nassert solution(\"1 1\") == 1\nassert solution(\"1 1 1\") == 1\nassert solution(\"1 2\") == 2\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 1000000000\\n\") == \"1000000000000000000\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1\n2\n3\n4\n5\n''') == '120'\nassert solution('''\n2\n4\n10\n8\n''') == '40'\nassert solution('''\n1\n2\n3\n''') == '6'\nassert solution('''\n4\n9\n10\n-10\n''') == '-50'\nassert solution('''\n5\n-1\n1\n-1\n0\n1\n''') == '-1'\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == solution('2\\n1000000000 1000000000')\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nres = 1\nfor i in a:\n    if res > 1e18:\n        print(-1)\n        break\n    res = res * i\nelse:\n    print(res)\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n1000') == '1000'\nassert solution('2\\n1\\n1') == '1'\nassert solution('2\\n2\\n1') == '2'\nassert solution('2\\n3\\n1') == '-1'\nassert solution('2\\n3\\n5') == '-1'\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"8\"\nassert solution(\"5 3\") == \"45\"\nassert solution(\"6 4\") == \"576\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"6 5\") == \"-1\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1, 2, 3, 4, 5') == '120'\nassert solution('1, 2, 0, 2, 2') == '4'\n\"\"\"\n\nn = int(input())\nx = [int(i) for i in input().split()]\nprint(max(x)*max(x))"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 0\") == \"-1\"\nassert solution(\"100 100\") == \"10000\"\nassert solution(\"5 7\") == \"35\"\nassert solution(\"3 4\") == \"12\"\n\"\"\"\n\nimport numpy as np\n\nfrom typing import List\n\n\nclass Solution:\n    def compute(self, n: int, a: List[int]) -> int:\n        return np.prod(a) % (10 ** 18 + 7)\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\"\n\nn, a = map(int, input().split())\nprint('Yes' if n >= a else 'No')\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2018\\n218') == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == \"Yes\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2018 218\") == \"Yes\"\nassert solution(\"1000 10\") == \"No\"\nassert solution(\"2018 218\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2018\\n218') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"218\") == \"Yes\"\nassert solution(\"2018\") == \"Yes\"\nassert solution(\"21850\") == \"No\"\nassert solution(\"184550\") == \"No\"\n\n-----Problem-----\nLet A be a string of length n. You are allowed to insert lowercase English characters to the right of the string A.\n\nFind the length of the longest string S that can be formed by inserting upper-case English characters to the right of A.\n\n-----Solution-----\nimport collections"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2018\\n218\\n') == 'Yes'\n\"\"\"\n\nN, A = map(int, input().split())"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2018\\n218\\n') == 'Yes'\nassert solution('2018\\n520\\n') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_stdin) == \"safe\"\n\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 6\") =='safe'\nassert solution(\"3 1 5\") == 'dangerous'\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\n\"\"\"\nimport sys\nimport re\nfrom dataclasses import dataclass\n\n@dataclass\nclass Takahashi:\n    X: int\n    A: int\n    B: int"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 6') =='safe'\nassert solution('1 1 1') == 'dangerous'\n\n\"\"\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\nassert solution(\"1 1 1\") == \"dangerous\"\nassert solution(\"1 5 5\") == \"dangerous\"\n\"\"\"\nimport sys\n\nx, a, b = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') =='safe'\nassert solution('1 1 1') == 'dangerous'\nassert solution('1 10 1') == 'dangerous'\nassert solution('5 3 2') == 'dangerous'\nassert solution('5 5 2') == 'dangerous'\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 6') =='safe'\n\"\"\"\n\nX, A, B = map(int, stdin.readline().split())"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 6\") =='safe'\nprint(solution(\"4 3 6\"))\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == '9'\nassert solution('2') == '1'\nassert solution('8') == '4'\nassert solution('10 ** 4') == '9'\nassert solution('(10 ** 10) ** 2') == '90'\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"7\") == \"4\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"10\") == \"9\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == '9'"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n5') == '2'\nassert solution('5\\n6') == '5'\n\"\"\"\n\nN = int(stdin.readline())\n\ni = 1\nwhile True:\n    if i * i > N:\n        break\n    i += 1\n\nprint(i - 1)\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"25\") == \"4\"\nassert solution(\"8\") == \"4\"\nassert solution(\"100\") == \"8\"\nassert solution(\"101\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '3'\nassert solution('3') == '2'\nassert solution('2') == '1'\nassert solution('1') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(10) == 9\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 3') == '10'\nassert solution('2\\n1 1') == '1'\nassert solution('1\\n2 2') == '1'\n\"\"\"\nfrom sys import stdin\nfrom collections import deque"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n2 3\n1 1\n3 2''') == '10'\nassert solution('''3\n2 3\n1 1\n3 2''') == '10'\nassert solution('''2\n1 1\n2 3''') == '2'\nassert solution('''3\n2 3\n1 1\n3 2''') == '10'\n\"\"\"\n\nfrom fractions import gcd\n\nnum_lines = int(stdin.readline())\n\noutput = []\nfor _ in range(num_lines):\n    nums = [int(n) for n in stdin.readline().split()]\n    output.append(nums)\n\nmin_votes = output[0][0] * output[0][1]\nfor i in range(1, num_lines):\n    a, b = output[i]\n    min_votes = gcd(min_votes, a * b)\n\nprint(min_votes)\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 3\") == 10\n\"\"\"\n\n\"\"\"\nN=int(input())\nt_a=[int(x) for x in stdin.split(\"\\n\")]\nt_a=sorted(t_a)\nprint(t_a[-2])\n\"\"\"\n\nn=int(input())\nt_a=list(map(int,input().split(\"\\n\")))\nt_a.sort()\nprint(t_a[-2])"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 1\\n3 2\\n') == '10'\nassert solution('3\\n1 1\\n3 2\\n') == '10'\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\":\\n2 3\\n1 1\\n3 2\\n\") == \"10\"\n\"\"\"\n\nn = int(input())\n\nt_a = []\na_a = []\n\nfor _ in range(n):\n    t_a_a = input().split()\n    t_a.append(int(t_a_a[0]))\n    a_a.append(int(t_a_a[1]))\n\nans = 10 ** 18\n\nfor i in range(n):\n    ans = min(ans, t_a[i] * a_a[i])\n\nprint(ans)\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n2 3\n1 1\n3 2''') == '10'\n\nassert solution('''5\n2 3\n1 1\n3 2\n3 3\n1 1''') == '10'\n\nassert solution('''5\n2 1\n1 1\n2 2\n3 3\n1 1''') == '10'\n\nassert solution('''5\n2 3\n1 1\n3 2\n3 3\n1 1''') == '10'\n\nassert solution('''2\n2 1\n2 1''') == '3'"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n3\n2 3\n1 1\n3 2\n\"\"\") == \"10\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'yes'\nassert solution('a') == 'yes'\nassert solution('aaa') == 'yes'\nassert solution('abc') == 'yes'\nassert solution('abcdef') == 'no'\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('a') == 'yes'\nassert solution('abc') == 'yes'\nassert solution('abcc') == 'no'\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\"\n\nimport sys\n\ns = sys.stdin.readline().strip()"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"uncopyrightable\") == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"WWWEEEW\") == \"1\"\nassert solution(\"WEWEWE\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('WEEWW') == '1'\nassert solution('WWWEEWW') == '2'\nassert solution('WWWEWWWW') == '0'\nassert solution('WWWEWWWW') == '1'\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WEEWW\") == 1\nassert solution(\"WWWWW\") == 0\nassert solution(\"WWEWW\") == 3\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('WEEWW') == 1\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5WEEWW') == '1'\n\"\"\"\n\nN = int(stdin.readline())\nS = stdin.readline().strip()\n\ncount = 0\nfor i in range(len(S)):\n    if S[i] == \"W\":\n        count += 1\n\nprint(count)"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"WEEWW\") == 1\n\"\"\"\n\n\"\"\"\n\uc815\ub2f5\uc740 1\uc774\ub77c\ub294 \uc99d\uba85\uc744 \ubc1b\uc558\ub2e4. \n\ubb38\uc81c \uc758\ub3c4\uac00 \uc81c\ub300\ub85c \uc9c0\ud0ac \uc218 \uc788\ub294 \uc774\uc720\ub294 \ubb50\uc5d0\uc694? \n\uc5f0\uc0b0\ub7c9\uc774 \uc904\uc5b4\ub4dc\ub294 \uac83\uc740 \uacb0\uad6d \uc77c\uc77c\uc774 \uc0dd\uac01\ud558\uc9c0 \uc54a\uace0 \n\ub9c8\uc9c0\ub9c9\uc5d0 \uc54c\uace0 \uc788\ub358 \uac12\uc774 \ub098\uc624\ub294 \uac83\uc774 \uc911\uc694\ud55c \uac83\uc774\ub2e4. \n\uc5f0\uc0b0\ub7c9\uc740 \uc0ac\uc2e4 \ubb34\uc5c7\uc774\uace0 \uc54c\uace0 \uc788\uc5b4\uc57c \ud558\ub294 \uac83\uc778\uac00? \n\ub2e4\ub978 \uacbd\uc6b0\ub85c \ub9ce\uc774 \uc2dc\ub3c4\ud588\ub294\ub370 \ub354 \uc5f0\uc0b0\ub7c9\uc774 \ud06c\uace0 \uc77c\ubc18\uc801\uc778 \ud480\uc774\ub294 \n\ub9c8\uc9c0\ub9c9 \uac12\uc744 \ucd5c\uc18c\ud55c\uc73c\ub85c \uc0dd\uac01\ud558\ub294 \ubc29\ubc95\uc73c\ub85c \ud480\uc5c8\ub2e4. \n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_1) == \"1\"\nassert solution(test_input_2) == \"0\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input())\ns = input()[:-1]"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('WE') == 1\nassert solution('EW') == 0\nassert solution('EWEW') == 2\nassert solution('EWEWW') == 1\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('WE') == ''\nassert solution('EW') == ''\nassert solution('WEEW') == ''\nassert solution('WWE') == ''\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('WEEWW') == '1'\n\"\"\""
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\n-----------\n\nfor i in range(M):\n    a,b = [int(j) for j in input().split()]\n    roads[a-1][b-1] = 1\n    roads[b-1][a-1] = 1\n\n    roads[a-1][a-1] = 0\n    roads[b-1][b-1] = 0\n\ncity_count = 0\nfor i in range(N):\n    if sum(roads[i]) > 0:\n        city_count += 1\n\nprint(city_count)\n\nfor row in roads:\n    print(*row)"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\""
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\nassert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\nassert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\nassert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\nassert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4') == '2\\n2\\n1\\n1'\n\"\"\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\n1 2\\n1 2\") == \"2\\n2\\n1\\n1\"\nassert solution(\"4\\n4\\n1 2\\n2 3\\n3 4\\n1 4\") == \"2\\n2\\n2\\n1\\n1\"\n\n\"\"\""
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\"\"\""
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '4 3\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '1 4'\n) == '2\\n2\\n1\\n1'\nassert solution(\n    '4 3\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '1 3\\n'\n    '1 4'\n) == '2\\n2\\n1\\n1'\n\n\"\"\""
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\\n\"\n\"\"\"\n\nfrom operator import itemgetter\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\n\"\"\"\n\nimport sys\n\nfrom typing import List\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\n\n\"\"\"\n\nfrom typing import List\nimport unittest"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n5\\n10\\n15') == '25'\nassert solution('5\\n5\\n5\\n5') == '30'\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"3\\n5\\n10\") == \"30\"\n\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n5\\n10\\n15\\n\") == \"25\"\n\"\"\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == '25'\nassert solution(\"2\\n20\\n20\") == '40'\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == '25'\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin_1) == solution_1\n\n\"\"\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aabbca') == 2\nassert solution('abacaba') == 0\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aabbca\") == 2\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6\naabbca''') == 2\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(s) == ans\nprint(solution(s))\n\n\"\"\"\nfrom typing import List\n\n\"\"\"\nInterviewBit\nTill now you have solved the problem in brute force way using the idea of substrings.\nBut there is a better and optimised way of solving this problem.\n\nSuppose we have a string S of length n. We can split it into two non-empty substrings S1 and S2.\nWe can apply the same idea to these two substrings recursively and get the maximum number of distinct characters.\n\nBelow is the implementation of this method.\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aabbca\") == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aabbca') == 2\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(aabbca) == 2\n\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aabbca') == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aabbca') == 2\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline())\ns = stdin.readline()\n\ns_dict = {}\nfor i in s:\n    if i in s_dict.keys():\n        s_dict[i] += 1\n    else:\n        s_dict[i] = 1"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aabbca') == 2\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Sunny'\nassert solution('Rainy') == 'Rainy'\n\"\"\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Sunny\"\nassert solution(\"Rainy\") == \"Rainy\"\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('Sunny') == 'Cloudy'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\n\"\"\"\n\nfrom itertools import cycle"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Sunny') == 'Cloudy'\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nprint(solution(\"Sunny\"))\n\nassert solution(\"Cloudy\") == \"Rainy\"\nprint(solution(\"Cloudy\"))\n\nassert solution(\"Rainy\") == \"Sunny\"\nprint(solution(\"Rainy\"))\n\nIn Takahashi's town, a sunny day is followed by a cloudy day.\nprint(solution(stdin.read()))\n\n--Challenge--\nUse the input function to read the next line of standard input.\n'''"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Rainy') == 'Sunny'\nassert solution('Cloudy') == 'Rainy'\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Rainy') == 'Rainy'\nassert solution('Cloudy') == 'Sunny'\n\"\"\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Rainy\") == \"Cloudy\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 17 120\") == '119'\nprint(\"All tests passed.\")"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\"\"\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 17 120') == '119'\nassert solution('2 1 1') == '1'\n\"\"\""
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"7 17 120\\n\"\n) == \"119\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 17 120\\n') == '119'\n\"\"\"\n\n\"\"\"\nInput\n15 1000 100000\n\nOutput\n15\n\"\"\""
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 17 120\\n\") == \"119\"\nassert solution(\"9 17 120\\n\") == \"179\"\nassert solution(\"10 18 120\\n\") == \"109\"\nassert solution(\"9 1 120\\n\") == \"139\"\nassert solution(\"10 10 120\\n\") == \"109\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"7 17 120\"\n) == \"119\"\n\"\"\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 17 120\") == \"119\"\nassert solution(\"3 2 5\") == \"3\"\nassert solution(\"7 17 120\") == \"119\"\nassert solution(\"3 2 5\") == \"3\"\nassert solution(\"6 100 1000\") == \"1000\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == \"3800\"\n\"\"\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n\") == \"3800\"\n\"\"\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\nprint(n * (m + n // 2) + (n // 2 * (m + n // 2)))\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"3800\"\nassert solution(\"2 2\") == \"2200\"\nassert solution(\"3 3\") == \"4700\"\nassert solution(\"4 4\") == \"7200\"\nassert solution(\"5 5\") == \"8800\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n2 2\n''') == '1900'\nassert solution('''\n1 1\n''') == '3800'\nassert solution('''\n1 1\n''') == '1900'\nassert solution('''\n1 1\n''') == '3800'\nassert solution('''\n1 1\n''') == '1900'\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n\") == \"3800\"\n\"\"\"\n\nimport time"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10\") == \"3800\"\nassert solution(\"5 9\") == \"7260\"\nassert solution(\"8 12\") == \"2160\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('atcoderregularcontest') == 'b'\n\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('atcoderregularcontest') == 'b'\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('atcoderregularcontest') == 'b'\n\"\"\"\n\nfrom collections import Counter\n\ns = stdin.strip()\n\nc = Counter(s)\n\nfor char in \"abcdefghijklmnopqrstuvwxyz\":\n    if char not in c:\n        print(char)\n        break\nelse:\n    print(\"None\")\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\nprint(solution(\"atcoderregularcontest\"))\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('atcoderregularcontest') == 'b'\n\"\"\""
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\nprint(solution(stdin))\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n2 4 5''') == '3\\n4\\n3\\n4'\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\"\"\"\n\nfrom __future__ import annotations\n\nimport heapq\nfrom itertools import islice\nfrom typing import List, Tuple\n\nfrom icontract import require, ensure\n\nfrom python.common.more_itertools import pairwise\nfrom python.common.more_itertools import take\nfrom python.common.more_itertools import split_at\nfrom python.common.more_itertools import window\nfrom python.common.timing import Timer\n\n\n@require(lambda l: l % 2 == 0)\n@ensure(lambda result: len(result) == l // 2)\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\"\"\""
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 4 3\") == \"4 3 3 4\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\""
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 4 4 3\") == '4\\n3\\n3\\n4'\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n2 4 4 3''') == '''4\n3\n3\n4'''\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\"\"\"\n\nimport math\n\nN = int(stdin.readline())\nvalues = [int(i) for i in stdin.readline().split()]"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 2 3 2 1\\n') == '1\\n','sample'\nassert solution('1\\n') == '0\\n', 'extra 1'\nassert solution('4 2 1 2 1\\n') == '1\\n','sample 1'\nassert solution('2 4 4 4\\n') == '4\\n', '2x2'\nassert solution('1 1 1 1\\n') == '0\\n', '1x1'\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2 4 2 1\") == \"2\"\nassert solution(\"6 3 1 4 4 3\") == \"3\"\nassert solution(\"5 1 1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 4') == '2'\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 2 4 2 1\\n') == 2\nassert solution('7 7 7 7 7 7\\n') == 0\nassert solution('4 4 4 4 4 4\\n') == 0\nassert solution('10 10 10 10 10 10\\n') == 0\nassert solution('4\\n1 1 2 1\\n') == 1\n\"\"\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n4\\n2\\n3\\n1\\n1\\n1\") == \"3\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2 4 2 1\") == '2'\n\n---Problem---\n\nSnuke wants to cut a piece of paper into four pieces. He wants to cut the piece of paper so that its length is minimum.\nHe has two pieces of paper of lengths 3 and 5. He wants to cut the piece of paper into two pieces of lengths 3 and 3.\nFind the minimum length of the two pieces.\n\n-----Constraints-----\n - 2 \\leq len(s1) \\leq 10^5\n - 2 \\leq len(s2) \\leq 10^5\n - len(s1) \\leq len(s2)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nlen(s1)\nlen(s2)\n\n-----Output-----\nPrint the minimum length of the two pieces.\nIf no rectangle can be formed, print 0.\n\n-----Sample Input-----\n3\n4\n\n-----Sample Output-----\n3\n\n---Problem---\n\nSnuke wants to cut a piece of paper into four pieces. He wants to cut the piece of paper so that its length is minimum.\nHe has two pieces of paper of lengths 3 and 5. He wants to cut the piece of paper into two pieces of lengths 3 and 3.\nFind the minimum length of the two pieces.\n\n-----Constraints-----\n - 2 \\leq len(s1) \\leq 10^5\n - 2 \\leq len(s2) \\leq 10^5\n - len(s1) \\leq len(s2)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nlen(s1)\nlen(s2)\n\n-----Output-----\nPrint the minimum length of the two pieces.\nIf no rectangle can be formed, print 0.\n\n-----Sample Input-----\n4\n3\n\n-----Sample Output-----\n3\n\n---Problem---\n\nSnuke wants to cut a piece of paper into four pieces. He wants to cut the piece of paper so that its length is minimum.\nHe has two pieces of paper of lengths 3 and 5. He wants to cut the piece of paper into two pieces of lengths 3 and 3.\nFind the minimum length of the two pieces.\n\n-----Constraints-----\n - 2 \\leq len(s1) \\leq 10^5\n - 2 \\leq len(s2) \\leq 10^5\n - len(s1) \\leq len(s2)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nlen(s1)\nlen(s2)\n\n-----Output-----\nPrint the minimum length of the two pieces.\nIf no rectangle can be formed, print 0.\n\n-----Sample Input-----\n5\n5\n\n-----Sample Output-----\n1\n\n---Problem---\n\nSnuke wants to cut a piece of paper into four pieces. He wants to cut the piece of paper so that its length is minimum.\nHe has two pieces of paper of lengths 3 and 5. He wants to cut the piece of paper into two pieces of lengths 3 and 3.\nFind the minimum length of the two pieces.\n\n-----Constraints-----\n - 2 \\leq len(s1) \\leq 10^5\n - 2 \\leq len(s2) \\leq 10^5\n - len(s1) \\leq len(s2)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nlen(s1)\nlen(s2)\n\n-----Output-----\nPrint the minimum length of the two pieces.\nIf no rectangle can be formed, print 0.\n\n-----Sample Input-----\n4\n5\n\n-----Sample Output-----\n1\n\n---Problem---\n\nSnuke wants to cut a piece of paper into four pieces. He wants to cut the piece of paper so that its length is minimum.\nHe has two pieces of paper of lengths 3 and 5. He wants to cut the piece of paper into two pieces of lengths 3 and 3.\nFind the minimum length of the two pieces.\n\n-----Constraints-----\n - 2 \\leq len(s1) \\leq 10^5\n - 2 \\leq len(s2) \\leq 10^5\n - len(s1) \\leq len(s2)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nlen(s1)\nlen(s2)\n\n-----Output-----\nPrint the minimum length of the two pieces.\nIf no rectangle can be formed, print 0.\n\n-----Sample Input-----\n5\n4\n\n-----Sample Output-----\n1\n\n---Problem---\n\nSnuke wants to cut a piece of paper into four pieces. He wants to cut the piece of paper so that its length is minimum.\nHe has two pieces of paper of lengths 3 and 5. He wants to cut the piece of paper into two pieces of lengths 3 and 3.\nFind the minimum length of the two pieces.\n\n-----Constraints-----\n - 2 \\leq len(s1) \\leq 10^5\n - 2 \\leq len(s2) \\leq 10^5\n - len(s1) \\leq len(s2)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nlen(s1)\nlen(s2)\n\n-----Output-----\nPrint the minimum length of the two pieces.\nIf no rectangle can be formed, print 0.\n\n-----Sample Input-----\n3\n5\n\n-----Sample Output-----\n1\n\n---Problem---\n\nSnuke wants to cut a piece of paper into four pieces. He wants to cut the piece of paper so that its length is minimum.\nHe has two pieces of paper of lengths 3 and 5. He wants to cut the piece of paper into two pieces of lengths 3 and 3.\nFind the minimum length of the two pieces.\n\n-----Constraints-----\n - 2 \\leq len(s1) \\leq 10^5\n - 2 \\leq len(s2) \\leq 10^5\n - len(s1) \\leq len(s2)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nlen(s1)\nlen(s2)\n\n-----Output-----\nPrint the minimum length of the two pieces.\nIf no rectangle can be formed, print 0.\n\n-----Sample Input-----\n5\n4\n\n-----Sample Output-----\n1\n\n---Problem---\n\nSnuke wants to cut a piece of paper into four pieces. He wants to cut the piece of paper so that its length is minimum.\nHe has two pieces of paper of lengths 3 and 5. He wants to cut the piece of paper into two pieces of lengths 3 and 3.\nFind the minimum length of the two pieces.\n\n-----Constraints-----\n - 2 \\leq len(s1) \\leq 10^5\n - 2 \\leq len(s2) \\leq 10^5\n - len(s1) \\leq len(s2)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nlen(s1)\nlen(s2)\n\n-----Output-----\nPrint the minimum length of the two pieces.\nIf no rectangle can be formed, print 0.\n\n-----Sample Input-----\n5\n5\n\n-----Sample Output-----\n1\n\n---Problem---\n\nSnuke wants to cut a piece of paper into four pieces. He wants to cut the piece of paper so that its length is minimum.\nHe has two pieces of paper of lengths 3 and 5. He wants to cut the piece of paper into two pieces of lengths 3 and 3.\nFind the minimum length of the two pieces.\n\n-----Constraints-----\n - 2 \\leq len(s1) \\leq 10^5\n - 2 \\leq len(s2) \\leq 10^5\n - len(s1) \\leq len(s2)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nlen(s1)\nlen(s2)\n\n-----Output-----\nPrint the minimum length of the two pieces.\nIf no"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n3 1 2 4 2 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == \"3\\n1 2 3\"\nassert solution(\"5\\n10 2 2 1 3\") == \"10\\n10 2 2 1 3\"\n\"\"\"\nimport sys\nimport time"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\n----\n\n1.\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n3 1 2 4 2 1\") == \"2\"\n\"\"\"\nimport sys\n\nassert len(sys.argv) == 2\n\ns = sys.argv[1]\n\nn = int(s.split('\\n')[0])\n\nsticks = s.split('\\n')[1].split(' ')\n\nsticks = list(map(int, sticks))\n\nsticks.sort()\nsticks.reverse()"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 7 1 2 5\\n2\\n5\\n10') == 8\n\n\"\"\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n7 1\\n2\\n5\\n10') == '8'\n\"\"\"\n\nn = int(input())\ndays = int(input())\nstart_pieces = int(input())\neaten = 0\nfor day in range(1, days + 1):\n    eaten += int(input())\n    if day % n == 0:\n        eaten += start_pieces\nprint(eaten)\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 7 1 2 5\\n2\\n5\\n10\") == \"8\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 7 1 2 5 10\") == \"8\"\n\"\"\"\n\n\"\"\"\n\u0421\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0437 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0435 \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0432 \u043d\u0435\u0433\u043e \u0446\u0438\u0444\u0440 \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0432\u0432\u0435\u0434\u0435\u043d\u043e \u0447\u0438\u0441\u043b\u043e 3486, \u043d\u0430\u0434\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 6843.\n\n-----Constraints-----\n- 0 \\leq N \\leq 100\n- 0 \\leq A_i \\leq 10000 (1 \\leq i \\leq N)\n\n-----Input-----\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e N.\n\n-----Output-----\n\u041e\u0431\u0440\u0430\u0442\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0432 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u043c\u0443.\n\n-----Sample Input-----\n786\n\n-----Sample Output-----\n986764\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 1\\n2\\n5\\n10\") == \"8\"\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '3 7 1 2 5\\n'\n) == '8'\nassert solution(\n    '4 2 4 10\\n'\n) == '14'\nassert solution(\n    '3 7 1 2 5\\n'\n) == '8'\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n3\n7 1\n2\n5\n10\n\"\"\"\n) == \"\"\"\n8\n\"\"\"\n\nassert solution(\n    \"\"\"\n2\n2\n1\n2\n\"\"\"\n) == \"\"\"\n2\n\"\"\"\n\nassert solution(\n    \"\"\"\n3\n1\n1\n1\n\"\"\"\n) == \"\"\"\n0\n\"\"\"\n\nassert solution(\n    \"\"\"\n2\n5\n1\n1\n\"\"\"\n) == \"\"\"\n1\n\"\"\"\n\nassert solution(\n    \"\"\"\n2\n2\n2\n1\n\"\"\"\n) == \"\"\"\n1\n\"\"\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n7 1\\n2\\n5\\n10') == '8'\n\"\"\"\n\n\"\"\"\nGiven two strings, find out if one is a permutation of the other.\n\n-----Input-----\nTwo strings A and B, where A is a permutation of B\n\n-----Output-----\nPrint \"Yes\" if A is a permutation of B\nPrint \"No\" if A is not a permutation of B\n\n-----Sample Input-----\nhash\naabcc\n\n-----Sample Output-----\nYes\n\"\"\"\nimport sys"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3 1\\n2\\n5\\n10\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n7 1\n2\n5\n10''') == '8'\n\n'''\ninput:\n1\n1\n2\n\noutput:\n1\n'''\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n2\\n2\\n100') == '2'\nassert solution('0\\n0\\n0\\n100') == '0'\n\"\"\"\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n2\\n2\\n100') == '2'\nassert solution('1\\n1\\n0\\n50') == '1'\nassert solution('1\\n0\\n0\\n50') == '0'\nassert solution('1\\n1\\n1\\n50') == '0'\n\"\"\""
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 2 100') == '2'\nassert solution('1 1 1 100') == '0'\nassert solution('1 1 2 50') == '1'\nassert solution('5 5 5 10000') == '0'\nassert solution('3 3 3 5') == '0'\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2 100\") == \"2\"\nassert solution(\"0 0 0 100\") == \"1\"\nassert solution(\"3 3 3 1\") == \"0\"\nassert solution(\"4 4 5 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n2\\n2\\n100') == '2'\n\"\"\"\n\nA, B, C, X = map(int, input().split())"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n2\\n2\\n100') == '2'\nassert solution('5\\n3\\n6\\n3') == '0'"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\nassert solution(\"3\\n0\\n2\\n50\") == \"1\"\nassert solution(\"0\\n2\\n0\\n50\") == \"1\"\nassert solution(\"0\\n0\\n2\\n50\") == \"1\"\nassert solution(\"0\\n0\\n0\\n50\") == \"0\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n2\\n2\\n100') == '2'\nassert solution('1\\n1\\n1\\n100') == '0'\nassert solution('2\\n0\\n0\\n100') == '2'\n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n2\\n2\\n100') == 2\n\"\"\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"3 1 1\") == \"No\"\nassert solution(\"1 3 3\") == \"No\"\n\nfrom tools import test\n\ntest(solution, [\n    (\"1 3 2\", \"Yes\"),\n    (\"3 1 1\", \"No\"),\n    (\"1 3 3\", \"No\"),\n], should_raise=False)\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 2') == 'Yes'\n\"\"\"\n\n\"\"\"\nimport sys\n\n_, a, b, c = map(int, sys.stdin.readline().split())\nprint('Yes' if c >= a and c <= b else 'No')\n\"\"\"\n\n\nA, B, C = map(int, input().split())\nprint('Yes' if C >= A and C <= B else 'No')\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 3 2') == 'Yes'\nassert solution('1 3 1') == 'No'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\nassert solution(\"2 1 1\") == \"No\"\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3 2\\n') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3 2') == 'Yes'\nassert solution('1 3 3') == 'No'\nassert solution('1 2 3') == 'No'\nassert solution('1 1 1') == 'Yes'\nassert solution('-1 1 1') == 'Yes'\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3 2') == 'Yes'\nassert solution('1 3 4') == 'No'\nassert solution('1 3 1') == 'No'\nassert solution('0 0 0') == 'Yes'\nassert solution('0 0 0') == 'Yes'\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3 2') == 'Yes'\n\"\"\"\n\nA, B, C = map(int, stdin.split())\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1000\\n120\\n100') == '9'\n\"\"\"\n\nn, m = list(map(int, input().split()))\n\ns = list(map(int, input().split()))"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 1000\n120\n100\n140''') == '9'\n\n\"\"\"\n3 1000\n120\n100\n140\n\n9\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1000\") == \"9\"\n\"\"\"\n\nfrom collections import Counter\n\nN, X = map(int, input().split())\nm_list = list(map(int, input().split()))\n\nm_counter = Counter(m_list)\n\nn_count = 0\nmax_count = 0\nfor m_key, m_value in m_counter.items():\n    n_count = m_value // X + (m_value % X > 0)\n    max_count = max(max_count, n_count)\n\nprint(max_count)\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1000\\n120\\n100\\n140\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\n\"\"\"\n\nn, x = map(int, input().split())\nm = list(map(int, input().split()))\n\ncnt = 0\ni = 0\nwhile i < n:\n    if sum(m) <= x:\n        cnt += 1\n        x -= m[i]\n        i += 1\n    else:\n        cnt += 1\n        break\n\nprint(cnt)"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\n\"\"\"\n\nimport sys\nfrom collections import deque, defaultdict"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1000\\n120\\n100\\n140\\n') == '9'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"apple\") == 1\nassert solution(\"apple\") == 1\nassert solution(\"orange\") == 1\n\n-----"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\n\"\"\"\nimport ast\nimport sys"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\napple\\napple\\n\") == \"2\\n\"\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\napple\\norange\\napple\") == \"2\"\n\"\"\"\n\nN = int(input())\n\nkinds = set()\nfor i in range(N):\n    kinds.add(input())\n\nprint(len(kinds))"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '3\\n' + 'apple\\n' + 'orange\\n' + 'apple\\n'\n) == '2\\n'\n\"\"\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"apple\\napple\") == \"apple\"\nassert solution(\"apple\\norange\") == \"apple\"\nassert solution(\"apple\\napple\\norange\") == \"apple\"\nassert solution(\"apple\\napple\\norange\\napple\") == \"apple\"\nassert solution(\"apple\\norange\\napple\\napple\") == \"apple\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\napple\\n:\\napple\\n\") == 2\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"apple\") == 1\nassert solution(\"orange\") == 1\n\nassert solution(\"apple\") == 1\nassert solution(\"orange\") == 1\n\nassert solution(\"apple\") == 1\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\napple\\norange\\napple') == 2\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"apple\\norange\\napple\") == 2\n'''\n\nn = int(stdin.readline().strip())\nitems = dict()\nfor i in range(n):\n    item = stdin.readline().strip()\n    if item in items:\n        items[item] += 1\n    else:\n        items[item] = 1\nprint(len(items))\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3200 2500 2700 2700\") == '2 2'\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2100 2500 2700 2700\") == \"2 2\"\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2100 2500 2700 2700\") == \"2 2\"\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(sample_stdin) == sample_output\n\n\"\"\"\nimport math"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"\n\"\"\"\nimport math\n\nN = int(stdin.readline().strip())\nA = list(map(int, stdin.readline().strip().split(\" \")))\n\nA.sort()\n\nmaxColor = A[-1] // 3000\nminColor = math.ceil(A[0] // 3000)\n\nfor i in range(minColor, maxColor + 1):\n    candColor = A[0] // 3000 + i\n    for j in range(len(A)):\n        if A[j] // 3000 > candColor:\n            candColor = A[j] // 3000 + i\n    if candColor >= maxColor:\n        break\n\nprint(minColor, candColor)\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2100 2500 2700 2700') == '2 2'\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().strip().split()))"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2 3\") == \"2 2\"\nassert solution(\"1 1 1 1\") == \"1 1\"\nassert solution
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2100 2500 2700 2700') == '2 2'\n\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('oxo') == 900\n\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"oxo\") == 900\nassert solution(\"xxx\") == 700\n\"\"\"\n\nS = input()\n\nprint(700 + 100 * 2 if S[0] == \"o\" and (S[1] == \"o\" and S[2] == \"o\") else 700)\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"oxo\") == 900\nassert solution(\"ooo\") == 1200\n\n\"\"\"\n\nimport unittest\n\n\nclass TestSum(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"oxo\"), 900)\n        self.assertEqual(solution(\"ooo\"), 1200)\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"oxo\") == 900\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"oxo\") == 900\nassert solution(\"xxx\") == 700\n\"\"\"\n\n\"\"\"\nhint 1\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"oxo\") == 900\nprint(solution(\"oxo\"))\n\nfrom sys import stdin\ns = stdin.readline().strip()\nprint(700 + 100 * (s.count(\"x\") + s.count(\"o\") - 1))\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('oxo') == 900\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    'H H'\n) == 'H'\nassert solution(\n    'D D'\n) == 'D'\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'H'\nassert solution('D D') == 'D'\n\"\"\"\nimport sys"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"D H\") == \"D\"\nassert solution(\"H D\") == \"H\"\nassert solution(\"D D\") == \"H\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"H D\") == \"D\"\nassert solution(\"D H\") == \"D\"\nassert solution(\"D D\") == \"D\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\n\n\"\"\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"D D\") == \"D\"\n\"\"\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\u201cHH\u201d) == \u201cH\u201d\nassert solution(\u201cDH\u201d) == \u201cD\u201d\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(s) == \"H\"\n\"\"\"\nimport sys\n\nfor line in sys.stdin:\n    a, b = line.split()\n    print('H' if a == 'H' else 'D' if b == 'H' else 'H')"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"DD\") == \"D\"\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\n\nassert solution('D H') == 'H'\nassert solution('D D') == 'D'\n\"\"\""
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\nassert solution(\"1221\") == \"1+2+2-1=7\"\nassert solution(\"1314\") == \"1-3+4-1=7\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\"\"\"\n\ninput_string = input()\n\nA = int(input_string[0])\nB = int(input_string[1])\nC = int(input_string[2])\nD = int(input_string[3])\n\nsigns = ['+', '-']\n\nfor i in range(len(signs)):\n    for j in range(len(signs)):\n        for k in range(len(signs)):\n            if (A * signs[i] + B * signs[j] + C * signs[k] + D) == 7:\n                print(f'{A * signs[i]}' + f'{B * signs[j]}' + f'{C * signs[k]}' + '=' + '7')\n                exit()\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution( \"1222\") == \"1+2+2+2=7\"\nassert solution( \"1111\") == \"1-1=0\"\nassert solution( \"1232\") == \"2-1=1\"\nassert solution( \"1222\") == \"1+2+2+2=7\"\nassert solution( \"1232\") == \"2-1=1\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\"\"\""
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"2\\n2\\n0\\n0\\n0\"\nassert solution(\"5\\n1 2 4 5 3\") == \"2\\n2\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1 2\\n') == '2'\nassert solution('2\\n') == '0'\nassert solution('1 2 1 3\\n') == '3'\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\\n\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\\n\"\nassert solution(\"5\\n1 2 1 3 2\\n\") == \"1\\n0\\n0\\n2\\n0\\n\"\nassert solution(\"1\\n\") == \"0\\n\"\nassert solution(\"5\\n2 2 1 3 4\\n\") == \"0\\n0\\n2\\n0\\n\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '5\\n1 1 2 2'\n) == '2\\n2\\n0\\n0\\n0\\n'\nassert solution(\n    '10\\n4 7 9 8 8 10 9 8 11 12 4'\n) == '5\\n6\\n0\\n0\\n0\\n0\\n'\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0'\n\n---\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == expected_output\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\n\n\"\"\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''0''') == '0'"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\n-----\n\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:01:49.038372.py =====\n6\n3\nThe kangaroo can reach his nest at time 3 by jumping to the right three times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:01:52.350157.py =====\n6\n4\nThe kangaroo can reach his nest at time 4 by jumping to the right four times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:02:02.567689.py =====\n6\n5\nThe kangaroo can reach his nest at time 5 by jumping to the right five times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:02:02.572973.py =====\n6\n6\nThe kangaroo can reach his nest at time 6 by jumping to the right six times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:02:02.582780.py =====\n6\n7\nThe kangaroo can reach his nest at time 7 by jumping to the right seven times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:02:02.591330.py =====\n6\n8\nThe kangaroo can reach his nest at time 8 by jumping to the right eight times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:02:02.594521.py =====\n6\n9\nThe kangaroo can reach his nest at time 9 by jumping to the right nine times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:02:02.597089.py =====\n6\n10\nThe kangaroo can reach his nest at time 10 by jumping to the right ten times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:02:02.601110.py =====\n6\n11\nThe kangaroo can reach his nest at time 11 by jumping to the right eleven times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:02:02.601498.py =====\n6\n12\nThe kangaroo can reach his nest at time 12 by jumping to the right twelve times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:02:02.602409.py =====\n6\n13\nThe kangaroo can reach his nest at time 13 by jumping to the right thirteen times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:02:02.603512.py =====\n6\n14\nThe kangaroo can reach his nest at time 14 by jumping to the right fourteen times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:02:02.604534.py =====\n6\n15\nThe kangaroo can reach his nest at time 15 by jumping to the right fifteen times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:02:02.605628.py =====\n6\n16\nThe kangaroo can reach his nest at time 16 by jumping to the right sixteen times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:02:02.606831.py =====\n6\n17\nThe kangaroo can reach his nest at time 17 by jumping to the right seventeen times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:02:02.607944.py =====\n6\n18\nThe kangaroo can reach his nest at time 18 by jumping to the right eighteen times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:02:02.609125.py =====\n6\n19\nThe kangaroo can reach his nest at time 19 by jumping to the right nineteen times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:02:02.609735.py =====\n6\n20\nThe kangaroo can reach his nest at time 20 by jumping to the right twenty times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:02:02.610078.py =====\n6\n21\nThe kangaroo can reach his nest at time 21 by jumping to the right twenty one times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:02:02.611084.py =====\n6\n22\nThe kangaroo can reach his nest at time 22 by jumping to the right twenty two times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:02:02.612070.py =====\n6\n23\nThe kangaroo can reach his nest at time 23 by jumping to the right twenty three times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:02:02.613120.py =====\n6\n24\nThe kangaroo can reach his nest at time 24 by jumping to the right twenty four times, which is the earliest possible time.\n>>> \n===== RESTART: /Users/h/Desktop/PYTHON/2020-09-02/2020-09-02T21:02:02.613841.py =====\n6\n25\nThe kangaroo can reach his nest at time 25 by jumping to the right twenty five times, which is the earliest possible time.\n>>> \n===== RESTART:"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"3\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6') == '3'\nassert solution('5') == '2'\nassert solution('4') == '1'\nassert solution('3') == '0'\nassert solution('2') == '0'\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n5') == '2'\nassert solution('1\\n5\\n7') == '2'\nassert solution('1\\n5\\n7\\n8') == '3'\nassert solution('1\\n5\\n7\\n8\\n11') == '6'\nassert solution('1\\n5\\n7\\n8\\n11\\n13') == '7'\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\") == \"3\"\n\"\"\"\nfrom typing import List\n\nX = int(input())\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"6\") == \"3\"\n\"\"\"\n\n\"\"\"\n/*\n *\n * @param x int\u6574\u578b \u8d77\u59cb\u70b9\n * @param y int\u6574\u578b \u76ee\u6807\u70b9\n * @return int\u6574\u578b\n */\n\"\"\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"3\"\n\"\"\"\n\nX = input()\nX = int(X)\nprint(X-1)\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6') == '3'\nprint(solution('6'))\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1118\") == \"Yes\"\nassert solution(\"1119\") == \"No\"\nassert solution(\"1124\") == \"No\"\n\nimport sys\nassert sys.stdin.read() == '1118\\n'\nprint('Hooray!')\n\nimport sys\nassert sys.stdin.read() == '1119\\n'\nprint('Hooray!')\n\nimport sys\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1118') == \"Yes\"\nassert solution('1020') == \"No\"\nassert solution('1892') == \"Yes\"\nassert solution('811') == \"No\"\nassert solution('1884') == \"No\"\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1118\") == \"Yes\"\nassert solution(\"1234\") == \"No\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1118) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1111') == 'Yes'\nassert solution('1124') == 'No'\nassert solution('999') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1118') == 'Yes'\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1118\") == \"Yes\"\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1118\") == \"Yes\"\nassert solution(\"1234\") == \"No\"\nassert solution(\"1111\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1010') == 'No'\nassert solution('9999') == 'Yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1118') == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4 5') == '3'\nassert solution('1 2 2 1') == '1'\nassert solution('1 1 1 1') == '0'\nassert solution('1 1 1 1 1 1 1') == '0'\nassert solution('1 1 1 1 1 1 1 1 1') == '0'\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\"\n\"\"\"\n\n\"\"\"\n-----SOLUTION-----\n\"\"\"\n\nn = int(stdin.readline().rstrip())\nupper_limit = list(map(int, stdin.readline().rstrip().split(' ')))\nmiddle_limit = list(map(int, stdin.readline().rstrip().split(' ')))\nlower_limit = list(map(int, stdin.readline().rstrip().split(' ')))\n\nupper = []\nmiddle = []\nlower = []\n\nfor i in range(n):\n    upper.append(upper_limit[i])\n    middle.append(middle_limit[i])\n    lower.append(lower_limit[i])\n\naltars = 0\n\nfor i in range(n):\n    if middle[i] > upper[i] and lower[i] > middle[i]:\n        altars += 1\n\nprint(altars)\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == 3\n\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 5\\n2 4\\n3 6\\n') == 3\n\"\"\"\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 5\\n2 4\\n3 6') == 3\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_1) == \"1\"\nassert solution(test_input_2) == \"3\"\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 5\\n2 4\\n3 6\") == \"3\"\n\"\"\"\n\nn = int(input())\nupper, middle, lower = [], [], []\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    upper.append(a)\n    middle.append(b)\n    lower.append(c)"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\\n6\\n7\\n8\\n9\") == \"3\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == 3\n\"\"\"\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 4 3\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A B\") == \"<\"\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('A B') == '<'\nassert solution('B A') == '>'\nassert solution('C D') == '='\nassert solution('D C') == '='\n\"\"\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('A B') == '<'\nassert solution('B A') == '>'\nassert solution('B C') == '='\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(solution(str(input()))), \"WA\"\nprint('Correct')"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    'A B'\n) == '<'\n\nassert solution(\n    'A B'\n) == '<'\n\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A B') == '<'\nassert solution('B A') == '>'\nassert solution('A A') == '='\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('A B') == '<'\nassert solution('B A') == '>'\nassert solution('A A') == '='\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"A A\") == \"=\"\n\"\"\"\n\nx, y = input().split()\nprint(\"<\" if int(x, 16) < int(y, 16) else \">\" if int(x, 16) > int(y, 16) else \"=\")\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A A\") == \"=\"\nassert solution(\"A B\") == \"<\"\nassert solution(\"B B\") == \">\"\nassert solution(\"A C\") == \"<\"\nassert solution(\"B D\") == \">\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('A B') == '<'\nassert solution('B A') == '>'\nassert solution('A A') == '='\nassert solution('B B') == '='\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\nassert solution(\"2 2\\n.#\\n##\") == \"11\"\nassert solution(\"3 3\\n###\\n...\\n\") == \"33\"\nassert solution(\"2 2\\n##\\n.\") == \"22\"\nassert solution(\"1 1\\n#\") == \"1\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\\n1#2#1\\n11211\\n\"\nassert solution(\"3 5\\n....#\\n.#.#.\\n....#\\n\") == \"11111\\n2#1#1\\n11111\\n\"\n\n\"\"\""
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5\\n.....\\n.#.#.\\n.....') == '11211'\n\"\"\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".#.\\n..#\\n###\") == \"11211\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5\\n.....\\n.#.#.\\n.....') == '11211'\n\"\"\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\n\"\"\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3 5\n.....\n.#.#.\n.....\n''') == '11112'\n\nassert solution('''\n3 5\n.....\n.#.#.\n.....\n''') == '1#2#1'\n\nassert solution('''\n3 5\n.....\n.#.#.\n.....\n''') == '11112'\n\nassert solution('''\n3 5\n.....\n.#.#.\n.....\n''') == '1#2#1'\n\nassert solution('''\n3 5\n.....\n.#.#.\n.....\n''') == '11112'"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\n\"\"\""
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150') == 3\n\n---\n- Time: O(n)\n- Space: O(1)\n---\n\nThe first line contains three integers N, M, and K.\nThe second line contains N integers, A_1, A_2,..., A_N, with each A_i in the range [1, 10^9].\nThe third line contains M integers, B_1, B_2,..., B_M, with each B_i in the range [1, 10^9].\n\nSample input:\n3 4 240\n60 90 120\n80 150 80 150\n\nSample output:\n3\n\nWe can read three books in 230 minutes, as shown below, and this is the maximum number of books we can read within 240 minutes.\n - Read the topmost book on Desk A in 60 minutes, and remove that book from the desk.\n - Read the topmost book on Desk B in 80 minutes, and remove that book from the desk.\n - Read the topmost book on Desk A in 90 minutes, and remove that book from the desk.\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\n\"\"\""
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"3 4 240\\n60 90 120\\n80 150 80 150\"\n) == \"3\"\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 4 240\n60 90 120\n80 150 80 150''') == '3'\nassert solution('''3 4 240\n60 90 120\n80 150 80 150''') == '3'\nassert solution('''3 4 240\n60 90 120\n80 150 80 150''') == '3'\nassert solution('''3 4 240\n60 90 120\n80 150 80 150''') == '3'\n\n'''\nIn this case, it takes us 60, 90, 120 minutes to read the 1-st, 2-nd, 3-rd books from the top on Desk A, and 80, 150, 80, 150 minutes to read the 1-st, 2-nd, 3-rd, 4-th books from the top on Desk B, respectively.\nWe can read three books in 230 minutes, as shown below, and this is the maximum number of books we can read within 240 minutes.\n - Read the topmost book on Desk A in 60 minutes, and remove that book from the desk.\n - Read the topmost book on Desk B in 80 minutes, and remove that book from the desk.\n - Read the topmost book on Desk A in 90 minutes, and remove that book from the desk.\n'''\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5 240\\n60 90 120\\n80 150 80 150') == 3\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 4 240\n60 90 120\n80 150 80 150''') == '3'\n\"\"\"\n\n\nimport sys\nfrom collections import deque\nfrom typing import List, Deque\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == 3\n\n-------\n>>> \n    \n------\n    \n\"\"\""
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150') == 3\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\n\n\"\"\"\n\n\nfrom sys import stdin, stdout\n\n\nclass Pizza:\n    def __init__(self, A: int, B: int, C: int, X: int, Y: int):\n        self.A = A\n        self.B = B\n        self.C = C\n        self.X = X\n        self.Y = Y\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\nprint(\"Teste unit\u00e1rio passou!\")\n\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(A B C X Y) == '7900'\n\"\"\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\nassert solution('500 500 50 2 2') == '3000'\n\"\"\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\n\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n') == '4'\n\"\"\""
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"4\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n') == '4'\nassert solution('6\\n') == '6'"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"0\"\n\n------\n\"\"\"\nimport unittest\nfrom functools import reduce"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '4'\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == 4\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n\") == \"4\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n') == 4\n\"\"\""
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == 4\n\"\"\""
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '9'\n\"\"\""
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == '9'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"100\") == \"99\"\nassert solution(\"1000\") == \"999\"\nassert solution(\"15\") == \"12\"\n\n\"\"\""
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == '9'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"9\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\""
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n\nfrom math import log, sqrt"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"9\"\nprint(\"Test pass.\")\n\n\"\"\""
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == '9'\n\n---\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '9'\nassert solution('3') == '1'\n\"\"\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == 3\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nd_arr = []\nfor i in range(n):\n    d_arr.append(int(sys.stdin.readline()))\n\ndp = [0] * n\ndp[0] = 1\n\nfor i in range(1, n):\n    j = 0\n    while j < i:\n        if d_arr[i] > d_arr[j]:\n            dp[i] = max(dp[j] + 1, dp[i])\n        j += 1\n\nprint(max(dp))"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '4\\n10\\n8\\n8\\n6'\n) == 3"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 10 8 8 6') == '3'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nN_lst = list(map(int, sys.stdin.readline().split()))\n\nstack_lst = [N_lst[0]]\n\nfor i in range(1, N):\n    if N_lst[i] >= stack_lst[-1]:\n        stack_lst.append(N_lst[i])\n    else:\n        for j in range(len(stack_lst) - 1, -1, -1):\n            if stack_lst[j] >= N_lst[i]:\n                stack_lst.insert(j + 1, N_lst[i])\n                break\n\nprint(len(stack_lst))"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\n\n\"\"\"\n\nN = int(input())\nd = list(map(int, input().split()))\ncnt = 0\nfor i in range(N):\n    for j in range(i):\n        if d[i] < d[j]:\n            cnt += 1\nprint(cnt)\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '4\\n10\\n8\\n8\\n6'\n) == '3'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6\\n') == '3'"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\nprint(solution(\"4\\n10\\n8\\n8\\n6\"))\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\\n\") == \"3\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6\\n') == '3'\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\n------\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"\n\ns = input()\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('QWERTYASDFZXCV') == 5\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\"\n\n\"\"\"\nGiven a string s. Let n be the length of the string.\n\nWe want to partition the string into two non-empty parts, L and R such that L + R is equal to s and the number of elements in L is as small as possible.\n\nReturn the string L + R. It is guaranteed that s is a valid input.\n\n \n\nExample 1:\n\nInput: s = \"1+1+1\"\nOutput: \"11\"\nExplanation: \"1+1+1\" is equal to \"11\",\n and \"11\" has only two digits, so it is the answer.\nExample 2:\n\nInput: s = \"2+3+4\"\nOutput: \"2334\"\nExplanation: \"2+3+4\" is equal to \"2334\",\n and \"2334\" has only four digits, so it is the answer.\nExample 3:\n\nInput: s = \"3+2+1\"\nOutput: \"321\"\nExplanation: \"3+2+1\" is equal to \"321\",\n and \"321\" has only three digits, so it is the answer.\nExample 4:\n\nInput: s = \"12345\"\nOutput: \"123445\"\nExplanation: \"12345\" is equal to \"123445\",\n and \"123445\" has only five digits, so it is the answer.\nExample 5:\n\nInput: s = \"199100199\"\nOutput: \"19910199\"\nExplanation: \"199100199\" is equal to \"19910199\",\n and \"19910199\" has only six digits, so it is the answer.\n \n\nConstraints:\n\n1 <= s.length <= 500\ns consists of digits.\n\"\"\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\n\"\"\"\n\n\"\"\"\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0443\u044e \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u043c\u0438 \u0431\u0443\u043a\u0432\u0430\u043c\u0438. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0443\u043a\u0432 \u0432 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u0415\u0441\u043b\u0438 \u0431\u0443\u043a\u0432\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437, \u0442\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u043d\u043e\u043c\u0435\u0440 \u0435\u0451 \u043f\u043e\u0437\u0438\u0446\u0438\u0438.\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 \u0441\u0438\u043c\u0432\u043e\u043b. \u0415\u0441\u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0435\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u043f\u043e\u0437\u0438\u0446\u0438\u0438. \u0415\u0441\u043b\u0438 \u0431\u0443\u043a\u0432\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437, \u0442\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u043e\u043c\u0435\u0440\u0430 \u0435\u0451 \u043f\u043e\u0437\u0438\u0446\u0438\u0439.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\nabc d e\nd\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n1 3\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\""
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n4\\n8\\n16\\n32\\n64\\n128\\n256\\n512\\n1024\\n2048\\n4096\\n8192\\n16384\\n32768\\n65536\\n131072\\n262144\\n524288\\n1048576\\n') == '2'\nassert solution('3\\n6\\n12\\n24\\n48\\n96\\n192\\n384\\n768\\n1536\\n3072\\n6144\\n12288\\n24576\\n49152\\n98304\\n') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n8 12 40') == 2\n\n\"\"\"\n\n\nfrom math import ceil"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n8 12 40') == '2'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n8 12 40\") == '2'\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 12 40\") == '2'\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"3\\n8 12 40\"\n) == \"2\"\n\n\"\"\""
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n8 12 40\") == 2\nprint(\"Test 1: PASSED\")\n\nassert solution(\"2\\n8 12 40\") == 1\nprint(\"Test 2: PASSED\")\n\nassert solution(\"1\\n8 12 40\") == 0\nprint(\"Test 3: PASSED\")\n\nassert solution(\"0\\n8 12 40\") == 0\nprint(\"Test 4: PASSED\")\n\nprint(\"ALL TEST CASES PASSED\")\n\n\"\"\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n8 12 40\") == '2'\n\"\"\""
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n8 12 40') == '2'\n\"\"\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n8 12 40\") == 2\n\"\"\"\nfrom collections import deque\n\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_INT = lambda: int(INPUT_LINES[0])\nINPUT_LINES_FROM_STDERR = lambda line_count: [INPUT_LINES[line_count + 1]]\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"-1\") == \"0\"\n\nprint(\"all tests passed.\")\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == 6\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '24'\nassert solution('10') == '100'\nassert solution('999') == '5987532029'\n\nimport unittest\nimport io\nimport sys\nfrom collections import deque\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdin, stdout = sys.stdin, sys.stdout\n        sys.stdin, sys.stdout = io.StringIO(input), io.StringIO()\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdin, sys.stdout = stdin, stdout\n        self.assertEqual(out, output)\n    def test_Sample_Input_1(self):\n        input = \"\"\"3\n        \"\"\"\n        output = \"\"\"6\"\"\"\n        self."
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == 6\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '6'\nassert solution('10') == '3628800'\n\"\"\"\n\nimport math\n\nn = int(stdin.readline().strip())\n\nprint(math.factorial(n) % (10 ** 9 + 7))\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == 16\nassert solution('2') == 4\nassert solution('3') == 6\nassert solution('6') == 144\n\"\"\""
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '6'"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdin_expected\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == 6\n\"\"\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '6'\n\nimport os, sys, re, math, functools, operator as op\nfrom collections import deque, defaultdict, Counter\nfrom itertools import permutations, combinations, product, accumulate\nfrom numpy import array, empty, ndarray, arange, int64, uint32, uint64, zeros\nimport numpy as np"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '6'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n') == '6'\nassert solution('1\\n') == '1'\nassert solution('1000\\n') == '5000000'\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline().rstrip())\n\nprint(n*(n+1)//2)\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"1\") == \"1\"\nassert solution(\"20\") == \"100\"\nassert solution(\"8\") == \"40\"\nassert solution(\"4\") == \"10\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == 6\n\"\"\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '6'\n\"\"\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"6\"\nprint(\"Success\")\n\n------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"3\") == 6\nprint(solution(\n    \"3\"))\nassert solution(\n    \"1\") == 1\nprint(solution(\n    \"1\"))\nassert solution(\n    \"2\") == 2\nprint(solution(\n    \"2\"))\nassert solution(\n    \"3\") == 6\nprint(solution(\n    \"3\"))\nassert solution(\n    \"4\") == 8\nprint(solution(\n    \"4\"))\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"2\") == \"4\"\nassert solution(\"1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"3 1\"\n    ) == 2\n\nassert solution(\n    \"2 2\"\n    ) == 0\nassert solution(\n    \"2 3\"\n    ) == 1\nassert solution(\n    \"4 2\"\n    ) == 1\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1\\n') == 2\nprint(solution(stdin))\n\n\n-----\nGiven the input n, find the sum of all numbers from 1 to n.\n\n-----Constraints-----\n - n is an integer within the range [1... 100,000].\n\n-----Input-----\nThe first and only line of input contains an integer n.\n\n-----Output-----\nPrint the sum of all numbers from 1 to n as one number on a new line.\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\n6"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n3 1') == '2'\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '0'\nassert solution('1 1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '0'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n3 1\") == \"2\"\n\"\"\"\n\n\"\"\"\nN = int(input().strip())\nA = list(map(int, input().strip().split()))\n\nmax_score = sum(A)\nfor i in range(0, len(A)):\n    tmp = A[i]\n    tmp_score = sum(A) - tmp\n    for j in range(i + 1, len(A)):\n        tmp += A[j]\n        tmp_score -= tmp\n        if tmp_score > max_score:\n            max_score = tmp_score\n\nprint(max_score)\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3 1\") == 2\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n') == '2'\nassert solution('3 2\\n') == '0'\n\"\"\"\nimport sys"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 5 6\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\") == \"0\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'2\\n3 1'\n) == '2'\nassert solution(\n'2\\n1 1'\n) == '0'\nassert solution(\n'3\\n3 1 2'\n) == '2'\nassert solution(\n'3\\n1 2 3'\n) == '1'\nassert solution(\n'4\\n4 1 2 3'\n) == '0'\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n3 1') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\"\n\nn, m = input().split()\nans = [0,0]\n\nfor i in range(int(m)):\n    s = input().split()\n    if s[1] == \"AC\":\n        ans[0] += 1\n        if ans[1] == 0:\n            ans[1] += 1\n    else:\n        ans[1] += 1\n\nprint(\" \".join(map(str, ans)))\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n2 5\n1 WA\n1 AC\n2 WA\n2 AC\n2 WA\n''') == '2 2'\n\n-------\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n2 5\n1 WA\n1 AC\n2 WA\n2 AC\n2 WA\n'''))\n2 2\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n3 5\n1 WA\n1 AC\n2 WA\n2 AC\n2 WA\n'''))\n2 2\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n5 10\n1 AC\n1 AC\n1 WA\n2 AC\n2 AC\n2 AC\n3 AC\n3 WA\n3 WA\n4 AC\n4 WA\n4 WA\n5 WA\n'''))\n2 3\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n5 10\n1 AC\n1 AC\n1 WA\n2 AC\n2 AC\n2 AC\n3 AC\n3 WA\n3 WA\n4 AC\n4 WA\n4 WA\n5 WA\n'''))\n2 3\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n5 10\n1 AC\n1 AC\n1 WA\n2 AC\n2 AC\n2 AC\n3 AC\n3 WA\n3 WA\n4 AC\n4 WA\n4 WA\n5 WA\n'''))\n2 3\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n5 10\n1 AC\n1 AC\n1 WA\n2 AC\n2 AC\n2 AC\n3 AC\n3 WA\n3 WA\n4 AC\n4 WA\n4 WA\n5 WA\n'''))\n2 3\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n5 10\n1 WA\n1 WA\n1 AC\n2 WA\n2 AC\n2 AC\n3 WA\n3 AC\n3 AC\n4 WA\n4 AC\n4 AC\n5 WA\n'''))\n2 3\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n5 10\n1 WA\n1 AC\n2 WA\n2 AC\n2 AC\n2 AC\n3 WA\n3 AC\n3 AC\n4 WA\n4 AC\n4 AC\n5 WA\n'''))\n2 3\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n5 10\n1 AC\n1 AC\n1 WA\n2 AC\n2 AC\n2 AC\n3 AC\n3 WA\n3 WA\n4 AC\n4 WA\n4 WA\n5 WA\n'''))\n2 3\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n5 10\n1 AC\n1 AC\n1 AC\n2 AC\n2 AC\n2 AC\n3 AC\n3 AC\n3 WA\n4 AC\n4 WA\n4 WA\n5 WA\n'''))\n2 3\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n5 10\n1 AC\n1 AC\n1 AC\n2 AC\n2 AC\n2 AC\n3 WA\n3 AC\n3 AC\n4 AC\n4 WA\n4 WA\n5 WA\n'''))\n2 3\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n5 10\n1 AC\n1 AC\n1 AC\n2 AC\n2 AC\n2 AC\n3 AC\n3 WA\n3 AC\n4 AC\n4 WA\n4 WA\n5 WA\n'''))\n2 3\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n5 10\n1 AC\n1 AC\n1 AC\n2 AC\n2 AC\n2 AC\n3 AC\n3 WA\n3 AC\n4 WA\n4 WA\n4 WA\n5 WA\n'''))\n2 3\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n5 10\n1 AC\n1 AC\n1 AC\n2 AC\n2 AC\n2 AC\n3 AC\n3 WA\n3 AC\n4 WA\n4 WA\n4 WA\n5 WA\n'''))\n2 3\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n5 10\n1 AC\n1 AC\n1 AC\n2 AC\n2 AC\n2 AC\n3 AC\n3 WA\n3 AC\n4 WA\n4 WA\n4 WA\n5 WA\n'''))\n2 3\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n5 10\n1 AC\n1 AC\n1 AC\n2 AC\n2 AC\n2 AC\n3 AC\n3 WA\n3 AC\n4 WA\n4 WA\n4 WA\n5 WA\n'''))\n2 3\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n5 10\n1 AC\n1 AC\n1 AC\n2 AC\n2 AC\n2 AC\n3 AC\n3 WA\n3 AC\n4 WA\n4 WA\n4 WA\n5 WA\n'''))\n2 3\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n5 10\n1 AC\n1 AC\n1 AC\n2 AC\n2 AC\n2 AC\n3 AC\n3 WA\n3 AC\n4 WA\n4 WA\n4 WA\n5 WA\n'''))\n2 3\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n5 10\n1 AC\n1 AC\n1 AC\n2 AC\n2 AC\n2 AC\n3 AC\n3 WA\n3 AC\n4 WA\n4 WA\n4 WA\n5 WA\n'''))\n2 3\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n5 10\n1 AC\n1 AC\n1 AC\n2 AC\n2 AC\n2 AC\n3 AC\n3 WA\n3 AC\n4 WA\n4 WA\n4 WA\n5 WA\n'''))\n2 3\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n5 10\n1 AC\n1 AC\n1 AC\n2 AC\n2 AC\n2 AC\n3 AC\n3 WA\n3 AC\n4 WA\n4 WA\n4 WA\n5 WA\n'''))\n2 3\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n5 10\n1 AC\n1 AC\n1 AC\n2 AC\n2 AC\n2 AC\n3 AC\n3 WA\n3 AC\n4 WA\n4 WA\n4 WA\n5 WA\n'''))\n2 3\n\n>>> \n=======\n\n=======\nprint(solution(stdin='''\n5 10\n1 AC\n1 AC\n1 AC\n2 AC\n2 AC\n2 AC\n3 AC\n3 WA\n3 AC\n4 WA\n4 WA\n4 WA\n5 WA\n'''))\n2 3\n\n>>> \n=======\n\n=======\nprint(solution("
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\"\n\nN, M = list(map(int, stdin.readline().split()))\nS = []\nfor i in range(M):\n    S += stdin.readline().split()\n\ncorrect = 0\npenalty = 0\n\nfor i in range(1, N+1):\n    if S.count(str(i)) > 0:\n        correct += 1\n        if S.count(str(i)) >= 2:\n            penalty += S.count(str(i)) - 1\n\nprint(correct, penalty)\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA') == '2 2'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\""
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2 3\") == \"4\"\nassert solution(\"2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 5\\n4 1 5\") == \"5\"\n\"\"\"\nimport math\nfrom collections import Counter\nfrom typing import List\n\nfrom icontract import require\nfrom icontract import DBC\n\n\nclass FHParams(DBC):\n    \"\"\"Represent the Fennec's (Fennec) health parameters.\"\"\"\n\n    @require(lambda num_monsters: num_monsters > 0)\n    def __init__(self, num_monsters: int, monsters: List[int]) -> None:\n        \"\"\"Initialize with the number of monsters and their health.\n\n        :param num_monsters: The number of monsters\n        :param monsters: The list of monster's health\n        \"\"\"\n        self.num_monsters = num_monsters\n        self.monsters = monsters\n\n    def __repr__(self) -> str:\n        \"\"\"Represent the instance as a string for debugging.\"\"\"\n        return \"num_monsters={}, monsters={}\".format(\n            self.num_monsters, self.monsters\n        )\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n\"\"\"\n\nfrom collections import Counter, deque\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n4 1 5\\n\") == \"5\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n4 1 5') == 5\nassert solution('1 1\\n2') == 0\nassert solution('1 1\\n2\\n1') == 1\n\"\"\"\n\nimport sys\nimport bisect"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1\\n4 1 5') == '5'\n\"\"\"\n\nN, K = map(int, input().split())\nH = [int(s) for s in input().split()]\n\nans = 0\nfor i in range(N):\n    H[i] = min(H[i], K)\n    ans += H[i]\n\nfor i in range(N - 1):\n    for j in range(i + 1, N):\n        ans += min(H[i], H[j])\n\nprint(ans)\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == output()\n\"\"\""
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 5\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 5\\n4 1 4\") == \"5\"\nassert solution(\"3 1\\n4 1 5\") == \"4\"\nassert solution(\"3 2\\n4 1 5\") == \"3\"\nassert solution(\"4 2\\n4 1 5\") == \"2\"\nassert solution(\"4 2\\n4 3 5\") == \"1\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 10\\n1 2 3\\n2 3 1') == '4'\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 10 2\\n') == '4'\nassert solution('2 10 2\\n') == '16'\nassert solution('3 10 2\\n') == '18'\nassert solution('4 10 2\\n') == '22'\nassert solution('5 10 2\\n') == '26'\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 10 2\") == 4\n\"\"\"\n\nfrom math import inf\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7\\n10 10\\n2 3\\n1 4') == '6'\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n10\\n2\") == \"4\"\nassert solution(\"1\\n1\\n1\") == \"0\"\nassert solution(\"5\\n5\\n3 2 4 1\") == \"8\"\nassert solution(\"10\\n10\\n10 10 10 10 10 10 10 10 10 10 10 10\") == \"40\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n10\\n2') == '4'\nassert solution('3\\n100\\n300 300 200') == '0'\n'''"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n10\\n2\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 10 2') == 4\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n10\\n2\\n\") == \"4\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 10 2\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\""
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\""
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n600\n300\n220\n420\n\"\"\"\n) == '520'\n\n\"\"\"\nThe train fare will be 600 yen if you buy ordinary tickets, and 300 yen if you buy an unlimited ticket.\nThus, the optimal choice for trains is to buy an unlimited ticket for 300 yen.\nOn the other hand, the optimal choice for buses is to buy ordinary tickets for 220 yen.\nTherefore, the minimum total fare is 300 + 220 = 520 yen.\n\"\"\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\"\n\nA, B, C, D = [int(input()) for _ in range(4)]"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\nassert solution(\"1 2 3 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\nassert solution(\"1 1 1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('600 300 220 420') == '520'\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"600 300 220 420\") == \"520\""
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\"\n\nfrom sys import stdin\n\nA, B, C, D = [int(i) for i in stdin.read().split(\" \")]\n\ntotal = 0"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 4 4 0 2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 4 4 0 2\\n\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 4 0 2\\n\") == \"4\"\nassert solution(\"2 4 4 0 2\\n\") == \"4\"\n\n\"\"\"\nfrom math import factorial\nfrom functools import lru_cache\nimport sys\n\n\n@lru_cache\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n6\n2 0 2 0 0 1\n5 2 2 0 0 1\n5 1 1 0 0 1\n3 3 1 0 0 1\n4 0 3 0 0 1\n3 2 3 0 0 1\n''') == '4'\nassert solution('''\n4\n0 1 1 1\n2 3 3 2\n3 3 2 2\n3 2 2 1\n''') == '0'\nassert solution('''\n5\n3 1 1 2 2\n2 3 1 2 2\n3 2 2 1 1\n3 2 2 2 1\n3 2 1 1 1\n''') == '4'\nassert solution('''\n4\n3 0 0 1\n1 1 1 1\n2 1 1 1\n1 1 1 1\n''') == '0'\n\n'''\n7\n4 3 4 0 2\n1 1 1 1\n2 1 1 1\n1 1 1 1\n3 3 3 3\n3 3 3 3\n3 3 3 3\n3 3 3 3\n'''\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == '4'\n\"\"\"\nimport math"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n2 4 4 0 2''') == '4'\nassert solution('''5\n2 4 4 0 2''') == '4'\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == 4\n\"\"\""
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 2 3\") == \"0\"\nassert solution(\"0 1 1 2\") == \"6\"\nassert solution(\"2 2 2 2 2\") == \"6\"\nassert solution(\"2 2 0 2 2\") == \"2\"\nassert solution(\"2 2 1 0 2\") == \"4\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 4 0 2\") == \"4\"\nassert solution(\"5 2 4 0 2\") == \"0\"\nassert solution(\"6 2 4 0 2\") == \"10\"\nassert solution(\"7 2 4 0 2\") == \"4\"\nassert solution(\"8 2 4 0 2\") == \"0\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 2 5\") == \"84\"\nprint(solution(\"20 2 5\"))\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\"\"\""
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 2 5\") == 84\nassert solution(\"21 2 5\") == 0\n\"\"\""
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''20 2 5''') == '84'\nprint('Test succeeded')\n\nsolution(stdin)"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20 2 5') == '84'"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == 0\nassert solution('1 2 4') == 0\nassert solution('1 2 5') == 10\nassert solution('2 2 5') == 0\nassert solution('2 2 6') == 4\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\"\"\""
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 2 5\\n') == '84'\n\n\"\"\""
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20 2 5') == 84\n\"\"\"\n\n\"\"\"\nSolution 1"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20 2 5') == '84'\nprint('Test pass.')"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100') == \"ABC100\"\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100') == 'ABC100'\nassert solution('200') == 'ABC200'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100') == 'ABC100'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution( \"100\" ) == \"ABC100\"\nassert solution( \"100\") == \"ABC100\"\nassert solution( \"100\") == \"ABC100\"\nassert solution( \"100\") == \"ABC100\"\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100\") == \"ABC100\"\n'''"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100\") == \"ABC100\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100') == 'ABC100'\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100') == 'ABC100'\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\n\"\"\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n5 5\n\"\"\") == \"5\"\nassert solution(\n\"\"\"\n5 1\n\"\"\") == \"5\"\nassert solution(\n\"\"\"\n1 12\n\"\"\") == \"4\"\nassert solution(\n\"\"\"\n1 2\n\"\"\") == \"4\"\nassert solution(\n\"\"\"\n1 2\n\"\"\") == \"4\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5') == '5'\n\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('3 5') == '5'\n\"\"\"\n\na, b = input().split(' ')\na, b = int(a), int(b)\nprint(b-a+1)\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5') == '5'\n\"\"\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('1 1') == '0'\nassert solution('1 1') == '0'\nassert solution('3 1') == '6'\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"6 3\") == \"1\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"1 2\") == \"0\"\n\"\"\"\n\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5') == '5'\nassert solution('1 1') == '0'\nassert solution('1 2') == '0'\nassert solution('2 2') == '1'\nassert solution('12 31') == '21'\n\nhttps://www.interviewbit.com/problems/takahashi-in-gregorian-calendar/\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5') == '5'"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n2\") == '2'\n\"\"\"\n\nN = int(stdin.readline())\ncount = 0\nwhile True:\n    if stdin.readline() == '2\\n':\n        break\n    count += 1\nprint('-1') if count % N > 0 else print(count // N)\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3\\n1\\n2\\n\") == \"2\"\nassert solution(\"2\\n2\\n1\\n1\\n\") == \"0\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n2\\n\") == '2'\nassert solution(\"3\\n3\\n3\\n\") == '-1'\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n2\") == \"2\"\nassert solution(\"4\\n2\\n3\\n4\") == \"0\"\nassert solution(\"1\\n3\") == \"1\"\n\"\"\"\n\nfrom collections import deque\nfrom typing import List, Deque"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1\\n2\\n') == '2'\nassert solution('3\\n2\\n1\\n') == '-1'\nassert solution('6\\n3\\n4\\n5\\n6\\n1\\n') == '5'\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\n\ubb38\uc81c \uc124\uba85\n\ubb38\uc81c \uc124\uba85\nTakahashi wants to gain muscle, and decides to work out at AtCoder Gym.\nThe exercise machine at the gym has N buttons, and exactly one of the buttons is lighten up.\nThese buttons are numbered 1 through N.\nWhen Button i is lighten up and you press it, the light is turned off, and then Button a_i will be lighten up. It is possible that i=a_i.\nWhen Button i is not lighten up, nothing will happen by pressing it.\nInitially, Button 1 is lighten up. Takahashi wants to quit pressing buttons when Button 2 is lighten up.\nDetermine whether this is possible. If the answer is positive, find the minimum number of times he needs to press buttons.\n\n-----Constraints-----\n - 2 \u2264 N \u2264 10^5\n - 1 \u2264 a_i \u2264 N\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1\na_2\n:\na_N\n\n-----Output-----\nPrint -1 if it is impossible to lighten up Button 2.\nOtherwise, print the minimum number of times we need to press buttons in order to lighten up Button 2.\n\n-----Sample Input-----\n3\n3\n1\n2\n\n-----Sample Output-----\n2\n\nPress Button 1, then Button 3.\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n3\\n1\\n2\") == \"2\"\nassert solution(\"3\\n3\\n3\\n3\\n2\\n1\\n2\\n1\\n2\") == \"1\"\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n3\\n1\\n2') == '2'\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n2\\n\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n3\\n1\\n2\") == \"2\"\nassert solution(\"3\\n1\\n2\") == \"-1\"\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1\\n2\\n') == 2\nassert solution('3\\n1\\n2\\n') == 2\n\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n6\\n2\\n6\\n') == '1'\nprint(solution(stdin=input()))\n\n'''"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n6\n2\n6''') == '1'\nassert solution('''3\n6\n2\n6''') == '1'\nassert solution('''3\n6\n2\n6''') == '1'\nassert solution('''2\n1\n2''') == '0'\nassert solution('''3\n6\n2\n6''') == '1'\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2\\n6\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3\\n1\\n5') == '2'\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n6\\n2\\n6') == '1'\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n6\\n2\\n6') == '1'\nassert solution('4\\n6\\n2\\n6') == '3'\nassert solution('1\\n6') == '6'\n\"\"\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n5 2\n1 1 2 2 5\n\"\"\") == '1'\nprint(solution(\n\"\"\"\n5 2\n1 1 2 2 5\n\"\"\"))\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 2 2 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 1 2 2\") == \"1\"\nassert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\nassert solution(\"6 2\\n1 1 2 2 5 6\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == 1\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == 1\nassert solution('5 2\\n1 1 2 2 3') == 2"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == '1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '5 2'\n) == '1'\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2 3\") == \"1\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"4 2\\n1 1 2 3 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == '1'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == '1'\n\"\"\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1 1\\n1 1 1\") == \"Yes\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(print(str(input())))\n\n\"\"\""
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\\n6 1 1\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3 1 2\\n6 1 1\") == \"Yes\"\nassert solution(\"5\\n3 1 2\\n3 1 1\\n6 1 1\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3 1 2\n6 1 1\n\"\"\"\n) == \"Yes\"\nassert solution(\n\"\"\"\n2\n1 3 1\n3 1 1\n\"\"\"\n) == \"No\"\nassert solution(\n\"\"\"\n5\n1 4 3\n2 3 2\n3 2 1\n4 2 2\n4 3 1\n\"\"\"\n) == \"Yes\"\n\"\"\"\n\nSolution\nHave you ever wondered how a large number of people can travel in a circular way?\nThe circular way is when they all start from the same point and then travel around the circle until they all reach the same point again.\n\nYou are given an array people where people[i] is the position where ith person is going.\n\nReturn the minimum number of people that must move in order for all people to move to the same point.\n\nExample 1:\n\nInput: people = [1,3,5,4,2]\nOutput: 1\nExplanation:\nThe second person goes to the last place. The first and third person end up at the last place.\nThe fourth and fifth person end up at the last place.\nThe second and fourth person end up at the last place.\nThe one person who ends up in the last place is the only person who needs to move.\nExample 2:\n\nInput: people = [1,2,3]\nOutput: 0\nExplanation:\nAll people end up at the last place.\nExample 3:\n\nInput: people = [2,1,4,5,3]\nOutput: 3\nExplanation:\nThe third and fourth person move to the last place.\nThe second person and the fourth move to the last place.\nThe fifth and first person move to the last place.\nThe second person, the fifth and third person move to the last place.\nSo you need to move 3 people to have everyone end up at the last place.\n\n\"\"\"\nimport math\nfrom collections import defaultdict\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, people: List[int]) -> int:\n        if len(people) <= 1:\n            return 0\n\n        traveled = defaultdict(int)\n        # start with the first person and add all their distance to the dict\n        for i in range(1, len(people)):\n            key = people[i]\n            if key not in traveled:\n                traveled[key] = math.sqrt(\n                    (people[i - 1][0] - people[i][0]) ** 2 + (people[i - 1][1] - people[i][1]) ** 2\n                ) + 1\n        # then loop through the remaining people and add all their distance to the dict\n        for i in range(1, len(people)):\n            key = people[i]\n            if key not in traveled:\n                traveled[key] = math.sqrt(\n                    (people[0][0] - people[i][0]) ** 2 + (people[0][1] - people[i][1]) ** 2\n                ) + 1\n        # return the biggest distance in the dict\n        return max(traveled.values())\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3') == '2'\n\"\"\"\n\na, b = input().split(' ')\na = int(a)\nb = int(b)\n\nx = (a + b) / 2\nx = round(x)\nprint(x)\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 3''') == '2'\n\"\"\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3\") == 2\n\n-------------"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\"\n\nimport sys\n\nA, B = map(int, sys.stdin.readline().split())\n\nprint(int(round(sum(A, B) / 2.0)))\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1 3''') == '2'\nassert solution('''2 5''') == '3'\nassert solution('''2 10''') == '3'\nassert solution('''1 7''') == '2'\nassert solution('''4 10''') == '5'\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3') == '2'\n\"\"\"\n\na, b = map(int, input().split())\navg = (a + b) // 2\nprint(avg)"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a = 1, b = 3) == 2\n\na, b = map(int, stdin.split())\nprint(round(0.5 * (a + b)))\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\n''') == '4'\n\n-------"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7') == '4'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\") == \"4\"\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5 4\\n1 3\\n2 4\\n3 4\\n4 5\\n4 5\\n') == '4'\n'''"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(__import__('sys').stdin.read())) == str(4)\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom enum import Enum\nfrom typing import List\n\nclass EdgeType(Enum):\n    DOUBLE = 1\n    SELF_LOOP = 2\n    UNDIRECTED = 3\n\n@dataclass\nclass Edge:\n    head: int\n    tail: int\n    edge_type: EdgeType"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 3\\n2 3\") == '4'\n\n-----Explanation-----\nThe graph has 7 vertices and 7 edges.\nThe edges of the graph are:\n\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\n\nThe edges are ordered such that the first edge connects vertices 1 and 3, \nthe second edge connects vertices 2 and 7, the third edge connects vertices 3 and 4, \nthe fourth edge connects vertices 4 and 5, the fifth edge connects vertices 4 and 6, \nand the sixth edge connects vertices 5 and 6.\n\nOne of the edges, 3, is a bridge.\nSo the number of bridges is 4.\n\n\"\"\"\n\nimport sys\n\nN, M = [int(i) for i in input().split()]\n\ngraph = dict()\n\nfor i in range(N):\n    graph[i] = set()\n\nfor i in range(M):\n    a, b = [int(i) for i in input().split()]\n    graph[a-1].add(b-1)\n    graph[b-1].add(a-1)"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\"\"\") == '4'\nassert solution(\"\"\"5 5\n1 2\n1 3\n2 4\n2 5\n3 4\"\"\") == '0'\nassert solution(\"\"\"10 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\"\"\") == '0'\nassert solution(\"\"\"9 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n1 8\"\"\") == '3'\nassert solution(\"\"\"4 5\n1 2\n2 3\n1 3\n2 4\"\"\") == '0'\n\n\"\"\"\nYou have a plane with n rows and m columns. Given a sequence of words, write a function that returns the number of times each word can be put in the plane without overlapping of words.\n\nWords can be laid in the plane in any direction (left to right, right to left, up, down, or diagonally). Given the dimensions of the plane and the sequence of words, return an array of the words that can be fitted in the plane.\n\nThe format of the input is:\n\nn m\nword1\nword2\n...\nwordn\n\nThe input will always be valid and each word will be of the same length.\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7''') == '4'\n\nassert solution('''6 9\n1 5\n2 7\n3 8\n4 6\n5 2\n6 1\n3 5\n7 3\n8 3\n9 7''') == '3'\n\nassert solution('''3 3\n1 2\n2 3\n3 1''') == '0'\n\nassert solution('''5 5\n1 2\n2 3\n3 4\n4 5\n5 1''') == '1'\nassert solution('''2 2\n1 2\n2 1''') == '0'\n\n-----Note-----\n- 0\u2264N\u226450 and 0\u2264M\u2264min(N(N\u22121)\u22c52,50)\n- 1\u2264a_i<b_i\u2264N\n- The given graph does not contain self-loops and double edges.\n- The given graph is connected.\n\n'''\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 3\\n2 3\") == \"2\"\nassert solution(\"4 2\\n1 3\\n1 2\") == \"0\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"0\"\nassert solution(\"5 4\\n1 2\\n2 3\\n2 4\\n3 4\") == \"3\"\n\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self, n):\n        self.n = n\n        self.graph = defaultdict(list)\n        self.visited = [False]*(n+1)\n        self.bridges = []\n\n    def addEdge(self, u, v):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n\n    def bridgeCount(self):\n        self.bridges = []\n        for i in range(1, self.n+1):\n            self.visited[i] = False\n        for i in range(1, self.n+1):\n            if self.visited[i] == False:\n                self.countBridges(i)\n        return self.bridges\n\n    def countBridges(self, s):\n        self.visited[s] = True\n        for i in self.graph[s]:\n            if self.visited[i] == False:\n                self.countBridges(i)\n            elif self.visited[i] == True and i!= s:\n                self.bridges.append(i)"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 7 5') == '7'\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 7 5') == '7'\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 7 5') == '7'\nprint(solution('5 7 5'))\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 1') == '2'\nassert solution('1 1 1') == '2'\nassert solution('1 1 1') == '2'\nassert solution('1 1 1') == '2'\nassert solution('1 1 2') == '3'\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7 5\") == \"7\"\nassert solution(\"5 3 5\") == \"5\"\nassert solution(\"3 3 3\") == \"3\"\nassert solution(\"2 3 4\") == \"2\"\nassert solution(\"5 2 5\") == \"2\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 7 5''') == \"7\"\nassert solution('''2 2 1''') == \"2\"\nassert solution('''1 1 1''') == \"1\"\n'''"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 7 5') == '7'\n\"\"\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 7 5') == '7'"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 7 5\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 5\") == \"7\"\n\n\"\"\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\n\"\"\""
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\nprint(solution(\"1 2 10 20 15 200\"))\n\n\"\"\"\n\n\"\"\"\nAll you have to do is to replace the number values A,B,C,D,E,F with the respective ones.\n\nA    B    C    D    E    F    Answer\n1    2    10    20    15    200    110\n\n\"\"\"\n\nA = int(input())\nB = int(input())\nC = int(input())\nD = int(input())\nE = int(input())\nF = int(input())\n\nprint(A*100*(E/100), D*C*100)"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\n-----"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\nassert solution('1 2 10 20 15 200') == '110 10'\nassert solution('1 1 10 20 15 200') == '110 10'\nassert solution('1 2 10 20 15 200') == '110 10'\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n\"\"\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\""
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n\na, b, c, d, e, f = [int(n) for n in stdin.split(' ')]\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\"\n\ns = stdin\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\"\n\ns = stdin.read().rstrip()\nprint(s[0] + str(len(s) - 2) + s[-1])"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\"\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"internationalization\"), \"i18n\")"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\"\n\nfrom string import ascii_lowercase"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"pot\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"pot top\") == \"YES\"\nassert solution(\"top pot\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'YES'\nassert solution('tpot') == 'NO'\nassert solution('top') == 'YES'\nassert solution('tpot') == 'YES'\n\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n    pot\n    top\n''') == 'YES'\nassert solution('''\n    pot\n    tpp\n''') == 'NO'\nassert solution('''\n    ppp\n    top\n''') == 'NO'\nassert solution('''\n    top\n    pot\n''') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"pot\\ntop\") == \"YES\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"pot top\") == \"YES\"\nassert solution(\"top pot\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"pot top\") == \"YES\"\nassert solution(\"top pot\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('pot\\ntop') == 'YES'\n\"\"\""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aba') == 'b'\nassert solution('ababc') == 'abab'\nassert solution('abac') == 'bac'\n\"\"\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aba') == 'b'\nassert solution('abca') == 'bca'\nassert solution('abb') == 'ab'\nassert solution('abbcd') == 'abcd'\n\n\"\"\""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ababc\") == \"b\"\nassert solution(\"ababcddeefgh\") == \"efg\"\n\"\"\"\nimport numpy as np\nimport sys\n\ns = sys.stdin.readline().strip()\nk = int(sys.stdin.readline().strip())\n\nd = {}\n\nfor c in s:\n    if c in d:\n        d[c] += 1\n    else:\n        d[c] = 1\n\nfor c in sorted(d):\n    d[c] = np.ceil(d[c] / k) * k\n\nfor c in sorted(d):\n    if d[c] > 0:\n        print(c, end='')\n        d[c] -= 1"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == 'b'\nassert solution(\"abab\") == 'ab'\nassert solution(\"abac\") == 'a'\n\"\"\"\n\ns = stdin\nk = int(stdin)\n\nlex = sorted(s)\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"abab\") == \"ab\"\nassert solution(\"abbab\") == \"b\"\nassert solution(\"abca\") == \"a\"\nassert solution(\"abbac\") == \"ab\"\n\n\"\"\""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"aa\") == \"a\"\nassert solution(\"aab\") == \"ab\"\nassert solution(\"aaab\") == \"aab\"\nassert solution(\"baaaaaaaaa\") == \"aab\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aba') == 'b'\nassert solution('abacab') == 'c'\nassert solution('aa') == 'a'\nassert solution('abcaa') == 'a'\nassert solution('a') == 'a'\n\n---\nI've read some discussion for this problem and they are really good explanations for me.\n\nThere is an elegant way to solve the problem.\n\nLet us solve it with the concept of prefixes.\n\nThe prefixes are the ordered set of contiguous substrings of the input string.\n\nThe first k prefixes are ordered lexicographically: the prefixes of length k are the first k strings of the ordered set of prefixes.\n\nBy the definition, prefixes are different when they have different tails (i.e. for different values of k).\n\nTo check whether two strings are different, we can just compare their tails.\n\nConsider the two strings s1 and s2.\n\nSince they are of the same length, there is at least one position in which the tails are different:\n\ns1[i]!= s2[i].\n\nWe can see this for example:\n\nIf s1 = \"aba\", s2 = \"bb\" and i = 0, the tails are different: \"a\" and \"b\" are different from \"a\" and \"b\".\n\nSince the tails are different, s1 is lexicographically larger than s2.\n\nSo s1 is lexicographically larger than s2.\n\nNow, since we know that s2 is lexicographically larger than s1, we have that s1 is also larger than all the strings that are lexicographically larger than s2.\n\nWe can see this for example:\n\nIf s1 = \"abba\", s2 = \"abbbb\" and i = 0, the tails are different: \"a\" and \"b\" are different from \"a\" and \"b\".\n\nSince the tails are different, s1 is lexicographically larger than s2.\n\nSo s1 is lexicographically larger than s2.\n\nWe can repeat this for all values of i, and we can find the lexicographically smallest string in O(n) time.\n\nThe k-th lexicographically smallest string is the (k - 1)-th lexicographically larger string.\n\nSo we can find the k-th lexicographically smallest string in O(n) time by picking the (k - 1)-th lexicographically larger string and removing its tail.\n\nIn order to do the comparison, we can use the trie (i.e. a self-balancing BST).\n\nWe can use the trie to compare strings in O(n) time, and we can determine the k-th lexicographically smallest string in O(n) time.\n\nThe trie is essentially a lexicographic order.\n\nIt has the following operations:\n\n1. Put a string s into the trie.\n2. Find the longest common prefix of all strings in the trie.\n3. Delete a string from the trie.\n\nWe can implement the trie with a list of lists:\n\ntrie = [[]]\n\nThe (0, 0)-th entry is the empty string.\n\nThe trie is implemented with a list of lists.\n\ntrie[0] is the empty string.\n\ntrie[1] is the string \"a\".\n\ntrie[2] is the string \"ab\".\n\ntrie[3] is the string \"aba\".\n\ntrie[4] is the string \"bb\".\n\nLet L be the longest common prefix of all strings in the trie.\n\nNow we can delete all the strings with a prefix of L.\n\ntrie[0] is the empty string.\n\ntrie[1] is the string \"a\".\n\ntrie[2] is the string \"ab\".\n\ntrie[3] is the string \"aba\".\n\ntrie[4] is the string \"bb\".\n\nWe now have:\n\ntrie[1] == [\"a\"]\n\ntrie[2] == [\"ab\"]\n\ntrie[3] == [\"aba\"]\n\ntrie[4] == [\"bb\"]\n\nWe can now find the k-th lexicographically smallest string in O(n) time using L as a prefix.\n\nNow we just have to delete the k-th string.\n\ntrie[1] is the string \"a\".\n\ntrie[2] is the string \"ab\".\n\ntrie[3] is the string \"aba\".\n\ntrie[4] is the string \"bb\".\n\ntrie[5] is the string \"aab\".\n\ntrie[6] is the string \"aba\".\n\ntrie[7] is the string \"ba\".\n\ntrie[8] is the string \"aa\".\n\ntrie[9] is the string \"a\".\n\ntrie[10] is the empty string.\n\nWe delete the k-th string, so we end up with:\n\ntrie[1] is the string \"a\".\n\ntrie[2] is the string \"ab\".\n\ntrie[3] is the string \"aba\".\n\ntrie[4] is the string \"bb\".\n\ntrie[5] is the string \"aab\".\n\ntrie[6] is the string \"aba\".\n\ntrie[7] is the string \"ba\".\n\ntrie[8] is the string \"aa\".\n\ntrie[9] is the string \"a\".\n\ntrie[10] is the empty string.\n\nWe can now find the k-th lexicographically smallest string in O(n) time by using L as a prefix.\n\nNow we just have to delete the k-th string.\n\ntrie[1] is the string \"a\".\n\ntrie[2] is the string \"ab\".\n\ntrie[3] is the string \"aba\".\n\ntrie[4] is the string \"bb\".\n\ntrie[5] is the string \"aab\".\n\ntrie[6] is the string \"aba\".\n\ntrie[7] is the string \"ba\".\n\ntrie[8] is the string \"aa\".\n\ntrie[9] is the string \"a\".\n\ntrie[10] is the empty string.\n\nWe delete the k-th string, so we end up with:\n\ntrie[1] is the string \"a\".\n\ntrie[2] is the string \"ab\".\n\ntrie[3] is the string \"aba\".\n\ntrie[4] is the string \"bb\".\n\ntrie[5] is the string \"aab\".\n\ntrie[6] is the string \"aba\".\n\ntrie[7] is the string \"ba\".\n\ntrie[8] is the string \"aa\".\n\ntrie[9] is the string \"a\".\n\ntrie[10] is the empty string.\n\nWe can now find the k-th lexicographically smallest string in O(n) time.\n\nNow we can print the k-th lexicographically smallest string in O(n) time.\n\ntrie[1] is the string \"a\".\n\ntrie[2] is the string \"ab\".\n\ntrie[3] is the string \"aba\".\n\ntrie[4] is the string \""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aba') == 'b'\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aba') == 'b'\nassert solution('z') == 'z'\nassert solution('abc') == 'a'\n\"\"\"\n\ns, k = input(), int(input())"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"b\"\n\"\"\"\n\n\"\"\"\nStep 1: Split the given string into a list of substrings.\n\nStep 2: We will sort the list in the descending order of the length of the strings.\n\nStep 3: We will return the Kth string from the list.\n\"\"\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    5 4 2\n    2 1 1\n    3 3 4\n    \"\"\"\n) == \"9\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom typing import List\n\nfrom utils import read_int, read_ints\n\n\n@dataclass(frozen=True)\nclass Point:\n    x: int\n    y: int\n\n\n@dataclass(frozen=True)\nclass Line:\n    start: Point\n    end: Point\n\n\n@dataclass(frozen=True)\nclass Rectangle:\n    width: int\n    height: int\n    min_x: int\n    max_x: int\n    min_y: int\n    max_y: int\n\n    def __post_init__(self):\n        self.lines = [\n            Line(Point(self.min_x, self.min_y), Point(self.min_x, self.max_y)),\n            Line(Point(self.min_x, self.min_y), Point(self.max_x, self.min_y)),\n            Line(Point(self.min_x, self.max_y), Point(self.max_x, self.max_y)),\n            Line(Point(self.max_x, self.min_y), Point(self.max_x, self.max_y)),\n        ]\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 4 2\n2 1 1\n3 3 4''') == '9'\nassert solution('''5 4 2\n3 3 4\n2 1 1''') == '9'\nassert solution('''5 4 2\n1 1 4\n2 1 3''') == '0'\n\n\"\"\"\n\nfrom collections import namedtuple\n\nfrom my.utils import S, assert_eq\n\nRect = namedtuple('Rect', ['x1', 'y1', 'x2', 'y2', 'i1', 'i2'])\nrect = Rect(1, 1, 1, 1, 1, 1)\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\"\nimport sys\n\nW, H, N = tuple(map(int, sys.stdin.readline().split()))\nx = tuple(map(int, sys.stdin.readline().split()))\ny = tuple(map(int, sys.stdin.readline().split()))\na = tuple(map(int, sys.stdin.readline().split()))\n\nprint(W * H - sum([min(x_i, W - x_i) * min(y_i, H - y_i) for x_i, y_i in zip(x, y)]))\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 4\\n2 1 1\\n3 3 4\\n\") == \"9\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 2\\n1 2 3\\n1 1 1\") == \"9\"\nassert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\n------Problem 11: Linear Diophantine Equation------\n\nIf a system of linear diophantine equations is given by a matrix A, for any solution x of the system to exist, there exists a vector v such that v * A = x.\nYou are given a matrix A and a vector b.\nThe system of linear diophantine equations may be written as:\nA * x = b,\nwhere * is matrix multiplication.\nThe solution to the system of linear diophantine equations exists if and only if the matrix A has no solution.\n\n-----Constraints-----\n - The given matrix A is square and non-singular, and has integer entries.\n - The given vector b is of the same size as the number of rows of the given matrix A.\n\n-----Input-----\nThe first line of the input contains two integers n and m (1 \u2266 n, m \u2266 50), which are the number of rows and the number of columns of the matrix A.\nThe next n lines contain m integers each, the i-th integer of each line corresponds to the entry of the i-th row of matrix A.\nThe next line contains m integers each, the i-th integer of each line corresponds to the entry of the vector b.\n\n-----Output-----\nThe output should be a single line containing the string \"NO\" if the system has no solution, or the string \"POSSIBLE\" if there is at least one solution.\n\n-----Sample Input-----\n5 3\n5 1 -1\n4 1 -1\n3 1 0\n1 2 0\n3 3 0\n-1 3 0\n1 -2 1\n4 0 -1\n2 1 -2\n2 3 1\n1 0 2\n-1 1 0\n\n-----Sample Output-----\nNO\n\nA_1 = [\n  5, 1, -1\n  4, 1, -1\n  3, 1, 0\n  1, 2, 0\n  3, 3, 0\n]\n\nb_1 = [-1, 3, 0, 1, 0]\n\nThe system has no solution.\n\nA_1 = [\n  5, 1, -1\n  4, 1, -1\n  3, 1, 0\n  1, 2, 0\n  3, 3, 0\n]\n\nb_1 = [-1, 1, 0, 1, 0]\n\nA_1 * x = b_1\n\nx_1 = {-3, -1}\nx_1 is not solution of the system.\n\nA_1 = [\n  5, 1, -1\n  4, 1, -1\n  3, 1, 0\n  1, 2, 0\n  3, 3, 0\n]\n\nb_1 = [-1, 1, 0, 1, 0]\n\nA_1 * x = b_1\n\nx_1 = {0, 3}\nx_1 is solution of the system.\n\nx_1 = {0, 3}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}\n\nx_1 = {0}\n\nA_1 * x = b_1\n\nx_1 = {0}"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n5 4 2\n2 1 1\n3 3 4\n\"\"\"\n) == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\nassert solution(\"5 5 3\\n3 3 1\\n2 2 2\\n1 2 1\\n1 1 1\") == \"15\"\nassert solution(\"5 5 4\\n4 1 1\\n2 1 1\\n1 3 1\\n2 2 1\") == \"9\"\nassert solution(\"5 5 5\\n5 4 1\\n2 2 2\\n1 2 1\\n2 3 1\\n3 4 1\") == \"20\"\nassert solution(\"5 5 5\\n5 5 1\\n2 2 1\\n1 2 1\\n1 2 1\\n2 3 1\\n3 4 1\") == \"20\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 4') == '12'\n\"\"\"\n\nimport math\nimport sys\nimport unittest"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n6 5 1\\n1 10 1\\n\") == \"12\\n11\\n0\\n\"\n\"\"\"\n\nimport sys\n\nfrom collections import deque"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 10 1\\n\") == \"12\\n11\\n0\\n\"\n\"\"\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 10 1\") == \"12\\n11\\n0\"\n\"\"\"\n\nimport sys\nfrom itertools import permutations"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\ntime = []\nfor i in range(n):\n    a, b, c = map(int, sys.stdin.readline().split())\n    time.append((a, b, c))\n\ntime = sorted(time, key=lambda x: (x[1], x[2]))\n\nd = {i: 0 for i in range(1, n)}\nd[1] = 0\nd[n] = 0\n\nfor i, t in enumerate(time):\n    d[t[0]] += t[1]\n    d[t[0]] += t[2]\n\nfor i in range(1, n):\n    print(max(d[i], d[i - 1]))\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n6 5 1') == '12\\n11\\n0'\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n6 5 1\") == \"12\\n11\\n0\"\n\"\"\"\n\nimport math\n\nn = int(stdin.readline())\n\nfor _ in range(n):\n    c, s, f = map(int, stdin.readline().split())\n    print(s + math.floor(s / f) * c)\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\n\"\"\""
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 10 1\") == \"12\\n11\\n0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 10 1\") == \"12\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n.*\\n.\") == \".*\\n.*\\n.*\\n.*\"\nassert solution(\"1 1\\n..\") == \"..\"\n\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n.*\\n.') == '*.\\n.*\\n.*\\n.*'\n\nassert solution('2 2\\n*\\n.') == '*\\n.*'\n\nassert solution('1 1\\n*') == '*'\n\nassert solution('1 2\\n*') == '*\\n*'\n\nassert solution('1 2\\n.') == '.'"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n.\\n.*\\n..\") == \"..\\n.*\\n..\\n.*\\n.*\\n.*\"\nassert solution(\"4 3\\n.\\n.*\\n..\\n.*\\n.*\\n.*\\n..\") == \"..\\n.*\\n.*\\n.*\\n.*\\n.*\\n.*\\n.*\\n.*\\n.*\\n..\"\nassert solution(\"3 2\\n.*\\n..\") == \".*\\n..\\n.*\\n.*\"\nassert solution(\"3 2\\n.*\\n.*\\n..\") == \".*\\n.*\\n.*\\n..\\n.*\\n.*\"\nassert solution(\"1 1\\n.\\n..\") == \"..\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n.*\\n.*\") == \".*\\n.*\\n.*\\n.*\"\nassert solution(\"4 5\\n*.\\n*.\\n*.\\n.*\") == \"*.\\n*.\\n*.\\n*.\\n*.\\n*.\\n*.\\n*.\\n*.\\n*\"\nassert solution(\"1 1\\n1\") == \"1\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n2 2\n*.\n.*\n\"\"\") == \"\"\"\n*.\n.*\n.*\n.*\n\"\"\"\n\nassert solution(\n\"\"\"\n1 1\n.*\n\"\"\") == \"\"\"\n.*\n\"\"\"\n\nassert solution(\n\"\"\"\n3 3\n*.\n.*\n.*\n.*\n*.\n.*\n.*\n.*\n.*\n*.\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n*.\\n.*\") == \"*.\\n.*\"\nassert solution(\"4 4\\n.**\\n**.*\\n.*.*\\n*.*.\") == \"**.*\\n.*.*\\n.*.*\\n*.*.\"\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == '***'\n\n\"\"\"\n\nfrom typing import Any, Dict, List\n\nimport numpy as np\n\nfrom puzzle import BasePuzzle, Puzzle\n\n\nclass Solution(BasePuzzle):\n    \"\"\"\n    Example solution for the Flip To Beaker puzzle\n    \"\"\"\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        super().__init__(*args, **kwargs)\n\n    def solve(self) -> str:\n        \"\"\"\n        This method must be overridden by the solution code\n        It should return a string representing the output of the solution\n        \"\"\"\n        raise NotImplementedError\n\n    def solve_puzzle(self) -> str:\n        \"\"\"\n        This method must be overridden by the solution code\n        It should return a string representing the output of the solution\n        \"\"\"\n        raise NotImplementedError\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n.*\\n.*') == '*.\\n.*'\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('\\n'.join([\n    '2 2',\n    '*.',\n    ':',\n    '*.'\n])) == '\\n'.join([\n    '*.',\n    '*.',\n    ':',\n    '*.'\n])"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n.*\\n.*') == '.*\\n.*\\n.*\\n.*'\n\n---\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e n. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 n.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nn.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 nn.\n\nSample Input 1:\n\n1\n\nSample Output 1:\n\n1\n\nSample Input 2:\n\n2\n\nSample Output 2:\n\n2\n1 2\n2 4 6\n\nSample Input 3:\n\n3\n\nSample Output 3:\n\n3\n1 2 3\n2 4 6\n3 6 9\n\nSample Input 4:\n\n4\n\nSample Output 4:\n\n4\n1 2 3 4\n2 4 6 8\n3 6 9 12\n4 8 12 16\n\nn = int(input())\nfor i in range(1, n + 1):\n    for j in range(1, i + 1):\n        print(j, end=' ')\n    print()\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\nassert solution('5\\n2 6 1 1') == 'NO'\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 6 1 4 5\") == \"YES\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == 'YES'\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\nassert solution('5\\n2 6 1 4 1') == 'NO'\nassert solution('5\\n2 4 1 5 6') == 'NO'\n\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\n\"\"\"\n\nstdin = input()"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 6 1 4 5\") == \"YES\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 1 4 5\") == \"YES\"\nassert solution(\"5 2 1 6 5\") == \"NO\"\n\nimport sys; input = sys.stdin.readline\nfrom math import floor, log10"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\nassert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"3\"\nassert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"4\"\nassert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"1\"\nassert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '2'\nassert solution('5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '3'\nassert solution('5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '4'\nassert solution('5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '1'\nassert solution('5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '2'\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"4\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == '2'"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\\n3\\n4\\n1\\n2\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\") == \"2\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\") == \"3\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n1 1 3 4 2 2\") == \"1\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n1 1 3 4 2 2\") == \"2\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '1'\nassert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '2'\nassert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '3'\nassert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '4'\nassert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '1'\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"8\\n6 6 6 6 6 6 8 8\") == \"4\"\nassert solution(\"9\\n1 1 1 1 1 1 1 1\") == \"1\"\nassert solution(\"3\\n1 3 3\") == \"2\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"3\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"4\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"1\"\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2') == '2'\nassert solution('1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2') == '3'\nassert solution('1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2') == '4'\nassert solution('1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2') == '1'\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3 3') == '2'\nassert solution('2\\n3 3') == '2'\nassert solution('2\\n2 2') == '3'\n\nprint(solution(input()))"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"3\"\nassert solution(\"3 1\\n1 5\\n22 5\\n987 13\") == \"1\"\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == '3'\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == '1'\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == '5'\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == '77'\n\"\"\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 3\\n1 5\\n22 5\\n987 13\\n') == '3'\nassert solution('7 3\\n1 5\\n22 5\\n987 13\\n') == '3'\nassert solution('7 3\\n1 5\\n22 5\\n987 13\\n') == '3'\n\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"3\"\nassert solution(\"5 2\\n1 5\\n22 5\\n987 13\") == \"1\"\nassert solution(\"5 2\\n1 5\\n22 5\\n987 13\") == \"5\"\nassert solution(\"5 2\\n1 5\\n22 5\\n987 13\") == \"77\"\n\"\"\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3\\n1 5\\n22 5\\n987 13') == '3\\n1\\n5\\n77'\nprint('Test 1 passed')\nassert solution('6 2\\n5 2\\n6 1\\n7 1') == '1\\n1\\n3\\n3'\nprint('Test 2 passed')\nassert solution('7 7\\n1 2\\n22 2\\n7 1') == '1\\n1\\n2\\n2'\nprint('Test 3 passed')\nassert solution('6 6\\n4 4\\n6 1\\n7 1') == '1\\n1\\n2\\n1'\nprint('Test 4 passed')\nassert solution('1 5\\n22 5\\n7 2') == '1\\n1\\n1\\n3'\nprint('Test 5 passed')\n\n\"\"\"\n\nimport sys\n\ntests = int(sys.stdin.readline().strip())\nfor i in range(tests):\n    n, x = map(int, sys.stdin.readline().strip().split())\n    print((x - 1) // 2 + (n - 1) // x)\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"3\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"1\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"5\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"77\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == '3'\nassert solution('1 5') == '1'\nassert solution('22 5') == '5'\nassert solution('987 13') == '77'\n\"\"\""
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\\n\") == \"3\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\\n\") == \"1\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\\n\") == \"5\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\\n\") == \"77\"\n\"\"\"\n\n\nimport unittest\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"3\\n1\\n5\\n77\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abca\") == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"codeforces\") == [9, 4, 2, 1, 1, 5, 2, 2, 1, 1, 5, 4, 11, 8, 2, 7, 5, 1]\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == [26, 10, 1, 2, 9, 2, 2, 5, 2, 2, 1, 1, 5, 4, 11, 8, 2, 7, 5, 1]\n\"\"\"\n\nimport sys\nimport itertools\nfrom typing import List\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abca') == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution('codeforces') == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution('codefo') == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\"\"\""
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n\"\"\"\n\nimport sys\nimport math\nfrom collections import defaultdict"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"codeforces\") == \"26 10 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n\"\"\"\n\nfrom math import inf\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0\"\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == '26 10'\nassert solution(\"abca\") == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == '20 10 1 2 3 5 10 5 9 4'\n\n-----Test cases-----\n\n>>> solution(\"codeforces\")\n'26 10'\n>>> solution(\"abca\")\n'4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n>>> solution(\"qwertyuioplkjhgfdsazxcvbnm\")\n'20 10 1 2 3 5 10 5 9 4'\n>>> solution(\"codeforces\")\n'26 10'\n>>> solution(\"abca\")\n'4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n>>> solution(\"qwertyuioplkjhgfdsazxcvbnm\")\n'20 10 1 2 3 5 10 5 9 4'\n\"\"\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n\n\n'''\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"2 1 1 2 9 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\nassert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"26 10 1 2 3 5 10 5 9 4\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\") == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\n\"\"\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\") == '1999999994\\n0\\n0\\n0\\n2\\n4'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''8\n3 3 4\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6''') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 3\") == '6'\nassert solution(\"3 2 4\") == '6'\nassert solution(\"2 3 5\") == '9'\nassert solution(\"3 3 5\") == '9'\nassert solution(\"3 3 3\") == '0'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 5\") == \"4\"\nassert solution(\"3 3 4\") == \"4\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 4\\n10 20 30\") == \"0\"\nassert solution(\"5 5 5\\n2 4 3\") == \"0\"\nassert solution(\"2 4 3\\n1 1000000000 999999999\") == \"1999999994\"\nassert solution(\"3 2 5\\n3 2 6\") == \"2\"\n\n-----Problem-----\n\nhttps://codeforces.com/contest/1570/problem/D\n\"\"\"\n\nimport sys\n\nlines = sys.stdin.readlines()"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 3\\n4 5 1\\n1 2 3\\n1 4 2\\n3 4 4\\n1 2 3\") == \"4\"\nassert solution(\"3 2 5\\n3 2 6\\n3 2 6\") == \"2\""
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2\") == \"0\"\nassert solution(\"10 10 10\") == \"0\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 5\\n1 1 1\\n2 3 3') == '36'\nassert solution('4 3 5\\n1 1 1\\n2 3 3\\n2 3 5') == '2'\nassert solution('4 3 5\\n1 1 1\\n2 3 3\\n2 3 5\\n2 3 6') == '4'\nassert solution('4 3 5\\n1 1 1\\n2 3 3\\n2 3 5\\n2 3 6\\n2 3 6') == '1999999994'\nassert solution('4 3 5\\n1 1 1\\n2 3 3\\n2 3 5\\n2 3 6\\n2 3 6\\n2 3 6') == '2'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 4') == '0'\nassert solution('10 20 30') == '36'\nassert solution('5 5 5') == '0'\nassert solution('2 4 3') == '0'\nassert solution('1 1000000000 1000000000') == '1999999994'\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\n\"\"\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nNO\"\n\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"NO\"\n\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"YES\"\n\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"YES\"\n\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"YES\""
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nNO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nYES\\nYES\\nYES\\nYES\\nNO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nYES\\nYES\\nYES\\nYES\\nNO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nYES\\nYES\\nYES\\nYES\\nNO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nYES\\nYES\\nYES\\nYES\\nNO\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"NO\"\n\n\n\n-----Problem-----\n\nhttps://codeforces.com/contest/1594/problem/D\n'''"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nNO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nNO\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11 14 16 12') == 'YES'\nassert solution('2') == 'NO'\nassert solution('1 8') == 'YES'\nassert solution('4') == 'YES'\nassert solution('1 1 1 1') == 'YES'\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\""
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nNO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nNO\"\n\"\"\"\nimport itertools\nfrom typing import Iterator, List, Set, Tuple\n\nimport pytest\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n11 14 16 12') == 'YES'\nassert solution('2\\n1 8') == 'YES'\nassert solution('4\\n1 1 1 1') == 'YES'\nassert solution('4\\n1 2 5 6') == 'NO'\nassert solution('2\\n12 13') == 'YES'\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\") == \"YES\\nNO\\nYES\\nYES\"\n\"\"\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open(r\"D:\\Code\\Git\\PY-TEST\\test\\solution_test_1\\input_1\", \"r\", encoding=\"utf-8\").read()) == \"22\"\nassert solution(open(r\"D:\\Code\\Git\\PY-TEST\\test\\solution_test_1\\input_2\", \"r\", encoding=\"utf-8\").read()) == \"13\"\nassert solution(open(r\"D:\\Code\\Git\\PY-TEST\\test\\solution_test_1\\input_3\", \"r\", encoding=\"utf-8\").read()) == \"1\"\nassert solution(open(r\"D:\\Code\\Git\\PY-TEST\\test\\solution_test_1\\input_4\", \"r\", encoding=\"utf-8\").read()) == \"4\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(solution(input()))\nprint(solution(str(input())))"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3') == '22'\nassert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n') == '13'\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == \"22\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections import defaultdict\nfrom itertools import chain\nfrom math import inf\nfrom queue import PriorityQueue\nfrom typing import Dict, List, Tuple\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == '13'\nassert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\") == '22'"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == '22'\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == '13'"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5\n''') == '13'\n\nassert solution('''\n6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n''') == '22'\n\nassert solution('''\n6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n''') == '22'\n\nassert solution('''\n6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n''') == '13'\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\nassert solution(\"5 3 2\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"22\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('3 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3') == '13'\nassert solution('4 3 1\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3') == '22'\nassert solution('4 3 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3') == '22'\nassert solution('4 3 3\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3') == '22'\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n4\\n5\\n2\\n3\\n5\\n1\\n4\\n5\\n3\\n4\\n5\\n5\\n6\\n5\\n5\\n3\\n5\\n5\\n4\\n4\\n4\\n5\\n3\\n4\\n4\\n5\\n3\\n3\\n5\\n5\\n6\\n4\\n6\\n5\\n4\\n5\\n6\\n4\\n4\\n5\\n5\\n6\\n3\\n5\\n3\\n3\\n5\\n5\\n6\\n5\\n6\\n5\\n5\\n5\\n3\\n5\\n5\\n6\\n4\\n6\\n5\\n3\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n3\\n5\\n5\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n1\") == \"2\"\nassert solution(\"1\\n2\") == \"3\"\nassert solution(\"1\\n3\") == \"2\"\nassert solution(\"2\\n1\") == \"2\"\nassert solution(\"2\\n2\") == \"3\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\") == \"3\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"1\\n2\\n5\") == \"5\"\nassert solution(\"1\\n2\\n3\") == \"5\"\nassert solution(\"1\\n2\\n3\\n5\") == \"5\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\") == \"3\"\nassert solution(\"6\\n13\") == \"9\"\nassert solution(\"6\\n3620\") == \"19683\"\nassert solution(\"100\\n10000\") == \"6561\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10''') == '3\\n5\\n9\\n13\\n27\\n65\\n513\\n6553\\n13553\\n1355513\\n13555653\\n13555653\\n1355565313\\n1355565313\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213\\n13555655213"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1') == '4'\nassert solution('5\\n3') == '3'\nassert solution('5\\n8') == '8'\nassert solution('5\\n12') == '13'\n\nassert solution('6\\n30') == '6'\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000') == '1\\n3\\n9\\n13\\n27\\n6561\\n19683'\nassert solution('7\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000') == '1\\n3\\n9\\n13\\n27\\n6561\\n19683'\nassert solution('7\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000') == '1\\n3\\n9\\n13\\n27\\n6561\\n19683'\nassert solution('7\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000') == '1\\n3\\n9\\n13\\n27\\n6561\\n19683'\nassert solution('7\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000') == '1\\n3\\n9\\n13\\n27\\n6561\\n19683'\n\n\"\"\""
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1') == '1'\nassert solution('2\\n2') == '3'\nassert solution('3\\n7') == '9'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n6\\n13\\n14\\n3620\\n10000') == '1\\n3\\n9\\n13\\n27\\n6561\\n19683'\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n1\n2\n3\n4\n5''') == \"1\"\n\nassert solution('''8\n1\n2\n3\n4\n5\n6\n7\n8''') == \"1\"\n\nassert solution('''9\n1\n2\n3\n4\n5\n6\n7\n8\n9''') == \"1\"\n\nassert solution('''1\n1\n2\n2\n3\n3\n4\n4\n5''') == \"2\"\n\nassert solution('''1\n1\n2\n2\n3\n3\n4\n4\n5''') == \"3\""
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"3 3 3\\n2 3 3 2 1 3\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\nassert solution(\"3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1 1 1 1 1\\n2 3 3 3\\n2 3 3 2 1 3\"\n\n\"\"\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2\\n1 2 3\") == \"1 1 1 1\"\nassert solution(\"4\\n3\\n1 2 3\") == \"3 3 3\"\nassert solution(\"4\\n3\\n2 1 3\") == \"2 3 3 2 1 3\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n\"\"\") == \"\"\"\n1 1 1 1 1 \n3 3 3 \n2 3 3 2 1 3 \n1 \n2 2 2 2 \n4 4 4 1 4\n\"\"\"\n\n\"\"\"\nsolution.py\n\nCopyright 2018 Andrey Plugin\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\"\"\"\n\nimport sys\n\n__all__ = ['solution']\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\\n6\\n4 6 2 1 5 3\") == \"1 1 1 1 1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1 1 1 1\"\nassert solution(\"6\\n1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1\"\n\"\"\""
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\nprint('Test pass.')"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\\n2\\n2 3 1\\n\") == \"1 1 1 1\"\nassert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n\") == \"1 1 1 1\"\nassert solution(\"6\\n1 2 3 4 5 6\\n3\\n4 6 2 1 5 3\\n\") == \"1 1 1 1\"\nassert solution(\"6\\n1 2 3 4 5 6\\n3\\n4 6 2 1 5 3\\n\") == \"1 1 1 1\"\nassert solution(\"4\\n4 3 1 2\\n1\\n1\\n4\\n\") == \"1 1 1 1\"\n\n\"\"\""
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1 1 1 1 1\"\nassert solution(\"5 4 3 2 1\") == \"1 2 1 1 1\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\n\"\"\""
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 3 4\\n2 3 1\\n5\\n6 1 2 3 4 5') == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2'\n\n-----Problem-----\n\nhttps://codeforces.com/contest/1520/problem/A\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\"\n\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\"\n\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\"\n\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\"\n\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\""
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 4 3\") == \"3 1\"\nassert solution(\"4 4 3\") == \"6 3 1\"\n\"\"\"\n\nn, m = map(int, input().split())\nx = list(map(int, input().split()))\n\nx = sorted(x)\nans = 10 ** 9\n\nfor i in range(m):\n    tmp = x[i]\n    d = (n - 1) // 2 - i\n    if d < 0:\n        break\n    ans = min(ans, d)\n\nprint(ans)\n\nfor i in range(m):\n    tmp = x[i]\n    d = ans - (n - 1) // 2 + i\n    if d < 0:\n        break\n    print(d)\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(read()) == expected\n\nimport sys; input = sys.stdin.readline; print = sys.stdout.write; sys.setrecursionlimit(10000)\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 6\n1 5\n''') == '8\n-1 2 6 4 0 3'\n\n\"\"\""
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 6\\n1 5\\n\") == \"8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 6\\n1 5\") == '8'\n\nassert solution(\"3 5\\n0 3 1\") == '7'\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 6\\n1 5\\n') == '8'\n\"\"\"\n\na, b = map(int, input().split())\nX = list(map(int, input().split()))\nY = [0] * a\nd = [[0] * a for _ in range(a)]\n\nfor i in range(b):\n    x, y = map(int, input().split())\n    d[x][y] += 1\n    d[y][x] += 1\n\nfor i in range(a):\n    for j in range(a):\n        d[i][j] += d[j][i]\n\nfor i in range(a):\n    for j in range(i + 1, a):\n        d[i][j] = min(d[i][j], d[i][j - 1])\n\nX.sort()\nY = sorted(Y)\nans = 0\nfor i in range(a):\n    ans += d[i][Y[i]]\n\nprint(ans)\nprint(*Y)\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 6\\n1 5\\n') == '8'\nassert solution('3 5\\n0 3 1\\n') == '7'\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 6\\n1 5') == '8'\nassert solution('3 5\\n0 3 1') == '7'\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 6\\n1 5') == '8'\nassert solution('3 5\\n0 3 1') == '7\\n5 -2 4 -1 2'\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 6\\n1 5\") == \"8\"\nassert solution(\"3 5\\n0 3 1\") == \"7\"\nassert solution(\"1 2\\n1 1\") == \"0\"\n\"\"\"\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n1 3\n1 2\n3 3\n5 5\n4 3''') == '''YES\nRUUURRRRUU'''\n\nassert solution('''5\n4 3\n2\n1 0\n0 1\n1''') == '''YES\nRRRRUUU'''\n\nassert solution('''4\n3 3\n5 5\n1 2\n2 3''') == '''NO'''\n\nassert solution('''4\n3 3\n5 5\n1 2\n2 3''') == '''YES\nRUUURRRRUU'''\n\nassert solution('''4\n3 3\n5 5\n1 2\n2 3''') == '''NO'''"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3') == 'YES\\nRUUURRRRUU'\n\"\"\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_1) == 'RRRRUUU'\nassert solution(test_2) == 'NO'\nassert solution(test_3) == 'YES'\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\") == \"YES\\nRUUURRRRUU\"\n\"\"\"\n\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\n\nassert solution(\"2\\n1 0\\n0 1\") == \"YES\\nRUU\"\n\"\"\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\") == \"YES\\nRUUURRRRUU\"\n\"\"\"\nimport sys\nimport re\n\nTESTS = int(sys.stdin.readline())\n\nREGEX = re.compile(r'(?<=\\n)\\s*(\\d+)\\s+(\\d+)\\s*')\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\\n2\\n1 0\\n0 1\") == \"YES\\nRUUURRRRUU\"\nassert solution(\"6\\n1 5\\n2 3\\n5 1\\n3 2\\n4 4\\n4 6\\n1 1\") == \"NO\"\nassert solution(\"7\\n1 1\\n1 1\\n2 2\\n2 2\\n3 3\\n3 3\\n4 4\\n4 4\\n5 5\\n5 5\\n1 1\") == \"YES\\nRRRUUUUUU\"\n\"\"\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\n\n\"\"\"\n\nfrom collections import deque\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\\n2\\n1 0\\n0 1'\n    ) == 'YES\\nRUUURRRRUU\\nNO\\nYES\\nRRRRUUU'\n    \n\n\"\"\""
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"8\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"500 4\") == \"4\"\nassert solution(\"217871987498122 10\") == \"2128012501878\"\nassert solution(\"100000000000000001 1\") == \"899999999999999999\"\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    n_copy = n\n    s_copy = s\n    count = 0\n    while n_copy > 9:\n        if n_copy > 9:\n            count += n_copy // 9\n            n_copy = n_copy % 9\n        else:\n            count += n_copy\n            break\n    while s_copy > 0:\n        if s_copy > 9:\n            s_copy -= 9\n            count += 1\n        else:\n            s_copy -= n_copy\n            count += 1\n    print(count)"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n1 1\\n500 4') == '8'\nassert solution('217871987498122 10\\n100000000000000001 1') == '899999999999999999'\n\n\"\"\""
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1\\n1 1') == '8'\n\"\"\"\n\nt = int(input())\nfor _ in range(t):\n    n, s = map(int, input().split())\n    res = 0\n    while n > 9:\n        res += n % 10\n        n = n // 10\n    res += n\n    if res <= s:\n        print(res)\n    else:\n        print(s)\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\\n') == '8\\n0\\n500\\n2128012501878\\n899999999999999999'"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"8\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"500 4\") == \"8\"\nassert solution(\"217871987498122 10\") == \"899999999999999999\"\nassert solution(\"100000000000000001 1\") == \"899999999999999999\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 1\n1 1\n500 4\n217871987498122 10''') == '8'\nassert solution('''1 1\n1 1\n500 4\n217871987498122 10''') == '0'\nassert solution('''4 1\n1 1\n500 4\n217871987498122 10''') == '8'\nassert solution('''5 1\n1 1\n500 4\n217871987498122 10''') == '2128012501878'\nassert solution('''8 1\n1 1\n500 4\n217871987498122 10''') == '899999999999999999'\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n2 1\n1 1\n500 4\n217871987498122 10''') == '8\\n0\\n500\\n2128012501878\\n899999999999999999'\nprint('All tests passed.')\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n''') == '8\\n0\\n500\\n2128012501878\\n899999999999999999'\nprint('Test PASSED')\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n1 1\") == \"8\"\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\\n') == '8\\n0\\n500\\n2128012501878\\n899999999999999999'\n\"\"\"\n\n\nimport sys\nimport random\nfrom collections import namedtuple\n\nTestCase = namedtuple('TestCase', 'n s')\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 1 0 1\") == \"2\"\nassert solution(\"6\\n0 0 0 0 1\") == \"1\"\nassert solution(\"2\\n1 0\") == \"0\"\nassert solution(\"1\\n0\") == \"0\"\n\nassert solution(\"3\\n1 0 1\") == \"0\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n5\\n1 1 0 0 1\") == \"1\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n6\\n1 0 0 0 0 1\") == \"1\\n0\\n2\\n4\\n1\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 0 0 1\") == \"2\"\nassert solution(\"3\\n1 0 0\") == \"0\"\nassert solution(\"3\\n0 1 0\") == \"1\"\nassert solution(\"5\\n1 1 0 1 1\") == \"0\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n2 1 0 0 1\") == \"0\"\nassert solution(\"6\\n1 1 0 0 1\") == \"0\"\nassert solution(\"6\\n1 1 0 1 1\") == \"1\"\nassert solution(\"6\\n1 1 0 0 1\") == \"2\"\nassert solution(\"6\\n1 1 0 0 1\") == \"2\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 0 0\") == \"1\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"2\\n1 1\") == \"0\"\nassert solution(\"2\\n1 0\") == \"1\"\nassert solution(\"3\\n1 1 0\") == \"2\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 0 1\\n5\\n1 0 0\\n5\") == 2\nassert solution(\"4\\n1 1 0 1\\n5\\n0 1 0\\n5\") == 0\nassert solution(\"4\\n1 1 0 1\\n5\\n0 0 0\\n5\") == 1\nassert solution(\"4\\n1 1 0 1\\n5\\n0 0 0\\n5\") == 1\nassert solution(\"4\\n1 1 0 1\\n5\\n0 0 0\\n5\") == 1\n\n---\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1 << 20)\nINF = float('inf')\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\n3\\n1 0 0 1 0 1 0 1\\n5\\n1 0 0 0 1') == '2'\nassert solution('7\\n3\\n1 0 0 1 0 1 0 1\\n5\\n1 1 0 0 1') == '0'\nassert solution('7\\n3\\n1 0 0 1 0 1 0 1\\n5\\n1 0 0 0 0 1') == '1'\nassert solution('7\\n3\\n1 0 0 1 0 1 0 1\\n5\\n1 1 0 0 1') == '2'\nassert solution('7\\n3\\n1 0 0 1 0 1 0 1\\n5\\n1 0 0 0 0 1') == '1'\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 0 0 1\\n4\\n0 1 0 1\\n') == '3'\nassert solution('1\\n1\\n0\\n') == '0'\n\nassert solution('2\\n1 1\\n0\\n') == '0'\nassert solution('2\\n0 0\\n1\\n') == '1'\n\nassert solution('3\\n1 1\\n1\\n') == '1'\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n0 0 1 0 1 0 1\\n3\\n1 0 0') == '2'\nassert solution('7\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1') == '1'\nassert solution('7\\n1 1 0 1 1\\n5\\n1 0 0 1 1') == '0'\nassert solution('7\\n0 0 0\\n5\\n1 1 0 1') == '1'\n\n\"\"\"\n\nimport os\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 1 1\") == \"1\"\nassert solution(\"4\\n0 0 1 0 1\") == \"2\"\nassert solution(\"5\\n1 1 0 0 1\") == \"0\"\nassert solution(\"5\\n1 1 0 1 1\") == \"0\"\nassert solution(\"5\\n1 0 0 0 1\") == \"4\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3') == 'aaab'\nassert solution('7 3') == 'cbcacab'\nassert solution('6 2') == 'baabab'\n\"\"\"\nfrom collections import Counter\n\nimport sys"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"abcd\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"baabab\"\n\"\"\"\n\n\nfrom collections import Counter, defaultdict\nfrom functools import reduce\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n6 2') == 'abcbab'\n\"\"\"\nimport collections"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n7 3\n4 4\n6 2''') == 'cbcacab'\nassert solution('''3\n7 3\n4 4\n6 2''')!= 'abcd'\nassert solution('''3\n7 3\n4 4\n6 2''')!= 'cbcabba'\n\n'''\nhttps://codeforces.com/problemset/problem/1460/B\n'''\n\n\nfrom collections import Counter, defaultdict\n\nt = int(input())\n\nfor _ in range(t):\n    n, k = [int(x) for x in input().split()]\n    counter = Counter()\n    for _ in range(k):\n        l, r = [int(x) for x in input().split()]\n        counter.update(list(range(l, r + 1)))\n    counter = dict(counter)\n    result = []\n    for i in range(n):\n        if i in counter:\n            result.append(chr(ord('a') + counter[i] - 1))\n        else:\n            result.append('a')\n    print(''.join(result))\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n7 3\n4 4\n6 2\n''') == 'cbcacab'\n\nassert solution('''3\n7 3\n4 4\n6 2\n''') == 'abcd'\n\nassert solution('''3\n7 3\n4 4\n6 2\n''') == 'baabab'\n\n-----Implementation-----\n\nclass Letter:\n    def __init__(self, i):\n        self.i = i\n        self.counter = 0"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"abcd\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"baabab\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"cbcabba\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"ccbbaaa\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 3\\n4 4\\n6 2') == 'cbcacab'\nassert solution('7 3\\n4 4\\n6 2') == 'cbcacab'\n\"\"\"\nimport collections\nimport math\n\nfrom typing import Iterator, List, Sequence, Tuple\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n1\n3 3\n4 4\n1 1\n''') == 'ccbbaaa'\n\nassert solution('''\n3\n6 3\n4 4\n1 1\n''') == 'cbcacab'\n\nassert solution('''\n3\n7 3\n4 4\n1 1\n''') == 'cbcacab'\n\nassert solution('''\n4\n3 1\n1 1\n2 2\n2 3\n''') == 'bacbcab'\n\nassert solution('''\n6\n1 5\n3 1\n1 4\n5 1\n3 4\n2 5\n''') == 'ccababa'"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3\\n4 4\\n6 2') == 'cbcacab'\nassert solution('7 3\\n4 4\\n6 2') == 'abcd'\nassert solution('7 3\\n4 4\\n6 2') == 'baabab'\n\n-----Explanation-----\n\nThe 1st query: string is \"cbcacab\" because there are three letters 'c', 'b' and 'a' with minimal frequency.\n\nThe 2nd query: string is \"abcd\" because there are four letters 'a', 'b', 'd' and 'c' with minimal frequency.\n\nThe 3rd query: string is \"baabab\" because there are five letters 'b', 'a' and 'b' with minimal frequency.\n'''\n\n'''\n\u9996\u5148\u5229\u7528set\u786e\u5b9a\u6240\u6709\u5b57\u6bcd\u51fa\u73b0\u7684\u603b\u9891\u6570\uff0c\u7136\u540e\u6309\u9891\u6570\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\uff0c\u4f7f\u7528\u4e86python\u4e2d\u7684set\u7c7b\u578b\u7684\u7279\u6027\uff0c\u4ece\u800c\u8fbe\u5230\u4e86O(1)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\n\u63a5\u4e0b\u6765\u8003\u8651\u6bcf\u4e2aquery\u90fd\u5c06\u5b57\u7b26\u4e32\u5206\u5272\u4e3aset\uff0c\u7136\u540e\u8ba1\u7b97\u6bcf\u4e2aset\u7684\u6700\u5c0f\u5b57\u6bcd\u6570\uff0c\u5047\u8bbe\u4e3amin_num\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2aquery\u7684\u6700\u5c0f\u5b57\u6bcd\u6570\u5728set\u4e2d\u53ea\u4f1a\u6709\u4e00\u4e2a\uff0c\n\u53ef\u4ee5\u5229\u7528\u5b57\u5178\u7684\u7279\u6027\u8fbe\u5230O(1)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u540c\u65f6\u7528\u9012\u5f52\u7684\u601d\u60f3\u5c31\u53ef\u4ee5\u7b97\u51fa\u7b2c\u51e0\u4e2aset\u7684\u6700\u5c0f\u5b57\u6bcd\u6570\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f97\u5230\u6bcf\u4e2aquery\u7684\u6700\u5c0f\u5b57\u6bcd\u6570\n'''\n\nimport collections\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\\n\") == '6 23 21'\n\"\"\""
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\"\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    a_sum = 0\n    b_sum = 0\n    moves = 0\n    i = 0\n    j = n - 1\n    while i < j:\n        if a_sum < b_sum:\n            a_sum += a[i]\n            moves += 1\n            i += 1\n        elif b_sum < a_sum:\n            b_sum += b[j]\n            moves += 1\n            j -= 1\n        else:\n            a_sum += a[i]\n            moves += 1\n            i += 1\n            b_sum += b[j]\n            moves += 1\n            j -= 1\n    print(moves, a_sum, b_sum)\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11\\n1 1 1\\n13\") == \"6 23 21\"\n\"\"\"\nfrom typing import List, Tuple, Optional"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11\\n3 1 4 1 5 9 2 6 5 3 5') == '6 23 21'\nassert solution('1000\\n3') == '1 1000 0'\nassert solution('13\\n1 2 3 4 5 6 7 8 9 10 11 12 13') == '2 1 2'\nassert solution('6\\n1 1 1 1 1 1') == '2 1 2'\nassert solution('7\\n1 1 1 1 1 1 1') == '3 4 2'\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\") == \"6 23 21\"\n\"\"\""
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n3\\n1 1 1\\n13\") == \"6 23 21\"\nassert solution(\"4\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n3\\n1 1 1\\n13\") == \"1 1000 0\"\nassert solution(\"4\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n3\\n1 1 1\\n13\") == \"2 1 2\"\nassert solution(\"4\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n3\\n1 1 1\\n13\") == \"6 45 46\"\nassert solution(\"4\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n3\\n1 1 1\\n13\") == \"2 2 1\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\") == \"6 23 21\"\n\"\"\"\n\nfrom sys import stdin\n\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = [0, 0]\n    turn = True\n    for i in range(n):\n        if turn:\n            if a[i] < b[turn] + 1:\n                b[turn] = a[i]\n            elif a[i] > b[not turn] + 1:\n                b[not turn] += a[i] - b[turn] - 1\n            turn = not turn\n        else:\n            if a[i] < b[turn] + 1:\n                b[turn] = a[i]\n            elif a[i] > b[not turn] + 1:\n                b[not turn] += a[i] - b[turn] - 1\n            turn = not turn\n    print(sum(b), b[0], b[1])"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1 1 1 1\\n3\") == \"1 1000 0\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1') == '6 23 21'\nassert solution('7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1') == '1 1000 0'\nassert solution('7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1') == '2 1 2'\nassert solution('7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1') == '3 4 2'\nassert solution('7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1') == '4 4 3'\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '6'\nassert solution('5\\n2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '27'\nassert solution('5\\n2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '39'\nassert solution('5\\n2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '11'\nassert solution('5\\n2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '17'\n\n\"\"\"\n\n\nfrom collections import deque\nfrom sys import stdin"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '27'\nassert solution('5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '27'\nassert solution('5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '27'\nassert solution('5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '27'\nassert solution('5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '27'\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 2\\n3 4\") == \"6\"\nassert solution(\"5 3\\n1 2 3 4 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"5 3\\n1 2 3 4 5\\n5 5 6 6 5\") == \"39\"\nassert solution(\"5 3\\n1 2 3 4 5\\n5 5 6 6 5\") == \"39\"\n\"\"\"\n\nimport sys\nimport math\nimport os"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n''') == '''\n6\n27\n39\n11\n17'''\n\nassert solution('''\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"39\"\nassert solution(\"5 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"11\"\nassert solution(\"5 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"17\"\nassert solution(\"5 4\\n1 2 2 1\\n4 4 5 4\") == \"11\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"1 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"17\"\nassert solution(\"1 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"17\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5 2\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\"\"\") == \"\"\"6\n27\n39\n11\n17\"\"\""
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"2 1\\n1 2\\n3 4\\n5 5\") == \"6\"\nassert solution(\"4 0\\n2 2 4 3\") == \"11\"\nassert solution(\"4 4\\n1 2 2 1\") == \"17\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"6\"\nassert solution(\"1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\n\"\"\"\n\n\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5''') == '6'\nassert solution('''3\n1 2\n2 1\n2 3''') == '3'\nassert solution('''4\n1 2\n2 1\n2 3\n4 4''') == '0'\nassert solution('''5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5''') == '27'\nassert solution('''5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5''') == '39'\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\\n') == '0 7 13 18 24 35 36 37 40 45'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(expected_output(input()))\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('10 1\\n3 2 3 1 3 3 1 4 1\\n1 2 3 4 4 1 2 1 3') == '0 2 4 7 8 11 13 14 16 17'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\n\"\"\"\n\nn, c = map(int, stdin.readline().split())\nstairs = [int(x) for x in stdin.readline().split()]\nelevator = [int(x) for x in stdin.readline().split()]\nt = [0] * (n + 1)\nfor i in range(1, n):\n    t[i + 1] = t[i] + max(elevator[i - 1], stairs[i - 1])\nfor i in range(n):\n    t[i + 1] += stairs[i] + elevator[i]\nprint(*t[1:])\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\nassert solution(\"10 1\\n3 2 3 1 3 3 1 4 1\") == \"0 2 4 7 8 11 13 14 16 17\"\n\n\"\"\"\n\n\"\"\"\n    n, c = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    \n    a = [0] + a\n    b = [0] + b\n    \n    ans = 0\n    s = 0\n    \n    for i in range(n - 1, 0, -1):\n        min_cost = min(a[i], b[i])\n        ans += min_cost\n        s += min_cost\n        if s > c:\n            break\n        \n    print(ans)\n\"\"\"\n\nn, c = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\na = [0] + a\nb = [0] + b\n\nans = 0\ns = 0\n\nfor i in range(n - 1, 0, -1):\n    min_cost = min(a[i], b[i])\n    ans += min_cost\n    s += min_cost\n    if s > c:\n        break\n\nprint(ans)"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n2 1 3 2\\n3 2\\n4\") == \"0 2 7 8 11 13 14 16 17\"\nassert solution(\"8 3\\n1 2 3 4 4 1 2 1 3\\n3 2\\n4\") == \"0 2 7 8 11 13 14 16 17\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5') == '0 7 13 18 24 35 36 37 40 45'\n\"\"\"\n\nn, c = map(int, stdin.readline().split())\nnumbers = list(map(int, stdin.readline().split()))\nnumbers = [0] + numbers\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\nassert solution(\"10 1\\n3 2 3 1 3 3 1 4 1\\n1 2 3 4 4 1 2 1 3\") == \"0 2 4 7 8 11 13 14 16 17\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\nprint(\"Ok!\")\n\n'''\n\nimport sys"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1\") == 'aaabb'\nassert solution(\"5 2\") == 'aabab'\nassert solution(\"5 8\") == 'aaaaabaaaaabaaaaaaaa'\nassert solution(\"5 10\") == 'aaaaabaaaaabaaaaaaaa'\nassert solution(\"3 1\") == 'aaa'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2\\n20 100') == 'aaabb'\n\"\"\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2\\n20 100\\n\") == \"aaabb\"\n\"\"\"\n\n\nfrom math import factorial\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '5 1'\n) == 'aaabb'\nassert solution(\n    '5 2'\n) == 'aabab'\nassert solution(\n    '5 8'\n) == 'baaba'\nassert solution(\n    '5 10'\n) == 'bbaaa'\nassert solution(\n    '3 1'\n) == 'aaa'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_data_1) == \"aaabb\", 'Test #1 Error. Expected: aaabb'\nassert solution(test_data_2) == \"abaab\", 'Test #2 Error. Expected: abaab'\nassert solution(test_data_3) == \"bbaaa\", 'Test #3 Error. Expected: bbaaa'\nassert solution(test_data_4) == \"bbbab\", 'Test #4 Error. Expected: bbbab'\nassert solution(test_data_5) == \"aaaaabaaaaabaaaaaaaa\", 'Test #5 Error. Expected: aaaaaabaaaaabaaaaaaaa'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1') == 'aaabb'\nassert solution('5 2') == 'aabab'\nassert solution('5 8') == 'baaba'\nassert solution('5 10') == 'bbaaa'\nassert solution('3 1') == 'abb'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\n''') == 'aaabb'\n\"\"\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1') == 'aaabb'\n\nassert solution('5 2') == 'aabab'\n\nassert solution('5 8') == 'baaba'\n\nassert solution('5 10') == 'bbaaa'\n\nassert solution('3 1') == 'abb'"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1') == 'aaabb'\nassert solution('5 2') == 'aabab'\nassert solution('5 8') == 'bbaaa'\nassert solution('5 10') == 'abb'\nassert solution('3 1') == 'aaaaabaaaaabaaaaaaaa'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1\") == \"aaabb\"\nassert solution(\"5 2\") == \"aabab\"\nassert solution(\"5 8\") == \"baaba\"\nassert solution(\"5 10\") == \"bbaaa\"\nassert solution(\"3 1\") == \"aaa\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\\n\") == \"6\\n1\\n5\\n10\"\nassert solution(\"5 2\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\\n\") == \"1\\n5\\n10\"\nassert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\\n\") == \"5\\n1\"\nassert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\\n\") == \"5\\n1\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_case_1) == test_case_1_result\nassert solution(test_case_2) == test_case_2_result\nassert solution(test_case_3) == test_case_3_result\nassert solution(test_case_4) == test_case_4_result\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19') == '6\\n1\\n5\\n10'\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3') == '6'\nassert solution('2\\n2 5\\n1 2\\n1 1') == '1'\n\"\"\"\nfrom collections import Counter\n\nn, k = map(int, input().split())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nx_c = Counter(x)\ny_c = Counter(y)\nresult = 0\nfor x, y in zip(x, y):\n    if x_c[x] == 0:\n        result += y_c[y]\n        y_c[y] -= 1\n    else:\n        if y_c[y] == 0:\n            result += x_c[x]\n        else:\n            result += min(x_c[x], y_c[y])\n            if x_c[x] < y_c[y]:\n                y_c[y] -= x_c[x]\n                x_c[x] = 0\n            else:\n                x_c[x] -= y_c[y]\n                y_c[y] = 0\nprint(result)\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1\\n1 5 2 3 1 5 4') == '6'\nassert solution('7 1\\n1 5 2 3 1 5 4') == '1'\nassert solution('7 2\\n1 5 2 3 1 5 4') == '5'\n\"\"\"\n\nfrom collections import Counter\n\nt = int(input())\nfor _ in range(t):\n    n, k = [int(i) for i in input().split()]\n    points_x = [int(i) for i in input().split()]\n    points_y = [int(i) for i in input().split()]\n    counter = Counter([(points_y[i], points_x[i]) for i in range(n)])\n    max_count = 0\n    for key, value in counter.items():\n        if value == n:\n            max_count += 1\n        elif value > 1:\n            count = (n - value) // (k - 1)\n            if (n - value) % (k - 1) > 0:\n                count += 1\n            max_count += count\n    print(max_count)\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\\n\\n\") == \"6\\n1\\n5\\n10\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_case_0) == test_case_0_result\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10\") == \"1\"\nassert solution(\"7 1\") == \"6\"\nassert solution(\"7 10\") == \"10\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n5 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3') == '6\\n1\\n5\\n10'\n-----"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\") == \"6\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\") == \"1\"\nassert solution(\"7 1\\n1 3 6 7 2 5 4\") == \"5\"\nassert solution(\"7 10\\n10 7 5 15 8\") == \"10\"\nassert solution(\"7 10\\n15 19 8 17 20 10 9 2 10 19\") == \"10\"\n\n\n\n[Image]\n\nThe point $(3, 7)$ can't be saved too.\n\n\"\"\"\n\nimport sys\nimport unittest\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"2\"\n\na = []\nx = 2\nfor _ in range(int(stdin)):\n    a.append(int(stdin))\n\nfor _ in range(int(stdin)):\n    y = int(stdin)\n    # If there is an element with a negative index, return -1\n    if y in a:\n        a.remove(y)\n    else:\n        a.append(y)\n\nprint(len(a))"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3\\n1\\n1\\n2\\n2\\n2\\n3\\n3\\n3\\n\") == \"3\"\n\nassert solution(\"7 3\\n1\\n2\\n1\\n2\\n0\\n0\\n10\\n\") == \"3\"\n\nassert solution(\"4 3\\n1\\n2\\n1\\n2\\n\") == \"0\"\n\nassert solution(\"4 3\\n1\\n2\\n1\\n2\\n\") == \"0\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution('4 3\\n1\\n2\\n1\\n2') == '0\\n0\\n0\\n0'\n\n\"\"\""
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\\n\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\\n\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\\n\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\\n\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1\\n2\\n1\\n2\\n') == '0\\n0\\n0\\n0'\nassert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\\n') == '1\\n2\\n3\\n3\\n4\\n4\\n7\\n7'\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution('4 3\\n1\\n2\\n1\\n2') == '0\\n0\\n0\\n0'\nassert solution('4 3\\n1\\n2\\n1\\n2\\n0\\n0\\n10') == '0\\n0\\n0\\n0\\n0\\n0\\n7'\nassert solution('3 3\\n0\\n1\\n0\\n1\\n0\\n0\\n10') == '0\\n0\\n0\\n0\\n0\\n0\\n7'\nassert solution('5 3\\n0\\n1\\n0\\n1\\n0\\n0\\n10') == '0\\n0\\n0\\n0\\n0\\n0\\n7'\n\n----\n\nThe second example:  After the first query, the array is $a=[0, 1]$: you can perform $a[1] := a[1] + 3 = 1 + 3 = 4$.  Now MEX is maximum possible and equals to $4$.  After the second query, the array is $a=[0, 1, 2]$: you don't need to perform any operations, maximum possible MEX is $3$.  After the third query, the array is $a=[0, 1, 2, 2]$: you don't need to perform any operations, maximum possible MEX is $3$.  After the fourth query, the array is $a=[0, 1, 2, 2, 0]$: you can perform $a[4] := a[4] + 3 = 2 + 3 = 5$. The array changes to be $a=[0, 1, 2, 2, 3]$. Now MEX is maximum possible and equals to $3$.  After the fifth query, the array is $a=[0, 1, 2, 2, 0, 0]$: you can perform $a[4] := a[4] + 3 = 0 + 3 = 3$. The array changes to be $a=[0, 1, 2, 2, 3, 0]$. Now MEX is maximum possible and equals to $3$.  After the sixth query, the array is $a=[0, 1, 2, 2, 0, 0, 10]$. You can perform the following operations:   $a[3] := a[3] + 3 = 2 + 3 = 5$,  $a[4] := a[4] + 3 = 0 + 3 = 3$,  $a[5] := a[5] + 3 = 0 + 3 = 3$,  $a[5] := a[5] + 3 = 3 + 3 = 6$,  $a[6] := a[6] - 3 = 10 - 3 = 7$,  $a[6] := a[6] - 3 = 7 - 3 = 4$.  The resulting array will be $a=[0, 1, 2, 5, 3, 6, 4]$. Now MEX is maximum possible and equals to $7$.\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('4 3\\n1\\n2\\n1\\n2\\n') == '0\\n0\\n0\\n0'\nassert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution('4 3\\n1\\n2\\n1\\n2') == '0\\n0\\n0\\n0'\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\"\n\"\"\"\n\n\n\nimport sys"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7'\n\"\"\"\n\nimport math\nimport sys\n\nassert len(sys.argv) == 2\nn = int(sys.argv[1])\n\nfor _ in range(n):\n    n, x, y = [int(i) for i in input().split()]\n    ans = [x]\n    ans.extend([math.ceil((y + x - i) / 2) for i in range(x + 1, y)])\n    ans.append(y)\n    print(' '.join([str(i) for i in ans]))\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2\") == \"3 2 1\"\nassert solution(\"4 1 2\") == \"2 1 4\"\n\"\"\""
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n1\\n') == ''\nassert solution('1\\n1\\n1\\n') == ''\nassert solution('1\\n1\\n1\\n1\\n') == ''"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7\"\n\n\"\"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\n\n\"\"\"\nfrom collections import defaultdict\nimport heapq\nfrom functools import lru_cache\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n2 1 2') == '1 2'\nassert solution('2\\n3 2\\n4 1 1\\n') == '2 3 4'\nassert solution('3\\n1 1 1\\n2 1 1\\n3 1 1\\n') == '1 2 3'\nassert solution('4\\n1 1 1 1\\n2 1 1 1\\n3 1 1 1\\n4 1 1 1\\n') == '1 2 3 4'\n\nimport sys\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3 2 1\n4 5 6\n7 8 9\"\"\") == \"\"\"3 2 1\n4 5 6\n7 8 9\"\"\"\n\nassert solution(\"\"\"1 2 3\n4 5 6\"\"\") == \"\"\"1 2 3\n4 5 6\"\"\"\n\nassert solution(\"\"\"1 1 1\n2 2 2\"\"\") == \"\"\"1 1 1\n2 2 2\"\"\"\n\nassert solution(\"\"\"5 2 4\n5 5 6\"\"\") == \"\"\"5 2 4\n5 5 6\"\"\"\n\nassert solution(\"\"\"5 3 7\n5 5 6\n6 6 7\n5 1 8\n7 8 9\n7 9 10\"\"\") == \"\"\"5 3 7\n5 5 6\n6 6 7\n5 1 8\n7 8 9\n7 9 10\"\"\""
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 49\") == \"1 49\"\nassert solution(\"5 20 50\") == \"20 40 30 50 10\"\nassert solution(\"6 20 50\") == \"20 40 30 50 10\"\nassert solution(\"5 3 8\") == \"8 23 18 13 3\"\nassert solution(\"9 13 22\") == \"1 10 13 4 19 22 25 16 7\"\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\n\n'''"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n\"\"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n\n\"\"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\nassert solution('1 2 3') == '1 2 3'\nassert solution('1 3 2') == '1 2 3'\nassert solution('2 1 3') == '1 2 3'\nassert solution('1 2') == '1 2'\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\nassert solution(\"1 2 3\") == \"1 2 3\"\n\"\"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\nprint(\"PASSED\")\n\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n\n\"\"\"\n\n\"\"\"\nMock 1\nimport random\nimport time\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 2 1') == '1 2 3 4'\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n\n\"\"\""
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n4\\n2 2 8 8\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2 3\") == \"YES\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2 3\") == \"NO\"\nassert solution(\"3\\n3 3 3\") == \"YES\"\nassert solution(\"4\\n5 5 5 5\") == \"NO\"\n\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3\\n4\\n2 2 8 8\") == \"NO\"\nassert solution(\"4\\n3 3 3\\n4\\n5 5 5 5\") == \"YES\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5\n2\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\n\"\"\") == \"YES\\nNO\\nYES\\nNO\\nNO\"\n\n\"\"\"\n1004_The_Challenge_From_Coding_Ninjas\n\n\u0414\u0430\u043d\u044b \u0447\u0435\u0442\u044b\u0440\u0435 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430: A, B, C, D.\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0447\u0438\u0441\u043b\u043e A \u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0432\u0438\u0434\u0443: \"\u0426\u0438\u0444\u0440\u0430 \u0417 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0424\u0430\u0439\u043b\u0435\" \u0438 \"\u0426\u0438\u0444\u0440\u0430 \u0417 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0421\u043f\u0438\u0441\u043a\u0435\".\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0447\u0435\u0442\u044b\u0440\u0435 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 A, B, C, D (A < B < C < D \u2264 9)\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0443 \u00abYES\u00bb \u0438\u043b\u0438 \u00abNO\u00bb.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u0443\u0434\u043e\u0431\u043d\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 all() \u0438 any().\n\nSample Input 1:\n\n4\n3\n4\n1\nSample Output 1:\n\nYES\nSample Input 2:\n\n4\n3\n4\n1\nSample Output 2:\n\nNO\nSample Input 3:\n\n4\n2\n3\n4\nSample Output 3:\n\nYES\nSample Input 4:\n\n4\n3\n3\n4\nSample Output 4:\n\nNO\n\"\"\""
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2\\n3\\n4\\n2 2 8 8\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2 3\\n4\\n2 2 8 8\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3\\n4\\n2 2 8 8\") == \"NO\"\nassert solution(\"2\\n3\\n4\\n2 2 8 8\") == \"NO\"\nassert solution(\"2\\n3\\n4\\n2 2 8 8\") == \"NO\"\nassert solution(\"2\\n3\\n4\\n2 2 8 8\") == \"NO\"\nassert solution(\"2\\n3\\n4\\n2 2 8 8\") == \"NO\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_data) == result"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n4\") == \"1 3 2 4\"\nassert solution(\"5\\n2\") == \"2 1 5 4 3\"\nassert solution(\"1\\n4\")!= \"1 3 5 2 4\"\nassert solution(\"6\\n6\") == \"-1\"\nassert solution(\"1\\n4\")!= \"1 3 5 2 4\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"4\") == \"3 1 4 2\"\nassert solution(\"6\") == \"5 3 6 2 4 1\"\nassert solution(\"7\") == \"5 1 3 6 2 4 7\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 6 10 8 4 7 3 1 5 2') == '9 6 10 8 4 7 3 1 5 2'\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List, Set, Dict\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    if n == 2:\n        print(-1)\n        continue\n\n    p = set()\n    for i in range(1, n):\n        if i < 2:\n            p.add(i)\n        elif abs(i - 2) > 4:\n            p.add(i)\n\n    if not p:\n        print(-1)\n    else:\n        cnt = Counter(p)\n        for i in range(1, n):\n            if 2 <= abs(i - 2) <= 4:\n                continue\n            if i not in cnt:\n                print(-1)\n                break\n            cnt[i] -= 1\n            if cnt[i] == 0:\n                del cnt[i]\n        else:\n            print(' '.join(map(str, sorted(p))))"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n4\\n\") == \"2 1 4 3\"\nassert solution(\"3\\n3\\n\") == \"3 1 2\"\nassert solution(\"5\\n5\\n\") == \"3 1 2 4 5\"\nassert solution(\"7\\n7\\n\") == \"3 1 2 4 5 6 7\"\nassert solution(\"13\\n13\\n\") == \"3 1 2 4 5 6 7 8 9 10 12 11 13\"\n\n\"\"\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n6\n10\n2\n4\n6\n7\n13\n''') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('''\n5\n3\n1\n2\n5\n''') == '5 1 3 6 2 4'\nassert solution('''\n7\n5\n4\n3\n2\n1\n''') == '5 3 6 2 4 1'\nassert solution('''\n6\n1\n''') == '1'\n\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('2\\n') == '1 2'\nassert solution('3\\n') == '1 2 3'\nassert solution('4\\n') == '1 2 3 4'\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('2') == -1\nassert solution('4') == '3 1 4 2'\nassert solution('6') == '5 3 6 2 4 1'\nassert solution('7') == '5 1 3 6 2 4 7'\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '9 6 10 8 4 7 3 1 5 2'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"4\") == \"3 1 4 2\"\nassert solution(\"6\") == \"5 3 6 2 4 1\"\nassert solution(\"7\") == \"5 1 3 6 2 4 7\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n2\\n4\\n6\\n7\\n13\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"6\\n7\\n13\") == \"-1\"\nassert solution(\"7\\n13\") == \"5 1 3 6 2 4 7\"\nassert solution(\"7\\n13\\n7\\n7\\n13\") == \"13 9 7 11 8 4 1 3 5 2 6 10 12\"\nassert solution(\"7\\n5\\n7\\n7\\n7\\n13\") == \"5 1 3 6 2 4 7\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\") == '2'\nassert solution(\"4\\n1\\n7\\n4 9 2 1 18 3 0\") == '1'\nassert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\") == '-1'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 2 7 6\") == 2\nassert solution(\"3\\n3 2 6\") == -1\n\"\"\""
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == '2\nassert solution('''4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == '1\nassert solution('''4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == '-1\nassert solution('''4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == '0\nassert solution('''4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0''') == '-1\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 2 7 6\") == \"2\"\nassert solution(\"3\\n3 2 6\") == \"1\"\nassert solution(\"1\\n7\") == \"-1\"\nassert solution(\"7\\n7\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 2 7 6\") == 2\nassert solution(\"3\\n3 2 6\") == 1\nassert solution(\"1\\n7\") == -1\nassert solution(\"7\\n7\") == 0"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\") == \"2\\n1\\n-1\\n0\"\nassert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\") == \"2\\n1\\n-1\\n0\"\nassert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\") == \"2\\n1\\n-1\\n0\"\nassert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\") == \"2\\n1\\n-1\\n0\"\nassert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\") == \"2\\n1\\n-1\\n0\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n\") == \"2\\n1\\n-1\\n0\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\") == \"2\\n1\\n-1\\n0\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''9\n0 1 1 1 0 0 0 0 1\n1 2\n1 3\n3 4\n3 5\n2 6\n4 7\n6 8\n5 9''') == '2 2 2 2 2 1 1 0 2'\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\") == \"0 -1 1 -1\"\nassert solution(\"5\\n0 1 1 1 0\\n1 2\\n1 3\\n1 4\") == \"0 -1 1 -1\"\nassert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"2 2 2 2 2 1 1 0 2\"\n\n\"\"\"\n\n\nfrom collections import Counter\nfrom typing import List\n\n\nclass Solution:\n    def solve(self, n: int, data: List[int]) -> List[int]:\n        res = [0] * n\n        for u, v, c in data:\n            c = -1 if c == 1 else 1\n            res[u - 1] += c\n            res[v - 1] += c\n\n        for i in range(n):\n            res[i] = max(0, res[i])\n        return res\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n0 1 1 1\\n1 2\\n1 3\\n1 4') == '0 -1 1 -1'"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == '2 2 2 2 2 1 1 0 2'\n\n\"\"\"\nfrom typing import List\nfrom collections import Counter, deque\nimport sys\nimport itertools\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 1\\n1 3\\n1 4\\n\") == '2 2 2 2 1 1 0 2'\nassert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n\") == '0 -1 1 -1'\n\nimport sys;"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n9\n0 1 1 1 0 0 0 0 1\n1 2\n1 3\n3 4\n3 5\n2 6\n4 7\n6 8\n5 9\n''') == '''\n2 2 2 2 2 1 1 0 2\n'''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 1 1 0\\n1 2\\n1 3\\n1 4\") == '0 -1 1 -1'\nassert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\") == '0 -1 1 -1'\n\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''9\n0 1 1 1 0 0 0 0 1\n1 2\n1 3\n3 4\n3 5\n2 6\n4 7\n6 8\n5 9''') == '2 2 2 2 2 1 1 0 2'\nassert solution('''4\n0 0 1 0\n1 2\n1 3\n1 4''') == '0 -1 1 -1'\nassert solution('''4\n0 0 0 0\n1 2\n1 3\n1 4''') == '0 -1 1 -1'"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '2 1 1 0'\nassert solution('1 2 0 3') == '2 2 2 1 0'\nassert solution('1 2 0 3 0 4') == '3 2 2 1 0'\nassert solution('1 2 0 3 0 4 0 5') == '4 3 2 1 0'\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"9\\n\"\n\"0 1 1 1 0 0 0 0 1\\n\"\n\"1 2\\n\"\n\"1 3\\n\"\n\"3 4\\n\"\n\"3 5\\n\"\n\"2 6\\n\"\n\"4 7\\n\"\n\"6 8\\n\"\n\"5 9\\n\"\n) == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\n\"4\\n\"\n\"0 0 1 0\\n\"\n\"1 2\\n\"\n\"1 3\\n\"\n\"1 4\\n\"\n) == \"0 -1 1 -1\"\nassert solution(\n\"7\\n\"\n\"1 2 3 4 5 6 7\\n\"\n\"2 3 5 6 8 9\\n\"\n\"3 4 6 8 9\\n\"\n\"4 5 6 8 9\\n\"\n\"5 6 7 8 9\\n\"\n\"6 7 8 9\\n\"\n\"7 8 9\\n\"\n) == \"0 -1 1 -1 1 -1 1 0 1 2\"\n\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10000000)\n\nn = int(sys.stdin.readline().strip())\ncolors = list(map(int, sys.stdin.readline().strip().split()))\n\ngraph = defaultdict(list)\nfor _ in range(n - 1):\n    u, v = list(map(int, sys.stdin.readline().strip().split()))\n    graph[u].append(v)\n    graph[v].append(u)"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n') == '0'\nassert solution('2\\n') == '-1'\nassert solution('3\\n') == '2'\nassert solution('4\\n') == '-1'\nassert solution('5\\n') == '3'\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"15116544\") == \"36\"\nassert solution(\"3\") == \"-1\"\nassert solution(\"12\") == \"2\"\nassert solution(\"12345\") == \"36\"\nassert solution(\"387420489\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1\\n2\\n3\\n2\\n1') == '0\\n-1\\n0\\n0\\n-1\\n0'\nassert solution('2\\n1\\n2\\n3\\n2\\n1') == '0\\n-1\\n0\\n0\\n-1\\n0'\nassert solution('2\\n1\\n2\\n3\\n2\\n1') == '0\\n-1\\n0\\n0\\n-1\\n0'\nassert solution('2\\n1\\n2\\n3\\n2\\n1') == '0\\n-1\\n0\\n0\\n-1\\n0'\nassert solution('2\\n1\\n2\\n3\\n2\\n1') == '0\\n-1\\n0\\n0\\n-1\\n0'\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n12\\n12345\\n15116544\\n387420489\") == \"0\\n-1\\n2\\n-1\\n-1\\n12\\n36\"\n\"\"\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1) == 0\nassert solution(2) == -1\nassert solution(3) == 2\nassert solution(4) == -1\nassert solution(5) == 12\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\") == \"1\"\nassert solution(\"2\\n3\") == \"2\"\nassert solution(\"3\\n12\") == \"2\"\nassert solution(\"12\\n12345\") == \"36\"\nassert solution(\"15116544\\n387420489\") == \"9\"\n\n\n\"\"\""
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '-1'\nassert solution('3') == '1'\nassert solution('12') == '0'\nassert solution('123') == '2'\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('15116544') == '12'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n1') == ''\nassert solution('1\\n2') == '-1'\nassert solution('1\\n2\\n3') == '-1'\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '-1'\nassert solution('3') == '1'\nassert solution('12') == '2'\nassert solution('123') == '2'\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RGBRGBRGB\") == \"RRRRRRRR\"\nassert solution(\"GGBBBB\") == \"GGGGGGGG\"\nassert solution(\"BBBBBB\") == \"BBBBBB\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"RBRGR\") == 3\n\n\"\"\"\n\nfrom typing import Callable, List\n\nclass Solution:\n    def __init__(self, solution: Callable):\n        self.solution = solution\n\n    def solve(self, q: int, stdin: str):\n        return [ self.solution(stdin[i:i + 2]) for i in range(q) ]\n\n\nsolution_1 = Solution(lambda stdin: len(stdin) - len(stdin.replace('B', '')))\nsolution_2 = Solution(lambda stdin: len(stdin) - len(stdin.replace('R', '')))\nsolution_3 = Solution(lambda stdin: len(stdin) - len(stdin.replace('G', '')))\nsolution_4 = Solution(lambda stdin: len(stdin) - len(stdin.replace('B', '')) + 1)"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RBRGRG\") == \"0\"\nassert solution(\"RBRGRGB\") == \"3\"\nassert solution(\"RBRGRGBB\") == \"3\""
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RGBRGBRGB\") == \"2\"\nassert solution(\"RRRRRRRR\") == \"0\"\nassert solution(\"RRRRRRRRG\") == \"5\"\nassert solution(\"RGRGRGR\") == \"1\""
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('BGGGG') == 1\nassert solution('RBRGR') == 3\nassert solution('BBBRR') == 0\nassert solution('BBBBB') == 5"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('RBRG') == 'RGB'\nassert solution('GBRG') == 'RGB'\nassert solution('BBRG') == 'RGB'\nassert solution('RRRR') == 'R'\nassert solution('RRRBR') == 'RRR'\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('BGGGG') == '1'\nassert solution('RBRGR') == '0'\nassert solution('BBBRR') == '3'\n\"\"\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"BBBRR\") == 3\nassert solution(\"RRRBB\") == 0\n\"\"\""
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('RRR') == 'R'\nassert solution('RRR') == 'R'\nassert solution('GGRR') == 'G'\nassert solution('RRGGG') == 'G'\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"BBRRR\") == 0\nassert solution(\"RBRGR\") == 3\n\"\"\""
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3 1 2 3 1\\n3\\n2 3 3 4') == '2\\n2\\n0'\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n2\n1 1 1 1\n3\n1 1 2 2\n3\n1 1 1 1\n3\n1 1 2 2\n3\n1 1 1 1''') == '6\\n3\\n3'\n\nassert solution('''5\n2\n1 1 2 1\n5\n1 1 1 1 1\n3\n1 1 2 2\n3\n1 1 1 1''') == '6\\n3\\n2'\n\n'''\n6 3 1 2 3 1\n3\n1 1 1 1 1\n3\n1 1 2 2\n3\n1 1 1 1\n3\n1 1 2 2\n3\n1 1 1 1\n'''\n'''\n2\n3\n1 1 1 1\n3\n1 1 2 2\n3\n1 1 1 1\n3\n1 1 2 2\n3\n1 1 1 1\n'''\n\n'''\n1\n1\n1 1 2 2\n3\n1 1 1 1\n3\n1 1 2 2\n3\n1 1 1 1\n3\n1 1 2 2\n3\n1 1 1 1\n'''\n\n'''\n5\n2\n1 1 2 1\n5\n1 1 1 1 1\n3\n1 1 2 2\n3\n1 1 1 1\n3\n1 1 2 2\n3\n1 1 1 1\n3\n1 1 2 2\n3\n1 1 1 1\n'''\n\n'''\n3\n4\n1 1 1 1\n5\n1 1 1 1 1\n3\n1 1 2 2\n3\n1 1 1 1\n3\n1 1 2 2\n3\n1 1 1 1\n'''\n\n'''\n6\n2\n3 1 1 2 2\n3\n1 1 1 1 1\n3\n1 1 2 2\n3\n1 1 1 1\n3\n1 1 2 2\n3\n1 1 1 1\n'''\n\n'''\n7\n2\n1 1 1 1 1 2 2\n3\n1 1 1 1 1 2 2\n3\n1 1 1 1 1 2 2\n3\n1 1 1 1 1 2 2\n3\n1 1 1 1 1 2 2\n3\n1 1 1 1 1 2 2\n3\n1 1 1 1 1 2 2\n'''"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == '3\\n3'\nassert solution(\"3\\n1 1 1\\n2 2\") == '0'\nassert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == '3\\n3'\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\"\nassert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\"\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n1') == '2'\nassert solution('1\\n1\\n1') == '3'\nassert solution('1\\n1\\n1\\n1') == '3'\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2''') == '3'\nassert solution('''2\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2''') == '3'\nassert solution('''2\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2''') == '3'\nassert solution('''2\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2''') == '3'\n\nassert solution('''2\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2''') == '3'\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1 1 2 2') == '3'\nassert solution('1 1 1 1 1 2 2') == '3'\nassert solution('1 1 1 1 1 2 2 2') == '3'\nassert solution('1 1 1 1 1 2 2 2') == '3'\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\nassert solution(\"1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\\n4\\n2 5 1 9\") == \"4\\n3\\n1\\n3\"\nassert solution(\"4\\n1 2 3 4\\n4\\n2 5 1 9\") == \"4\\n3\\n1\\n3\"\nassert solution(\"3\\n1 2\\n2\\n3\\n4\") == \"2\\n1\\n1\"\n\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n5\\n3 1 2 3 1') == '3'\nassert solution('2\\n5\\n3 1 2 3 1') == '3'\nassert solution('8\\n7\\n1 1 1 1 1 2 2') == '3'\n\"\"\"\nimport sys\nfrom typing import List\n\ndebug = False\ndata = sys.stdin.read().splitlines()\n\nt = int(data[0])\ndata = data[1:]"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\n\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4\"\n\nassert solution(\"4\\n1\") == \"1\"\n\nassert solution(\"4\\n4 3 2 1\") == \"1 2 3 4\"\n\nprint('The local tests are done. Click on \"Check\" for more details about implementation.')\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5\\n5 4 1 3 2') == '1 5 2 4 3'\nassert solution('4\\n1 2 4 3') == '1 2 3 4'\nassert solution('1\\n1') == '1'\nassert solution('3\\n1\\n1\\n4\\n4\\n3') == '1 3 4 2'"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == '1 5 2 4 3'\nassert solution(\"4\\n4\\n1 2 4 3\") == '1 2 3 4'\nassert solution(\"3\\n1\\n1\") == '1'\nassert solution(\"4\\n3\\n1 2 3\") == '1 2 3'\nassert solution(\"4\\n2\\n1 2\") == '1 2'\n\n\"\"\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n4\\n5 4 1 3 2\") == \"1 5 2 4 3 \"\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\n\"\"\"\n\nfrom sys import stdin, stdout\nimport heapq as hp"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"4\\n4 3 2 1\") == \"1 2 3 4\"\n\"\"\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4\"\n\"\"\"\n\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == '1 5 2 4 3 '\nassert solution(\"4\\n5\\n1 2 3 4 5\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == '1 2 3 4 5 '\nassert solution(\"4\\n5\\n1 2 3 4 5\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == '1 2 3 4 5 '\nassert solution(\"4\\n5\\n1 2 3 4 5\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == '1 2 3 4 5 '\n\n'''"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3 \"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4 \"\nassert solution(\"1\\n1\") == \"1 \"\nassert solution(\"2\\n4\\n4 3 2 1\") == \"1 2 3 4 \"\n\nassert solution(\"5\\n5 4 1 3 2\") == \"1 5 2 4 3 \"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == '1 5 2 4 3'\nassert solution(\"4\\n1 2 4 3\") == '1 2 3 4'\n\"\"\"\n\n\nimport math\nfrom typing import Dict, List"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\n\"\"\""
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'YES\\nYES\\nNO\\nYES'\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\") == \"YES\"\nassert solution(\"5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\"\nassert solution(\"5\\n1 2 3 5 4\\n5\\n1 2 3 4 5\") == \"NO\"\nassert solution(\"5\\n1 2 3 5 4\\n3\\n5 1 4 2 3\") == \"NO\"\nassert solution(\"5\\n1 2 3 5 4\\n1\\n5 4 2 3 1\") == \"NO\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 4\\n3\\n1 3 2') == 'YES'\nassert solution('4\\n1 2 3 4\\n3\\n1 3 2') == 'YES'\nassert solution('5\\n1 2 3 4 5\\n1\\n1\\n5') == 'NO'\nassert solution('5\\n1 2 3 4 5\\n1\\n1\\n5') == 'NO'\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\n\"\"\"\n\n\n\"\"\"\nB) Number of Round Dances\n\nYou've solved C), it's time to solve B).\n\nLet's see if it is possible to start the round dance with the given order of students. If it is possible, then print \"YES\", otherwise print \"NO\".\n\nAssume that the initial order of the students is in clockwise order.\n\n-----Input-----\n\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 200$) \u2014 the number of queries. Then $q$ queries follow.\n\nThe first line of the query contains one integer $n$ ($1 \\le n \\le 200$) \u2014 the number of students.\n\nThe second line of the query contains a permutation of indices $p_1, p_2, \\dots, p_n$ ($1 \\le p_i \\le n$), where $p_i$ is the index of the $i$-th student (in clockwise order). It is guaranteed that all $p_i$ are distinct integers from $1$ to $n$ (i. e. they form a permutation).\n\n\n-----Output-----\n\nFor each query, print the answer on it. If a round dance can be started with the given order of students, print \"YES\". Otherwise print \"NO\".\n\n-----Example-----\nInput\n5\n4\n1 2 3 4\n3\n1 3 2\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4\n\nOutput\nYES\nYES\nNO\nNO\nYES\n\"\"\""
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\\n1\\n1\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\\n5\\n1 2 3 4\") == \"NO\"\n\"\"\"\n\nfrom math import gcd, atan2"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'YES'\nassert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'NO'"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'NO'\n\"\"\""
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3\\n1 2 3 4\\n1\\n1\\n5\\n3 2 1 5 4') == 'YES\\nYES\\nNO\\nYES\\n'\n\n\nimport collections"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'YES'\nassert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'NO'\nassert solution('4\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'YES'\nassert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'NO'\n\n-----Problem-----\n\nRounding problem\n\nA permutation is called a circular permutation if you can rotate it clockwise so that it becomes equal to itself. For example, $(12 3 1)$ is a circular permutation of $(3 1 12)$.\n\nIn the following problem, you are given a circular permutation. You are to determine whether it is possible to rotate it clockwise so that it becomes equal to itself. \n\nIf it is possible, print YES on a new line; otherwise, print NO.\n\n-----Test Case-----\n\nInput\n1\n5\n12 3 1\n\nOutput\nYES\n\n-----Solution-----\n\n\"\"\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n5 2\") == \"5\\n18\"\nassert solution(\"19 4\") == \"19\\n18\"\nassert solution(\"12 7\") == \"12\\n10\"\nassert solution(\"6 2\") == \"6\\n6\"\nassert solution(\"100000 50010\") == \"75015\\n75015\"\n\nprint(solution(\"5\\n5 2\"))\nprint(solution(\"19 4\"))\nprint(solution(\"12 7\"))\nprint(solution(\"6 2\"))\nprint(solution(\"100000 50010\"))\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"5\"\nassert solution(\"19 4\") == \"18\"\nassert solution(\"12 7\") == \"10\"\nassert solution(\"6 2\") == \"6\"\nassert solution(\"100000 50010\") == \"75015\"\n\"\"\"\nimport sys\nimport os"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5\\n18\\n10\\n6\\n75015'\nassert solution('5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5\\n18\\n10\\n6\\n75015'\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 2\n19 4\n12 7\n6 2\n100000 50010''') == '5 18 10 6 75015'\n\"\"\""
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5 18 10 6 75015\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2') == '5'\nassert solution('19 4') == '18'\nassert solution('12 7') == '10'\nassert solution('6 2') == '6'\nassert solution('100000 50010') == '75015'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"5\"\nassert solution(\"19 4\") == \"18\"\nassert solution(\"12 7\") == \"10\"\nassert solution(\"6 2\") == \"6\"\nassert solution(\"100000 50010\") == \"75015\"\nprint(\"The local tests are done.\")\n\"\"\"\n\n\"\"\"\n-----SOLUTION-----\n\n\"\"\""
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 3') == '5'\nassert solution('19 4') == '18'\nassert solution('12 7') == '10'\nassert solution('6 2') == '6'\nassert solution('100000 50010') == '75015'\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n3 2') == '3'\nassert solution('2\\n3 2') == '5'\nassert solution('5\\n3 2') == '8'\nassert solution('7\\n4 2') == '9'\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2\\n3\\n') == 'YES'\nassert solution('3\\n1\\n1\\n') == 'NO'\nassert solution('8\\n7\\n') == 'NO'\nassert solution('97\\n2\\n') == 'YES'\nassert solution('8\\n8\\n') == 'YES'\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 3') == 'YES\\n4 2 4'\nassert solution('100 4') == 'YES\\n55 5 5 35'\nassert solution('8 7') == 'YES\\n55 5 5 35'\nassert solution('97 2') == 'YES\\n55 5 5 35'\nassert solution('8 8') == 'NO'\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 3') == 'YES\\n4 2 4'\nassert solution('100 4') == 'YES\\n55 5 5'\nassert solution('8 7') == 'YES\\n3 1 1'\nassert solution('97 2') == 'NO'\nassert solution('8 8') == 'NO'\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n10 3\") == \"YES\\n4 2 4\"\nassert solution(\"100\\n4\\n8 7\") == \"YES\\n55 5 5 35\"\nassert solution(\"97\\n2\\n8 8\") == \"NO\"\nassert solution(\"3\\n10\\n5 3\") == \"YES\\n1 1 1 1 1 1 1 1\"\nassert solution(\"1000000000000000\\n9\\n1\") == \"YES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 7\") == \"YES\"\nassert solution(\"100 4\") == \"YES\"\nassert solution(\"3 10\") == \"NO\"\nassert solution(\"5 3\") == \"YES\"\nassert solution(\"1000000000 9\") == \"YES\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''8\n10 3\n100 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9''') == '''YES\n4 2 4\nYES\n55 5 5 35\nNO\nNO\nYES\n1 1 1 1 1 1 1 1\nNO\nYES\n3 1 1'''\n\n\n-----Problem-----\n\n\nYou are given an array of n integers, a1, a2,..., an. This array represents number n as the concatenation of its digits:\nas a string. For example, if we have array representation 100 200 1000, then n = 11001100, and the concatenation of its digits is \"110100110100101\".\n\nWrite a function:"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n3\\n8 7\") == \"YES\\n4 2 4\"\nassert solution(\"100\\n4\\n8 7\") == \"YES\\n55 5 5 35\"\nassert solution(\"8\\n3\\n8 7\") == \"YES\\n4 2 4\"\nassert solution(\"97\\n2\\n8 8\") == \"NO\"\nassert solution(\"8\\n3\\n8 7\") == \"YES\\n4 2 4\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 3') == 'YES\\n4 2 4'\n\nassert solution('8 7') == 'YES\\n55 5 5 35'\n\nassert solution('1000000000 9') == 'YES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120'\n\nassert solution('100 4') == 'NO'\n\nassert solution('8 8') == 'NO'"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\n\"\"\"\n\u041f\u043e\u0431\u0443\u0434\u0443\u0432\u0430\u0442\u0438 \u0440\u044f\u0434 \u0432\u0438\u043f\u0430\u0434\u043a\u043e\u0432\u0438\u0445 \u0446\u0456\u043b\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0432\u0456\u0434 $0$ \u0434\u043e $100$, \u0432 \u044f\u043a\u043e\u043c\u0443 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0438\u0439 \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u0440\u044f\u0434\u0443 \u0441\u043f\u0456\u0432\u043f\u0430\u0434\u0430\u0454 \u0442\u0430\u043a\u0438\u043c \u0447\u0438\u043d\u043e\u043c, \u0449\u043e \u0439\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 \u0441\u0443\u043c\u0456 \u0432\u0441\u0456\u0445 \u0446\u0438\u0444\u0440 \u0432 \u0446\u044c\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0456. \u041f\u0435\u0440\u0435\u0432\u0456\u0440\u0438\u0442\u0438 \u0447\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430 \u043b\u043e\u0433\u0456\u043a\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0443\n\n\u041a\u043e\u0436\u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u044f \u0441\u043a\u043b\u0430\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u0447\u0438\u0441\u043b\u043e\u043c $t$ \u043e\u0434\u043d\u0430\u043a\u043e\u0432\u0438\u0445 \u043c\u0430\u0442\u0440\u0438\u0446\u044c (\u0446\u0456\u043b\u0438\u0445 \u0447\u0438\u0441\u0435\u043b), \u0432 \u044f\u043a\u0438\u0445 \u043a\u043e\u0436\u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0440\u044f\u0434\u043e\u043c \u0434\u0440\u0443\u0433\u043e\u0457.\n\n\u041a\u043e\u0436\u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u044f \u0440\u043e\u0437\u043c\u0456\u0440\u043d\u0456\u0441\u0442\u044c $n \\times m$ \u0437\u0430\u0434\u0430\u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u043c $t$ \u043e\u0434\u043d\u0430\u043a\u043e\u0432\u0438\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438.\n\n\u041f\u0435\u0440\u0448\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u044f \u043c\u0456\u0441\u0442\u0438\u0442\u044c $n$ \u0440\u044f\u0434\u043e\u043a \u0447\u0438\u0441\u0435\u043b, \u0437\u0430\u043f\u043e\u0432\u043d\u0435\u043d\u0438\u0445 \u043d\u0443\u043b\u044f\u043c\u0438, \u0430 \u0434\u0440\u0443\u0433\u0430 \u2014 \u0456\u043d\u0448\u0438\u0445 \u0440\u044f\u0434\u043a\u0456\u0432 \u0447\u0438\u0441\u0435\u043b, \u0437\u0430\u043f\u043e\u0432\u043d\u0435\u043d\u0438\u0445 \u0434\u043e\u0434\u0430\u0442\u043d\u0456\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438. \u0420\u044f\u0434\u043e\u043c \u0437 \u043e\u0434\u043d\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u0437\u0430\u043f\u043e\u0432\u043d\u044e\u0454\u0442\u044c\u0441\u044f \u0456\u043d\u0448\u0438\u0439 \u0440\u044f\u0434\u043e\u043a, \u0449\u043e \u0441\u043a\u043b\u0430\u0434\u0430\u0454 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0443 \u043a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b \u0437 \u0446\u044c\u043e\u0433\u043e \u0440\u044f\u0434\u043a\u0430, \u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434:\n\n2 3\n\n1 1 1\n\n1 1 1\n\n1 1 1\n\n1 1 1\n\n1 1 1\n\n\u0414\u0440\u0443\u0433\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u044f \u0441\u043a\u043b\u0430\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u0437 $m$ \u0440\u044f\u0434\u043a\u0456\u0432, \u0442\u0430\u043a\u0438\u0445 \u0449\u043e \u043d\u0430 \u043a\u043e\u0436\u043d\u043e\u043c\u0443 \u043c\u0456\u0441\u0446\u0456 \u0454 \u0437\u0430\u043f\u0438\u0441 \u043e\u0434\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0437 \u0446\u044c\u043e\u0433\u043e \u0440\u044f\u0434\u043a\u0430, \u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434:\n\n1 1 1\n\n1 1 1\n\n1 1 1\n\n1 1 1\n\n1 1 1\n\n\u0417\u0430\u043f\u043e\u0432\u043d\u044e\u0454\u0442\u044c\u0441\u044f \u043a\u043e\u0436\u043d\u0438\u043c \u0440\u044f\u0434\u043a\u043e\u043c \u0447\u0438\u0441\u043b\u043e \u043e\u0442\u0440\u0438\u043c\u0430\u043d\u043d\u044f \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u043e\u0433\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u0437 \u043f\u0435\u0440\u0448\u043e\u0457 \u043c\u0430\u0442\u0440\u0438\u0446\u0456.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0438\u0432\u043e\u0434\u0443\n\n\u0414\u043b\u044f \u043a\u043e\u0436\u043d\u043e\u0457 \u043c\u0430\u0442\u0440\u0438\u0446\u0456 \u0432\u0438\u0432\u0435\u0441\u0442\u0438 \"YES\" \u044f\u043a\u0449\u043e \u0440\u044f\u0434\u043e\u043a \u043c\u0430\u0442\u0440\u0438\u0446\u0456 \u0437\u0431\u0456\u0433\u0430\u0454\u0442\u044c\u0441\u044f \u0441\u0443\u043c\u043e\u044e \u0447\u0438\u0441\u0435\u043b \u0440\u044f\u0434\u043a\u0430 \u043f\u0435\u0440\u0448\u043e\u0457 \u043c\u0430\u0442\u0440\u0438\u0446\u0456 \u043f\u043e \u0441\u0443\u043c\u0456 \u0447\u0438\u0441\u0435\u043b \u0440\u044f\u0434\u043a\u0430 \u0434\u0440\u0443\u0433\u043e\u0457 \u043c\u0430\u0442\u0440\u0438\u0446\u0456, \u0456\u043d\u0430\u043a\u0448\u0435 \"NO\"\n\n\u041a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u0440\u044f\u0434\u043a\u0456\u0432 \u0456 \u0441\u0442\u043e\u0432\u043f\u0446\u0456\u0432 \u0432 \u0440\u044f\u0434\u043a\u0443 \u043c\u0430\u0442\u0440\u0438\u0446\u0456 \u043f\u043e\u0432\u0438\u043d\u043d\u0430 \u0431\u0443\u0442\u0438 \u0432 \u043c\u0435\u0436\u0430\u0445 \u0432\u0456\u0434 $2$ \u0434\u043e $100$\n\nSample Input 1\n\n3\n1 3\n4 3\n7 3\n\nSample Output 1\n\nYES\nYES\nNO\n\nSample Input 2\n\n4\n2 3\n3 3\n3 3\n3 3\n\nSample Output 2\n\nYES\nNO\nNO\nNO\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n10 3\") == \"YES\\n4 2 4\"\n\"\"\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == '4\\n55\\n15000000000000000\\n51'\n\nassert solution('4\\n1 1 1\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\n\nassert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\n\nassert solution('4\\n2 3 4\\n2 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\n\nassert solution('4\\n2 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\n\n\"\"\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"4\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n\"\"\") == \"\"\"4\n55\n15000000000000000\n51\"\"\"\n\nsolution(\"\"\"4\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n\"\"\") == \"\"\"4\n55\n15000000000000000\n51\"\"\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\""
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nprint(\"Passed!\")"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 3\") == \"4\"\nassert solution(\"1 10 100\") == \"100\"\nassert solution(\"10000000000000000 10000000000000000 10000000000000000\") == \"100\"\nassert solution(\"23 34 45\") == \"52\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\n\"\"\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == '4\\n55\\n15000000000000000\\n51'\n\"\"\""
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3 4\\n1 10 100') == '4\\n55\\n15000000000000000\\n51'\nassert solution('1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\n\n\"\"\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 10 aa') == 1\nassert solution('6 10 abcbac') == 1\nassert solution('3 4 aa') == 2\nassert solution('2 2 ababa') == 0\nassert solution('4 8 ecbedececacbcbccbdec') == 4\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'a'\nassert solution('aab') == 'aba'\nassert solution('aabb') == 'abab'\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\nabb\") == 3\nassert solution(\"2 1\\nabb\") == 1\nassert solution(\"1 1\\nabb\") == 0\nassert solution(\"1 2\\nabb\") == 2\nassert solution(\"1 1\\nabb\") == 0\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3\\n\"\n\"abcbac\\n\"\n\"3 6\\n\"\n\"aaa\\n\"\n\"7 1000\\n\"\n\"abczgyo\\n\"\n\"5 4\\n\"\n\"ababa\\n\"\n\"20 10\\n\"\n\"aaebdbabdbbddaadaadc\\n\") == \"6\\n3\\n5\\n4\\n15\\n10\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcbac\") == 3\nassert solution(\"aaa\") == 3\nassert solution(\"abczgyo\") == 4\nassert solution(\"ababa\") == 4\nassert solution(\"ecbedececacbcbccbdec\") == 10\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"5 4\\n\"\n\"aaba\\n\"\n\"3 6\\n\"\n\"aaaa\\n\"\n\"20 10\\n\"\n\"ecbedececacbcbccbdec\\n\"\n) == '4'\nassert solution(\n\"6 3\\n\"\n\"abcbac\\n\"\n\"3 6\\n\"\n\"aaa\\n\"\n\"7 1000\\n\"\n\"abczgyo\\n\"\n\"5 4\\n\"\n\"ababa\\n\"\n\"20 10\\n\"\n\"aaebdbabdbbddaadaadc\\n\"\n) == '6'\nassert solution(\n\"6 3\\n\"\n\"abcbac\\n\"\n\"3 6\\n\"\n\"aaa\\n\"\n\"7 1000\\n\"\n\"abczgyo\\n\"\n\"5 4\\n\"\n\"ababa\\n\"\n\"20 10\\n\"\n\"aaebdbabdbbddaadaadc\\n\"\n) == '5'\nassert solution(\n\"6 3\\n\"\n\"abcbac\\n\"\n\"3 6\\n\"\n\"aaa\\n\"\n\"7 1000\\n\"\n\"abczgyo\\n\"\n\"5 4\\n\"\n\"ababa\\n\"\n\"20 10\\n\"\n\"aaebdbabdbbddaadaadc\\n\"\n) == '3'\n\n\n\"\"\"\n\n\nfrom itertools import permutations"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3\\nabcbac\") == \"6\"\nassert solution(\"3 6\\naaa\") == \"3\"\nassert solution(\"7 1000\\nabczgyo\") == \"7\"\nassert solution(\"5 4\\nababa\") == \"4\"\nassert solution(\"20 10\\naaebdbabdbbddaadaadc\") == \"15\"\n\"\"\"\n\nimport string"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3\\nabcbac\") == \"6\"\nassert solution(\"3 6\\naaa\") == \"3\"\nassert solution(\"7 1000\\nabczgyo\") == \"7\"\nassert solution(\"5 4\\nababa\") == \"4\"\nassert solution(\"20 10\\naaebdbabdbbddaadaadc\") == \"15\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\\n\") == \"6\\n3\\n5\\n4\\n15\\n10\"\n\n-----Problem-----\n\n\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u0443\u043a\u0432 \u0438 \u0441\u043b\u043e\u0432 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u0432 \u0432\u0438\u0434\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430?\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 1. \u041f\u043e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0438 \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0435\u043c, \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0440\u0435\u0448\u0438\u0442\u044c \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 2. \u0422\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0434\u043d\u043e \u0441\u043b\u043e\u0432\u043e \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0443, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0441\u043b\u043e\u0432\u0430, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 3. \u0424\u0430\u0439\u043b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0430\u0446\u0438\u044e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0441\u0442\u0440\u043e\u043a, \u043a\u0430\u0436\u0434\u0430\u044f \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 4. \u0421\u043b\u043e\u0432\u0430 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435 \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437, \u0442\u0430\u043a \u043a\u0430\u043a \u0434\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043b\u043e\u0432 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438.\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 5. \u0421\u043b\u043e\u0432\u043e\u043c \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c, \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432.\n\nimport sys"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 abcbac\") == \"6\"\nassert solution(\"3 6 aa\") == \"3\"\nassert solution(\"7 1000 abczgyo\") == \"7\"\nassert solution(\"5 4 ababa\") == \"4\"\nassert solution(\"20 10 aaebdbabdbbddaadaadc\") == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"YES\\n1 3 5\"\nassert solution(\"1\\n5 2\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"NO\"\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import accumulate"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('3\\n5 3\\n7 18 3 14 1') == 'YES\\n1 3 5'\nassert solution('3\\n5 4\\n7 18 3 14 1') == 'NO'\nassert solution('3\\n5 3\\n7 17 3 14 1') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('3 3\\n7 18 3 14 1') == 'YES\\n1 3 5'\n\"\"\"\n\nimport sys\n\nfrom typing import List"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"YES\\n1 3 5\"\nassert solution(\"5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 10 2\") == \"NO\"\nassert solution(\"5 4\\n5 10 3 6 2\\n2 5 8 7 1\\n5 5\\n7 1 4 5 5\\n3 3\\n2 5 10 9 8\\n5 5\\n7 2 5 2 9\") == \"YES\\n1 3 5 1 4\"\n\"\"\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n3\\n7 18 3 14 1') == 'YES\\n1 3 5'\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import accumulate\nfrom math import gcd"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(example1) == example2\nassert solution(example3) == example4"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\\n5 6\\n1 2 3\") == \"YES\\n1 3 5\""
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 18 3 14 1\") == \"YES\\n1 3 5\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"YES\\n1 3 5\"\nassert solution(\"7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"NO\"\n\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n3 1 4 1\\n') == 'NO'\nassert solution('6 2\\n1 2 3 4 5 6') == 'YES'\nassert solution('2 3\\n1 2\\n3 4') == 'NO'\n\"\"\""
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('111111111111111111111111111111101') == '3221225471'\nassert solution('110011001100110011') == '3221225471'\nassert solution('11111111111111111111111111101') == '3221225471'\nassert solution('111011111111111111111111111101') == '3221225471'\nassert solution('1110111101111111111111111111101') == '3221225471'\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11100101110010011111111111011011') == 3221225471\nassert solution('110011101110011011101101110011110111101110111011011') == 964176192\nassert solution('110011101110011011101101110011110111101110111011011') == 964176192\nassert solution('110011101110011011101101110011110111101110111011011') == 964176192\nassert solution('110011101110011011101101110011110111101110111011011') == 964176192\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n'111111111111111111111111111111101') == 3221225471\nassert solution(\n'111111111111111111111111111111110') == 3221225472\nassert solution(\n'1110111111111111111111111111111110') == 3221225711\n\"\"\""
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"110110110110011100111001110110111001100\") == \"1100110011001110110110111001110111101110010011001101\"\nassert solution(\"111011110111111011111111111111101111010\") == \"10111111111111110111111111111111101111011100110011111111111111\"\nassert solution(\"111011110111111011111111111111101111010\") == \"10111111111111110111111111111111101111011100110011111111111111\"\nassert solution
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1110101101110011100111011100111011110111001110111101110011100111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101111011100111011110111001110111101110011101"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1101101111\") == \"3221225471\"\nassert solution(\"11001101111\") == \"3221225471\"\nassert solution(\"1110110111\") == \"3221225471\"\nassert solution(\"1110110110\") == \"3221225470\"\n\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.map = {\n            '0': '0',\n            '1': '1',\n            '2': '10',\n            '3': '11',\n            '4': '100',\n            '5': '101',\n            '6': '110',\n            '7': '111',\n            '8': '1000',\n            '9': '1001',\n            'A': '1010',\n            'B': '1011',\n            'C': '1100',\n            'D': '1101',\n            'E': '1110',\n            'F': '1111',\n        }\n        \n    def reverse_bits(self, n: str) -> str:\n        result = self.convert_to_binary(n)\n        return result[::-1]\n        \n    def convert_to_binary(self, n: str) -> str:\n        binary = \"\"\n        for i in n:\n            binary += self.map[i]\n        return binary"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11111111111111111111111111111101\") == \"3221225471\"\nassert solution(\"1110111111111111111111111111010\") == \"3221225471\"\nassert solution(\"11111111111111111111111111111100\") == \"3221225471\"\nassert solution(\"11111111111111111111111111111101\") == \"3221225471\"\nassert solution(\"11111111111111111111111111111110\") == \"3221225471\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution( '00000010100101000001111010011100' ) == '964176192'\nassert solution( '111111111111111111111111111111101' ) == '3221225471'\n\n\"\"\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11101101101111011111111111101') == '101101101101111011111111111111'\nassert solution('11111111111111111111111111111101') == '10111111111111111111111111111111'\nassert solution('111111111111111111111111111111101') == '10111111111111111111111111111111'\nassert solution('111111111111111111111111111111101') == '10111111111111111111111111111111'\nassert solution('111111111111111111111111111111101') == '10111111111111111111111111111111'\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == [[1]]\nassert solution('3') == [[1], [1, 1], [1, 2, 1]]\nassert solution('5') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        result = [[1]]\n        if numRows == 1:\n            return [[1]]\n        elif numRows == 2:\n            return [[1], [1, 1]]\n        elif numRows > 2:\n            result = [[1], [1, 1]]\n            for i in range(2, numRows):\n                new_row = [1]\n                last_row = result[i - 1]\n                last_row_len = len(last_row)\n                for j in range(last_row_len):\n                    if j == 0 or j == last_row_len - 1:\n                        new_row.append(1)\n                    else:\n                        new_row.append(last_row[j] + last_row[j - 1])\n                result.append(new_row)\n        return result\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == [\n    [1],\n    [1,1],\n    [1,2,1],\n    [1,3,3,1],\n    [1,4,6,4,1]\n]\n\"\"\""
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '1\\n1 1\\n1 2 1\\n1 3 3 1\\n1 4 6 4 1'\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\nassert solution('0') == [[]]\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == [\n    [1],\n    [1,1],\n    [1,2,1],\n    [1,3,3,1],\n    [1,4,6,4,1]\n]"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3) == [[1], [1, 1], [1, 2, 1]]\nassert solution(5) == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n\"\"\"\nfrom typing import List\n\nfrom utils import checkValue\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == '[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]'\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\nassert solution('6') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\nassert solution('7') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1]]\nassert solution('10') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1], [1, 7, 21, 35, 35, 21, 7, 1], [1, 8, 28, 56, 70, 56, 28, 8, 1], [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]]\n\n\"\"\""
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == [ [1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1]]\n\n\"\"\""
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"2\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\nbrian-23@hackerrank.com\"\"\") == [ \"brian-23@hackerrank.com\", \"britts_54@hackerrank.com\" ]\nassert solution(\"\"\"5\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\nbrian-23@hackerrank.com\nbrian-23@hackerrank.com\"\"\") == [ \"brian-23@hackerrank.com\", \"britts_54@hackerrank.com\", \"lara@hackerrank.com\" ]"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"2\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\"\"\") == ['brian-23@hackerrank.com', 'britts_54@hackerrank.com']\n\n======Test Case 1======\n\nInput\n2\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nOutput\n['brian-23@hackerrank.com', 'britts_54@hackerrank.com']\n\n======Test Case 2======\n\nInput\n2\naljndfkajsdfljkasdjf@gmail.com\nalskdfjskdjafjskdjafjsk@gmail.com\n\nOutput\n['aljndfkajsdfljkasdjf@gmail.com']\n\n======Test Case 3======\n\nInput\n0\n\nOutput\n[]\n\n======Test Case 4======\n\nInput\n3\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\nOutput\n['britts_54@hackerrank.com', 'brian-23@hackerrank.com', 'lara@hackerrank.com']\n\"\"\""
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(raw_input()) == result\n=====Sample Input 0=====\n3\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n\n=====Sample Output 0=====\n['brian-23@hackerrank.com', 'britts_54@hackerrank.com', 'lara@hackerrank.com']\n\n=====Sample Input 1=====\n4\na@a.com\naa@aa.com\naaa@aaa.com\naaaa@aaaa.com\na@a.com\na@a.com\na@a.com\na@a.com\na@a.com\n\n=====Sample Output 1=====\n['aa@aa.com', 'a@a.com', 'aaaa@aaaa.com', 'a@a.com', 'a@a.com', 'a@a.com', 'a@a.com', 'a@a.com']\n\"\"\"\nfrom itertools import product"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nrich@google.com\\njoe@google.com\\neverybody@google.com\") == \n    [\"joe@google.com\", \"rich@google.com\", \"everybody@google.com\"]\n\nassert solution(\"4\\naje@google.com\\nrich@google.com\\njoe@google.com\\neverybody@google.com\") == \n    [\"aje@google.com\", \"joe@google.com\", \"rich@google.com\", \"everybody@google.com\"]\nassert solution(\"2\\nAje@google.com\\nrich@google.com\") == \n    [\"Aje@google.com\", \"rich@google.com\"]\nassert solution(\"1\\nAje@google.com\") == \n    [\"Aje@google.com\"]\n\nassert solution(\"4\\njoe@google.com\\nrich@google.com\\njoe@google.com\\neverybody@google.com\") == \n    [\"joe@google.com\", \"rich@google.com\", \"everybody@google.com\"]\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 qwer@gmail.com qwer@gmail.com qwer@yahoo.com qwer@msn.com qwer@hotmail.com') == ['qwer@gmail.com', 'qwer@hotmail.com']\nassert solution('2 qwer@hotmail.com qwer@yahoo.com qwer@hotmail.com qwer@msn.com qwer@gmail.com') == ['qwer@hotmail.com', 'qwer@gmail.com']\nassert solution('2 qwer@hotmail.com qwer@yahoo.com qwer@hotmail.com qwer@msn.com qwer@yahoo.com qwer@gmail.com') == ['qwer@hotmail.com', 'qwer@yahoo.com', 'qwer@gmail.com']\nassert solution('0 qwer@hotmail.com qwer@yahoo.com qwer@hotmail.com qwer@msn.com qwer@yahoo.com qwer@gmail.com') == ['qwer@hotmail.com', 'qwer@yahoo.com', 'qwer@gmail.com']\nassert solution('0 qwer@hotmail.com qwer@yahoo.com qwer@hotmail.com qwer@msn.com qwer@yahoo.com qwer@gmail.com qwer@yahoo.com qwer@msn.com qwer@yahoo.com qwer@gmail.com') == ['qwer@hotmail.com', 'qwer@yahoo.com', 'qwer@gmail.com']\n\n====== Test Case 1 ======\nFrom: HW1_Hangseng_Lee on May 10, 2020\n\n1 qwer@gmail.com\n2 qwer@hotmail.com\n0 qwer@hotmail.com\n1 qwer@yahoo.com\n0 qwer@hotmail.com\n1 qwer@yahoo.com\n2 qwer@msn.com\n1 qwer@yahoo.com\n0 qwer@hotmail.com\n2 qwer@gmail.com\n1 qwer@yahoo.com\n0 qwer@hotmail.com\n0 qwer@gmail.com\n2 qwer@msn.com\n2 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n2 qwer@yahoo.com\n\nFrom: HW1_Hangseng_Lee on May 14, 2020\n\n2 qwer@gmail.com\n2 qwer@hotmail.com\n0 qwer@hotmail.com\n2 qwer@yahoo.com\n0 qwer@hotmail.com\n2 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n0 qwer@hotmail.com\n2 qwer@gmail.com\n1 qwer@yahoo.com\n0 qwer@hotmail.com\n0 qwer@gmail.com\n2 qwer@msn.com\n2 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n2 qwer@yahoo.com\n\nFrom: HW1_Hangseng_Lee on May 17, 2020\n\n0 qwer@hotmail.com\n0 qwer@gmail.com\n0 qwer@yahoo.com\n0 qwer@msn.com\n0 qwer@yahoo.com\n0 qwer@hotmail.com\n0 qwer@yahoo.com\n0 qwer@msn.com\n0 qwer@yahoo.com\n0 qwer@hotmail.com\n0 qwer@gmail.com\n0 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n1 qwer@hotmail.com\n1 qwer@yahoo.com\n1 qwer@hotmail.com\n1 qwer@gmail.com\n1 qwer@yahoo.com\n\n=====Test Case 2=====\nFrom: HW1_Hangseng_Lee on May 17, 2020\n\n1 qwer@gmail.com\n1 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n1 qwer@hotmail.com\n1 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n1 qwer@hotmail.com\n1 qwer@gmail.com\n1 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n1 qwer@hotmail.com\n1 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n1 qwer@hotmail.com\n1 qwer@yahoo.com\n2 qwer@gmail.com\n1 qwer@yahoo.com\n2 qwer@gmail.com\n1 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n1 qwer@hotmail.com\n2 qwer@gmail.com\n1 qwer@yahoo.com\n1 qwer@hotmail.com\n1 qwer@gmail.com\n1 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n1 qwer@hotmail.com\n1 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n1 qwer@hotmail.com\n1 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n1 qwer@hotmail.com\n2 qwer@gmail.com\n1 qwer@yahoo.com\n2 qwer@gmail.com\n1 qwer@yahoo.com\n2 qwer@gmail.com\n2 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n2 qwer@msn.com\n1 qwer@yahoo.com\n2 qwer@yahoo.com\n1 qwer@hotmail.com\n2 qwer@gmail.com\n1 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n1 qwer@hotmail.com\n1 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n1 qwer@hotmail.com\n2 qwer@gmail.com\n1 qwer@yahoo.com\n2 qwer@gmail.com\n1 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n1 qwer@hotmail.com\n1 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n1 qwer@hotmail.com\n1 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n1 qwer@hotmail.com\n1 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n1 qwer@hotmail.com\n1 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n1 qwer@hotmail.com\n1 qwer@yahoo.com\n1 qwer@msn.com\n1 qwer@yahoo.com\n1 qwer@hotmail.com\n1 qwer"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 abc@naver.com\") == ['abc@naver.com']\nassert solution(\"2 qwerty@google.com qwerty@google.com\") == ['qwerty@google.com']\nassert solution(\"3 qwerty@gmail.com qwerty@google.com qwerty@google.com\") == ['qwerty@google.com', 'qwerty@gmail.com']\nassert solution(\"4 qwerty@gmail.com qwerty@google.com qwerty@google.com qwerty@gmail.com\") == ['qwerty@gmail.com', 'qwerty@google.com', 'qwerty@google.com', 'qwerty@gmail.com']\n\nprint(\"Success\")\n\n=============\n\nimport re"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\nrich-che@leetcode.com\\nrich@leetcode.com\") == [\"rich@leetcode.com\", \"rich-che@leetcode.com\"]\n======="
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\nrich@gmail.com\\n\") == [\"rich@gmail.com\"]\nassert solution(\"2\\nrich@gmail.com\\nsteve@gmail.com\\n\") == [\"rich@gmail.com\", \"steve@gmail.com\"]\n\"\"\"\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\nJeff, 3@amazon.com\\nACME @ pypi.org') == ['Jeff@amazon.com', 'ACME@pypi.org'], 'Wrong answer'\nassert solution('1\\nJ<i@ru\\nJava\\nJava is the best programming language') == ['Ji@ru', 'Java', 'Java is the best programming language'], 'Wrong answer'\nassert solution('2\\nJ*i@ru\\nJava\\nJava is the best programming language') == ['J*i@ru', 'Java', 'Java is the best programming language'], 'Wrong answer'\nassert solution('1\\nJ*i@ru\\nJava\\nJava is the best programming language') == ['J*i@ru', 'Java', 'Java is the best programming language'], 'Wrong answer'\nassert solution('2\\nJ*i@ru\\nJava\\nJava is the best programming language') == ['J*i@ru', 'Java', 'Java is the best programming language'], 'Wrong answer'\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\\\npop@gamil.com\\\\ngmail.com\") == ['gamil.com','mail.com']\n\"\"\"\nimport re\n\nn = int(input())\npattern = r'[\\w\\-_]+@[\\w]+\\.[\\w]{2,3}'\nemail_list = []\nfor _ in range(n):\n    email = input()\n    email_list.append(email)\n\nemail_list = list(filter(lambda email: re.match(pattern, email), email_list))\nemail_list.sort()\nprint(email_list)\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == [0, 1, 1, 8]\nprint(solution(\"10\"), [0, 1, 1, 8, 27, 64, 125, 216, 343, 512])\n\n>>>\n0\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512]\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == [0, 1, 1, 8]\n=====Testcases=====\nYou can find them in the test folder.\n\n=====Solution=====\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == [0, 1, 1, 8, 27, 64, 125, 216, 343, 512]\n\nassert solution('4') == [0, 1, 1, 8]\n\nassert solution('5') == [0, 1, 1, 8, 27]\n=====Constraints=====\n1 <= N <= 1000\n\n=====Test Case Format=====\nInput 1:\n2\n\nInput 2:\n5\n\n=====Sample Test Case 1=====\nInput:\n1\nOutput:\n[]\n\n=====Sample Test Case 2=====\nInput:\n2\nOutput:\n[0, 1, 1, 8]\n\n=====Sample Test Case 3=====\nInput:\n3\nOutput:\n[0, 1, 1, 8, 27]\n\n=====Sample Test Case 4=====\nInput:\n4\nOutput:\n[0, 1, 1, 8, 27]\n\n=====Sample Test Case 5=====\nInput:\n5\nOutput:\n[0, 1, 1, 8, 27]\n\n======================================================================================================================================================================\n\nWrite a function fibonacci(n) to find the nth Fibonacci number. The first two Fibonacci numbers are 0 and 1.\n\nNote:\n\n0th Fibonacci number is 0\n1st Fibonacci number is 1\n2nd Fibonacci number is 1\n3rd Fibonacci number is 2\n4th Fibonacci number is 3\n5th Fibonacci number is 5\n6th Fibonacci number is 8\n7th Fibonacci number is 13\n8th Fibonacci number is 21\n9th Fibonacci number is 34\n10th Fibonacci number is 55\n11th Fibonacci number is 89\n12th Fibonacci number is 144\n13th Fibonacci number is 233\n14th Fibonacci number is 377\n15th Fibonacci number is 610\n16th Fibonacci number is 987\n17th Fibonacci number is 1597\n18th Fibonacci number is 2584\n19th Fibonacci number is 4181\n20th Fibonacci number is 6765\n\nSample Input 1:\n0\nSample Output 1:\n0\n\nSample Input 2:\n5\nSample Output 2:\n5\n\nSample Input 3:\n9\nSample Output 3:\n34\n\n========================================="
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == [0, 1, 1, 8, 27]\nprint(solution(\"5\"))\n=====Solution=====\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == [1, 8, 27, 64]\nassert solution('5') == [1, 8, 27, 64, 125]"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == [0, 1, 1, 8]\nassert solution(\"7\") == [0, 1, 1, 8, 27, 64, 125]\n\"\"\"\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == [0, 1, 1, 8]\n\n=====Test Case 2=====\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1\n3\n10\n5\n'''.strip()) == [1, 8, 125, 125, 40320]\n=====Test Case=====\nTest case 1\nInput\n\n1\nOutput\n\n[1]\nTest case 2\nInput\n\n5\nOutput\n\n[1, 8, 125, 125, 40320]\nTest case 3\nInput\n\n10\nOutput\n\n[1, 8, 125, 125, 40320, 68719476736, 1379312288, 408330688, 4613732, 29229728]\n\n=====Solution====="
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '0'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '8'\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == [0, 1, 1, 8]\nprint(solution('4'))\n\nThe solution is correct if the output for the given input is correct.\n\n'''"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 2\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 2\n=====Test Case 1=====\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 2\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Bishal</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 2\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Bishal</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Akash</author>\n        <question type='medium'>XML 3</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 3\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Bishal</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Akash</author>\n        <question type='medium'>XML 3</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Divyanshu</author>\n        <question type='easy'>XML 4</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 3\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 2\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 2\n\"\"\"\n\n\"\"\"\n\n=====\n\"\"\""
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 2\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 2\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 3</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 3\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 3</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 4</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 4\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 2\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 1\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 3</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\") == 2\n\"\"\")"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n'''\n) == 1\n\nassert solution(\n'''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n'''\n) == 2\n\nassert solution(\n'''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n'''\n) == 3\n'''\nimport xml.etree.ElementTree as etree\n\nmaxdepth = 0\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 1\nassert solution(\n'''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>''') == 3\nassert solution(\n'''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>''') == 2\n\n=====Test Case 2=====\n\nSample Input\n\n4\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\nSample Output\n\n2\n\nExplanation\n\nHere, the root is the feed tag. So, the maximum depth is 1.\n\nThe maximum depth of the first subelement of the root is also 1. In the XML document, there are two nested entries. So, the maximum depth of the second subelement of the root element is also 1.\n'''\n\nimport xml.etree.ElementTree as etree\n\nmaxdepth = -1\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 3\n\"\"\")\n\nlines = stdin.splitlines()\n\nassert solution(lines[0]) == 3\n\nassert solution(lines[1]) == 1\n\nassert solution(lines[2]) == 0\n\nprint(\"Successfully tested.\")"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == 1\n\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == 2\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == 2\n\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == 0\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == 0"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 1, \"Test 1 Failed\"\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 2, \"Test 2 Failed\"\n'''\nNote:\nThe first line  of the XML document, the one that starts the <feed> element, was not counted as a nesting.\nThe max nesting is obtained by counting the nesting levels.\n\nInput Format\nThe first line contains N, the number of lines in the XML document.\nThe next N lines follow containing the XML document.\n\nOutput Format\nOutput a single line, the integer value of the maximum level of nesting in the XML document.\n\nSample Input\nCopy\n9\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nCopy\n9\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nCopy\n9\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nCopy\n9\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nCopy\n9\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nCopy\n9\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nCopy\n9\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nCopy\n9\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nCopy\n9\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nCopy\n9\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nCopy\n9\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nCopy\n9\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nCopy\n9\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nCopy\n9\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nCopy\n9\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nCopy\n9\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nCopy\n9\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nCopy\n9\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7805236942\") == 'YES\\n'\nassert solution(\"8805236942\") == 'YES\\n'\nassert solution(\"7805236941\") == 'NO\\n'\n=====Test Case 1=====\nInput\n2\n7805236942\n8805236942\nOutput\nYES\nNO\n\n=====Test Case 2=====\nInput\n1\n8905236942\nOutput\nNO\n\n=====Test Case 3=====\nInput\n1\n8905236941\nOutput\nNO\n'''\nimport re\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('(123) 456-7890') == 'YES'\nassert solution('(123)456-7890') == 'NO'\nassert solution('(123)456-7890') == 'YES'\nassert solution('(123)456-7890') == 'NO'\nassert solution('(123)456-7890') == 'YES'\n\n\"\"\"\n\nimport re\n\nn = int(input())\nfor i in range(n):\n    try:\n        "
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"07895462130\") == \"YES\"\nassert solution(\"93476238994\") == \"YES\"\nassert solution(\"07895461231\") == \"NO\"\nassert solution(\"93476238995\") == \"NO\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''6\n        9587456281\n        1252478965\n        9442830183\n        5661855860\n        92830183\n        6432898890\n        ''') == 'YES\\nNO\\nYES\\nYES\\nNO\\nYES'\n\n=====Test 4=====\nYour task is to complete the code in the editor. The function accepts string as parameter.\n\nInput Format\nThe first line of input contains an integer n, the number of lines in the test case.\nThe next n lines contains some strings.\n\nConstraints\n1<=n<=7\n1<=len(string)<=7\n\nOutput Format\nFor the given n lines, print YES if the string is a valid mobile number, and NO if it is not on separate lines. Do not print the quotes.\n\nSample Input\n2\n9587456281\n1252478965\nSample Output\nYES\nNO\n\n=====Test 2=====\nYour task is to complete the code in the editor below. The function accepts a single string as parameter.\n\nConstraints\n1\u2264len(string)\u226415\n\nOutput Format\nPrint YES if the string is a valid mobile number, and NO if it is not on separate lines. Do not print the quotes.\n\nSample Input 0\n9587456281\nSample Output 0\nYES\n\n=====Test 1=====\nYour task is to complete the code in the editor below. The function accepts a single string as parameter.\n\nConstraints\n1\u2264len(string)\u226415\n\nOutput Format\nPrint YES if the string is a valid mobile number, and NO if it is not on separate lines. Do not print the quotes.\n\nSample Input 1\n9587456281\nSample Output 1\nYES\n\n=====Test 3=====\nYour task is to complete the code in the editor below. The function accepts a single string as parameter.\n\nConstraints\n1\u2264len(string)\u226415\n\nOutput Format\nPrint YES if the string is a valid mobile number, and NO if it is not on separate lines. Do not print the quotes.\n\nSample Input 2\n9587456281\nSample Output 2\nYES"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"71234567890\") == \"YES\\n\"\nassert solution(\"9012 345 678\") == \"YES\\n\"\nassert solution(\"9\") == \"NO\\n\"\nassert solution(\"(123) 456-7890\") == \"YES\\n\"\nassert solution(\"123456789a\") == \"NO\\n\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"7000000001\") == \"YES\"\nassert solution(\n\"70001234567\") == \"NO\"\nassert solution(\n\"8999999999\") == \"YES\"\nassert solution(\n\"+1-800-724-6837\") == \"NO\"\nassert solution(\n\"1212121212\") == \"NO\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('712345678') == \"YES\"\nassert solution('933123456') == \"YES\"\nassert solution('9331234567') == \"YES\"\nassert solution('12345678') == \"NO\"\nassert solution('912345678') == \"NO\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7123456789') == \"YES\\n\"\nassert solution('91234-56789') == \"YES\\n\"\nassert solution('81234-56789') == \"NO\\n\"\nassert solution('7') == \"NO\\n\"\nassert solution('3') == \"NO\\n\"\n\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('(234) 567-890') == 'YES'\nassert solution('(001) 234-567') == 'NO'\nassert solution('(098) 123 4567') == 'NO'\n\n==Test Case==\nTest 1\nInput\n\n(123) 456-7890\n\nOutput\n\nYES\n\nTest 2\nInput\n\n(111) 111-1111\n\nOutput\n\nNO\n\nTest 3\nInput\n\n(777) 666666\n\nOutput\n\nYES\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('77777777777') == 'YES'\nassert solution('777777777777') == 'NO'\nassert solution('93749832938') == 'YES'\nassert solution('9123456789') == 'NO'\nassert solution('9352823458') == 'YES'\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 3 5 6\\n3\\n1 2 6 4') == '2 4 6'\n\n=====Main Function=====\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n\" + \"1 2 3 4\" + \"\\n\" + \"3\\n\" + \"2 4 6\") == \"1 5\""
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 3 6 5\\n3\\n2 3 5') == '5\\n6'\nassert solution('4\\n2 3 6 5\\n2\\n3') == '5\\n6'\nassert solution('4\\n2 3 6 5\\n4\\n2 3 5') == '5\\n6'\nassert solution('4\\n2 3 6 5\\n6\\n2 3 5') == '5\\n6'\nassert solution('4\\n2 3 6 5\\n4\\n3') == '5\\n6'\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 4 6 8\\n4\\n2 3 6 8 9') == '6 9'\nassert solution('5\\n2 4 6 8\\n4\\n2 3 6 7 9') == '3 7 9'\n\"\"\""
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 4 6 8\\n3\\n1 3 5\") == \"2\\n5\\n7\"\n\"\"\"\n\na = input()\nlis = list(map(int,input().split()))\nb = input()\nlis2 = list(map(int,input().split()))\n\nmyset = set(lis)\nmyset2 = set(lis2)\nmyset3 = myset.difference(myset2)\nmyset3 = myset3.union(myset2)\nmyset3 = sorted(list(myset3))\n\nfor i in myset3:\n    print (i)\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 3 6 5\\n3\\n4 5 6') == '2\\n6\\n'\nassert solution('4\\n2 3 6 5\\n3\\n2 3 6') == '4\\n6\\n'\nassert solution('4\\n2 3 6 5\\n4\\n2 3 6') == '4\\n'\nassert solution('5\\n1 2 3 4 5\\n4\\n2 4 6') == '1\\n3\\n5\\n'\nassert solution('5\\n1 2 3 4 5\\n5\\n2 3 4') == '1\\n3\\n4\\n'\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n\" \"1 2 3 4\" \"4\\n\" \"2 3 5\") == \"1 5\"\nassert solution(\"5\\n\" \"1 2 3 5\" \"5\\n\" \"2 3 6\") == \"1 6\"\n\"\"\""
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 4 6 8\\n4\\n2 4 11 12') == '6\\n8\\n11\\n12'\nassert solution('3\\n2 4 6\\n4\\n2 4 11') == '6\\n8\\n11'\nassert solution('4\\n2 4 6 8\\n4\\n2 4 11 12') == '6\\n8\\n11\\n12'\n\n>>>>>>> 12d3d19c921b1595ff2d9c6fa2338f90d1239de\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''7\n1 2 3 4 5 6 7\n3\n9 8 5 6 2 3 1''') == '''8\n9\n6\n2\n3\n1'''\nassert solution('''4\n2 4 6 8\n4\n2 4 6 8''') == '''6\n4\n2\n8\n6\n4\n6\n2\n8\n'''\nassert solution('''5\n1 2 3 4 5\n5\n9 8 5 6 2''') == '''8\n6\n2\n'''\nassert solution('''5\n1 2 3 4 5\n5\n9 8 5 6 2\n''') == '''9\n6\n2\n'''\nassert solution('''1\n1\n1\n''') == '''1\n'''\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10 11 12') == '1 5 6 7 8 9 10 12 11'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 13') == '1 5 6 7 8 9 10 11 13 10 12'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13') == '1 5 6 7 8 9 10 11 12 13 10 12'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14') == '1 5 6 7 8 9 10 11 12 13 14 10 12'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 14 15') == '1 5 6 7 8 9 10 11 12 14 15 10 12'\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == \"78.00\"\nassert solution(\"1\\nMARKS\\nCLASS\\nNAME\\nID\\n\") == \"67.50\"\nassert solution(\"2\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == \"67.50\"\nassert solution(\"1\\nMARKS\\nCLASS\\nNAME\\nID\\n\") == \"67.50\"\n\n=====Test Case=====\nTest1\nInput\n3\nID\nMARKS\nCLASS\n1\n1\n2\n2\n2\n3\n1\n3\n\nOutput\n78.00\n\nTest2\nInput\n4\nMARKS\nCLASS\n1\n2\n2\n3\n2\n3\n1\n3\n\nOutput\n67.50\n\nTest3\nInput\n5\nMARKS\nCLASS\n1\n2\n2\n3\n2\n3\n1\n3\n\nOutput\n67.50\n\nTest4\nInput\n4\nMARKS\nCLASS\n1\n1\n2\n3\n\nOutput\n100.00\n\nTest5\nInput\n2\nMARKS\nCLASS\n1\n1\n\nOutput\n100.00\n\"\"\""
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n5') == ''\nassert solution('1\\n5\\n') == ''\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == \"78.00\"\nassert solution(\"2\\nMARKS\\nCLASS\\nNAME\\nID\\n\") == \"67.50\"\nassert solution(\"3\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == \"67.50\"\n\n=====Sample Test Cases=====\nInput 1:\n3\nID\nMARKS\nCLASS\n1\nID\nMARKS\nCLASS\n1\nMARKS\nID\n1\nCLASS\n1\nMARKS\n1\n2\n3\nOutput 1:\n78.00\nInput 2:\n2\nMARKS\nCLASS\n1\n2\n3\nOutput 2:\n67.50\nInput 3:\n4\nID\nMARKS\nCLASS\nNAME\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nOutput 3:\n67.50\n\"\"\""
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\nID,MARKS,CLASS,NAME\\n1,56,12,Jone\\n2,90,12,Jill\\n3,83,14,Jack\\n4,65,16,Jill\\n5,45,16,Jill\\n') == '79.00'\nassert solution('6\\nID,CLASS,MARKS,NAME\\n1,12,56,Jone\\n2,12,90,Jill\\n3,14,83,Jack\\n4,16,65,Jill\\n5,16,45,Jill\\n') == '67.50'"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == \"78.00\"\n\n\"\"\"\n\n\n\nfrom collections import namedtuple\n\nimport re"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\nID\\nMARKS\\nCLASS\\nNAME\\n') == '78.00'\nassert solution('2\\nMARKS\\nCLASS\\nNAME\\nID\\n') == '67.50'\n\n=====Sample Test Cases=====\nSample Input\n\n4\nID\nMARKS\nCLASS\nNAME\n12345\n78 90\n1 A\n2 B\n3 C\n90 80\n80 70\n90 100\nSample Output\n\n74.00\n'''\nfrom collections import namedtuple\nn = int(input())\nfields = input().split()\ntotal = 0\nStudent = namedtuple('Student', fields)\nfor i in range(n):\n    # print(i)\n    # print(type(i))\n    # print(type(Student(i)))\n    # print(Student(i))\n    # print(Student(i))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    # print(type(Student(i)))\n    "
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\nID,MARKS,CLASS,NAME\\n1,90,2,JOE\\n2,83,2,JOE\") == '85.00'\nassert solution(\"1\\nMARKS,CLASS,NAME,ID\\n90,2,JOE,1\\n83,2,JOE,2\") == '85.00'\nassert solution(\"1\\nNAME,MARKS,CLASS,ID\\nJOE,90,2,1\\nJOE,83,2,2\") == '85.00'\nassert solution(\"2\\nID,MARKS,CLASS,NAME\\n1,90,2,JOE\\n2,83,2,JOE\\n3,80,2,JOE\\n4,90,2,JOE\\n5,80,2,JOE\") == '85.00'\n=====Notes=====\nThis is an open domain problem. The test cases are scaled to a domain you can assume.\nThere is no penalty for using additional data structures.\nData is guaranteed to be valid and in the expected format.\n\"\"\""
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\nID         MARKS      NAME       CLASS     \n1          97         Raymond    7         \n2          50         Steven     4         \n3          91         Adrian     9         \n4          72         Stewart    5         \n5          80         Peter      6   \n''') == '78.00'\nassert solution('''5\nMARKS      CLASS      NAME       ID        \n92         2          Calum      1         \n82         5          Scott      2         \n94         2          Jason      3         \n55         8          Glenn      4         \n82         2          Fergus     5\n''') == '82.00'\nassert solution('''5\nID         MARKS      NAME       CLASS     \n1          97         Raymond    7         \n2          50         Steven     4         \n3          91         Adrian     9         \n4          72         Stewart    5         \n5          80         Peter      6   \n''') == '80.00'\nassert solution('''5\nID         MARKS      NAME       CLASS     \n1          97         Raymond    7         \n2          50         Steven     4         \n3          91         Adrian     9         \n4          72         Stewart    5         \n5          80         Peter      6   \n''') == '80.00'\nassert solution('''5\nID         MARKS      NAME       CLASS     \n1          97         Raymond    7         \n2          50         Steven     4         \n3          91         Adrian     9         \n4          72         Stewart    5         \n5          80         Peter      6   \n''') == '80.00'\n\nTEMPLATE\ncollections.OrderedDict()\n\nBasically, OrderedDict is a dictionary that remembers the order of the keys that were inserted first.\nThe only difference between dict() and OrderedDict() is that dict() doesn\u2019t keep track of the order\nin which the keys were inserted, while OrderedDict does.\n\nExample\nCode 01\n>>> from collections import OrderedDict\n>>> OD = OrderedDict()\n>>> OD['a'] = 1\n>>> OD['b'] = 2\n>>> OD['c'] = 3\n>>> OD['d'] = 4\n>>> OD['e'] = 5\n>>> OD['f'] = 6\n>>> for k, v in OD.items():\n...     print k, v\n...\na 1\nb 2\nc 3\nd 4\ne 5\nf 6\n>>>\n\nCode 02\n>>> from collections import OrderedDict\n>>> OD = OrderedDict()\n>>> OD['a'] = 1\n>>> OD['b'] = 2\n>>> OD['c'] = 3\n>>> OD['d'] = 4\n>>> OD['e'] = 5\n>>> OD['f'] = 6\n>>> for k, v in OD.items():\n...     print k, v\n...\na 1\nb 2\nc 3\nd 4\ne 5\nf 6\n>>>\n\n=====Function Description=====\nOrderedDict()\nReturns a new dictionary that remembers the order in which the keys were first inserted.\n\nExample\nCode 01\n>>> from collections import OrderedDict\n>>> OD = OrderedDict()\n>>> OD['a'] = 1\n>>> OD['b'] = 2\n>>> OD['c'] = 3\n>>> OD['d'] = 4\n>>> OD['e'] = 5\n>>> OD['f'] = 6\n>>> for k, v in OD.items():\n...     print k, v\n...\na 1\nb 2\nc 3\nd 4\ne 5\nf 6\n>>>\n\nCode 02\n>>> from collections import OrderedDict\n>>> OD = OrderedDict()\n>>> OD['a'] = 1\n>>> OD['b'] = 2\n>>> OD['c'] = 3\n>>> OD['d'] = 4\n>>> OD['e'] = 5\n>>> OD['f'] = 6\n>>> for k, v in OD.items():\n...     print k, v\n...\na 1\nb 2\nc 3\nd 4\ne 5\nf 6\n>>>\n\n=====Problem Statement=====\nThe marketing team is spending way too much time typing in hashtags.\nLet's help them with our own Hashtag Generator!\n\nHere's the deal:\n\nIt must start with a hashtag (#).\nAll words must have their first letter capitalized.\nIf the final result is longer than 140 chars it must return false.\nIf the input or the result is an empty string it must return false.\nExamples\n\n\" Hello there thanks for trying my Kata\"  =>  \"#HelloThereThanksForTryingMyKata\"\n\"    Hello     World   \"                  =>  \"#HelloWorld\"\n\"\"                                        =>  false\n\n=====Input Format=====\nA string containing space separated words.\n\n=====Output Format=====\nA string containing the generated hashtag.\n\nhashtag('#CodeWars #TW') == '#CodeWars'\nhashtag('CodewArs') == '#CodewArs'\nhashtag('Codewars') == '#Codewars'\nhashtag('Codewars      ') == '#Codewars'\nhashtag('') == False\nhashtag('C#') == '#C#'\n\nTEMPLATE\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(open('input.txt').read()) == \"27.46\"\n\n=====Sample Input=====\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          80         Peter      6\n\nSample Output\n78.00\n\nExplanation\nMarks = [97, 50, 91, 72, 80]\nAverage = (97 + 50 + 91 + 72 + 80) / 5\n\n=====Test Case=====\nYou can find test cases in /tests/test_cases\n\n\"\"\"\n\nfrom collections import namedtuple\nimport os.path\nimport numpy as np\nfrom typing import List\n\nprint(os.getcwd())\n\npath = os.path.dirname(os.path.abspath(__file__))\nFile = os.path.join(path,'students.txt')\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\nID\\n21\\nMARKS\\n91\\nCLASS\\nVI\\nNAME\\nJohn\\n\") == \"69.75\"\nassert solution(\"1\\nID\\n21\\nMARKS\\n91\\nCLASS\\nVI\\nNAME\\nJohn\\n\") == \"69.75\"\nassert solution(\"1\\nMARKS\\n91\\nCLASS\\nVI\\nNAME\\nJohn\\n\") == \"75.0\"\nassert solution(\"1\\nCLASS\\nVI\\nMARKS\\n91\\nNAME\\nJohn\\n\") == \"75.0\"\nassert solution(\"1\\nNAME\\nJohn\\nMARKS\\n91\\nCLASS\\nVI\\n\") == \"75.0\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"Weird\"\nassert solution(\"2\") == \"Not Weird\"\nassert solution(\"3\") == \"Weird\"\nassert solution(\"4\") == \"Not Weird\"\nassert solution(\"5\") == \"Not Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1) == \"Weird\"\nassert solution(2) == \"Not Weird\"\nassert solution(3) == \"Weird\"\nassert solution(4) == \"Not Weird\"\nassert solution(5) == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == \"Not Weird\"\nassert solution('3') == \"Weird\"\nassert solution('4') == \"Not Weird\"\nassert solution('5') == \"Weird\"\nassert solution('6') == \"Not Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3) == \"Weird\"\nassert solution(24) == \"Not Weird\"\n\nassert solution(2) == \"Not Weird\"\nassert solution(15) == \"Weird\"\nassert solution(25) == \"Weird\""
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == 'Weird'\nassert solution('20') == 'Not Weird'\nassert solution('2') == 'Not Weird'\nassert solution('4') == 'Not Weird'\nassert solution('100') == 'Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(2) == \"Not Weird\"\nassert solution(14) == \"Weird\"\nassert solution(20) == \"Weird\"\nassert solution(22) == \"Not Weird\"\nassert solution(24) == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 'Not Weird'\nassert solution('3') == 'Weird'\nassert solution('4') == 'Weird'\nassert solution('5') == 'Weird'\nassert solution('6') == 'Not Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(2) == \"Not Weird\"\nassert solution(3) == \"Weird\"\nassert solution(4) == \"Not Weird\"\nassert solution(10) == \"Weird\"\nassert solution(20) == \"Not Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1) == \"Weird\"\nassert solution(2) == \"Not Weird\"\nassert solution(3) == \"Weird\"\nassert solution(4) == \"Not Weird\"\nassert solution(5) == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(2) == 'Not Weird'\nassert solution(19) == 'Weird'\nassert solution(3) == 'Weird'\nassert solution(5) == 'Weird'\nassert solution(6) == 'Not Weird'\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 25\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 25\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 47\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 47\n\n\"\"\"\nReplace all ______ with rjust, ljust or center. \n\nthickness = 5\nc = 'H'"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('<doc>'\n        '<item><foo /><bar>'\n        '<a /><b /><c>'\n        '</item>'\n        '</doc>') == 11\n\nassert solution('<doc><item></item></doc>') == 0\nassert solution('<doc><item><foo /><bar></bar></item></doc>') == 2\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('<elem1 attr1=\"6\" />\\n<elem2 attr2=\"7\" />') == 17\nassert solution('<doc>\\n<item>Foo</item>\\n<item>Bar</item>\\n</doc>') == 5\nassert solution('<x a=\"6\" b=\"7\" c=\"8\" />') == 15\nassert solution('<data>\\n<row>\\n<row>\\n<row>\\n') == 0\nassert solution('<x a=\"6\" b=\"7\" c=\"8\" d=\"9\" />') == 15\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 25\n=====Test Case=====\nInput:\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\nOutput:\n\n2\n\nInput:\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <answer type='hard'>24</answer>\n        <description type='text'>&lt;p&gt;Given a valid XML document, return the score.&lt;/p&gt;</description>\n    </entry>\n</feed>\n\nOutput:\n\n2\n\nInput:\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <answer type='hard'>24</answer>\n        <description type='text'>&lt;p&gt;Given a valid XML document, return the score.&lt;/p&gt;</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <answer type='hard'>24</answer>\n        <description type='text'>&lt;p&gt;Given a valid XML document, return the score.&lt;/p&gt;</description>\n    </entry>\n</feed>\n\nOutput:\n\n6\n\nInput:\n\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <answer type='hard'>24</answer>\n        <description type='text'>&lt;p&gt;Given a valid XML document, return the score.&lt;/p&gt;</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <answer type='hard'>24</answer>\n        <description type='text'>&lt;p&gt;Given a valid XML document, return the score.&lt;/p&gt;</description>\n    </entry>\n</feed>\n\nOutput:\n\n6\n\n======================================\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('<elem>value</elem>') == 5\nassert solution('<data>'\n    '    <students>'\n    '        <student>'\n    '            <name>Lucy</name>'\n    '            <age>9</age>'\n    '            <sex>female</sex>'\n    '        </student>'\n    '        <student>'\n    '            <name>Alex</name>'\n    '            <age>10</age>'\n    '            <sex>male</sex>'\n    '        </student>'\n    '    </students>'\n    '</data>') == 6\nassert solution('<stuff>'\n    '    <users>'\n    '        <user x=\"2\">'\n    '            <id>001</id>'\n    '            <name>Chuck</name>'\n    '        </user>'\n    '        <user x=\"7\">'\n    '            <id>009</id>'\n    '            <name>Brent</name>'\n    '        </user>'\n    '    </users>'\n    '</stuff>') == 2\nassert solution('<stuff>'\n    '    <users>'\n    '        <user x=\"2\">'\n    '            <id>007</id>'\n    '            <name>Paul</name>'\n    '        </user>'\n    '        <user x=\"7\">'\n    '            <id>009</id>'\n    '            <name>Brent</name>'\n    '        </user>'\n    '    </users>'\n    '</stuff>') == 0\nassert solution('<stuff>'\n    '    <users>'\n    '        <user x=\"2\">'\n    '            <id>001</id>'\n    '            <name>Chuck</name>'\n    '        </user>'\n    '        <user x=\"7\">'\n    '            <id>009</id>'\n    '            <name>Brent</name>'\n    '        </user>'\n    '    </users>'\n    '</stuff>') == 0\n\n=====Sample Input=====\n6\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n6\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n6\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n6\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n6\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n6\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n=====Sample Output=====\n1\n2\n0\n0\n0\n0\n\n=====\nThis is a sample code to test your code.\n\nYour code below.\n\nclass Node:\n    def __init__(self, value, next_node=None):\n        self.value = value\n        self.next_node = next_node\n\n    def get_value(self):\n        return self.value\n\n    def get_next_node(self):\n        return self.next_node\n\n    def set_next_node(self, next_node):\n        self.next_node = next_node\n\nclass LinkedList:\n    def __init__(self, value=None):\n        self.head_node = Node(value)\n\n    def get_head_node(self):\n        return self.head_node\n\n    def insert_beginning(self, new_value):\n        new_node = Node(new_value)\n        new_node.set_next_node(self.head_node)\n        self.head_node = new_node\n\n    def stringify_list(self):\n        string_list = \"\"\n        current_node = self.get_head_node()\n        while current_node:\n            if current_node.get_value()!= None:\n                string_list += str(current_node.get_value()) + \"\\n\"\n            current_node = current_node.get_next_node()\n        return string_list\n\n    def remove_node(self, value_to_remove):\n        current_node = self.get_head_node()\n        if current_node.get_value() == value_to_remove:\n            self.head_node = current_node.get_next_node()\n        else:\n            while current_node:\n                next_node = current_node.get_next_node()\n                if next_node.get_value() == value_to_remove:\n                    current_node.set_next_node(next_node.get_next_node())\n                    current_node = None\n                else:\n                    current_node = next_node\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('<a></a>') == 0\nassert solution('<a attr=\"val\"></a>') == 1\nassert solution('<a attr=\"val\" another=\"yes\" attr=\"val\"></a>') == 3\n\n======\nimport xml.etree.ElementTree as etree"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 30\nassert solution('''<feed xmlns='http://www.w3.org/2005/Atom' xml:lang='en'>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 0\n\n=====README=====\n1) Your solution should be a function named <code>solution</code>\n   that takes a single argument and returns a single integer.\n2) You may assume that the input passed to <code>solution</code> is a valid XML document.\n3) In your code, you can use the following construct to find the number of attributes of an element: <code>len(elem.attrib)</code>\n   where <code>elem</code> is an xml.etree.ElementTree.Element object.\n4) The input is guaranteed to be a valid XML document.\n5) You can find more info about XML parsing from here\n   https://docs.python.org/3/library/xml.etree.elementtree.html#module-xml.etree.ElementTree\n\n'''\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == output\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 30\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 5\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 0\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 0\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <answer type='hard'>5</answer>\n    </entry>\n    <entry>\n        <author gender='male'>Bishal</author>\n        <question type='hard'>XML 2</question>\n        <answer type='hard'>10</answer>\n    </entry>\n</feed>\n\"\"\") == 15\n\n\"\"\"\nInput Format\n\nThe first line contains the integer N, the number of lines in the XML document.\nThe next N lines follow containing the XML document.\n\nConstraints\n\nThe input is guaranteed to be a valid XML document.\nOutput Format\n\nPrint the score of the given XML document as a single line.\nSample Input\n\n4\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nSample Output\n\n30\nExplanation\n\nThe feed is printed using the print statement, and the statement is simply a string. The output is a single line containing the value of the expression, which is 30.\n\n\"\"\"\n\"\"\"\nSolution:\n\nimport xml.etree.ElementTree as etree\n\nmaxdepth = 0\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 5\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 0\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Ganesh</author>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n    </entry>\n</feed>\n\"\"\") == 3\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Ganesh</author>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n    </entry>\n</feed>\n\"\"\") == 3\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Ganesh</author>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n    </entry>\n    <entry>\n        <author gender='male'>Ganesh</author>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n    </entry>\n</feed>\n\"\"\") == 3\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 1\") == \"45.0\"\nassert solution(\"1 1 1 2\") == \"90.0\"\nassert solution(\"1 1 1 3\") == \"60.0\"\nassert solution(\"1 1 4 1\") == \"45.0\"\nassert solution(\"1 1 1 1\") == \"0.0\"\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1.0 4.0 3.0 2.0') == 45.0\nassert solution('0.0 1.0 0.0 0.0') == 90.0\n\"\"\"\nimport math\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1 1\") == \"45.0\"\nassert solution(\"1 2 3 4\") == \"90.0\"\nassert solution(\"1 1 -2 2\") == \"180.0\"\nassert solution(\"1 2 3 1\") == \"0.0\"\nassert solution(\"0 1 0 1\") == \"45.0\"\n\"\"\"\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == \"45.00\"\nassert solution('1 1 1 1') == \"360.00\"\nassert solution('4 5 6 7') == \"90.00\"\nassert solution('1 -1 1 1') == \"90.00\"\nassert solution('1 1 1 1') == \"360.00\"\n\n=====Test Case Explanations=====\nInput contains the coordinates of 4 points in a 3-dimensional Cartesian coordinate system. Output contains the angle correct to two decimal places.\n1st Test Case\nThe points are: (1, 2, 3) and (4, 5, 6).\nThe vector AB = (3 - 1, 6 - 2, 9 - 3) and the vector BC = (6 - 4, 9 - 5, 12 - 6) and their dot product is equal to 490.\nThe vector BC = (6 - 4, 9 - 5, 12 - 6) and the vector CD = (12 - 6, 15 - 7, 18 - 8) and their cross product is equal to (-322, -437, -290).\nThe cross product of the vectors AB and CD is equal to (-322, -437, -290).\nThe angle between the plane made by the points A, B, C and B, C, D is equal to 90.00.\n\n2nd Test Case\nThe points are: (1, 1, 1) and (1, 1, 1).\nThe vector AB = (0, 0, 0) and the vector BC = (0, 0, 0).\nThe dot product of the vectors AB and BC is equal to 0.\nThe cross product of the vectors AB and BC is equal to (0, 0, 0).\nThe angle between the plane made by the points A, B, C and B, C, D is equal to 360.00.\n\n3rd Test Case\nThe points are: (1, 1, 1) and (1, 1, 1).\nThe vector AB = (0, 0, 0) and the vector BC = (0, 0, 0).\nThe dot product of the vectors AB and BC is equal to 0.\nThe cross product of the vectors AB and BC is equal to (0, 0, 0).\nThe angle between the plane made by the points A, B, C and B, C, D is equal to 360.00.\n\n4th Test Case\nThe points are: (1, 1, 1) and (1, 1, 1).\nThe vector AB = (0, 0, 0) and the vector BC = (0, 0, 0).\nThe dot product of the vectors AB and BC is equal to 0.\nThe cross product of the vectors AB and BC is equal to (0, 0, 0).\nThe angle between the plane made by the points A, B, C and B, C, D is equal to 360.00.\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == 45.0\nassert solution('1 1 1 1') == 0.0\nassert solution('-1 -4 -8 -9') == -63.0\nassert solution('3 4 -12 9') == 63.0\nassert solution('-1 -1 -1 -1') == -90.0\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.0 4.0 2.0 3.0\") == 35.0\nassert solution(\"2.0 4.0 1.0 3.0\") == 40.0\nassert solution(\"3.0 3.0 4.0 4.0\") == 26.5\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.0 2.0 3.0 4.0\") == 45.0\nassert solution(\"1.0 1.0 1.0 1.0\") == 90.0\nassert solution(\"1.0 2.0 3.0\") == 60.0\nassert solution(\"1.0 1.0\") == 90.0\nassert solution(\"1.0 1.0 2.0\") == 90.0\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 5 2 6') == '20.00'\nassert solution('1 1 1 3') == '0.00'\n\"\"\"\n\nfrom math import acos, atan2, degrees, sqrt\n\nclass Points(object):\n    def __init__(self, x: float, y: float, z: float) -> None:\n        self.x, self.y, self.z = x, y, z\n\n    def __sub__(self, no: 'Points') -> 'Points':\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no: 'Points') -> float:\n        return self.x*no.x + self.y*no.y + self.z*no.z\n\n    def cross(self, no: 'Points') -> 'Points':\n        return Points(self.y*no.z - self.z*no.y, self.z*no.x - self.x*no.z, self.x*no.y - self.y*no.x)\n\n    def absolute(self) -> float:\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1.0 3.0 4.0 5.0\") == \"8.6\"\nassert solution(\"1.0 2.0 3.0\") == \"90.0\"\nassert solution(\"0.5 -2.5 0.0\") == \"45.0\"\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1.0 4.0 3.0\") == 28.944\nassert solution(\"2.0 4.0 6.0\") == 45.0\nassert solution(\"1.0 4.0 8.0\") == 54.0\nassert solution(\"1.0 4.0 7.0\") == 49.1\nprint('all tests passed.')\n=======\n>>>>>>> 9b3f396d94fb204292b94f897479298261a9f32d\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aretheyhere\") == \"2\"\nassert solution(\"programming is awesome\") == \"0\"\nassert solution(\"tell me no\") == \"1\"\n========================================\nYour input\n2\naretheyhere\nprogrammingisawesome\n\nOutput\n0\n2\n\nExplanation\naretheyhere -> 2 vowels -> score 2\nprogrammingisawesome -> 0 vowels -> score 0\n\n========================================\nThe first line contains an integer n, the number of words.\nEach of the following n lines contains a word.\n\nSample Test Cases\nSample Input\n3\nhacker\nreturn\nsarah\nSample Output\n1\n1\n2\n\nExplanation\nThere are 3 words given as input.\nhacker -> 0 vowels -> score 1\nreturn -> 1 vowel -> score 1\nsarah -> 2 vowels -> score 2\nThe total score is 1+1+2=4.\n\n========================================\n'''\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aei out') == 3\nassert solution('aei aei') == 2\nassert solution('aei aeio') == 3\nassert solution('aei aei aei') == 4\nassert solution('aei aeio aeio') == 4\n\n=====Test Case 1=====\nInput\n4\nword\n\nOutput\n2\n\n=====Test Case 2=====\nInput\n2\nword and\n\nOutput\n2\n\n=====Test Case 3=====\nInput\n4\nword and two words\n\nOutput\n3\n\"\"\""
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\nhello\\nworld') == 2\n\"\"\""
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 i love you\") == \"2\"\nassert solution(\"3 vixen i vixen and fox\") == \"3\"\nassert solution(\"vixen fox i vixen and vixen\") == \"2\"\nassert solution(\"there is no place like home\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"one two\") == 4\nassert solution(\"three four five\") == 7\nassert solution(\"ten eleven twelve\") == 12\nassert solution(\"one two three\") == 4\nassert solution(\"four five six\") == 7\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('goo') == 0\nassert solution('fly') == 1\nassert solution('foo') == 1\nassert solution('fly foo bar') == 1\n\n=====Test Case 1=====\nTest 1\nInput:\n4\nfoo\nbar\nfoo\nfly\nExpected Output:\n0\n1\n0\n1\nIn this test case, the input list contains 4 words. The first two words (foo and bar) contain one vowel each. The third word, foo, contains two. The fourth word, fly, contains one. Thus, the total score is 1 + 1 + 1 + 1 = 4.\n\n=====Test Case 2=====\nTest 2\nInput:\n9\nbcdefghijklmnopqrstuvwxyz\nExpected Output:\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nIn this test case, the input list contains 9 words. The first word is bcdefghijklmnopqrstuvwxyz. All the words have 26 characters, including the space. The answer is 0 since all the words have an even number of vowels.\n\n=====Test Case 3=====\nTest 3\nInput:\n5\nbcdefghijklmnopqrstuvwxy\nExpected Output:\n0\n0\n0\n0\n0\nIn this test case, the input list contains 5 words. The first word is bcdefghijklmnopqrstuvwxy. The second word has 13 characters, including the space. The answer is 0 since the second word has an odd number of vowels.\n\n=====Test Case 4=====\nTest 4\nInput:\n9\nbcdefghijklmnopqrstuvwxyz\nExpected Output:\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nIn this test case, the input list contains 9 words. The first word is bcdefghijklmnopqrstuvwxyz. The second word has 26 characters, including the space. The answer is 0 since the second word has an odd number of vowels.\n\n=====Test Case 5=====\nTest 5\nInput:\n6\nbcdefghijklmnopqrstuvwxy\nExpected Output:\n0\n0\n0\n0\n0\n0\nIn this test case, the input list contains 6 words. The first word is bcdefghijklmnopqrstuvwxy. The second word has 15 characters, including the space. The answer is 0 since the second word has an odd number of vowels.\n\n'''"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('hello world') == 2\nassert solution('hello world') == 2\nassert solution('hello worl') == 2\nassert solution('hello worl') == 1\nassert solution('hello worl') == 1\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 abcde fghij\") == 3\nassert solution(\"2 ab ab ab\") == 1\nassert solution(\"1 a b c\") == 0\nassert solution(\"0\") == 0\n\n=====Test Case 1=====\n>>> 1\n1\nab\nabcde fghij\nab ab ab\n0\n\n=====Test Case 2=====\n>>> 2\n2\nab\nab ab ab\n1\n\n=====Test Case 3=====\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n=====Test Case 4=====\n>>> 2\n2\na b\nab\nab ab ab\n1\n\n>>> 2\n2\na b\nab\nab ab ab\n1\n\n>>> 2\n2\na b\nab\nab ab ab\n1\n\n=====Test Case 5=====\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1\n1\na b c\nab\nabcde fghij\nab ab ab\n0\n\n>>> 1"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abc iyzyb') == '2'\nassert solution('aei') == '1'\n\"\"\"\n\nimport re\n\nvowels = \"aeiouy\""
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"How are you?\") == 3\nassert solution(\"Never odd or even\") == 0\nassert solution(\"Hello World\") == 0\nassert solution(\"hEllo WOrld\") == 2\nassert solution(\"tenant:     anvith     1\") == 1\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('XXI') == True\nassert solution('XCIX') == True\nassert solution('CDXXI') == False\nassert solution('MMMDCCCLXXXVIII') == True\nassert solution('MMMDCCCLXXXIX') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    'XXI'\n) == True\nassert solution(\n    'MMMCMXCIX'\n) == True\nassert solution(\n    'CDXXI'\n) == False\nassert solution(\n    'MMMM'\n) == False\nassert solution(\n    'C'\n) == False\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('X') == 'False', 'Wrong answer'\nassert solution('IV') == 'True', 'Wrong answer'\nassert solution('IX') == 'False', 'Wrong answer'\nassert solution('XL') == 'True', 'Wrong answer'\nassert solution('XC') == 'False', 'Wrong answer'\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"XXIX\") == True\nassert solution(\"XX\") == False\nassert solution(\"CDXCIX\") == True\nassert solution(\"LXXX\") == True\nassert solution(\"XCIX\") == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('X') == True, \"WA. Invalid Roman numeral\"\nassert solution('XX') == True, \"WA. Invalid Roman numeral\"\nassert solution('C') == True, \"WA. Invalid Roman numeral\"\nassert solution('CM') == True, \"WA. Invalid Roman numeral\"\nassert solution('M') == True, \"WA. Invalid Roman numeral\"\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('I') == True\nassert solution('IV') == True\nassert solution('IX') == True\nassert solution('MCMLXXXV') == True\nassert solution('MMMM') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"XXI\") == False\nassert solution(\"XI\") == True\nassert solution(\"CDXXI\") == True\nassert solution(\"MMMCMXCIX\") == True\nassert solution(\"MDCLXVI\") == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('X') == True\nassert solution('XX') == True\nassert solution('XXX') == True\nassert solution('XL') == True\nassert solution('LXXX') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('X') == 'False'\nassert solution('XL') == 'True'\nassert solution('CDXLIV') == 'True'\nassert solution('CMLXXXIX') == 'False'\n\n========\n\"\"\"\n\n\n\nimport re"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('X') == False\nassert solution('XX') == False\nassert solution('CDXC') == True\nassert solution('MMMCMXCIX') == True\nassert solution('I') == True\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''07895462130\n919875641230\n9195969878\n''') == '''+91 78954 62130\n+91 91959 69878\n+91 98756 41230\n'''\n\nprint('Success')\n\n=====\nWrite a python function to create Fibonacci series up to n using generator. \n\nThe Fibonacci Sequence is the series of numbers:\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34,...\nEvery term after the first two is found by adding up the two preceding terms.\n\nThis is a classic use case for generators.  \n\nImportant:  \n\nPlease generate the values in the sequence and not outside the function. Use the generator class or any other class to generate the values in the sequence.\n\nNote: The above is a generalized solution.  \n\nWrite your solution in the form of a function to be passed as an argument to the driver code. This function should return the list of values in the generator function.\n=====Problem Statement=====\nCreate a generator function which returns the Fibonacci series (up to n terms)\n\nThe Fibonacci series is the series of numbers:\n\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34,...\nEvery term after the first two is found by adding up the two preceding terms.\n\nThis is a classic use case for generators.  \n\nImportant:  \n\nPlease generate the values in the sequence and not outside the function. Use the generator class or any other class to generate the values in the sequence.\n\nNote: The above is a generalized solution.  \n\n=====Output Format=====\nYour function should return a generator object which contains the Fibonacci series upto n terms.\n\nYou may optionally also return a list of the items in the sequence.\n\n=====Sample Input=====\n10\n\n=====Sample Output=====\n<generator object fib at 0x1108a9e20>\n\n0 1 1 2 3 5 8 13 21 34\n'''\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\n=====Test Case=====\nInput:\n4\n+91 9345 53215 52342\n+91 9349 259949 48735\n+91 9294 9411 99117\n+91 9845 99344 59105\nOutput:\n+91 9294 9411 99117\n+91 9345 53215 52342\n+91 9349 259949 48735\n+91 9845 99344 59105\n\"\"\""
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9,223,372,036,854,775,807\") == [\n    \"+972 3\",\n    \"973 7\",\n    \"973 3\",\n    \"974 7\",\n    \"974 3\",\n    \"975 7\",\n    \"975 3\",\n    \"976 7\",\n    \"976 3\",\n    \"977 8\",\n    \"977 4\",\n    \"978 6\",\n    \"978 2\",\n]\n\nassert solution(\"1,2,3,4,5,6,7,8,9,10\") == [\n    \"+1 1\",\n    \"+1 2\",\n    \"+1 3\",\n    \"+1 4\",\n    \"+1 5\",\n    \"+1 6\",\n    \"+1 7\",\n    \"+1 8\",\n    \"+1 9\",\n    \"+1 10\",\n]\n\nassert solution(\"91,11,12,13,14,15,16,17,18,19\") == [\n    \"+91 1\",\n    \"+91 11\",\n    \"+91 12\",\n    \"+91 13\",\n    \"+91 14\",\n    \"+91 15\",\n    \"+91 16\",\n    \"+91 17\",\n    \"+91 18\",\n    \"+91 19\",\n]\n\nassert solution(\"91,11,12,13,14,15,16,17,18,19,20\") == [\n    \"+91 1\",\n    \"+91 11\",\n    \"+91 12\",\n    \"+91 13\",\n    \"+91 14\",\n    \"+91 15\",\n    \"+91 16\",\n    \"+91 17\",\n    \"+91 18\",\n    \"+91 19\",\n]\n\nassert solution(\"91,11,12,13,14,15,16,17,18,19,20\") == [\n    \"+91 1\",\n    \"+91 11\",\n    \"+91 12\",\n    \"+91 13\",\n    \"+91 14\",\n    \"+91 15\",\n    \"+91 16\",\n    \"+91 17\",\n    \"+91 18\",\n    \"+91 19\",\n    \"+91 20\",\n]\n\"\"\"\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_1) == expected_output_1\nassert solution(test_input_2) == expected_output_2\n=====Solution=====\nn = int(input())\nl = []\nfor _ in range(n):\n    l.append(input())"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('89898901234') == '919898981234'\nassert solution('898898901234') == '919889881234'\nassert solution('98989898') == '98989898'"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('+91 829373979') == '829373979'\nassert solution('829373979') == '829373979'\nassert solution('829373979, +91') == '829373979, 829373979'\nassert solution('+91 829373979, 829373979, 829373979') == '829373979, 829373979, 829373979'\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 17 34 56') == \"\"\"+91 7866 2949\n+91 8711 8733\n+91 1234 5678\"\"\"\n\nassert solution('9173456') == \"\"\"+91 7866 2949\n+91 8711 8733\n+91 1234 5678\"\"\"\n\nassert solution('917 34 56') == \"\"\"+91 7866 2949\n+91 8711 8733\n+91 1234 5678\"\"\"\n\nassert solution('917 34 56') == \"\"\"+91 7866 2949\n+91 8711 8733\n+91 1234 5678\"\"\"\n\n=====Test 1=====\nTest 1:\nInput:\n9\n+91 99999 999\n9087 1699 3322\n0 97777 88888\n9087 88 9922\n0 99999 0\n098\n0 97777 88888\n9087 88 9922\n0 99999 0\n098\n\nOutput:\n+91 99999 999\n+91 9087 1699 3322\n+91 0 97777 88888\n+91 9087 88 9922\n+91 0 99999 0\n+91 0 97777 88888\n+91 9087 88 9922\n+91 0 99999 0\n+91 0 97777 88888\n\n=====Test 2=====\nTest 2:\nInput:\n9\n90789 99999 999\n9087 1699 3322\n0 97777 88888\n9087 88 9922\n0 99999 0\n098\n0 97777 88888\n9087 88 9922\n0 99999 0\n098\n\nOutput:\n+91 90789 99999 999\n+91 9087 1699 3322\n+91 0 97777 88888\n+91 9087 88 9922\n+91 0 99999 0\n+91 0 97777 88888\n+91 9087 88 9922\n+91 0 99999 0\n+91 0 97777 88888\n\n=====Test 3=====\nTest 3:\nInput:\n9\n9087 99999 999\n9087 1699 3322\n0 97777 88888\n9087 88 9922\n0 99999 0\n098\n0 97777 88888\n9087 88 9922\n0 99999 0\n098\n\nOutput:\n+91 9087 99999 999\n+91 9087 1699 3322\n+91 0 97777 88888\n+91 9087 88 9922\n+91 0 99999 0\n+91 0 97777 88888\n+91 9087 88 9922\n+91 0 99999 0\n+91 0 97777 88888\n\n=====Test 4=====\nTest 4:\nInput:\n9\n9087 99999 999\n9087 1699 3322\n0 97777 88888\n9087 88 9922\n0 99999 0\n098\n0 97777 88888\n9087 88 9922\n0 99999 0\n098\n\nOutput:\n+91 9087 99999 999\n+91 9087 1699 3322\n+91 0 97777 88888\n+91 9087 88 9922\n+91 0 99999 0\n+91 0 97777 88888\n+91 9087 88 9922\n+91 0 99999 0\n+91 0 97777 88888\n\n=====Test 5=====\nTest 5:\nInput:\n9\n9087 99999 999\n9087 1699 3322\n0 97777 88888\n9087 88 9922\n0 99999 0\n098\n0 97777 88888\n9087 88 9922\n0 99999 0\n098\n\nOutput:\n+91 9087 99999 999\n+91 9087 1699 3322\n+91 0 97777 88888\n+91 9087 88 9922\n+91 0 99999 0\n+91 0 97777 88888\n+91 9087 88 9922\n+91 0 99999 0\n+91 0 97777 88888\n\n=====Test 6=====\nTest 6:\nInput:\n9\n9087 99999 999\n9087 1699 3322\n0 97777 88888\n9087 88 9922\n0 99999 0\n098\n0 97777 88888\n9087 88 9922\n0 99999 0\n098\n\nOutput:\n+91 9087 99999 999\n+91 9087 1699 3322\n+91 0 97777 88888\n+91 9087 88 9922\n+91 0 99999 0\n+91 0 97777 88888\n+91 9087 88 9922\n+91 0 99999 0\n+91 0 97777 88888\n\n=====Test 7=====\nTest 7:\nInput:\n9\n9087 99999 999\n9087 1699 3322\n0 97777 88888\n9087 88 9922\n0 99999 0\n098\n0 97777 88888\n9087 88 9922\n0 99999 0\n098\n\nOutput:\n+91 9087 99999 999\n+91 9087 1699 3322\n+91 0 97777 88888\n+91 9087 88 9922\n+91 0 99999 0\n+91 0 97777 88888\n+91 9087 88 9922\n+91 0 99999 0\n+91 0 97777 88888\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n=====Test Case=====\nTest 1\nInput:\n1\n9587456281\n\nOutput:\n+91 9587456281\n\nTest 2\nInput:\n2\n9451231234\n1234455568\n\nOutput:\n+91 9451231234\n+91 1234455568\n\nTest 3\nInput:\n1\n8454745689\n\nOutput:\n+91 8454745689\n\nTest 4\nInput:\n1\n9451435712\n\nOutput:\n+91 9451435712\n\nTest 5\nInput:\n2\n9087654321\n9087654321\n\nOutput:\n+91 9087654321\n+91 9087654321\n\nTest 6\nInput:\n1\n990099\n\nOutput:\n+91 990099\n\nTest 7\nInput:\n1\n999899\n\nOutput:\n+91 999899\n\nTest 8\nInput:\n1\n989998\n\nOutput:\n989998\n\nTest 9\nInput:\n1\n999999\n\nOutput:\n999999\n\nTest 10\nInput:\n2\n9451231234\n999999\n\nOutput:\n+91 9451231234\n999999\n\"\"\""
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n07895462130\n919875641230\n9195969878''') == '''07895462130\n9195969878\n919875641230'''\nprint(\"Tests passed\")\n\n=====Solution=====\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"91919191919\") == [\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \"91919191919\",\n    \""
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('Aditya, 85, 90, 78') == '78.00'\nassert solution('Krishna, 99, 98, 97') == '97.00'\nassert solution('Arjun, 45, 78, 54') == '56.00'\nassert solution('Malika, 89, 56, 76') == '76.00'\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nHelen 67 68 69\\nAnita 72 67 68\\nBetty 70 72 67\\nKseniya 89 90 100\\nKseniya\") == \"67.00\"\n\"\"\""
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\nHarsh 25 26.5 28\\nAnurag 26 28 30\\nHarshala 25 26.5 28\\nHarsh 25 26.5 28\\nAnurag') == '26.50'\nassert solution('4\\nKirti 25 26.5 28\\nAnurag 26 28 30\\nHarsh 25 26.5 28\\nAnurag') == '28.00'\n'''\n\nimport math"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nArjun 70 68 69\\nBeria 70 70 70\\nHarika 70 68 86\\nAkshit 70 68 88\\nNikhil 70 68 90\\nquery_name = 'Arjun'\") == '70.00'\nassert solution(\"5\\nBeria 70 70 70\\nAkshit 70 68 88\\nNikhil 70 68 90\\nquery_name = 'Akshit'\") == '68.50'\nassert solution(\"5\\nArjun 70 68 69\\nBeria 70 70 70\\nHarika 70 68 86\\nAkshit 70 68 88\\nNikhil 70 68 90\\nquery_name = 'Nikhil'\") == '78.00'\nassert solution(\"5\\nArjun 70 68 69\\nBeria 70 70 70\\nHarika 70 68 86\\nAkshit 70 68 88\\nNikhil 70 68 90\\nquery_name = 'Vinit'\") == '80.00'\n\n=====Test Case 1=====\nInput:\n5\nArjun 70 68 69\nBeria 70 70 70\nHarika 70 68 86\nAkshit 70 68 88\nNikhil 70 68 90\nquery_name = 'Arjun'\nOutput:\n70.00\n\n=====Test Case 2=====\nInput:\n5\nBeria 70 70 70\nAkshit 70 68 88\nNikhil 70 68 90\nquery_name = 'Akshit'\nOutput:\n68.50\n\n=====Test Case 3=====\nInput:\n5\nArjun 70 68 69\nBeria 70 70 70\nHarika 70 68 86\nAkshit 70 68 88\nNikhil 70 68 90\nquery_name = 'Nikhil'\nOutput:\n78.00\n\n=====Test Case 4=====\nInput:\n5\nArjun 70 68 69\nBeria 70 70 70\nHarika 70 68 86\nAkshit 70 68 88\nNikhil 70 68 90\nquery_name = 'Vinit'\nOutput:\n80.00\n\n=====Test Case 5=====\nInput:\n5\nArjun 70 68 69\nBeria 70 70 70\nHarika 70 68 86\nAkshit 70 68 88\nNikhil 70 68 90\nquery_name = 'query_name'\nOutput:\nAssertionError: assert 0, 'The query_name is not in the dictionary. Please try again.'\n\n=====Main=====\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 b\") == \"0.67\"\nassert solution(\"2 abc 2 bcd 3\") == \"0.67 0.67\"\n=====Sample Test Case 1=====\n>>> solution('5 alice')\n'0.67'\n>>> solution('5 bob')\n'0.67'\n>>> solution('5 charl')\n'0.67'\n>>> solution('2 alice')\n'0.67'\n>>> solution('3 alice bob charl')\n'0.67 0.67'\n\n====== Sample Input 2 =======\n3\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\n\n====== Sample Output 2 =======\n56.00\n\n=====Sample Input 3=====\n3\nHarsh 25 26.5 28\nAnurag 26 28 30\nHarsh\n\n=====Sample Output 3=====\n26.50\n\n=====Sample Input 4=====\n5\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\nHarsh 25 26.5 28\nAnurag 26 28 30\nHarsh\n\n=====Sample Output 4=====\n56.00\n\n=====Sample Input 5=====\n3\nKrishna 67 68\nArjun 70 98 63\nMalika 52 56 60\nMalika\n\n=====Sample Output 5=====\n56.00\n\n=====Sample Input 6=====\n4\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\n\n=====Sample Output 6=====\n56.00\n\n=====Sample Input 7=====\n2\nKrishna 67 68\nMalika 52 56\nMalika\n\n=====Sample Output 7=====\n56.00\n\n=====Sample Input 8=====\n2\nKrishna 67 68\nMalika 52 56\nMalika\n\n=====Sample Output 8=====\n56.00\n\n=====Sample Input 9=====\n3\nMalika 52 56 60\nMalika\n\n=====Sample Output 9=====\n56.00\n\n=====Sample Input 10=====\n1\nMalika\n\n=====Sample Output 10=====\n56.00\n\n=====Sample Input 11=====\n2\nMalika\nMalika\n\n=====Sample Output 11=====\n56.00\n\n=====Sample Input 12=====\n3\nMalika\nMalika\nMalika\n\n=====Sample Output 12=====\n56.00\n\n=====Sample Input 13=====\n2\nMalika\nMalika\n\n=====Sample Output 13=====\n56.00\n\n=====Sample Input 14=====\n3\nMalika\nMalika\nMalika\n\n=====Sample Output 14=====\n56.00\n\n=====Sample Input 15=====\n3\nMalika\nMalika\nMalika\n\n=====Sample Output 15=====\n56.00\n\n=====Sample Input 16=====\n2\nMalika\nMalika\n\n=====Sample Output 16=====\n56.00\n\n=====Sample Input 17=====\n3\nMalika\nMalika\nMalika\n\n=====Sample Output 17=====\n56.00\n\n=====Sample Input 18=====\n4\nMalika\nMalika\nMalika\nMalika\n\n=====Sample Output 18=====\n56.00\n\n=====Sample Input 19=====\n1\nMalika\n\n=====Sample Output 19=====\n56.00\n\n=====Sample Input 20=====\n3\nMalika\nMalika\nMalika\n\n=====Sample Output 20=====\n56.00\n\n=====Sample Input 21=====\n3\nMalika\nMalika\nMalika\n\n=====Sample Output 21=====\n56.00\n\n=====Sample Input 22=====\n3\nMalika\nMalika\nMalika\n\n=====Sample Output 22=====\n56.00\n\n=====Sample Input 23=====\n2\nMalika\nMalika\n\n=====Sample Output 23=====\n56.00\n\n=====Sample Input 24=====\n1\nMalika\n\n=====Sample Output 24=====\n56.00\n\n=====Sample Input 25=====\n4\nMalika\nMalika\nMalika\nMalika\n\n=====Sample Output 25=====\n56.00\n\n=====Sample Input 26=====\n2\nMalika\nMalika\n\n=====Sample Output 26=====\n56.00\n\n=====Sample Input 27=====\n2\nMalika\nMalika\n\n=====Sample Output 27=====\n56.00\n\n=====Sample Input 28=====\n1\nMalika\n\n=====Sample Output 28=====\n56.00\n\n=====Sample Input 29=====\n4\nMalika\nMalika\nMalika\nMalika\n\n=====Sample Output 29=====\n56.00\n\n=====Sample Input 30=====\n2\nMalika\nMalika\n\n=====Sample Output 30=====\n56.00\n\n=====Sample Input 31=====\n1\nMalika\n\n=====Sample Output 31=====\n56.00\n\n=====Sample Input 32=====\n3\nMalika\nMalika\nMalika\n\n=====Sample Output 32=====\n56.00\n\n=====Sample Input 33=====\n3\nMalika\nMalika\nMalika\n\n=====Sample Output 33=====\n56.00\n\n=====Sample Input 34=====\n1\nMalika\n\n=====Sample Output 34=====\n56.00\n\n=====Sample Input 35=====\n2\nMalika\nMalika\n\n=====Sample Output 35=====\n56.00\n\n=====Sample Input 36=====\n4\nMalika\nMalika\nMalika\nMalika\n\n=====Sample Output 36=====\n56.00\n\n=====Sample Input 37=====\n1\nMalika\n\n=====Sample Output 37=====\n56.00\n\n=====Sample Input 38=====\n2\nMalika\nMalika\n\n=====Sample Output 38=====\n56.00\n\n=====Sample Input 39=====\n3\nMalika\nMalika\nMalika\n\n=====Sample Output 39=====\n56.00\n\n=====Sample Input 40=====\n3\nMalika\nMalika\nMalika\n\n=====Sample Output 40=====\n56.00\n\n=====Sample Input 41=====\n2\nMalika\nMalika\n\n=====Sample Output 41=====\n56.00\n\n=====Sample Input 42=====\n3\nMalika\nMalika\nMalika\n\n=====Sample Output 42=====\n56.00\n\n=====Sample Input 43=====\n2\nMalika\nMalika\n\n=====Sample Output 43=====\n56.00\n\n=====Sample Input 44=====\n3\nMalika\nMalika\nMalika\n\n=====Sample Output 44=====\n56.00\n\n=====Sample Input 45=====\n1\nMalika\n\n=====Sample Output 45=====\n56.00\n\n=====Sample Input 46=====\n4\nMalika\nMalika\nMalika\nMalika\n\n=====Sample Output 46=====\n56.00\n\n=====Sample Input 47=====\n2\nMalika\nMalika\n\n=====Sample Output 47=====\n56.00\n\n=====Sample Input 48=====\n2\nMalika\nMalika\n\n=====Sample Output 48=====\n56.00\n\n=====Sample Input 49=====\n3\nMalika\nMalika\nMalika\n\n=====Sample Output 49=====\n56.00\n\n=====Sample Input 50=====\n4\nMalika\nMalika\nMalika\nMalika\n\n=====Sample Output 50=====\n56.00\n\n=====Sample Input 51=====\n3\nMalika\nMalika\nMalika"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\nHarry\\n37.21\\nBerry\\n37.21\\nTina\\n37.2\\nAkriti\\n41\\nHarsh\\n39') == '37.25'\nassert solution('5\\nHarsh\\n25\\nBeria\\n30\\nVarun\\n29') == '29.67'\nassert solution('5\\nBeria\\n27\\nHarry\\n30\\nHarsh\\n29\\nVarun\\n26') == '28.67'\n\"\"\"\n\n\n\n\"\"\"\nCode Challenge\n  Name: \n    Book Shop\n  Filename: \n    book_shop1.py\n  Problem Statement:\n    Imagine an accounting routine used in a book shop.\n    It works on a list with sublists, which look like this:\n        \n    Order Number    Book Title              Author      Quantity    Price per Item\n    34587           Learning Python         Mark Lutz   4           40.95\n    98762           Programming Python      Mark Lutz   5           56.80\n    77226           Head First Python       Paul Barry  3           32.95\n    88112           Einf\u00fchrung in Python3   Bernd Klein 3           24.99    \n    \n    \n    Write a Python program, \n    A) which returns Order Summary as a list with 2-tuples. \n       Each tuple consists of the order number and the product of the price per items \n       and the quantity. \n\n    Output:\n    [('34587', 163.8), ('98762', 284.0), ('77226', 98.85), ('88112', 74.97)]\n    \n    The product should be increased by 10 INR if the value of the order is smaller \n    than 100.00 INR.\n    \n    Output:\n    [('34587', 163.8), ('98762', 284.0), ('77226', 108.85), ('88112', 84.97)]\n    \n    \n  Hint: \n    Write a Python program using lambda and map.\norders = [ [\"34587\", \"Learning Python, Mark Lutz\", 4, 40.95], \n      [\"98762\", \"Programming Python, Mark Lutz\", 5, 56.80], \n      [\"77226\", \"Head First Python, Paul Barry\", 3,32.95],\n      [\"88112\", \"Einf\u00fchrung in Python3, Bernd Klein\",  3, 24.99]\n    ]\n\"\"\"\n\norders = [ [\"34587\", \"Learning Python, Mark Lutz\", 4, 40.95], \n      [\"98762\", \"Programming Python, Mark Lutz\", 5, 56.80], \n      [\"77226\", \"Head First Python, Paul Barry\", 3,32.95],\n      [\"88112\", \"Einf\u00fchrung in Python3, Bernd Klein\",  3, 24.99]\n    ]"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(m1) == '51.00'\nassert solution(m2) == '69.67'\nassert solution(m3) == '57.50'\n\nprint('The code ran Correctly')"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20 30 40\") == \"40.00\"\nassert solution(\"50 60 70\") == \"60.00\"\nassert solution(\"100 200 300\") == \"150.00\"\nassert solution(\"50 40 20\") == \"40.00\"\nassert solution(\"50 50 50\") == \"75.00\"\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\nBart 95 94 93\\nLisa 96 92 94\\nCindy 73 66 65') == 'Bart 95.00\\nLisa 96.50\\nCindy 73.50'\nprint('PASSED')\n=====Notes=====\nA slightly more concise version of the solution:\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\nArjun 70 70 70 Dinesh 60 70\\nMalika\") == '70.00'\nassert solution(\"5\\nHarsh 25 26.5 28\\nAnurag 26 28 30\\nAakash 28 30 32\\nMalika\") == '26.50'\n\"\"\"\n\nn = int(input())\nstudent_marks = {}\nfor _ in range(n):\n    name, *line = input().split()\n    scores = list(map(float, line))\n    student_marks[name] = scores\nquery_name = input()\nmarks = student_marks[query_name]\nsum = 0\nfor mark in marks:\n    sum += mark\navg = sum/3\nprint(\"%.2f\" % avg)\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(['Mike Thomson 20 M', 'Robert Bustle 32 M', 'Andria Bustle 30 F', 'Carl Bustle 32 M']) == 'Mr. Mike Thomson\\nMs. Andria Bustle\\nMr. Carl Bustle'\n=====\nprint('Mr. Mike Thomson')\nprint('Ms. Andria Bustle')\nprint('Mr. Carl Bustle')\nprint('Mr. Mike Thomson')\nprint('Ms. Andria Bustle')\nprint('Mr. Carl Bustle')\n\nassert solution(['Mike Thomson 20 M', 'Robert Bustle 32 M', 'Andria Bustle 30 F', 'Carl Bustle 32 M']) == 'Mr. Mike Thomson\\nMs. Andria Bustle\\nMr. Carl Bustle'\nassert solution(['Bryan Rodriguez 14 M', 'Javier Bailey 22 M', 'Thomasina Bailey 15 F', 'Javier Bailey 22 F', 'Bryan Rodriguez 14 M', 'Thomasina Bailey 15 F']) == 'Ms. Thomasina Bailey\\nMr. Javier Bailey\\nMs. Javier Bailey\\nMr. Bryan Rodriguez'\n\nprint('Hello Mr. Mike Thomson\\nHello Ms. Andria Bustle\\nHello Mr. Carl Bustle\\nHello Mr. Mike Thomson\\nHello Ms. Andria Bustle\\nHello Mr. Carl Bustle')\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Susan 1.0 M\\nMike 1.2 M\\nRobert 2.7 M\") == \"Mr. Mike\\nMs. Susan\\nMr. Robert\"\nassert solution(\"Jennifer 1.9 F\\nSusan 1.2 F\\nMike 1.2 M\\nRobert 2.7 M\") == \"Ms. Jennifer\\nMs. Susan\\nMr. Mike\\nMr. Robert\"\nassert solution(\"Hannah 1.6 F\\nCameron 1.6 M\\nClara 2.0 F\\nEllen 2.0 F\\nGeorge 1.2 M\\nJace 1.1 M\\nJonathan 1.4 M\\nLisa 1.9 F\\nMarie 1.5 F\\nNatalie 1.7 F\\nPat 1.1 M\\nSerge 1.2 M\\nSue 1.1 F\\nThomas 1.6 M\") == \"Ms. Hannah\\nMs. Clara\\nMr. Cameron\\nMs. Ernestine\\nMs. George\\nMr. Jack\\nMr. Julia\\nMr. Loren\\nMs. Marie\\nMs. Pat\\nMs. Sue\\nMr. Thomas\\n\"\n\"\"\""
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\nMike Thomson 20 M\\nRobert Bustle 32 M\\nAndria Bustle 30 F') == 'Mr. Mike Thomson\\nMs. Andria Bustle\\nMr. Robert Bustle'"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\nMike Thomson 20 M\\nRobert Bustle 32 M\") == 'Mr. Mike Thomson\\nMr. Robert Bustle'\n=======\nprint(5)\nprint(5, end='')\nprint(5, end=' ')\nprint()\n\nprint('5' + '5')\nprint('5', '5')\nprint()\n\nprint('5', '5', sep='')\nprint('5', '5', sep='', end=' ')\nprint()\n\nprint('5', '5', sep='', end='')\nprint('5', '5', sep='')\nprint()\n\nprint('5', '5', sep='', end=' ')\nprint('5', '5', end='')\nprint()\n\nprint('5', '5', sep='', end='')\nprint('5', '5', sep='')\nprint()\n\nprint('5', '5', sep='', end=' ')\nprint('5', end='')\nprint()\n\nprint('5', '5', sep='', end='')\nprint('5', sep='')\nprint()\n\nprint('5', '5', sep='', end='')\nprint('5')\nprint()\n\nprint('5', '5', sep='', end='')\nprint('5')\nprint()\n\nprint('5', '5', sep='', end='')\nprint('5')\nprint()\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5')\n\nprint('5', '5', sep='', end='')\nprint('5"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''Rajesh Kumar 12 M\nArjun Gopalan 13 M\nSunil Gopal 20 M\nArjun Kumar 13 F\nSunil Kumar 20 M\n''') == '''Mr. Arjun Kumar\nMs. Arjun Kumar\nMr. Rajesh Kumar\nMs. Rajesh Kumar\nMr. Sunil Kumar\nMs. Sunil Kumar'''\n\nprint('Success')\n\n=====Challenge=====\nYour friend is typing his name into a keyboard.  Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.\n\nYou examine the typed characters of the keyboard.  Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed.\n\n\n\nFor example, wird returns true, assuming the unknown character is 'w', because the word 'wonderful' was being typed.\n\n>>> solution('wonderful')\nTrue\n>>> solution('wonderfulw')\nTrue\n>>> solution('wonderfulww')\nTrue\n>>> solution('wonderfulwr')\nFalse\n>>> solution('wonder')\nFalse\n>>> solution('wonderww')\nTrue\n>>> solution('wr')\nFalse\n>>> solution('w')\nTrue\n>>> solution('www')\nTrue\n>>> solution('wwr')\nTrue\n>>> solution('wwwwr')\nTrue\n>>> solution('wwww')\nFalse\n>>> solution('ww')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwww')\nTrue\n>>> solution('wwwwwwwwwwwwwwwwwwwwwr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrrrrrrrrrrrrrrrrrrrr')\nFalse\n>>> solution('wwwwwwwwwwwwwwww"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\nMike Thomson 20 M\nRobert Bustle 32 M\nAndria Bustle 30 F''') == '''Mr. Mike Thomson\nMs. Andria Bustle\nMr. Robert Bustle'''\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''Mike Thomson 20 M\nRobert Bustle 32 M\nAndria Bustle 30 F\nMike Thornton 35 M\nRobert de Nova 40 M\nCarla Gordon 42 F\nBoris Yeltsin 55 M\nCarla Gavrilova 42 F\nOlga Makarov 60 F\nDima Zvereva 42 M\nOlga Zverdnaya 43 F\nDima Kondratiev 55 M\nIvan Gorbatchev 59 M\nWladimir Harkonnen 64 M\nDmitri Mendeleev 65 M\nWerner Dvorkin 64 M\nUla Dvorak 59 M\nDmitri Mendeleev 66 M\nAndria Bustle 67 F\nKonstantin Novoselov 68 M\nVasiliy Gorbatchev 69 M\nNikolay Golovanov 70 M\n''') == '''Mr. Mike Thomson\nMs. Andria Bustle\nMr. Mike Thornton\nMs. Carla Gordon\nMs. Carla Gavrilova\nDr. Dima Zvereva\nDr. Dima Kondratiev\nProf. Wladimir Harkonnen\n'''\n=====\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Foo Fuu Vee Vee Vee') == 'Fuu Vee Vee Vee Foo'\nassert solution('Bar Bar Bar Bar') == 'Bar Bar Bar Bar Bar'\nassert solution('Foo Bar Baz') == 'Bar Baz Foo'\nassert solution('Foo') == 'Foo'\nassert solution('Foo Bar') == 'Bar Foo'\n=======\nWrite 5 lines of code to test the correctness of solution:\n>>>>>>> origin/main\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''Mike Thomson 20 M\nRobert Bustle 32 M\nAndria Bustle 30 F\nMike Thornton 17 M\nRobert Gorton 31 M''') == '''Mr. Mike Thornton\nMs. Andria Bustle\nMr. Mike Thomson\nMr. Robert Gorton\nMs. Robert Bustle\n'''\nprint(solution('''Mike Thomson 20 M\nRobert Bustle 32 M\nAndria Bustle 30 F\nMike Thornton 17 M\nRobert Gorton 31 M'''))"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('John Locke 88 M') == 'Mr. John Locke'\n=====\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 1]]'\nassert solution('1 2 1') == '[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 0]]'\nassert solution('1 1 1') == '[[0, 0, 0]]'\n\n=====Output Format=====\nPrint the list of lists in lexicographic increasing order\n\n>>> print(solution())\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 0], [1, 1, 1]]\n\n========================================\n\nx = int(input())\ny = int(input())\nz = int(input())\nn = int(input())\n\nprint([[a, b, c] for a in range(x+1) for b in range(y+1) for c in range(z+1) if a+b+c!= n])\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(x=1, y=1, z=2, n=3) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n\nassert solution(x=1, y=2, z=3, n=5) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 0], [0, 2, 1], [0, 2, 2], [0, 2, 3], [0, 2, 4], [0, 3, 0], [0, 3, 1], [0, 3, 2], [0, 3, 3], [0, 3, 4], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 0, 4], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 1, 4], [1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 4], [1, 3, 0], [1, 3, 1], [1, 3, 2], [1, 3, 3], [1, 3, 4], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 0, 3], [2, 0, 4], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 1, 4], [2, 2, 0], [2, 2, 1], [2, 2, 2], [2, 2, 3], [2, 2, 4], [2, 3, 0], [2, 3, 1], [2, 3, 2], [2, 3, 3], [2, 3, 4]]\n\nassert solution(x=2, y=2, z=2, n=4) == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [0, 2, 0], [0, 2, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [1, 2, 0], [1, 2, 1]]\n\nassert solution(x=1, y=1, z=2, n=0) == []\n\nassert solution(x=1, y=1, z=2, n=1) == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2\\n3\\n4\\n3') == '[[0,0,0],[0,0,1],[0,1,0],[0,1,2],[0,2,1],[1,0,0],[1,0,2],[1,1,1],[1,2,0],[2,0,0],[2,0,1],[2,1,0],[2,1,2]]'\nassert solution('4\\n2\\n3\\n5\\n4') == '[[0,0,0],[0,0,1],[0,0,2],[0,0,3],[0,0,4],[0,1,0],[0,1,1],[0,1,2],[0,1,3],[0,1,4],[0,2,0],[0,2,1],[0,2,2],[0,2,3],[0,2,4],[0,3,0],[0,3,1],[0,3,2],[0,3,3],[0,3,4],[1,0,0],[1,0,1],[1,0,2],[1,0,3],[1,0,4],[1,1,0],[1,1,1],[1,1,2],[1,1,3],[1,1,4],[1,2,0],[1,2,1],[1,2,2],[1,2,3],[1,2,4],[1,3,0],[1,3,1],[1,3,2],[1,3,3],[1,3,4],[2,0,0],[2,0,1],[2,0,2],[2,0,3],[2,0,4],[2,1,0],[2,1,1],[2,1,2],[2,1,3],[2,1,4],[2,2,0],[2,2,1],[2,2,2],[2,2,3],[2,2,4],[2,3,0],[2,3,1],[2,3,2],[2,3,3],[2,3,4],[3,0,0],[3,0,1],[3,0,2],[3,0,3],[3,0,4],[3,1,0],[3,1,1],[3,1,2],[3,1,3],[3,1,4],[3,2,0],[3,2,1],[3,2,2],[3,2,3],[3,2,4],[3,3,0],[3,3,1],[3,3,2],[3,3,3],[3,3,4]]'\nassert solution('4\\n2\\n3\\n5\\n4\\n3') == '[[0,0,0],[0,0,1],[0,0,2],[0,0,3],[0,0,4],[0,1,0],[0,1,1],[0,1,2],[0,1,3],[0,1,4],[0,2,0],[0,2,1],[0,2,2],[0,2,3],[0,2,4],[0,3,0],[0,3,1],[0,3,2],[0,3,3],[0,3,4],[1,0,0],[1,0,1],[1,0,2],[1,0,3],[1,0,4],[1,1,0],[1,1,1],[1,1,2],[1,1,3],[1,1,4],[1,2,0],[1,2,1],[1,2,2],[1,2,3],[1,2,4],[1,3,0],[1,3,1],[1,3,2],[1,3,3],[1,3,4],[2,0,0],[2,0,1],[2,0,2],[2,0,3],[2,0,4],[2,1,0],[2,1,1],[2,1,2],[2,1,3],[2,1,4],[2,2,0],[2,2,1],[2,2,2],[2,2,3],[2,2,4],[2,3,0],[2,3,1],[2,3,2],[2,3,3],[2,3,4],[3,0,0],[3,0,1],[3,0,2],[3,0,3],[3,0,4],[3,1,0],[3,1,1],[3,1,2],[3,1,3],[3,1,4],[3,2,0],[3,2,1],[3,2,2],[3,2,3],[3,2,4],[3,3,0],[3,3,1],[3,3,2],[3,3,3],[3,3,4]]'\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == '[[0,0,0],[0,0,1],[0,0,2],[0,0,3],[0,0,4],[0,1,0],[0,1,1],[0,1,2],[0,1,3],[0,1,4],[0,2,0],[0,2,1],[0,2,2],[0,2,3],[0,2,4],[0,3,0],[0,3,1],[0,3,2],[0,3,3],[0,3,4],[1,0,0],[1,0,1],[1,0,2],[1,0,3],[1,0,4],[1,1,0],[1,1,1],[1,1,2],[1,1,3],[1,1,4],[1,2,0],[1,2,1],[1,2,2],[1,2,3],[1,2,4],[1,3,0],[1,3,1],[1,3,2],[1,3,3],[1,3,4],[2,0,0],[2,0,1],[2,0,2],[2,0,3],[2,0,4],[2,1,0],[2,1,1],[2,1,2],[2,1,3],[2,1,4],[2,2,0],[2,2,1],[2,2,2],[2,2,3],[2,2,4],[2,3,0],[2,3,1],[2,3,2],[2,3,3],[2,3,4],[3,0,0],[3,0,1],[3,0,2],[3,0,3],[3,0,4],[3,1,0],[3,1,1],[3,1,2],[3,1,3],[3,1,4],[3,2,0],[3,2,1],[3,2,2],[3,2,3],[3,2,4],[3,3,0],[3,3,1],[3,3,2],[3,3,3],[3,3,4]]'\nassert solution('1\\n1\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1 1 3') == [[0,0,0],[0,0,1],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]]\nassert solution('1 2 3 4') == [[0,0,0],[0,0,1],[0,0,2],[0,0,3],[0,0,4],[0,1,0],[0,1,1],[0,1,2],[0,1,3],[0,1,4],[0,2,0],[0,2,1],[0,2,2],[0,2,3],[0,2,4],[0,3,0],[0,3,1],[0,3,2],[0,3,3],[0,3,4],[1,0,0],[1,0,1],[1,0,2],[1,0,3],[1,0,4],[1,1,0],[1,1,1],[1,1,2],[1,1,3],[1,1,4],[1,2,0],[1,2,1],[1,2,2],[1,2,3],[1,2,4],[1,3,0],[1,3,1],[1,3,2],[1,3,3],[1,3,4],[2,0,0],[2,0,1],[2,0,2],[2,0,3],[2,0,4],[2,1,0],[2,1,1],[2,1,2],[2,1,3],[2,1,4],[2,2,0],[2,2,1],[2,2,2],[2,2,3],[2,2,4],[2,3,0],[2,3,1],[2,3,2],[2,3,3],[2,3,4],[3,0,0],[3,0,1],[3,0,2],[3,0,3],[3,0,4],[3,1,0],[3,1,1],[3,1,2],[3,1,3],[3,1,4],[3,2,0],[3,2,1],[3,2,2],[3,2,3],[3,2,4],[3,3,0],[3,3,1],[3,3,2],[3,3,3],[3,3,4]]\n\nprint(solution('1 1 1 3') == [[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2]])\nprint(solution('1 2 3 4') == [[0,0,0],[0,0,1],[0,0,2],[0,0,3],[0,0,4],[0,1,0],[0,1,1],[0,1,2],[0,1,3],[0,1,4],[0,2,0],[0,2,1],[0,2,2],[0,2,3],[0,2,4],[0,3,0],[0,3,1],[0,3,2],[0,3,3],[0,3,4],[1,0,0],[1,0,1],[1,0,2],[1,0,3],[1,0,4],[1,1,0],[1,1,1],[1,1,2],[1,1,3],[1,1,4],[1,2,0],[1,2,1],[1,2,2],[1,2,3],[1,2,4],[1,3,0],[1,3,1],[1,3,2],[1,3,3],[1,3,4],[2,0,0],[2,0,1],[2,0,2],[2,0,3],[2,0,4],[2,1,0],[2,1,1],[2,1,2],[2,1,3],[2,1,4],[2,2,0],[2,2,1],[2,2,2],[2,2,3],[2,2,4],[2,3,0],[2,3,1],[2,3,2],[2,3,3],[2,3,4],[3,0,0],[3,0,1],[3,0,2],[3,0,3],[3,0,4],[3,1,0],[3,1,1],[3,1,2],[3,1,3],[3,1,4],[3,2,0],[3,2,1],[3,2,2],[3,2,3],[3,2,4],[3,3,0],[3,3,1],[3,3,2],[3,3,3],[3,3,4]])\n=====Output Format=====\nPrint the list in lexicographic increasing order\n\n1 1 1 3\n0 0 0\n0 0 1\n0 0 2\n0 1 0\n0 1 1\n1 0 0\n1 0 1\n1 1 0\n1 1 1\n1 1 2\n0 0 0\n1 0 1\n1 0 1\n1 1 0\n1 1 1\n0 0 0\n0 0 0\n1 0 1\n1 0 1\n1 0 1\n1 1 0\n0 0 0\n0 0 0\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n1 0 1\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 2\n0 0 0\n0 0 0\n1 0 1\n1 1 1\n1 1 2\n0 0 0\n0 0 0\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 1 1\n1 1 2\n1 1 1\n1 1 2\n1 1 1\n1 1 2\n1 1 1\n0 0 0\n0 0 0\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n1 0 1\n0 0 0\n1 1 1\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 0 1\n0 0 0\n0 0 0\n0 0 0\n1 0 1\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n1 0 1\n0 0 0\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n0 0 0\n0 0 0\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n0 0 0\n1 1 1\n1 1 2\n1 1 1\n1 1 2\n1 1 1\n0 0 0\n1 0 1\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n0 0 0\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 1 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n0 0 0\n1 0"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2]]\nassert solution(\"1 1 1 100\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2]]\n=====Output Format=====\nPrint the list of lists in lexicographical order.\n\n=====Sample Test Cases=====\nTest Case #1\nx = 1\ny = 1\nz = 2\nn = 3\nsolution(\"1 2 3 4\")\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2]]\n\nTest Case #2\nx = 1\ny = 1\nz = 1\nn = 2\nsolution(\"1 1 1 100\")\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2]]\n\"\"\""
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''1\n1\n1\n2''') == \\\n['0,0,0',\n '0,0,1',\n '0,0,2',\n '0,1,0',\n '0,1,1',\n '1,0,0',\n '1,0,1',\n '1,1,0',\n '1,1,2']\nassert solution(\n'''2\n2\n2\n2''') == \\\n['0,0,0',\n '1,0,0',\n '0,1,0',\n '1,1,0',\n '0,0,1',\n '1,0,1',\n '0,1,1',\n '1,1,1']\n'''\n-----Input Format-----\n\nFour integers x, y, z and n, each on a separate line.\n\n-----Output Format-----\n\nPrint the list in lexicographical order\nSample Input 0\n\n1\n1\n1\n2\nSample Output 0\n\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\n'''\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\nassert solution('1 2 3') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n=====Output Format=====\nPrint the list of lists in lexicographic increasing order, where each inner list represents a different solution.\n\"\"\""
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 1]]', 'Error'\n\nprint(\"Success\")\n\n=====Output Format=====\nPrint the list of lists in lexographic increasing order\n\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\n\nprint(\"Success\")\n\n======Test Case Explanation=====\nExplanation:\nThe array that do not sum to n = 3 are: [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\n\nIn lexicographic increasing order, they are: [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\n\"\"\"\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 2]]'\nassert solution('1 1 1 100') == '[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [0, 2, 0], [0, 2, 1], [1, 0, 0], [1, 0, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [2, 0, 0], [2, 0, 1], [2, 1, 0], [2, 1, 1], [2, 2, 2], [2, 2, 2]]'\n=====Output Format=====\nPrint the list of lists in lexicographic order.\n\n===Sample Test Cases===\nSample Input 1:\n1 1 1 2\nSample Output 1:\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 2]]\nSample Input 2:\n2 2 2 4\nSample Output 2:\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [2, 0, 0], [2, 0, 1], [2, 1, 0], [2, 1, 1], [2, 2, 2], [2, 2, 2]]\n\n===CODE===\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 3\") == \"0 0 0 1 2\"\nassert solution
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"\"\"2.00+2.00i\n2.00-2.00i\n0.00+4.00i\n0.00-4.00i\n0.00+0.00i\n\"\"\"\nassert solution(\"2 -1\") == \"\"\"3.00+0.00i\n1.00-1.00i\n0.00+2.00i\n0.00-2.00i\n0.00+0.00i\n\"\"\"\nassert solution(\"0 1\") == \"\"\"0.00+1.00i\n0.00-1.00i\n0.00+0.00i\n0.00-0.00i\n0.00+0.00i\n\"\"\"\nassert solution(\"0 1.11+0.22i\") == \"\"\"0.00+1.11i\n0.00-1.11i\n0.00+0.22i\n0.00-0.22i\n0.00+0.00i\n\"\"\"\nassert solution(\"0 1.11-0.22i\") == \"\"\"0.00+1.11i\n0.00-1.11i\n0.00+0.22i\n0.00-0.22i\n0.00+0.00i\n\"\"\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"3 4\"\nassert solution(\"1+2i\") == \"3 4i\"\nassert solution(\"1+-2i\") == \"0 -2i\"\nassert solution(\"1+-2i+3i\") == \"3 -5i\"\nassert solution(\"1+2i+3i\") == \"4 6i\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1.00+1.00i'\nassert solution('0 1') == '-1.00+1.00i'\nassert solution('0 0') == '0.00+0.00i'\nassert solution('1.1 1.1') == '1.20+1.20i'\nassert solution('1 1.1') == '1.20+2.20i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"2.00+2.00i\"\nassert solution(\"1+1i\") == \"2.00+2.00i\"\nassert solution(\"1.11+1.11i\") == \"2.22+2.22i\"\nassert solution(\"1+-1i\") == \"0.00-2.00i\"\nassert solution(\"0+2i\") == \"2.00+0.00i\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == '1.00+1.00i'\nassert solution('0 1') == '0.00+1.00i'\nassert solution('1 0') == '1.00+0.00i'\nassert solution('0 0') == '0.00+0.00i'\n\n=====Test Case=====\nSample Input 1\n1 1\nSample Output 1\n1.00+1.00i\nSample Input 2\n0 1\nSample Output 2\n0.00+1.00i\nSample Input 3\n1 0\nSample Output 3\n1.00+0.00i\n\n\"\"\"\n\n\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n    def __add__(self, no):\n        real = self.real + no.real\n        imaginary = self.imaginary + no.imaginary\n        return Complex(real, imaginary)\n    def __sub__(self, no):\n        real = self.real - no.real\n        imaginary = self.imaginary - no.imaginary\n        return Complex(real, imaginary)\n    def __mul__(self, no):\n        real = self.real * no.real - self.imaginary * no.imaginary\n        imaginary = self.real * no.imaginary + self.imaginary * no.real\n        return Complex(real, imaginary)\n    def __truediv__(self, no):\n        x = float(no.real ** 2 + no.imaginary ** 2)\n        y = self * Complex(no.real, -no.imaginary)\n        real = y.real / x\n        imaginary = y.imaginary / x\n        return Complex(real, imaginary)\n    def mod(self):\n        real = math.sqrt(self.real ** 2 + self.imaginary ** 2)\n        return Complex(real, 0)\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2') == '3 4'\nassert solution('1 -2 1 -1') == '0 4 -3 2'\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1.00+0.00i'\nassert solution('0 9') == '0.00+0.00i'\nassert solution('1+1i') == '0.00+0.00i'\nassert solution('0+9i') == '0.00+0.00i'\nassert solution('1+1i 2+1i') == '3.00+0.00i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1+1i\\n1-1i\\n1*1i\\n1/1i\\n1.00\\n0.00i\\n1.00+0.00i'\nassert solution('0 5') == '0+5.00i\\n0-5.00i\\n0*5.00i\\n0/5.00i\\n0.00\\n5.00i\\n2.00+0.00i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"2.00+2.00i\"\nassert solution(\"1 -1\") == \"0.00-2.00i\"\nassert solution(\"0 +1i\") == \"1.00+0.00i\"\nassert solution(\"0 -1i\") == \"1.00-0.00i\"\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"2.00+2.00i\"\nassert solution(\"0 1\") == \"0.00-1.00i\"\nassert solution(\"1 0\") == \"0.00+1.00i\"\nassert solution(\"0 0\") == \"0.00+0.00i\"\n=======\n'''\n\n\n'''\nWrite 5 lines of code to test the correctness of solution:\n\n=====Problem Statement=====\nFor this challenge, you are given two complex numbers, and you have to print the result of their addition, subtraction, multiplication, division and modulus operations. The real and imaginary precision part should be correct up to two decimal places.\n\n=====Input Format=====\nOne line of input: The real and imaginary part of a number separated by a space.\n\n=====Output Format=====\nFor two complex numbers C and D, the output should be in the following sequence on separate lines:\nC+D\nC-D\nC*D\nC/D\nmod(C)\nmod(D)\n\nFor complex numbers with non-zero real (A) and complex part (B), the output should be in the following format:\nReplace the plus symbol (+) with a minus symbol (-) when B<0.\nFor complex numbers with a zero complex part i.e. real numbers, the output should be:\nA+0.00i\nFor complex numbers where the real part is zero and the complex part is non-zero, the output should be:\n0.00+Bi\n\nFor complex numbers where one of the real or complex part is zero, the output should be:\nA+-0.00i\nwhere A is replaced by that part and i is replaced by j.\n\nIf both the real and complex parts of a number are zero, the output should be:\n0.00+0.00i\n\nIf none of the parts of the number is zero, the output should be:\nA+Bi\nwhere A is replaced by the real part and B is replaced by the complex part.\n\nFor complex numbers with a zero complex part i.e. real numbers, the output should be:\n0.00+0.00i\n\nFor complex numbers where the real part is zero and the complex part is non-zero, the output should be:\n0.00+Bi\n\nIf none of the parts of the number is zero, the output should be:\nA+Bi\nwhere A is replaced by that part and B is replaced by the complex part.\n\nFor complex numbers with a zero complex part i.e. real numbers, the output should be:\n0.00+0.00i\n\nIf none of the parts of the number is zero, the output should be:\nA+Bi\nwhere A is replaced by that part and B is replaced by the complex part.\n\nFor complex numbers where one of the real or complex part is zero, the output should be:\nA+-0.00i\nwhere A is replaced by that part and i is replaced by j.\n\nIf both the real and complex parts of a number are zero, the output should be:\n0.00+0.00i\n\nIf none of the parts of the number is zero, the output should be:\nA+Bi\nwhere A is replaced by that part and B is replaced by the complex part.\n\n=====Sample Input=====\n1 1\n2 2\n1 0\n1 0\n2 1\n1 1\n2 2\n1 0\n0 1\n0 0\n=====Sample Output=====\n3.00+3.00i\n0.00-2.00i\n0.00-1.00i\n0.00+2.00i\n0.00+0.00i\n2.00+0.00i\n0.00+0.00i\n2.00+1.00i\n2.00+1.00i\n0.00+0.00i\n\n'''\n\n\n\nimport re"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n\"\"\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"xyz\") == \"xaybzc\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('abcxyz') == 'abcxaybz'\nassert solution('abcxyz123') == 'abcxaybzy123'\nassert solution('xzyabc123') == 'xaybzy123'\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\"\n\"\"\"\n\nO = input()\nE = input()\nodd = [x for i,x in enumerate(O) if i%2 == 0]\neven = [x for i,x in enumerate(E) if i%2!= 0]\n\nprint(''.join(odd + even))\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('xyz') == 'xaybzc'\n\"\"\""
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('xyz') == 'xaybzc'\n\"\"\"\n\nO, E = [input(), input()]\nfor c in zip(O, E):\n    print(''.join(c))"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n\"\"\""
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a') == 'a'\nassert solution('a\\nb') == 'b'\nassert solution('a\\tb') == 'b'\nassert solution('a\\nb\\t') == 'b'\nassert solution('a\\n\\nb') == 'b'\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"xya\") == \"xayb\"\nassert solution(\"xyz\") == \"xaybz\"\nassert solution(\"xy\") == \"xay\"\nassert solution(\"ab\") == \"ab\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"01\") == \"00\"\nassert solution(\"1\") == \"00\"\nassert solution(\"010\") == \"00\"\nassert solution(\"101\") == \"00\"\nassert solution(\"101010\") == \"00\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\"\n\nimport unittest\nimport string\n\nclass TestStringMethods(unittest.TestCase):\n    def test_solution(self):\n        s = \"01B0\"\n        self.assertEqual(solution(s), \"00\")\n\n    def test_solution2(self):\n        s = \"111111111111111111\"\n        self.assertEqual(solution(s), \"11111111111111111111\")"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('01B0') == '00'\n\"\"\"\n\ns = input()\n\nwhile s!= '':\n    print(s[:len(s) - 1])\n    s = s[:len(s) - 1]\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('01B0') == '00'\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('011') == '11'\nassert solution('1010') == '101'\nassert solution('010') == '010'\nassert solution('1100') == '11'\nassert solution('11010') == '101010'"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('01B0') == '00'\nprint(solution('01B0'))"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"010\") == \"00\"\nassert solution(\"010B\") == \"00\"\nassert solution(\"010B0\") == \"00\"\nassert solution(\"010B00\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('01B0') == '0'\nassert solution('011110') == '010'\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"01B0\") == \"00\"\nassert solution(\"100010\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('01B0') == '00'\n\"\"\"\n\nfrom typing import List, Tuple\nimport re\n\ns: str = stdin.rstrip()\n\ns = re.sub(r'0+', '0', s)\ns = re.sub(r'1+', '1', s)\n\nprint(s)\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 5 3\") == \"3\"\nassert solution(\"4 3 4 6\") == \"0\"\n\n---\n\nN = int(input())\nA = list(map(int, input().split(' ')))\nmin_h = 0\nfor i in range(N):\n    min_h = max(min_h, A[i])\nprint(min_h)\n\n---\n\nN = int(input())\nA = list(map(int, input().split(' ')))\n\nprint(min([max(A[i + 1:]) for i in range(N)], default=0))\n\n\"\"\"\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\""
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\n\"\"\"\n\nN = int(input())\nA = list(map(int, input().split(' ')))\n\nresult = 0\n\nfor i in range(N):\n    result = max(result, A[i])\n\nprint(result)\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\n\"\"\"\nfrom __future__ import annotations\n\nimport math\nfrom typing import List, Tuple, Dict, Set, Callable, Sequence, Any\nimport operator\nimport functools\n\nimport numpy as np\n\n\nclass Heap:\n    \"\"\"\n    Min-Heap\n    \"\"\"\n\n    def __init__(\n        self, items: List[Tuple[int, int]], key_func: Callable = operator.itemgetter(0)\n    ) -> None:\n        \"\"\"Initialize this priority queue and insert the given items.\n\n        Args:\n            items (list): List of (priority, item) tuples.\n            key_func (callable): Callable that extracts the priority from the item.\n\n        \"\"\"\n        self._key = key_func\n        self._index: Dict[int, int] = {}\n        self._data = np.array(items)\n\n        self._build_heap()\n\n    def _heapify(self, index: int) -> None:\n        \"\"\"Ensure the heap structure from a single parent node.\n\n        Args:\n            index (int): Index of the node.\n        \"\"\"\n        l_index = 2 * index + 1\n        r_index = 2 * index + 2\n\n        if l_index >= len(self._data):\n            return\n\n        min_index = index\n        if self._key(self._data[l_index]) < self._key(self._data[min_index]):\n            min_index = l_index\n        if (\n            r_index < len(self._data)\n            and self._key(self._data[r_index]) < self._key(self._data[min_index])\n        ):\n            min_index = r_index\n\n        if min_index!= index:\n            self._data[index], self._data[min_index] = self._data[min_index], self._data[index]\n            self._index[self._data[index][1]] = index\n            self._index[self._data[min_index][1]] = min_index\n            self._heapify(min_index)\n\n    def _build_heap(self) -> None:\n        \"\"\"Build a heap from ``self._data`` inplace.\n\n        Note:\n            Uses ``self._key`` to extract the priority.\n\n        \"\"\"\n        for i in range(int(math.floor(len(self._data) / 2)), -1, -1):\n            self._heapify(i)\n\n    def extract_min(self) -> Tuple[int, int]:\n        \"\"\"Remove and return the (priority, item) pair with the lowest priority.\n\n        Raises:\n            ValueError: Raised if the priority queue is empty.\n\n        \"\"\"\n        if len(self._data) == 0:\n            raise ValueError(\"Priority queue is empty.\")\n        self._data[0], self._data[-1] = self._data[-1], self._data[0]\n        item = self._data.pop()\n        del self._index[item[1]]\n        self._data = self._data[:-1]\n        self._build_heap()\n        return item\n\n    def insert(self, item: Tuple[int, int]) -> None:\n        \"\"\"Insert a new item in the priority queue.\n\n        Args:\n            item (Tuple[int, int]): Priority and item tuple.\n\n        Raises:\n            ValueError: If the tuple's first element is not a number.\n\n        \"\"\"\n        if not (isinstance(item[0], int) or isinstance(item[0], float)):\n            raise ValueError(\"Item's priority must be a number.\")\n        if item[1] in self._index:\n            raise ValueError(\"Item already in priority queue.\")\n        self._data = np.append(self._data, item)\n        self._index[item[1]] = len(self._data) - 1\n        self._build_heap()\n\n    def __repr__(self) -> str:\n        return repr(self._data)\n\n\nclass Solution:\n    def minimumTotal(self, st: List[List[int]]) -> int:\n\n        def key_func(item: Tuple[int, int]) -> int:\n            return item[0]\n\n        def heuristic(st: List[List[int]]) -> int:\n            heap = Heap(items=st, key_func=key_func)\n            return sum(heap.extract_min()[0] for _ in range(len(heap)))\n\n        # return heuristic(st)\n        # [1,2,3]\n        # [4,5,6]\n        # [7,8,9]\n\n        # left to right: 1 + 2 + 3 + 4 = 10\n        # right to left: 5 + 6 + 9 + 8 = 19\n\n        # left to right: 7 + 8 + 9 + 7 = 30\n        # right to left: 6 + 9 + 8 + 6 = 26\n\n        # min_sum: 10 + 19 + 30 + 26 = 111\n        # max_sum: 1 + 2 + 3 + 4 = 10\n        # heuristic_cost: max_sum - min_sum\n\n        # left to right: 1 + 2 + 3 + 4 = 10\n        # right to left: 5 + 6 + 9 + 8 = 19\n\n        # left to right: 7 + 8 + 9 + 7 = 30\n        # right to left: 6 + 9 + 8 + 6 = 26\n\n        # min_sum: 10 + 19 + 30 + 26 = 111\n        # max_sum: 1 + 2 + 3 + 4 = 10\n        # heuristic_cost: max_sum - min_sum\n\n        # left to right: 1 + 2 + 3 + 4 = 10\n        # right to left: 5 + 6 + 9 + 8 = 19\n\n        # min_sum: 10 + 19 = 29\n        # max_sum: 1 + 2 + 3 + 4 = 10\n        # heuristic_cost: max_sum - min_sum\n\n        # left to right: 1 + 2 + 3 + 4 = 10\n        # right to left: 5 + 6 + 9 + 8 = 19\n\n        # min_sum: 10 + 19 = 29\n        # max_sum: 1 + 2 + 3 + 4 = 10\n        # heuristic_cost: max_sum - min_sum\n\n        # left to right: 1 + 2 + 3 + 4 = 10\n        # right to left: 5 + 6 + 9 + 8 = 19\n\n        # min_sum: 10 + 19 = 29\n        # max_sum: 1 + 2 + 3 + 4 = 10\n        # heuristic_cost: max_sum - min_sum\n\n        # left to right: 1 + 2 + 3 + 4 = 10\n        # right to left: 5 + 6 + 9 + 8 = 19\n\n        # min_sum: 10 + 19 = 29\n        # max_sum: 1 + 2 + 3 + 4 = 10\n        # heuristic_cost: max_sum - min_sum\n\n        # left to right: 1 + 2 + 3 + 4 = 10\n        # right to left: 5 + 6 + 9 + 8 = 19\n\n        # min_sum: 10 + 19 = 29\n        # max_sum: 1 + 2 + 3 + 4 = 10\n        # heuristic_cost: max_sum - min_sum\n\n        # left to right: 1 + 2 + 3 + 4 = 10\n        # right to left: 5 + 6 + 9 + 8 = 19\n\n        # min_sum:"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\n\"\"\"\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2 3\") == '1 1 1 1'\nassert solution(\"5 1 2 4 6\") == '4 4 4 4'\nassert solution(\"2 1 5 4 3\") == '1 1 1 1'\n\"\"\""
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\nassert solution('5\\n5 2 4 3 1') == '2'\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport sys\nfrom math import gcd\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"C\"\n\"\"\"\n\nimport pytest\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aca\") == \"A\"\n\"\"\""
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aca\\nc\\na\") == \"A\"\nassert solution(\"ca\\nca\\na\") == \"A\"\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aca\\nc\\nc\") == \"A\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aca\\naccc\\nca\") == \"A\"\nassert solution(\"a\\ncc\\nb\") == \"B\"\nassert solution(\"a\\nb\\nc\\nd\") == \"C\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''aca\naccc\nca''') == 'A'\n\nassert solution('''ada\nadc\ndca''') == 'A'\n\nassert solution('''ccc\ncbc\ncbb''') == 'C'\n\nassert solution('''abd\nadc\ndca''') == 'B'\n\nassert solution('''cab\ncba\nabc''') == 'A'"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aca\\naccc\\nca\\n') == 'A'\n\"\"\""
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aca\\ncac\\ncac\") == \"A\"\n\"\"\""
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''a\na\na''') == 'A'\nassert solution('''a\nb\nc''') == 'B'\nassert solution('''a\nb\nc''') == 'C'\nassert solution('''a\nb\na''') == 'A'\nassert solution('''b\nc\na''') == 'B'\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aca\\naccc\\nca\") == \"A\"\nassert solution(\"ac\\ncc\\nca\") == \"C\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"5 5 7\"\n) == \"YES\"\nassert solution(\n\"7 5 5\"\n) == \"YES\"\nassert solution(\n\"5 7 5\"\n) == \"NO\"\n\"\"\""
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"5 5 3\") == \"NO\"\nassert solution(\"3 5 7\") == \"YES\"\nassert solution(\"3 5 5\") == \"NO\"\nassert solution(\"7 5 3\") == \"YES\"\n\"\"\"\n\nA, B, C = map(int, input().split())"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5 7') == 'YES'\nassert solution('5 5 5') == 'NO'\nassert solution('5 7 5') == 'YES'\nassert solution('7 5 5') == 'NO'\nassert solution('5 5 5') == 'YES'\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"5 5 7\"\n) == \"YES\"\nassert solution(\n    \"8 8 2\"\n) == \"NO\"\nassert solution(\n    \"3 4 7\"\n) == \"YES\"\nassert solution(\n    \"2 3 4\"\n) == \"NO\"\nassert solution(\n    \"1 2 1\"\n) == \"YES\"\n\"\"\""
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 5 7''') == 'YES'\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 5 7') == 'YES'\nassert solution('5 6 7') == 'NO'\nassert solution('4 7 6') == 'NO'\nassert solution('4 4 5') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"5 5 7\"\n) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5 7\") == 'YES'\nassert solution(\"1 1 1\") == 'YES'\nassert solution(\"10 10 10\") == 'NO'\nassert solution(\"4 4 5\") == 'YES'\nassert solution(\"5 5 6\") == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"3 3 3\") == \"NO\"\nassert solution(\"4 7 8\") == \"NO\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"7\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"11\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n\") == \"11\"\n\"\"\"\n\nimport sys\nfrom typing import Dict\n\nclass Solution:\n    def __init__(self, n: int):\n        self.n = n\n        self.lucas_cache: Dict[int, int] = {}\n\n    def lucas_helper(self, n: int) -> int:\n        if n < 0:\n            return 0\n        if n == 0:\n            return 2\n        if n in self.lucas_cache:\n            return self.lucas_cache[n]\n\n        self.lucas_cache[n] = self.lucas_helper(n - 1) + self.lucas_helper(n - 2)\n        return self.lucas_cache[n]\n\n    def solution(self) -> int:\n        return self.lucas_helper(self.n)"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == '2\\n'\nassert solution('5\\n') == '11\\n'\nassert solution('86\\n') == '7229\\n'\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == '11'\n\"\"\""
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n\") == \"11\"\n\"\"\""
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"11\"\nprint(solution(\"5\"))"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n\nfrom typing import Iterable\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 2\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 2') == '7'\nassert solution('1 2 3') == '4'\nassert solution('1 2') == '1'\n\"\"\"\n\na, b, h = list(map(int, input().split(' ')))\nprint((a + b) * h / 2)"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 2') == '7'\n\"\"\""
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n4\\n2') == '7'\n\"\"\"\n\n\"\"\"\n* Solution *\n\"\"\"\n\na, b, h = [int(x) for x in input().split()]\nprint((a+b)*h/2)\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 2\") == \"7\"\n\"\"\""
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n4\\n2') == '7'\n\"\"\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a\\nb\\nc\\n') == 'a\\nb\\nc'\n\"\"\"\n\n\"\"\"\nWrite 5 lines of code to test the correctness of solution:\nYou are given a trapezoid. The lengths of its upper base, lower base, and height are a, b, and h, respectively.\nAn example of a trapezoid\nFind the area of this trapezoid.\n\n-----Constraints-----\n - 1\u2266a\u2266100\n - 1\u2266b\u2266100\n - 1\u2266h\u2266100\n - All input values are integers.\n - h is even.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\na\nb\nh\n\n-----Output-----\nPrint the area of the given trapezoid. It is guaranteed that the area is an integer.\n\n-----Sample Input-----\n3\n4\n2\n\n-----Sample Output-----\n7\n\nWhen the lengths of the upper base, lower base, and height are 3, 4, and 2, respectively, the area of the trapezoid is (3+4)\u00d72/2 = 7.\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 2\") == \"7\"\n\"\"\""
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 2\") == '7'\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4\\n2\") == \"7\"\nprint('Hooray!')\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\\n2\\n\") == \"8\"\nassert solution(\"2\\n1\\n2\\n\") == \"11\"\n\nimport pytest\nimport sys\n\n@pytest.mark.parametrize(\"stdin, expected\", [\n    (\"2\\n1\\n2\\n\", \"11\"),\n    (\"3\\n1\\n2\\n\", \"11\"),\n    (\"3\\n2\\n1\\n\", \"11\"),\n])\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\\n\") == \"11\"\n\"\"\"\n\nn = int(input())\nnums = [int(i) for i in input().split()]\nsum = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        sum += nums[i] * nums[j]\n\nprint(sum % (10**9+7))\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"14\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"60\"\n\"\"\"\n\nimport numpy as np\n\nN = int(input())\nA = list(map(int, input().split()))\n\nX = np.zeros((N, N), dtype=int)\nfor i in range(N):\n    for j in range(N):\n        if i!= j:\n            X[i, j] = A[i] * A[j]\n\nM = X.sum(axis=0) % (10 ** 9 + 7)\nprint(M.sum())\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"15\"\nassert solution(\"2\\n1 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom functools import lru_cache\nimport logging\nimport os\nimport sys\n\nsys.path.append(os.path.join(os.path.dirname(__file__), \"..\"))\n\nfrom intcode import IntComputer  # pylint: disable=wrong-import-position\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\\n\") == \"11\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == 11\n\"\"\"\n\n\"\"\"\nIndexes\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0\n0\n1\n1\n2\n2\n3\n3\n\n1 2 3\n1 2\n1\n0"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3') == 11\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3') == 11\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline())\nA = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nassert solution(\"5 5 6\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 2 3\n3 2 3\n''') == 'YES'\n\n\"\"\"\n3 3 3\n4 3 2\n\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"432\") == 'YES'\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"432\") == \"YES\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('432') == \"YES\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 3 2''') == 'YES'\n\"\"\"\n\nfrom collections import defaultdict\n\nnumber = input().strip().split()\n\nd = defaultdict(int)\n\nfor e in number:\n    d[e] += 1\n\nprint('YES' if '4' in d.values() else 'NO')\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('r g b') == 'YES'\nassert solution('4 3 2') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2\\n1\") == '9'\nassert solution(\"4 3 2\\n2\") == '30'\n\n\"\"\"\n\n\n\nA, B, C = list(map(int, stdin.readline().split()))\nK = int(stdin.readline())"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 11\\n1\\n\") == \"30\"\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\nassert solution(\"5 3 11\\n2\") == \"10\"\nassert solution(\"5 3 11\\n3\") == \"5\"\nassert solution(\"5 3 11\\n4\") == \"3\"\nassert solution(\"5 3 11\\n5\") == \"11\"\n\n\"\"\"\n\nfrom collections import deque\n\n\nclass Solution:\n    def __init__(self):\n        self.queue = deque()\n\n    def solution(self, stdin: str) -> str:\n        for line in stdin.split('\\n'):\n            A, B, C = map(int, line.split())\n            self.queue.append(A)\n            self.queue.append(B)\n            self.queue.append(C)\n\n        self.queue.popleft()\n        self.queue.popleft()\n        self.queue.popleft()\n\n        while self.queue:\n            n = self.queue.popleft()\n            n *= 2\n            self.queue.append(n)\n\n        return sum(self.queue)\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 11\") == \"30\"\nassert solution(\"5 3 11\") == \"30\"\nassert solution(\"1 2 3\") == \"6\"\nassert solution(\"1 1 1\") == \"3\"\nassert solution(\"1 2 3\") == \"6\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\n\"\"\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 11\\n1') == '30'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 11\") == \"30\"\n\n\"\"\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\n\n\"\"\"\n\nfrom __future__ import print_function\n\nimport sys"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 11\\n1') == '30'\n\"\"\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('aaaa') == 'Yes'\nassert solution('aaaaaaaa') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"No\"\nassert solution(\"caaabbbcc\") == \"No\"\nassert solution(\"\") == \"No\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aabbc\") == \"Yes\"\nassert solution(\"abcccba\") == \"Yes\"\nassert solution(\"abcccbba\") == \"No\"\n\"\"\""
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"Yes\"\nassert solution(\"abbccc\") == \"Yes\"\nassert solution(\"abbc\") == \"No\"\nassert solution(\"abcc\") == \"No\"\n\n\"\"\"\n\nimport sys\n\nw = sys.stdin.readline().rstrip()"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"abccba\") == \"No\"\nassert solution(\"aaaaaa\") == \"Yes\"\nassert solution(\"aabbcc\") == \"No\"\n\"\"\"\n\n\"\"\"\nIt is a very important problem to understand.\n\nIn classical backtracking problem, we only need to calculate the number of solutions for a particular subproblem.\n\nIn this problem, we need to calculate the number of beautiful strings.\n\nWe can follow the classical backtracking algorithm to solve this problem.\n\nBut for every string of length n, we have 2^(n-1) solutions.\n\nThe above problem is much more difficult than classical backtracking problem,\nand is harder to implement.\n\nThat's why we need to change the strategy here.\n\nWe need to keep track of which letters are used and how many times they are used.\n\nFor example, if letter a occurs 4 times, we need to mark it as a,\nbecause if we want to form a beautiful string, we need to use it 4 times.\n\nAnd if we already used a, we don't need to use it again.\n\nWe can save the used letters and how many times they are used for every string.\n\nWe can keep track of the used letters and how many times they are used by a hash table.\n\nAnd then we can use this hash table to solve this problem.\n\nThis is really smart algorithm.\n\nOne issue, we can't cache every result, because we don't know the final answer.\n\nAs for the final answer, we need to calculate 2^(n-1) solutions.\n\nIf we have the final answer in the hash table, we can calculate the answer by hashing the answer.\n\nFor example, \"aaaaaaaa\" can be form by \"a\" 5 times,\n\"a\" 4 times, \"a\" 4 times, \"a\" 4 times and \"a\" 5 times.\n\nIn the end, if we have the answer,\nwe can calculate the 2^(n-1) solutions by hashing the answer.\n\nWe can keep track of the count of solutions by counting the number of occurences of a letter.\n\nAnd we can hash the answer by using the string.\n\n\"\"\""
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"abcc\") == \"No\"\n\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abaccaba') == \"Yes\"\nassert solution('abaccab') == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('abccabb') == 'No'\nassert solution('abb') == 'No'\nassert solution('abc') == 'Yes'\n\n------\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == \"3\"\nassert solution(\"1 2\\n3 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'a'\nassert solution('abcd') == 'a'\nassert solution('abcdee') == 'a'\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n1 2\\n2 2\\n3 3\\n4 3\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 1\\n2 2\\n3 3') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 1\\n2 2\\n3 3') == '3'\n\"\"\""
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\\n\") == \"3\"\n\"\"\"\n\nfrom itertools import islice"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == \"3\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 3\n3 2\n3 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2 3\n3 2\n3 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2 2\n3 2\n3 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1 1\n3 2\n3 3\n\"\"\") == \"3\"\n\n-----\n2 2\n1 1\n2 2\n3 3\n\n-----\n5 5\n1 1\n2 2\n3 3\n4 4\n5 5\n\n-----\n2 2\n1 1\n2 2\n3 3\n\n-----\n1 1\n3 2\n3 3\n\n-----\n5 5\n1 1\n2 2\n3 3\n4 4\n5 5\n\n-----\n5 5\n1 1\n2 2\n3 3\n4 4\n5 5\n\n-----\n1 1\n1 1\n2 2\n3 3\n4 4\n5 5\n\n-----\n4 4\n1 1\n2 2\n3 3\n4 4\n5 5\n\n-----\n1 1\n2 2\n3 3\n4 4\n5 5\n\n-----\n1 1\n3 2\n3 3\n4 4\n5 5\n\n-----\n1 1\n1 1\n2 2\n3 3\n4 4\n5 5\n\n-----\n4 4\n1 1\n2 2\n3 3\n4 4\n5 5\n\n-----\n1 1\n1 1\n2 2\n3 3\n4 4\n5 5\n\n-----\n1 1\n1 1\n1 1\n2 2\n3 3\n4 4\n5 5\n\n-----\n1 1\n2 2\n3 3\n4 4\n5 5\n\n-----\n1 1\n1 1\n1 1\n1 1\n2 2\n3 3\n4 4\n5 5\n\n-----\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n\n-----\n4 4\n1 1\n2 2\n3 3\n4 4\n5 5\n\n-----\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n\n-----\n5 5\n1 1\n2 2\n3 3\n4 4\n5 5\n\n-----\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n\n-----\n4 4\n1 1\n2 2\n3 3\n4 4\n5 5\n\n-----\n1 1\n1 1\n1 1\n1 1\n1 1\n\n-----\n5 5\n1 1\n2 2\n3 3\n4 4\n5 5\n\n-----\n1 1\n1 1\n1 1\n1 1\n1 1\n\n-----\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == '3'\nassert solution(\"4 3\\n1 1\\n2 2\\n3 3\") == '2'\n\n------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n\n3 2\n1 2\n2 1\n1 1\n\nSample Output:\n\n1\n\nExplanation:\nThe 3rd smallest element after the two operations is 1.\n\n------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n\n4 1\n3 1\n5 2\n6 3\n7 4\n\nSample Output:\n\n4\n\nExplanation:\nAfter the first operation, 1 is added to the array. So 3 is the 1st smallest number.\nAfter the second operation, 2 is added to the array. So 3 is the 2nd smallest number.\nAfter the third operation, 3 is added to the array. So 3 is the 3rd smallest number.\nAfter the fourth operation, 4 is added to the array. So 3 is the 4th smallest number.\n\n------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n\n3 5\n1 2\n2 1\n1 1\n\nSample Output:\n\n1\n\nExplanation:\nAfter the first operation, 1 is added to the array. So 2 is the 1st smallest number.\nAfter the second operation, 2 is added to the array. So 2 is the 2nd smallest number.\nAfter the third operation, 1 is added to the array. So 2 is the 3rd smallest number.\nAfter the fourth operation, 1 is added to the array. So 2 is the 4th smallest number.\n\n------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n\n3 3\n1 1\n2 2\n3 3\n\nSample Output:\n\n2\n\nExplanation:\nAfter the first operation, 1 is added to the array. So 2 is the 1st smallest number.\nAfter the second operation, 2 is added to the array. So 2 is the 2nd smallest number.\nAfter the third operation, 3 is added to the array. So 2 is the 3rd smallest number.\n\n------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n\n4 3\n1 2\n2 1\n1 1\n1 1\n\nSample Output:\n\n1\n\nExplanation:\nAfter the first operation, 1 is added to the array. So 2 is the 1st smallest number.\nAfter the second operation, 2 is added to the array. So 2 is the 2nd smallest number.\nAfter the third operation, 1 is added to the array. So 2 is the 3rd smallest number.\nAfter the fourth operation, 1 is added to the array. So 2 is the 4th smallest number.\n\n------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n\n4 2\n1 2\n1 1\n1 1\n1 1\n\nSample Output:\n\n2\n\nExplanation:\nAfter the first operation, 1 is added to the array. So 2 is the 1st smallest number.\nAfter the second operation, 1 is added to the array. So 2 is the 2nd smallest number.\nAfter the third operation, 1 is added to the array. So 2 is the 3rd smallest number.\nAfter the fourth operation, 1 is added to the array. So 2 is the 4th smallest number.\n\n------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n\n2 1\n2 2\n\nSample Output:\n\n2\n\nExplanation:\nAfter the first operation, 2 is added to the array. So 2 is the 1st smallest number.\nAfter the second operation, 2 is added to the array. So 2 is the 2nd smallest number.\n\n------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n\n2 1\n3 3\n\nSample Output:\n\n3\n\nExplanation:\nAfter the first operation, 3 is added to the array. So 3 is the 1st smallest number.\nAfter the second operation, 3 is added to the array. So 3 is the 2nd smallest number.\n\n------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n\n2 1\n4 4\n\nSample Output:\n\n4\n\nExplanation:\nAfter the first operation, 4 is added to the array. So 4 is the 1st smallest number.\nAfter the second operation, 4 is added to the array. So 4 is the 2nd smallest number.\n\n------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n\n4 1\n4 4\n\nSample Output:\n\n4\n\nExplanation:\nAfter the first operation, 4 is added to the array. So 4 is the 1st smallest number.\nAfter the second operation, 4 is added to the array. So 4 is the 2nd smallest number.\nAfter the third operation, 4 is added to the array. So 4 is the 3rd smallest number.\nAfter the fourth operation, 4 is added to the array. So 4 is the 4th smallest number.\n\n------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n\n4 1\n3 3\n\nSample Output:\n\n3\n\nExplanation:\nAfter the first operation, 3 is added to the array. So 3 is the 1st smallest number.\nAfter the second operation, 3 is added to the array. So 3 is the 2nd smallest number.\nAfter the third operation, 3 is added to the array. So 3 is the 3rd smallest number.\nAfter the fourth operation, 3 is added to the array. So 3 is the 4th smallest number.\n\n------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n\n4 1\n2 2\n\nSample Output:\n\n2\n\nExplanation:\nAfter the first operation, 2 is added to the array. So 2 is the 1st smallest number.\nAfter the second operation, 2 is added to the array. So 2 is the 2nd smallest number.\nAfter the third operation, 2 is added to the array. So 2 is the 3rd smallest number.\nAfter the fourth operation, 2 is added to the array. So 2 is the 4th smallest number.\n\n------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n\n5 3\n1 2\n2 3\n2 2\n2 3\n1 1\n\nSample Output:\n\n2\n\nExplanation:\nAfter the first operation, 1 is added to the array. So 2 is the 1st smallest number.\nAfter the second operation, 2 is added to the array. So 2 is the 2nd smallest number.\nAfter the third operation, 2 is added to the array. So 2 is the 3rd smallest number.\nAfter the fourth operation, 2 is added to the array. So 2 is the 4th smallest number.\nAfter the fifth operation, 3 is added to the array. So 2 is the 5th smallest number.\n\n------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n\n4 3\n2 2\n1 1\n2 2\n2 1\n\nSample Output:\n\n1\n\nExplanation:\nAfter the first operation, 1 is added to the array. So 2 is the 1st smallest number.\nAfter the second operation, 2 is added to the array. So 2 is the 2nd smallest number.\nAfter the third operation, 2 is added to the array. So 2 is the 3rd smallest number.\nAfter the fourth operation, 2 is added to the array. So 2 is the 4th smallest number.\nAfter the fifth operation, 1 is added to the array. So 2 is the 5th smallest number.\n\n------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n\n5 3\n1 2\n1 1\n1 1\n2 2\n3 3\n\nSample Output:\n\n3\n\nExplanation:\nAfter the first operation, 1 is added to the array. So 2 is the 1st smallest number.\nAfter the second operation, 1 is added to the array. So 2 is the 2nd smallest number.\nAfter the third operation, 1 is added to the array. So 2 is the 3rd smallest number.\nAfter the fourth operation, 2 is added to the array. So 2 is the 4th smallest number.\nAfter the fifth operation, 3 is added to the array. So 2 is the 5th smallest number.\n\n------------------------------------------------------------------------------------------------------------------------\n\nSample Input:\n\n5 3\n2 1\n2 2\n2 2\n3"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n0 1\") == \"2\"\n\"\"\"\nimport unittest\nimport sys\nimport numpy as np\n\nfrom test import test\n\nclass Solution:\n    def painting(self, N: str, K: str) -> str:\n        count = 0\n        n = int(N)\n        k = int(K)\n        a = np.zeros((k,k))\n        for x in range(1, n):\n            a[x][x] = 1\n            count += 2**(x-1)\n        for x in range(1, n):\n            for y in range(x+1, n):\n                a[x][y] = 1\n                count += 2**(x-1)\n        return count"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n') == 2\n\"\"\"\n\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())\nprint(K**N // (K - 1))\n\n\"\"\"\nIn case we have a group of items with the same price, the first group of items is considered as the most expensive group and the others are considered as less expensive groups.\n\nTo illustrate this idea, consider the following two arrays of integers representing the prices of items:\n\nArr1 = [1, 3, 2, 7, 1]\nArr2 = [3, 6, 5, 7, 6]\n\nThe first group is [1, 3, 2] and the second group is [3, 6, 5, 7, 6]\n\nWe want to know the number of ways in which we can split these arrays into two groups of the same total price\n\nIn other words, we want to know how many ways there are to choose the first three items of the first array and the last three items of the second array in such a way that the total price is equal to the sum of the prices of the chosen items.\n\nWe will denote the possible combinations of the chosen items as $P_{a, b}$\n\nWe can denote the number of such combinations as $P_{a, b} = \\frac{n_a + 1}{2} \\times \\frac{n_b + 1}{2}$\n\nWe will assume that the total price of the chosen items is equal to $P_{a, b}$.\n\nIn the general case, the number of possible combinations is also given by\n$P_{a, b} = \\frac{n_{a + b + 1} + 1}{2}$\n\nNote that $a$ is the number of elements of the first array and $b$ is the number of elements of the second array.\n\nAs a reminder, in the general case, the total price is the sum of the prices of the chosen items multiplied by the number of combinations.\n\nIf we have only one array, the second array is not considered. Thus, the total price of the chosen items is $P_{a} = a$\n\n$P_{a}$ is an integer. So, we will consider a family of integers $f(x)$, where $f(x) = \\sum_{a = 1}^{x} P_{a}$\n\nSuppose that $a$ is the number of elements of the array and $f(a)$ is the total price of the chosen items. We will denote the family of integers $f(a)$ as $F_{a}$.\n\nThe following property holds:\n\n$F_{a + 1} = \\left \\{ f(a) + f(b) + 1, a + b > 0, a + b \\leq b + 1 \\right \\}$\n\nThe following property holds:\n\n$F_{a + 1} = F_{a} \\times \\frac{b}{a}$\n\nIf $b$ is a prime number, the above property holds as well:\n\n$F_{a + 1} = F_{a} \\times \\frac{b - 1}{a}$\n\nTo determine the number of possible combinations of two arrays, we simply have to determine the number of numbers that are evenly divisible by two from the range $[1, x]$.\n\nThe number of combinations is equal to $n_1 \\times n_2 \\times \\dots \\times n_n$.\n\nThe following property holds:\n\n$n_1 \\times n_2 \\times \\dots \\times n_n = \\frac{n}{2} \\times \\frac{n - 1}{2} \\times \\dots \\times \\frac{n - m}{2} \\times \\frac{m}{2}$\n\nTherefore, the number of combinations is equal to the sum of the following numbers:\n\n$\\frac{n}{2} \\times \\frac{n - 1}{2} \\times \\dots \\times \\frac{n - m}{2} \\times \\frac{m}{2} \\times \\dots \\times \\frac{2 m}{2}$\n\nWe can choose the numbers that are evenly divisible by two from the following range:\n\n$[0, n) \\times [0, n) \\times \\dots \\times [0, n) \\times [0, n)$\n\nNow let us find the sum of the even numbers in the range:\n\n$\\sum_{x = 0}^{n} \\sum_{y = 0}^{n} x + y$\n\nUsing the previous property, we will determine the number of combinations of two arrays as follows:\n\n$\\sum_{x = 0}^{n_1} \\sum_{y = 0}^{n_2} x + y = \\frac{n_1}{2} \\times \\frac{n_2}{2} \\times \\dots \\times \\frac{n_n}{2} \\times \\frac{2 m_n}{2}$\n\nFrom the following property, we can deduce the number of combinations as follows:\n\n$n_1 \\times n_2 \\times \\dots \\times n_n = \\sum_{x = 0}^{n_1} \\sum_{y = 0}^{n_2} x + y$\n\nThe number of combinations is given by the Catalan number.\n\nThe following is the general formula for the Catalan number:\n\n$C_n = \\frac{n!}{2^n} \\sum_{k = 0}^{n} \\frac{n}{k!} C_k$\n\nThe Catalan number for a number $n$ is an integer.\n\nGiven $n$, we can determine the number of combinations as follows:\n\n$C_n = \\frac{n!}{2^n} \\sum_{k = 0}^{n} \\frac{n}{k!} C_k$\n\nFor example, when $n = 6$, we have:\n\n$C_6 = \\frac{6!}{2^6} \\sum_{k = 0}^{6} \\frac{6}{k!} C_k = \\frac{6!}{2^6} \\sum_{k = 0}^{3} \\frac{6}{k!} C_k + \\frac{6}{k!} C_4$\n\nUsing the previous property, we can deduce the number of combinations as follows:\n\n$C_n = \\frac{n!}{2^n} \\sum_{k = 0}^{n} \\frac{n}{k!} C_k$\n\nNote that if $n$ is a prime number, then $C_n = 1$\n\nThe number of combinations is equal to $n! \\times \\left({\\frac{n}{n + 1} \\right)^{n + 1}$\n\n$n! \\times \\left({\\frac{n}{n + 1} \\right)^{n + 1} = n! \\times \\left({\\frac{n}{n + 1} \\right)^n$\n\n$n! \\times \\left({\\frac{n}{n + 1} \\right)^n = \\frac{n!}{(n + 1)!} \\left({\\frac{n}{n + 1} \\right)^n$\n\n$n! \\times \\left({\\frac{n}{n + 1} \\right)^n = \\frac{n!}{(n + 1)!} \\left({\\frac{n}{n + 1} \\right)^n$\n\n$n! \\times \\left({\\frac{n}{n + 1} \\right)^n = \\frac{n!}{(n + 1)!} \\left({\\frac{n}{n + 1} \\right)^n$\n\n$n! \\times \\left({\\frac{n}{n + 1} \\right)^n = \\frac{n!}{(n + 1)!} \\left({\\frac{n}{n + 1} \\right)^n$\n\n$n!"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\n'''"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"2\"\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2') == 2\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n') == 2\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n0 1\") == \"2\"\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"4 2\") == \"8\"\nassert solution(\"4 4\") == \"1\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"2\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 3\\n5 10 15\") == 10\n'''\nimport sys\nimport numpy as np\nimport math"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2 2') == '0'\nassert solution('2 1') == '1'\nassert solution('1 1') == '0'\nassert solution('2 3') == '3'\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n1 2\") == '0'\nassert solution(\"1 2\\n4 5\") == '3'\nassert solution(\"2 2\\n1 1\") == '0'\nassert solution(\"2 2\\n1 2\") == '1'\n\"\"\""
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 5\\n1 1\\n2 4\\n3 8\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\n\"\"\""
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 3\\n5 10 15\") == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\n\n\"\"\""
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\n\"\"\"\n\n\"\"\"\n### Solution\n1. For each house, we need to know how many steps we need to go from the house to the center of the pond, and how many steps we need to go from the center of the pond to the house\n2. We can calculate the minimum distance for the first house by calculating the minimum distance for the last house, and adding the minimum distance of the last house to the minimum distance of the first house.\n3. We can calculate the minimum distance for each house from the previous house by calculating the minimum distance between the house and the center of the pond, and adding the distance of the house to the center of the pond to the minimum distance of the last house.\n4. The minimum distance for the first house is the minimum distance for the last house, and the minimum distance for each house from the previous house.\n5. After we have calculated the minimum distance for the first house, we can go through the houses from the first to the last, and calculate the minimum distance for each house from the previous house.\n6. Then, we can go through all the houses and calculate the minimum distance between the house and the center of the pond, and add the distance between the house and the center of the pond to the minimum distance of the last house.\n7. The minimum distance is the minimum of all the minimum distances.\n8. We can start from the 1-st house, and go to the 2-nd and 3-rd houses in this order, and calculate the minimum distance for each house from the previous house.\n9. Then, we can go through all the houses and calculate the minimum distance between the house and the center of the pond, and add the distance between the house and the center of the pond to the minimum distance of the last house.\n10. The minimum distance is the minimum of all the minimum distances.\n\"\"\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\n\"\"\"\n\n\"\"\"\nfrom typing import List\n\nK, N = [int(x) for x in input().split()]\nA = [int(x) for x in input().split()]\n\ntotal = K\nfor i in range(1, N):\n    total += A[i-1] - A[i]\nprint(total)\n\"\"\"\n\nimport sys\n\nK, N = [int(x) for x in sys.stdin.readline().split()]\nA = [int(x) for x in sys.stdin.readline().split()]\n\ntotal = K\nfor i in range(1, N):\n    total += A[i] - A[i-1]\nprint(total)\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 2 7') == '15'\nassert solution('5 2 2 7') == '14'\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 5 2 7''') == '15'\nassert solution('''1 10 1 1''') == '10'\nassert solution('''1 1 10 1''') == '10'\n\"\"\"\n\nA, B, C, D = (int(i) for i in stdin.split())\nmax_ = max(A, B, C, D)\nmin_ = min(A, B, C, D)\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '10'\nassert solution('4 5 6 7') == '18'\nassert solution('5 5 5 5') == '25'\nassert solution('1 1 1 1') == '1'\nassert solution('1 1 1 2') == '2'\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"3 5 2 7\") == \"15\"\n\n-----\n1\n1\n1\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794\n795\n796\n797\n798\n799\n800\n801\n802\n803\n804\n805\n806\n807\n808\n809\n810\n811\n812"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 2 7') == '15'\nassert solution('5 3 2 7') == '14'\nassert solution('3 5 2 2') == '10'\nassert solution('5 3 2 2') == '14'\n\"\"\""
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 2 7\") == \"15\"\nassert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"4 5 2 7\") == \"15\"\nassert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"3 5 2 7\") == \"15\"\n\"\"\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n\"\"\"\n\nimport sys\nimport math\n\nstdin = sys.stdin.readlines()\nstdin = [list(map(int, line.split())) for line in stdin]\n\na = stdin[0][0]\nb = stdin[0][1]\nc = stdin[1][0]\nd = stdin[1][1]\n\nl1 = max(a, b)\nl2 = max(c, d)"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5 2 7') == '15'\nassert solution('2 2 2 2') == '4'"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n\"\"\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4 3 2') == '15'\nassert solution('3 5 2 7') == '14'"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AC\") == \"AC 3\"\nassert solution(\"WA\") == \"WA 1\"\nassert solution(\"TLE\") == \"TLE 2\"\nassert solution(\"RE\") == \"RE 0\"\nassert solution(\"ABC\") == \"ABC 0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''6\nAC\nTLE\nAC\nAC\nWA\nTLE''') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\nassert solution('''3\nTLE\nAC\nAC\nWA''') == 'AC x 2\\nTLE x 2\\nRE x 1'\nassert solution('''1\nAC''') == 'AC x 1'\nassert solution('''4\nWA\nWA\nAC\nAC''') == 'WA x 2\\nAC x 2'\nassert solution('''2\nAC\nWA''') == 'AC x 1\\nWA x 1'\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AC') == 'AC 3'\nassert solution('WA') == 'WA 1'\nassert solution('TLE') == 'TLE 2'\nassert solution('RE') == 'RE 0'\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AC\") == 'AC x 3'\nassert solution(\"WA\") == 'WA x 1'\nassert solution(\"TLE\") == 'TLE x 2'\nassert solution(\"RE\") == 'RE x 0'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('AC\\nTLE\\nAC\\nAC\\nWA') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n'''"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AC\") == \"AC x 3\"\nassert solution(\"WA\") == \"WA x 1\"\nassert solution(\"TLE\") == \"TLE x 2\"\nassert solution(\"RE\") == \"RE x 0\"\n\"\"\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AC\\nWA\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AC x 3\") == \"AC 3\"\nassert solution(\"WA x 1\") == \"WA 1\"\nassert solution(\"TLE x 2\") == \"TLE 2\"\nassert solution(\"RE x 0\") == \"RE 0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AC\") == \"AC x 3\"\nassert solution(\"WA\") == \"WA x 1\"\nassert solution(\"TLE\") == \"TLE x 2\"\nassert solution(\"RE\") == \"RE x 0\"\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AC') == 'AC x 3'\nassert solution('WA') == 'WA x 1'\nassert solution('TLE') == 'TLE x 2'\nassert solution('RE') == 'RE x 0'\nassert solution('AC') == 'AC x 3'\n\"\"\""
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('21') == '27'\n\"\"\"\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"21\") == \"27\"\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"21\") == \"27\"\nprint(solution(\"21\"))\n\n\"\"\"\nimport math"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"21\") == \"27\"\nprint(solution(\"21\"))\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\nimport ast"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('21') == '27'\nprint('Test pass.')"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('21') == '27'\n\"\"\""
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('21') == '27'\nassert solution('23') == '1'\nassert solution('10') == '14'\nassert solution('24') == '8'\n\"\"\"\nimport sys"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '21'\n) == '27'\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('21') == '27'\nprint(solution('21'))\n\nSolution1:\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\") == \"9\"\nassert solution(\"1 1\") == \"error\"\nassert solution(\"6 9\") == \"error\"\n\nprint(\"Passed\")\n\n\"\"\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5\") == \"12\"\nassert solution(\"10 3\") == \"error\"\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 3') == '9'"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 3') == '9'\nassert solution('7 2') == 'error'\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\") == \"11\"\nassert solution(\"5 3\") == \"8\"\nassert solution(\"6 3\") == \"11\"\nassert solution(\"1 1\") == \"error\"\nassert solution(\"1 10\") == \"error\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 3\\n') == '9'\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\") == \"10\"\nassert solution(\"7 4\") == \"error\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"5 6\") == \"error\"\nassert solution(\"8 2\") == \"10\"\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\") == \"8\"\nassert solution(\"6 3\") == \"error\"\n\n\"\"\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 3') == '9'\nassert solution('5 10') == 'error'\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 3') == '9'\n\nassert solution('1 2') == 'error'\n\nassert solution('1 0') == '1'\n\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\nprint(solution(\"4\\n2 3 7 9\"))\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3 7 9\") == \"7\"\n\"\"\"\n\nimport sys\nimport os\nimport time\nimport builtins\nimport subprocess\nimport threading\n\n\nclass Timer(object):\n    \"\"\"\n    Timer class\n    \"\"\"\n    def __init__(self, duration):\n        self.duration = duration\n        self.end_time = time.time() + duration\n\n    def is_expired(self):\n        return time.time() > self.end_time\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 7 9\\n') == 7\nassert solution('4 3 7 9\\n') == 7\nassert solution('4 3 3\\n') == 3\nassert solution('3 3\\n') == 0\nassert solution('4 3 0\\n') == 3\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 3 7 9') == '7'\n\n\"\"\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 3 7 9\") == \"7\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 7 9\") == 7\n\"\"\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3 7 9') == '7'\n\n---"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3\\n1 4\\n2 5\\n3 6') == 'Yes'\nassert solution('1 3\\n1 4\\n2 4\\n3 5') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3\") == \"Yes\"\nassert solution(\"4 1\") == \"Yes\"\nassert solution(\"7 2\") == \"No\"\nassert solution(\"12 8\") == \"Yes\"\nassert solution(\"10 2\") == \"No\"\n\"\"\""
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3\\n1 3\\n2 3') == 'Yes'\nassert solution('1 3\\n3 3\\n2 3') == 'Yes'\nassert solution('1 3\\n3 3\\n1 2') == 'No'\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3\") == \"Yes\"\n\"\"\"\nfrom typing import List, Tuple\n\nIntTuple = Tuple[int, int]\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1 3''') == \"Yes\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"Yes\"\n\"\"\"\n\nx, y = [int(elem) for elem in stdin.split(' ')]"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3\\n') == 'Yes'\nassert solution('2 4\\n') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3\\n2 4') == 'No'\n\nassert solution('2 4\\n3 1') == 'No'\n\nassert solution('1 4\\n2 3') == 'Yes'\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3') == 'Yes'\nassert solution('5 9') == 'No'"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3\\n') == 'Yes'\nassert solution('3 5\\n') == 'No'\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4') == 'Even'\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4') == \"Even\"\nprint(solution('3 4'))\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n'''"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4') == 'Even'\nassert solution('8 9') == 'Odd'\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\n\"\"\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\"\"\"\n\nfrom util import get_input\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == 'Even'\n\"\"\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 6\\n\") == \"2\"\n\n-------\nThis solution uses the fact that two c-shaped pieces cannot be combined into a s-shaped piece without\nremoving a square. Therefore, the number of s-shaped pieces is always less than the number of c-shaped pieces.\n\nThis solution is similar to solution (b).\nThe only difference is that in solution (b), it is possible to combine two c-shaped pieces into a s-shaped piece.\nIn this solution, we have to find the largest s-shaped piece that can be created.\nThis piece cannot be the only piece in the group, since it cannot be combined with itself.\n\nThis solution is based on the idea that we have a group of c-shaped pieces and a group of s-shaped pieces.\nWe can combine the c-shaped pieces into s-shaped pieces if they are not in the same row.\nIf they are in the same row, we cannot combine the c-shaped pieces.\n\nIf we are able to combine two c-shaped pieces into a s-shaped piece, then we can combine the two s-shaped pieces into\none s-shaped piece. Therefore, the number of s-shaped pieces is the number of c-shaped pieces minus two.\n\nThis solution iterates through all combinations of s-shaped pieces and c-shaped pieces.\nFor each combination, it determines whether or not the combination can be done.\nIf the combination can be done, it is added to the answer.\n\ntime O(N * M * 2^N)\n\"\"\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 6\\n') == '2'\n'''"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 2\\n3 4\\n5 6\\n') == '3'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 6\") == 2\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 6\\n') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 6') == '2'\nassert solution('1 6', True) == '1'\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 6') == '2'\n\nassert solution('2 10') == '1'\n\nassert solution('1 10') == '1'\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2') == '1'\nassert solution('1 3') == '2'\nassert solution('6 6') == '2'\n\"\"\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 6\\n') == 2\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"4 6\") == \"2\"\nassert solution(\"8 4\") == \"1\"\nassert solution(\"8 14\") == \"1\"\n\"\"\"\n\n\"\"\"\nSolution 2\n\nThe naive solution to this problem is to try every combination of s and c pieces and keep track of the number of\nscc groups created. However, the number of combinations of s and c pieces can be very large. For example, if we had\ns = 10 and c = 4 and n = 10, there are 452,822,532,460,890,450 combinations of s and c pieces, so that would take\nmore than 10^12 steps, and we could never finish.\n\nTherefore, we can try to make this problem more efficient by using some observations.\n\nThe first observation is that s and c pieces are distinct. If we put s pieces on the left side of the figure, they\nwill not be equal to c pieces. That is, there is some c piece which does not have a corresponding s piece.\n\nWe can define a helper function which takes in an array of s pieces on the left and c pieces on the right and returns\nwhether or not the Scc groups are equal. If all the s pieces are distinct to all the c pieces, then the number of Scc\ngroups are equal to the number of s pieces.\n\nAfter that, we can use dynamic programming to try to solve this problem. In a dynamic program, we can create a\nrecursive function to try and find the max number of Scc groups. The function should return a number of Scc groups\nand a list of s pieces which are used to create them.\n\nOnce we have this function, we can use a bottom-up dynamic programming approach to find the max number of Scc groups.\nTo do this, we will create a list of integers which represent the number of Scc groups. This list is initialized with\nnumbers corresponding to the number of s pieces. We will use this list to keep track of the max number of Scc groups\nthat we can create. We will also keep track of the used s pieces in this list. For each c piece, we will try to combine\nit with the s pieces on the left to form a new s piece. We will then compare the number of s pieces used before this\ncombination to the number of s pieces used after. If the number of s pieces used after is greater, then we can\nconsider this to be a new Scc group. Then, we will check to see if this combination is already in our list of Scc\ngroups. If it is, we will not consider this combination to be a new Scc group. Otherwise, we will add this Scc group\nto our list of Scc groups and increment the number of s pieces used. After this, we will repeat the process for each\ns piece on the left and each c piece on the right.\n\nOnce we have finished iterating through all s pieces on the left, we can see if the number of s pieces used is greater\nthan the max number of s pieces used. If it is, then we will update the max number of Scc groups.\n\nComplexity:\n O(n^2) time\n O(n) space\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3\n2 1 4\n2\n1 1\n2 3\"\"\") == \"6\\n9\"\n\"\"\"\nimport re\n\nimport stdin_utils\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 1 4\\n2\\n1 1\\n2 3\\n') == '6\\n9\\n'\nassert solution('4\\n2 1 4\\n2\\n1 1\\n2 3\\n') == '6\\n9\\n'\n\"\"\"\n\nn = int(stdin.readline().strip())\nt_arr = list(map(int, stdin.readline().strip().split()))\nm = int(stdin.readline().strip())\np_arr = list(map(int, stdin.readline().strip().split()))\nx_arr = list(map(int, stdin.readline().strip().split()))\n\ndp = [[0] * n for _ in range(m)]\n\nfor i in range(m):\n    for j in range(n):\n        if i == 0:\n            dp[i][j] = x_arr[j]\n        else:\n            dp[i][j] = dp[i - 1][j] + x_arr[j]\n\nfor i in range(m):\n    for j in range(n):\n        for k in range(j, n):\n            if i == 0:\n                dp[i][j] = max(dp[i][j], dp[i][k] + x_arr[j])\n            else:\n                dp[i][j] = max(dp[i][j], dp[i - 1][k] + x_arr[j])\n\nfor i in range(m):\n    print(dp[i][n - 1])"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n3\n2 1 4\n2\n1 1\n2 3\n\"\"\"\n) == \"\"\"\n6\n9\n\"\"\"\n\nassert solution(\n\"\"\"\n3\n2 1 4\n2\n1 1\n2 3\n\"\"\"\n) == \"\"\"\n6\n9\n\"\"\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == expected_output\n\"\"\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 1 4\\n2\\n1 1\\n2 3\\n') == '6\\n9\\n'\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\\\n2 1 4\\\\n2\\\\n1 1\\\\n2 3\\\\n\") == \"6\\\\n9\"\nprint(solution(\"3\\\\n2 1 4\\\\n2\\\\n1 1\\\\n2 3\\\\n\"))"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n') == '6\\n9'\n\n\"\"\"\n\nn = int(stdin.readline().rstrip())\nt = list(map(int, stdin.readline().rstrip().split(' ')))\nm = int(stdin.readline().rstrip())\np = list(map(int, stdin.readline().rstrip().split(' ')))\nx = list(map(int, stdin.readline().rstrip().split(' ')))\n\nt = [t[i] * x[i] for i in range(m)]\n\nprint(sum(t))\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\\n\") == \"2000\"\n\"\"\""
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\"\n\nimport sys\nfrom decimal import Decimal\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == \"2000\"\nassert solution('1000 7\\n1 3 4 5 6 7 8') == \"1700\"\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\"\n\n\"\"\"\nclass Solution:\n    def solution(self, N, K, D):\n        numbers = set()\n        for i in D:\n            numbers.add(i)\n        numbers.remove(0)\n        numbers.remove(1)\n        numbers.remove(2)\n\n        cur = 10\n        while cur < N:\n            numbers.add(cur)\n            cur = cur * 10 + 2\n\n        for i in range(10):\n            numbers.remove(i)\n            numbers.remove(i * 10 + 2)\n            numbers.add(i * 10 + 1)\n            numbers.add(i * 10 + 3)\n\n        return max(numbers)\n\"\"\"\n\n\"\"\"\nclass Solution:\n    def solution(self, N, K, D):\n        numbers = set()\n        for i in D:\n            numbers.add(i)\n        numbers.remove(0)\n        numbers.remove(1)\n        numbers.remove(2)\n\n        cur = 10\n        while cur < N:\n            numbers.add(cur)\n            cur = cur * 10 + 2\n\n        for i in range(10):\n            numbers.remove(i)\n            numbers.remove(i * 10 + 2)\n            numbers.add(i * 10 + 1)\n            numbers.add(i * 10 + 3)\n\n        return max(numbers)\n\"\"\"\n\n\"\"\"\nclass Solution:\n    def solution(self, N, K, D):\n        numbers = set()\n        for i in D:\n            numbers.add(i)\n        numbers.remove(0)\n        numbers.remove(1)\n        numbers.remove(2)\n\n        cur = 10\n        while cur < N:\n            numbers.add(cur)\n            cur = cur * 10 + 2\n\n        for i in range(10):\n            numbers.remove(i)\n            numbers.remove(i * 10 + 2)\n            numbers.add(i * 10 + 1)\n            numbers.add(i * 10 + 3)\n\n        return max(numbers)\n\"\"\"\n\nclass Solution:\n    def solution(self, N, K, D):\n        numbers = set()\n        for i in D:\n            numbers.add(i)\n        numbers.remove(0)\n        numbers.remove(1)\n        numbers.remove(2)\n\n        cur = 10\n        while cur < N:\n            numbers.add(cur)\n            cur = cur * 10 + 2\n\n        for i in range(10):\n            numbers.remove(i)\n            numbers.remove(i * 10 + 2)\n            numbers.add(i * 10 + 1)\n            numbers.add(i * 10 + 3)\n\n        return max(numbers)"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n\"\"\"\n\nn, k = input().split()\n\nn = int(n)\nk = int(k)\n\nl = list(map(int, input().split()))\n\ns = 0\n\nfor i in range(0, len(l)):\n    for j in range(0, l[i]):\n        s = s + 10**j\n\ns = str(s)\n\nc = 0\n\nfor i in s:\n    if i == '0' or i == '2':\n        c = c + 1\n\nprint(s[:len(s) - c])\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\""
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\\n\") == \"2000\"\n\"\"\""
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\\n\") == \"2000\"\n\"\"\"\n\nn,k=input().split()\na=input().split()\n\nb=[int(x) for x in a]\n\nfor i in range(len(b)):\n    if b[i]!=0 and b[i]!=2:\n        b[i]=0\nprint(*b)"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n\"\"\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\n\"\"\"\n\nimport sys\n\nN, M = map(int, input().split())\nH = list(map(int, input().split()))\n\nA = set()\nB = set()\n\nfor _ in range(M):\n    a, b = map(int, sys.stdin.readline().split())\n    if a in A:\n        A.remove(a)\n    if b in B:\n        B.remove(b)\n    A.add(a)\n    B.add(b)\n\nprint(len(A) + len(B))\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\\n') == '2'\n\"\"\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n4 3\n1 2 3 4\n1 3\n2 3\n2 4\n''') == '2'\nassert solution('''\n5 5\n1 2 3 4 5\n1 2\n2 3\n2 4\n3 4\n4 5\n''') == '3'\nassert solution('''\n2 1\n1 1\n1 1\n''') == '1'\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\"\n\nN, M = map(int, input().split())\nA = [int(i) for i in input().split()]\nB = [int(i) for i in input().split()]\ngood = []\nfor i in range(len(A)):\n    for j in range(len(B)):\n        if B[j] >= A[i]:\n            good.append(i + 1)\n            break\nprint(len(set(good)))\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\\n\") == \"2\"\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict\n\nn, m = [int(i) for i in stdin.readline().rstrip().split(' ')]\nobs = {int(i): int(j) for i, j in enumerate(stdin.readline().rstrip().split(' '))}\nroads = defaultdict(list)\n\nfor _ in range(m):\n    a, b = [int(i) for i in stdin.readline().rstrip().split(' ')]\n    roads[a].append(b)\n    roads[b].append(a)\n\ngood_obs = set(obs.keys())\ngood_obs_from_road = defaultdict(set)\n\nfor i in obs.keys():\n    for j in roads[i]:\n        good_obs_from_road[i] |= good_obs\n        good_obs -= set([obs[j]])\n\ngood_obs = set([i for i in obs.keys() if obs[i] not in good_obs_from_road[obs[i]]])\nprint(len(good_obs))\n\"\"\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\n\"\"\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\nassert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\nassert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\nassert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\nassert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"10\"\nassert solution(\"4 3\") == \"10\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"10\"\nprint(solution(\"4 3\"))"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"7\"\nassert solution(\"4 3\") == \"10\"\nassert solution(\"1 1\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3\") == \"10\"\n\"\"\"\n\nN, K = map(int, stdin.split())\n\nprint(2**N - 1 + K)\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"10\"\n\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"10\"\nassert solution(\"6 2\") == \"18\"\n\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 9\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0435\u0433\u043e \u043d\u0430 \u044d\u043a\u0440\u0430\u043d.\n\u0414\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u0435 \u0434\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438:\n\u0421\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432\n\u0421\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u043f\u043e \u043c\u043e\u0434\u0443\u043b\u044e\n\u0421\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u043f\u043e \u043c\u043e\u0434\u0443\u043b\u044e \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438\n\u0412\u0435\u043a\u0442\u043e\u0440\u0430 a \u0438 b \u0441 \u043a\u0430\u0436\u0434\u044b\u043c \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u043c \u043e\u0442\u0434\u0435\u043b\u0435\u043d\u044b \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438\n\u0412\u0435\u043a\u0442\u043e\u0440\u0430 a \u0438 b \u0432\u0441\u0435\u0433\u0434\u0430 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c \u043e\u0434\u0438\u043d\u043d\u0430\u043a\u043e\u0432\u044b\u043c, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0441 \u044d\u0442\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u0430 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 n \u0438 m (1 \\leq n, m \\leq 100) - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0435. \u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 n \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f m \u0447\u0438\u0441\u0435\u043b, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438 - \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0442\u0440\u0438\u0446\u044b.\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u0430 \u0438\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u044b\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u0435\u0451 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435, \u0432 \u0432\u0438\u0434\u0435 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0441\u0442\u0435 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0442 0 \u0434\u043e 10.\n\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0432 \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u0434\u0432\u0443\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c:\na) \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0421\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435,\n\u0431) \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0421\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043f\u043e \u043c\u043e\u0434\u0443\u043b\u044e,\n\u0441) \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0421\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043f\u043e \u043c\u043e\u0434\u0443\u043b\u044e \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438.\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u0435\u0442 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u0443\u044e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \u0441\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u044b\u043c\u0438 \u0432\u0435\u043a\u0442\u043e\u0440\u0430\u043c\u0438.\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 10\n\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u0432\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u0430 a \u0438 b, \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435.\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u0430 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0447\u0438\u0441\u043b\u0430 a \u0438 b (a \u0438 b \u043b\u044e\u0431\u044b\u0435, \u043d\u0435 \u0440\u0430\u0432\u043d\u044b\u0435 \u043d\u0443\u043b\u044e) \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438\u0445 \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f.\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u0430 \u0438\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u044b\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \ufffd"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '0'\nassert solution('0.1') == '0'\nassert solution('0.2') == '0'\nassert solution('0.3') == '0'\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\nprint(solution('1'))\nprint(solution('0'))"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"0.5\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1.5\") == \"0\"\nassert solution(\"1.51\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 0\nassert solution('0') == 1\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0') == 0\nassert solution('1') == 1\n\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('0') == '0'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12+5\") == 17\nassert solution(\"125\") == 26\nassert solution(\"1+2+5\") == 8\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12345') == '12345'\nassert solution('1234+5') == '1234+5'\nassert solution('123+45') == '123+45'\nassert solution('123+45+678') == '123+45+678'\nassert solution('123+45+678+9') == '123+45+678+9'"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == expected\n\"\"\"\n\n\"\"\"\nHints:\n\"\"\"\n\n#####################################################\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"125\") == \"176\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('125') == '176'\n\"\"\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('125') == '176'\nassert solution('111') == '111'\n\n-------Test 1--------\nprint(solution(input()))\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"125\") == \"176\"\n\"\"\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('125') == '176'\nassert solution('1+2+4+5') == '14'\nassert solution('12+5+7+8') == '37'\nassert solution('12+14+15+18') == '54'\nassert solution('13+14+15+16+18') == '64'\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12+5\") == \"17\"\nassert solution(\"1+2+5\") == \"8\"\nassert solution(\"1+2+4\") == \"9\"\n\"\"\"\n\n\"\"\"\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n******\n****"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"1+1\") == \"2\"\nassert solution(\"1+2+1\") == \"4\"\nassert solution(\"1+2+2\") == \"7\"\nassert solution(\"1+2+3\") == \"10\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n1 2 3 4 5 6') == '1'\n\"\"\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 3 4 5') == '1'\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n\"\"\"\nfrom functools import reduce\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1 2 3 \\n') == '1'\nprint(solution(input()))\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n1 2 3 4 5 6') == '1'\n\n---\n\nimport math\nimport sys\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5 6\\n\") == \"1\"\n\"\"\"\n\nfrom math import gcd\nfrom typing import List\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == \"5\"\nassert solution('4') == \"4\"\nassert solution('3') == \"3\"\n\"\"\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\") == \"8\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20') == '15800'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\nprint(N*800 - 200*15)\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20') == '15800'\n\"\"\"\n\nN = int(input())\nprint(200*N+16000)\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20\") == \"15800\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n3\") == \"11\"\nassert solution(\"2\\n4\") == \"14\"\nassert solution(\"5\\n6\") == \"43\"\n\"\"\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20\") == \"15800\"\n\n\"\"\"\n\nN = int(stdin.readline().strip())\n\nmoney = 0\nfor i in range(N):\n    money += 200\n    money += 800 * 15\nmoney -= 2000\n\nprint(money)\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20\") == \"15800\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20') == '15800'\n\nprint(solution('20'))\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20\") == \"15800\"\n\"\"\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ant') == 'abc'\n\n\"\"\"\n\ngrid = []\nfor i in range(3):\n    grid.append(input())\n\nletters = \"\"\n\nfor i in range(3):\n    for j in range(3):\n        letters += grid[i][j]\n\nprint(letters)\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ant\") == \"abc\"\n\"\"\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin_1) == stdout_1\nassert solution(stdin_2) == stdout_2\nassert solution(stdin_3) == stdout_3\n\n\"\"\"\n\n\nimport unittest\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\nimport unittest\nimport numpy as np\n\nclass Tests(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution(\"ant\"), \"abc\")\n        self.assertEqual(solution(\"obe\"), \"abc\")\n        self."
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\nassert solution(\"amq\") == \"bc\"\n\"\"\"\n\nfrom string import ascii_lowercase"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ant') == 'abc'\nassert solution('ant') == 'abc'\nassert solution('a,nt') == 'abc'\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101') == 2\nprint(solution(stdin))\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"101\") == \"2\"\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101\") == \"2\"\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"101\") == \"2\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101\") == 2\nprint(solution(\"101\"))\n\"\"\"\n\n\"\"\"\n\"r\"    Open a file for reading only.\n\"r+\"    Open a file for reading and writing.\n\"rb\"    Open a file for reading only in binary format.\n\"rb+\"    Open a file for reading and writing in binary format.\n\"wb\"    Open a file for writing only in binary format.\n\"wb+\"    Open a file for reading and writing in binary format.\n\"a\"    Open for appending at the end of the file without truncating it.\n\"a+\"    Open for both appending at the end of the file and reading from the\n    beginning, with the file pointer placed after the end of the file.\n\n\"t\"    Open in text mode.\n\"t+\"    Open in text mode for reading and writing.\n\"b\"    Open in binary mode.\n\"b+\"    Open in binary mode for reading and writing.\n\n\"+\"    Open a file for updating (reading and writing)\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101\") == 2\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"101\") == 2\nprint(solution(\"101\"))\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101\") == 2\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101\") == 2\n\n---\n>>> 5\n\n>>> 5\n\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"101\") == 2\n\"\"\"\n\ns_1 = int(input())\ns_2 = int(input())\ns_3 = int(input())\n\ncount = 0\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"5 3 10000 9000\"\n) == \"48000\"\n\n\"\"\"\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n3\n10000\n9000\n''') == '48000'\n\nassert solution('''5\n3\n10000\n9000\n''') == '48000'\n\nassert solution('''5\n3\n10000\n9000\n''') == '48000'\n\nassert solution('''5\n3\n10000\n9000\n''') == '48000'\n\nassert solution('''5\n3\n10000\n9000\n''') == '48000'"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5 3 10000 9000') == '48000'\nassert solution('5 3 10000 9000') == '48000'\nassert solution('100 1 1000 1000') == '100000'\n\"\"\"\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 10000 9000\") == \"48000\"\n\"\"\"\n\nn, k, x, y = (int(i) for i in input().split())\n\nprint(k*x + (k+1)*y)"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n5\n3\n10000\n9000\n''') == '48000'\nprint('Test 1: pass')\n\nassert solution('''\n5\n1\n10000\n9000\n''') == '9000'\nprint('Test 2: pass')\n\nassert solution('''\n5\n1\n10000\n9000\n''') == '9000'\nprint('Test 3: pass')"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 10001 10002\") == \"20000\"\nprint(\"Test 1 PASSED\")\nassert solution(\"5 3 10001 10002\") == \"20000\"\nprint(\"Test 2 PASSED\")\nassert solution(\"2 1 10001 10002\") == \"20000\"\nprint(\"Test 3 PASSED\")\nassert solution(\"3 4 10001 10002\") == \"7200\"\nprint(\"Test 4 PASSED\")\nassert solution(\"5 4 10001 10002\") == \"7200\"\nprint(\"Test 5 PASSED\")\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n3\\n10000\\n9000') == '48000'\n\"\"\""
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1\\n10000\\n9000') == '48000'\n\"\"\"\n\nn = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\nprint((k * x) + ((n - k) * y))"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n5\n3\n10000\n9000\n\n\"\"\"\n) == \"48000\"\nprint(\"Passed!\")\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 10000 9000') == '48000'\n\nassert solution('3 1 100 1') == '100'\n\nassert solution('1 1 100 1') == '100'\n\nprint('Success')"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nassert solution(\"3 - 2\") == \"1\"\nassert solution(\"4 * 2\") == \"8\"\nassert solution(\"7 - 1\") == \"6\"\n\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 + 2\") == 3\n\"\"\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nprint(solution(\"1 + 2\"))\n\"\"\"\n\na,b = input().split()\nprint(int(a) + int(b))"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nassert solution(\"1 - 2\") == \"-1\"\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 + 2\") == 3\nassert solution(\"1 - 2\") == -1\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 + 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 + 2') == '3'\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000') == 'ABC'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000') == 'ABC'\n\n\"\"\"\n\n\"\"\"\nhttps://atcoder.jp/contests/abc175/tasks/abc175_c\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"\nimport sys"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('1234') == 'ARC'\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1200') == 'ABC'\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('1200') == 'ARC'\nassert solution('1300') == 'ARC'\nassert solution('1800') == 'ABC'\nassert solution('2000') == 'ARC'\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000\") == \"ABC\"\nprint(solution(\"1000\"))\n\"\"\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\nassert solution(\"10 10 10\") == \"0\"\n\"\"\"\n\n\"\"\"\nMimic the following:\nIf the number of bells is even, then buy three bells.\nIf the number of bells is odd, then buy four bells.\nIf the number is 1, then buy one bell.\n\"\"\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\nassert solution(\"4 4 2\") == \"5\"\nassert solution(\"1 9 5\") == \"12\"\nassert solution(\"999 999 999\") == \"999\"\nassert solution(\"7 4 2\") == \"8\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('700 600 780') == '1300'\n\"\"\"\n\na, b, c = map(int, input().split())"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 7 7\") == \"14\"\nassert solution(\"7 7 6\") == \"8\"\nassert solution(\"7 7 5\") == \"8\"\nassert solution(\"7 6 7\") == \"8\"\nassert solution(\"7 7 7\") == \"8\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('700 600 780') == '1300'\n\"\"\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"\"\"#####\\n#abc#\\n#arc#\\n#####\"\"\".replace(\"\\n\", \"\\n#\")"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\na\\nc\") == \"#####\\n#a#\\n#c#\\n#####\""
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"\"\"#####\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\nabc\\narc\\n\") == \"#abc#\\n#arc#\\n#####\""
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"2 3\nabc\narc\"\"\") == \"\"\"#####\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3\\nabc\\n:\") == \"#\\na\\nc\\n#\\n\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\nassert solution(\"3 4\\nabcdef\\nhijkl\\nmnopq\") == \"#abcdef#\\n#hijkl#\\n#mnopq#\\n\"\nassert solution(\"4 4\\nqwerty\\n12345\\nasdfgh\\nzxcvbn\") == \"#qwerty#\\n#12345#\\n#asdfgh#\\n#zxcvbn#\\n\"\nassert solution(\"2 1\\nq\\nw\") == \"#q#\\n#w#\\n\"\nassert solution(\"5 5\\nqwerty\\nzxcvb\\n12345\\nhijkl\\n\") == \"#qwerty#\\n#zxcvb#\\n#12345#\\n#hijkl#\\n#\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\na\\nbc\\n\") == \"#####\\n#a#\\n#b#\\n#####\\n\"\nassert solution(\"1 1\\na\\n\") == \"#\\n\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"2 3\nabc\narc\"\"\") == \"\"\"#####\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"IIDDIDI\") == 2\n\"\"\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"IIDID\") == \"2\"\nprint('Test pass.')\n\n\"\"\""
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n5\nIIDID\n''') == '2'\n\nassert solution('''\n2\nDD\n''') == '0'\n\nassert solution('''\n1\nI\n''') == '1'\n\nassert solution('''\n2\nD\n''') == '1'\n\nassert solution('''\n3\nIDID\n''') == '1'"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"IIDID\") == 2\nassert solution(\"IDIDI\") == 2\nassert solution(\"IIIDII\") == 2\nassert solution(\"IDIDID\") == 3\nassert solution(\"DDIDIDI\") == 3\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\nIIDID''') == '2'\nassert solution('''1\nDIDIDI''') == '0'\nassert solution('''5\nIDIDID''') == '0'\nassert solution('''1\nD''') == '0'\nassert solution('''5\nDIDIDIDID''') == '0'\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"IIDID\") == 2\n\"\"\""
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"IIDID\") == 2\nprint(\"test passed.\")\n\n\"\"\""
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_stdin) == test_stdout"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"IIDID\") == 2\nassert solution(\"IDIDI\") == 2\nassert solution(\"IDIDID\") == 2\nassert solution(\"IIDIDID\") == 2\nassert solution(\"DDIDIDI\") == 3\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"5\\n\"\n    \"IIDID\"\n) == \"2\"\n\"\"\"\n\nn = int(input())\ns = input()\n\nmax_count = 0\ncurrent_count = 0\n\nfor i in range(n):\n    if s[i] == \"I\":\n        current_count += 1\n        if current_count > max_count:\n            max_count = current_count\n    elif s[i] == \"D\":\n        current_count -= 1\n        if current_count > max_count:\n            max_count = current_count\n\nprint(max_count)\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11009 11332\") == \"4\"\nprint(solution(\"11009 11332\"))\n\nprint(\"Passed!\")"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11009 11332\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('1 2 3 4') == '3'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99') == '4950'\nassert solution('9000000 2 9999999') == '1'\n\n----"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11009 11332\") == \"4\"\n\"\"\"\n\nA, B = [int(x) for x in stdin.split(\" \")]\n\nans = 0\nfor i in range(A, B+1):\n    if str(i) == str(i)[::-1]:\n        ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11009 11332\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(11009 11332) == 4\n\n\"\"\"\n\nA, B = map(int, stdin.readline().split())"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11009 11332') == 4\n\"\"\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11009 11332') == 4\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11009 11332\") == \"4\"\n\"\"\"\n\nimport sys\n\nA, B = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11009 11332\") == 4\nprint(solution(\"11009 11332\"))\n\n//C++\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 4\") == '3'\nassert solution(\"1 2 3\") == '2'\nassert solution(\"1 1 1\") == '1'\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '3'\nassert solution('1 1 3') == '2'\nassert solution('1 1 2') == '1'\nassert solution('2 1 3') == '2'\nassert solution('2 1 2') == '1'\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 4\") == 3\nassert solution(\"1 1 1\") == 1\nassert solution(\"1 1 1\") == 1\n\"\"\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 4\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 2\") == \"2\"\nassert solution(\"100 1 1\") == \"100\"\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3, 1, 4) == \"3\"\nassert solution(3, 1, 1) == \"0\"\nassert solution(3, 2, 2) == \"1\"\nassert solution(100, 1, 1) == \"100\"\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"3 1 4\"\n) == \"3\"\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 3') == '3'\nassert solution('1 1 1') == '1'\nassert solution('1 2 3') == '1'\n\"\"\"\nimport sys\n\na, b, c = map(int, sys.stdin.readline().strip().split())\n\nprint((a+b+c) - max(a, b, c))\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 1 4''') == '3'\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == 12\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '12'\n\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == 12\n\"\"\"\n\n\"\"\"\nList of N sticks, each of which has a length l_i\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"12\"\n\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 3\n1 2 3 4 5''') == 12\n\"\"\"\n\n\"\"\"\nK = int(input())\nl = [int(x) for x in input().split()]\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == 12\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2\\n1') == '4'\nassert solution('5\\n5\\n5\\n5\\n5') == '10'\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5\\n\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n\") == \"4\"\nassert solution(\"3 2\\n1 2\\n\") == \"3\"\nassert solution(\"3 1\\n1 2 3\\n\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n1\") == 1\nassert solution(\"2\\n2\") == 4\nassert solution(\"3\\n3\") == 9\nassert solution(\"4\\n4\") == 16\nassert solution(\"5\\n5\") == 25\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 7') == 'B'\nprint(solution('5 2 7'))\n\n\"\"\"\nimport os\n\n__location__ = os.path.realpath(\n    os.path.join(os.getcwd(), os.path.dirname(__file__)))\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 7') == 'B'\n\"\"\""
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip().split()[0])\na, b = map(int, sys.stdin.readline().strip().split()[0:2])\ndist_a = abs(n - a)\ndist_b = abs(n - b)\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 7\\n') == 'B'\n\"\"\""
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 2 7''') == 'B'\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 7') == 'B'\nprint(solution('5 2 7'))\n\n\"\"\"\nimport sys\n\ninput_list = list(map(int, sys.stdin.readline().split()))\n\nx = input_list[0]\na = input_list[1]\nb = input_list[2]"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 7') == 'B'\n\"\"\"\n\nx, a, b = map(int, input().split())\nprint('A' if a - x < x - b else 'B')\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\""
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 7') == 'B'\n\"\"\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\n\"\"\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\nassert solution('2016/01/01') == '2018/01/01'\nassert solution('2014/01/31') == '2018/01/31'\n\n\"\"\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\nprint(solution('2017/01/07'))\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\"\"\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\""
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcdefg\") == \"gfedcba\"\nassert solution(\"acdefg\") == \"cdefgac\"\nassert solution(\"abc\") == \"cba\"\nassert solution(\"a\") == \"a\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"\n\"\"\""
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"aac\"\n\"\"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\", \"WA :(\"\nassert solution(\"1\\nac\") == \"\", \"WA :(\"\nassert solution(\"4\\nacb\\ncca\\nccca\") == \"acb\", \"WA :(\"\nassert solution(\"1\\nba\\nbb\\nbc\\nbd\") == \"bb\", \"WA :(\"\nassert solution(\"2\\nab\\na\\nb\\nba\") == \"\", \"WA :(\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cbaa\") == \"aac\"\nassert solution(\"daacc\") == \"caa\"\nassert solution(\"acacac\") == \"caa\"\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"\n\"\"\"\nimport sys\nfrom itertools import product\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"\n\nassert solution(\"1\\naaaaa\\nbaaab\") == \"aaabbb\"\n\nassert solution(\"2\\naaaaa\\nbaaab\\ncbaa\\ndaacc\") == \"aaabaaa\"\n\"\"\""
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == 'aac'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nacacac\\nbcbcbc\\na\\nab\") == \"aac\"\n\nassert solution(\"4\\nbcbcbc\\nacacac\\nbcbcbc\\na\\nab\") == \"bcbcbc\"\n\n\"\"\""
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n24 30\\n') == '7'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"5 5\") == \"10\"\nassert solution(\"10 2\") == \"2\"\nassert solution(\"10 10\") == \"10\"\nassert solution(\"10 20\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 24\\n24 30\") == \"7\"\n\"\"\""
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 24 30\\n\") == \"7\"\nassert solution(\"2 37 45\\n\") == \"6\"\nassert solution(\"3 38 46\\n\") == \"5\"\nassert solution(\"4 39 47\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\nprint(\"PASS\")\n\n\"\"\""
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n24 30\\n\") == \"7\"\n\"\"\"\n\n\"\"\"\nimport unittest\n\nclass TestChallengeDay(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"1\\n24 30\\n\"), \"7\")"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n24 30\\n\") == \"7\"\n\n-----\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(len(str(input()).split()))\n\"\"\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n') == '7'\n\"\"\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\nprint(\"Passed\")\n\"\"\""
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == 6\n\n\"\"\"\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n3 4\\n3 5\\n1 2') == 6\n\n\"\"\""
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nn, m = input().split()\nprint(n, m)"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4\\n') == 6\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\"\"\""
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"2\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('2 2') == 2\nassert solution('4 5') == 5\nassert solution('8 9') == 14\nassert solution('12 13') == 35\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n3 2\\n2 3\\n1 2\\n2 3\\n4 1\") == \"6\"\n\n-----------------------------\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n\n122\n\n123\n\n124\n\n125\n\n126\n\n127\n\n128\n\n129\n\n130\n\n131\n\n132\n\n133\n\n134\n\n135\n\n136\n\n137\n\n138\n\n139\n\n140\n\n141\n\n142\n\n143\n\n144\n\n145\n\n146\n\n147\n\n148\n\n149\n\n150\n\n151\n\n152\n\n153\n\n154\n\n155\n\n156\n\n157\n\n158\n\n159\n\n160\n\n161\n\n162\n\n163\n\n164\n\n165\n\n166\n\n167\n\n168\n\n169\n\n170\n\n171\n\n172\n\n173\n\n174\n\n175\n\n176\n\n177\n\n178\n\n179\n\n180\n\n181\n\n182\n\n183\n\n184\n\n185\n\n186\n\n187\n\n188\n\n189\n\n190\n\n191\n\n192\n\n193\n\n194\n\n195\n\n196\n\n197\n\n198\n\n199\n\n200\n\n201\n\n202\n\n203\n\n204\n\n205\n\n206\n\n207\n\n208\n\n209\n\n210\n\n211\n\n212\n\n213\n\n214\n\n215\n\n216\n\n217\n\n218\n\n219\n\n220\n\n221\n\n222\n\n223\n\n224\n\n225\n\n226\n\n227\n\n228\n\n229\n\n230\n\n231\n\n232\n\n233\n\n234\n\n235\n\n236\n\n237\n\n238\n\n239\n\n240\n\n241\n\n242\n\n243\n\n244\n\n245\n\n246\n\n247\n\n248\n\n249\n\n250\n\n251\n\n252\n\n253\n\n254\n\n255\n\n256\n\n257\n\n258\n\n259\n\n260\n\n261\n\n262\n\n263\n\n264\n\n265\n\n266\n\n267\n\n268\n\n269\n\n270\n\n271\n\n272\n\n273\n\n274\n\n275\n\n276\n\n277\n\n278\n\n279\n\n280\n\n281\n\n282\n\n283\n\n284\n\n285\n\n286\n\n287\n\n288\n\n289\n\n290\n\n291\n\n292\n\n293\n\n294\n\n295\n\n296\n\n297\n\n298\n\n299\n\n300\n\n301\n\n302\n\n303\n\n304\n\n305\n\n306\n\n307\n\n308\n\n309\n\n310\n\n311\n\n312\n\n313\n\n314\n\n315\n\n316\n\n317\n\n318\n\n319\n\n320\n\n321\n\n322\n\n323\n\n324\n\n325\n\n326\n\n327\n\n328\n\n329\n\n330\n\n331\n\n332\n\n333\n\n334\n\n335\n\n336\n\n337\n\n338\n\n339\n\n340\n\n341\n\n342\n\n343\n\n344\n\n345\n\n346\n\n347\n\n348\n\n349\n\n350\n\n351\n\n352\n\n353\n\n354\n\n355\n\n356\n\n357\n\n358\n\n359\n\n360\n\n361\n\n362\n\n363\n\n364\n\n365\n\n366\n\n367\n\n368\n\n369\n\n370\n\n371\n\n372\n\n373\n\n374\n\n375\n\n376\n\n377\n\n378\n\n379\n\n380\n\n381\n\n382\n\n383\n\n384\n\n385\n\n386\n\n387\n\n388\n\n389\n\n390\n\n391\n\n392\n\n393\n\n394\n\n395\n\n396\n\n397\n\n398\n\n399\n\n400\n\n401\n\n402\n\n403\n\n404\n\n405\n\n406\n\n407\n\n408\n\n409\n\n410\n\n411\n\n412\n\n413\n\n414\n\n415\n\n416\n\n417\n\n418\n\n419\n\n420\n\n421\n\n422\n\n423\n\n424\n\n425\n\n426\n\n427\n\n428\n\n429\n\n430\n\n431\n\n432\n\n433\n\n434\n\n435\n\n436\n\n437\n\n438\n\n439\n\n440\n\n441\n\n442\n\n443\n\n444\n\n445\n\n446\n\n447\n\n448\n\n449\n\n450\n\n451\n\n452\n\n453\n\n454\n\n455\n\n456\n\n457\n\n458\n\n459\n\n460\n\n461\n\n462\n\n463\n\n464\n\n465\n\n466\n\n467\n\n468\n\n469\n\n470\n\n471\n\n472\n\n473\n\n474\n\n475\n\n476\n\n477\n\n478\n\n479\n\n480\n\n481\n\n482\n\n483\n\n484\n\n485\n\n486\n\n487\n\n488\n\n489\n\n490\n\n491\n\n492\n\n493\n\n494\n\n495\n\n496\n\n497\n\n498\n\n499\n\n500\n\n501\n\n502\n\n503\n\n504\n\n505\n\n506\n\n507\n\n508\n\n509\n\n510\n\n511\n\n512\n\n513\n\n514\n\n515\n\n516\n\n517\n\n518\n\n519\n\n520\n\n521\n\n522\n\n523\n\n524\n\n525\n\n526\n\n527\n\n528\n\n529\n\n530\n\n531\n\n532\n\n533\n\n534\n\n535\n\n536\n\n537\n\n538\n\n539\n\n540\n\n541\n\n542\n\n543\n\n544\n\n545\n\n546\n\n547\n\n548\n\n549\n\n550\n\n551\n\n552\n\n553\n\n554\n\n555\n\n556\n\n557\n\n558\n\n559\n\n560\n\n561\n\n562\n\n563\n\n564\n\n565\n\n566\n\n567\n\n568\n\n569\n\n570\n\n571\n\n572\n\n573\n\n574\n\n575\n\n576\n\n577\n\n578\n\n579\n\n580\n\n581\n\n582\n\n583\n\n584\n\n585\n\n586\n\n587\n\n588\n\n589\n\n590\n\n591\n\n592\n\n593\n\n594\n\n595\n\n596\n\n597\n\n598\n\n599\n\n600\n\n601\n\n602\n\n603\n\n604\n\n605\n\n606\n\n607\n\n608\n\n609\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"6\"\n\"\"\""
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4') == 6\n\"\"\"\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'''\n3 4\n''') == 6\n\n-----\n4 5\n'''\nThere are five blocks:\n     - 1\n   0-2-3\n     - 4\nThere are five blocks:\n     - 1\n   0-2-3\n     - 4\n   0-1-2\n     - 3\n   0-1-2\n     - 3\n   0-1-2-4\n     - 3\nThere are five blocks:\n     - 1\n   0-2-3\n     - 4\n   0-1-2\n     - 3\n   0-1-2-4\n     - 3\n   0-1-2-4\n     - 3\n   0-1-2-3\n     - 3\n   0-1-2-3\n     - 3\n   0-1-2-3-4\n     - 3\nThere are six blocks:\n     - 1\n   0-2-3\n     - 4\n   0-1-2\n     - 3\n   0-1-2-4\n     - 3\n   0-1-2-4\n     - 3\n   0-1-2-3\n     - 3\n   0-1-2-3-4\n     - 3\nThere are six blocks:\n     - 1\n   0-2-3\n     - 4\n   0-1-2\n     - 3\n   0-1-2-4\n     - 3\n   0-1-2-4\n     - 3\n   0-1-2-3\n     - 3\n   0-1-2-3-4\n     - 3\nThere are six blocks:\n     - 1\n   0-2-3\n     - 4\n   0-1-2\n     - 3\n   0-1-2-4\n     - 3\n   0-1-2-4\n     - 3\n   0-1-2-3\n     - 3\n   0-1-2-3-4\n     - 3\n'''\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n9 9\") == \"Possible\"\n\"\"\"\n\nimport sys\n\nA, B = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(5) == 'Possible'\nassert solution(4) == 'Possible'\nassert solution(3) == 'Impossible'\n\n\"\"\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5') == 'Possible'\nassert solution('1 1') == 'Impossible'\nassert solution('4 3') == 'Possible'\nassert solution('20 10') == 'Impossible'\nassert solution('20 30') == 'Possible'\n\nimport sys\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5') == 'Possible'\nassert solution('4 6') == 'Impossible'\nassert solution('4 4') == 'Impossible'\nassert solution('10 10') == 'Impossible'\nassert solution('5 4') == 'Possible'\n\"\"\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5') == 'Possible'\nassert solution('2 1') == 'Impossible'\n\"\"\"\n\nA, B = map(int, input().split())"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"Possible\"\nassert solution(\"4 5\") == \"Possible\"\nassert solution(\"4 5\") == \"Possible\"\n\"\"\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\"\"\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '4 5'\n) == 'Possible'\nassert solution(\n    '10 10'\n) == 'Impossible'\n\"\"\"\n\na, b = input().strip().split()\na, b = [int(a), int(b)]"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Impossible'\nassert solution('2 1') == 'Impossible'\nassert solution('2 2') == 'Impossible'\nassert solution('1 1') == 'Impossible'\nassert solution('1 3') == 'Possible'\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"atcoder\"\n\"\"\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"?tc????\") == \"atcoder\"\n\"\"\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('coderr') == 'atcoder'\nassert solution('coderr') == 'atcoder'\n\"\"\""
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"?tc????\") == \"atcoder\"\n\"\"\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"coder\") == \"atcoder\"\nassert solution(\"?tc???\") == \"atcoder\"\nassert solution(\"?tc??m\") == \"UNRESTORABLE\"\n\"\"\""
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"?tc????\") == \"atcoder\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"coder\") == \"atcoder\"\n\"\"\"\n\nfrom collections import Counter\n\nS = input()\nT = input()"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoder\") == \"atcoder\"\nassert solution(\"btcoder\") == \"atcoder\"\nassert solution(\"ctcoder\") == \"atcoder\"\nassert solution(\"ztcoder\") == \"atcoder\"\nassert solution(\"abcoder\") == \"atcoder\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('?tc????') == 'atcoder'\n\"\"\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"tcoder\") == \"atcoder\"\nassert solution(\"coder\") == \"atcoder\"\nassert solution(\"tctcoder\") == \"atcoder\"\nassert solution(\"tc?o???\") == \"atcoder\"\nassert solution(\"tc?o??\") == \"atcoder\"\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\nassert solution(\"2004\\n2030\") == \"2040\"\nassert solution(\"2012\\n2020\") == \"2024\"\nassert solution(\"2002\\n2028\") == \"2032\"\nassert solution(\"2024\\n2028\") == \"2032\"\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2002\\n2017') == '2032'\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n'''"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\n\"\"\"\nimport io\nimport sys"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\"\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == '0'\nassert solution('2 2') == '2'\nassert solution('3 3') == '2'\nassert solution('1 1000') == '0'\nassert solution('2 2000') == '2032'\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 4') == '3.5'\n\"\"\"\n\nimport io, sys\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\""
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('string') == '4'\nassert solution('letter') == '2'\nassert solution('aaaaaa') == '0'\nassert solution('uncopyrightable') == '13'\nassert solution('ambidextrously') == '12'\n\n\"\"\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(string) == result\nprint(result)\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\nimport sys\nimport re\nimport string"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\nassert solution(\"assesses\") == 1\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"string\") == \"4\"\nassert solution(\"letter\") == \"2\"\nassert solution(\"aaaaaa\") == \"0\"\nassert solution(\"uncopyrightable\") == \"13\"\nassert solution(\"ambidextrously\") == \"12\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abc\") == \"0\"\nassert solution(\"abca\") == \"1\"\nassert solution(\"abcabca\") == \"2\"\nassert solution(\"abcabcaa\") == \"2\"\nassert solution(\"abcabcaab\") == \"2\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('string') == 4\nassert solution('letter') == 2\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('ambidextrously') == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('string') == 4\nassert solution('letter') == 2\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('ambidextrously') == 12\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10001 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'TLE'\nassert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('19931568 1000000 6') == 'TLE'\n'''"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100000000 500 3\\n') == 'TLE'\nassert solution('100000000 50 3\\n') == 'AC'\nassert solution('100000000 10001 5\\n') == 'TLE'\nassert solution('19931568 1000000 6\\n') == 'TLE'\n\"\"\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100000000 500 3\") == 'TLE'\nassert solution(\"100000000 50 3\") == 'AC'\nassert solution(\"100000000 10001 5\") == 'TLE'\nassert solution(\"100000000 10000 5\") == 'AC'\nassert solution(\"19931568 1000000 6\") == 'TLE'\n\"\"\""
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n\nprint(\"Success\")"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 5000 3') == 'AC'\nassert solution('100000000 500 3') == 'TLE'\n\"\"\"\n\nimport sys\n\nassert int(sys.stdin.readline().split()[0]) * 10000000000 <= int(sys.stdin.readline().split()[0])\nassert int(sys.stdin.readline().split()[0]) * 1000 <= int(sys.stdin.readline().split()[1])\n\nm, n, t = sys.stdin.readline().split()"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"100000000 500 3\"\n) == \"TLE\"\nassert solution(\n    \"100000000 50 3\"\n) == \"AC\"\nassert solution(\n    \"100000000 10001 5\"\n) == \"TLE\"\nassert solution(\n    \"100000000 10000 5\"\n) == \"AC\"\nassert solution(\n    \"19931568 1000000 6\"\n) == \"TLE\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\") == \"4 0 0 0\\n8 16 8 2\\n32 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n8 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\") == \"0 0 0 0\\n8 16 8 0\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n4\") == \"2 0 0 0\\n8 16 8 0\\n2 64 32 4\\n0 0 2048 64\"\n\n-----Problem-----\nGabriele Cirulli1 is a teacher in a middle school who is challenged by his classmates to a game of 2048. In this game, there are two players. The game begins with a random distribution of tiles in a grid with 4 rows and 4 columns, and each tile begins with a value of 2. The players move the tiles around the board according to the following key:\n\n\"LEFT\" moves all tiles left by one space, and\n\"RIGHT\" moves all tiles right by one space,\n\"UP\" moves all tiles up by one space, and\n\"DOWN\" moves all tiles down by one space.\nThe players must merge their tiles and move the resulting tiles as far to the left as possible. When two tiles with the same value collide with each other while moving, they merge into a tile with the total value of the two tiles that collided. Tiles cannot merge into a tile to the left if that tile also has the same value.\n\nThe game ends when the tiles cannot be moved left, right, up, or down any further, or if there are no more tiles that can be moved.\n\nWrite a program that will take as input a valid game state of a 2048 puzzle (see Sample Input section above for an example), and output the final game state of the puzzle after the players have played their moves.\n\n-----Solution-----\n\n```python\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"8 4 0 0\\n4 4 0 0\\n32 32 0 0\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\\n\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\\n\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\\n\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\\n\") == \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1500)"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0') == '4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0'\nassert solution('2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0') == '2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0'\nassert solution('2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n2') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64'\n\nassert solution('0 2 4 8\\n2 0 4 4\\n2 16 16 16\\n2 32 16 32\\n4\\n0') == '0 4 4 0\\n4 2 16 16\\n4 2 16 32\\n0 0 0 0'\n\nassert solution('0 2 4 8\\n2 0 4 4\\n2 16 16 16\\n2 32 16 32\\n4\\n4\\n0') == '0 2 4 8\\n2 0 4 4\\n2 16 16 16\\n2 32 16 32\\n0 0 2048 64'"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\"\n) == \"4 0 0 0\\n8 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\n\nassert solution(\n    \"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\"\n) == \"8 4 0 0\\n16 16 16 16\\n32 16 16 32\\n2048 0 0 0\"\n\nassert solution(\n    \"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\"\n) == \"4 16 8 2\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\"\n\nassert solution(\n    \"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\"\n) == \"2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\"\n\"\"\""
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n0 0 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\") == \"2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\"\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        \"\"\"\n        :type stdin: str\n        :rtype: str\n        \"\"\"\n        def get_value(num):\n            return 2 ** int(num)\n\n        lines = stdin.splitlines()\n        moves = lines[4]\n        grid = [list(map(get_value, line.split(' '))) for line in lines[0:4]]\n\n        def move(grid, direction):\n            for i in range(len(grid)):\n                for j in range(len(grid)):\n                    if direction == 'up':\n                        if i!= 0:\n                            if grid[i][j] == grid[i - 1][j]:\n                                grid[i][j] += grid[i - 1][j]\n                                grid[i - 1][j] = 0\n                    elif direction == 'down':\n                        if i!= len(grid) - 1:\n                            if grid[i][j] == grid[i + 1][j]:\n                                grid[i][j] += grid[i + 1][j]\n                                grid[i + 1][j] = 0\n                    elif direction == 'left':\n                        if j!= 0:\n                            if grid[i][j] == grid[i][j - 1]:\n                                grid[i][j] += grid[i][j - 1]\n                                grid[i][j - 1] = 0\n                    elif direction == 'right':\n                        if j!= len(grid) - 1:\n                            if grid[i][j] == grid[i][j + 1]:\n                                grid[i][j] += grid[i][j + 1]\n                                grid[i][j + 1] = 0\n\n        for move in moves:\n            move(grid, move)\n\n        return '\\n'.join(' '.join(map(str, line)) for line in grid)\n\n\nsolution = Solution().solution"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0') == '4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1') == '2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64'\n\"\"\"\n\nfrom sys import stdin\n\nclass Matrix:\n    def __init__(self, *args):\n        self.matrix = []\n        self.set_matrix(*args)\n\n    def __str__(self):\n        return '\\n'.join([' '.join(map(str, line)) for line in self.matrix])\n\n    def set_matrix(self, *args):\n        for i in args:\n            self.matrix.append(list(i))\n\n    def get_matrix(self):\n        return self.matrix\n\n    def __getitem__(self, index):\n        return self.matrix[index]"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n0\n''') == '4 0 0 0\\n8 16 8 2\\n32 64 32 4\\n2048 64 0 0'"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\") == \"2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\"\n\"\"\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(H2O) == 0\nassert solution(C3H8) == 6\nassert solution(CH3OH) == 1\nassert solution(C2H6OCH2O) == 6\nassert solution(C6H6OCH2O) == 12\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"1\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('H2O 2') == '0'\nassert solution('H2O 5') == '2'\nassert solution('C2H6 10') == '6'\nassert solution('C3H8 10') == '6'\nassert solution('C6H6OCH2O 10') == '12'\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"H2OC100H\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"3\"\nassert solution(\"CH3OH 1\") == \"1\"\nassert solution(\"C6H6OCH2O 10\") == \"0\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"H2O 3\") == \"2\"\nassert solution(\"H2O 2\") == \"0\"\nassert solution(\"C2H6 2\") == \"0\"\nassert solution(\"C2H6 1\") == \"0\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"C6H6OCH2O 10\") == \"12\"\nassert solution(\"C6H14 10\") == \"12\"\nassert solution(\"C5H10\") == \"12\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(TEST_INPUT_1) == '0'\nassert solution(TEST_INPUT_2) == '6'\nassert solution(TEST_INPUT_3) == '1'\nassert solution(TEST_INPUT_4) == '0'\nassert solution(TEST_INPUT_5) == '12'\n\"\"\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"H2OC100H\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"0\"\nassert solution(\"CH3OH 1\") == \"1\"\nassert solution(\"C6H6OCH2O 10\") == \"12\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"6\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\"\"\"\nimport string\nimport re\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\"\"\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\"\"\""
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\n\"\"\"\n\npwd, s = stdin.split()\npwd = [pwd[i:i+3] for i in range(0, len(pwd), 3)]\n\nfor c in s:\n    if c not in pwd:\n        print(\"FAIL\")\n        exit(0)\n\nprint(\"PASS\")\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\n\"\"\""
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('([] [] ]') == ']'\nassert solution('(([] [[]] ())') == 'ok so far'\nassert solution('[ { { () () () () } } ] () {}') == ']'\nassert solution('[ { [[()]] (({})) } ] () {}') == 'ok so far'\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('([] [] ]') == ']'\nassert solution('[ ( [] [] ] [ ]') == ']'\nassert solution('[ ([] [ ] )]') == ']'\nassert solution('[ ([] [ ])]') == ')'\nassert solution('[ { [ ] } { ]}') == '}'\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"(([] []])\") == \"]\"\nassert solution(\"(()\") == \")\"\nassert solution(\"()\") == \"ok so far\"\nassert solution(\"()[]\") == \"ok so far\"\nassert solution(\"(()[]\") == \")\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"(([] [] )[])\") == \"]\"\nassert solution(\"[ { ( ) } ]\") == \"ok so far\"\nassert solution(\"[ { ( ) } ] ( ( ) )\") == \"]\"\nassert solution(\"[ { ( ) } ] ( ( ) ) )\") == \"ok so far\"\nassert solution(\"( [ ] ( [ ] ( [ ] ( [ ] ( [ ] ) ) ) ) )\") == \"]\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"()\") == ')'\nassert solution(\"[{()}]\") == ']'\nassert solution(\"()\") == ')'\nassert solution(\"[]()\") == ']'\nassert solution(\"[][{}]\") == ']'\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"(([] [[]] ())\") == \"]\"\nassert solution(\"[ { { () () () } } ] () {}\") == \"ok so far\"\nassert solution(\"[ { ((())) } ] () {}\") == \"]\"\nassert solution(\"[ { ((())) } ] () {}\") == \"ok so far\"\nassert solution(\"[] [ ] {} ()\") == \"]\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"((()))\") == \"() 0\"\nassert solution(\"[[()]]\") == \"] 0\"\nassert solution(\"[[[[[()]]]]\") == \"] 10\"\n\"\"\"\n\nclass Stack:\n    def __init__(self):\n        self.stack = []\n    \n    def push(self, item):\n        self.stack.append(item)\n    \n    def pop(self):\n        if len(self.stack) == 0:\n            return None\n        item = self.stack[-1]\n        self.stack = self.stack[:-1]\n        return item\n    \n    def peek(self):\n        if len(self.stack) == 0:\n            return None\n        return self.stack[-1]\n    \n    def size(self):\n        return len(self.stack)"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('()') == ')'\nassert solution('()[]{}') == ']'\nassert solution('()[]{}()') == ')'\nassert solution('()[]{}()[]{}') == ']'\nassert solution('()[]{}()[]{}') == ')'\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"([] []]\") == \"]\"\nassert solution(\"[ { { () () () () } ]\") == \"]\"\nassert solution(\"[{([] {})}]\") == \"}\"\nassert solution(\"{(([{}]))}\") == \"}\"\nassert solution(\"()()(\") == \")\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''8\n([] [] ]\n''') == '] 7'\nassert solution('''13\n(([] [[]] ())\n''') == 'ok so far'\nassert solution('''21\n[ { { () () () () } } ]\n''') == '] 20'\nassert solution('''27\n[ { [[()]] (({})) } ] () {}\n''') == 'ok so far'\nassert solution('''32\n[ { {{()}} (([{}])) } ] () {}\n''') == '] 29'\n\n'''\nimport re"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\napple\\near\\nreal\\nletters\\nstyle') == 'Fair Game'\n\"\"\""
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'Fair Game'\nassert solution('\\napple\\near\\nreal\\nletters\\nstyle\\n') == 'Fair Game'\nassert solution('\\napple\\nextra\\napple\\n') == 'Player 1 lost'\nassert solution('\\napple\\nneat\\napple\\n') == 'Player 2 lost'\n\nprint('Success')\n\n----------------------------------------V2\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\"\nassert solution(\"3\\napple\\nextra\\napple\") == \"Player 1 lost\"\nassert solution(\"2\\napple\\nneat\") == \"Player 2 lost\"\nprint(\"Passed all tests!\")\n\"\"\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\near\\nreal\\nletters\\nstyle\\n\") == 'Fair Game'\nassert solution(\"3\\neat\\nextra\\neat\\n\") == 'Player 1 lost'\n\"\"\""
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"apple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\"\nassert solution(\"apple\\nextra\\napple\\n\") == \"Player 1 lost\"\nassert solution(\"apple\\nneat\\napple\\n\") == \"Player 2 lost\"\n\"\"\"\n\n\"\"\"\nN = int(input())\nwords = [input() for _ in range(N)]\nmemo = set()\nfor i in range(len(words) - 1):\n    if words[i] in words[i + 1]:\n        memo.add(words[i])\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\napple\\neat\\napple\") == \"Player 2 lost\"\nassert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\"\nassert solution(\"3\\napple\\nextra\\napple\") == \"Player 1 lost\"\nassert solution(\"2\\napple\\nneat\") == \"Player 2 lost\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\napple\\near\\nreal\\nletters\\nstyle') == 'Fair Game'\nassert solution('3\\napple\\nextra\\napple') == 'Player 1 lost'\nassert solution('2\\napple\\nneat') == 'Player 2 lost'\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\napple\near\nreal\nletters\nstyle\n''') == 'Fair Game'\nassert solution('''3\napple\nextra\napple\n''') == 'Player 1 lost'\nassert solution('''2\napple\nneat\n''') == 'Player 2 lost'\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\napple\\near\\nreal\\nletters\\nstyle\\n') == 'Fair Game'\nassert solution('3\\napple\\nextra\\napple\\n') == 'Player 1 lost'\nassert solution('2\\napple\\neat\\napple\\n') == 'Player 2 lost'\n\"\"\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000\\n*\\n100\\n\") == \"100000\"\nassert solution(\"10000\\n+\\n10\\n\") == \"10010\"\nassert solution(\"10\\n+\\n1000\\n\") == \"1010\"\n\"\"\""
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000\\n*\\n100\\n') == '100000'\nassert solution('10000\\n+\\n10\\n') == '10010'\nassert solution('10\\n+\\n1000\\n') == '1010'\nassert solution('1000\\n+\\n100\\n') == '1010'\n\nprint(solution('1000\\n*\\n100\\n'))\nprint(solution('10000\\n+\\n10\\n'))\nprint(solution('10\\n+\\n1000\\n'))\nprint(solution('1000\\n+\\n100\\n'))\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"10010\"\nassert solution(\"10\\n+\\n1000\") == \"1010\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000\\n*\\n100') == '100000'\nassert solution('10000\\n+\\n10') == '10010'\nassert solution('10\\n+\\n1000') == '1010'\n\"\"\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 * 100\") == \"10000\"\nassert solution(\"1000 + 100\") == \"1010\""
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000\\n*\\n100') == '100000'\nassert solution('10000\\n+\\n10') == '10010'\nassert solution('10\\n+\\n1000') == '1010'\nprint('Success')"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1000\n*\n100\n''') == '100000'\nassert solution('''10000\n+\n10\n''') == '10010'\nassert solution('''10\n+\n1000\n''') == '1010'\n\nimport os\nimport io\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"1000\n*\n100\n\"\"\"\n        output = \"\"\"100000\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"10000\n+\n10\n\"\"\"\n        output = \"\"\"10010\"\"\"\n        self."
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000\\n*\\n100\\n\") == \"100000\"\nassert solution(\"10000\\n+\\n10\\n\") == \"10010\"\n\nprint(solution(\"1000\\n*\\n100\\n\"))\nprint(solution(\"10000\\n+\\n10\\n\"))\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000\\n*\\n100') == '100000'\nassert solution('10000\\n+\\n10') == '10010'\n\"\"\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('+\\n*\\n*\\n+\\n') == '101010'\nassert solution('*\\n+\\n*\\n+\\n') == '101010'\nassert solution('*\\n*\\n+\\n+\\n') == '101010'\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 out') == \"3\"\nassert solution('8 in') == \"6\"\nassert solution('52 out') == \"8\"\n\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 out\") == \"3\\n\"\nassert solution(\"8 in\") == \"6\\n\"\nassert solution(\"52 out\") == \"8\\n\""
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\""
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\"\"\"\n\nfrom collections import Counter\n\nT = int(input())\nfor i in range(T):\n    size = int(input())\n    half = int(size/2)\n    remainder = size % 2\n    if remainder == 1:\n        print(half + 1)\n    else:\n        print(half)\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\""
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\"\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\"\"\""
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\""
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\n\"\"\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\nprint(solution(\"menolaxios mox\"))\nprint(solution(\"alemaxe maxos\"))\nprint(solution(\"pamoli toxes\"))\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\""
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\nassert solution('x') == ''\n\"\"\"\n\nimport string\nimport sys"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\n\"\"\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2018\") == 'yes'\nassert solution(\"2019\") == 'no'\nassert solution(\"2020\") == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nprint(solution(\"10 10 10 20 0 10 10 10 10 10\"))\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"0\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\nassert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n\"\"\"\n\nfrom math import factorial\nfrom functools import reduce\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n4 0 0 0 4 0 0 0 0 4\n3\n\"\"\"\n) == \"64\"\nprint(solution(\n\"\"\"\n4 0 0 0 4 0 0 0 0 4\n4\n\"\"\"\n))\nassert solution(\n\"\"\"\n10 10 10 20 0 10 10 10 10 10\n4\n\"\"\"\n) == \"1820000\"\nprint(solution(\n\"\"\"\n10 10 10 20 0 10 10 10 10 10\n4\n\"\"\"\n))\n\n\"\"\"\nfor i in range(1, 11):\n    for j in range(1, 11):\n        for k in range(1, 11):\n            for l in range(1, 11):\n                for m in range(1, 11):\n                    for n in range(1, 11):\n                        for o in range(1, 11):\n                            for p in range(1, 11):\n                                for q in range(1, 11):\n                                    for r in range(1, 11):\n                                        for s in range(1, 11):\n                                            for t in range(1, 11):\n                                                for u in range(1, 11):\n                                                    for v in range(1, 11):\n                                                        for w in range(1, 11):\n                                                            for x in range(1, 11):\n                                                                for y in range(1, 11):\n                                                                    for z in range(1, 11):\n                                                                        for a in range(1, 11):\n                                                                            for b in range(1, 11):\n                                                                                for c in range(1, 11):\n                                                                                    for d in range(1, 11):\n                                                                                        for e in range(1, 11):\n                                                                                            for f in range(1, 11):\n                                                                                                for g in range(1, 11):\n                                                                                                    for h in range(1, 11):\n                                                                                                        for i in range(1, 11):\n                                                                                                            for j in range(1, 11):\n                                                                                                                for k in range(1, 11):\n                                                                                                                    for l in range(1, 11):\n                                                                                                                        for m in range(1, 11):\n                                                                                                                            for n in range(1, 11):\n                                                                                                                                for o in range(1, 11):\n                                                                                                                                for p in range(1, 11):\n                                                                                                                                    for q in range(1, 11):\n                                                                                                                                        for r in range(1, 11):\n                                                                                                                                            for s in range(1, 11):\n                                                                                                                                                for t in range(1, 11):\n                                                                                                                                                    for u in range(1, 11):\n                                                                                                                                                        for v in range(1, 11):\n                                                                                                                                                            for w in range(1, 11):\n                                                                                                                                                                for x in range(1, 11):\n                                                                                                                                                                    for y in range(1, 11):\n                                                                                                                                                                        for z in range(1, 11):\n                                                                                                                                                                        for a in range(1, 11):\n                                                                                                                                                                            for b in range(1, 11):\n                                                                                                                                                                                        for c in range(1, 11):\n                                                                                                                                                                                                for d in range(1, 11):\n                                                                                                                                                                                                    for e in range(1, 11):\n                                                                                                                                                                                                            for f in range(1, 11):\n                                                                                                                                                                                                                    for g in range(1, 11):\n                                                                                                                                                                                                                                    for h in range(1, 11):\n                                                                                                                                                                                                                                        for i in range(1, 11):\n                                                                                                                                                                                                                                                for j in range(1, 11):\n                                                                                                                                                                                                                                                        for k in range(1, 11):\n                                                                                                                                                                                                                                                                for l in range(1, 11):\n                                                                                                                                                                                                                                                                    for m in range(1, 11):\n                                                                                                                                                                                                                                                                                    for n in range(1, 11):\n                                                                                                                                                                                                                                                                                        for o in range(1, 11):\n                                                                                                                                                                                                                                                                                            for p in range(1, 11):\n                                                                                                                                                                                                                                                                                                    for q in range(1, 11):\n                                                                                                                                                                                                                                                                                                                                            for r in range(1, 11):\n                                                                                                                                                                                                                                                                                                                                                        for s in range(1, 11):\n                                                                                                                                                                                                                                                                                                                                                            for t in range(1, 11):\n                                                                                                                                                                                                                                                                                                                                                                for u in range(1, 11):\n                                                                                                                                                                                                                                                                                                                                                                    for v in range(1, 11):\n                                                                                                                                                                                                                                                                                                                                                                            for w in range(1, 11):\n                                                                                                                                                                                                                                                                                                                                                                                for x in range(1, 11):\n                                                                                                                                                                                                                                                                                                                                                                                    for y in range(1, 11):\n                                                                                                                                                                                                                                                                                                                                                                                    for z in range(1, 11):\n                                                                                                                                                                                                                                                                                                                                                                                                            for a in range(1, 11):\n                                                                                                                                                                                                                                                                                                                                                                                                                    for b in range(1, 11):\n                                                                                                                                                                                                                                                                                                                                                                                                                        for c in range(1, 11):\n                                                                                                                                                                                                                                                                                                                                                                                                                            for d in range(1, 11):\n                                                                                                                                                                                                                                                                                                                                                                                                                                for e in range(1, 11):\n                                                                                                                                                                                                                                                                                                                                                                                                                                    for f in range(1, 11):\n                                                                                                                                                                                                                                                                                                                                                                                                                                        for g in range(1, 11):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    for h in range(1, 11):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            for i in range(1, 11):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                for j in range(1, 11):\nfor k in range(1, 11):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    for l in range(1, 11):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    for m in range(1, 11):\nfor"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n\nprint(solution(\"10 10 10 20 0 10 10 10 10 10\"))\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n\nfrom collections import Counter\n\nfrom statistics import mean\nfrom statistics import median"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\n\"\"\"\n\nimport os\nfrom typing import List\n\nINPUT_FILE = \"input.txt\"\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\\n\") == '2 330'\nassert solution(\"7 1\\n30 270 995 996 997 998 999\\n\") == '2 570'\nassert solution(\"7 2\\n30 270 995 996 997 998 999\\n\") == '0 0'\nassert solution(\"7 3\\n30 270 995 996 997 998 999\\n\") == '0 570'\nassert solution(\"7 4\\n30 270 995 996 997 998 999\\n\") == '0 570'\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\n\n\"\"\""
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\\n\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\\n\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\\n\") == \"0 0\"\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\n\n\"\"\""
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n7 0\n30 270 995 996 997 998 999\n\"\"\") == '2 330'\nassert solution(\"\"\"\n7 1\n30 270 995 996 997 998 999\n\"\"\") == '2 570'\nassert solution(\"\"\"\n7 2\n30 270 995 996 997 998 999\n\"\"\") == '0 0'\nprint('Success')"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open('./sample/input1.txt').read()) == '2 330'\nassert solution(open('./sample/input2.txt').read()) == '0 0'\nassert solution(open('./sample/input3.txt').read()) == '2 570'\n\"\"\"\n\nimport sys\nimport os\nimport time"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 0\\n30 270 995 996 997 998 999') == '2 330'\nassert solution('7 1\\n30 270 995 996 997 998 999') == '2 570'\nassert solution('7 2\\n30 270 995 996 997 998 999') == '0 0'\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\n\nprint(solution(\"7 1\\n30 270 995 996 997 998 999\"))\nprint(solution(\"7 2\\n30 270 995 996 997 998 999\"))\n\"\"\"\n\n\nimport sys\nimport collections\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\n\"\"\"\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n\nprint('Hooray!')\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n\"\"\"\n\n\"\"\"\nThe idea is to keep track of the last k characters of the string.\n\nIn the worst case, the last k characters of the string would be the same as the first k characters.\n\nThe time complexity of this algorithm is O(n).\n\"\"\""
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\nassert solution(\"abc\") == 3\nassert solution(\"abac\") == 4\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abccabbaab') == 2\nassert solution('abccabbaab') == 2\nassert solution('abccabbaaba') == 6\nassert solution('abccabbaabd') == 6\nassert solution('abccabbaaba') == 6\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n\"\"\"\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 1\nassert solution('a') == 1\nassert solution('ab') == 1\nassert solution('abab') == 2\nassert solution('aaaaaaa') == 1\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abbaabba\") == 2\nassert solution(\"aaaaaaaa\") == 1\nassert solution(\"abcdef\") == 6\nprint('All tests passed')\n\n-----Test Input-----\nabcdef\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n\"\"\"\nimport numpy as np\n\nm, n = [int(i) for i in input().split()]\narr = np.array([int(i) for i in input().split()])\narr = arr[arr < n]\narr = arr[arr > m]\nprint(arr.shape[0])\nprint(' '.join(str(i) for i in arr))\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n') == '2\\n1 2\\n', 'first'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\\n') == '1\\n1\\n','second'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30\\n') == '0\\n1\\n', 'third'\n\nprint('Success')\n\nhttps://www.algoexpert.io/questions/Speed%20Limit\n\"\"\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n\") == \"2\\n1 2\\n\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n\") == \"2\\n1 2\\n\"\n\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\\n\") == \"1\\n1\\n\"\n\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\\n\") == \"0\\n1\\n\"\n\nprint(\"Test finished.\")\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n\") == \"2\\n1 2\"\n\n\"\"\"\n\n\nfrom typing import List\nfrom collections import deque"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == '2\\n1 2'\n\nprint(solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40'))\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0\n\nprint('Hooray!')\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\"\n\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\""
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0\n\nprint('Hooray!')\n\"\"\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n\nprint('all tests passed.')"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n\nprint('All tests passed.')\n\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\"\"\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\nprint(\"Tests passed\")\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(32/1) == 0/1\nassert solution(33/1) == 5/9\nassert solution(-40/1) == -40/1\nassert solution(1) == 1\n\"\"\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\nassert solution('60/1') == '60/1'\n\"\"\"\n\nimport os"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\n\"\"\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\nassert solution(\"99/1\") == \"99/1\"\nassert solution(\"1/1\") == \"0/1\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(32/1) == 0/1\nassert solution(33/1) == 5/9\nassert solution(-40/1) == -40/1\nassert solution(\"33/1\") == 5/9\n\"\"\""
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(['C','E','G']) == 'Transposition'\nassert solution(['C','C','G','G','A','A','G']) == 'Nonsense'\nassert solution(['C','C','F','F','D#','D#','F']) == 'Inversion'\nassert solution(['A','B','C','D','E','F','G']) == 'Retrograde'\n\"\"\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\nassert solution(\"2\\nF G A\\nD C B\") == \"Nonsense\"\nassert solution(\"2\\nF D E\\nG A B\") == \"Nonsense\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\nC E G\\nD F# A') == \"Transposition\"\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == \"Inversion\"\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == \"Retrograde\"\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(sample_input_1)) == str(sample_output_1)\nassert solution(str(sample_input_2)) == str(sample_output_2)\nassert solution(str(sample_input_3)) == str(sample_output_3)\n\n\"\"\"\n\nfrom itertools import groupby\n\nimport sys"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n\"\"\""
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\n\n\"\"\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"3\\nC E G\\nD F# A\\n\") == \"Transposition\"\n\nassert solution(\n\"7\\nC C G G A A G\\nC C F F D# D# F\\n\") == \"Inversion\"\n\nassert solution(\n\"7\\nA B C D E F G\\nG F E D C B A\\n\") == \"Retrograde\"\n\"\"\"\n\n\"\"\"\nLet\u2019s consider an inversion of a melody.\n\nGiven a melody and a note n, we can apply an inversion by swapping the note with the note n \u2212 1 and then inverting that part of the melody.\n\nFor example, inversion of the melody $D F# A B C$, where the inversion happens around the note $C$ and inversion of the note $C$ has to be done with respect to the notes $B$ and $A$.\n\nGiven two melodies, can you tell what relation the second has to the first?\n\n-----Input-----\nThe first line contains a single integer $2 \\leq l_1 \\leq 50$, the number of notes in the first melody.\n\nThe next two lines each contain $l_1$ space separated notes. It is guaranteed that each note will be one of the twelve listed above.\n\n-----Output-----\nOutput on a single line \u201cTransposition\u201d if the second melody is a transposition of the first, \u201cRetrograde\u201d if the second melody is the first melody reversed, \u201cInversion\u201d if the second melody is an inversion of the first melody, else \u201cNonsense\u201d if it is none of the other cases.\n\nIf the second melody satisfies more than one relation, output the first valid relation in the order of \u201cTransposition\u201d, then \u201cRetrograde\u201d, then \u201cInversion\u201d.\n\n-----Examples-----\nSample Input 1:\n3\nC E G\nD F# A\nSample Output 1:\nTransposition\n\nSample Input 2:\n7\nC C G G A A G\nC C F F D# D# F\nSample Output 2:\nInversion\n\nSample Input 3:\n7\nA B C D E F G\nG F E D C B A\nSample Output 3:\nRetrograde\n\"\"\"\n\nfrom string import ascii_uppercase"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Nonsense'\nassert solution('1\\n') == 'Nonsense'\nassert solution('1\\nA') == 'Nonsense'\nassert solution('1\\nC D E') == 'Transposition'\nassert solution('1\\nC D E\\nB') == 'Inversion'\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\nprint('Passed!')\n\n\"\"\""
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\nprint('Passed!')\n\"\"\""
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\""
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\n\n\"\"\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\n\"\"\"\nimport re\nfrom sys import stdin"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"I love ba-na-na\"\n    ) == \"Gah kove bababa\"\n\nassert solution(\n    \"Cat-a-pil-lar\"\n    ) == \"Catacillar\"\n\nassert solution(\n    \"Co-ding is the best\"\n    ) == \"Cociccah gs the bestuh\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('abcd') == 'abcde'\nassert solution('abc') == 'abcde'\nassert solution('ab-cd') == 'abcd'\nassert solution('ab-c-d') == 'abcd'\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\nassert solution(\"I ran so fast that I could see her in the distance\") == \"Ichika ohba rinsoff chikihsoh\"\nassert solution(\"I lost my hat\") == \"Ichi laoh\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\nassert solution(\"Mazzo-mazzo is the best\") == \"Mazzomazzo gs the bestuh\"\nassert solution(\"E-te-te is the best\") == \"Ettete gs the bestuh\"\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '16'\nassert solution('3') == '14'\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '14'\nassert solution('1') == '6'\nassert solution('4') == '16'\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"1\n    \"\"\") == \"6\"\nassert solution(\n    \"\"\"4\n    \"\"\") == \"16\"\nassert solution(\n    \"\"\"3\n    \"\"\") == \"14\"\nprint('test passed')\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"16\"\nassert solution(\"6\") == \"24\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(1) == 6\nassert solution(4) == 16\nassert solution(3) == 14\n\"\"\"\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"4\") == \"16\"\nassert solution(\"3\") == \"14\"\n\"\"\"\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"4\") == \"16\"\nassert solution(\"3\") == \"14\"\n\"\"\"\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 10\\n1 3 1 7') == '4'\nassert solution('5 10\\n4 8 1 9 7') == '2'\n\"\"\"\n\nimport sys\n\nn, X = [int(c) for c in sys.stdin.readline().strip().split()]\nprices = [int(c) for c in sys.stdin.readline().strip().split()]\n\nfor i in range(len(prices)):\n    if prices[i] >= X:\n        print(i + 1)\n        break"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 6\\n1 2 3 4 5') == '3'\nassert solution('5 10\\n4 8 1 9 7') == '2'\nassert solution('4 10\\n1 3 1 7') == '4'\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 6\\n1 2 3 4 5') == '3'\nassert solution('5 10\\n4 8 1 9 7') == '2'\nassert solution('4 10\\n1 3 1 7') == '4'\n\n\"\"\""
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 6\\n1 2 3 4 5') == '3'\nassert solution('5 10\\n4 8 1 9 7') == '2'\n\"\"\"\n\n\"\"\"\nApproach:\n\nThe main idea is to check for every item whether you can make a profit out of selling it.\nTo do that, we will check that if you sell it and buy it at a price that is more than or equal to X,\nyou will gain exactly 2 points and the item is not selling for a price less than X.\n\n\"\"\"\n\n\"\"\"\nComplexity Analysis:\n\nTime Complexity: O(n)\nIn the worst case, all the items in the array are the same, and all of them are sold at the same price.\nThis means that for every item, there will be an if check.\nIn this case, the total time complexity will be O(n)\n\nSpace Complexity: O(1)\nThe function doesn't use any extra space, so its space complexity will be O(1).\n\n\"\"\""
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\") == 3\nprint(\"Tests passed\")\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 6\n1 2 3 4 5''') == '3'\n\nassert solution('''5 10\n4 8 1 9 7''') == '2'\n\nassert solution('''4 10\n1 3 1 7''') == '4'\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6\\n1 2 3 4 5') == '3'\nassert solution('5 10\\n4 8 1 9 7') == '2'\nassert solution('4 10\\n1 3 1 7') == '4'\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == '3'\nassert solution(\"5 10\\n4 8 1 9 7\\n\") == '2'\nassert solution(\"4 10\\n1 3 1 7\\n\") == '4'\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 10\\n1 3 1 7') == '4'\nassert solution('5 10\\n1 2 3 4 5') == '2'\n\"\"\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n0 1 0\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n1 0 0\\n0 1 0\\n1 0 1\") == \"possible\"\nassert solution(\"1 2\\n1 0 0\\n0 1 1\\n1 0 1\") == \"impossible\"\n\"\"\"\n\n\"\"\"\n\u8fd9\u9898\u8ddf\u4e66\u4e0a\u9898\u76ee\u4e0d\u592a\u4e00\u6837\uff0c\u4e66\u4e0a\u662f\u6c42\u6700\u5927\u6d41\u91cf\uff0c\u505a\u4e86\u51e0\u4e2a\u7ec6\u8282\u6539\u52a8\u3002\n\n\u672c\u9898\u662f\u6c42\u6700\u5c0f\u6d41\u91cf\uff0c\u6c42\u7ed3\u679c\u9700\u8981\u77e5\u9053\u4ee5\u4e0b\u4e09\u4e2a\u6982\u5ff5\uff1a\n1.\u6bcf\u4e2a\u8d77\u70b9\u51fa\u53d1\u7684\u6700\u5927\u6d41\u91cf\uff08\u6307\u6700\u5927\u77e5\u9053\u4ee5\u4e0b\u6d41\u91cf\u7684\u8d77\u70b9\u662f\u8c01\uff09\n2.\u6bcf\u4e2a\u7ec8\u70b9\u51fa\u53d1\u7684\u6700\u5927\u6d41\u91cf\uff08\u6307\u6700\u5927\u77e5\u9053\u4ee5\u4e0b\u6d41\u91cf\u7684\u7ec8\u70b9\u662f\u8c01\uff09\n3.\u6700\u5c0f\u516c\u5171\u7236\u8282\u70b9\uff08\u6307\u6bcf\u4e2a\u8d77\u70b9\u51fa\u53d1\u7684\u6700\u5927\u7236\u8282\u70b9\u662f\u8c01\uff09\n\n1.\u6bcf\u4e2a\u8d77\u70b9\u51fa\u53d1\u7684\u6700\u5927\u6d41\u91cf\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u6bcf\u4e2a\u8d77\u70b9\u51fa\u53d1\u7684\u4e0b\u4e00\u4e2a\u8d77\u70b9\u7684\u6700\u5927\u6d41\u91cf\uff0c\u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5\u63a8\u5bfc\u51fa\u6700\u5c0f\u6d41\u91cf\n2.\u6bcf\u4e2a\u7ec8\u70b9\u51fa\u53d1\u7684\u6700\u5927\u6d41\u91cf\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u6bcf\u4e2a\u7ec8\u70b9\u51fa\u53d1\u7684\u4e0b\u4e00\u4e2a\u7ec8\u70b9\u7684\u6700\u5927\u6d41\u91cf\uff0c\u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5\u63a8\u5bfc\u51fa\u6700\u5c0f\u6d41\u91cf\n3.\u6700\u5c0f\u516c\u5171\u7236\u8282\u70b9\uff0c\u662f\u6307\u4e24\u4e2a\u8d77\u70b9\u7684\u6700\u5927\u7236\u8282\u70b9\uff0c\u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5\u63a8\u5bfc\u51fa\u6700\u5c0f\u6d41\u91cf\n\n\u4e0a\u9762\u90a3\u4e09\u4e2a\u6982\u5ff5\uff0c\u6211\u5c31\u4e0d\u8ba4\u4e3a\u63a8\u51fa\u4e86\u6700\u5c0f\u6d41\u91cf\uff0c\u56e0\u4e3a\u6700\u5927\u6d41\u91cf\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6700\u5c0f\u6d41\u91cf\uff0c\u4f46\u662f\u8fd9\u4e0d\u662f\u4e00\u4e2a\u63a8\u5bfc\u3002\n\n\u4e0d\u8fc7\uff0c\u5982\u679c\u8fd9\u4e48\u60f3\uff0c\u5f88\u660e\u663e\u5c31\u4e0d\u4e00\u5b9a\uff0c\u4f46\u8fd9\u4e5f\u662f\u4e2a\u5927\u5751\u3002\n\n\u4ee5\u4e0b\u9610\u8ff0\u4e2d\u63d0\u51fa\u7684\uff1a\n\n\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u7684\u6700\u5927\u6d41\u91cf\uff0c\u5c31\u662f\u8f93\u51fa\u5176\u53ef\u80fd\u7684\u6700\u5927\u6d41\u91cf\u7684\u90a3\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u6700\u5927\u6d41\u91cf\u7684\u8282\u70b9\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u5e76\u5c06\u5176\u4e0b\u4e00\u4e2a\u8282\u70b9\u63a5\u5230\u4e00\u4e2a\u7ebf\u7a0b\u91cc\n\n\u4ee5\u4e0a\u4e09\u4e2a\u6982\u5ff5\uff0c\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u9519\u8bef\uff0c\u5c31\u662f\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u6700\u5927\u6d41\u91cf\u4e3a0\uff0c\u4f46\u662f\u6ca1\u6709\u7b2c\u4e00\u4e2a\u8282\u70b9\u51fa\u53d1\uff0c\u8fd9\u4e5f\u662f\u63a8\u5bfc\u51fa\u9519\u8bef\u7684\u539f\u56e0\uff0c\u6bd4\u5982\u8bf4\u4e00\u4e2a\u6d41\u91cf\u4e0d\u662f\u4e00\u4e2a\u6700\u5927\u6d41\u91cf\uff0c\u5c31\u662f\u4e00\u4e2a\u6700\u5c0f\u6d41\u91cf\uff0c\u6bd4\u5982\u8bf4\u4e00\u4e2a\u6d41\u91cf\u4e0d\u662f\u4e00\u4e2a\u6700\u5c0f\u6d41\u91cf\uff0c\u5c31\u662f\u4e00\u4e2a\u6700\u5927\u6d41\u91cf\uff0c\u8fd9\u6837\u5c31\u8ba4\u4e3a\uff0c\u5982\u679c\u6700\u5927\u6d41\u91cf\u4e3a0\uff0c\u6ca1\u6709\u4efb\u4f55\u8282\u70b9\uff0c\u5c31\u8ba4\u4e3a\u662f\u7a7a\uff0c\u6ca1\u6709\u4efb\u4f55\u7236\u8282\u70b9\uff0c\u6ca1\u6709\u4efb\u4f55\u90bb\u5c45\uff0c\u4e5f\u5c31\u662f\u7a7a\u3002\u90a3\u4e48\u8fd9\u4e2a\u9519\u8bef\u662f\u4e0d\u80fd\u89e3\u51b3\u7684\n\n\u8fd9\u4e48\u60f3\uff0c\u4e5f\u662f\u4e00\u4e2a\u9519\u8bef\uff0c\u4ece\u8bf4\u4ee5\u4e0a\u4e09\u4e2a\u6982\u5ff5\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u8981\u7684\u662f\u6700\u5c0f\u6d41\u91cf\uff0c\u4ece\u6570\u5b66\u63a8\u5bfc\u4e0b\u6765\uff0c\u6700\u5927\u6d41\u91cf\u7b49\u4ef7\u4e8e\u6700\u5c0f\u6d41\u91cf\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8981\u7684\u662f\u6700\u5c0f\u6d41\u91cf\uff0c\u6570\u5b66\u63a8\u5bfc\u7ed3\u679c\uff0c\u6700\u5927\u6d41\u91cf\u7b49\u4ef7\u4e8e\u6700\u5c0f\u6d41\u91cf\uff0c\u8fd9\u6837\u9519\u8bef\u7684\u89e3\u51b3\u65b9\u6cd5\uff0c\u5c31\u662f\u5c06\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u5927\u6d41\u91cf\u90fd\ufffd"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n1 0 1\\n0 1 0\\n1 0 1') == 'possible'\nassert solution('1 2\\n1 0 1\\n0 1 0') == 'impossible'\nassert solution('1 2\\n0 0 1\\n1 1 0') == 'impossible'\nassert solution('1 2\\n1 0 1\\n1 0 1') == 'possible'\n\n\"\"\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n1 0 1\\n0 1 0\\n1 0 1\") == \"possible\"\nassert solution(\"1 2\\n1 0 1\\n0 1 0\\n1 0 1\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n1 0 0\\n0 1 0\") == \"impossible\"\nassert solution(\"1 2\\n0 1 1\\n1 0 1\") == \"impossible\"\nassert solution(\"1 2\\n1 1 1\\n0 0 0\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n1 0 1\\n0 1 0\") == \"possible\"\nassert solution(\"1 2\\n1 0 1\\n0 1 1\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n0 1 1\\n1 0 1\") == \"impossible\"\n\"\"\"\n\nC, n = list(map(int, stdin.split()))\n\nin_ = []\nout = []\nwait = []\n\nfor _ in range(n):\n    in_.append(list(map(int, stdin.split())))\n    out.append(in_[-1][0])\n    wait.append(in_[-1][1])\n    wait[-1] += in_[-1][2]\n\nout = list(filter(lambda x: x > 0, out))\nwait = list(filter(lambda x: x > 0, wait))\n\nprint('possible' if sum(out) <= C and sum(wait) == 0 else 'impossible')\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n1 0 1\\n0 1 0\\n\") == \"possible\"\nassert solution(\"1 2\\n1 0 1\\n0 1 1\\n\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n1 2\n0 1 1\n1 0 0\n''') == 'possible'\nassert solution('''\n1 2\n0 1 1\n1 0 0\n''') == 'impossible'\n\nassert solution('''\n1 2\n0 1 1\n1 0 0\n''') == 'possible'\nassert solution('''\n1 2\n0 1 1\n1 0 1\n''') == 'impossible'\n\nassert solution('''\n1 2\n1 0 1\n0 1 1\n''') == 'impossible'\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2\\n0 1 1\\n1 0 0') == 'possible'\nassert solution('1 2\\n1 0 0\\n0 1 0') == 'impossible'\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\nassert solution('6 2') == '4.25'\n\"\"\""
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 1''') == '1'\nassert solution('''2 3''') == '1.875'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\nassert solution('6 2') == '4.25'\n\"\"\""
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\"\n\"\"\"\n\nfrom collections import Counter\nimport math"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.8'\nassert solution('6 2\\n') == '4.25'\nassert solution('10 10\\n') == '9.9'\nassert solution('100 100\\n') == '99.9'\n\"\"\"\n\nfrom math import factorial\nimport numpy as np\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('2 3') == '1.8'\nassert solution('6 2') == '4.25'\n\"\"\""
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n\"\"\"\n\nfrom __future__ import absolute_import\n\nfrom typing import List"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\nassert solution('6 2') == '4.25'\n\"\"\""
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\"\n\"\"\"\nfrom collections import defaultdict\nfrom functools import partial\nfrom itertools import chain\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"1.875\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"6 2\") == \"4.25\"\nassert solution(\"100 1\") == \"1\"\nassert solution(\"100 100\") == \"1.0\"\n\n\"\"\""
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n\"\"\""
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 0\") == '0 0'\nassert solution(\"4 2 7\") == '1 4'\nassert solution(\"3 0 0\") == '1 6'\n\"\"\""
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n\"\"\"\nimport sys\nfrom math import floor"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"1 1 0\"\"\"\n        output = \"\"\"0 0\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"4 2 7\"\"\"\n        output = \"\"\"1 4\"\"\"\n        self."
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 7') == '1 4'\n\"\"\""
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\nprint(\"Passed\")\n\n------------------------------------------------------------------------------------------------------------------------------------------\nGiven an array of integers A of size N. A represents a histogram i.e A[i] denotes height of the ith histogram's bar. Width of each bar is 1.\n\nLets say max area of histogram is A[n-1] x A[n-2] x.. x A[0], Now we need to calculate max area under this histogram.\n\nArea of a histogram is defined as:\n\nArea of a histogram with height h is A[h-1] x h.\nArea of a histogram with height 0 is 0.\n\nFind the area of histogram with height A[i].\n\nNote: You need to consider all possible histograms instead of just considering histogram with height i.\n\nFor example:\n\nA = [3,2,1,6,2,3]\n\nArea of histogram with height 4 is 6 x 4 = 24.\nArea of histogram with height 3 is 2 x 3 = 6.\nArea of histogram with height 2 is 1 x 2 = 2.\nArea of histogram with height 1 is 0 x 1 = 0.\nArea of histogram with height 0 is 0 x 0 = 0.\n\nReturn the area of histogram with height A[i].\n\nInput Format:\n\nThe first and the only argument of input contains the integer array A, of size N.\nOutput Format:\n\nReturn an integer representing the area of histogram with height A[i].\nConstraints:\n\n1 <= N <= 10^6\n1 <= A[i] <= 10^6\nFor Example:\n\nInput 1:\n    A = [3, 2, 1, 6, 2, 3]\nOutput 1:\n    24\nExplanation 1:\n    Area of histogram with height 3 is 6 x 3 = 18.\n    Area of histogram with height 2 is 2 x 3 = 6.\n    Area of histogram with height 1 is 1 x 2 = 2.\n    Area of histogram with height 6 is 6 x 2 = 12.\n    Area of histogram with height 2 is 3 x 2 = 6.\n    Area of histogram with height 3 is 2 x 1 = 2.\n    Total area is 18 + 6 + 2 + 12 + 6 + 2 + 2 = 24.\n\nInput 2:\n    A = [1, 2, 3, 4, 5, 6]\nOutput 2:\n    40\nExplanation 2:\n    Area of histogram with height 1 is 1 x 1 = 1.\n    Area of histogram with height 2 is 1 x 2 = 2.\n    Area of histogram with height 3 is 1 x 3 = 3.\n    Area of histogram with height 4 is 1 x 4 = 4.\n    Area of histogram with height 5 is 1 x 5 = 5.\n    Area of histogram with height 6 is 1 x 6 = 6.\n    Total area is 1 + 2 + 3 + 4 + 5 + 6 = 40.\n\n------------------------------------------------------------------------------------------------------------------------------------------\nGiven an array of integers A of size N. A represents a histogram i.e A[i] denotes height of the ith histogram's bar. Width of each bar is 1.\n\nLets say max area of histogram is A[n-1] x A[n-2] x.. x A[0], Now we need to calculate max area under this histogram.\n\nArea of a histogram is defined as:\n\nArea of a histogram with height h is A[h-1] x h.\nArea of a histogram with height 0 is 0.\n\nFind the area of histogram with height A[i].\n\nNote: You need to consider all possible histograms instead of just considering histogram with height i.\n\nFor example:\n\nA = [3, 2, 1, 6, 2, 3]\n\nArea of histogram with height 4 is 6 x 4 = 24.\nArea of histogram with height 3 is 2 x 3 = 6.\nArea of histogram with height 2 is 1 x 2 = 2.\nArea of histogram with height 1 is 0 x 1 = 0.\nArea of histogram with height 0 is 0 x 0 = 0.\n\nReturn the area of histogram with height A[i].\n\nInput Format:\n\nThe first and the only argument of input contains the integer array A, of size N.\nOutput Format:\n\nReturn an integer representing the area of histogram with height A[i].\nConstraints:\n\n1 <= N <= 10^6\n1 <= A[i] <= 10^6\nFor Example:\n\nInput 1:\n    A = [3, 2, 1, 6, 2, 3]\nOutput 1:\n    24\nExplanation 1:\n    Area of histogram with height 3 is 6 x 3 = 18.\n    Area of histogram with height 2 is 2 x 3 = 6.\n    Area of histogram with height 1 is 1 x 2 = 2.\n    Area of histogram with height 6 is 6 x 2 = 12.\n    Area of histogram with height 2 is 3 x 2 = 6.\n    Area of histogram with height 3 is 2 x 1 = 2.\n    Total area is 18 + 6 + 2 + 12 + 6 + 2 + 2 = 24.\n\nInput 2:\n    A = [1, 2, 3, 4, 5, 6]\nOutput 2:\n    40\nExplanation 2:\n    Area of histogram with height 1 is 1 x 1 = 1.\n    Area of histogram with height 2 is 1 x 2 = 2.\n    Area of histogram with height 3 is 1 x 3 = 3.\n    Area of histogram with height 4 is 1 x 4 = 4.\n    Area of histogram with height 5 is 1 x 5 = 5.\n    Area of histogram with height 6 is 1 x 6 = 6.\n    Total area is 1 + 2 + 3 + 4 + 5 + 6 = 40.\n\n------------------------------------------------------------------------------------------------------------------------------------------\nGiven an array of integers A of size N. A represents a histogram i.e A[i] denotes height of the ith histogram's bar. Width of each bar is 1.\n\nLets say max area of histogram is A[n-1] x A[n-2] x.. x A[0], Now we need to calculate max area under this histogram.\n\nArea of a histogram is defined as:\n\nArea of a histogram with height h is A[h-1] x h.\nArea of a histogram with height 0 is 0.\n\nFind the area of histogram with height A[i].\n\nNote: You need to consider all possible histograms instead of just considering histogram with height i.\n\nFor example:\n\nA = [3, 2, 1, 6, 2, 3]\n\nArea of histogram with height 4 is 6 x 4 = 24.\nArea of"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1\n2\n2\n3''') == '0 1'\nassert solution('''1\n2\n2\n4''') == '0 2'\nassert solution('''1\n2\n1\n4''') == '0 0'\nassert solution('''1\n2\n1\n2''') == '0 0'\nassert solution('''1\n2\n1\n2\n4''') == '0 1'\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\"\"\"\n\nimport math\n\nH, N, M = map(int, input().split())\n\nprint(math.ceil((H-N)/2), math.ceil((H-M)/2))\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1 1 0''') == '0 0'\nassert solution('''4 2 7''') == '1 4'\nassert solution('''3 0 0''') == '1 6'\nassert solution('''4 1 2''') == '0 1'\nassert solution('''4 1 1''') == '0 1'\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\nassert solution(\"4 2 8\") == \"2 3\"\nassert solution(\"1 1 1\") == \"0 0\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nWBWB\\nBWWB\\nWBBW\\nWBWW\\n\") == \"1\"\nassert solution(\"4\\nBWWB\\nBWBB\\nWBBW\\nWBWW\\n\") == \"0\"\nassert solution(\"6\\nBWWWWB\\nWBWWWB\\nWBBWWB\\nBWWBWB\\nWBWWBB\\nWWBWBW\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\\n\") == \"1\"\nassert solution(\"4\\nBWWB\\nBWBB\\nWBBW\\nWBWW\\n\") == \"0\"\nassert solution(\"6\\nBWWBW\\nWBWBW\\nWBBBW\\nBBWBW\\nBWWBW\\nWWBWB\\n\") == \"0\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW') == '1'\nassert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW') == '1'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\") == \"1\"\nassert solution(\"4\\nBWWB\\nBWBB\\nWBBW\\nWBWW\") == \"0\"\nassert solution(\"6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nWBBWWB\") == \"0\"\n\nassert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\") == \"1\"\nassert solution(\"4\\nBWWB\\nBWBB\\nWBBW\\nWBWW\") == \"0\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n4\nWBBW\nWBWB\nBWWB\nBWBW\n''') == '1'\n\nassert solution('''\n4\nBWWB\nBWBB\nWBBW\nWBWW\n''') == '0'\n\nassert solution('''\n6\nBWBWWB\nWBWBWB\nWBBWBW\nBBWBWW\nBWWBBW\nWWBWBB\n''') == '0'\n\nassert solution('''\n24\nBWBWBWBWBWBW\nWBWBWBWBWBWBW\nBWBWBWBWBWBWB\nBWBWBWBWBWBWB\nWBWBWBWBWBWBWB\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWBWBWBWBW\nBWBWBWB"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BBWBW\\nWBWBW\\nBWBWB\\nWBWBW\\nBWBWB\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\nWBWB\") == \"1\\n\"\nassert solution(\"4\\nBWWB\\nBWBB\\nWBBW\\nWBWW\") == \"1\\n\"\n\"\"\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\nWBWB\nBWWB\nWBBW\nWBWW''') == '1'\nassert solution('''4\nWBWB\nBWWB\nWBBW\nWBWW''') == '1'\nassert solution('''4\nBWWB\nBWBB\nWBBW\nWBWW''') == '1'\nassert solution('''4\nWBWB\nBWWB\nWBBW\nWBWW''') == '0'\nassert solution('''4\nBWWB\nBWWB\nWBBW\nWBWW''') == '0'\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WBBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nBWWBBW\\nWWBWBB\") == \"1\"\nassert solution(\"BWWBWW\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nBWWBBW\\nWWBWBB\") == \"0\"\nassert solution(\"BWWBBB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nBWWBBW\\nWWBWBB\") == \"0\"\n\nprint(\"Success\")\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\\n\") == \"1\"\nassert solution(\"4\\nWBWW\\nWBWB\\nWBBW\\nBWBW\\n\") == \"0\"\nassert solution(\"6\\nBWWBB\\nWBWBW\\nWBBWW\\nBBWBW\\nWBBWW\\nWWBWW\\n\") == \"0\"\n\n\"\"\"\nimport sys\nfrom itertools import zip_longest\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n1\\n2\") == \"2 1\"\nassert solution(\"1\\n2\\n2\\n6\\n3\\n4\") == \"2 3\"\nassert solution(\"1\\n2\\n3\\n2\\n1\") == \"1 3\"\nassert solution(\"1\\n2\\n1\\n2\") == \"2 1\"\nassert solution(\"1\\n4\\n5\\n8\") == \"3 7\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n') == '2 1\\n3 4\\n3 2\\n1 2\\n3 7'"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 1 3 4\\n2 4 1 3') == '1 2\\n3 4\\n3 2'\n\n\"\"\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\""
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 3 4\") == '2 1'\nassert solution(\"2 6 3 4\") == '3 4'\nassert solution(\"1 2 1 3\") == '1 2'\nassert solution(\"1 4 5 8\") == '3 7'\n\n\n\"\"\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 1 3\") == \"2 1\", \"First\"\nassert solution(\"5 2 1 2\") == \"2 1\", \"Second\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8') == '2 1\\n3 4\\n3 2\\n1 2\\n3 7'\n\"\"\""
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\"\n\nfrom __future__ import annotations\nfrom collections import Counter\nfrom typing import Callable, Dict, Set\n\nfrom icontract import require, ensure\n\nfrom a2_dice_problem import (\n    DiceGameResult,\n    DiceProblem,\n    DiceProblemViolation,\n    PlayerId,\n    play_dice_game,\n)\n\n\nclass GameState:\n    def __init__(self, player_a_score: int, player_b_score: int):\n        self.player_a_score = player_a_score\n        self.player_b_score = player_b_score\n\n    def copy(self) -> GameState:\n        return GameState(self.player_a_score, self.player_b_score)\n\n    def clone(self) -> GameState:\n        return self.copy()\n\n    def get_winner(self) -> PlayerId:\n        if self.player_a_score > self.player_b_score:\n            return PlayerId.A\n        elif self.player_a_score < self.player_b_score:\n            return PlayerId.B\n        else:\n            return None\n\n    def is_terminal(self) -> bool:\n        return self.player_a_score >= 100 or self.player_b_score >= 100\n\n\n@require(lambda max_score: max_score >= 100)\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 1 3\") == \"2 1\"\nassert solution(\"2 6 3 4\") == \"3 4\"\nassert solution(\"1 2 1 3\") == \"2 1\"\nassert solution(\"1 4 5 8\") == \"3 7\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 1 2') == '2 1'\nassert solution('2 6 3 4') == '3 4'\nassert solution('2 4 1 3') == '3 2'\nassert solution('1 2 1 3') == '2 1'\nassert solution('1 4 5 8') == '7 8'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"[3,2,0,-4]\") == \"true\"\nassert solution(\"[1,2]\") == \"true\"\nassert solution(\"[1]\") == \"true\"\nassert solution(\"[1, 2]\") == \"false\"\nassert solution(\"[1, 2, 3]\") == \"false\"\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"[1,2,3]\") == \"false\"\nassert solution(\"[1,2,3,2,1]\") == \"true\"\nassert solution(\"[3,2,0,-4]\") == \"true\"\nassert solution(\"[1,2,1,2]\") == \"true\"\nassert solution(\"[1,2]\") == \"true\"\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"[3,2,0,-4]\") == True\nassert solution(\"[1,2]\") == True\nassert solution(\"[1]\") == False\nassert solution(\"[1]\") == False\n\"\"\"\n\n\n\"\"\"\nU:\n\n- create a node class, where it has next pointer and a value\n- the node class has a method \"get_next\", where it gets the next value, and it\n  also has a method to set it, where it sets it with a value\n- then create a linked list class, which has a head\n- have a has_cycle method, where it goes through the list, and gets the next\n  two values, and see if it ever reaches the node, that it previously visited\n  (this is the same as a standard linked list, and the hashmap)\n- note: the 'pos' is an index. It gets the value of the node of the index,\n  and the last node is the -1\n- it has a way to create a cycle in the list, where it goes through the list\n  and creates a cycle\n\nM:\n\n- create the node class\n- the node class has a method \"get_next\", where it gets the next value, and it\n  also has a method to set it, where it sets it with a value\n- then create the linked list class, which has a head\n\n- the has_cycle method takes in the head and the pos\n\nO:\n\n- create a node class, where it has next pointer and a value\n- the node class has a method \"get_next\", where it gets the next value, and it\n  also has a method to set it, where it sets it with a value\n- then create a linked list class, which has a head\n\n- the has_cycle method takes in the head and the pos\n\n\"\"\"\n\nfrom collections import defaultdict\n\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\n    def get_next(self):\n        return self.next\n\n    def set_next(self, value):\n        self.next = value\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def create_cycle(self, node, head, node_value, head_value, length):\n        node.set_next(head)\n        node.value = node_value\n\n        while length > 0:\n            head.value = head_value\n            head = head.next\n            length -= 1\n\n    def has_cycle(self, head):\n        seen = defaultdict(lambda: None)\n        while head:\n            if head in seen:\n                return True\n            else:\n                seen[head] = head\n            head = head.get_next()\n        return False\n\n\n\nll = LinkedList()\nll.create_cycle(Node(\"a\"), Node(\"b\"), \"b\", \"a\", 1)\n\nassert ll.has_cycle(ll.head) == True\n\nll = LinkedList()\nll.create_cycle(Node(\"a\"), Node(\"b\"), \"b\", \"c\", 3)"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3,2,0,-4') == True\nassert solution('1,2') == True\nassert solution('1') == False\nassert solution('1,2,-1') == False\n\"\"\""
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('[3,2,0,-4]') == True\nassert solution('[1,2]') == True\nassert solution('[1]') == True\nassert solution('[1,2]') == False\n\n\"\"\"\n\nclass Node:\n    def __init__(self, val, next=None):\n        self.val = val\n        self.next = next"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 2 3 4 5 1 2 3\") == True\nassert solution(\"0 2 3 4 5 1 2\") == True\nassert solution(\"0 2 3 4 5 1\") == False\nassert solution(\"0 2 3 4 5 1 0\") == True\nassert solution(\"0 2 3 4 5 1 0 0\") == True\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"[3,2,0,-4]\") == True\nassert solution(\"[1,2]\") == True\nassert solution(\"[1]\") == False\nassert solution(\"[1,2,3,2,0]\") == False\n\"\"\"\n\nfrom collections import defaultdict\n\n\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        visited = set()\n        while head:\n            if head in visited:\n                return True\n            visited.add(head)\n            head = head.next\n        return False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 0 -4\") == True\nassert solution(\"1 2\") == True\nassert solution(\"1\") == True\nassert solution(\"3 2 1 -4\") == True\nassert solution(\"1 2 1 -4\") == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3->2->0,-4') == True\nassert solution('1->2') == True\nassert solution('1') == False\n\"\"\"\nfrom typing import List\n\n\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        visited = set()\n        while head is not None:\n            if head in visited:\n                return True\n            else:\n                visited.add(head)\n                head = head.next\n        return False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3,2,0,-4,2\") == True\nassert solution(\"1,2\") == True\nassert solution(\"1\") == True\nassert solution(\"\") == False"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n4') == '2'\nassert solution('2 1\\n3') == '0'\nassert solution('3 1\\n6') == '2'\n\"\"\"\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcd\") == \"The string contains only letters\"\nassert solution(123) == \"The string can't be converted to integer\"\nassert solution(None) == \"The string is empty\"\nassert solution('aeiou') == \"The string contains only vowels\"\nassert solution('aA') == \"The string can't be converted to integer\"\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution([2, 7, 11, 15]) == [0, 1]\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 7 11 15') == '0 1'\n\n\"\"\""
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n[2, 7, 11, 15]\\n9\") == \"0, 1\"\nassert solution(\"5\\n[3, 3]\\n6\") == \"0, 1\"\nassert solution(\"6\\n[2, 3, 4]\\n6\") == \"0, 2\"\nassert solution(\"7\\n[2, 3, 4, 5]\\n6\") == \"0, 3\"\nassert solution(\"8\\n[2, 3, 4, 5, 6]\\n6\") == \"0, 4\"\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 7 11 15\") == '0 1'\nprint('Test 1 passed')\nassert solution(\"2 7 11 15\") == '0 1'\nprint('Test 2 passed')\nassert solution(\"0 0\") == '0 1'\nprint('Test 3 passed')"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 7 11 15') == '0 1'\n\"\"\"\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        \n        nums_dict = dict(zip(nums,range(0,len(nums))))\n        for i in range(0,len(nums)):\n            num = nums[i]\n            result = target - num\n            \n            if result in nums_dict and nums_dict[result]!= i:\n                return nums_dict[result], i\n                \n        return -1,-1\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\") == 0\nassert solution(\"2\") == 1\nassert solution(\"2\\n\") == 0\nassert solution(\"2\\n3\") == 0\nassert solution(\"2\\n3\\n\") == 0\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n7\n11\n15\n9\n\"\"\") == [0, 1]\nprint(solution(\"\"\"\n2\n7\n11\n15\n9\n\"\"\"))\nassert solution(\"\"\"\n2\n-2\n-1\n-2\n-1\n\"\"\") == [0, 3]\nprint(solution(\"\"\"\n2\n-2\n-1\n-2\n-1\n\"\"\"))\nassert solution(\"\"\"\n2\n-3\n1\n1\n\"\"\") == [0, 2]\nprint(solution(\"\"\"\n2\n-3\n1\n1\n\"\"\"))\nassert solution(\"\"\"\n2\n-3\n-1\n-2\n-1\n\"\"\") == [0, 2]\nprint(solution(\"\"\"\n2\n-3\n-1\n-2\n-1\n\"\"\"))\nassert solution(\"\"\"\n2\n3\n2\n3\n\"\"\") == [0, 1]\nprint(solution(\"\"\"\n2\n3\n2\n3\n\"\"\"))\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(nums = [2, 7, 11, 15], target = 9) == [0, 1]\n\"\"\"\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == 1\nassert solution(\"6\") == 3\nassert solution(\"8\") == 10\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n\") == \"0\\n\"\nassert solution(\"4\\n\") == \"1\\n\"\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '1'\nassert solution('6') == '0'\n\"\"\"\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == '0'\nassert solution('6\\n') == '1'\n\nSample Case #1\nSample Input 1:\n3\nSample Output 1:\n0\n\nSample Input 2:\n4\nSample Output 2:\n1\n\nSample Case #2\nSample Input 1:\n6\nSample Output 1:\n1\n\nSample Input 2:\n7\nSample Output 2:\n2\n\nSample Case #3\nSample Input 1:\n8\nSample Output 1:\n3\n\nSample Input 2:\n9\nSample Output 2:\n4\n\nSample Case #4\nSample Input 1:\n10\nSample Output 1:\n6\n\nSample Input 2:\n11\nSample Output 2:\n7\n\nSample Case #5\nSample Input 1:\n12\nSample Output 1:\n9\n\nSample Input 2:\n13\nSample Output 2:\n11\n\nSample Case #6\nSample Input 1:\n14\nSample Output 1:\n14\n\nSample Input 2:\n15\nSample Output 2:\n20\n\nSample Case #7\nSample Input 1:\n16\nSample Output 1:\n16\n\nSample Input 2:\n17\nSample Output 2:\n24\n\nSample Case #8\nSample Input 1:\n18\nSample Output 1:\n33\n\nSample Input 2:\n19\nSample Output 2:\n33\n\nSample Case #9\nSample Input 1:\n20\nSample Output 1:\n55\n\nSample Input 2:\n21\nSample Output 2:\n77\n\nSample Case #10\nSample Input 1:\n22\nSample Output 1:\n88\n\nSample Input 2:\n23\nSample Output 2:\n131\n\nSample Case #11\nSample Input 1:\n24\nSample Output 1:\n196\n\nSample Input 2:\n25\nSample Output 2:\n260\n\nSample Case #12\nSample Input 1:\n26\nSample Output 1:\n342\n\nSample Input 2:\n27\nSample Output 2:\n387\n\nSample Case #13\nSample Input 1:\n28\nSample Output 1:\n448\n\nSample Input 2:\n29\nSample Output 2:\n472\n\nSample Case #14\nSample Input 1:\n30\nSample Output 1:\n544\n\nSample Input 2:\n31\nSample Output 2:\n636\n\nSample Case #15\nSample Input 1:\n32\nSample Output 1:\n741\n\nSample Input 2:\n33\nSample Output 2:\n857\n\nSample Case #16\nSample Input 1:\n34\nSample Output 1:\n979\n\nSample Input 2:\n35\nSample Output 2:\n1279\n\nSample Case #17\nSample Input 1:\n36\nSample Output 1:\n1388\n\nSample Input 2:\n37\nSample Output 2:\n1498\n\nSample Case #18\nSample Input 1:\n38\nSample Output 1:\n1578\n\nSample Input 2:\n39\nSample Output 2:\n1668\n\nSample Case #19\nSample Input 1:\n40\nSample Output 1:\n1758\n\nSample Input 2:\n41\nSample Output 2:\n1854\n\nSample Case #20\nSample Input 1:\n42\nSample Output 1:\n1952\n\nSample Input 2:\n43\nSample Output 2:\n2049\n\nSample Case #21\nSample Input 1:\n44\nSample Output 1:\n2247\n\nSample Input 2:\n45\nSample Output 2:\n2299\n\nSample Case #22\nSample Input 1:\n46\nSample Output 1:\n2375\n\nSample Input 2:\n47\nSample Output 2:\n2537\n\nSample Case #23\nSample Input 1:\n48\nSample Output 1:\n2655\n\nSample Input 2:\n49\nSample Output 2:\n2705\n\nSample Case #24\nSample Input 1:\n50\nSample Output 1:\n2785\n\nSample Input 2:\n51\nSample Output 2:\n2901\n\nSample Case #25\nSample Input 1:\n52\nSample Output 1:\n3030\n\nSample Input 2:\n53\nSample Output 2:\n3115\n\nSample Case #26\nSample Input 1:\n54\nSample Output 1:\n3280\n\nSample Input 2:\n55\nSample Output 2:\n3360\n\nSample Case #27\nSample Input 1:\n56\nSample Output 1:\n3413\n\nSample Input 2:\n57\nSample Output 2:\n3516\n\nSample Case #28\nSample Input 1:\n58\nSample Output 1:\n3632\n\nSample Input 2:\n59\nSample Output 2:\n3756\n\nSample Case #29\nSample Input 1:\n60\nSample Output 1:\n3851\n\nSample Input 2:\n61\nSample Output 2:\n3966\n\nSample Case #30\nSample Input 1:\n62\nSample Output 1:\n4080\n\nSample Input 2:\n63\nSample Output 2:\n4186\n\nSample Case #31\nSample Input 1:\n64\nSample Output 1:\n4322\n\nSample Input 2:\n65\nSample Output 2:\n4481\n\nSample Case #32\nSample Input 1:\n66\nSample Output 1:\n4537\n\nSample Input 2:\n67\nSample Output 2:\n4721\n\nSample Case #33\nSample Input 1:\n68\nSample Output 1:\n4839\n\nSample Input 2:\n69\nSample Output 2:\n4985\n\nSample Case #34\nSample Input 1:\n70\nSample Output 1:\n5114\n\nSample Input 2:\n71\nSample Output 2:\n5246\n\nSample Case #35\nSample Input 1:\n72\nSample Output 1:\n5351\n\nSample Input 2:\n73\nSample Output 2:\n5562\n\nSample Case #36\nSample Input 1:\n74\nSample Output 1:\n5640\n\nSample Input 2:\n75\nSample Output 2:\n5742\n\nSample Case #37\nSample Input 1:\n76\nSample Output 1:\n5826\n\nSample Input 2:\n77\nSample Output 2:\n5925\n\nSample Case #38\nSample Input 1:\n78\nSample Output 1:\n6020\n\nSample Input 2:\n79\nSample Output 2:\n6171\n\nSample Case #39\nSample Input 1:\n80\nSample Output 1:\n6288\n\nSample Input 2:\n81\nSample Output 2:\n6427\n\nSample Case #40\nSample Input 1:\n82\nSample Output 1:\n6590\n\nSample Input 2:\n83\nSample Output 2:\n6662\n\nSample Case #41\nSample Input 1:\n84\nSample Output 1:\n6743\n\nSample Input 2:\n85\nSample Output 2:\n6831\n\nSample Case #42\nSample Input 1:\n86\nSample Output 1:\n6919\n\nSample Input 2:\n87\nSample Output 2:\n7023\n\nSample Case #43\nSample Input 1:\n88\nSample Output 1:\n7188\n\nSample Input 2:\n89\nSample Output 2:\n7247\n\nSample Case #44\nSample Input 1:\n90\nSample Output 1:\n7318\n\nSample Input 2:\n91\nSample Output 2:\n7471\n\nSample Case #45\nSample Input 1:\n92\nSample Output 1:\n7511\n\nSample Input 2:\n93\nSample Output 2:\n7605\n\nSample Case #46\nSample Input 1:\n94\nSample Output 1:\n7648\n\nSample Input 2:\n95\nSample Output 2:\n7717\n\nSample Case #47\nSample Input 1:\n96\nSample Output 1:\n7821\n\nSample Input 2:\n97\nSample Output 2:\n7890\n\nSample Case #48\nSample Input 1:\n98\nSample Output 1:\n8025\n\nSample Input 2:\n99\nSample Output 2:\n8162\n\nSample Case #49\nSample Input 1:\n100\nSample Output 1:\n8288\n\nSample Input 2:\n101\nSample Output 2:\n8425\n\nSample Case #50\nSample Input 1:\n102\nSample Output 1:\n8535\n\nSample Input 2:\n103\nSample Output 2:\n8583\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n\"\"\"\nfrom typing import List\nfrom math import comb"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n') == '0\\n'\nassert solution('4\\n') == '1\\n'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3\\n4\\n3\\n3\\n3\\n3\\n4\\n4\\n3\\n3') == '1'\nassert solution('4\\n3\\n4\\n3\\n3\\n3\\n3\\n4\\n4\\n3\\n3') == '0'\nassert solution('6\\n6\\n5\\n6\\n6\\n6\\n4\\n6\\n6\\n5\\n6\\n6\\n6\\n3\\n6\\n6\\n6\\n6\\n5\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n3\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n3\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n3\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n3\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('3') == '0'\n\n\"\"\""
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\n\"\"\""
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 4\\n5 6 7 8') == '4'\nassert solution('4\\n1 2 1 2\\n5 6 7 8') == 'impossible'\nassert solution('4\\n1 2 3 4\\n5 6 7 8') == 'impossible'\nassert solution('4\\n1 2 2 3\\n5 6 7 8') == 'impossible'\nassert solution('4\\n1 2 2 3\\n5 6 7 8') == 'impossible'\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 2 1''') == '4'\nassert solution('''2\n1 2 2 1''') == '4'\nassert solution('''1\n3 7''') == 'impossible'\n\n\"\"\"\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 2 1\\n3 7\") == \"4\"\nassert solution(\"3 7\") == \"impossible\"\n\"\"\"\n\nn = int(input())\na = [int(n) for n in input().split()]\nsock_counter = {}\nfor s in set(a):\n    sock_counter[s] = a.count(s)"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\n\"\"\"\n\nimport heapq\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\nassert solution(\"1\\n7\\n1 1 2 2 1 2 2\") == \"impossible\"\n\n\"\"\""
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '184 1'\n) == '180'\nassert solution(\n    '123450995 1'\n) == '123451000'\nprint('Test passed')\n\n------Solution------\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10001100 100') == '10100'\nassert solution('100010 1') == '10010'\nassert solution('10001100 1001') == '10101'\nassert solution('10001100 10010') == '10110'\nassert solution('10001100 100100') == '101100'\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\nprint(\"Passed all tests... \")"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"184 1\\n\") == \"180\"\nassert solution(\"123450995 1\\n\") == \"123451000\"\nprint(\"Passed all tests\")"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\"\"\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\""
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 34 50 9 5\") == \"123450995\"\n\"\"\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'\n\"\"\""
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"184 1\\n\") == \"180\"\nassert solution(\"123450995 1\\n\") == \"123451000\"\n\nprint(\"Successfully passed all tests\")\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3\\n') == '0.000000'\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u0439\u0442\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430, \u0441\u0443\u043c\u043c\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430, \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0430\u0432\u043d\u044b \u0435\u043c\u0443 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c.\n\n\u0414\u0430\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0435\u0431\u044f.\n\n\u0414\u0430\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0438 \u0441\u0443\u043c\u043c\u044b \u0434\u0432\u0443\u0445 \u0441\u043e\u0441\u0435\u0434\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0440\u0430\u0432\u043d\u044b \u0435\u043c\u0443.\n\n\u0414\u0430\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b, \u043d\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439 \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0432\u0443\u0445 \u0441\u043e\u0441\u0435\u0434\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b.\n\n\u0414\u0430\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u0439\u0442\u0438 \u0441\u0430\u043c\u043e\u0435 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043d\u0435 \u0438\u043c\u0435\u044e\u0449\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439.\n\n\u0414\u0430\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u0439\u0442\u0438 \u0441\u0430\u043c\u043e\u0435 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u043e\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043d\u0435 \u0438\u043c\u0435\u044e\u0449\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439.\n\n\u0414\u0430\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430, \u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0449\u0438\u0445 \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430.\n\n\u0414\u0430\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 7, \u043d\u043e \u043d\u0435 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 5.\n\n\u0414\u0430\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u0439\u0442\u0438 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430.\n\n\u0414\u0430\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u0439\u0442\u0438 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438.\n\n\u0414\u0430\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u0439\u0442\u0438 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u0439 \u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b.\n\n\u0414\u0430\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u0439\u0442\u0438 \u043e\u0431\u0449\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430, \u043d\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439.\n\n\u0414\u0430\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u0439\u0442\u0438 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430, \u043d\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439.\n\n\u0414\u0430\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430.\n\n\u0414\u0430\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0446\u0435\u043b\u044b\u0445"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\") == '0.000000'\nassert solution(\"3\\n1 1\\n2 2\\n3 3\\n0.0 1.0\") == '0.0'\nassert solution(\"3\\n0.0 1.0\\n1.0 0.0\\n1.0 1.0\") == '0.0'\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\n\"\"\"\n\nN = int(input())\ncoordinates = []\nfor i in range(N):\n    coordinates.append(list(map(int, input().split())))\nans = 0\ncoordinates.sort(key=lambda x: x[0])\nfor i in range(N):\n    ans += coordinates[i][1] - coordinates[i][0]\nprint(ans/2)\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\") == \"0.000000\"\nassert solution(\"3\\n0 1\\n1 0\\n1 1\") == \"0.000000\"\n\"\"\"\n\n\n\n\"\"\"\n\u00dcbung:\nMit der Eingabe kann man auf die Anzahl der Zeilen und Spalten gewechselt werden.\n\n\"3\" -> Zeilen: 3, Spalten: 1\n\"2 2\" -> Zeilen: 2, Spalten: 2\n\"3 3\" -> Zeilen: 3, Spalten: 3\n\n\"\"\""
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\") == \"0.000000\"\nassert solution(\"3\\n0 1\\n1 0\\n1 1\") == \"0.000000\"\n\nimport sys"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.0'\nassert solution('3\\n0 1\\n1 0\\n1 1') == '0.0'"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"3\n1 1\n2 2\n3 3\"\"\"\n) == \"0.000000\"\nassert solution(\n\"\"\"3\n0 1\n1 0\n1 1\"\"\"\n) == \"0.000000\"\nassert solution(\n\"\"\"4\n0 0\n1 0\n1 1\n0 0\"\"\"\n) == \"0.000000\"\n\"\"\"\nimport sys\na=sys.stdin.readlines()\nx=[int(i.split(' ')[0]) for i in a]\ny=[int(i.split(' ')[1]) for i in a]\nm=max(x)+max(y)\nl=0\nfor i in range(len(x)):\n    for j in range(len(y)):\n        d=x[i]-y[j]\n        if abs(d)>l:\n            l=abs(d)\nprint(l)\n\"\"\"\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\\n\") == \"0.000000\""
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\\n\") == \"0.000000\""
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\") == 0.0\nassert solution(\"3\\n0 1\\n1 0\\n1 1\") == 0.0\nassert solution(\"3\\n3 1\\n0 1\\n1 1\") == 0.0\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\\n3 4 2 1\") == \"1\\n2\\n4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\nassert solution(\"3\\n2\\n2 1 2\") == \"1\\n2\"\n\nprint(solution(input()))\n\nExplanation\n3 persons, i.e. [1, 2, 3]\n2 evenings, i.e. [1, 2]\n[1, 2, 3] -> [1, 2, 3]\n[1, 2] -> [1, 2, 3]\n[1, 2, 3] -> [1, 2, 3]\n[1, 2] -> [2, 3, 1]\n[2, 3, 1] -> [3, 1, 2]\n[3, 1, 2] -> [1, 2, 3]\n[2, 3, 1] -> [1, 2, 3]\n[1, 2, 3] -> [1, 2, 3]\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1\\n2\\n4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2\\n1 2 2\\n3 2 3 4\") == \"1 2 4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1 2 6 8\"\nprint('PASSED')\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\\n3 4 2 1\") == '1\\n2\\n4'\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == '1\\n2\\n6\\n8'\n\n\"\"\"\n\nfrom typing import List\nimport os\nimport sys\n\nDEBUG = False\ndata_dir = os.path.join(os.path.dirname(__file__), 'data')\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1\\n2\\n4\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1 2 4\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\\n3 4 2 1\") == \"1 2 4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1 2 6 8\""
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\\n3 4 2 1\") == \"1 2 4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1 2 6 8\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == '1\\n2\\n4'\n\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == '1\\n2\\n6\\n8'\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1\\n2\\n4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\nassert solution(\"4\\n4\\n2 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n\"\"\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\nassert solution('1 1 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3 4 5) == 60\nassert solution(2 2 2) == 8\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\nassert solution('1 1 1') == '1'\nassert solution('2 3 3') == '8'\nassert solution('4 3 5') == '64'\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\n\"\"\"\nimport itertools\nimport math\nimport typing"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 4 5\"\n) == \"60\"\nassert solution(\n    \"2 2 2\"\n) == \"8\"\n\"\"\"\n\nN, T, M = [int(x) for x in input().split()]\ntotal = N * T * M\nprint(total)"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 0 2\\n3 -1 4') == '1.6666666666666667'\n\nimport unittest\nimport io\nimport sys\nclass Test(unittest.TestCase):\n    def testIO(self):\n        input = io.StringIO(\"\"\"3\n3 0 2\n\"\"\")\n        output = io.StringIO()\n        sys.stdin = input\n        sys.stdout = output\n        solution()\n        sys.stdout = sys.__stdout__\n        self.assertEqual(output.getvalue(), \"\"\"1.6666666666666667\n\"\"\")"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 0 2') == '1.6666666666666667'\nassert solution('3 -1 4') == '2.5'\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 -1 4\") == \"2.5\"\n\"\"\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 0 2') == '1.6666666666666667'\nassert solution('3 -1 4') == '2.5'\n\"\"\"\n\n\"\"\"\n3 0 2\n3 -1 4\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3\\n1 -1 4\") == \"2.5\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 0 2\\n1 -1 4') == '2.5'\nassert solution('3 0 2\\n3 -1 4') == '1.6666666666666667'\n\"\"\""
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 0 2') == '1.6666666666666667'\nassert solution('3 -1 4') == '2.5'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n0 1 2') == '1.666667'\nassert solution('3\\n0 1 -1 4') == '2.5'\nassert solution('2\\n-1 1') == '0.0'\nassert solution('3\\n-1 -1 -1') == '0.0'\nassert solution('3\\n-1 -1 0') == '0.0'\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 0 2\") == \"1.6666666666666667\"\nassert solution(\"3\\n1 -1 4\") == \"2.5\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3\\n') == '6'\nassert solution('15 12\\n') == '7'\n\nfrom math import sqrt\nfrom sys import stdin"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3\\n2 6 7 8 9 10') == '6'\nassert solution('15 12\\n1 3 5 7 9 11 13 15') == '7'\n\"\"\"\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\") == \"6\"\nassert solution(\"15 12\") == \"7\"\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3\") == \"7\"\nassert solution(\"15 12\") == \"7\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7 3\n''') == '6'\n\nassert solution('''15 12\n''') == '7'\n\n\"\"\"\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('15 12') == 7\n\"\"\"\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\") == \"6\"\nassert solution(\"15 12\") == \"7\"\n\"\"\""
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3\\n') == '6'\nassert solution('15 12\\n') == '7'\nassert solution('15 15\\n') == '15'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\nprint('Success')\n\nimport math"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123864 123865\") == 1\n\"\"\""
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\nprint(\"Success\")\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('123864 123865') == 1\nassert solution('198765 198769') == 0\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(123456) == 6\nassert solution(1234567) == 36\nassert solution(12345678) == 4862\nassert solution(123456789) == 29696\nassert solution(1234567890) == 10987654320\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'\nprint('Test pass.')\n\n----"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"123864 123865\"\n) == \"1\"\n\nassert solution(\n    \"198765 198769\"\n) == \"0\"\n\nprint(\"Hooray!\")\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"123864 123865\"\"\") == \"\"\"1\"\"\"\n\nassert solution(\n\"\"\"1234 6543 2\"\"\") == \"\"\"0\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('123864 123865') == 1\nassert solution('198765 198769') == 0\nassert solution('123864 123865') == 1\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('123456 123456') == 1\nassert solution('1123456 987654') == 0\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == 0.5\nassert solution(\"3\") == 0.66666667\nassert solution(\"5\") == 0.83333333\nassert solution(\"7\") == 0.88888889\nassert solution(\"10\") == 0.90909091\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('10') == '10'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '0.66666667'\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == '0.5'\nassert solution(\"3\") == '0.66666667'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n') == '0.50000000'\nassert solution('3\\n') == '0.66666667'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n\") == \"0.5\"\nassert solution(\"3\\n\") == \"0.66666667\""
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'\nprint('Test pass.')\n\n-----Notes-----\nAssume that nobody in the town has the same name as any other citizen.\n\n\"\"\""
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n') == '0.5'\n\nprint(solution(stdin))"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1\\n2\\n1\\n1\\n') == '0.500'\nassert solution('6\\n1\\n2\\n1\\n1\\n2\\n2\\n') == '0.667'\nassert solution('10\\n1\\n2\\n1\\n1\\n2\\n2\\n3\\n1\\n2\\n1\\n1\\n1\\n2\\n') == '0.833'\nassert solution('12\\n1\\n2\\n1\\n1\\n2\\n2\\n3\\n1\\n2\\n1\\n1\\n2\\n2\\n3\\n3\\n') == '0.667'\nassert solution('14\\n1\\n2\\n1\\n1\\n2\\n2\\n3\\n1\\n2\\n1\\n1\\n2\\n2\\n3\\n3\\n3\\n3\\n') == '0.667'\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '0.50000000'\nassert solution('3\\n') == '0.66666667'\n\nimport sys\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n@atexit.register\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"180\") == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution(\"96\") == 'triple 19\\ndouble 15\\nsingle 9'\nassert solution(\"6\") == 'impossible'\n\"\"\""
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20\\n'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9\\n'\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\nassert solution('45') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('180') == 'triple 20'\nassert solution('96') == 'triple 19'\n\"\"\""
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\""
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\n\"\"\""
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('180') == 'triple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\"\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"180\") == \"triple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"\nprint(\"Passed!\")\n\n-----Notes-----\nThe classic game of darts is played by several people on a wooden board. There are 20 sections on the board numbered 1 to 20, with one section being the bullseye. The players take turns throwing a dart, which is pointed at one of the 20 sections of the board. When a dart hits a section of the board other than the bullseye, it is added to that section's score, and the player who throws the dart gets another turn. The last player to hit the bullseye wins the game.\n\nThe classic game of darts is traditionally played with 20 sections on the board, but this problem is an abstract generalization of this problem.\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('10 4 7') == '168'\n\"\"\"\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\n\"\"\"\n\na = input().split(' ')\nc = int(a[0])\nb = int(a[1])\nd = int(a[2])\ne = int(a[3])\n\nprint(4 * (c * d + b * e))\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n') == '2'\nassert solution('3\\n2\\n1\\n') == '6'\nassert solution('3\\n5\\n2\\n1\\n') == '18'\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\nassert solution(\"10 10 10\") == \"400\"\nassert solution(\"100 100 100\") == \"10000\"\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(10 4 7) == 168\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''10 4 7''') == '168'\nassert solution('''5 2 2''') == '36'\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''10 4 7''') == '''168'''\nassert solution('''5 2 2''') == '''36'''\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nprint(solution(\"10 4 7\"))\nassert solution(\"5 2 2\") == \"36\"\nprint(solution(\"5 2 2\"))\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n3 8\\n5 8') == 1\n\"\"\""
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n3 10\") == \"7\"\nassert solution(\"2\\n3 8\") == \"1\"\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n5 8\") == \"1\"\nassert solution(\"7\\n5 8\\n8 3\") == \"2\"\nassert solution(\"7\\n5 8\\n8 3\\n5 4\") == \"1\"\n\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\\n3 8\\n5 8\") == 1\n\"\"\""
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10\") == 7\n\n'''\nimport sys\nimport math\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n3 10\") == \"7\"\nassert solution(\"2\\n3 8\") == \"1\"\nassert solution(\"3\\n5 8\") == \"1\"\n\"\"\""
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n3 10\\n5 8\") == \"7\"\nassert solution(\"2\\n3 8\\n5 8\") == \"1\"\n\"\"\"\n\nimport sys\nimport functools"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3\\n8 9\") == \"1\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n3 10\") == \"7\"\n\"\"\"\n\nimport unittest\nimport itertools\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n0') == '0'\n\"\"\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"1\nSimon says smile.\n\"\"\") == \"\"\"smile.\"\"\"\nassert solution(\"\"\"3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\") == \"\"\"raise your right hand.\nraise your left hand.\"\"\"\n\"\"\"\nSolution:\nFirst, split the input into an array of commands. Then, for each command, check if the command begins with \"Simon says\", \n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"1\nSimon says smile.\n\"\"\") == \"\"\" smile.\n\"\"\";\n\nassert solution(\"\"\"2\nSimon says smile.\nSimon says my name is Simon.\n\"\"\") == \"\"\" smile.\nSimon says my name is Simon.\n\"\"\";\n\nassert solution(\"\"\"3\nSimon says smile.\nSimon says my name is Simon.\nSimon says my name is John.\n\"\"\") == \"\"\" smile.\nSimon says my name is John.\n\"\"\";\n\n\"\"\"\nThe solution to this problem is as follows.\n\nGiven a text of commands, the program should process them and output what will happen in the game. The output should be a text, where the player is Simon, and the computer is the opponent.\n\nThe output should be written to the standard output (stdout), and should not be written to the input stream.\n\nSample Input 1:\n1\nSimon says smile.\nSample Output 1:\nSimon says smile.\n\nSample Input 2:\n2\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\nSample Output 2:\nSimon says raise your left hand.\nSimon says raise your right hand.\n\nSample Input 3:\n3\nSimon says smile.\nSimon says my name is Simon.\nSimon says my name is John.\nSample Output 3:\nSimon says my name is John.\nSimon says my name is Simon.\nSimon says smile.\n\n\"\"\"\nimport re\n\nn = int(input())\nfor _ in range(n):\n    command = input()\n    if command.startswith(\"Simon says\"):\n        print(command[len(\"Simon says\"):])\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1\nSimon says smile.\n\"\"\") == \"\"\"\n smile.\n\"\"\", solution(\"\"\"\n1\nSimon says smile.\n\"\"\")\nassert solution(\"\"\"\n3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\") == \"\"\"\n raise your right hand.\n raise your left hand.\n\"\"\", solution(\"\"\"\n3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\")\nassert solution(\"\"\"\n2\nSimon says dance.\nSimon says listen.\n\"\"\") == \"\"\"\n dance.\n\"\"\", solution(\"\"\"\n2\nSimon says dance.\nSimon says listen.\n\"\"\")\nassert solution(\"\"\"\n1\nSimon says dance.\nSimon says listen.\n\"\"\") == \"\"\"\nSimon says dance.\nSimon says listen.\n\"\"\", solution(\"\"\"\n1\nSimon says dance.\nSimon says listen.\n\"\"\")\n\n\"\"\"\nIn this mission you need to create a password verification function.\n\nThose are the verification conditions:\n\nthe length should be bigger than 6;\nshould contain at least one digit.\nInput: A string.\n\nOutput: A bool.\n\"\"\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"1\nSimon says smile.\n2\nSimon says raise your right hand.\n3\nSimon says lower your right hand.\n4\nSimon says raise your left hand.\n5\nSimon says lower your left hand.\n\"\"\") == \"\"\" smile.\nraise your right hand.\nlower your right hand.\nraise your left hand.\nlower your left hand.\n\"\"\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nSimon says smile.\\nSimon says higher.\\nSimon says lower.\\nSimon says higher.\\n\") == \"\"\"smile.\nhigher.\nlower.\nhigher.\n\"\"\"\n\nassert solution(\"1\\nSimon says smile.\\nSimon says raise your right hand.\\nSimon says raise your left hand.\\nSimon says raise your left hand.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\n\") == \"\"\"smile.\nraise your right hand.\nraise your left hand.\nraise your left hand.\nsmile.\nsmile.\nsmile.\nsmile.\n\"\"\"\n\nassert solution(\"2\\nSimon says smile.\\nSimon says raise your right hand.\\nSimon says raise your left hand.\\nSimon says raise your right hand.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\n\") == \"\"\"smile.\nraise your right hand.\nraise your left hand.\nraise your right hand.\nsmile.\nsmile.\nsmile.\n\"\"\"\n\nassert solution(\"2\\nSimon says smile.\\nSimon says higher.\\nSimon says lower.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\n\") == \"\"\"higher.\nlower.\nsmile.\nsmile.\nsmile.\n\"\"\"\n\nassert solution(\"1\\nSimon says smile.\\nSimon says raise your right hand.\\nSimon says raise your left hand.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile."
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''Simon says smile.\n\nSimon says raise your right hand.\n\nLower your right hand.\n\nSimon says raise your left hand.\n''') =='smile\\nraise your left hand.\\nsmile\\nraise your right hand.\\n'\nprint('Test pass.')\n\n\"\"\"\nYou have been given a list of strings, where each string is a sentence. Return the list with the same size, where the ith string is the sentence reversed. For example, if the input was ['I am a string','string', 'to be reversed'], then the output should be ['s'tring', 'to be reversed','reversed i am a string'].\n\nInput: A list of strings.\n\nOutput: A list of strings of the same size, where the ith string is the input list reversed.\n\nExample:\n\nreverse_sentences(['I am a string','string', 'to be reversed']) == ['s'tring', 'to be reversed','reversed i am a string']\n\"\"\""
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1\nSimon says smile.\n\"\"\") =='smile.\\n'\nassert solution(\"\"\"\n2\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\") =='raise your right hand.\\n raise your left hand.\\n'\nassert solution(\"\"\"\n2\nSimon says smile.\nSimon says frown.\n\"\"\") =='smile.\\n'\nassert solution(\"\"\"\n2\nSimon says frown.\nSimon says frown.\n\"\"\") =='frown.\\n'\nassert solution(\"\"\"\n2\nSimon says smile.\nSimon says frown.\nSimon says raise your right hand.\nLower your right hand.\nSimon says frown.\n\"\"\") =='raise your right hand.\\n frown.\\n'\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\"\n) == \"\"\"raise your right hand.\nraise your left hand.\n\"\"\"\n\n\"\"\"\nINPUT:\n1\nSimon says smile.\n\nOUTPUT:\nsmile.\n\"\"\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input_1) == output_1\n\nprint(solution(input_2))\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\") == \"smile.\\nsmile.\\nsmile.\\nsmile.\"\nassert solution(\"3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n\") == \"raise your right hand.\\nraise your left hand.\"\n\n\"\"\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'0 0 4 6 10 12 16 18'\n) == '5'\nassert solution(\n'1 2 4 6 10 12 16 18'\n) == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\n\"\"\"\nimport math"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '0'\nassert solution('1 2 4 6 10 12 16 18') == '0'\nassert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n\"\"\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n\"\"\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\nassert solution(\"1 1 1 1 1 1 1 1 1\") == \"8\"\nassert solution(\"0 0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\"\"\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\nassert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\n\"\"\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\n\"\"\"\n\nfrom collections import deque\n\nclass Solution:\n    def __init__(self, input_str: str):\n        input_str = input_str.strip().split(' ')\n        self.input = [int(x) for x in input_str]\n        self.input = deque(self.input)\n\n    def execute(self):\n        # init variables\n        p_2, p_3, p_5, p_7, p_11, p_13, p_17, p_19 = 0, 0, 0, 0, 0, 0, 0, 0\n        num_operations = 0\n\n        while self.input:\n            # process the input\n            p_2 = self.input.popleft()\n            if p_2!= 0:\n                p_2 -= 1\n                self.input.appendleft(p_2)\n            p_3 = self.input.popleft()\n            if p_3!= 0:\n                p_3 -= 1\n                self.input.appendleft(p_3)\n            p_5 = self.input.popleft()\n            if p_5!= 0:\n                p_5 -= 1\n                self.input.appendleft(p_5)\n            p_7 = self.input.popleft()\n            if p_7!= 0:\n                p_7 -= 1\n                self.input.appendleft(p_7)\n            p_11 = self.input.popleft()\n            if p_11!= 0:\n                p_11 -= 1\n                self.input.appendleft(p_11)\n            p_13 = self.input.popleft()\n            if p_13!= 0:\n                p_13 -= 1\n                self.input.appendleft(p_13)\n            p_17 = self.input.popleft()\n            if p_17!= 0:\n                p_17 -= 1\n                self.input.appendleft(p_17)\n            p_19 = self.input.popleft()\n            if p_19!= 0:\n                p_19 -= 1\n                self.input.appendleft(p_19)\n\n            # if p_19 has reached the last position\n            if p_19 == 19:\n                p_19 = 0\n\n            # add 1 to num_operations if the value of the next position is 0\n            if self.input[0] == 0:\n                num_operations += 1\n\n        # return num_operations\n        return num_operations"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\nassert solution(\"0 0 0 0 0 0 0 0 0\") == \"8\"\nassert solution(\"0 0 2 4 6 10 12 16 18\") == \"1\"\nassert solution(\"0 0 2 0 0 0 0 0 0\") == \"8\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 2\nAA\nAT\nTT\nTC''') == '''3\n0 1\n1 2\n2 3'''\nassert solution('''4 1\nA\nA\nG\nT''') == '''2\n0 1\n0 2'''\n\nprint(solution(stdin.read()))\n\n\"\"\"\n\n\"\"\"\nimport numpy as np\nimport sys\n\nn, k = tuple(map(int, sys.stdin.readline().split()))\n\nfor i in range(n):\n    a = sys.stdin.readline().strip()\n    a = np.array(list(a))\n    n = np.size(a)\n    d = np.zeros((n, n))\n    for j in range(n):\n        for k in range(n):\n            d[j, k] = a[j]!= a[k]\n    print(np.sum(d))\n\"\"\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3\\n0 1\\n1 2\\n2 3'\n\"\"\"\nimport sys"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == 3\n\"\"\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n0 2\\n0 3\"\n\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\\n0 1\\n0 2\\n0 3\"\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n1 2\\n2 3\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\"\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\\n0 1\\n0 2\\n0 3\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n1 2\\n2 3\"\n\n\"\"\"\n\nimport sys\nimport numpy as np\nfrom collections import defaultdict\nfrom typing import Dict, List, Tuple\n\n\"\"\"\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == 3\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 2\nAA\nAT\nTT\nTC''') == '3\n0 1\n0 2\n0 3'\nassert solution('''4 1\nA\nA\nG\nT''') == '2\n0 1\n0 2\n0 3'\n\n-----\nSample Input 1:\n4 2\nAT\nGG\nTT\nTG\nSample Output 1:\n1\n0 1\n0 2\n0 3\nSample Input 2:\n4 2\nAC\nAT\nAT\nTT\nSample Output 2:\n1\n0 1\n0 2\n0 3'\n\n-----\nSample Input 1:\n4 2\nGG\nGG\nTG\nTG\nSample Output 1:\n1\n0 1\n0 2\n0 3\nSample Input 2:\n4 2\nTG\nGT\nGG\nGG\nSample Output 2:\n1\n0 1\n0 2\n0 3\n\n-----\nSample Input 1:\n4 2\nGC\nGC\nGG\nTC\nSample Output 1:\n2\n0 1\n0 2\n0 3\nSample Input 2:\n4 2\nTG\nTG\nGG\nTT\nSample Output 2:\n2\n0 1\n0 2\n0 3\n\n-----\nSample Input 1:\n4 2\nGG\nTT\nTG\nTT\nSample Output 1:\n1\n0 1\n0 2\n0 3\nSample Input 2:\n4 2\nGG\nGC\nGG\nGG\nSample Output 2:\n1\n0 1\n0 2\n0 3\n\n-----\nSample Input 1:\n4 2\nGC\nGC\nTT\nTC\nSample Output 1:\n2\n0 1\n0 2\n0 3\nSample Input 2:\n4 2\nGG\nGC\nGG\nGG\nSample Output 2:\n1\n0 1\n0 2\n0 3'''\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3'\nassert solution('4 1\\nA\\nA\\nG\\nT') == '2\\n0 1\\n0 2\\n0 3'\n\nassert solution('4 1\\nAAAA\\nAAA\\nAAAA\\nAAAA') == '2\\n0 1\\n0 2\\n0 3\\n0 4'\nassert solution('4 1\\nAAC\\nAAG\\nAAG\\nAAC') == '2\\n0 1\\n0 2\\n0 3\\n0 4'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == -1\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '-1'\nassert solution('aaaa') == 'a'\nassert solution('ab') == '-1'\nassert solution('abc') == 'a'\nassert solution('abca') == 'a'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == '-1'\n\"\"\""
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"bbbb\") == \"b\"\nassert solution(\"a\") == \"a\"\nassert solution(\"ab\") == -1\nassert solution(\"ba\") == -1\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ab\") == \"-\"\nassert solution(\"aaaa\") == \"a\"\nassert solution(\"abba\") == \"ab\"\nassert solution(\"aabaaaaaaaaaaaaaaaa\") == \"aab\"\nassert solution(\"aabaaaaaaaaaaaaaaaaaaaaa\") == \"aabaaaaaaaaaaaaaaaaaaaa\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == -1\nassert solution(\"aabbbaa\") == \"a\"\nassert solution(\"abc\") == \"ab\"\nassert solution(\"abccbaab\") == \"a\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == '-1'\nassert solution('cab') == 'a'\n\"\"\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == '-1'\n\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz needs 1 more piece of chicken!'\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 100\\n2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\"\n\"\"\"\n\nn, m = map(int, input().split())"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '20 100'\n) == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution(\n    '2 3'\n) == 'Dr. Chaz needs 1 more piece of chicken!'\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\"\n\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\n\"\"\"\nfrom math import floor, ceil\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n\n    def test_solution1(self):\n        self.assertEqual(solution(\"20 100\"), \"Dr. Chaz will have 80 pieces of chicken left over!\")\n\n    def test_solution2(self):\n        self.assertEqual(solution(\"2 3\"), \"Dr. Chaz will have 1 piece of chicken left over!\")\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n\n\"\"\"\n\nfrom math import ceil\n\nn, m = map(int, input().split())\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('2') == 'Dr. Chaz needs 1 more piece of chicken!'\nassert solution('10 100') == 'Dr. Chaz will have 10 pieces of chicken left over!'\nassert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz needs 2 more pieces of chicken!'\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 100\\n3 4\") == \"Dr. Chaz needs 8 pieces of chicken!\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == '-2'\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == '0'\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"0\"\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == \"-2\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 10\\n1 1 2\\n2 2 2\\n3 2 1') == '-2'\n\"\"\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 10\\n1 1 2\\n2 2 2\\n3 2 1') == '-2'\nassert solution('3 30\\n1 1 1\\n5 2 3\\n5 2 1') == '0'\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == '-2'\nassert solution(\"4 980\\n10 10 10\\n10 5 2\\n5 3 2\\n90 5 2\") == '20'\nprint('Success')"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == '-2'\n\nassert solution(\"3 980\\n10 10 10\\n10 5 2\\n5 3 2\\n90 5 2\") == '0'\n\"\"\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"0\"\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == \"-2\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 10\n1 1 2\n2 2 2\n3 2 1''') == '-2'\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 10\\n1 1 2\\n2 2 2\\n3 2 1') == '-2'\nassert solution('3 30\\n1 1 1\\n5 2 3\\n5 2 1') == '0'\nassert solution('4 10\\n1 1 1\\n5 2 3\\n5 2 1\\n4 3 3') == '2'\nassert solution('4 30\\n1 1 1\\n5 2 3\\n5 2 1\\n4 3 3') == '0'\nassert solution('4 10\\n1 1 1\\n5 2 3\\n5 2 1\\n4 3 3\\n3 1 1\\n4 1 3\\n2 2 2\\n4 3 3') == '0'\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\"\n\nsolution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\")\n-----Problem-----\nLittle Ivica solved crossword puzzles every day. In case you haven\u2019t seen one, a crossword puzzle starts on a grid of $R \\times C$ squares, each of which is either empty or blocked. The player\u2019s task is to write words in consecutive empty squares vertically (top down) or horizontally (left to right).\n\nIvica\u2019s sister has a strange habit of looking at crosswords Ivica has finished solving, and finding the lexicographically smallest word in it. She only considers words at least $2$ characters long.\n\nWrite a program that, given a crossword puzzle, finds that word.\n\n-----Input-----\nThe first line contains two integers $R$ and $C$ ($2 \\le R, C \\le 20$), the number of rows and columns in the crosswords.\n\nEach of the following $R$ lines contains a string of $C$ characters. Each of those characters is either a lowercase letter of the English alphabet, or the character \u2018#\u2019 representing a blocked square.\n\nThe input will be such that a solution will always exist.\n\n-----Output-----\nOutput the lexicographically smallest word in the crossword.\n\n-----Examples-----\nSample Input 1:\n4 4\nluka\no#a#\nkula\ni#a#\nSample Output 1:\nkala\n\nSample Input 2:\n4 4\nluka\no#a#\nkula\ni#as\nSample Output 2:\nas\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\"\n\nprint(\"Success!\")\n'''"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\n\"\"\"\n\n\"\"\"\nLittle Ivica has a friend who likes crosswords. They have a grid of size $R \\times C$ squares, where each cell in the grid is either empty or blocked. The player has to write words in the grid such that they are not blocked, but there is a constraint that every word written must contain only unique characters, i.e. no two words may share the same characters.\n\nLittle Ivica\u2019s friend wants to find the shortest possible word that satisfies that constraint. She sometimes solves these puzzles and calls them super-crosswords. The program must accept a string of $R \\times C$ characters, where each character is either a lowercase letter of the English alphabet, or the character \u2018#\u2019 representing a blocked square. The characters in the input represent the initial state of the crossword puzzle. The program must output the lexicographically smallest word that satisfies the constraint and is the shortest possible word.\n\nFor example, if the input string is"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n'4 4\\nluka\\no#a#\\nkula\\ni#a#\\n'\n) == 'kala'\nassert solution(\n'4 4\\nluka\\no#a#\\nkula\\ni#as\\n'\n) == 'as'\nprint('Success')"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#\\n') == 'kala'\n\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as\\n') == 'as'\n\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as\\n') == 'as'\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\"\n\nprint(\"Passed all tests... \")\n\n------Solution------\nimport sys\n\nr, c = [int(x) for x in sys.stdin.readline().split()]\n\ngrid = []\nfor _ in range(r):\n    grid.append(sys.stdin.readline().strip())"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(None) == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"###\") == \"\"\nassert solution(\"# #\") == \"\"\nassert solution(\"kaka\") == \"a\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 4\nluka\no#a#\nkula\ni#a#''') == 'kala'\n\nassert solution('''4 4\nluka\no#a#\nkula\ni#as''') == 'as'\nassert solution('''4 4\nluka\no#a#\nkula\ni#a#\n''') == 'kala'\nassert solution('''3 3\nluka\no#a#\nkula\ni#a#\n''') == 'kla'\nassert solution('''3 2\nluka\no#a#\nkula\ni#a#\n''') == 'kla'\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#\\n') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as\\n') == 'as'\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as\\n') == ''\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"NSEW\") == 4\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('WNEENWEENEENE') == 10\n\"\"\""
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WNEENWEENEENE\") == 10\n\"\"\"\n\nfrom sys import stdin\nfrom collections import deque\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('WNEENWEENEENE') == 10"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"WNEENWEENEENE\") == \"10\"\nassert solution(\"NSEW\") == \"4\"\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('WNEENWEENEENE') == 10"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('WNEENWEENEENE') == 10\nassert solution('NSEW') == 4\n\nprint(solution('WNEENWEENEENE'))\nprint(solution('NSEW'))\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('WNEENWEENEENE') == 10\nassert solution('NSEW') == 4\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution( \"WNWNWNWNWNWWNWNWNWN\" ) == 14\nassert solution( \"WNWNWNWNWNWWNWNWNWN\" ) == 10\nassert solution( \"WNWNWNWNWNWWNWNWNWN\" ) == 14\nassert solution( \"NWWWNWNWNWNWNWNWNWN\" ) == 12\nassert solution( \"NWWWNWNWNWNWNWNWNWN\" ) == 10\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('WNEENWEENEENE') == 10\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 1 2 3\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\n\"\"\"\n\nimport sys\n\nimport operator\n\nfrom collections import defaultdict"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"\"\"1 - 2 = 3 - 4\n1 / 2 = 3 / 4\"\"\"\n\nassert solution(\"0 4 2 2\") == \"\"\"0 * 4 = 2 - 2\n0 + 4 = 2 * 2\n0 + 4 = 2 + 2\n0 / 4 = 2 - 2\"\"\"\n\nassert solution(\"0 4 2 3\") == \"\"\"problems ahead\"\"\"\n\nassert solution(\"0 4 -3 4\") == \"\"\"0 * -3 = -6 - 4\n0 + 4 = -3 * 4\n0 + 4 = 0 - 3\n0 - 4 = -3 * 4\n0 - 4 = 0 + 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 + 4 = -3 + 4\n0 * 4 = 0 - 3\n0 - 4 = 0 + 3\n0 - 4 = 0 + 3\n0 + 4 = -3 + 4\n0 * 4 = 0 - 3\n0 * 4 = 0 + 3\n0 / 4 = 0 - 3\n0 * 4 = 0 + 3\n0 * 4 = 0 - 3\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = 0 - 3\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 + 4 = -3 + 4\n0 * 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = 0 - 3\n0 - 4 = 0 + 3\n0 + 4 = -3 + 4\n0 * 4 = 0 - 3\n0 * 4 = 0 + 3\n0 - 4 = 0 + 3\n0 / 4 = 0 - 3\n0 * 4 = 0 + 3\n0 * 4 = 0 - 3\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4 = 0 - 3\n0 + 4 = -3 + 4\n0 * 4 = -3 + 4\n0 * 4 = 0 + 3\n0 - 4 = -3 * 4\n0 / 4"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 4 2 2\") == \"\"\"0 * 4 = 2 - 2\n0 + 4 = 2 * 2\n0 + 4 = 2 + 2\n0 / 4 = 2 - 2\"\"\"\nassert solution(\"1 2 3 4\") == \"\"\"1 - 2 = 3 - 4\n1 / 2 = 3 / 4\"\"\"\nassert solution(\"1 3 2 4\") == \"problems ahead\"\nassert solution(\"2 2 3 4\") == \"problems ahead\"\nassert solution(\"1 1 1 4\") == \"problems ahead\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n\""
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\"\nassert solution(\"1 2 0 2\") == \"problems ahead\"\n\nassert solution(\"5 10 12 20\") == \"5 * 10 = 50 + 20\\n5 * 10 = 50 - 20\\n5 * 10 = 50 - 20\\n5 * 10 = 50 + 20\\n5 * 10 = 50 - 20\"\nassert solution(\"5 10 12 19\") == \"problems ahead\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n'\n\n'''\n\na, b, c, d = list(map(int, input().split(' ')))\nprint('1 - 2 = 3 - 4' if a == 1 else 'problems ahead')\nprint('1 / 2 = 3 / 4' if b == 1 else 'problems ahead')\nprint('1 * 2 = 3 * 4' if c == 1 else 'problems ahead')\nprint('1 + 2 = 3 + 4' if d == 1 else 'problems ahead')\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n'\n\"\"\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1 2 3 4) == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4'\nassert solution(0 4 2 2) == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2'\nassert solution(0 0 0 0) == 'problems ahead'\nassert solution(0 0 4 2) == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2'\nassert solution(0 0 0 0) == 'problems ahead'\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'''1 2 3 4''') == '''1 - 2 = 3 - 4\n1 / 2 = 3 / 4'''\n\nassert solution(\n'''0 4 2 2''') == 'problems ahead'\n\nassert solution(\n'''0 4 2 0''') == 'problems ahead'\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('BANANA PIDZAMA') == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\nassert solution('MAMA TATA') == \".T..\\nMAMA\\n.T..\\n.A..\"\n\n\"\"\"\n\n\nimport collections\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\nassert solution(\"MAMA TATA\") == \".T..\\nMAMA\\n.T..\\n.A..\"\nassert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\nassert solution(\"MAMA TATA\") == \".T..\\nMAMA\\n.T..\\n.A..\"\nassert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABBA CCCB') == '4\\n.C..\\n.C..\\nABBA\\n.B..'\nassert solution('ABBC CCCB') == '4\\n.C..\\n.C..\\nABBA\\n.B..'\n\n-----Explanation-----\nFor the word ABBA, there is no letter shared by both words, so we put a period everywhere. The word ABBA is as long as the word BANANA, so the resulting word is also BANANA, so we expect 3 lines and 6 characters per line:\n\n.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....\n\nFor the word CCCB, there is the letter B in both words, so we put a period everywhere. The word CCCB is as long as the word MAMA, so the resulting word is also MAMA, so we expect 2 lines and 4 characters per line:\n\n.T..\nMAMA\n.T..\n.A..\n\n-----Constraints-----\n$A$ and $B$ will contain at least one letter.\n$A$ and $B$ will be lowercase.\n1 <= length(A) + length(B) <= 30\n\n\"\"\"\nimport sys\nimport pprint"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(ACTAA) == acta\nassert solution(ABBA) == abba\nassert solution(LILITH) == lilith\n\"\"\"\n\nimport sys\n\nimport unittest"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('BANANA PIDZAMA') == '.P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....'\nassert solution('MAMA TATA') == '.T..\\nMAMA\\n.T..\\n.A..'\n\nimport math\nimport re\n\nfrom collections import Counter"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(sample_input) == sample_output"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('BANANA PIDZAMA') == \"\"\"\n.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....\n\"\"\"\nassert solution('MAMA TATA') == \"\"\"\n.T..\nMAMA\n.T..\n.A..\n\"\"\"\n\"\"\"\nGiven two words, find the number of ways to place them on a 2D grid so that they share exactly one character. The words may be empty, so there may be no matching characters at all.\n\nFor example, given the words \"APPLE\" and \"MOON\", there are exactly three ways to place them on a 2D grid so that they share exactly one character:\n\n\n.A.P.\n.P.A.\n.P.P.\n\n.M.O.\n.O.M.\n.M.O.\n\nInput Format\n\nThe first line contains a word, $A$.\nThe second line contains a word, $B$.\n\nConstraints\n\n1 <= |A|, |B| <= 10\nA and B contain only uppercase English letters.\nEach word is non-empty.\nThere is at least one character that is common to both words.\nOutput Format\n\nOutput exactly three lines, each containing a single word. The words must be separated by newline characters (i.e., one newline character after each word).\n\nSample Input 0\n\nAPPLE\nMOON\nSample Output 0\n\n.A.P\n.P.A\n.P.P\nSample Input 1\n\nHELLO\nWORLD\nSample Output 1\n\n.H.E.\n.H.W\n.H.L\n\"\"\""
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\n\"\"\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\nassert solution(\"MAMA TATA\") == \".T..\\nMAMA\\n.T..\\n.A..\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 14\\n13 17\\n25 26') == '10'\n\"\"\"\n\nimport sys\nimport math\nimport copy\nimport functools\nimport itertools\nimport heapq\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n10 15\\n11 20\\n15 25\\n15 30\\n20 30\") == \"5\"\nassert solution(\"3\\n1 366\\n1 2\\n2 3\") == \"366\""
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 365\\n20 28\") == \"365\"\n\"\"\"\n\nimport sys\n\nn = int(input())\n\ndays = []\n\nfor _ in range(n):\n    start, end = list(map(int, input().split()))\n    days.extend(range(start, end+1))\n\ndays = set(days)\n\nprint(len(days))\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26') == '10'\n\"\"\"\n\nN = int(input())\narr = []\nfor _ in range(N):\n    s, t = map(int, input().split())\n    arr.append([s, t])\n\narr.sort()\ncount = 1\ni = 1\nwhile i < N:\n    if arr[i][0] >= arr[i-1][1]:\n        count += 1\n    i += 1\n\nprint(arr[-1][1])\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\n\"\"\""
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n10 14\n13 17\n25 26''') == 10\nassert solution('''2\n1 365\n20 28''') == 365\n\nimport sys"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 14\\n13 17\\n25 26') == '10'\nassert solution('1 365\\n20 28') == '365'\n\"\"\""
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\") == \"365\"\nprint(\"Passed!\")\n\n\"\"\""
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\\n\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\\n\") == \"365\""
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"3\n    10 14\n    13 17\n    25 26\"\"\"\n) == \"\"\"10\n\n11\n12\n13\n14\n15\n16\n17\n25\n26\"\"\"\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n') == '0 1'\n\"\"\"\nimport sys\nimport string\n\nk = int(sys.stdin.readline())\nk = k % 36\n\ncountA = 0\ncountB = 0\n\nfor c in string.ascii_lowercase:\n    if c == 'a':\n        countA += k % 26\n        countB += (k - (k % 26))\n    else:\n        countA += (k % 26)\n        countB += (k - (k % 26))\n\n    k = k // 26\n\nprint(countA, countB)\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"2 3\"\nassert solution(\"1\") == \"0 1\"\nassert solution(\"2\") == \"0 0\"\nassert solution(\"3\") == \"1 1\"\n\"\"\"\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"2 3\"\nprint(solution(\"4\"))"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3\") == \"0 2\"\nassert solution(\"1\\n5\") == \"0 1\"\nassert solution(\"2\\n3\") == \"0 2\"\nassert solution(\"1\\n1\") == \"1 1\"\n\nassert solution(\"4\\n2\") == \"1 2\"\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '0 1'\nassert solution('4') == '2 3'\n\"\"\""
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == '2 3'\nassert solution('1') == '0 1'\nprint('All tests passed.')\n\n\"\"\"\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"2 3\""
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '0 1'\nassert solution('4') == '2 3'\n\"\"\""
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin='') == ('0 1', '')\nassert solution(stdin='2') == ('0 0', '')\nassert solution(stdin='3') == ('0 1', '')\nassert solution(stdin='4') == ('0 2', '')\nassert solution(stdin='5') == ('0 3', '')\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n\") == (\"0 1\")\nassert solution(\"4\\n\") == (\"2 3\")\n\"\"\"\n\nK = int(input())\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nprint(solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\"))"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98') == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\nassert solution('4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99') == 'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99'\nassert solution('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n4 100 50\\n2 100 98') == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\nassert solution('5 3\\n1 100 2\\n2 100 1\\n3 100 99\\n4 100 50\\n2 100 98') == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\nassert solution('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98') == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99') == 'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99'\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 100 99\\n2 100 99\\n3 100 99\\n2 100 99\\n1 100 99\\n1 100 99\\n4 100 99\\n4 100 99\\n\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\"\nassert solution(\"3 3\\n2 100 99\\n1 100 99\\n3 100 99\\n2 100 99\\n1 100 99\\n1 100 99\\n4 100 99\\n4 100 99\\n\") == \"B 0 99\\nA 1 197\\nA 49 100\"\n\n'''\n\nimport sys\nimport os\nimport time\n\nfrom io import StringIO\nfrom itertools import combinations\nfrom collections import deque\nfrom collections import defaultdict\n\nclass Tester(object):\n    def __init__(self, runner=None, verbose=False):\n        self.runner = runner\n        self.verbose = verbose\n\n    def test(self, input_string: str):\n        stdout = sys.stdout\n        sys.stdout = StringIO()\n        try:\n            input_string = input_string.rstrip()\n            if self.verbose: print(input_string)\n            if self.runner:\n                self.runner(input_string)\n            else:\n                self.assert_equals(input_string)\n            return True\n        except AssertionError as e:\n            print(sys.stdout.getvalue())\n            print('[AssertionError]', e)\n            return False\n        finally:\n            sys.stdout.close()\n            sys.stdout = stdout\n\n    def run(self, input_file: str):\n        with open(input_file, 'r') as fp:\n            s = fp.read()\n            assert s[-1] == '\\n'\n            if self.verbose: print(s)\n            return self.test(s)\n\n    def run_tests(self, input_file):\n        with open(input_file, 'r') as fp:\n            lines = fp.readlines()\n            assert len(lines) == 2\n            if self.verbose: print(lines[1][-1] == '\\n')\n            if self.verbose: print(lines[0][-1] == '\\n')\n            return self.test(lines[1][:-1]) and self.test(lines[0][:-1])\n\n    def test_one_test_case(self, input_string: str):\n        input_string = input_string.rstrip()\n        if self.verbose: print(input_string)\n        if self.runner:\n            self.runner(input_string)\n        else:\n            self."
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\"\nassert solution(\"1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"A 0 99\"\nassert solution(\"1 100 200\\n1 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"A 1 197\"\nassert solution(\"1 100 200\\n1 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"A 49 100\""
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2') == 'A'\nassert solution('0 0') == 'A'\nassert solution('1 1') == 'A'\nassert solution('0 1') == 'A'\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\n\"\"\""
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98') == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\n\n'''\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\n\"\"\"\n\u0412 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 2 \u0434\u043e 99 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u043d\u0438\u0445 \u043a\u0440\u0430\u0442\u043d\u044b \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 2 \u0434\u043e 9.\n\n-----Input-----\n\u0427\u0438\u0441\u043b\u043e \u043e\u0442 2 \u0434\u043e 99.\n\n-----Output-----\n\u0421\u043b\u043e\u0432\u0430\u0440\u044c, \u0433\u0434\u0435 \u043a\u043b\u044e\u0447 - \u0447\u0438\u0441\u043b\u043e \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 2 \u0434\u043e 9, \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u043a\u0440\u0430\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0443 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 2 \u0434\u043e 9.\n\n-----Examples-----\nSample Input 1:\n5\nSample Output 1:\n{2: 1, 3: 1, 4: 2, 5: 1, 6: 1, 7: 0, 8: 1, 9: 0}\n\nSample Input 2:\n2\nSample Output 2:\n{2: 1, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0}\n\"\"\"\n\n\"\"\"\n\u0421 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432. \u041d\u0430\u0439\u0442\u0438 \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u0435\u0448 (/).\n\n-----Input-----\n\u0421\u0442\u0440\u043e\u043a\u0430 \u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432.\n\n-----Output-----\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u0435\u0448 (/).\n\n-----Examples-----\nSample Input 1:\n   \nSample Output 1:\n1\n\nSample Input 2:\n/\nSample Output 2:\n1\n\nSample Input 3:\n/a\nSample Output 3:\n1\n\nSample Input 4:\n/a/b/c/d/e/f\nSample Output 4:\n1\n\nSample Input 5:\na/b/c/d/e/f/\nSample Output 5:\n2\n\n\"\"\"\n\n\"\"\"\n\u0421 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430. \u041d\u0430\u0439\u0442\u0438 \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c 1 \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0438 1 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0435 \u0431\u0443\u043a\u0432\u044b.\n\n-----Input-----\n\u0421\u0442\u0440\u043e\u043a\u0430.\n\n-----Output-----\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c 1 \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0438 1 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0435 \u0431\u0443\u043a\u0432\u044b.\n\n-----Examples-----\nSample Input 1:\nAAAAAABBBB\nSample Output 1:\n2\n\nSample Input 2:\naabb\nSample Output 2:\n0\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u0439\u0442\u0438 \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0432\u0441\u0435 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 1 \u0434\u043e 10.\n\n-----Input-----\n\u041d\u0435\u0442 \u0432\u0432\u043e\u0434\u0430.\n\n-----Output-----\n\u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 10.\n\n-----Examples-----\nSample Input 1:\nSample Output 1:\n[1, 3, 5, 7, 9]\n\nSample Input 2:\nSample Output 2:\n[]\n\n\"\"\"\n\n\"\"\"\n\u0421 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u0443\u043c\u043c\u0443 \u0446\u0438\u0444\u0440 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430.\n\n-----Input-----\n\u0426\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e.\n\n-----Output-----\n\u0421\u0443\u043c\u043c\u0430 \u0446\u0438\u0444\u0440 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430.\n\n-----Examples-----\nSample Input 1:\n5\nSample Output 1:\n15\n\nSample Input 2:\n0\nSample Output 2:\n0\n\"\"\"\n\n\"\"\"\n\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0447\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 100.\n\n-----Input-----\n\u041d\u0435\u0442 \u0432\u0432\u043e\u0434\u0430.\n\n-----Output-----\n\u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0447\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 100.\n\n-----Examples-----\nSample Input 1:\nSample Output 1:\n[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]\n\nSample Input 2:\nSample Output 2:\n[]\n\"\"\"\n\n\"\"\"\n\u0421 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0432 \u0441\u0442\u0440\u043e\u043a\u0443.\n\n-----Input-----\n\u0421\u0442\u0440\u043e\u043a\u0430."
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2\\n1\\n4\\n3\\n5') == '168'\n\"\"\"\n\nimport numpy as np\nimport sys\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1\\n1\\n') == '1'\nassert solution('5\\n2\\n1\\n4\\n3\\n5\\n') == '168'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2\\n1\\n4\\n3\\n5\\n') == '168'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2\\n1\\n4\\n3\\n5\\n') == '168'\n\"\"\"\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1\\n1') == '1'\nassert solution('5\\n2\\n1\\n4\\n3\\n5') == '168'\n\"\"\"\n\n\"\"\"\n[\n    [a_1, a_2,..., a_n]\n    [a_1, a_2,..., a_n]\n    ...\n    [a_1, a_2,..., a_n]\n]\n\"\"\""
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == \"168\"\nprint(solution(\"5\\n2\\n1\\n4\\n3\\n5\"))\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == '168'\nprint(solution(\"5\\n2\\n1\\n4\\n3\\n5\"))"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1\\n1\\n\") == \"1\"\nassert solution(\"5\\n2\\n1\\n4\\n3\\n5\\n\") == \"168\"\n\"\"\"\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(    \"5\\n2\\n1\\n4\\n3\\n5\") == \"168\"\nassert solution(    \"2\\n1\\n1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2') == 'CBD'\nassert solution('3 3\\nABC\\nDEF\\n0') == 'CBAD'\nassert solution('3 3\\nBAC\\nDEF\\n0') == 'CBA'\nassert solution('3 3\\nBCA\\nDEF\\n0') == 'CB'\nassert solution('3 3\\nABB\\nDEF\\n0') == 'CBA'\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2') == 'CBDEA'\nassert solution('4 3\\nCBA\\nDEF\\n2') == 'CBADE'\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDABEF\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2') == 'CDBEAF'\nassert solution('3 3\\nABC\\nDEF\\n4') == 'ABC\\nDEF\\nABBABB'\nassert solution('1 1\\nA\\n0') == 'A'\nassert solution('1 1\\nA\\n1') == 'A'\nassert solution('3 2\\nAB\\nCD\\n2') == 'AB\\nCDCD'\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\nADG\\nBCD\\n3') == 'CBDGAD'\n\"\"\""
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 ABC DEF 0\") == \"CBAEDF\"\nassert solution(\"2 3 ABC DEF 0\") == \"CAEDF\"\nassert solution(\"2 3 AB DEF 0\") == \"ABEDF\"\nassert solution(\"3 3 AB DEF 0\") == \"ABEDF\"\n\"\"\""
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 ABC DEF 0') == 'CBADEF'\n\"\"\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n0') == 'CDABEDF'\n\"\"\""
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\nassert solution(\"3 3\\nABC\\nDEF\\n0\") == \"CDAEBF\"\nassert solution(\"1 1\\nA\\n0\") == \"A\"\nassert solution(\"2 2\\nAB\\nAB\\n0\") == \"ABAB\"\n\n\"\"\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 ABC DEF 0\") == \"CDBEAF\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\nassert solution('3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '3'\n\"\"\"\n\nimport sys\nimport collections\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"5\"\nassert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\n\nassert solution('3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '3'\n\nassert solution('2\\n5\\n100 T\\n100 T\\n100 T\\n100 N') == '2'\n\nassert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\n\nassert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open(r'input.txt').read()) == '1'\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n10 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"5\"\nassert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"1\"\nassert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"4\"\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"1\"\nassert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"3\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\nassert solution('2\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '2'\nassert solution('3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '3'\nassert solution('4\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '4'\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"1\"\nassert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"3\"\n\"\"\"\nimport collections\nimport collections.abc\nimport dataclasses\nimport enum\nimport itertools\nimport functools\nimport heapq\nimport re\nfrom typing import (\n    DefaultDict,\n    Dict,\n    FrozenSet,\n    Iterable,\n    Iterator,\n    List,\n    Mapping,\n    Optional,\n    Pattern,\n    Sequence,\n    Set,\n    Tuple,\n    Type,\n    TypeVar,\n    Union,\n)\n\nT = TypeVar(\"T\")\nR = TypeVar(\"R\")\n\n\nclass File(\n    collections.abc.Iterable[str]\n):  # pylint: disable=too-many-ancestors\n    def __init__(self, path: str):\n        self.path = path\n        self.lines = self.read()\n\n    def read(self) -> List[str]:\n        with open(self.path) as f:\n            return [line.rstrip() for line in f]\n\n    def __iter__(self) -> Iterator[str]:\n        return iter(self.lines)\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"1\"\nassert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"4\""
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"4\"\nassert solution(\"5\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"5\"\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2 3 4 5\\n5 4 3 2 1') == '6'\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n6 8') == '22'\nassert solution('6 8\\n6 8') == '22'\n\"\"\""
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n') == '6'\nassert solution('6 8\\n') == '22'\nassert solution('6 8\\n') == '22'\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2 3 4 5 6') == '6'\nassert solution('6 8\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6') == '22'\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n6 8') == '22'\nassert solution('6 8\\n6 8') == '22'\n\"\"\""
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 3\\n1 3 2\") == \"6\"\nassert solution(\"6 8\\n1 2 3 4 5 6\\n1 3 2 5 6 4\\n2 3 4 5 6 1\\n3 4 5 6 1 2\\n4 5 6 1 2 3\\n5 6 1 2 3 4\") == \"22\"\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 3\n6 8''') == '22'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 2\\n3 4\\n5 6\\n') == '6'\nassert solution('6 8\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n11 12\\n') == '22'\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('123') == '6'\nassert solution('23') == '6'\nassert solution('4') == '6'\nassert solution('6') == '22'\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3') == 6\nassert solution('6 8') == 22"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 2\\n2 3\") == \"1\\n\"\n\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\nassert solution(\"1 4\\n4 3 2 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\n\nassert solution(\"1 4\\n4 3 2 1\") == \"0\"\nassert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\nassert solution(\"3 2\\n7 6 1\\n3 2\\n5 7\") == \"1\"\nassert solution(\"5 5\\n1 2 3 4 5\\n6 7 8 9 10\\n11 12 13 14 15\\n16 17 18 19 20\\n21 22 23 24 25\") == \"5\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\n\"\"\""
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\nassert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2 1\\n4 3 2 1\") == \"0\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == '1'\nassert solution(\"4 4\\n1 2 3 4\\n6 5 4 3\\n7 8 9 10\\n8 7 6 5\") == '0'\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == 1\nassert solution('1 4\\n4 3 2 1') == 0\nassert solution('1 1\\n2 1') == 1\nassert solution('1 1\\n1 1') == 0\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\nassert solution(\"1 4\\n4 3 2 1\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"\n\nprint(solution(\"10\\n3\\n10\\n2\\n12\"))\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('10\\n') == '0'\nassert solution('3\\n10\\n2\\n12\\n') == '28'\nprint('All tests are done!')\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"\n\"\"\"\n\n\nimport sys\n\nN = int(sys.stdin.readline())\nX = int(sys.stdin.readline())\ncosts = [int(sys.stdin.readline()) for _ in range(N)]\nlast_cost = X\n\nfor cost in costs:\n    last_cost -= cost\n    if last_cost < 0:\n        break\n\nprint(last_cost)\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n3\\n4\\n6\\n2\") == \"28\"\n\n\"\"\"\n\nX = int(input())\nN = int(input())"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3\\n10\\n2\\n12\") == \"16\"\nprint(solution(\"4\\n3\\n10\\n2\\n12\"))\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n3\\n4\\n6\\n2') == '28'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 3 4 6 2\") == \"28\"\nassert solution(\"10 3 4 6 2\") == \"28\""
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n3\\n4\\n6\\n2\") == \"28\"\n\"\"\""
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1\n3\n2''') == '3'\nassert solution('''10\n3\n10\n2\n12''') == '16'\n\"\"\"\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''10\n3\n4\n6\n2\n''') == '28'\nassert solution('''10\n3\n10\n2\n12\n''') == '16'"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('amiss') == 'hiss'\nassert solution('mississippi') == 'no hiss'\nassert solution('hiss') == 'hiss'\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\n\"\"\""
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"hiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\n\"\"\"\nimport re"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nprint(\"All tests passed.\")\n\n---"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\n\n\"\"\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\n\"\"\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"amiss\") == \"hiss\"\nassert solution(\"kiss\") == \"hiss\"\nassert solution(\"mississippi\") == \"hiss\"\nassert solution(\"hiss\") == \"hiss\"\n\"\"\""
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nprint('All tests passed.')\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"amiss\") == \"hiss\"\n\n'''\n\nfrom typing import List"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('hiss') == 'hiss'\nassert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('sissississ') == 'hiss'\n\n\"\"\""
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '0'\nassert solution('c++') == '1'\nassert solution('c++ c++ c++ c++ c++') == '3'\n'''\n\nimport re"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n4\nc++\nC++\nc\nc#\n''') == '3'\nassert solution('''\n5\ncryptography\nblockchain\nArtificial intelligence\nMachine-Learning\nLinux\n''') == '5'\n\n'''\n5\nc++\nC++\nc\nc#\nJava\n''' == 5\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 3\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 3\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 2\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 2\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 1\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 1\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\nc++\nC++\nc\nc#\n''' == 0\n\n'''\n\n4\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\nc\\nC++\\n') == '3'\nassert solution('3\\nc\\nC++\\n') == '3'\nassert solution('4\\nC++\\nC\\n') == '0'\nassert solution('3\\nC++\\nC\\n') == '0'\nassert solution('5\\nC++\\nC\\nLinux\\n') == '3'\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"c++\\nc++\\nc\\nc#\\n\") == 3\n\"\"\"\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nc++\\nC++\\nC\\nC#\\n') == 3\n\"\"\"\n\nimport re\nfrom itertools import combinations\nimport math\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nc++\\nC++\\nc\\nc#\\n') == 3\nprint(solution(input()))\n\nsolution('5\\nc++\\nC++\\nc\\nc#\\n')\n\n-----Problem Source-----\nhttps://leetcode.com/problems/maximum-number-of-occurrences-of-a-substring/\n\"\"\"\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('a') == 0\nassert solution('aa') == 0\nassert solution('a a') == 0\nassert solution('a aa') == 0\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\nc++\\nC++\\nC\\nC#') == '3', f'Expected {3}'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"4\\nc++\\nC++\\nc\\nc#\"\n) == \"3\"\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nc\\nc\\nC\\nC\") == 3\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"TCGTTC\") == \"21\"\nassert solution(\"CCC\") == \"9\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\nprint(\"It is time for the final tests!\")\nprint(solution(\"TCGTTC\"))\nprint(solution(\"CCC\"))\n\n-----Solution-----\n\nimport re"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\nassert solution(\"TGGC\") == 11\nassert solution(\"TTCTT\") == 22\nassert solution(\"CCCC\") == 16\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCCC\") == 9\n\"\"\"\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"TCGTTC\") == \"21\"\nassert solution(\"CCC\") == \"9\"\nprint(\"Tests passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('TCG') == '9'\nassert solution('TTTCCGCCT') == '55'\nassert solution('TCGCGGT') == '38'\n\"\"\"\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"TCC\") == 9\nassert solution(\"CCG\") == 9\n\"\"\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"TCG\") == \"9\"\nassert solution(\"TTC\") == \"9\"\nassert solution(\"TCCGTCGTTC\") == \"25\"\nassert solution(\"TCGTTCTCCTTCGGG\") == \"73\"\n\"\"\"\n\nfrom math import pow"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('TCGTTC') == 21\nassert solution('CCC') == 9\n\"\"\"\n\nclass Solution:\n    def __init__(self, stdin: str):\n        self.stdin = stdin\n\n    def solution(self):\n        # input: TCGTCG\n        # output: 27\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTCG\n        # TCGTC"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"315\\n45\") == \"90\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\nassert solution(\"0\\n360\") == \"0\"\nassert solution(\"0\\n-360\") == \"0\"\nassert solution(\"-180\\n-270\") == \"0\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"315\\n45\") == \"90\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('315 45') == '90'\nassert solution('180 270') == '90'\n\"\"\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('315 45') == '90'\nassert solution('180 270') == '90'\nassert solution('315 -45') == '-180'\nassert solution('-90 -45') == '-90'\nassert solution('315 -45 -180 0 0') == '-90'\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"315 45\") == \"90\"\nassert solution(\"180 270\") == \"90\"\nassert solution(\"270 180\") == \"90\"\nassert solution(\"45 315\") == \"90\"\n\"\"\"\n\nn1, n2 = input().split()\nn1, n2 = int(n1), int(n2)"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(315, 45) == 90\nassert solution(180, 270) == 90\nassert solution(0, 360) == 0\nassert solution(360, 0) == 180\nassert solution(30, 0) == 90\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('315', '45') == '90'\nassert solution('180', '270') == '90'\nassert solution('180', '180') == '0'\nassert solution('180', '0') == '0'\nassert solution('180', '360') == '0'\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\n\nSample Input 3:\n90\n45\nSample Output 3:\n-45\nassert solution(\"90\\n45\") == \"-45\"\nassert solution(\"90\\n270\") == \"-45\"\n\nassert solution(\"315\\n45\") == \"90\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\nprint(\"Test passed\\n\")\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n3') == '3'\nassert solution('2\\n2\\n1') == '2'\nassert solution('2\\n2\\n3\\n2\\n1') == '3'\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\nassert solution('5\\n11\\n20\\n33\\n40\\n55') == '1'\n\n\"\"\""
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\nassert solution(\"5\\n11\\n20\\n33\\n40\\n55\") == \"1\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\nassert solution(\"5\\n11\\n20\\n33\\n40\\n55\") == \"1\"\n\"\"\""
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n1\n23\n18\n13\n99''') == '3'\nassert solution('''5\n11\n20\n33\n40\n55''') == '1'\n\nassert solution('''5\n1\n23\n18\n13\n99''') == '3'\nassert solution('''5\n11\n20\n33\n40\n55''') == '1'\n\nassert solution('''5\n1\n2\n3\n4\n5''') == '1'\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\nassert solution('5\\n11\\n20\\n33\\n40\\n55') == '1'\nassert solution('5\\n1\\n23\\n18\\n13\\n99\\n11\\n20\\n33\\n40\\n55') == '2'\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99\\n') == '3'\n\n-----Notes-----\n\n\"\"\"\n\nimport collections\nimport sys"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"WWWWBBW\") == \"1\"\nassert solution(\"WWBBWW\") == \"1\"\nassert solution(\"BBWWW\") == \"0\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWBWBB') == '1'\nassert solution('WBBWWW') == '0'\nassert solution('BBWWWW') == '0'\nassert solution('WWWWWB') == '1'\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WWWBBBW\") == \"1\"\nassert solution(\"WWWWBBW\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('WWBWBB') == '1'\nassert solution('WWWWBBW') == '0'\n\"\"\""
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('WWWBBBWW') == '1'\nassert solution('WWWBBBBW') == '0'\nassert solution('WWWBBBWBW') == '1'\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"WWWWBBW\") == 0\nassert solution(\"WWBBWWW\") == 0\nassert solution(\"WWBBBBW\") == 1\n\nassert solution(\"WWBBWWW\") == 0\nassert solution(\"WWBBBBW\") == 1\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBBWWWWW\") == \"0\"\nassert solution(\"WWWWBBBWW\") == \"1\"\nassert solution(\"WWWWBWBWW\") == \"1\"\nassert solution(\"WWWWBWBWWWWBBWWWW\") == \"0\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBBWWW\") == \"1\"\nassert solution(\"WWWWBBWBWW\") == \"0\"\n\"\"\""
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\n\"\"\"\n\nimport re\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        if len(re.findall('B', stdin))!= len(re.findall('W', stdin)):\n            return \"1\"\n        return \"0\"\n\ns = Solution()\nassert s.solution(\"WWWWBBW\") == \"0\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WWWWBBW\") == '0'\nassert solution(\"WWBWBB\") == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 3 3\") == 9\n\"\"\"\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 3 3 3''') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n'''\n\nnums = [int(i) for i in stdin.split()]\nprint(nums)\n\nl = [nums[0], nums[1], nums[2], nums[3]]\nl.sort()\nl = l[::-1]\n\nprint(l[0]*l[1])\n\n'''"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 3 3\") == 9\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 3 3\") == 9\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 3 3 3''') == '9'\nassert solution('''1 2 1 1''') == '1.299038105676658'\n\"\"\"\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 3 3') == 9\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n\"\"\"\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 3 3') == '9'\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('rrrooobbert') == 'robert'\nassert solution('rrooooobert') == 'robert'\nassert solution('rroobbertt') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"roooobert\") == \"robert\"\nassert solution(\"rrrooobbbert\") == \"robert\"\nassert solution(\"rrrrobbbbaaaar\") == \"robert\"\n\nprint(solution(\"robert\"))\nprint(solution(\"rooobert\"))\nprint(solution(\"rrrooobbbert\"))\nprint(solution(\"rrrrobbbbaaaar\"))\n\"\"\""
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"rooooobert\") == \"robert\"\nassert solution(\"rrrooobbbert\") == \"robert\"\n\nassert solution(\"abc\") == \"abc\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'\nassert solution('rrrooobbbertyy') == 'robert'\nassert solution('roobert') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('rroobert') == 'robert'\nassert solution('roobert') == 'robert'\nassert solution('rrrroobert') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"robert\"\n) == \"robert\"\nassert solution(\n    \"roobert\"\n) == \"robert\"\nassert solution(\n    \"roooobert\"\n) == \"robert\"\nassert solution(\n    \"roboobert\"\n) == \"robert\"\nassert solution(\n    \"roboobroobert\"\n) == \"robert\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('robert') == 'robert'\nassert solution('roobert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'\nassert solution('rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"rrrooobbbert\") == \"robert\"\nassert solution(\"rrrrrrrrrobert\") == \"robert\"\n\"\"\""
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"rroobert\") == \"robert\"\nassert solution(\"rrroobert\") == \"robert\"\nassert solution(\"rroroobert\") == \"robert\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 9 7\\n') == '108 4'\n\"\"\"\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(TEST_1) == \"Impossible\"\nassert solution(TEST_2) == \"9 7\""
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000 9 7') == '108 4'\nassert solution('1000 900 7') == 'Impossible'\n\"\"\""
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000 9 7') == '108 4'\nassert solution('1000 900 7') == 'Impossible'\n\"\"\"\n\na, b, c = [int(i) for i in input().split()]\n\nx = (a * c - b * c) / (b - c)\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000 9 7\\n') == '108 4'\nassert solution('1000 900 7\\n') == 'Impossible'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\n'''\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000 9 7\\n') == '108 4'\nassert solution('1000 900 7\\n') == 'Impossible'\nassert solution('1000 1000 7\\n') == 'Impossible'\nassert solution('1000 9 1000\\n') == 'Impossible'\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000 9 7') == '108 4'\nassert solution('1000 900 7') == 'Impossible'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nstdout = sys.stdout\n\ntestcases = []"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n#..#\\n..X.') == '1\\n1\\n2\\n1\\n0'\nassert solution('4 4\\n...\\n...\\n...\\n...') == '9\\n0\\n0\\n0\\n0'\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\nprint(\"Tests passed.\")\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\n\n\"\"\""
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\n\"\"\"\n\nR, C = map(int, input().split())\n\nrooms = [input() for _ in range(R)]"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n4 4\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 4\n.#.\n.X.\n.X.\n.#.\n''') == '1\\n1\\n2\\n1\\n0\\n'\nassert solution('''4 4\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n#..\\n..X\\n..X\\n#XX\") == \"1\\n1\\n2\\n1\\n0\"\n\"\"\""
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n....\\n....\\n....\\n....\") == '9\\n0\\n0\\n0\\n0'\nassert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == '1\\n1\\n2\\n1\\n0'\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 4\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('212\\n1253') == '1953566'\nprint('Test pass.')\n\nSample Output 2\n\nSample Input 3\n3\n21\n125\n123\nSample Output 3\n\nSample Input 4\n4\n2222\n22\n22\n22\nSample Output 4\n\n'''"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2\n212\n1253''') == '1953566'\nassert solution('''5\n23\n17\n43\n52\n22''') == '102'\n'''\n'''\n\nfrom util.text_processing_utils import read_file, write_file\nimport os\nimport time"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"212\\n1253\") == \"1953566\"\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12\\n1253') == '212'\n\"\"\""
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n212\\n1253') == '1953566'\nprint(solution(input()))\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n212\\n1253') == '1953566'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n212\\n1253\") == \"1953566\"\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('\\n'.join(['2', '1253'])) == '1253'\nassert solution('\\n'.join(['2', '1253', '3', '23'])) == '123'\nassert solution('\\n'.join(['5', '23', '17', '43', '52', '22'])) == '102'\nassert solution('\\n'.join(['7', '23', '17', '43', '52', '22', '27'])) == '523'\nassert solution('\\n'.join(['7', '23', '17', '43', '52', '22', '27', '33'])) == '1325'\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('21^2 + 125^3') == '212'\nassert solution('23^5 + 17^3 + 43^2 + 52^4') == '102'\nassert solution('5^0 + 21^2 + 4^3 + 2^4 + 32^5') == '1253'\n'''\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('213') == '214'\nprint(solution(stdin))\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 10 10\\n3 3 3') == '0.000000 0.000000 0.000000'\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 10 10\\n3 2 1') == '0.0 0.0 0.0'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.0 0.0 0.0\"\n\"\"\"\n\nfrom typing import List, Tuple, Set, Dict\nfrom decimal import Decimal\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.0 3.0 6.0\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == '0.0 0.0 0.0'\nassert solution(\"9 9 9\\n3 2 1\") == '0.0 3.0 6.0'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10 10\\n3 2 1\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.0 3.0 6.0\"\n\"\"\""
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == '0.0 0.0 0.0'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 10 10\\\\n3 3 3') == '0.0 0.0 0.0'\n\"\"\"\n\nimport sys\n\na, b, c = [int(s) for s in sys.stdin.readline().strip().split()]\ni, j, k = [int(s) for s in sys.stdin.readline().strip().split()]\n\nprint('{0:.6f} {1:.6f} {2:.6f}'.format(a * i / (i + j + k) - a, b * i / (i + j + k) - b, c * i / (i + j + k) - c))\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.0 3.0 6.0\"\nassert solution(\"9 9 9\\n1 1 1\") == \"0.9 0.9 9.0\"\nassert solution(\"9 9 9\\n2 1 1\") == \"0.9 0.9 0.9\"\nassert solution(\"9 9 9\\n1 2 1\") == \"0.9 0.9 0.9\"\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 10 10\") == \"0.000000 0.000000 0.000000\"\nassert solution(\"9 9 9\") == \"0.000000 3.000000 6.000000\"\n\"\"\""
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a<bc<\") == \"bc\"\nassert solution(\"foss<<rritun\") == \"forritun\"\nassert solution(\"<a<bc<\") == \"bc\"\nassert solution(\"a<<bc<\") == \"bc\"\nassert solution(\"a<bc<a\") == \"bc\"\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n\"\"\"\n\nimport string\nimport unittest\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\nprint(\"Success\")\n\n-----Notes-----\nIt is guaranteed that the string will always contain at least one character.\n\n'''"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\nassert solution(\"fo<u<s<t<a<r<i<n\") == \"forritun\"\nassert solution(\"<\") == \"\"\nassert solution(\"foss<<rritun<\") == \"foss<<rritun\"\n\"\"\""
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\nassert solution(\"a<<b<<<c\") == \"c\"\nassert solution(\"<<a>>b<<\") == \"a\"\nassert solution(\"<<\") == \"\"\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('a<bc<') == 'bc'\nassert solution('foss<<rritun') == 'forritun'\nassert solution('foss<<ritun') == 'foss'\nassert solution('a<<bc<<') == 'bc'\nassert solution('foss<<ritun<<r') == 'forritun'\n\"\"\"\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\nprint(solution(\"a<bc<\"))\nprint(solution(\"foss<<rritun\"))\n\nimport io, os, sys, time, contextlib\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\nassert solution('a<<bc<<') == 'bc'\nassert solution('<<') == ''\nassert solution('foss<<rritun') == 'forritun'\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('KMP') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\n\nprint('Hooray!')\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\n\"\"\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\nassert solution('Miro-Slavko') == 'MS'\nassert solution('Mira-Slavko') == 'MS'\n\n'''\nfrom re import finditer\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"Knuth-Morris-Pratt\"\n) == \"KMP\"\nassert solution(\n    \"Mirko-Slavko\"\n) == \"MS\"\n\nSample Input 1:\nRivest-Shamir-Adleman\nSample Output 1:\nRS\n\nSample Input 2:\nRivest-Shamir-Adleman-Carmichaels\nSample Output 2:\nR-S-A-C\n\"\"\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\"\"\""
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"KMP\") == \"KMP\"\nassert solution(\"MS\") == \"MS\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\nassert solution(\"D-4-2-1-A\") == \"D42A\"\n\nprint(solution(\"KMP\"))\nprint(solution(\"MS\"))\nprint(solution(\"Mirko-Slavko\"))\nprint(solution(\"D-4-2-1-A\"))\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('KMP') == 'KMP'\nassert solution('MS') == 'MS'\nassert solution('S-M-S') == 'SM'\nassert solution('S-MS-S') == 'SMSS'\nassert solution('-MS-S') == 'MSSS'\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"2 0 1\") == \"Province or Copper\"\nassert solution(\"2 2 1\") == \"Duchy or Gold\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\n\nSample Input 3:\n0 1 1\nSample Output 3:\nCopper\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"2 2 0\") == \"Province or Gold\"\nassert solution(\"0 2 0\") == \"Copper\"\nassert solution(\"2 1 1\") == \"Province or Gold\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\") == \"Gold or Copper\"\nassert solution(\"0 2 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"2 2 0\") == \"Province or Gold\"\nassert solution(\"2 2 1\") == \"Province or Gold\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"1 1 2\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"2 1 1\") == \"Duchy or Gold\"\n\n\"\"\""
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"3 0 1\") == \"Duchy or Gold\"\nassert solution(\"4 1 0\") == \"Duchy or Silver\"\nassert solution(\"4 2 0\") == \"Province or Silver\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"1 0 1\") == \"Province or Gold\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('0 1 0') == 'Estate or Copper'\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''0 1 0''') == 'Estate or Copper'\nassert solution('''2 1 0''') == 'Province or Gold'\nassert solution('''0 2 0''') == 'Estate or Copper'\nassert solution('''2 2 0''') == 'Province or Gold'\n\n-----Solution-----\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.00\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\n\"\"\"\n\nn, k = map(int, input().split())\nd, s = map(int, input().split())"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n70 50') == '90.00'\nassert solution('10 3\\n80 90') == '75.7142857'\n\"\"\"\n\nn, k = [int(x) for x in stdin.readline().split()]\nd, s = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1\\n70 50') == '90.0'\nassert solution('10 3\\n80 90') == '75.7142857'"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n70 50') == '90.0'\nassert solution('10 3\\n80 90') == '75.7142857'\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.0\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\n\"\"\""
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 3\\n80 90') == '75.7142857'\nprint(solution(stdin))\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.0\"\n\nprint(solution(\"10 3\\n80 90\"))\n\"\"\"\n\nimport math"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.00\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\n\nprint(\"Success\")\n'''"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.0\"\n\"\"\"\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n70 50') == '90.0'\nassert solution('10 3\\n80 90') == '75.7142857'\nassert solution('1 1\\n1 1') == 'impossible'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\nassert solution(\"7\\n1 2 3 4 5 6\") == \"5\\n1 2 3 4 5\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\n\"\"\""
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0 0 0 0 0 0') == ''\nassert solution('3 1 2 2 1') == '3 1 2 1'\nassert solution('1 2 3 3 1') == '1 2 3 1'\nassert solution('1 2 3 3 3 1') == '1 2 3 1'\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 1 5 4 7 6') == '4'\nassert solution('1 2 3 4 5') == '5'\n\nstdin = '2 3 1 5 4 7 6'\nassert solution(stdin) == '4'\nstdin = '1 2 3 4 5'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n7\n2 3 1 5 4 7 6\n\"\"\") == \"\"\"\n4\n2 3 5 7\n\"\"\"\n\nassert solution(\"\"\"\n7\n1 2 3 4 5 6 7\n\"\"\") == \"\"\"\n5\n1 2 3 4 5 7\n\"\"\"\n\nassert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\n5\n1 2 3 4 5\n\"\"\"\n\nassert solution(\"\"\"\n8\n4 6 1 5 2 3 7 8\n\"\"\") == \"\"\"\n5\n4 6 1 5 2 3 7 8\n\"\"\"\n\nassert solution(\"\"\"\n10\n8 9 4 6 7 5 10 3 2 1\n\"\"\") == \"\"\"\n6\n8 9 4 6 7 5 10 3 2 1\n\"\"\""
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'\nassert solution('5\\n1 2 3 4 5') == '5\\n1 2 3 4 5'\n\nfrom collections import deque\nclass Solution:\n    def __init__(self, N, A):\n        self.N = N\n        self.A = A\n        self.GIS_length = 1\n        self.GIS = deque([])\n        self.GIS.append(self.A[0])\n        for i in range(1, self.N):\n            if self.A[i] > self.GIS[0]:\n                self.GIS.append(self.A[i])\n                self.GIS_length += 1\n            else:\n                self.GIS.popleft()\n                self.GIS.append(self.A[i])\n        return\n\n    def result(self):\n        print(self.GIS_length)\n        print(' '.join([str(x) for x in self.GIS]))\n        return\n\nSolution(7, [2, 3, 1, 5, 4, 7, 6])"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\nassert solution(\"7\\n3 2 1 5 4 7 6\") == \"5\\n1 2 3 4 7\"\nassert solution(\"7\\n4 5 6 7 3 2 1\") == \"5\\n1 2 3 4 5\"\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2 1 5 4 7 6\") == \"4 2 3 5 7\"\n\n\"\"\"\n\nn = int(stdin.readline())\ns = list(map(int, stdin.readline().split()))\n\ngis = [s[0]]\nfor i in range(1, n):\n    if s[i] > gis[-1]:\n        gis.append(s[i])\n    else:\n        l, r = 0, len(gis) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if gis[mid] < s[i]:\n                l = mid + 1\n            else:\n                r = mid - 1\n        gis[l] = s[i]\n\nprint(len(gis))\nprint(' '.join(map(str, gis)))\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\n\nimport sys\nassert sys.stdin.read() == '7\\n2 3 1 5 4 7 6'\nassert sys.stdout.read() == '4\\n2 3 5 7'\n\n----\nclass Solution:\n    def solve(self, a):\n        # write your code in Python 3.6\n        n = len(a)\n        g = [None] * n\n        g[0] = a[0]\n        for i in range(1, n):\n            g[i] = a[i]\n            for j in range(i):\n                if g[j] < a[i] and g[j] > g[i - 1]:\n                    g[i] = g[j]\n        return len(set(g))\n        pass\n\n\na = [1, 2, 3, 4, 5]\na = list(set(a))\nprint(a)"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"7\n2 3 1 5 4 7 6\"\"\") == \"\"\"4\n2 3 5 7\"\"\"\nassert solution(\"\"\"10\n2 3 1 5 4 7 6 9 8 10\"\"\") == \"\"\"5\n2 3 5 7 10\"\"\"\nassert solution(\"\"\"6\n1 2 3 4 5 6\"\"\") == \"\"\"3\n1 2 3 4 5\"\"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nprint(solution(\"10 10\"))\nassert solution(\"0 30\") == \"23 45\"\nprint(solution(\"0 30\"))"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 10\") == \"9 25\"\nassert solution(\"11 30\") == \"22 45\"\nassert solution(\"2 21\") == \"1 44\"\nassert solution(\"18 15\") == \"17 30\"\nassert solution(\"0 0\") == \"0 0\"\n\"\"\""
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\nprint(\"HERE\")\n\n\"\"\"\nimport os\nimport sys"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\nassert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\nassert solution('20 20') == '19 55'\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\"\"\"\n\nhour, minute = input().split()\n\nhour = int(hour)\nminute = int(minute)\n\nminute_after = (hour * 60 + minute) - 45\n\nhour_after = minute_after // 60\nminute_after = minute_after % 60\n\nhour_after = (hour_after + 24) % 24\n\nhour_after = str(hour_after)\nminute_after = str(minute_after)"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 10') == '9 25'\nassert solution('10 10') == '9 25'\nassert solution('0 0') == '23 45'\nassert solution('1 1') == '22 45'\nassert solution('2 2') == '23 45'\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\"\"\"\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\nprint(\"Tests passed\")\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2.000000') == '1.414214'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2.1\") == \"2.0\"\nassert solution(\"2.71828\") == \"2.7\"\nassert solution(\"0.36788\") == \"3.637\"\nassert solution(\"2.0\") == \"2.0\"\nassert solution(\"1.0\") == \"1.0\"\n\n-----Constraints-----\n- N is positive.\n- 1.3678\\leq N\\leq 2.71828\n\n\"\"\"\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.000000\") == \"1.000000\"\nassert solution(\"2.718281\") == \"1.414214\"\nassert solution(\"0.36788\") == \"1.414214\"\n\nimport numpy as np\nimport unittest\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertAlmostEqual(solution(\"0.36788\"), np.log(1 + 1/np.e))\n        self.assertAlmostEqual(solution(\"2.718281\"), np.log(1 + 1/np.e))\n        self."
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2.000000\") == \"1.414214\"\nassert solution(\"1.000000\") == \"1.000000\""
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2.000000\") == \"1.414214\"\nassert solution(\"1.000000\") == \"1.000000\"\nassert solution(\"1.36788\") == \"1.36788\"\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2.1\") == \"1.4084\"\nassert solution(\"1.2\") == \"1.2\"\nassert solution(\"1\") == \"1.0\"\nassert solution(\"0.1\") == \"0.1\"\nassert solution(\"0.01\") == \"0.01\"\n\"\"\""
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"2.000000\"\n) == \"1.414214\"\n\"\"\"\n\n\"\"\"\nSample Output 2\na = 3\n\nprint(a)"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\n\nprint(solution(stdin=input()))\n\"\"\"\nimport math\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2.000000\") == \"1.414214\"\nassert solution(\"1.000000\") == \"1.000000\""
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0.36788') == '1.414214'\nassert solution('2.718281') == '1.414213'\n\n-----Notes-----\nAssume that $N$ is a positive real number.\n\nWrite down a solution without using the double variable i.\n\nHint: The mathematical function $\\frac{1}{e}$ has a hard time being solved algebraically.\n\"\"\""
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"3: 2,1\"\n\n\"\"\""
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '3:'\nassert solution('2,1') == '2,1:'\nassert solution('2,2') == '2,2:'\nassert solution('3,2') == '3,2:'\nassert solution('5,4') == '5,4:'\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '3:\\\\n2,1\\\\n'\nassert solution('50') == '50:\\\\n2,1\\\\n2,2\\\\n3,2\\\\n5,4\\\\n5,5\\\\n6,5\\\\n10,10\\\\n13,12\\\\n17,16\\\\n25,25\\\\n'\n\"\"\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"3:2,1\"\nassert solution(\"50\") == \"50:2,1\"\nassert solution(\"1\") == \"1:1\"\n\"\"\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '3: '\nassert solution('50') == '50: '\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3:2,1\"\nassert solution(\"50\") == \"50:2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\"\n\"\"\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '3:'\nassert solution('50') == '50:'\nassert solution('1') == ''\nassert solution('100') == '100:'\nassert solution('10000') == '10000:'\n\nSample Input 1:\n3\nSample Output 1:\n3:\n2,1\n\nSample Input 2:\n50\nSample Output 2:\n50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\nSample Input 1:\n3\nSample Output 1:\n3:\n2,1\n\nSample Input 2:\n50\nSample Output 2:\n50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\nSample Input 1:\n3\nSample Output 1:\n3:\n2,1\n\nSample Input 2:\n50\nSample Output 2:\n50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\nSample Input 1:\n3\nSample Output 1:\n3:\n2,1\n\nSample Input 2:\n50\nSample Output 2:\n50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\nSample Input 1:\n3\nSample Output 1:\n3:\n2,1\n\nSample Input 2:\n50\nSample Output 2:\n50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\nSample Input 1:\n3\nSample Output 1:\n3:\n2,1\n\nSample Input 2:\n50\nSample Output 2:\n50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\nSample Input 1:\n3\nSample Output 1:\n3:\n2,1\n\nSample Input 2:\n50\nSample Output 2:\n50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\nSample Input 1:\n3\nSample Output 1:\n3:\n2,1\n\nSample Input 2:\n50\nSample Output 2:\n50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\nSample Input 1:\n3\nSample Output 1:\n3:\n2,1\n\nSample Input 2:\n50\nSample Output 2:\n50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\nSample Input 1:\n3\nSample Output 1:\n3:\n2,1\n\nSample Input 2:\n50\nSample Output 2:\n50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\nSample Input 1:\n3\nSample Output 1:\n3:\n2,1\n\nSample Input 2:\n50\nSample Output 2:\n50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\nSample Input 1:\n3\nSample Output 1:\n3:\n2,1\n\nSample Input 2:\n50\nSample Output 2:\n50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\nSample Input 1:\n3\nSample Output 1:\n3:\n2,1\n\nSample Input 2:\n50\nSample Output 2:\n50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\nSample Input 1:\n3\nSample Output 1:\n3:\n2,1\n\nSample Input 2:\n50\nSample Output 2:\n50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\nSample Input 1:\n3\nSample Output 1:\n3:\n2,1\n\nSample Input 2:\n50\nSample Output 2:\n50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\nSample Input 1:\n3\nSample Output 1:\n3:\n2,1\n\nSample Input 2:\n50\nSample Output 2:\n50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\nSample Input 1:\n3\nSample Output 1:\n3:\n2,1\n\nSample Input 2:\n50\nSample Output 2:\n50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n\nSample Input 1:\n3\nSample Output 1:\n3:\n2,1\n\nSample Input 2:\n50\nSample Output 2:\n50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3:\\\\n2,1\\\\n\"\nassert solution(\"50\") == \"50:\\\\n2,1\\\\n2,2\\\\n3,2\\\\n5,4\\\\n5,5\\\\n6,5\\\\n10,10\\\\n13,12\\\\n17,16\\\\n25,25\\\\n\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '3:', \"Check your solution on sample input 3\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom math import ceil, log\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == ''"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"THE RAIN IN SPAN\") == \"yes\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"no\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\nassert solution(\"AB CD EF GH IJ KL\") == \"yes\"\nassert solution(\"AB CD EF GH IJ KL AB CD EF GH IJ KL\") == \"no\"\n\nassert solution(\"AB CD EF G\") == \"yes\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"IN THE RAIN AND THE SNOW\") == 'no'\nassert solution(\"THE RAIN IN SPAIN\") == 'yes'\nassert solution(\"IN THE RAIN AND THE SNOW\") == 'no'\nassert solution(\"THEN SHIN OH LAH SOH\") == 'yes'\nassert solution(\"IN THE RAIN IN THE PLAIN\") == 'yes'\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('THE RAIN IN SPAIN') == 'yes'\nassert solution('IN THE RAIN AND THE SNOW') == 'no'\n\nprint(solution('THE RAIN IN SPAIN'))\nprint(solution('IN THE RAIN AND THE SNOW'))\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\nassert solution(\"THE PLAIN IN SPAIN\") == \"no\"\nassert solution(\"MEMORY IN MIND\") == \"yes\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\n\nprint(\"all tests passed.\")\n\n\"\"\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('THE RAIN IN SPAIN') == 'yes'\nassert solution('IN THE RAIN AND THE SNOW') == 'no'\n\nprint(solution('THE RAIN IN SPAIN'))\nprint(solution('IN THE RAIN AND THE SNOW'))\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\n\n\"\"\"\n\nfrom typing import Iterator\nfrom string import ascii_uppercase"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\"\n\n\"\"\"\nAt any time, the monster\u2019s attack pattern can be broken up into two or three consecutive moves of the monster. You are to write a program that, given a string representing the monster\u2019s attack pattern, outputs the series of moves that the mech must perform in order to defeat the monster.\n\n-----Input-----\nA single line containing a string of at least $1$ and at most $1000000$ characters, consisting of the letters \u2018R\u2019, \u2018B\u2019 and \u2018L\u2019.\n\n-----Output-----\nOutput a single string consisting of the letters denoting the moves that are to be made in succession by the mech in order to defeat the monster.\n\n-----Examples-----\nSample Input 1:\nRRBBBLLR\nSample Output 1:\nSSKKKHHS\n\nSample Input 2:\nRBLLLBRR\nSample Output 2:\nCHCS\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\nprint(\"All tests passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\n\"\"\""
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('RBR') == 'R'\nassert solution('BLLLRRR') == 'L'\nassert solution('RRBB') == 'RR'\nassert solution('RRRR') == 'RR'\n\"\"\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\""
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\"\nimport typing"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\"\n\n\"\"\"\nThe edit distance between two strings refers to the minimum number of character insertions, deletions, and substitutions required to change one string to the other. For example, the edit distance between \u201ckitten\u201d and \u201csitting\u201d is three: substitute the \u201ck\u201d for \u201cs\u201d, substitute the \u201ce\u201d for \u201ci\u201d, and append a \u201cg\u201d.\n\nGiven two strings, compute the edit distance between them.\n\n-----Input-----\nA single line of input containing the two input strings, each of length $1 \\leq 1000$.\n\n-----Output-----\nA single line of output containing the edit distance between the two strings.\n\n-----Examples-----\nSample Input 1:\ncat\ncut\nSample Output 1:\n2\nSample Input 2:\nsitting\nkitten\nSample Output 2:\n3\n\"\"\"\n\n\"\"\"\nGiven a string and a set of characters, return the shortest substring containing all the characters in the set.\n\nFor example, given the string \"figehaeci\" and the set of characters {a, e, i}, you should return \"aeci\".\n\nIf there is no substring containing all the characters in the set, return null.\n\n-----Input-----\nA single line of input containing the string, and a single line of input containing the set of characters, each of length $1 \\leq 65$.\n\n-----Output-----\nA single line of output containing the shortest substring.\n\n-----Examples-----\nSample Input 1:\nfigehaeci\na,e,i\nSample Output 1:\naeci\nSample Input 2:\naa\nab\nSample Output 2:\n\n\"\"\"\n\n\"\"\"\nGiven a set of numbers, return the additive inverse of each. Each positive becomes negatives, and the negatives become positives.\n\nIn other words, turn each number into its negative, then turn every negative into a positive, then add them together.\n\nFor example, given the set {1, 2, 3, 4, 5}, return {-1, -2, -3, -4, -5}.\n\n-----Input-----\nA single line of input containing a set of numbers, each of length $1 \\leq 1000$.\n\n-----Output-----\nA single line of output containing a set of numbers, each of length $1 \\leq 1000$.\n\n-----Examples-----\nSample Input 1:\n1 2 3 4 5\nSample Output 1:\n-1 -2 -3 -4 -5\nSample Input 2:\n94563\nSample Output 2:\n98765\n\"\"\"\n\n\"\"\"\nThe triplets are generated in the following way:\n\nFor each number $i$, let's say that the number is good, if it satisfies the condition: $i \\geq \\lceil \\frac{j}{k} \\rceil$, where $j, k$ are the number of good numbers that precede $i$ in the array.\n\nWe consider three numbers: $a$, $b$, and $c$ where $a < b < c$. We check whether the numbers are good or not, then put them into the resulting array.\n\nIt can be proven that there are at most $(n^2-n)/2$ good numbers in total, where $n$ is the length of the input array.\n\n-----Input-----\nA single line of input containing the array of numbers, each of length $1 \\leq 1000$.\n\n-----Output-----\nA single line of output containing the resulting array of numbers.\n\n-----Examples-----\nSample Input 1:\n2 4 1 3\nSample Output 1:\n2 1 3 4\nSample Input 2:\n94563\nSample Output 2:\n98765\n\"\"\"\n\n\"\"\"\nWe are given a list of strings. We'd like to find the most frequent substring.\n\nA substring is a contiguous sequence of characters within a string. For example, the substrings of \"abcbaba\" are \"a\", \"b\", \"c\", \"ab\", \"ba\", and \"a\". The most frequent substring is the substring that occurs most frequently.\n\nThere can be ties. For example, if we have the list ['a', 'b', 'b', 'b', 'c', 'a', 'b', 'a', 'b', 'a'], the most frequent substring is \"b\".\n\nThe input is always valid.\n\nWrite a function that returns the most frequent substring.\n\n-----Input-----\nA single line of input containing the space-separated list of strings, each of length $1 \\leq 100$.\n\n-----Output-----\nA single line of output containing the most frequent substring.\n\n-----Examples-----\nSample Input 1:\na a b b b c a a b b a a\nSample Output 1:\na\nSample Input 2:\nabcd\nSample Output 2:\ncd\n\"\"\"\n\n\"\"\"\nYour friend is typing his name into a keyboard.  Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.\n\nYou examine the typed characters of the keyboard.  Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed.\n\n\n-----Input-----\nA single line of input containing c, the typed character.\n\n-----Output-----\nA single line of output denoting if it is possible that it was your friends name.\n\n-----Examples-----\nSample Input 1:\na\nSample Output 1:\nFalse\nSample Input 2:\naab\nSample Output 2:\nTrue\n\"\"\"\n\n\"\"\"\nWe are given a string word. We want to remove characters from the beginning of word until we get a string that starts with a vowel.\n\nReturn the final string after the removal of the characters. It can be proved that the answer is unique.\n\n-----Input-----\nA single line of input containing the string word. The string word contains only lowercase English letters.\n\n-----Output-----\nA single line of output containing the final string.\n\n-----Examples-----\nSample Input 1:\nabcxyz\nSample Output 1:\nxyz\nSample Input 2:\na\nSample Output 2:\na\n\"\"\"\n\n\"\"\"\nThere are $n$ people lined up, and each have a height represented as an integer. A murder has"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RRRRRRRRRRRR') == 'HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH'\nassert solution('RBRRRBBLLR') == 'SSKCHCS'\n\nprint(solution('RRRRRRRRRRRR'))\nprint(solution('RBRRRBBLLR'))\n\"\"\""
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'''2 3 7\n''') == '''1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7\n'''\nassert solution(\n'''2 4 7\n''') == '''1\nFizz\n3\nFizzBuzz\n5\nFizz\n7\n'''\n\nassert solution(\n'''2 3 4\n''') == '''1\n2\nFizz\n4\nFizzBuzz\n'''\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 7\\n\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n\"\nassert solution(\"2 4 7\\n\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n\"\n\"\"\""
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 7\") == \"\"\"1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7\"\"\"\n\"\"\""
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 7\") == \"\"\"\\\n1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7\\\n\"\"\"\n\nassert solution(\"2 4 7\") == \"\"\"\\\n1\nFizz\n3\nFizzBuzz\n5\nFizz\n7\\\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 7\") == \"\"\"\n1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7\n\"\"\"\n\nassert solution(\"2 4 7\") == \"\"\"\n1\nFizz\n3\nFizzBuzz\n5\nFizz\n7\n\"\"\"\n\"\"\"\nassert solution(\"1 2 100\") == \"\"\"\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\nFizz\n22\n23\nFizz\nBuzz\n26\nFizz\n28\n29\nFizzBuzz\n31\n32\nFizz\n34\nBuzz\nFizz\n37\n38\nFizz\nBuzz\n41\nFizz\n43\n44\nFizzBuzz\n46\n47\nFizz\n49\nBuzz\nFizz\n52\n53\nFizz\nBuzz\n56\nFizz\n58\n59\nFizzBuzz\n61\n62\nFizz\n64\nBuzz\nFizz\n67\n68\nFizz\nBuzz\n71\nFizz\n73\n74\nFizzBuzz\n76\n77\nFizz\n79\nBuzz\nFizz\n82\n83\nFizz\nBuzz\n86\nFizz\n88\n89\nFizzBuzz\n91\n92\nFizz\n94\nBuzz\nFizz\n97\n98\nFizz\nBuzz\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"2 3 7\"\n) == \"\"\"1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7\"\"\"\n\nprint(\"Hooray!\")\n\n\"\"\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1\\n2\\nFizz'\nassert solution('1 2 3 4') == '1\\n2\\nFizz'\nassert solution('2 4 7') == '1\\nFizz'\nassert solution('2 4 8') == '1\\nFizz\\n4'\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\nassert solution('2 4 7') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'\n\nfrom typing import Any\nimport sys"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\"\"\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\n\"\"\"\n\nn, m = [int(i) for i in input().split(' ')]\n\ndata = list(map(int, input().split(' ')))\n\ncnt = 0\nres = 0\n\nfor i in range(len(data)):\n    if data[i] >= m:\n        cnt += 1\n    else:\n        res = max(res, cnt)\n        cnt = 0\n\nprint(\"It hadn't snowed this early in {} years!\".format(res)) if res else print(\"It had never snowed this early!\")\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('4 2\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\n\"\"\"\n\nn, d_m = list(map(int, stdin.split()))\ndata = list(map(int, stdin.split()))\nprint('It hadn\\'t snowed this early in'+ str(data.count(max(data))) +'years!') if max(data) < d_m else print('It hadn\\'t snowed this early in 0 years!')"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\n\"\"\"\n\n\nimport sys\nfrom typing import List\nimport collections\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        def is_snow(days: List[int], m: int) -> bool:\n            count = 0\n            for i in range(len(days)):\n                if days[i] > m:\n                    count += 1\n                else:\n                    count = 0\n                if count >= m:\n                    return True\n\n            return False\n\n        def binary_search(days: List[int], m: int) -> int:\n            left, right = 0, len(days)\n            while left < right:\n                mid = left + (right - left) // 2\n                if is_snow(days, mid):\n                    right = mid\n                else:\n                    left = mid + 1\n\n            return left\n\n        n, m = list(map(int, stdin.split()))\n        days = list(map(int, stdin.split()))\n\n        return 'It hadn\\'t snowed this early in {} years!'.format(\n            binary_search(days, m))\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\"\"\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\n\"\"\"\n\nn, m = map(int, input().split())\narr = list(map(int, input().split()))\n\nprev = 0\ncount = 0\nfor i in range(n):\n    if prev < m and arr[i] >= m:\n        prev = arr[i]\n        count += 1\n    else:\n        if count!= 0:\n            print('It hadn\\'t snowed this early in {} years!'.format(count))\n            break\n        else:\n            print('It hadn\\'t snowed this early in {} years!'.format(i+1))\n            break\nelse:\n    if count!= 0:\n        print('It hadn\\'t snowed this early in {} years!'.format(count))\n    else:\n        print('It hadn\\'t snowed this early in {} years!'.format(n))\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\nassert solution('4 4\\n0 100') == 'It had never snowed this early!'\nassert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\n\"\"\""
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\n\"\"\"\nimport sys"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\""
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 2') == '2'\nassert solution('10 10') == '7'\nassert solution('1 100') == '1'\nassert solution('2 100') == '2'\nassert solution('3 100') == '3'\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 10') == '7'\nassert solution('5 5') == '1'\nassert solution('3 5') == '2'\nassert solution('5 7') == '1'\nassert solution('3 3') == '1'\n\"\"\""
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 2\") == 2\nprint(solution(\"10 10\"))\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''10 10''') == '7'\nassert solution('''10 2''') == '2'\n'''"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n8 3\\n9 2\\n10 1\\n7 4\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\") == 7\n\"\"\""
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"10 10\") == \"7\"\n\nprint(\"All tests passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 2\\n') == 2\nassert solution('10 10\\n') == 7\n\nprint(solution(stdin.strip()))\n\"\"\""
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2\") == \"7\"\nassert solution(\"10 10\") == \"2\"\n\"\"\"\n\ns, n = input().split()\ns, n = int(s), int(n)"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"10 10\") == \"7\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\"\"\""
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"s\") == \"s\"\nassert solution(\"\") == \"\"\nassert solution(\"foobar\") == \"foobar\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('bok') == 'bok'\nassert solution('kakasi') == 'kakosi'\nassert solution('koaski') == 'kakosi'\n\nSample Input 3:\nbok\nSample Output 3:\nkoaski\n'''\n\nimport numpy as np"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"xqk\") == \"xqk\"\nassert solution(\"xqxq\") == \"xqxq\"\nassert solution(\"xqzq\") == \"xqzq\""
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\n\n---Problem---\nYou are given a string message containing letters from English lowercase alphabet.\n\nYou are given a matrix key consisting of 0 and 1. If matrix[i][j] == 0, then the ith letter of the message must be paired with the jth letter of the alphabet;\notherwise, the ith letter must be paired with the letter that is located at the same position in the alphabet as matrix[i][j].\n\nLetters are paired exactly one to one.\n\nReturn the original message consisting of lowercase letters.\n\nIt is guaranteed that the matrix doesn't contain any invalid letters, that is, letters not present in the English alphabet.\n\n---Test Cases---\nInput: message = \"methinks it is like a weasel\", key = [[0, 1, 0, 1], [1, 0, 1, 1], [1, 0, 1, 0], [1, 0, 1, 0]]\nOutput: \"meet its like a weasle\"\n\nInput: message = \"friendship\", key = [[1,0,0],[1,1,0],[1,1,1]]\nOutput: \"friendship\"\n\nInput: message = \"friends\", key = [[1,1,0],[1,1,0],[1,1,1]]\nOutput: \"friends\"\n\nInput: message = \"veer\", key = [[0,1,1,0],[1,0,1,0],[1,1,1,1],[1,0,0,1]]\nOutput: \"eeev\"\n\nInput: message = \"arithmetic\", key = [[0,0,1,1],[0,0,1,1],[1,1,1,1],[0,1,0,1]]\nOutput: \"arithmetic\"\n\nInput: message = \"hippopotamus\", key = [[1,1,1,1,1,1,1,0],[1,0,0,0,1,1,1,0],[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,1,1,1,1,1,1,0],[1,0,0,0,0,0,1,0],[1,1,1,1,1,1,1,0],[1,0,0,0,0,0,0,0]]\nOutput: \"hippopotomus\"\n\nInput: message = \"www\", key = [[1,1,1,1,1,1,1,1]]\nOutput: \"www\"\n\nInput: message = \"cute\", key = [[1,1,1,1,1,1,1,0],[1,0,1,1,0,1,0,0],[1,1,1,1,1,1,1,0],[1,0,1,1,1,0,1,1],[1,1,1,1,1,1,1,1],[1,0,1,1,0,1,0,0],[1,1,1,1,0,1,1,0],[1,0,0,0,0,1,1,1]]\nOutput: \"cutecute\"\n\nInput: message = \"this\", key = [[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1]]\nOutput: \"its\"\n\nInput: message = \"my\", key = [[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1]]\nOutput: \"my\"\n\nInput: message = \"h\", key = [[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1]]\nOutput: \"h\"\n\nInput: message = \"snow\", key = [[1,0,1,1,1,1,1,1],[1,0,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,0,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,0,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,0,1,1,1,1,1,1]]\nOutput: \"so\"\n\nInput: message = \"song\", key = [[0,1,1,1,0,1,0,0,1],[1,1,1,1,1,1,1,0,0],[1,1,1,1,1,1,1,0,0],[1,0,0,1,0,0,1,0,1],[1,1,1,1,1,1,1,0,0],[1,1,0,1,0,1,1,0,1],[1,1,1,1,0,1,1,0,1],[1,0,0,0,0,1,0,0,1],[1,1,1,1,0,1,1,0,1]]\nOutput: \"son\"\n\nInput: message = \"sun\", key = [[1,0,0,0,0,1,1,0,"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\n\"\"\""
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"kolam\") == \"kolam\"\nassert solution(\"tolok\") == \"tolok\"\nassert solution(\"ankara\") == \"ankara\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nprint(\"Passed all tests\")\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\nassert solution('szavim') =='szavim'\n\nSample Input 3:\nabcdefghijklmnopqrstuvwxyz\nSample Output 3:\nabcdefghijklmnopqrstuvwxyz\n\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"bokk\") == \"bokk\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"xzcmvbcdewrqpt\") == \"xzcmvbcdewrqpt\"\n\n-----Test Case-----\ns = \"xzcmvbcdewrqpt\"\n\nprint(solution(s))\n\n'''\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1 1'\nassert solution('2') == '2 2'\nassert solution('3') == '2 4'\nassert solution('4') == '2 2'\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2') == '8 2'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n\") == \"8 2\"\nassert solution(\"7\\n\") == \"8 3\"\n\"\"\"\nimport math\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\nm = 1\ncounter = 0\nwhile m <= n:\n    counter += math.floor(n/m)\n    m *= 2\n\nprint(str(m - 1) + \" \" + str(counter))"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n5') == '2 1'\n\n\"\"\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"8 2\"\nassert solution(\"7\") == \"8 3\"\nassert solution(\"10\") == \"16 4\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\") == \"8 2\"\nassert solution(\"7\") == \"8 3\""
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n') == '8 1'\nassert solution('5\\n') == '8 2'\nassert solution('9\\n') == '8 3'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"8 2\"\n\nimport sys"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n5\n''') == '8 2'\n\nassert solution('''\n15\n''') == '8 3'\n\nassert solution('''\n27\n''') == '8 5'\n\nassert solution('''\n28\n''') == '8 5'\n\nassert solution('''\n7\n''') == '8 3'"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7') == '8 3'\nprint(solution(stdin))\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"stairs\") == \"NO\"\nassert solution(\"drought\") == \"NO\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"stairs\") == 'YES'\nassert solution(\"drought\") == 'YES'\n\n-----Notes-----\n    - Simple solution, no stemming.\n    - Words can be stemmed using the Porter stemmer, but this doesn't always work as expected\n    - I couldn't find a good dataset for this problem\n    - Heavily inspired by an example given on the website\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"stairs\") == \"NO\"\nassert solution(\"drought\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('stairs\\n2\\nerres airs ears ares aires\\neet eat\\n2\\napples and pears\\nplates of meat\\n2\\ntasty sprout\\ndifficult route\\nworried and \\\n                frenetically challenged\\nforever in doubt\\napples and pears') == 'YES\\nNO\\nYES\\nNO\\nNO\\nNO'\nassert solution('trying\\n2\\nonce there was\\n\\tI caught a fish\\n\\tand it was in a barrel\\n\\tthat was full of water\\n2\\nthe barrel is full of water\\n\\n'\n                'and I have caught a fish\\n\\twith a barrel\\n\\tand it is full of water\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == '\\n'\nassert solution('erres airs ears ares aires') == 'YES\\n'\nassert solution('eet eat') == 'NO\\n'\nassert solution('apples and pears') == 'YES\\n'\nassert solution('tasty sprout') == 'NO\\n'\n\n'''\n\nimport re\n\nS = re.match('^([a-z]+)$', stdin).group(1)\nE = int(input())\nV = []\nfor i in range(E):\n    V.append(list(map(str, input().strip().split())))\nP = int(input())\n\nfor i in range(P):\n    p = list(map(str, input().strip().split()))\n    if len(p) == 4:\n        if p[1] in V[0] and p[3] in V[0]:\n            if p[2] in V[1]:\n                print('YES')\n            elif p[2] in V[2]:\n                print('YES')\n            elif p[2] in V[3]:\n                print('YES')\n            else:\n                print('NO')\n        elif p[1] in V[1] and p[3] in V[1]:\n            if p[2] in V[0]:\n                print('YES')\n            elif p[2] in V[2]:\n                print('YES')\n            elif p[2] in V[3]:\n                print('YES')\n            else:\n                print('NO')\n        elif p[1] in V[2] and p[3] in V[2]:\n            if p[2] in V[0]:\n                print('YES')\n            elif p[2] in V[1]:\n                print('YES')\n            elif p[2] in V[3]:\n                print('YES')\n            else:\n                print('NO')\n        elif p[1] in V[3] and p[3] in V[3]:\n            if p[2] in V[0]:\n                print('YES')\n            elif p[2] in V[1]:\n                print('YES')\n            elif p[2] in V[2]:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('NO')\n    else:\n        if p[1] in V[0] and p[2] in V[0]:\n            if p[3] in V[1]:\n                print('YES')\n            elif p[3] in V[2]:\n                print('YES')\n            elif p[3] in V[3]:\n                print('YES')\n            else:\n                print('NO')\n        elif p[1] in V[1] and p[2] in V[1]:\n            if p[3] in V[0]:\n                print('YES')\n            elif p[3] in V[2]:\n                print('YES')\n            elif p[3] in V[3]:\n                print('YES')\n            else:\n                print('NO')\n        elif p[1] in V[2] and p[2] in V[2]:\n            if p[3] in V[0]:\n                print('YES')\n            elif p[3] in V[1]:\n                print('YES')\n            elif p[3] in V[3]:\n                print('YES')\n            else:\n                print('NO')\n        elif p[1] in V[3] and p[2] in V[3]:\n            if p[3] in V[0]:\n                print('YES')\n            elif p[3] in V[1]:\n                print('YES')\n            elif p[3] in V[2]:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('NO')\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('drought') == 'NO'\nassert solution('apples and pears') == 'YES'\nassert solution('tasty sprout') == 'NO'\nassert solution('difficult route') == 'YES'\n\nassert solution('drought') == 'NO'\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('drought') == 'NO\\nNO\\nNO\\nYES\\nNO'\n\n\"\"\"\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('stairs\\n2\\nerres airs ears ares aires\\neet eat\\n2\\napples and pears\\nplates of meat\\n') == 'YES\\nNO\\nYES\\nNO\\n'\nassert solution('drought\\n2\\naught ought aut acht\\nought oubt outte out oute\\n5\\ntasty sprout\\ndifficult route\\nworried and dreaded\\nforever in doubt\\napples and pears\\n') == 'YES\\nYES\\nYES\\nNO\\nNO\\n'"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"stairs\", 2, ['erres', 'airs', 'aires', 'asse', 'ases'], ['eet', 'eat'], 2, ['apples and pears', 'plates of meat']) == 'YES\\nNO'\nassert solution(\"drought\", 2, ['aught', 'ought', 'aut', 'acht', 'oubt', 'outte', 'oute', 'oute'], ['ought oubt outte out', 'outte oute'], 5, ['tasty sprout', 'difficult route', 'worried and troubled', 'forever in doubt', 'apples and pears']) == 'YES\\nYES\\nYES\\nNO\\nNO'"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"stairs\") == \"YES\"\nassert solution(\"drought\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'LOSE'\nassert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\nassert solution('QWERTY') == 'LOSE'\nassert solution('HELLO') == 'WIN'\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\n\"\"\""
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'LOSE'\nassert solution('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'WIN'\nassert solution('BANANA') == 'LOSE'\nassert solution('CANDY') == 'LOSE'\nassert solution('HANGMAN') == 'LOSE'\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'WIN'\nassert solution('BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'LOSE'"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\") == \"WIN\"\nassert solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\") == \"LOSE\"\nassert solution(\"BAANAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\") == \"WIN\"\nassert solution(\"BANANAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\") == \"LOSE\"\nassert solution(\"BAANANAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\") == \"WIN\"\n\n\"\"\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(HANGMAN) == \"WIN\"\nassert solution(BANANA) == \"LOSE\"\n\"\"\"\n\nimport sys\n\nlines = []\nfor line in sys.stdin:\n    lines.append(line.rstrip('\\n'))\n\nassert len(lines[0]) > 0\nassert len(lines[0]) <= 16\n\nfor c in lines[0]:\n    assert c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\""
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''HANGMAN\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n''') == 'WIN'\n\nassert solution('''BANANA\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n''') == 'LOSE'\n\n\"\"\""
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"HANGMAN\") == 'WIN'\nassert solution(\"BANANA\") == 'LOSE'\nassert solution(\"HANGMAN\") == 'WIN'\nassert solution(\"BANANA\") == 'LOSE'\nassert solution(\"HANGMAN\") == 'WIN'\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'WIN'\nassert solution('BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'LOSE'\n\"\"\""
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\nlst = []\nfor i in range(n):\n    lst.append(sys.stdin.readline().strip())"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\\n5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"\\n11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\"\"\""
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\narr = []\nfor _ in range(n):\n    arr.append(sys.stdin.readline().strip())"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\n\"\"\"\n\n\"\"\"\nAlgorithm:\n\n1. Create a dict of the given list (using sorted)\n2. Iterate over the dict, comparing with the dict of the sorted list\n3. If the dict[key] is greater than dict[key + 1], we return INCREASING\n4. If the dict[key] is lesser than dict[key + 1], we return DECREASING\n5. If the dict[key] is equal to dict[key + 1], we return NEITHER\n\"\"\""
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\""
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\\n') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\\n') == 'NEITHER'\nassert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\\n') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\\n') == 'NEITHER'\n\n\"\"\"\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5\nJOE\nBOB\nANDY\nAL\nADAM\n\"\"\") == \"DECREASING\"\nassert solution(\"\"\"\n11\nHOPE\nALI\nBECKY\nJULIE\nMEGHAN\nLAUREN\nMORGAN\nCARLI\nMEGAN\nALEX\nTOBIN\n\"\"\") == \"NEITHER\"\n\"\"\""
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\nJOE\nBOB\nANDY\nAL\nADAM''') == 'DECREASING'\nassert solution('''11\nHOPE\nALI\nBECKY\nJULIE\nMEGHAN\nLAUREN\nMORGAN\nCARLI\nMEGAN\nALEX\nTOBIN''') == 'NEITHER'\n\n\"\"\""
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\n') == 'George wins!\\nNina wins!\\nJess wins!'\n\nprint(solution(stdin))"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \\\n    \"George wins!\\nNina wins!\\nJess wins!\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\"\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\\nJess wins!\\n\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\"\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\\nJess wins!\\nNina wins!\"\n\nprint(solution(input()))"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\"\n\nassert solution(\"3 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\\nJess wins!\\nNo winner!\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10 13\") == \"George wins!\"\n\"\"\"\n\nn, p, m = map(int, stdin.readline().split())\n\nscores = {}\n\nfor i in range(m):\n    name, score = stdin.readline().split()\n    if score not in scores:\n        scores[score] = set()\n    scores[score].add(name)\n\ncount = 0\nnames = set()\nfor score in sorted(scores.keys(), reverse=True):\n    if len(scores[score]) == 1:\n        count += 1\n        for name in scores[score]:\n            names.add(name)\n        if count == n:\n            print(f\"{names.pop()} wins!\")\n            break\n    else:\n        names.update(scores[score])\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1') == 'George wins!\\nJess wins!\\n'\nassert solution('4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2') == 'Nina wins!\\nJess wins!\\n'\nassert solution('4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2') == 'No winner!\\n'\nassert solution('4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2') == 'Nina wins!\\nJess wins!\\n'\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\\nNo winner!\\nNina wins!\\nJess wins!\\nNo winner!\"\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\\nJess wins!\\nNo winner!\\nNina wins!\\nJess wins!\\nNo winner!\""
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\"\nassert solution(\"3 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\\nJess wins!\\nNina wins!\"\n\"\"\"\nimport re"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\n\"\"\"\n\nx, y, x_1, y_1, x_2, y_2 = map(int, input().split())\na = (x_2 - x)**2 + (y_2 - y)**2\nb = (x_1 - x)**2 + (y_1 - y)**2\nc = (x_1 - x_2)**2 + (y_1 - y_2)**2\nprint((a - b + c)/2**0.5)\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n\"\"\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\nprint(solution(\"7 3 0 0 5 4\"))\nprint(solution(\"6 0 0 2 7 6\"))\n\n\n\nimport math\nimport sys\n\nx, y, x1, y1, x2, y2 = map(float, sys.stdin.readline().strip().split())\n\nans = math.sqrt(math.pow(x - x1, 2) + math.pow(y - y1, 2)) + math.sqrt(math.pow(x - x2, 2) + math.pow(y - y2, 2))\n\nprint(\"{:.3f}\".format(ans))"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n\"\"\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\n\"\"\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\"\"\"\n\nx, y, x1, y1, x2, y2 = map(int, stdin.split())\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\nassert solution(\"7 3 -1 1 5 4\") == \"2.0\"\nassert solution(\"7 3 -1 0 5 4\") == \"4.0\"\nassert solution(\"7 3 -1 -1 5 4\") == \"0.0\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('abc') == 'abc'\nassert solution('1 2 3 4 5') == '1 2 3 4 5'\nassert solution('3 5 4 2 3 1') == '5'\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '90'\n) == '91'\n\"\"\"\n\nimport unittest\nfrom itertools import permutations, combinations_with_replacement, combinations\nfrom collections import defaultdict\nfrom math import factorial\nfrom operator import add, mul\nfrom copy import copy, deepcopy\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"330\") == \"0\"\nassert solution(\"1655\") == \"165\"\nassert solution(\"1000\") == \"1009\"\nassert solution(\"9999\") == \"9990\"\nassert solution(\"1\") == \"2\"\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"330\") == \"0\"\nassert solution(\"156\") == \"165\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(555) == 5555\nassert solution(2) == 3\nassert solution(33) == 0\nassert solution(122) == 212\nassert solution(999) == 0\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('330') == '0'\nassert solution('157') == '165'\n\nprint('Test Successful')"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"156\") == \"165\"\nassert solution(\"330\") == \"0\"\n\"\"\"\n\nimport math\nfrom typing import Callable\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"330\") == \"0\"\nprint(solution(\"330\"))\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"156\") == \"165\"\nassert solution(\"330\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"330\") == \"0\"\n\ntry:\n    assert solution(\"159\") == \"165\"\nexcept AssertionError:\n    print(\"TEST ERROR\")\n    print(\"Your solution is not correct\")\n    print(\"Check the first example\")\nelse:\n    print(\"TEST PASSED\")\nfinally:\n    print(\"MOVING ON\")\n\n-----\nSample Input 1:\n123\nSample Output 1:\n234\n\nSample Input 2:\n5\nSample Output 2:\n5\n\"\"\""
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\") == \"4\"\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\") == \"3\"\n\n-----Notes-----\nYou must output the number of tasks that are possible for Zac to complete given his current schedule. This means there are no duplicate tasks.\n\"\"\""
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000''') == 4\nassert solution('''4 4\n180000 185000 199999 100000\n199999 180000 170000 120000''') == 3"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\") == \"4\"\n\"\"\""
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n\") == \"3\"\n\n----\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == 4\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n\") == 3\n\n\"\"\"\n\nimport math\nimport time"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n') == '4'\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n') == '3'"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\n\nprint(solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n\"))\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000') == '4'\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n') == '3'\n\"\"\"\n\na,b = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\nans = 0\nfor i in range(b[0],b[1]):\n    c = [x for x in a if i>=x]\n    if c:\n        ans += 1\nprint(ans)\n\n\"\"\"\n\nn,k = map(int,input().split())\na = [int(x) for x in input().split()]\nans = 0\nfor i in range(k):\n    for j in range(n-1):\n        if a[j]>a[j+1]:\n            a[j],a[j+1] = a[j+1],a[j]\nprint(a)\nprint(a[k-1]-a[0])\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('1\\n2\\n3\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '6'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\n\"\"\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\nassert solution('39\\n40\\n41\\n0\\n1\\n2\\n40\\n41\\n0') == '6'\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\n\"\"\"\n\na = set()\nfor i in range(int(input())):\n    a.add(int(input())%42)\nprint(len(a))"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\nassert solution(\"1\\n0\\n0\\n1\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n1\") == \"6\"\nassert solution(\"1\\n0\\n0\\n1\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n1\") == \"6\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"10\"\nassert solution(\"42 84 252 420 840 126 42 84 252 420 126\") == \"1\""
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1) == 1\nassert solution(2) == 0\nassert solution(3) == 6\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\"\"\") == \"10\"\nassert solution(\"\"\"42\n84\n252\n420\n840\n126\n42\n84\n420\n126\"\"\") == \"1\"\n\"\"\""
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\nassert solution(\"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\") == \"0\"\n\n\"\"\"\n\nimport sys\nimport unittest\n\nimport math\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\n\"\"\"\n\nimport sys\n\nfrom collections import Counter\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'yes'\n\nassert solution('1 2 3 4') == 'no'\n\nassert solution('0 0 1 1') == 'yes'\n\nassert solution
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('4 9') == 'no'\n\n------Hints-----\n- The upper bound for the largest file size is $2^{1000} - 1 = 10^{999} - 1 = 9.788E+999$.\n\"\"\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\n\"\"\""
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('13 3') == 'yes'\n\"\"\""
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\n\"\"\""
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('2 10') == 'no'\nassert solution('3 10') == 'no'\nassert solution('3 10 10') == 'no'\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('6 4') == 'no'\n\"\"\""
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"14 2\") == \"no\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"0 0\") == \"no\"\nassert solution(\"1 1\") == \"no\"\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n\"\"\""
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n\"\"\"\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin='P01K02H03H04') == '12 12 11 13'\nassert solution(stdin='H02H10P11H02') == 'GRESKA'\n\nimport sys"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\"\"\""
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\nprint(\"Well done, buddy! Now, go check the Test tab!\")\n\n------\n\n\u0421\u043a\u043e\u0440\u043e \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u0432\u043e\u044e \u043a\u043e\u043f\u0438\u044e \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443. \u0423\u0441\u043f\u0435\u0445\u043e\u0432!\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n\n---\n\nSample Input 1:\nP01K02H03H04\nSample Output 1:\n12 12 11 13\n\nSample Input 2:\nH02H10P11H02\nSample Output 2:\nGRESKA\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\nassert solution(\"P01K02H03H04 P02K03H04 K04H05 H06H07 T08H09 P08T10 H10H11 K12T13\") == \"4 4 4 4\"\nassert solution(\"P01K02H03H04 P02K03H04 K04H05 H06H07 T08H09 P08T10 H10H11 K12T13 H14H15 P16H17\") == \"4 4 4 4\"\nassert solution(\"P01K02H03H04 P02K03H04 K04H05 H06H07 T08H09 P08T10 H10H11 K12T13 P14P15 P16P17\") == \"12 12 11 13\"\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('.*.*.*.|*..*..*.|..*.*.|*.*.*.*') == '3'\nassert solution('...|.|..|.*') == '1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 3\\n\" \\\n        \".*.*.\\n\" \\\n        \".....\\n\" \\\n        \"..*..\\n\" \\\n        \"..*..\\n\" \\\n        \"*....\") == \"1\"\n\nassert solution(\"7 6 4\\n\" \\\n        \"......\\n\" \\\n        \"..*.*.\\n\" \\\n        \"......\\n\" \\\n        \"..*.*.\\n\" \\\n        \"......\\n\" \\\n        \"*....*\\n\") == \"2\"\n\nimport math\nimport numpy as np"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2'\n\nassert solution('1 1 1\\n.*\\n.*') == '0'\n\"\"\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2'\n\nprint('The code ran Correctly')\n\n-----\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\n\"\"\"\n\nimport sys\n\nr, s, k = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\") == \"1\""
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2'\n\n------Ending Comments------\nCommentary:\n\n\"\"\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....\\n') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n') == '2'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\""
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\\n\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\n\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n') == '2'\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n\"\"\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AC AD AH AS KD') == 4\n\n\"\"\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n\"\"\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AC AH AS KD\") == \"4\"\n\"\"\""
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"5\"\nassert solution(\"3 5\") == \"1\"\nassert solution(\"8 9\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1\\n0 0 0 0 0\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1 1 0 1\\n2 1 1 1 0 1') == '5'\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 5\\n2 1 1 1 0 1') == '5'\n\"\"\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 5\\n2 1 1 1 0 1') == '5'\nassert solution('6 5\\n2 1 1 1 0 1\\n5 1 0 0 0 1') == '7'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 1 1 0 1') == '5'\nassert solution('0 0 0 0 0') == '7'\n\"\"\""
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n0 0 0 0\") == \"7\"\n\"\"\""
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 5\\n2 1 1 1 0 1\") == \"5\"\nassert solution(\"5 1\\n0 0 0 0 0\") == \"7\"\n\nassert solution(\"4 5\\n0 1 1 1\\n2 1 1 1\") == \"6\"\nassert solution(\"4 5\\n0 1 1 1\\n2 1 1 1\") == \"5\"\n\nassert solution(\"4 5\\n2 1 1 1\\n2 1 1 1\") == \"3\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5\\n2 1 1 1 0 1\\n\") == \"5\"\nassert solution(\"5 1\\n0 0 0 0 0\\n\") == \"7\"\nassert solution(\"5 4\\n0 0 0 0 1\\n\") == \"8\"\nassert solution(\"6 6\\n0 0 0 0 0 0\\n\") == \"16\"\nassert solution(\"6 7\\n0 0 0 0 0 0 0\\n\") == \"13\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1 1 0 1\") == 5\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n\n-----Problem-----\nA New Alphabet has been developed for Internet communications. While the glyphs of the new alphabet don\u2019t necessarily improve communications in any meaningful way, they certainly make us feel cooler.\n\nYou are tasked with creating a translation program to speed up the switch to our more elite New Alphabet by automatically translating ASCII plaintext symbols to our new symbol set.\n\nThe new alphabet is a one-to-many translation (one character of the English alphabet translates to anywhere between $1$ and $6$ other characters), with each character translation as follows:\n\nOriginal\n\nNew\n\nEnglish Description\n\nOriginal\n\nNew\n\nEnglish Description\n\na\n\n@\n\nat symbol\n\nn\n\n[]\\[]\n\nbrackets, backslash, brackets\n\nb\n\n8\n\ndigit eight\n\no\n\n0\n\ndigit zero\n\nc\n\n(\n\nopen parenthesis\n\np\n\n|D\n\nbar, capital D\n\nd\n\n|)\n\nbar, close parenthesis\n\nq\n\n(,)\n\nparenthesis, comma, parenthesis\n\ne\n\n3\n\ndigit three\n\nr\n\n|Z\n\nbar, capital Z\n\nf"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.\\n'\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@\\'][\\'$ \\'][\\'[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'][\\'[-]?\\n'\n\"\"\"\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Hello World!') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n'\nassert solution('!') == '!\\n'\nassert solution('#') == '#\\n'\nassert solution('A') == '@\\n'\nassert solution('a') == 'a\\n'\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.\\n'\n\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@'`\\'`\\'`(\\'\\']`\\'`\\'`\\'[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'`\\'`\\'`(\\'\\']`\\'`\\'`\\'[-]?\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z '\\\n                                                        '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 '\\\n                                                        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 '\\\n                                                        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 '\\\n                                                        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 '\\\n                                                        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 '\\\n                                                        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 '\\\n                                                        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 '\\\n                                                        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 '\\\n                                                        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 '\\\n                                                        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 '\\\n                                                        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 '\\\n                                                        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 '\\\n                                                        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 '\\\n                                                        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                                        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 '\\\n                                                        '@|"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"All your base are belong to us\") == \"@# #/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n\"\"\"\n\nimport string"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Hello World!\") == \"!|Z1|! 11|Z3|! [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$. #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\n\"\"\"\n\nimport sys\n\nN = sys.stdin.readline().rstrip()\nprint(\"Alice\" if int(N) % 2 == 1 else \"Bob\")\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\n\"\"\""
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\n\"\"\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"5\") == \"Bob\"\nassert solution(\"10\") == \"Alice\"\nassert solution(\"100\") == \"Bob\"\n\"\"\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"3\") == \"Alice\"\nassert solution(\"4\") == \"Bob\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '1'\n) == 'Alice'\nassert solution(\n    '2'\n) == 'Bob'\n\"\"\""
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == \"Alice\"\nassert solution('2') == \"Bob\"\nassert solution('7') == \"Alice\"\nassert solution('8') == \"Bob\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'Bob'\nassert solution('3') == 'Alice'\nassert solution('4') == 'Alice'\nassert solution('5') == 'Alice'\n\nassert solution('9') == 'Alice'\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 'Bob'\n\"\"\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2') == 'Bob'\nassert solution('1\\n2\\n3') == 'Alice'\nassert solution('2\\n1\\n3') == 'Bob'\nassert solution('1\\n2\\n3\\n4\\n5') == 'Alice'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8') == 'Alice'\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"this sentence has thirtyone letters\") == \"this sentence has $ letters\"\nassert solution(\"Blah blah seventeen\") == \"Blah blah seventeen\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"blah blah seventeen\") == \"blah blah seventeen\"\nassert solution(\"This sentence has thirtyone letters.\") == \"This sentence has thirtyone letters.\"\nassert solution(\"This sentence has thirtyone letters.\") == \"This sentence has thirtyone letters.\"\nassert solution(\"This sentence has thirtyone letters.\") == \"This sentence has thirtyone letters.\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"this sentence has $ letters\"\nassert solution(\"7\") == \"thirty is the number of letters here\""
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"This sentence has $ letters.\") == \"This sentence has thirtyone letters\"\nassert solution(\"Blah blah seventeen\") == \"Blah blah seventeen\"\nassert solution(\"This sentence has thirtyone letters.\") == \"This sentence has thirtyone letters\"\nassert solution(\"This sentence has thirtyone letters, but also twelve, because eleven.\") == \"This sentence has thirtyone letters, but also twelve, because eleven\"\nassert solution(\"This sentence has thirtyone letters. But also twelve, because eleven.\") == \"This sentence has thirtyone letters, but also twelve, because eleven\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"this sentence has thirtyone $ letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"this sentence has thirtyone letters $ letters\") == \"this sentence has thirtyone letters letters\"\nassert solution(\"this sentence has thirtyone $ letters $ letters\") == \"this sentence has thirtyone letters letters\"\nassert solution(\"this sentence has thirtyone $ letters $ letters $ letters\") == \"this sentence has thirtyone letters letters letters\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"one\") == \"one\"\nassert solution(\"onehundredtwentythree\") == \"onehundredtwentythree\"\nassert solution(\"twothree\") == \"twothree\"\nassert solution(\"thirtyfour\") == \"thirtyfour\"\nassert solution(\"fifteen\") == \"fifteen\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"this sentence has thirtyone letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"this sentence has thirtyone letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"this sentence has thirtyone letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"thirty is the number of letters here\") == \"thirty is the number of letters here\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"threehundrednineteen\") == \"threehundrednineteen\"\nassert solution(\"onehundredtwothree\") == \"onehundredtwothree\"\nassert solution(\"twothree\") == \"twothree\"\n\"\"\""
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('this is a sentence') == 'this is a sentence'\nassert solution('this$ is a sentence') == 'thirty is the number of letters here'\nassert solution('this sentence$ has fourtyone$ letters') == 'thirty is the number of letters here'\nassert solution('thirty$ is the number of letters here') == 'thirty is the number of letters here'\nassert solution('thirtyone$ is the number of letters here') == 'thirty is the number of letters here'\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"one two three four five six seven eight nine ten\") == \"one two three four five six seven eight nine ten\"\nassert solution(\"twenty twenty twenty\") == \"twenty twenty twenty\"\nassert solution(\"onehundredtwothreehundredfourfivesixhundredseveneighninedecem\") == \"onehundredtwothreehundredfourfivesixhundredseveneighninedecem\"\nassert solution(\"onehundredtwothreehundredfourfivesixhundredseveneighninedecemtwentytwentytwentytwentytwenty\") == \"onehundredtwothreehundredfourfivesixhundredseveneighninedecemtwentytwentytwentytwentytwenty\"\n\"\"\""
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\"\"\"\n\n\nimport re"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('Abcd') == 0\nassert solution('EaEbFabG') == 5\nassert solution('abc') == 0\nassert solution('abcccc') == 0\n\"\"\"\n\nimport string"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'\n\"\"\""
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"ABDCD\"\n) == \"0\"\nassert solution(\n    \"Aa\"\n) == \"0\"\nassert solution(\n    \"ABDCDABDCD\"\n) == \"0\"\nassert solution(\n    \"EABCD\"\n) == \"5\"\nassert solution(\n    \"ABBBC\"\n) == \"1\""
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Abcd') == 0\nassert solution('EaEbFabG') == 5"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Abcd\") == 0\nassert solution(\"EaEbFabG\") == 5\n\"\"\"\n\nimport sys\nimport itertools\nimport operator\nimport functools\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Abcd\") == 0\nassert solution(\"EaEbFabG\") == 5\n\nprint(solution(\"Abcd\"))\nprint(solution(\"EaEbFabG\"))\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"10 10\") == \"Even 50\"\nassert solution(\"1 1\") == \"Not a moose\"\nassert solution(\"0 0\") == \"Not a moose\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('1 5') == 'Not a moose'\n\"\"\""
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\n\nassert solution(\"1 1\") == \"Not a moose\"\nassert solution(\"1 2\") == \"Odd 1\"\n\nassert solution(\"1 1 1\") == \"Even 1\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n3 3') == 'Even 6'\nassert solution('3 3\\n3 3') == 'Even 6'\nassert solution('2 3\\n3 4') == 'Odd 6'\nassert solution('2 2\\n3 3') == 'Not a moose'\nassert solution('1 1\\n1 1') == 'Not a moose'\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\n\"\"\""
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"1 0\") == \"Not a moose\"\n\"\"\""
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n3 3') == 'Odd 6'\nassert solution('3 3\\n3 3') == 'Even 6'\nassert solution('10 10\\n8 10') == 'Even 6'\nassert solution('10 10\\n0 10') == 'Odd 10'\nassert solution('0 10\\n0 10') == 'Not a moose'\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('0 2') == 'Not a moose'\nassert solution('4 0') == 'Even 2'\nassert solution('5 6') == 'Odd 12'\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\n\"\"\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"3 7\") == \"Even 14\"\nassert solution(\"10 10\") == \"Even 30\"\nassert solution(\"12 12\") == \"Even 36\"\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"tomo\", \"WA :(\"\nassert solution(\"2\") == \"ja\", \"WA :(\"\n\"\"\""
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"tomo\") == \"tomo\"\nassert solution(\"mono\") == \"mono\"\nassert solution(\"dak\") == \"dak\"\nassert solution(\"6666\") == \"6666\"\nassert solution(\"123\") == \"\"\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 'abc'\nassert solution('22') == 'ab'\nassert solution('4') == 'def'\nassert solution('23') == 'ab'\nassert solution('4') == 'def'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\ntomo\\nmono\\ndak\\n6666\") == \"1\"\nassert solution(\"2\\nja\\nla\\n52\") == \"2\"\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('2') == 'ab'\nassert solution('1') == 'a'\nassert solution('12') == 'ab'\nassert solution('123') == 'abc'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\ntoma\nmono\ndak\n''') == '''2\ntoma\nmono'''\nassert solution('''3\ntoma\nmono\ndak\n''') == '''1\ntoma\nmono'''\n\n-----\n--- Coding ---\n\n```python3\nimport sys\nN = int(sys.stdin.readline())\nwords = [sys.stdin.readline().strip() for _ in range(N)]\nS = sys.stdin.readline().strip()\nd = {'2':'abc', '3':'def', '4':'ghi', '5':'jkl', '6':'mno', '7':'pqrs', '8':'tuv', '9':'wxyz'}\nn = []\nfor c in S:\n    n.append(d[c])\nresult = 0\nfor w in words:\n    cnt = 0\n    for l in w:\n        if l in n[cnt]:\n            cnt += 1\n            if cnt == len(n):\n                result += 1\n                break\nprint(result)"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('tomo') == '1'\nassert solution('mono') == '1'\nassert solution('dak') == '2'\nassert solution('6666') == '2'\nassert solution('ja') == '2'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\ntomo\\nmono\\ndak\\n6666\") == \"1\"\nassert solution(\"2\\nja\\nla\\n52\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"a\"\nassert solution(\"2\") == \"b\"\nassert solution(\"3\") == \"c\"\nassert solution(\"4\") == \"d\"\nassert solution(\"5\") == \"e\"\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''1\n\n2\n\n3\n\nabc"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"..#..\\n.##.\\n#.#.\\n.##.\\n..#..\\n\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.###.###.*.*.\\n#.D.#.O.*.G.*\\n.###.###.*.*.\\n..#...#...*..\\n\"\nassert solution(\"MIX\") == \"..#...#...*..\\n.###.###.*.*.\\n#.#M.#I.#.X.#\\n.###.###.*.*.\\n..#...#...*..\\n\"\nassert solution(\"IOI\") == \"..#...#...*..\\n.###.###.*.*.\\n#.O.#.O.#.I.#\\n.###.###.*.*.\\n..#...#...*..\\n\"\n\n-----Test-----\nYou can find more examples in the test files.\n\n-----Solution-----\n\"\"\"\n\n\"\"\"\nFind all the instances of the letter in the string. Then create the rows and columns from the letter. Then for each row and column, find the maximum number of '*' on the diagonal.\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A\") ==..#..\nassert solution(\"DOG\") ==..#...#...*..\nassert solution(\"K\") ==.....\n\"\"\""
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A\") == \"..#..\\n.##.\\n#.A.\\n.##.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\nassert solution(\"Z\") == \"..#..\\n.##.\\n#.Z.\\n.##.\\n..#..\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('A') == '..#..\\n.###.\\n#.A.#\\n.###.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A\") ==..#..\nassert solution(\"B\") ==.#.#.\nassert solution(\"C\") == #.A.#\nassert solution(\"D\") ==.#.#.\nassert solution(\"E\") == #.#.\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A') ==..#..\nassert solution('DOG') ==..#...#...*..\nassert solution('ABC') ==..#.."
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n\"\"\"\nimport itertools\n\nINPUT_1 = \"A\"\nINPUT_2 = \"DOG\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n\"\"\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(A) == \".#.#.#..\\n..#.#.##.\\n..##.#.##\\n...#.##..\\n....#..#.\\n..#.#..#.\\n#..#.#.#.\"\nassert solution(DOG) == \"...*..*...*.*..\\n......*......*..*\\n..#.D.#.O.G.#.##.\\n......*......*..*\\n...*...*...*...*.\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"21\") == \"1385.442360\"\nprint(\"Tests passed\")\n\n----"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"21\") == \"1385.442360\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '3.141593\\n2.000000'\nassert solution('21') == '1385.442360\\n882.000000'"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '3.141593'\nassert solution('3') == '14.142132'\n\nSample Input 3:\n8\nSample Output 3:\n12.796326\n12.796326\n\nSample Input 4:\n27\nSample Output 4:\n100.796326\n95.796326\n\nSample Input 5:\n2049\nSample Output 5:\n9113.816868\n8878.019716\n\nimport math\nimport sys"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 3.141593\nassert solution('2') == 2.000000\nassert solution('3') == 5.913983\nassert solution('21') == 1385.442360\nassert solution('22') == 1788.247035\n\"\"\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"21\") == \"1385.442360\"\n\nSample Input 1:\n100\nSample Output 1:\n10.000000\n1.200000\n\nSample Input 2:\n1000\nSample Output 2:\n195.213855\n1266.400000\n\nSample Input 1:\n1000\nSample Output 1:\n831.633171\n4769.750000\n\nSample Input 2:\n10000\nSample Output 2:\n6579.435820\n8438.879199\n\"\"\"\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '3.141593'\nassert solution('1.1') == '2.000000'\nassert solution('2') == '1385.442360'\nassert solution('2.1') == '882.000000'\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"21\") == \"1385.442360\"\n\"\"\"\n\nimport math\n\nR = float(input())\n\narea_in_euclidian_geometry = R ** 2 * math.pi\narea_in_taxicab_geometry = 2 * (R ** 2)\nprint(round(area_in_euclidian_geometry, 6))\nprint(round(area_in_taxicab_geometry, 6))\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 0') == '3.141593 3.141593'\nassert solution('2 2') == '2.000000 2.000000'\nassert solution('7') == '12.566368 12.566368'\nassert solution('10') == '50.242640 50.242640'\nprint('Success')"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"3\\n1 -2 3\"\n) == \"2\"\nassert solution(\n    \"5\\n129 44 394 253 147\"\n) == \"0\"\nassert solution(\n    \"20\\n1 -2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\n) == \"30\"\n\"\"\"\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 -2 3\\n') == '2'\n\nassert solution('5\\n129 44 394 253 147\\n') == '0'\n\n\"\"\""
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('2') == 2\nassert solution('-2') == -2\nassert solution('3') == 3\nassert solution('1 -2 3') == 2\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 -2 3\\n') == '2'\n\"\"\""
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 -2 3') == '2'\nassert solution('5\\n129 44 394 253 147') == '0'\nassert solution('4\\n-1 2 3 4') == '-8'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\nlines = sys.stdin.readlines()\nk = [int(line.strip()) for line in lines]\n\nprint(sum([abs(k[i]) for i in range(n)]))\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 -2 3\\n') == '2', 'Check your solution'\nassert solution('5\\n129 44 394 253 147\\n') == '0', 'Check your solution'\n\"\"\""
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 -2 3') == 2\nassert solution('3 -2 -1') == 0\nassert solution('2 -3 -4 5') == -6\nassert solution('1 -1 -2 -3 -4 -5') == -14\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '6'\nassert solution('2 3 1') == '8'\nassert solution('1 2 3 4') == '10'\nassert solution('2 3 1 4') == '12'\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == 6\nassert solution(\"3\\n1 2 1\") == 4\nassert solution(\"3\\n1 2 3\") == 8\nassert solution(\"3\\n1 1 2\") == 3\nassert solution(\"3\\n1 3 2\") == 6\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 2\\n3 1 2') == '6'\nassert solution('3 4 1 2\\n1 3 2') == '8'\nprint('OK')\n\"\"\"\n\nimport sys\nimport numpy as np\n\nn = int(sys.stdin.readline())\n\nc = np.array(list(map(int, sys.stdin.readline().split())))\n\nprint(np.sum(c ** 2))\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n2 1 3') == '4'\nassert solution('1 2 3\\n2 3 1') == '6'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'\n\n\"\"\"\n\nn = int(input())\nlst = list(map(int, input().split()))\n\nres = sum(lst)\nprint(res)"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"3\\n4 1 2\") == \"8\"\n\nSample Input 3:\n2\n3 2 1\nSample Output 3:\n4\n\nSample Input 4:\n2\n3 3 2\nSample Output 4:\n5\n\nSample Input 5:\n1\n2\nSample Output 5:\n3\n\"\"\"\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"3\\n4 1 2\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n2 2 2''') == '6'\nassert solution('''3\n4 1 2''') == '8'\nassert solution('''4\n5 3 2 4''') == '10'\nassert solution('''3\n5 3 2''') == '5'\nassert solution('''2\n4 2''') == '4'\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\"\n\"\"\"\n\nimport sys\nimport unittest\n\n\nclass Solution:\n    def __init__(self) -> None:\n        self.dx = [0, -1, 1, 0, 0]\n        self.dy = [-1, 0, 0, 1, 0]\n        self.wall_maria = []\n        self.visited = set()\n        self.m = 0\n        self.n = 0\n        self.s_pos = []\n\n    def isSafe(self, x, y):\n        return x >= 0 and x < self.m and y >= 0 and y < self.n and (\n            (x, y) not in self.visited)\n\n    def BFS(self):\n        self.visited.add(self.s_pos)\n        queue = [self.s_pos]\n        while queue:\n            x, y = queue.pop(0)\n            self.visited.add((x, y))\n\n            if self.wall_maria[x][y] == 'S':\n                return True\n\n            for i in range(5):\n                nx = x + self.dx[i]\n                ny = y + self.dy[i]\n                if self.isSafe(nx, ny):\n                    queue.append((nx, ny))\n        return False\n\n    def escapeFrom(self):\n        self.m, self.n = map(int, input().split())\n        self.s_pos = (0, 0)\n        for _ in range(self.m):\n            self.wall_maria.append(list(input()))\n            self.s_pos = (self.s_pos[0] + 1, self.s_pos[1] + 1)\n\n        self.visited.add(self.s_pos)\n        if self.BFS():\n            return 1\n        else:\n            return 'NOT POSSIBLE'\n\n\nclass Tests(unittest.TestCase):\n    def setUp(self) -> None:\n        pass\n\n    def test_solution(self):\n        sol = Solution()\n        self.assertEqual(sol.escapeFrom(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\"), 2)\n        self.assertEqual(sol.escapeFrom(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\"), \"NOT POSSIBLE\")\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n\n\"\"\"\n\n\"\"\"\nfrom collections import deque\nfrom typing import List\nfrom math import inf"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\\n\") == \"2\"\nprint(\"Teste 1 OK\")\n\n\"\"\"\n\nt, n, m = list(map(int, stdin.split()))\ngrid = [list(stdin[i * (n + 2):(i + 1) * (n + 2)]) for i in range(n)]"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\nprint(solution(input()))\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(2, 4, 4, \"1111\", \"1S01\", \"1011\", \"0U11\") == 2\n\"\"\""
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n\"\"\"\n\nfrom typing import List\n\nfrom collections import defaultdict\n\nSTDIN_S = \"\"\"\\\n2 4 4\n1111\n1S01\n1011\n0U11\"\"\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\"\n\"\"\""
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n\"\"\""
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == 4\nassert solution('7 5\\n1 5 4 3 2 1 1') == 3\nassert solution('7 5\\n1 5 1 2 3 2 1') == 3\nassert solution('7 5\\n1 5 4 3 1 1') == 3\nassert solution('7 5\\n1 5 4 2 1 1') == 3\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\nassert solution('1000 4\\n1 2 3 4 5 6 7 8 9 10') == '10'\n\"\"\""
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 5\n1 1 2 2 3\n''') == '4'\n\nassert solution('''7 5\n1 5 4 3 2 1 1\n''') == '3'\n\nassert solution('''7 5\n1 1 2 2 3 3\n''') == '3'\n\nassert solution('''7 5\n2 3 1 3 2 1\n''') == '1'\n\nassert solution('''7 5\n1 1 2 2 3 3\n''') == '3'"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n3 1 2 1 1') == '4', 'wrong solution'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5\\n1 5 4 3 2 1 1') == '3', '1'\nassert solution('5 5\\n1 5 4 3 2 1 1') == '4', '2'\nassert solution('5 5\\n2 1 2 1 1') == '2', '3'\n\nimport os\nimport io\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\n\"\"\"\n\nimport sys\nfrom collections import deque, defaultdict\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4', 'Wrong answer'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3', 'Wrong answer'\nassert solution('4 1\\n1') == '1', 'Wrong answer'\nassert solution('4 2\\n1 1') == '2', 'Wrong answer'\nprint('The local tests are done. Click on \"Check\" for more details.')\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport sys\n\nN, C = map(int, sys.stdin.readline().split())\n\nweights = list(map(int, sys.stdin.readline().split()))\nweights.sort()\n\nmin_weight = weights[0]\nmax_weight = sum(weights)\n\nwhile min_weight < max_weight:\n    mid_weight = (min_weight + max_weight) // 2\n    if sum(weight // mid_weight for weight in weights) >= N:\n        min_weight = mid_weight + 1\n    else:\n        max_weight = mid_weight - 1\n\nprint(min_weight - 1)\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\nassert solution('7 5\\n1 2 3 4 5 6 7') == '0'\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\n\nimport sys\nassert sys.version_info >= (3, 8)\n\nfrom typing import Tuple\nimport os\nimport collections\n\nassert collections.namedtuple('testcase', ['inp', 'out'])\n\nTestCase = collections.namedtuple('TestCase', ['inp', 'out'])\ntestcases = [TestCase(inp='5 5\\n3 1 2 1 1', out='4'), TestCase(inp='7 5\\n1 5 4 3 2 1 1', out='3')]"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\\n\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\\n\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\\n15\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\nSSPPR\\n1\\nSSPPR') == '5\\n10'\nassert solution('5\\nSSPPR\\n2\\nPPRRS\\nRRSSP') == '10\\n15'\nprint('The local tests are done. Click on \"Check\" for more details.')"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"SSPPR\") == \"5\"\nassert solution(\"SSPPR\") == \"10\"\nassert solution(\"SSPPR\") == \"10\"\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('SSPPR') == '5\\n10'\nassert solution('RPSSP') == '10\\n15'\n\n\"\"\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('S') == '1'\nassert solution('P') == '2'\nassert solution('R') == '3'\nassert solution('RS') == '5'\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\\n\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\\n\"\n\nprint('Hooray!')\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"SSPPR\") == \"5\"\nassert solution(\"SSPPR\", \"2\") == \"10\"\n\nassert solution(\"SSPPR\", \"1\") == \"5\"\nassert solution(\"SSPPR\", \"2\") == \"10\"\n\nassert solution(\"SSPPR\", \"3\") == \"15\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == (\"5\\n10\")\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == (\"10\\n15\")\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'5\\nSSPPR\\n1\\nSSPPR'\n) == '5\\n10'\nassert solution(\n'5\\nSSPPR\\n2\\nPPRRS\\nRRSSP'\n) == '10\\n15'\n\n\"\"\"\n\n\nimport collections\nfrom typing import Dict, List\n\n\nclass Solution:\n    def __init__(self):\n        self.play_options = {'S': 'R', 'P': 'S', 'R': 'P'}\n\n    def solve(self, R: int, S: str, N: int, P: str) -> str:\n        self.R = R\n        self.S = S\n        self.N = N\n        self.P = P\n        pass\n\n    def play(self, round_nr: int) -> Dict:\n        pass\n\n    def score(self, round_nr: int) -> int:\n        pass\n\n    def solve_and_score(self) -> Dict:\n        pass\n\n    def solve_and_score_for_all(self) -> List[int]:\n        pass\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n7\\n11\\n\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\"\n\nprint(solution(\"2\\n7\\n11\\n\"))\nprint(solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\"))\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n11\\n2\\n5\\n9\\n10\\n17\") == \"4\"\n\"\"\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n7\\n11') == '4'\nassert solution('5\\n2\\n5\\n9\\n10\\n17') =='still running'\n\n\"\"\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n7\\n11') =='still running'\nassert solution('5\\n2\\n5\\n9\\n10\\n17') =='still running'\n\"\"\"\n\nfrom typing import Iterator\nimport sys\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n7\\n11\\n\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\"\n\"\"\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n7\\n11') == '4'\nassert solution('5\\n2\\n5\\n9\\n10') =='still running'\n\"\"\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n7\\n11\\n\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\"\nassert solution(\"5\\n9\\n10\\n17\\n\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n7\\n11\") == \"4\"\n\"\"\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n7\\n11\\n2\\n5\\n9\\n10') =='still running'\nassert solution('5\\n2\\n5\\n9\\n10') == '4'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n6 1 3 2 2 3') == '0.6'\nassert solution('6\\n1 2 2 2 2 2') == 'impossible'\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2 2\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\n\n\"\"\"\n\nimport sys\nimport math\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2 2\") == \"impossible\"\n\n\"\"\"\n\n\nfrom collections import namedtuple, deque\nimport math\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\nassert solution('2\\n2 2') == 'impossible'\n\n\"\"\""
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == solutionA\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n6 1 3 2 2 3\") == '0.6'\nassert solution(\"2\\n2 2\") == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2 2\") == \"impossible\"\nassert solution(\"2 1\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\nassert solution('2\\n2 2') == 'impossible'\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\nassert solution('1 8 1 8\\n1 10 2 5') == 'Tie'\n\nprint(solution(stdin))\n\nsolution()\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"\n\n\"\"\"\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"\n\"\"\"\n\n\"\"\"\nI looked up the solution for this problem on the internet. The solution is provided in the following link.\n\nhttps://www.hackerearth.com/practice/notes/beautiful-math-and-codes/algorithms/maximum-pairwise-difference/practice-problem-maximum-pairwise-difference-1/description/\n\nThe above solution is exactly what I wrote below. It is a really simple solution.\n\n\"\"\"\n\na, b, c, d = map(int, input().split())\ns = set()\nfor i in range(a, b + 1):\n    for j in range(c, d + 1):\n        s.add(i - j)\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1 4 1 4\n1 6 1 6''') == \"Emma\"\nassert solution('''1 8 1 8\n1 10 2 5''') == \"Tie\"\nassert solution('''1 8 1 8\n1 10 1 10''') == \"Gunnar\"\nassert solution('''1 4 1 4\n1 6 1 6''') == \"Gunnar\"\nassert solution('''1 8 1 8\n1 10 1 10''') == \"Tie\"\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\""
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\nassert solution('1 8 1 8\\n1 10 2 5') == 'Tie'\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'Tie'\nassert solution('1 4 1 4') == 'Emma'\nassert solution('1 8 1 8') == 'Tie'\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == expected_result\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\nassert solution('1 8 1 8\\n1 10 2 5') == 'Tie'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == \"something is fishy\"\nassert solution('1 2 3 mumble mumble 7 mumble 8') == \"something is fishy\"\nassert solution('1 2 3 mumble 5') == \"makes sense\"\n'''\n\nimport unittest\nimport sys\n\nclass SolutionTest(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def testComplex(self):\n        self.assertEqual(self.solution.solution('1 2 3 mumble mumble 7 mumble 8'), \"something is fishy\")\n\n    def testComplex(self):\n        self.assertEqual(self.solution.solution('1 2 3 mumble 5'), \"makes sense\")\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        stdin = stdin.split('\\n')\n        num = int(stdin[0])\n        if num == 1:\n            return'makes sense'\n        l = stdin[1:]\n        for i in range(len(l)):\n            if'mumble' in l[i]:\n                l[i] = l[i].replace('mumble', '')\n        if len(l) == 1:\n            return'something is fishy'\n        l = [int(i) for i in l]\n        total = 0\n        for i in range(len(l)):\n            total += l[i]\n            l[i] = total\n        if l[0] == l[len(l) - 1]:\n            return'makes sense'\n        return'something is fishy'\n\n\nclass SolutionTest(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def testComplex(self):\n        self."
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1 2 3 mumble 5') =='makes sense'\nassert solution('8 1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\n\n\"\"\"\n\nn = int(stdin.readline())\nword = stdin.readline().strip().split()\n\nanswer ='makes sense' if len(set(map(int, word))) == n and len(set(map(lambda x: x!='mumble', word))) == n else'something is fishy'\n\nprint(answer)\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\nSample Input 3:\n4\n1 2 3 mumble\nSample Output 3:\nmakes sense\n\nSample Input 4:\n2\n1 2 mumble\nSample Output 4:\nsomething is fishy\n\nSample Input 5:\n5\nmumble mumble mumble mumble\nSample Output 5:\nsomething is fishy\n\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"5\\n1 2 3 mumble 5\"\n) =='makes sense'\n\nassert solution(\n\"8\\n1 2 3 mumble mumble 7 mumble 8\"\n) =='something is fishy'\n\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8 1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\nassert solution(\"8 1 2 3 mumble mumble mumble mumble 8\") == \"something is fishy\"\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n1 2 3 mumble 5\n''') =='makes sense'\nassert solution('''8\n1 2 3 mumble mumble 7 mumble 8\n''') =='something is fishy'\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 4') =='makes sense'\nassert solution('5\\n1 2 3 4 mumble') =='something is fishy'\nassert solution('9\\n1 2 3 4 mumble mumble 7 mumble 8') =='something is fishy'\n\nimport itertools, re\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 9 25 49 81\") == \"2 121\"\nassert solution(\"5 3 6 9 12 15\") == \"1 18\"\n\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1\\n'\nassert solution('1 2\\n') == '1 2\\n'\nassert solution('2\\n') == '1\\n2\\n'\nassert solution('1 2 3\\n') == '1 3\\n2\\n3\\n'\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 9 25 49 81') == '2 121'\nprint(solution(stdin))\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 6 9 12 15\\n4 9 25 49 81\\n\") == \"1 18\\n2 121\"\nprint(solution(stdin_lines))\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 6 9 12 15\") == '1 18'\nassert solution(\"4 9 25 49 81\") == '2 121'\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 3 6 9 12 15''') == '1 18'\nassert solution('''4 9 25 49 81''') == '2 121'\n\"\"\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n\"\"\"\nimport sys\nfrom math import ceil"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n\"\"\""
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 6 9 12 15\") == '1 18'\nassert solution(\"3 3 6 9 12 15\") == '0'\nassert solution(\"5 3 6 9 12 15\") == '1 18'\n\"\"\""
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(solution_io_boundary) == solution_reference"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\\n\") == \"CORRECT\"\nassert solution(\"4\\n0 3\\n2 1\\n3 0\\n\") == \"INCORRECT\"\nassert solution(\"4\\n0 3\\n2 1\\n3 0\\n\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\\n\") == \"CORRECT\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n') == 'CORRECT'\nassert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n') == 'CORRECT'\nassert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n') == 'CORRECT'\n\n-----Problem-----\nThe \u201ceight queens puzzle\u201d is a classic puzzle where you have to place eight queens on a chess board in such a way that no queen can attack another queen. Remember that, in chess, queens can move in any direction (horizontal, vertical, and diagonal), which means the eight queens would have to be laid out in such a way that no two queens are on the same row, column, or diagonal.\n\nThis puzzle actually has multiple solutions. The following is one possible solution:\n\nFinding the solutions to the \u201ceight queens puzzle\u201d is actually an interesting computational problem. However, that\u2019s not the problem you will be solving here. Instead, you will be solving a much simpler problem: given a proposed solution to the puzzle, you must verify whether it is a valid solution (i.e., whether no queen can attack another queen).\n\nWhen referring to specific squares on the board, we will assume that the bottom-left square is the $(0,0)$ square, and that the $x$ coordinate increases as you move right, and the $y$ coordinate increases as you move up.\n\nIn other words, something like this:\n\nFurthermore, we will consider the more general \u201c$N$-queens puzzle\u201d, where the chessboard can have $N\\times N$ squares, and there will be $N$ queens on the board. For example, this would be a correct solution to the 4-queens puzzle:\n\nAnd this would be an incorrect solution to the 4-queens puzzle:\n\nNotice how the queen in (2,2) can attack the queen in (0,2) and the queen in (2,3).\n\n-----Input-----\nThe input begins with a line containing a single integer: the value of $N$ ($0 < N \\le 5000$). This is followed by $N$ lines, each containing the position of a queen as two integers: $x$ and $y$ (separated by a single space), where $0 \\le x, y < N$.\n\n-----Output-----\nThe output contains either CORRECT if the positions of the queens is a solution to the $N$-queens puzzle, and INCORRECT otherwise.\n\nNote that the sample data presented below corresponds to the three boards shows earlier.\n\n-----Examples-----\nSample Input 1:\n8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4\nSample Output 1:\nCORRECT\n\nSample Input 2:\n4\n2 3\n1 0\n0 2\n3 1\nSample Output 2:\nINCORRECT\n\n-----Problem-----\nThe \u201ceight queens puzzle\u201d is a classic puzzle where you have to place eight queens on a chess board in such a way that no queen can attack another queen. Remember that, in chess, queens can move in any direction (horizontal, vertical, and diagonal), which means the eight queens would have to be laid out in such a way that no two queens are on the same row, column, or diagonal.\n\nThis puzzle actually has multiple solutions. The following is one possible solution:\n\nFinding the solutions to the \u201ceight queens puzzle\u201d is actually an interesting computational problem. However, that\u2019s not the problem you will be solving here. Instead, you will be solving a much simpler problem: given a proposed solution to the puzzle, you must verify whether it is a valid solution (i.e., whether no queen can attack another queen).\n\nWhen referring to specific squares on the board, we will assume that the bottom-left square is the $(0,0)$ square, and that the $x$ coordinate increases as you move right, and the $y$ coordinate increases as you move up.\n\nIn other words, something like this:\n\nFurthermore, we will consider the more general \u201c$N$-queens puzzle\u201d, where the chessboard can have $N\\times N$ squares, and there will be $N$ queens on the board. For example, this would be a correct solution to the 4-queens puzzle:\n\nAnd this would be an incorrect solution to the 4-queens puzzle:\n\nNotice how the queen in (2,2) can attack the queen in (0,2) and the queen in (2,3).\n\n-----Input-----\nThe input begins with a line containing a single integer: the value of $N$ ($0 < N \\le 5000$). This is followed by $N$ lines, each containing the position of a queen as two integers: $x$ and $y$ (separated by a single space), where $0 \\le x, y < N$.\n\n-----Output-----\nThe output contains either CORRECT if the positions of the queens is a solution to the $N$-queens puzzle, and INCORRECT otherwise.\n\nNote that the sample data presented below corresponds to the three boards shows earlier.\n\n-----Examples-----\nSample Input 1:\n8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4\nSample Output 1:\nCORRECT\n\nSample Input 2:\n4\n2 3\n1 0\n0 2\n3 1\nSample Output 2:\nINCORRECT\n\n-----Problem-----\nThe \u201ceight queens puzzle\u201d is a classic puzzle where you have to place eight queens on a chess board in such a way that no queen can attack another queen. Remember that, in chess, queens can move in any direction (horizontal, vertical, and diagonal), which means the eight queens would have to be laid out in such a way that no two queens are on the same row, column, or diagonal.\n\nThis puzzle actually has multiple solutions. The following is one possible solution:\n\nFinding the solutions to the \u201ceight queens puzzle\u201d is actually an interesting computational problem. However, that\u2019s not the problem you will be solving here. Instead, you will be solving a much simpler problem: given a proposed solution to the puzzle, you must verify whether it is a valid solution (i.e., whether no queen can attack another queen)."
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\nassert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\n\n'''"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n\") == \"CORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n\") == \"CORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n\") == \"CORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n\") == \"CORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n\") == \"CORRECT\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n5\n3 2\n4 1\n2 0\n1 4\n7 4\n''') == 'CORRECT'\n\nassert solution('''\n6\n4 5\n3 2\n5 0\n2 4\n0 6\n1 3\n''') == 'INCORRECT'\n\nassert solution('''\n7\n5 3\n4 0\n2 4\n0 6\n1 1\n6 2\n3 3\n''') == 'CORRECT'\n\nassert solution('''\n8\n2 2\n3 0\n0 6\n4 2\n3 3\n6 4\n1 2\n5 0\n''') == 'CORRECT'\n\nassert solution('''\n3\n3 1\n3 1\n2 0\n2 0\n2 1\n''') == 'INCORRECT'"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\\n\") == \"CORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n\") == \"CORRECT\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\n\"\"\"\n\nimport sys\nfrom itertools import permutations"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\n\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == '1 1 1'\n\"\"\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n0 1 1\\n1 0 1\\n1 1 0') == '1 1 1'"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n0 1 1\\n1 0 1\\n1 1 0') == '1 1 1'\n\nassert solution('5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0') == '1 2 3 1 11'\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n0 1 1\n1 0 1\n1 1 0''') == '1 1 1'\nassert solution('''5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0''') == '1 2 3 1 11'\n\n----------------------"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\n\"\"\"\n\n\"\"\"\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435 \u0432 \u0432\u0438\u0434\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b. \n\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u0430\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \n\u0438 \u0440\u0435\u0437\u0430\u043d\u043d\u044b\u0445 \u043b\u0438\u043d\u0438\u0439 \u043d\u0430 \u0432\u0441\u0435\u043c \u044d\u0442\u043e\u043c \u043f\u043e\u043b\u0435. \n\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043b\u0438\u043d\u0438\u0439 \u0438 \u0447\u0438\u0441\u043b\u0435 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d.\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 \u0440\u0430\u0441\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0446\u0438\u0444\u0440\u044b \u0438 \u0440\u0435\u0437\u0430\u043d\u043d\u044b\u0435 \u043b\u0438\u043d\u0438\u0438.\n\u0417\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\u0412\u0432\u043e\u0434:                                     \u0412\u044b\u0432\u043e\u0434:\n3\n0 0 1 1 1\n1 0 1 0 2\n1 1 0 1 3\n\"\"\"\n\nimport copy\n\nn = int(input())\nmatrix = []\nfor _ in range(n):\n    line = [int(i) for i in input().split()]\n    matrix.append(line)\n\nfor line in matrix:\n    print(*line)\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n0 1 1\\n1 0 1\\n1 1 0') == '1 1 1'\nassert solution('5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0') == '1 2 3 1 11'\n\"\"\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\nprint(\"Success\")\n\n************************************************************************"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n0 1 1\n1 0 1\n1 1 0''') == '1 1 1'\n\nassert solution('''5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0''') == '1 2 3 1 11'\n\nassert solution('''5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0''') == '1 2 3 1 11'\n\nprint(\"The code run successfully\")"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"9 9\") == \"Tuesday\"\nassert solution(\"11 11\") == \"Sunday\"\nassert solution(\"20 9\") == \"Tuesday\"\nassert solution(\"30 1\") == \"Saturday\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('31 1') == 'Saturday'\nassert solution('29 2') == 'Sunday'\nassert solution('29 2') == 'Sunday'\nassert solution('9 2') == 'Sunday'\n\n-----Explanation-----\nThe day of the week for $D$ of $M$ is calculated by adding $DM$ to the day of the week of $2008$ (Sunday).\n\n$D$ is the first day of the year that is not a Saturday, so $DM$ is $0$, or $1$, because $2008$ is a Saturday.\n\n$M$ is the first month of $2008$, so $DM$ is $0$, or $1$, because $2008$ is a January.\n\n----\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"15 1\") == \"Saturday\"\n\"\"\"\n\nimport datetime\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''6 1''') == 'Sunday'\nassert solution('''9 1''') == 'Sunday'\nassert solution('''10 1''') == 'Monday'\nassert solution('''14 2''') == 'Tuesday'\nassert solution('''28 3''') == 'Wednesday'\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1\") == \"Friday\"\n\n\"\"\""
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('15 1') == 'Saturday'\n\n\"\"\"\n\nimport unittest\nimport datetime"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(datetime.date(2009, 1, 1)) == \"Thursday\"\n\"\"\"\n\n\n\"\"\"\nGiven a year, determine whether it is a leap year. If it is a leap year, return the Boolean True, otherwise return False.\n\nNote that the code stub provided reads from STDIN and passes arguments to the is_leap function. It is only necessary to complete the is_leap function.\n\nInput Format:\nRead one year, year, and convert it to an integer.\n\nConstraints:\n1900<= year <= 10**5\n\nOutput Format:\nThe function must return a Boolean value (True/False). Output is handled by the provided code stub.\n\nSample Input 0:\n2019\nSample Output 0:\nFalse\n\nSample Input 1:\n1900\nSample Output 1:\nFalse\n\nSample Input 2:\n2000\nSample Output 2:\nTrue\n\"\"\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1, 1) == 'Thursday'\nassert solution(17, 1) == 'Saturday'\nassert solution(17, 12) == 'Sunday'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"16 1\") == \"Saturday\"\n\"\"\"\n\nimport sys\nimport datetime"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '4'\nassert solution('10') == '20'\nassert solution('0') == '0'\nassert solution('100') == '200'\nassert solution('101') == '201'\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\nassert solution('100\\n500\\n12\\n') == '129\\n480'\n\nprint(solution([int(i) for i in input().split('\\n')]))\n\n\"\"\"\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\nprint(\"Test pass.\")\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\n\n'''\n\nfrom collections import namedtuple\n\nnums = namedtuple('nums', 'l d x')\n\nnums_params = nums(int(stdin.readline()), int(stdin.readline()), int(stdin.readline()))"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n100\\n4') == '4\\n40'\n\"\"\""
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\n\n\"\"\""
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\n\"\"\""
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\nprint(\"Test 1 OK\")\n\nassert solution(\"1\\n100\\n12\\n\") == \"129\\n480\"\nprint(\"Test 2 OK\")\n\nassert solution(\"1\\n100\\n16\\n\") == \"129\\n480\"\nprint(\"Test 3 OK\")\n\nassert solution(\"1\\n100\\n23\\n\") == \"129\\n480\"\nprint(\"Test 4 OK\")\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n100\\n4') == '4\\n40'\nprint('Test pass.')\n\n-----\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n1 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\n\"\"\"\nimport math\n\nx_1, y_1 = map(int, input().split())\nx_2, y_2 = map(int, input().split())\nx_3, y_3 = map(int, input().split())"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\n\nprint(\"Success\")"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4') == '4.0\\n3'\nassert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4') == '6.0\\n3'\n\"\"\"\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == '4.0\\n3'\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\\n\") == '6.0\\n3'\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\\n\") == '6.0\\n3'\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\\n\") == '6.0\\n3'\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\\n\") == '6.0\\n3'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == '4.0\\n3'\n\n\"\"\"\n\nfrom typing import List, Tuple\n\nVERTICES: List[Tuple[int]] = list()\nNUMBER_APPLES: int = int()\nTREES: List[Tuple[int]] = list()\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"6.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"6.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"6.0\\n3\"\n\n------\n\nimport math"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4') == '4.0\\n3'\nassert solution('3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3') == '6.0\\n3'\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == '6.0\\n3'\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == '6.0\\n3'\n\nimport math\n\nn = int(stdin)"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\") == '4.0\\n3'\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == '6.0\\n3'\n\"\"\"\n\nimport math\n\nnums = list(map(int, input().split()))\nprint(math.sqrt(abs(nums[0]*nums[2] + nums[1]*nums[3])))\nprint(nums.count(max(nums)) if nums[0] + nums[1] > nums[2] + nums[3] else nums.count(min(nums)))\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\") == \"4.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\n\"\"\""
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == 2\nassert solution(\"30\") == 7\n\"\"\"\n\nimport math\n\nn = int(stdin.readline().strip())\n\nm = int(math.floor(math.sqrt(n * 2)))\n\nwhile m * (m + 1) // 2 < n:\n    m += 1\n\nprint(m)\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n\"\"\""
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\"\"\""
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('7') == '7'\nassert solution('3') == '2'\nassert solution('11') == '7'\nassert solution('7') == '2'"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n\"\"\""
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\nassert solution(\"9\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n\n-----Tests-----\n>>> solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\")\n'1'\n>>> solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\")\n'HE GOT AWAY!'\n\"\"\""
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1 2 4\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n\"\"\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\\n\") == \"1\\n\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\\n\") == \"HE GOT AWAY!\\n\"\nassert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\\n\")!= \"1\\n\"\nassert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\\n\")!= \"0\\n\"\n\n### Notes\n\n\"\"\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"N-FBI1\") == \"1\"\nassert solution(\"N321-CIA\") == \"HE GOT AWAY!\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1') == '1\\n'\n\nassert solution('N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1') == 'HE GOT AWAY!\\n'\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == '1 2 3 4'\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == 'HE GOT AWAY!'\n\n\"\"\"\n\nimport re\n\nregex = re.compile(r'[^0-9-]')"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\\n') == '1\\n2\\n3\\n4\\n'\nassert solution('N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\\n') == 'HE GOT AWAY!\\n'\n\nassert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\\n') == '1\\n2\\n3\\n4\\n'\nassert solution('N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\\n') == 'HE GOT AWAY!\\n'\n\nassert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\\n') == '1\\n2\\n3\\n4\\n'\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n\"\"\""
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\\n\") == '1\\n'\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\\n\") == 'HE GOT AWAY!'\n\"\"\"\nfrom enum import Enum\n\nclass Operation(Enum):\n    INSERT = 1\n    DELETE = 2\n    SHIFT_RIGHT = 3\n    SHIFT_LEFT = 4\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\nHE GOT AWAY!\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n3 3 3\\n4 5 4\\n') == '6.843530573929037'\nassert solution('2\\n3 3 3\\n4 4 5\\n') == '8.0'\nassert solution('0\\n5\\n10\\n') == '10.0'\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n3 3 3\\n4 5 4\") == '6.843530573929037'\n\"\"\""
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 3\\n4 5 4\") == \"8.0\"\nassert solution(\"3 3 3\\n4 4 5\") == \"6.843530573929037\"\nassert solution(\"1 1 1\\n2 2 2\") == \"1.4142135623730951\"\nassert solution(\"1 1 1\\n2 3 3\") == \"1.7320508075688772\"\nassert solution(\"1 1 1\\n2 3 4\") == \"1.7320508075688772\"\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 5\") == \"8.0\"\nassert solution(\"3 3 3\") == \"6.843530573929037\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"2\n3 3 3\n4 5 4\"\"\") == \"6.843530573929037\"\nprint(\"Test 1 Passed\")\n\nassert solution(\"\"\"2\n3 3 3\n4 5 6\"\"\") == \"10.326666538292415\"\nprint(\"Test 2 Passed\")\n\nassert solution(\"\"\"2\n3 3 3\n1 1 1\"\"\") == \"4.47213595499958\"\nprint(\"Test 3 Passed\")\n\nassert solution(\"\"\"3\n3 3 3\n1 1 1\n2 2 2\"\"\") == \"3.8284271247461903\"\nprint(\"Test 4 Passed\")\n\nassert solution(\"\"\"1\n1 1 1\n1 1 1\"\"\") == \"1.414214003317811\"\nprint(\"Test 5 Passed\")"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 4 5') == '11.5'\nassert solution('3\\n1 2 3') == '4.0'\nassert solution('2\\n1 2 3') == '4.0'\n\nimport math\nimport random"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 3\\n4 5 4') == '8.0'\n\"\"\"\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3 3 3\\n4 5 4\") == \"8.0\"\n\"\"\"\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n3 3 3\\n4 5 4') == '8.0'\nassert solution('2\\n3 3 3\\n4 4 5') == '6.843530573929037'"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 3\\n4 5 4\\n') == '6.843530573929037'\n\n\"\"\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\nassert solution('10') == '1'\nassert solution('100') == '90'\nassert solution('19') == '21'\n\nprint('all tests passed.')"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\nassert solution('1') == '1'\nassert solution('999') == '999'\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\n\"\"\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(24) == \"27\"\nassert solution(25) == \"27\"\n\"\"\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\nassert solution(\"10\") == \"1\"\nassert solution(\"1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('24') == '24'\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(24) == 24\nassert solution(25) == 27\n\n\"\"\"\n\nfrom typing import List\nimport math\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(24) == 24\nassert solution(25) == 27\n\"\"\"\n\n\"\"\"\nEuler Problem 8: Find the largest palindromic number of 2 or more digits.\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1+9+8+4') == 7\nassert solution('1+9+8+4+1+9+8+4') == 188\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1+9+8+4') == '7'\n\nassert solution('1+9+8+4') == '7'\n\nassert solution('1+9+8+4') == '7'\n\nassert solution('1+9+8+4') == '7'\n\nassert solution('1+9+8+4') == '7'"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1+9+8+4') == 7\n\"\"\""
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4+3\") == \"7\"\nassert solution(\"1+9+8+4+3+2+1+9+8+4+3\") == \"7\"\nassert solution(\"1+9+8+4+3+2+1+9+8+4+3+2+1+9+8+4+3\") == \"7\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4+1+9+8+4') == '188'\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\nassert solution(\"1+9+8+4\") == \"7\"\n\nprint(\"Successfully passed!\")\n\n\"\"\"\n\nfrom typing import Set"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\n\"\"\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 5 2\\n') == '2 5'\nassert solution('2 2 -4 5\\n') == '5 -2 4'\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 5 2') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'\n\n\"\"\""
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 5 2\\n') == '2 5'\nassert solution('2 2 -4 5\\n') == '5 -2 4'\n\nimport sys"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 5 2\\n') == '2 5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 5 2') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'\n\"\"\""
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5 2\\n\") == \"2 5\"\n\"\"\""
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 4\") == \"5 -2 4\"\nassert solution(\"1 4 -5\") == \"3 1\"\nassert solution(\"2 3\") == \"5 -2 4\"\nassert solution(\"1 1\") == \"2 1\"\nassert solution(\"3 2 -4 5\") == \"5 -2 4\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '1 5 2\\n') == '2 5'\nassert solution(\n    '1 5 2\\n') == '2 5'\nassert solution(\n    '2 2 -4 5\\n') == '5 -2 4'\nassert solution(\n    '3 6 2 5 -2\\n') == '6 6 -1 -1'\nassert solution(\n    '3 6 2 5 -2\\n') == '6 6 -1 -1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5 2\\n') == '2 5'\nassert solution('2 2 -4 5\\n') == '5 -2 4'\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\\n2 3 4\") == \"3 4 6\"\nassert solution(\"1 2 3\\n2 3 4\\n3 4 5\\n3 5 6\\n4 5 6\\n4 6 7\") == \"6 -2 4\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\nprint(\"Well done!\")\n\nsolution(stdin)\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n2 1 2 1 2') == '2 2 2 1 1'\n\"\"\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 2\n2 1 2 1 2''') == '''2 2 2 1 1\n'''\n\nassert solution('''9 3\n1 3 3 3 2 2 2 1 1''') == '''1 1 1 3 3 3 2 2 2\n'''\n\nassert solution('''6 10\n3 4 6 1 2 5 4''') == '''1 1 2 3 4 5\n'''\n\nassert solution('''5 2\n3 4 2 2 1''') == '''2 1 2 3 4\n'''\n\nassert solution('''5 2\n2 2 2 2 1''') == '''2 1 2 2 2\n'''"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\nprint(\"Successfully passed all tests.\")\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\n\"\"\""
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\n\"\"\"\nimport sys\n\nN, C = map(int, sys.stdin.readline().strip().split())\nS = [int(i) for i in sys.stdin.readline().strip().split()]\nS.sort(reverse=True)\n\ncnt = [0] * C\nfor i in S:\n    cnt[i - 1] += 1\n\nfor i in range(C):\n    while cnt[i] > 0:\n        print(i + 1, end=\" \")\n        cnt[i] -= 1\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n2 1 2 1 2\\n') == '2 2 2 1 1'\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\n\"\"\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == b\n\"\"\"\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"38 24\") == \"875\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"38 24\") == \"875\"\nassert solution(\"1 100\") == \"100\""
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"38 24\") == \"875\"\nassert solution(\"1 100\") == \"100\"\nprint('All tests passed.')\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 100') == '100'\nassert solution('2 100') == '200'\nassert solution('3 100') == '300'\nassert solution('4 100') == '400'\nassert solution('5 100') == '500'\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 12\") == \"5\"\nprint(\"Test 1 OK\")\n\"\"\""
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''38 24''') == '875'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\n_a, _i = map(int, stdin.readline().split())\n\nprint(int((_i * (_i + 1)) / 2))\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('38 24') == '875'\nassert solution('1 100') == '100'\n\"\"\"\n\nfrom math import ceil\n\na, i = map(int, input().split())\n\nprint(ceil(a / i))\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('38 24') == '875'\nassert solution('1 100') == '100'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('2 100') == '100'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\nprint(\"PASSED\")\n\"\"\""
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n\"\"\"\nimport sys"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n\"\"\"\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\nprint(\"Successfully solved!\")\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\nassert solution('900 734') == '300'"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"734 893\") == \"437\"\n\nassert solution(\"221 231\") == \"132\"\n\nassert solution(\"1234 123\") == \"1234\"\n\nassert solution(\"912 921\") == \"921\"\n\nassert solution(\"12 21\") == \"21\""
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '734 893'\n) == '437'\n\nassert solution(\n    '221 231'\n) == '132'\nprint('tests passed...')\n\n\"\"\"\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\nassert solution('123 101') == '201'\n\"\"\"\n\nnums = input().split()\n\nnums.reverse()\n\nprint(''.join(nums))\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11 131') == 'programming'\n\"\"\""
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\"\"\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 131') == 'programming', 'Incorrect output'\nassert solution('7 96') == 'contest', 'Incorrect output'\n\"\"\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\"\"\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n'''\n\nl, w = [int(i) for i in input().split()]\n\na = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''11 131''') == '''programming'''\nassert solution('''7 96''') in ['''contest''', '''coding''']\n\nassert solution('''10 96''') == '''impossible'''\nassert solution('''8 96''') == '''coding'''\nassert solution('''4 96''') == '''contest'''\n'''\nYou are given two strings s and t of the same length. You want to change s to t. Changing the i-th character of s to i-th character of t costs |s[i] - t[i]| that is, the absolute difference between the ASCII values of the characters.\n\nYou are also given an integer maxCost.\n\nReturn the maximum length of a substring of s that can be changed to be the same as the corresponding substring of twith a cost less than or equal to maxCost.\n\nIf there is no substring from s that can be changed to its corresponding substring from t, return 0.\n\n\n\nExample 1:\n\nInput: s = \"abcd\", t = \"bcdf\", maxCost = 3\nOutput: 3\nExplanation: \"abc\" of s can change to \"bcd\". That costs 3, so the maximum length is 3.\nExample 2:\n\nInput: s = \"abcd\", t = \"cdef\", maxCost = 3\nOutput: 1\nExplanation: Each character in s costs 2 to change to charactor in t, so the maximum length is 1.\nExample 3:\n\nInput: s = \"abcd\", t = \"acde\", maxCost = 0\nOutput: 1\nExplanation: You can't make any change, so the maximum length is 1.\n\n\nConstraints:\n\n1 <= s.length, t.length <= 10^5\n0 <= maxCost <= 10^6\ns and t only contain lowercase English letters.\n\n'''"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 131\") == \"programming\"\n\n\"\"\"\n\n\nimport itertools\nimport string"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\nassert solution(\"0 0\") == \"impossible\"\nassert solution(\"4 200\") == \"impossible\"\nassert solution(\"5 20\") == \"impossible\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n\"\"\"\n\nimport os\nimport time"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 2 'X'\nX^\n--\n\n.X\n--''') == '''\n.^\n--\n\n.X\n--'''\nassert solution('''3 12 'A'\nABABABABABAC\nBABABABABABB\nABABABABABAB\n\nBABABABABABA\nBBABABABABAB\nBABABABABABA\n''') == '''\nBBABABABABAC\nBBBABABABABA\nBBABABABABAB\n'''\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\"\"\"\nimport sys"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 \\'X\\nX^\\n--\\n\\n.X\\n--\\n') == '.^\\n--\\n\\n'\nassert solution('3 12 \\'A\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n') == 'BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n'\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'2 2 X\\n'\n'X^\\n'\n'--\\n'\n'\\n'\n'X\\n'\n'--\\n'\n) == '\\n'\n\nassert solution(\n'3 12 A\\n'\n'ABABABABABAC\\n'\n'BABABABABABB\\n'\n'ABABABABABAB\\n'\n) == '\\n'\n\nassert solution(\n'3 12 A\\n'\n'ABABABABABAC\\n'\n'BABABABABABB\\n'\n'ABABABABABAB\\n'\n) == '\\n'\n\"\"\"\n\n\nimport re\n\nimport click\nfrom more_itertools import consume\n\nSAMPLE_INPUT_1 = r\"\"\"2 2 X\nX^\n--\n\n.X\n--\n\"\"\"\n\nSAMPLE_OUTPUT_1 = \"\"\"\\\n.^\n--\n\"\"\"\n\nSAMPLE_INPUT_2 = r\"\"\"3 12 A\nABABABABABAC\nBABABABABABB\nABABABABABAB\n\nBABABABABABA\nBBABABABABAB\nBABABABABABA\n\"\"\"\n\nSAMPLE_OUTPUT_2 = \"\"\"\\\nBBABABABABAC\nBBBABABABABA\nBBABABABABAB\n\"\"\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\">++++>++++++++++>+++++++>++++>++++>++++>++++>++++>++++>++++>++++>++++>++++>++++>++++>++++>++++>\") == \"><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<><<"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 'X'\") == \".X\"\nassert solution(\"3 12 'A'\") == \"ABAC\"\nassert solution(\"2 2 'X'\") == \".X\"\nassert solution(\"3 12 'A'\") == \"ABAC\"\n\n\"\"\""
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '2 2 \\'X\\'\\n'\n    '.X\\n'\n    '--\\n'\n) == '.X\\n'\nassert solution(\n    '3 12 \\'A\\'\\n'\n    'ABABABABABAC\\n'\n    'BABABABABABB\\n'\n    'ABABABABABAB\\n'\n) == 'BBABABABABAC\\n' 'BBBBABABABAB\\n' 'BBABABABABAB\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 2 'X'\nX^\n--\n\n.X\n--\n''') == '''.^\n--\n\n.X\n--\n'''\nassert solution('''3 12 'A'\nABABABABABAC\nBABABABABABB\nABABABABABAB\n\nBABABABABABA\nBBABABABABAB\nBABABABABABA\n''') == '''BBABABABABAC\nBBBABABABABA\nBBABABABABAB\n'''\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nHi, here's your problem today. This problem was recently asked by AirBNB:\n\nGiven a list of possibly overlapping intervals, return a new list of intervals where all overlapping intervals have been merged.\n\nThe input list is not necessarily ordered in any way.\n\nFor example, given [(1, 3), (5, 8), (4, 10), (20, 25)], you should return [(1, 3), (4, 10), (20, 25)]."
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\"\nassert solution(\"100 80 60 240\") == \"0 0 4\"\nassert solution(\"2 2 2 2\") == \"impossible\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'2 4 4 14'\n) ==\n'1 0 3\\n'\n'1 1 2\\n'\n'1 2 1\\n'\n'1 3 0\\n'\n'3 0 2\\n'\n'3 1 1\\n'\n'3 2 0\\n'\n'5 0 1\\n'\n'5 1 0\\n'\n'7 0 0\\n'\n'Impossible'\n)\nassert solution(\n'100 80 60 240'\n) ==\n'0 0 4\\n'\n'0 3 0\\n'\n'1 1 1\\n'\n'1 2 0\\n'\n'1 3 0\\n'\n'3 0 2\\n'\n'3 1 1\\n'\n'3 2 0\\n'\n'5 0 1\\n'\n'5 1 0\\n'\n'7 0 0\\n'\n'Impossible'\n)\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 4 14\") == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\nprint(solution(\"2 4 4 14\"))\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 4 14\") == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\nassert solution(\"100 80 60 240\") == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n3 2 0\\n5 0 1\\n5 1 0\\n7 0 0'\nassert solution('100 100 100 100') == 'impossible'\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 4 14\") == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\n\"\"\"\nfrom typing import List\nfrom collections import defaultdict"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 4 4 14''') == '''1 0 3\n1 1 2\n1 2 1\n1 3 0\n3 0 2\n3 1 1\n5 0 1\n5 1 0\n7 0 0'''\nassert solution('''100 80 60 240''') == '''0 0 4\n0 3 0\n1 1 1\n'''\nassert solution('''50 50 50 50''') == '''impossible'''\nassert solution('''100 100 100 100''') == '''1 1 1 1\n'''\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\"\n\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n3 2 0\\n5 0 1\\n5 1 0\\n7 0 0\"\n\nassert solution(\"9 8 6 5\") == \"impossible\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''9\n2\n4\n5\n7\n8\n9\n10\n11\n13''') == 'good job'\n\nassert solution('''9\n2\n4\n5\n7\n8\n9\n10\n11\n13''') == '1\\n3\\n6\\n12'\n\n\"\"\"\n\nn = int(stdin.readline())\nnums = list(map(int, stdin.readline().strip().split()))"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13') == 'good job'\nassert solution('4\\n3\\n6\\n7\\n2\\n1\\n5') == '1\\n3\\n6'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"good job\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"1\\n3\\n6\"\n\n\"\"\""
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n\") == \"good job\"\n\nassert solution(\"1\\n2\\n3\\n4\\n\") == \"1\\n3\\n5\"\n\nassert solution(\"1\\n2\\n3\\n5\\n\") == \"4\\n6\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2\\n3\\n4\\n6\\n7\\n8\\n9\\n10\\n11') == 'good job'\nassert solution('5\\n2\\n3\\n4\\n6\\n7\\n8\\n9\\n10\\n11') == '1\\n3\\n6\\n12'\n\n-----Notes-----\nAssume that the child only counts in whole numbers.\n\"\"\""
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1\\n2\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n13\\n') == 'good job'\nassert solution('4\\n1\\n2\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n13\\n') == '1\\n3\\n6\\n12\\n'\n\nassert solution('4\\n1\\n2\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n13\\n') == 'good job'\nassert solution('4\\n1\\n2\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n13\\n') == '1\\n3\\n6\\n12\\n'\n\nassert solution('4\\n1\\n2\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n13\\n') == 'good job'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'good job'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9') == 'good job'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13') == '1\\n3\\n6\\n12\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100')\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300') == '1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2\\n1\") == \"good job\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"1\\n3\\n6\\n12\"\nassert solution(\"10\\n9\\n8\\n7\\n6\\n5\\n4\\n3\\n2\\n1\") == \"1\\n3\\n6\\n12\"\nassert solution(\"2\\n5\\n8\\n7\\n6\\n4\\n3\\n9\\n1\\n10\\n11\\n12\") == \"1\\n3\\n6\\n12\"\nassert solution(\"2\\n4\\n6\\n7\\n8\\n9\\n10\\n12\\n11\\n13\\n14\\n15\") == \"1\\n3\\n6\\n12\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2\\n3\\n2\\n1\\n4\\n2\\n6\\n2\\n') == '1\\n3\\n6\\n12'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"good job\"\nassert solution(\"2\\n4\\n6\\n7\\n8\\n10\") == \"2\\n3\\n5\\n7\\n9\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"./sample_input.txt\") == \"711.429805342813 7.43829096642643\"\nassert solution(\"./input.txt\") == \"72653.745536064 737.5743634691634\"\n\n\"\"\"\n\nfrom decimal import Decimal"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nimport math\n\nn, p, s, v = map(float, input().split())\n\none_over_10_to_the_9_power = 10 ** -9\none_over_10_to_the_9_power_s = 10 ** -6"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n    10 8.9 40075000 272.1\n    \"\"\"\n) == '157079.04857106 15.598261092309'\n\"\"\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == '157079.04857106 15.598261092309'\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"10 8.9 40075000 272.1\"\"\") == \"\"\"157079.04857106 15.598261092309\"\"\"\n\nassert solution(\n\"\"\"10 8.9 40075000 272.1\"\"\") == \"\"\"157079.04857106 15.598261092309\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\nimport math\nimport numpy as np\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nfrom math import log, sqrt, log10\nimport numpy as np\nimport re\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2) == 0\nassert solution(4) == 3\n\"\"\"\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == 4\nassert solution(\"9\") == 3\n\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\n\n-----Note-----\nThe solution is the same as the one in the second task of the previous section.\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\n\"\"\"\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '5'"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == 0\n\n\"\"\"\n\nn = int(stdin.readline())\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A\\nA\\nA\\nA\") == 3\n\nimport math\nassert solution(\"A\\nB\\nC\\nD\") == 1\n\nassert solution(\"A\\nA\\nA\\nA\") == 3\n\nassert solution(\"A\\nA\\nA\\nA\") == 3\n\nassert solution(\"A\\nA\\nB\\nB\") == 1"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\nA\nA\nA\nA''') == '3'\n\nassert solution('''2\nA\nA\n''') == '0'\n\nassert solution('''2\nA\nC\n''') == '0'\n\nassert solution('''2\nC\nA\n''') == '0'\n\nassert solution('''2\nB\nA\n''') == '1'"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == 3\nprint('Test pass.')\n\n-----Explanation of the second sample input-----\nFortunately for Hanh, all $4$ questions have $A$ as correct answer. So Hanh wrote $A$ on the first three lines, and left the $4$-th line empty. Hanh\u2019s final score is $3$.\n\n-----Sample Input-----\n4\nB\nA\nA\nA\nSample Output:\n1\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == '3'\nassert solution(\"4\\nA\\nB\\nC\\nD\") == '0'\nassert solution(\"4\\nA\\nA\\nA\\nA\") == '3'\nassert solution(\"4\\nC\\nB\\nC\\nD\") == '0'\nassert solution(\"4\\nB\\nA\\nC\\nD\") == '0'\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == 3\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == '3'\nassert solution('4\\nB\\nC\\nD\\nA') == '0'\nassert solution('4\\nC\\nC\\nD\\nA') == '2'\n\"\"\"\n\nfrom itertools import count\n\nn = int(input())"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('A') == ''\nassert solution('ABC') == ''\nassert solution('AAAA') == 'A'\nassert solution('ABCA') == 'A'\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == 3\nassert solution(\"4\\nB\\nC\\nD\\nA\") == 1\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == \"3\"\nassert solution(\"4\\nB\\nC\\nD\\nA\") == \"0\"\nassert solution(\"4\\nB\\nB\\nD\\nA\") == \"1\"\nassert solution(\"4\\nA\\nA\\nD\\nA\") == \"2\"\n\nassert solution(\"4\\nA\\nA\\nA\\nA\") == \"3\"\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == \"3\"\nassert solution(\"4\\nB\\nA\\nA\\nA\") == \"2\"\nassert solution(\"4\\nB\\nB\\nA\\nA\") == \"1\"\nassert solution(\"4\\nA\\nB\\nA\\nA\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\\n\"\nprint(solution(stdin))\n\n-----Notes-----\n\nSolution must be done in an efficient way.\n\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n3 3 1 2\n.x.\nx.x\n.x.\n    \"\"\"\n) == \"\"\"\n..xx..\nxx..xx\n..xx..\n    \"\"\"\n\nassert solution(\n    \"\"\"\n3 3 1 2\n.x.\nx.x\n.x.\n\"\"\"\n) == \"\"\"\n..xx..\nxx..xx\n..xx..\n\"\"\"\n\nassert solution(\n    \"\"\"\n3 3 1 2\n.x.\nx.x\n.x.\n\"\"\"\n) == \"\"\"\n..xx..\nxx..xx\n..xx..\n\"\"\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 1 2\\n.x.\\nx.x\\n.x.') == '..xx..\\nxx..xx\\n..xx..'\n\n[+]Temporal marker           : Sun, 25:25 | Feb 16, 20\n[+]Temporal marker untethered: Sun, 25:25 | Feb 16, 20\n[+]Comments                  :\n[+]Space Complexity          : O(R)\n[+]Time Complexity           : O(R*C)\n[+]Level                     :\n[+]Tread Speed               :\n[+]LINK                      : https://www.interviewbit.com/tutorial/matrix-scanners\n[+] Supplement Sources       : N/A\n\n'''"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('.x.') == '.xx.'\nassert solution('.x.x.x') == 'xx.xx.xx'\nassert solution('....') == '.....'\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('.x.\\nx.x\\n.x.') == '.xx..\\nxx..xx\\n..xx..'\nassert solution('3 3 1 2\\n.x.\\nx.x\\n.x.') == '.xx..\\nxx..xx\\n..xx..'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 3 1 2\n.x.\nx.x\n.x.''') == '..xx..\\nxx..xx\\n..xx..\\n', 'incorrect'\nprint('Hooray!')\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 1 2\\n.x.\\nx.x\\n.x.') == '..xx..\\nxx..xx\\n..xx..'\n\n\"\"\"\n\n\"\"\"\nSolution 2\n\nSample Input:\n3 3 1 2\n.x.\nx.x\n.x.\nSample Output:\n..xx..\nxx..xx\n..xx..\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\nassert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\nassert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\nassert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\n\nprint(solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\"))"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\n\"\"\""
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\"\"\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"B 60 13 20\") == \"14 20\"\n\nassert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"B 60 13 20\") == \"14 20\"\n\nassert solution(\"F 60 13 20\") == \"14 20\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"F 60 13 20\") == \"14 20\"\n\"\"\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"F 10 10 10\") == \"22 20\"\nassert solution(\"F 10 11 12\") == \"22 11\"\nassert solution(\"F 0 0 0\") == \"0 0\"\nassert solution(\"F 0 0 1\") == \"1 0\"\nassert solution(\"B 10 10 10\") == \"20 20\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\n-----Notes-----\nAll times given are valid times in $24$-hour format, so there is never a case where the hour would be greater than $24$.\n\"\"\""
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''F 60 13 20''') == '14 20'\nassert solution('''B 83 23 56''') == '12 43'\n\nprint(solution(input()))\n-----Solution-----\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('F 60 13 20\\n') == '14 20'\n\nassert solution('B 60 10 20\\n') == '1 40'\n\nassert solution('F 60 13 20\\n') == '14 20'\n\nassert solution('B 60 10 20\\n') == '1 40'\n\nassert solution('F 60 13 20\\n') == '14 20'"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(5)) == \"5\""
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\"\"\""
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(sample_input_lines)) == str(sample_output_lines)\n\n-----Explanation-----\nThe clock started at 11:20 at the beginning of the day, and was to advance by 60 minutes to 1:20 at the end of the day.\n\"\"\"\n\nfrom typing import List\n\nimport sys\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"SEP 9\") == \"nope\"\n\"\"\"\nimport calendar"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('NOV 1') == 'nope'\nassert solution('SEP 29') == 'nope'\nassert solution('SEP 2') == 'nope'\nassert solution('JAN 1') == 'nope'\n\"\"\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('OCT 31') == 'yup'\n\nassert solution('NOV 25') == 'nope'\n\nassert solution('DEC 31') == 'nope'\n\nassert solution('JAN 1') == 'nope'\n\nassert solution('NOV 27') == 'nope'"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('OCT 31') == 'yup'\n\"\"\"\n\nimport sys\nfrom datetime import datetime\n\nMONTHS = {\n    'JAN': '01',\n    'FEB': '02',\n    'MAR': '03',\n    'APR': '04',\n    'MAY': '05',\n    'JUN': '06',\n    'JUL': '07',\n    'AUG': '08',\n    'SEP': '09',\n    'OCT': '10',\n    'NOV': '11',\n    'DEC': '12'\n}"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"SEP 24\") == \"nope\""
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"SEP 30\") == \"nope\"\nassert solution(\"NOV 30\") == \"nope\"\n\n\"\"\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"OCT 31\") == \"yup\""
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('OCT 31') == 'yup'"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"OCT 12\") == \"nope\"\n\n\"\"\"\n\nimport datetime\nfrom datetime import datetime as dt\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"NOV 25\") == \"nope\"\nassert solution(\"NOV 26\") == \"nope\"\nassert solution(\"NOV 27\") == \"nope\"\nassert solution(\"DEC 25\") == \"nope\"\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"#.#.#.#.\\n#.#.#.#.\\n#.honi#.\\n#.#oker.#\\n#.nera#.\\n#.#irak.#\\n#.#.#.#.\\n#.#.#.#.\\n\"\nassert solution(\"4 4\\n0 0 0 0\\nhoni\\noker\\nnera\\nirak\") == \"##\\n#.#\\n###\\n#.#\\n#.#\\n\"\n\n\"\"\""
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n2 2 2 2\\nhoni\\noker\\nera\\nnera') == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#'\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#'\n\n\"\"\"\n\nfrom copy import copy"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \\\n\"\"\"#.#.#.#.\n.#.#.#.#\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nera\\nirak\") == \"#####.\\n#####.\\n###honi###\\n#######\\n#####.\\n#####.\\n#####.\\n#####.\\n#####.\\n#####.\\n#####.\\n#####.\\n#####.\\n#####.\\n\"\nprint(solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nera\\nirak\"))\n\nprint(\"-----\")\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#\"\n\"\"\"\n\nfrom string import ascii_lowercase\nfrom typing import Tuple\n\nM: int = int(input())\nN: int = int(input())\nU: int = int(input())\nL: int = int(input())\nR: int = int(input())\nD: int = int(input())\n\nboard = [['.' for _ in range(N)] for _ in range(M)]\n\n\nfor i in range(M):\n    row = ascii_lowercase[i]\n    for j in range(N):\n        board[i][j] = row[j]\n\n\nfor i in range(D):\n    for j in range(L):\n        board[i][j] = '#'\n    for j in range(R):\n        board[i][-1 - j] = '#'\n    for j in range(U):\n        board[-1 - j][i] = '#'\n    for j in range(D):\n        board[-1 - j][-1 - j] = '#'\n\n\nfor line in board:\n    print(''.join(line))\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"##.##.##\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n##.##.##\"\n\nSample Input:\n4 4\n2 2 2 2\nhoni\noker\nnera\nirak\nSample Output:\n##.##.##\n##.##.##\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"\"\"#.#.#.#.\n.#.#.#.#\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"\"\"#.#.#.#.\n.#.#.#.#\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak') == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.'\n\n\"\"\"\n\nimport math\nimport itertools\n\nclass Hashing:\n    def __init__(self, key, modulo=10000):\n        self.modulo = modulo\n        self.multiplier = math.ceil(math.sqrt(modulo))\n        self.hash_table = [[] for _ in range(self.multiplier)]\n        self.insert(key)\n\n    def hash(self, key):\n        return key % self.modulo\n\n    def insert(self, key):\n        hash_value = self.hash(key)\n        self.hash_table[hash_value].append(key)\n    \n    def get_list(self, key):\n        hash_value = self.hash(key)\n        return self.hash_table[hash_value]\n    \n    def get_index(self, key):\n        hash_value = self.hash(key)\n        return self.hash_table[hash_value].index(key)\n\n    def get_value(self, key):\n        hash_value = self.hash(key)\n        return self.hash_table[hash_value][self.get_index(key)]\n\n    def remove(self, key):\n        hash_value = self.hash(key)\n        self.hash_table[hash_value].remove(key)\n    \n    def length(self):\n        hash_value = self.hash_table.index(self)\n        return len(self.hash_table[hash_value])\n\n\nclass HashingSolution:\n    def __init__(self, stdin: str):\n        self.stdin = stdin\n        self.numbers, self.dashes, self.chars = [], [], []\n        for line in stdin.split('\\n'):\n            if line:\n                self.numbers.append(int(line.split(' ')[0]))\n                self.dashes.append(int(line.split(' ')[1]))\n                self.chars.append(line.split(' ')[2])\n        self.hashing = Hashing(len(self.chars))\n    \n    def solution(self):\n        m, n = self.numbers\n        u, l, r, d = self.dashes\n        for i in range(m):\n            for j in range(n):\n                if i < u and j < l:\n                    self.hashing.insert(self.chars[i][j])\n                if i > u and j < l:\n                    self.hashing.insert(self.chars[i][j])\n                if i < u and j > r:\n                    self.hashing.insert(self.chars[i][j])\n                if i > u and j > r:\n                    self.hashing.insert(self.chars[i][j])\n                if i < d and j > l:\n                    self.hashing.insert(self.chars[i][j])\n                if i > d and j > l:\n                    self.hashing.insert(self.chars[i][j])\n        for i in range(m):\n            for j in range(n):\n                print(self.hashing.get_value(self.chars[i][j]), end='')\n            print()\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\"\n\nprint(solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"))"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"White: Ra1,Qd1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: Ra1,Qd1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"White: Ra1,Qd1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: Ra1,Qd1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: Ra1,Qd1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\""
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\"\n\"\"\"\nimport re\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\"\n\nprint(solution(stdin))\n\n\"\"\"\n\n\"\"\"\n8.12. Write a function to solve the following problem: \n- Generate the first n binary numbers (each containing exactly 1 bit). \n- For example, n = 3, then the output should be: \n101, 110, 111, 1001, 1110, 1100, 1100, 1110, 1110, 1100, 1100, 1110, 1100, 1110, 1100, 1110, 1110, 1100\n\n-----Input-----\nThe input contains 2 integers: n (the number of bits in the binary number) and m (the position of the rightmost bit of the binary number).\n\n-----Output-----\nThe output must be a list of binary numbers of length n.\n\n-----Examples-----\nSample Input:\n10\n5\nSample Output:\n[101, 110, 111, 1001, 1110, 1100, 1100, 1110, 1110, 1100, 1100, 1110, 1100, 1110, 1110, 1100]"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4 Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"White: a2,c2,d2,f2,g2,h2,a3,e4 Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n\"\"\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\n'\n'Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|...|:::|.n.|:::|...|:::|...|:p:|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|:::|...|:::|...|:::|...|:::|...|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|...|:::|...|:::|.P.|:::|...|:::|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|:P:|...|:::|...|:::|...|:::|...|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n'\n\nassert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\n'\n'Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|...|:::|.n.|:::|...|:::|...|:p:|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|:::|...|:::|...|:::|...|:::|...|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|...|:::|...|:::|.P.|:::|...|:::|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|:P:|...|:::|...|:::|...|:::|...|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n'\n\nassert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\n'\n'Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n' \\\n    '+---+---+---+---+---+---+---+---+\\n' \\\n    '|:p:|.p.|:p:|.p.|:p:|.p."
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\"\n\nimport re\nimport unittest\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        assert solution(\"Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"+---+---+---+---+---+---+---+---+\"\n        assert solution(\"Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\"\n        \n        \nunittest.main()"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n) == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\n    \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n) == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\n    \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n) == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\n    \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n) == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\n    \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n) == \"+---+---+---+---+---+---+---+---+\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:P:|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"0.00000000 10000.00000000\") == \"Need more materials!\"\n\"\"\""
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\n\nSolution"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.0 4.0\") == \"Diablo is happy!\"\nassert solution(\"0.1 4.0\") == \"Need more materials!\"\nassert solution(\"0.01 4.0\") == \"Need more materials!\"\nassert solution(\"0.1 1.0\") == \"Need more materials!\"\n\n-----Problem-----\n\nN students, A meters of fencing, and M materials are trying to build a fence for the holidays.\n\nStudents can cut and bend the fencing at any point.\n\nEach material can be used in one or more ways.\n\nThe material is useful when:\n\nIt is bent, so it can cover more than one square meter\nIt is cut, so it can cover less than one square meter\nEvery student can use one material only once.\nEvery student cannot use more than one material at once.\nEach student cannot cut more than one part of the fence at once.\nEach student cannot bend the fence twice or more.\nEvery student cannot bend a part of the fence more than once.\nEvery student cannot cut a part of the fence more than once.\nThe sum of the lengths of the parts of the fences the students can build with the materials is exactly A square meters.\n\nWrite a program that will find out whether the students can build the fence for the holidays or not.\n\n-----Solution-----\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"0.000000 1.000000\") == \"Need more materials!\"\nassert solution(\"0.001000 0.010000\") == \"Diablo is happy!\"\nassert solution(\"0.010000 0.001000\") == \"Need more materials!\"\nassert solution(\"0.010000 0.010000\") == \"Diablo is happy!\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"0.000000 4.000000\") == \"Need more materials!\"\nassert solution(\"1.000000 1.000000\") == \"Diablo is happy!\"\nassert solution(\"0.000000 1.000000\") == \"Need more materials!\"\nassert solution(\"2.000000 5.000000\") == \"Diablo is happy!\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"4.0 4.0\") == \"Need more materials!\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('1.1 4.3') == 'Need more materials!'\nassert solution('2.5 6.0') == 'Diablo is happy!'\nassert solution('0.1 1.4') == 'Need more materials!'\nassert solution('5.1 2.2') == 'Diablo is happy!'\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1.000000 4.000000\") == 'Diablo is happy!'\nassert solution(\"1.0 5.0\") == 'Need more materials!'\n\n\"\"\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\""
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\n\"\"\"\n\na, n = input().split()\na = float(a)\nn = int(n)"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1\n5\n1\n1\n1\n1''') == 'use the stairs'\nassert solution('''10\n5\n1\n1\n1\n1''') == '9'\nassert solution('''100\n45\n67\n98\n2''') == '13'\nassert solution('''10\n1\n2\n2\n1''') == '2'\nassert solution('''100\n50\n50\n50\n50''') == '2'\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 1 10 2 1\") == \"use the stairs\"\nassert solution(\"10 1 20 2 1\") == \"use the stairs\"\nassert solution(\"10 1 10 1 1\") == \"use the stairs\"\nassert solution(\"10 1 3 2 1\") == \"use the stairs\"\nassert solution(\"10 1 10 1 10\") == \"use the stairs\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 1 10 2 1') == '6'\n\n\"\"\"\nimport math"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"4 1 10 2 1\") == \"use the stairs\"\nassert solution(\"2 1 10 2 1\") == \"use the stairs\"\nassert solution(\"4 1 10 2 2\") == \"use the stairs\"\nassert solution(\"10 4 2 1 3\") == \"9\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"10 2 10 1 1\") == \"use the stairs\"\nassert solution(\"10 3 10 1 2\") == \"3\"\nassert solution(\"10 1 10 2 1\") == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 1 10 2 1\") == \"use the stairs\"\nassert solution(\"10 1 10 2 2\") == \"use the stairs\"\nassert solution(\"10 1 10 2 3\") == \"use the stairs\"\nassert solution(\"10 1 10 5 2\") == \"use the stairs\"\nassert solution(\"10 1 10 5 3\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\n\"\"\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n500\n120\n75''') == '128.8'\nassert solution('''3\n500\n120\n75\n500\n120\n75''') == '217.66666666666666'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\n\"\"\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\n\"\"\"\n\nimport os\nimport sys\nimport io\n\nsys.stdin = io.StringIO(\n    \"3\\n500\\n120\\n75\"\n)\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n500\\n120\\n75') == '128.8'\n\"\"\"\n\nimport math\nn = int(input())\nL = list(map(int, input().split()))\n\nL.sort()\n\nans = 0\nfor i in range(1, n):\n    ans += L[i] * (1/5) * (4/5)**i\n\nprint(round(ans, 6))\n\nans = 0\nfor i in range(1, n):\n    ans += math.pow(1/5, i) * L[i]\n\nprint(round(ans, 6))\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n500\\n120\\n75') == '128.8'\n\"\"\"\n\nn = int(input())\nscores = [int(i) for i in input().split()]\nscore = 1\nfor i in scores[::-1]:\n    score *= (1 / 5)\n    score += (i * pow(4 / 5, i))\nprint(round(score, 6))\n\ng_i = 0\n\nfor i in scores:\n    g_i += pow(5, scores.index(i) + 1) / (5 * n)\nprint(round(g_i, 6))\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == '128.8\\n89.0'\n\"\"\"\n\nimport math\n\nn = int(stdin.readline().strip())\n\nscores = list(map(int, stdin.readlines()))\nscores.sort()\n\nmean_score = 0\nfor i, score in enumerate(scores):\n    mean_score += score * ((4/5)**i)\n\nprint(mean_score / n)\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\nassert solution(\"5\\n2500\\n120\\n50\\n7\") == \"0.5\"\nassert solution(\"1\\n2\\n3\") == \"3.0\"\n\n\"\"\""
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n3\\n4\\n1') == '2.8'\n\"\"\"\n\n\"\"\"\n--- Part Two ---\nYou now know how Kattis ranks teams, but unfortunately the new Kattis system does not allow you to see your student\u2019s relative position among other students. However, you do have some clues about how Kattis determines how many points each team is awarded.\n\nWhen Kattis determines how many points each team is awarded, Kattis takes the following steps:\n\nBefore beginning step 3, determine the number of points awarded for each team.\n\nThe $n$th score is calculated as follows:\n\nIf $2 \\leq n \\leq 6$, the score for team $n$ is $n$\nIf $7 \\leq n \\leq 11$, the score for team $n$ is the sum of the digits in the position $n$ (e.g., $7 = 7, 8 = 8 + 1, 9 = 9 + 2$)\nIf $12 \\leq n \\leq 14$, the score for team $n$ is the sum of the digits in the position $n$ (e.g., $12 = 12, 13 = 13 + 3, 14 = 14 + 4$)\nIf $15 \\leq n \\leq 21$, the score for team $n$ is the sum of the digits in the position $n$ (e.g., $15 = 15, 16 = 16 + 5, 17 = 17 + 6$)\nIf $22 \\leq n \\leq 28$, the score for team $n$ is the sum of the digits in the position $n$ (e.g., $22 = 22, 23 = 23 + 7, 24 = 24 + 8$)\nIf $29 \\leq n \\leq 36$, the score for team $n$ is the sum of the digits in the position $n$ (e.g., $29 = 29, 30 = 30 + 9, 31 = 31 + 1$)\nIf $n \\geq 37$, the score for team $n$ is the sum of the digits in the position $n$ (e.g., $37 = 37, 38 = 38 + 0, 39 = 39 + 2, 40 = 40 + 3$)\nYou are given $s_0, s_1, \\ldots, s_{n-1}$, the $n$ scores for all students, in non-increasing order.\n\nAfter step 2, Kattis determines how many points each team gets. The $i$th score for team $j$ is given by $g_j = s_{i \\mod n}$ (note that $0 \\leq i \\leq n - 1$).\n\nThen, Kattis determines how many points each team gets. The $i$th score for team $j$ is given by $f_j = g_j \\cdot \\left( \\frac{4}{5} \\right)^j$ (note that $0 \\leq i \\leq n - 1$).\n\nFor example, if $n = 3$, the first score is $s_0 = 500$, the second score is $s_1 = 120$, the third score is $s_2 = 75$, the first team receives $g_0 = s_0 = 500$ points, the second team receives $g_1 = s_1 = 120$ points, and the third team receives $g_2 = s_2 = 75$ points. The first team receives $f_0 = g_0 = 500 \\cdot \\left( \\frac{4}{5} \\right)^0 = 2.4$ points, the second team receives $f_1 = g_1 = 120 \\cdot \\left( \\frac{4}{5} \\right)^1 = 6.6$ points, and the third team receives $f_2 = g_2 = 75 \\cdot \\left( \\frac{4}{5} \\right)^2 = 12.0$ points.\n\nAfter determining the points each team receives, Kattis determines how many points each team is awarded, and the $j$th score for team $i$ is given by $a_i = \\sum _{j=0}^{n-1} f_j \\cdot \\left( \\frac{4}{5} \\right)^j$.\n\nFor example, if $n = 3$, the first team receives $a_0 = f_0 + f_1 + f_2 = 500 + 6 + 12 = 58$ points, the second team receives $a_1 = f_0 + f_1 + f_2 = 500 + 6 + 12 = 58$ points, and the third team receives $a_2 = f_0 + f_1 + f_2 = 500 + 6 + 12 = 58$ points.\n\nIn this example, the first team receives $58$ points, the second team receives $58$ points, and the third team receives $58$ points.\n\nAfter determining how many points each team is awarded, Kattis determines the final score for your university. Your university\u2019s final score is the sum of the $i$th score for each team, where $0 \\leq i \\leq n - 1$, inclusive.\n\nAfter determining your university\u2019s final score, Kattis determines how many points your university is awarded. Your university is awarded $f = \\sum _{i=0}^{n-1} a_i \\cdot \\left( \\frac"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1\\n2\\n\") == \"1.25\"\nassert solution(\"3\\n1\\n2\\n3\\n\") == \"1.0\"\nassert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"0.5\"\n\n----------------\nSample Output\n2.0\n1.833333333333333\n4.0\n2.4\n1.6\n2.0\n2.0\n1.333333333333333\n1.833333333333333\n2.166666666666667\n1.6\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0\n1.6666666666666667\n1.6666666666666667\n2.0\n2.0"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\nl = list(map(int, sys.stdin.readline().strip().split()))\n\nnum_days = 0\nnum_cleanup_phases = 0\n\nfor day in l:\n    if day > num_days:\n        num_cleanup_phases += (day - num_days)\n        num_days = day\n\nprint(num_cleanup_phases)\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2 3 4') == '4'\nassert solution('1 2 3 4 5') == '4'\n\n\"\"\""
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n\n-----Constraints-----\n1 <= n <= 100\n1 <= d_i <= 365\n-----Note-----\nPlease try to solve this task as soon as possible.\n\"\"\""
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == 4\n\"\"\"\n\nfrom math import ceil\n\nn = int(input())\n\ndays = list(map(int, input().split()))\n\nup = 0\n\nfor d in days:\n    if d >= 20:\n        up += ceil((d-20) / (365-20))\n\nprint(up)\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n1 45 65 84 346''') == '4'\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1 5 3 9 10 17\") == \"4\"\n\n-------------\n5\n6\n7\n9\n1\n11\n\nOutput:\n3\n\n-------------\n2\n\n\"\"\"\n\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass Solution:\n    raw_input: str\n    max_allowed_dirtiness: int\n\n    def solution(self) -> str:\n        n = int(self.raw_input)\n        dirtiness_on_day = []\n        for _ in range(n):\n            dirtiness_on_day.append(int(self.raw_input.split()[1]))\n        dirtiness_on_day.sort()\n        num_of_cleanup_phases = 0\n        dirtiness_on_day.append(self.max_allowed_dirtiness)\n        max_dirtiness_on_day = max(dirtiness_on_day)\n        for day_index in range(len(dirtiness_on_day)-1):\n            if (dirtiness_on_day[day_index+1] - max_dirtiness_on_day) > self.max_allowed_dirtiness:\n                num_of_cleanup_phases += 1\n                max_dirtiness_on_day = max(dirtiness_on_day[day_index+1], max_dirtiness_on_day)\n        return num_of_cleanup_phases\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\\\n1 5 6 7 8') == '2'\nassert solution('7\\\\n1 2 3 4 5 6 7') == '1'\nassert solution('12\\\\n1 2 3 4 5 6 7 8 9 10 11 12') == '1'\nassert solution('15\\\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15') == '2'\n\n'''\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5\n1 45 65 84 346\n\"\"\") == '4'\n\nassert solution(\"\"\"\n7\n1 8 10 14 21 30 44\n\"\"\") == '2'\n\nassert solution(\"\"\"\n3\n1 6 10\n\"\"\") == '1'\n\nassert solution(\"\"\"\n2\n1 6\n\"\"\") == '0'\n\nassert solution(\"\"\"\n8\n1 4 6 7 10 13 21 23\n\"\"\") == '4'\n\nprint(\"Successfully passed all tests\")\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(5)) == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\nprint('Test pass.')\n\n-------\n3 3\nP.#P.#\n.T..G.\n.T..G.\nT#T#T\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n.T.G\\n.T.#\\nP#P\\nGG#\\n#.#\") == \"5\"\n\nassert solution(\"6 3\\n.T.G\\n.T.#\\nP#P\\nGG#\\n#T#\") == \"6\"\n\nassert solution(\"6 3\\n.T.G\\n.T.#\\nP#P\\nGG#\\nT#T\") == \"7\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n7 4\n#######\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 7\\n#.G#T#\\nT..T#\\nT#.#\\n#.##\\nT#G#\\n#.##') == '3'\nassert solution('6 6\\n#T#G#\\n#.G#T#\\n#T#G#\\n#G#T#\\n#.G#T#\\n#T#G#') == '0'\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == '1'\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\nassert solution('7 4\\n#P.GTG#\\n#..TGG#\\n#######') == '0'\nassert solution('7 4\\nP.GTG#\\n#..TGG#\\n#######') == '0'\nassert solution('7 4\\nP.GTG#\\n..TGG#\\n#######') == '0'\nassert solution('7 4\\nP.GTG#\\n..TGG#\\n#####') == '0'\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n#T\\n###\\n##\\n#.#\\n####\") == \"0\"\nassert solution(\"5 3\\n##G#P#T\\n#...\\n######\\nG##P#T\") == \"3\"\nassert solution(\"3 3\\nT#T\\n#GG\\nG#P\") == \"0\"\nassert solution(\"5 4\\n#G\\n#.G\\n#G\\n#P\") == \"3\"\nassert solution(\"5 5\\n#G\\n#G\\n#G\\n#G\\n#G\") == \"2\"\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\nassert solution('5 4\\n#####.\\n#T.#G#\\n#####.\\n#####.') == '0'\nassert solution('7 4\\n#######\\n#.T.G#\\n#..P.#\\n#######') == '0'\nassert solution('7 4\\n#######\\n#..P.#\\n#T.#G#\\n#######') == '1'\nassert solution('7 4\\n#######\\n#..P.#\\n#T.G#.#\\n#######') == '2'\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\nSample Case 0\n\nSample Case 1\n\nSample Case 2\n\nSample Case 3\n\nSample Case 4\n\nSample Case 5\n\nSample Case 6\n\nSample Case 7\n\nSample Case 8\n\nSample Case 9\n\nSample Case 10\n\nSample Case 11\n\nSample Case 12\n\nSample Case 13\n\nSample Case 14\n\nSample Case 15\n\nSample Case 16\n\nSample Case 17\n\nSample Case 18\n\nSample Case 19\n\nSample Case 20\n\nSample Case 21\n\nSample Case 22\n\nSample Case 23\n\nSample Case 24\n\nSample Case 25\n\nSample Case 26\n\nSample Case 27\n\nSample Case 28\n\nSample Case 29\n\nSample Case 30\n\nSample Case 31\n\nSample Case 32\n\nSample Case 33\n\nSample Case 34\n\nSample Case 35\n\nSample Case 36\n\nSample Case 37\n\nSample Case 38\n\nSample Case 39\n\nSample Case 40\n\nSample Case 41\n\nSample Case 42\n\nSample Case 43\n\nSample Case 44\n\nSample Case 45\n\nSample Case 46\n\nSample Case 47\n\nSample Case 48\n\nSample Case 49\n\nSample Case 50\n\nSample Case 51\n\nSample Case 52\n\nSample Case 53\n\nSample Case 54\n\nSample Case 55\n\nSample Case 56\n\nSample Case 57\n\nSample Case 58\n\nSample Case 59\n\nSample Case 60\n\nSample Case 61\n\nSample Case 62\n\nSample Case 63\n\nSample Case 64\n\nSample Case 65\n\nSample Case 66\n\nSample Case 67\n\nSample Case 68\n\nSample Case 69\n\nSample Case 70\n\nSample Case 71\n\nSample Case 72\n\nSample Case 73\n\nSample Case 74\n\nSample Case 75\n\nSample Case 76\n\nSample Case 77\n\nSample Case 78\n\nSample Case 79\n\nSample Case 80\n\nSample Case 81\n\nSample Case 82\n\nSample Case 83\n\nSample Case 84\n\nSample Case 85\n\nSample Case 86\n\nSample Case 87\n\nSample Case 88\n\nSample Case 89\n\nSample Case 90\n\nSample Case 91\n\nSample Case 92\n\nSample Case 93\n\nSample Case 94\n\nSample Case 95\n\nSample Case 96\n\nSample Case 97\n\nSample Case 98\n\nSample Case 99\n\nSample Case 100\n\nSample Case 101\n\nSample Case 102\n\nSample Case 103\n\nSample Case 104\n\nSample Case 105\n\nSample Case 106\n\nSample Case 107\n\nSample Case 108\n\nSample Case 109\n\nSample Case 110\n\nSample Case 111\n\nSample Case 112\n\nSample Case 113\n\nSample Case 114\n\nSample Case 115\n\nSample Case 116\n\nSample Case 117\n\nSample Case 118\n\nSample Case 119\n\nSample Case 120\n\nSample Case 121\n\nSample Case 122\n\nSample Case 123\n\nSample Case 124\n\nSample Case 125\n\nSample Case 126\n\nSample Case 127\n\nSample Case 128\n\nSample Case 129\n\nSample Case 130\n\nSample Case 131\n\nSample Case 132\n\nSample Case 133\n\nSample Case 134\n\nSample Case 135\n\nSample Case 136\n\nSample Case 137\n\nSample Case 138\n\nSample Case 139\n\nSample Case 140\n\nSample Case 141\n\nSample Case 142\n\nSample Case 143\n\nSample Case 144\n\nSample Case 145\n\nSample Case 146\n\nSample Case 147\n\nSample Case 148\n\nSample Case 149\n\nSample Case 150\n\nSample Case 151\n\nSample Case 152\n\nSample Case 153\n\nSample Case 154\n\nSample Case 155\n\nSample Case 156\n\nSample Case 157\n\nSample Case 158\n\nSample Case 159\n\nSample Case 160\n\nSample Case 161\n\nSample Case 162\n\nSample Case 163\n\nSample Case 164\n\nSample Case 165\n\nSample Case 166\n\nSample Case 167\n\nSample Case 168\n\nSample Case 169\n\nSample Case 170\n\nSample Case 171\n\nSample Case 172\n\nSample Case 173\n\nSample Case 174\n\nSample Case 175\n\nSample Case 176\n\nSample Case 177\n\nSample Case 178\n\nSample Case 179\n\nSample Case 180\n\nSample Case 181\n\nSample Case 182\n\nSample Case 183\n\nSample Case 184\n\nSample Case 185\n\nSample Case 186\n\nSample Case 187\n\nSample Case 188\n\nSample Case 189\n\nSample Case 190\n\nSample Case 191\n\nSample Case 192\n\nSample Case 193\n\nSample Case 194\n\nSample Case 195\n\nSample Case 196\n\nSample Case 197\n\nSample Case 198\n\nSample Case 199\n\nSample Case 200\n\nSample Case 201\n\nSample Case 202\n\nSample Case 203\n\nSample Case 204\n\nSample Case 205\n\nSample Case 206\n\nSample Case 207\n\nSample Case 208\n\nSample Case 209\n\nSample Case 210\n\nSample Case 211\n\nSample Case 212\n\nSample Case 213\n\nSample Case 214\n\nSample Case 215\n\nSample Case 216\n\nSample Case 217\n\nSample Case 218\n\nSample Case 219\n\nSample Case 220\n\nSample Case 221\n\nSample Case 222\n\nSample Case 223\n\nSample Case 224\n\nSample Case 225"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"13 50\\n\"\n    \"____$$$_______$$$______$$$________$$$______$$$____\\n\"\n    \"____$$$_______$$$______$$$________$$$______$$$____\\n\"\n    \"_____$_________$________$__________$________$_____\\n\"\n    \"___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n\"\n    \"__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\\n\"\n    \"_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n\"\n    \"$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n\"\n    \"_____$_$______$_$_____$_$_________$_$_____$_$_____\\n\"\n    \"____$___$____$___$____$___$______$___$____$___$___\\n\"\n    \"___$____$___$_____$___$____$____$_____$___$____$__\\n\"\n    \"__$_____$___$_____$___$_____$___$_____$___$_____$_\\n\"\n    \"__$_____$___$_____$___$_____$___$_____$___$_____$_\\n\"\n    \"_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n\") == \"5\"\n\nassert solution(\n    \"13 50\\n\"\n    \"____$$$_______$$$______$$$________$$$______$$$____\\n\"\n    \"____$$$_______$$$______$$$________$$$______$$$____\\n\"\n    \"_____$_________$________$__________$________$_____\\n\"\n    \"___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n\"\n    \"__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\\n\"\n    \"_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n\"\n    \"$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n\"\n    \"_____$_$______$_$_____$_$_________$_$_____$_$_____\\n\"\n    \"____$___$____$___$____$___$______$___$____$___$___\\n\"\n    \"___$____$___$_____$___$____$____$_____$___$____$__\\n\"\n    \"__$_____$___$_____$___$_____$___$_____$___$_____$_\\n\"\n    \"__$_____$___$_____$___$_____$___$_____$___$_____$_\\n\"\n    \"_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n\") == \"10\"\n\nassert solution(\n    \"13 50\\n\"\n    \"____$$$_______$$$______$$$________$$$______$$$____\\n\"\n    \"____$$$_______$$$______$$$________$$$______$$$____\\n\"\n    \"_____$_________$________$__________$________$_____\\n\"\n    \"___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n\"\n    \"__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\\n\"\n    \"_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n\"\n    \"$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n\"\n    \"_____$_$______$_$_____$_$_________$_$_____$_$_____\\n\"\n    \"____$___$____$___$____$___$______$___$____$___$___\\n\"\n    \"___$____$___$_____$___$____$____$_____$___$____$__\\n\"\n    \"__$_____$___$_____$___$_____$___$_____$___$_____$_\\n\"\n    \"__$_____$___$_____$___$_____$___$_____$___$_____$_\\n\"\n    \"_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n\") == \"15\"\n\nassert solution(\n    \"13 50\\"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$_\\n___$____$___$_____$___$____$____$_____$___$____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$') == '5'"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n') == '1 2'\nassert solution('1\\n2\\n3\\n') == '1 2 3'\nassert solution('1\\n2\\n3\\n4\\n') == '1 2 3 4'\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$_________$_$_________$_$_____$_$_________$\\n____$___$______$___$___$______$___$____$___$_______$\\n___$____$____$_____$___$____$____$_____$___$_______$\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n\") == \"5\"\n\n\"\"\"\n\nn, m = [int(i) for i in input().split()]\n\ng = [[j for j in input()] for i in range(n)]\n\nprint(sum([sum([1 if i == '$' else 0 for i in j]) for j in g]))\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n') == '5'\n    assert solution('14 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n') == '5'\n    assert solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n') == '5'\n    assert solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == \"5\"\n\nassert solution(\"13 50\\n_____$_________$__________$________\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$__$__$$_____$_$___$__$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == \"0\"\nassert solution(\"13 50\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$$$$$$______$$______\\n_$$$$$$$$$$$______$$______$$$$"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('_') == '_'\nassert solution('__') == '_'\nassert solution('___') == '_'\nassert solution('___$') == '_'\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n\") == \"5\"\n    return \"OK\"\n\n------------------------------------------------------\n\npubnite\n\nPubnite is an epic battle royale game featuring unique gameplay mechanics such as dancing! Every player enjoys dancing in the middle of fierce and brutal tactical firefights.\n\nThis unique feature has made Pubnite the second most popular game on the internet, next to none but BeeLizard\u2019s first person shooter game OvalWatch! Epig Games, the developer of Pubnite, is thinking of pulling one last trick to outsell OverWatch, and defeat its competitor, BeeLizard, once and for all.\n\nAnnouncing Epig Games\u2019s new limited-time global event: Epig Dance Off!\n\nIn Epig Dance Off, players can invent dance moves, videotape themselves dancing and submit their dance moves to Epig Games, where Epig Games will rate the moves. At the end of the event, Epig Games will announce the moves with the best ratings, and incorporate those dance moves into the game. The inventors of the moves will be crowned Supreme Winners of Epig Dance Off, and there is no greater glory than that.\n\nEpig Games ran into an issue. Too many players are eager to join the Epig Dance Off and there are too many submissions to rate. The incredibly smart designers at Epig Games came up with yet another ingenious idea \u2013 they shall use software to determine the rating of a dance!\n\nHaving not enough engineering power at Epig Games, they have hired an intern \u2013 you \u2013 to write software that rates a dance!\n\nThe rating system is designed as follows: Each dance is composed of a sequence of moves. The rating of the dance is the number of moves performed in the sequence.\n\nThe dance is described by a grid with $N$ rows and $M$ columns. Each character in the grid is either a \u2018$\u2019, denoting the dancer is seen in this position, or a \u2018_\u2019, denoting the dancer is not seen in this position. When there is a single blank column, that denotes a frame is completed and the dancer has completed one move, where a blank column is defined to contain only \u2018_\u2019.\n\n-----Input-----\nThe first line contains two integers $N$ and $M$. It is guaranteed that $1\\leq N, M\\leq 2000$.\n\nThe next $N$ lines contains $M$ characters each. It is guaranteed that each character is either \u2018_\u2019or \u2018$\u2019. It is also guaranteed that both the first and last columns are non-blank, and no two consecutive columns are both blank.\n\n-----Output-----\nOutput a single integer $T$, the rating of the dance, i.e. number of dance moves in the recording.\n\n-----Examples-----\nSample Input:\n13 50\n____$$$_______$$$______$$$________$$$______$$$____\n____$$$_______$$$______$$$________$$$______$$$____\n_____$_________$________$__________$________$_____\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\n_____$_$______$_$_____$_$_________$_$_____$_$_____\n____$___$____$___$____$___$______$___$____$___$___\n___$____$___$_____$___$____$____"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == \"5\"\n\n\"\"\"\n\nfrom copy import deepcopy"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\"\"\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nprint(\"Test 1 Passed\")\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('english') == 'engleyay'\nassert solution('hello') == 'elloay'\nassert solution('antidisestablishmentarianism') == 'entay ayodisestablishmentarianismay'\nassert solution('codewars') == 'odeswayay'\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('This is a test') == 'htay isway etstaay itnay'\nassert solution('hEllo') == 'hayl'\nassert solution('hello') == 'hayl'\nassert solution('hello world') == 'hayl orldway'\n\n\"\"\""
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\n\nSample Input:\nlose you\nSample Output:\nlose your\n'''\n\nimport sys"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\"\"\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\nassert solution('I cant speak pig latin') == 'Iyay antcay eakspay igpay atinlay'\nassert solution('I can speak pig latin') == 'Iyay antcay eakspay igpay atinlay'\n\"\"\"\nimport re"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\nassert solution('i eat apples') == 'ieay eatway appay iles'\n\"\"\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\"\"\"\n\nimport re\n\nVOWELS = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\"I can't speak pig latin\") == \"Iyay antcay eakspay igpay atinlay\"\nassert solution(\"and i'll stay there\") == \"andyay llyay eaystay ainlay\"\n\"\"\""
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'Anywhere is fine I guess'\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\n\n\"\"\"\n\nfrom collections import OrderedDict\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'Anywhere is fine I guess'\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'Anywhere is fine I guess'\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\n\"\"\""
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\nassert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"Anywhere is fine I guess\"\n\"\"\""
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('potatoes\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\nassert solution('potatoes\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'Anywhere is fine I guess'\nassert solution('potatoes\\n3\\nnymble\\npancakes\\npea soup\\nq\\npunsch') == 'Anywhere is fine I guess'\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n''') == 'nymble'\nassert solution('''\n3\n1\na\nb\nc\n3\na\nb\nc\n''') == 'Anywhere is fine I guess'\nassert solution('''\n3\n1\na\nb\nc\n3\na\nb\nc\n''') == 'Anywhere is fine I guess'\nassert solution('''\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n''') == 'nymble'\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == 'nymble'\n\"\"\""
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'''\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n'''\n) == 'nymble'\nassert solution(\n'''\n3\n1\ncheese\nsalad\n2\nnymble\npancakes\npea soup\npunsch\n'''\n) == 'Anywhere is fine I guess'\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\n\"\"\""
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 0 15\") == 3\nprint(solution(\"5 0 15\"))\n\n------Solution------\n\"\"\"\nfrom typing import List, Tuple"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 0 15\") == \"3\"\nassert solution(\"0 5 0\") == \"1\"\nassert solution(\"0 0 0\") == \"0\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 0 15') == '3'\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 0 15\") == 3\nprint(solution(input()))\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 0 15') == '3'\nprint(solution(stdin))\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 0 15') == 3\n\"\"\"\n\nimport math\n\na, b, h = [int(i) for i in stdin.split(' ')]\n\nprint(math.ceil((h - b) / (a - b)))\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 0 15\") == \"3\"\n\"\"\"\nimport math\n\na, b, h = map(int, input().split())\nprint(int(math.ceil(float(h-b)/(a-b))))\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 0 3') == 1\nassert solution('4 0 5') == 2\nassert solution('4 0 10') == 2\nassert solution('4 0 20') == 3\nassert solution('4 0 100') == 9\n\n-----Notes-----\nFor a pole of height $h$ and a worm that can climb $a$ inches at a time and fall $b$ inches right after it rests, how many times does the worm need to climb up to the top of the pole?\n\"\"\"\n\nimport unittest\nfrom typing import List\n\nclass Pole:\n    def __init__(self, h: int, a: int, b: int):\n        self.h = h\n        self.a = a\n        self.b = b\n\n    def get_crawl_count(self) -> int:\n        # the number of times the worm must climb up to the top of the pole\n        return self.h // (self.a - self.b)\n\nclass TestPole(unittest.TestCase):\n    def setUp(self):\n        self.pole_1 = Pole(h=15, a=5, b=0)\n        self.pole_2 = Pole(h=15, a=4, b=0)\n        self.pole_3 = Pole(h=15, a=4, b=3)\n        self.pole_4 = Pole(h=15, a=4, b=5)\n        self.pole_5 = Pole(h=15, a=4, b=10)\n        self.pole_6 = Pole(h=15, a=4, b=20)\n        self.pole_7 = Pole(h=15, a=4, b=100)\n        self.pole_8 = Pole(h=15, a=100, b=0)\n        self.pole_9 = Pole(h=15, a=100, b=3)\n        self.pole_10 = Pole(h=15, a=100, b=5)\n        self.pole_11 = Pole(h=15, a=100, b=10)\n        self.pole_12 = Pole(h=15, a=100, b=20)\n        self.pole_13 = Pole(h=15, a=100, b=100)\n        self.pole_14 = Pole(h=15, a=200, b=0)\n        self.pole_15 = Pole(h=15, a=200, b=3)\n        self.pole_16 = Pole(h=15, a=200, b=5)\n        self.pole_17 = Pole(h=15, a=200, b=10)\n        self.pole_18 = Pole(h=15, a=200, b=20)\n        self.pole_19 = Pole(h=15, a=200, b=100)\n        self.pole_20 = Pole(h=15, a=400, b=0)\n        self.pole_21 = Pole(h=15, a=400, b=3)\n        self.pole_22 = Pole(h=15, a=400, b=5)\n        self.pole_23 = Pole(h=15, a=400, b=10)\n        self.pole_24 = Pole(h=15, a=400, b=20)\n        self.pole_25 = Pole(h=15, a=400, b=100)\n        self.pole_26 = Pole(h=15, a=800, b=0)\n        self.pole_27 = Pole(h=15, a=800, b=3)\n        self.pole_28 = Pole(h=15, a=800, b=5)\n        self.pole_29 = Pole(h=15, a=800, b=10)\n        self.pole_30 = Pole(h=15, a=800, b=20)\n        self.pole_31 = Pole(h=15, a=800, b=100)\n        self.pole_32 = Pole(h=15, a=1000, b=0)\n        self.pole_33 = Pole(h=15, a=1000, b=3)\n        self.pole_34 = Pole(h=15, a=1000, b=5)\n        self.pole_35 = Pole(h=15, a=1000, b=10)\n        self.pole_36 = Pole(h=15, a=1000, b=20)\n        self.pole_37 = Pole(h=15, a=1000, b=100)\n        self.pole_38 = Pole(h=15, a=2000, b=0)\n        self.pole_39 = Pole(h=15, a=2000, b=3)\n        self.pole_40 = Pole(h=15, a=2000, b=5)\n        self.pole_41 = Pole(h=15, a=2000, b=10)\n        self.pole_42 = Pole(h=15, a=2000, b=20)\n        self.pole_43 = Pole(h=15, a=2000, b=100)\n        self.pole_44 = Pole(h=15, a=5000, b=0)\n        self.pole_45 = Pole(h=15, a=5000, b=3)\n        self.pole_46 = Pole(h=15, a=5000, b=5)\n        self.pole_47 = Pole(h=15, a=5000, b=10)\n        self.pole_48 = Pole(h=15, a=5000, b=20)\n        self.pole_49 = Pole(h=15, a=5000, b=100)\n        self.pole_50 = Pole(h=15, a=10000, b=0)\n        self.pole_51 = Pole(h=15, a=10000, b=3)\n        self.pole_52 = Pole(h=15, a=10000, b=5)\n        self.pole_53 = Pole(h=15, a=10000, b=10)\n        self.pole_54 = Pole(h=15, a=10000, b=20)\n        self.pole_55 = Pole(h=15, a=10000, b=100)\n\n    def test_get_crawl_count(self):\n        self."
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 0 15') == '3'\n\n----Solution----\nx, y, z = map(int, stdin.split(' '))\nprint(z // (y + x) - x // (y + x))\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 0 15\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 15\") == \"19\"\nassert solution(\"1 1\") == \"1\"\n\n\"\"\"\n\na, b = map(int, input().split())\n\na, b = sorted([a, b])\n\nprint(a + (b - a) // 2)"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 15\") == \"19\"\n\"\"\"\n\n\"\"\"\nPara cada caso de teste, imprima uma linha com um n\u00famero inteiro, que representa a m\u00e9dia de dois n\u00fameros.\n\nPar\u00e2metros:\nstdin (str): uma linha contendo dois n\u00fameros inteiros\n\nRetorno:\n(str): um n\u00famero inteiro, que representa a m\u00e9dia dos dois n\u00fameros.\n\nExemplos:\nSample Input 1:\n11 15\nSample Output 1:\n19\n\nSample Input 2:\n101 101\nSample Output 2:\n200\n\"\"\""
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 15\") == \"19\"\n\"\"\""
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 15\") == \"19\"\n'''"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 15\") == \"19\"\n\n\"\"\"\n\nfrom math import ceil, floor\n\na, b = [int(x) for x in stdin.split()]\n\nprint(ceil((a+b)/2))\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11 15') == '19'\n\"\"\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11 15') == '19'\n\"\"\""
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 15\") == 19\n\"\"\"\n\na, b = map(int, input().split())\nprint(int((a+b)/2))\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 15\") == 19\n\n\"\"\"\nimport re\nfrom math import ceil"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 15\") == \"19\"\nprint(solution(\"11 15\"))\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"North West South\") == \"No\"\nassert solution(\"North East South\") == \"No\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"South East West\") == \"No\"\nassert solution(\"North East West\") == \"Yes\"\nassert solution(\"South West South\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"South East West\") == \"No\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"South West East\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('North East West') == 'No'\n\"\"\""
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('South East West') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"North East West\") == \"No\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"North West East\") == \"No\"\n\"\"\"\n\nimport re\n\nstdin = \"South West East\"\nstdin = re.sub(r\"\\s\", \"\", stdin)\nprint(\"Yes\" if \"West\" in stdin else \"No\")"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"North East South\") == \"No\"\nassert solution(\"North West South\") == \"No\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"South East West\") == \"No\"\n\"\"\"\n\na, b, c = (stdin.split())\n\nprint(\"Yes\" if a!= b and a!= c and b!= c else \"No\")\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 16\\naagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n\"\"\""
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\nassert solution(\"5 16\\nagain\\npirpumsemoystoal\\n\") == \"marywasnosyagain\"\nassert solution(\"5 16\\na\\nagain\\npirpumsemoystoal\") == \"mrywasnosyagain\"\nassert solution(\"5 16\\na\\nagain\\npirpumsemoystoal\\n\") == \"mrywasnosyagain\"\nassert solution(\"5 16\\na\\nagain\\npirpumsemoystoal\\n5 b\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 16\n\nagain\n\npirpumsemoystoal\n''') =='marywasnosyagain'"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 16\nagain\npirpumsemoystoal''') =='marywasnosyagain'\nassert solution('''7 7\na\nc\nb\nd\ne\nf\ng''') == 'abcdefg'\n'''\n\nn,m = [int(i) for i in input().split()]\n\ntext = input()\nk = ''\nfor i in range(n):\n    k += chr(ord('a') + (ord(text[i]) - ord('a') + m)%26)\nprint(k)\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\nassert solution(\"5 21\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\nassert solution(\"5 22\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\nassert solution(\"5 23\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\nassert solution(\"5 24\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('10 2\\naaa') == 'a\\naa'\nassert solution('4 5\\nnnn\\nbbbb') == 'n\\nn\\nb\\nb'\n\n-----Explanation-----\nFrom the input, we can see that there are two integers: $n$ and $m$ are the number of letters John saw and the length of the text.\n\nThe only line of the input is the plaintext of John\u2019s diary, which contains a total of $n + 1$ letters, and is composed of $n$ letters.\n\nThe solution begins by creating an empty dictionary: $d = {}$ which will map $a$ to $b$, where $b$ is a number between 0 and 25, and $a$ is a letter in the lower-case English alphabet.\n\nWe then generate the dictionary as follows: $d = { 'a': 'b', 'c': 'd',..., 'x': 'y', 'z': 'a' }$\n\nWith this dictionary, we can encrypt the first $n$ letters of the plaintext using the following formula: $b_ i = a_ i + k_ i \\bmod 26$.\n\nNote that the loop is executed in this order: $d = { 'a': 'b', 'c': 'd',..., 'x': 'y', 'z': 'a' }$, $a = 'a',..., $a = 'z'$, and $k_ i = 0$, $k_ i = 1$,..., $k_ i = 25$.\n\nThen we iterate through the text and encrypt each letter: $b_ i = a_ i + k_ i \\bmod 26$.\n\nIn the end, we return the plaintext by converting $b$ back to $a$.\n\n-----Test Input-----\n10 2\na\nzzz\n-----Test Output-----\nb\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 16\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter\\nafter"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n-----\nSample Input:\n5 16\ngoblok\nwhoknowswhoiswho\n-----\nSample Output:\nevil\n-----\nSample Input:\n5 16\ncryptok\ncryptok\n-----\nSample Output:\ncryptok\n-----\nSample Input:\n5 16\ncryptok\ncryptok\n-----\nSample Output:\ncryptok\n-----\nSample Input:\n5 16\ncryptok\ncryptok\n-----\nSample Output:\ncryptok\n\"\"\""
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nkey = sys.stdin.readline().rstrip()\ncipher = sys.stdin.readline().rstrip()\n\nprint(''.join(chr((ord(i) - ord(key[n - 1]) + 26 + ord(j)) % 26 + ord('a')) for i, j in zip(cipher, key[:n - 1])))\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == 'Odd'\nassert solution('5') == 'Even'\nassert solution('1') == 'Odd'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Even'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 'Either'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\nassert solution('5') == 'Odd'\n\"\"\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == 'Odd'\nassert solution(\"2\") == 'Even'\nassert solution(\"3\") == 'Either'\nassert solution(\"4\") == 'Odd'\nassert solution(\"5\") == 'Even'\n\"\"\""
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 'Either'\nassert solution('7') == 'Odd'\nassert solution('17') == 'Odd'\nassert solution('11') == 'Even'\nassert solution('13') == 'Either'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'Either'\nassert solution('1') == 'Odd'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\n\"\"\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\nassert solution('5') == 'Odd'\n\"\"\"\n\n\"\"\"\nSolution:\n\"\"\""
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == 'Odd'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\nassert solution('5') == 'Odd'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\nassert solution('5') == 'Even'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"Either\"\nassert solution(\"2\") == \"Odd\"\nassert solution(\"3\") == \"Even\"\nassert solution(\"4\") == \"Odd\"\nassert solution(\"5\") == \"Odd\"\n\"\"\""
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Either'\nassert solution('3') == 'Odd'\n\"\"\""
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\n\n------------------------------------------------------------------------------------------------------------------------\n\n6. The World\u2019s Largest Amazon Fulfillment Order\nIf you have a hard time finding any Amazon fulfillment order that might be just the right size for you, you can use this simple program to see what orders are available.\n\n-----Input-----\nThis program reads a single line from standard input. The line is in the following format:\n\n<order size> <lower bound> <upper bound> <number of orders>\nFor example, if the line is:\n\n200 300 500 3\nthen it means there are 3 orders with a size between 200 and 300, inclusive. The orders are listed with the lower bound and upper bound inclusive.\n\n-----Output-----\nThis program prints the details of the orders to standard output in the following format:\n\nOrders: <number of orders>\nOrder size: <lower bound> to <upper bound>\nOrder count: <number of orders>\nOrder ids: <one-based index 1>, <one-based index 2>,...\nFor example, if there are 3 orders with a size between 200 and 300, inclusive, then the output would be:\n\nOrders: 3\nOrder size: 200 to 300\nOrder count: 3\nOrder ids: 1, 2, 3\n-----Examples-----\nSample Input:\n200 300 500 3\nSample Output:\nOrders: 3\nOrder size: 200 to 300\nOrder count: 3\nOrder ids: 1, 2, 3\n\n------------------------------------------------------------------------------------------------------------------------\n\n7. A Simplified Travel Agency\nA school has decided to create a Simplified Travel Agency. The agency works by offering 2-day trips to students for a fee. The trips can be school or non-school.\n\nA school trip costs $100 and an individual trip costs $75. Every time a student is picked up, he/she has to pay $2.\n\nWrite a Python program that calculates the total cost for a school trip.\n\n-----Input-----\nThis program takes an integer $N$ on the first line. The next $N$ lines each contain a student\u2019s first and last name. The last line contains a trip type (School or Individual).\n\n-----Output-----\nFor every student, the program should output the total cost of the trip.\n\n-----Examples-----\nSample Input:\n3\nRavi Kumar\nKiran Kumar\nSchool\nSample Output:\n200\n130\n150\n\n------------------------------------------------------------------------------------------------------------------------\n\n8. A String Game\nAlice and Bob are playing a game. The rules of the game are as follows:\n\nAlice is given a string consisting of N characters.\nBob is given a string consisting of M characters.\nThe game begins with Alice choosing a contiguous substring of her string.\nNext, Bob chooses a contiguous substring of his string.\nThe person whose string this is is the winner of the game.\nThe loser is the other person.\n\nThe game ends when both Bob and Alice\u2019s strings are empty.\nWrite a program to play the game.\n\n-----Input-----\nThe program receives a single line with a string S of length N followed by a single line with a string T of length M.\n\n-----Output-----\nThe program should output a single line containing one of the following three strings, each on its own line:\n\nAlice: Bob\nBob: Alice\nAlice and Bob: T\nThe string T consists of the characters of the original strings, but should not contain duplicates.\n\n-----Examples-----\nSample Input:\ndaisyabc\ndbeadba\nSample Output:\nBob: daisyabc\nAlice and Bob: dbeadba\n\n------------------------------------------------------------------------------------------------------------------------\n\n9. The List Index\nYou have an array of integers,. You want to choose a group of  integers from  and then add together all of the  values. You are given a  and it takes  seconds to process one value.\n\nWhat is the minimum amount of time required to calculate the answer to the problem?\n\n-----Input-----\nThe first line of the input contains the number  denoting the number of integers to follow. The second line contains the length of the array,. The third line contains  space-separated integers denoting the values of.\n\n-----Output-----\nThe output should contain the minimum amount of time required to calculate the answer to the problem.\n\n-----Examples-----\nSample Input:\n7\n5\n4 7 8 10 12\nSample Output:\n9\n\n------------------------------------------------------------------------------------------------------------------------\n\n10. The Array Size Problem\nAn array of length  is given. An integer array  is also given.\n\nThe program must compute and print:\n\nThe number of elements in the array that are not divisible by any of the integer values in the array.\nFor example, in the array given above, there are 2 elements that are not divisible by any of the values:.\n\n-----Input-----\nThe first line of the input contains a single integer, denoting the number of elements in the array.\nThe second line contains  space-separated integers describing the array.\n\n-----Output-----\nThe output must contain a single integer denoting the answer to the problem.\n\n-----Examples-----\nSample Input:\n6\n5 6 8 10 20\nSample Output:\n4\n\n------------------------------------------------------------------------------------------------------------------------\n\n11. The Most Frequent Item\nGiven the following input, write a program to compute the most frequent item.\n\nThe first line of input contains an integer denoting the number of elements in the array. The next line contains  space-separated integers describing the array.\n\n-----Input-----\nThe first line of input contains an integer n, the size of the array. The second line contains n space-separated integers describing the array a.\n\n-----Output-----\nThe output must contain a single integer, the most frequent item in the array.\n\n-----Examples-----\nSample Input:\n6\n3 7 6 8 10 2\nSample Output:\n8\n\n------------------------------------------------------------------------------------------------------------------------\n\n12. The Moving Average\nGiven the following input, write a program to compute the moving average.\n\nThe first line of the input contains an integer n, the number of elements in the array. The next line contains n space-separated integers describing the array.\n\n-----Input-----\nThe first line of the input contains an integer n, the number of elements in the array. The second line contains n space-separated integers describing the array.\n\n-----Output-----\nThe output must contain n space-separated integers describing the moving average.\n\n-----Examples-----\nSample Input:\n4\n1 3 5 4\nSample Output:\n3\n4\n5\n4\n\n------------------------------------------------------------------------------------------------------------------------\n\n13. The Array Element Sum\nGiven the following input, write a program to compute the sum of the elements in the array.\n\nThe first line of input contains an integer n, the size of the array. The next line contains n space-separated integers describing the array.\n\n-----Input-----\nThe first line of input contains an integer n, the size of the array. The next line contains n space-separated integers describing the array.\n\n-----Output-----\nThe output must contain a single integer denoting the sum of all the elements in the array.\n\n-----Examples-----\nSample Input:\n4\n1 2 3 4\nSample Output:\n10\n\n------------------------------------------------------------------------------------------------------------------------\n\n14. Bubble Sort\nWrite a program that reads a list of integers and sorts them from smallest to largest. Do not use the built-in functions sort, sorted, or sort.\n\n-----Input-----\nThe first line of input contains an integer n, the number of integers in the list. The next line contains n space-separated integers describing the list.\n\n-----"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n314\n1\n5926\n5\n35897\n\"\"\") == \"\"\"\n3\n1\n4\n1\n5\n\"\"\"\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\nprint(solution(\"5\\n314\\n1\\n5926\\n5\\n35897\"))\nassert solution(\"5\\n9\\n1\\n6\\n5\\n7\") == \"2\\n1\\n2\\n1\\n2\"\nprint(solution(\"5\\n9\\n1\\n6\\n5\\n7\"))\nassert solution(\"5\\n9\\n1\\n1\\n5\\n7\") == \"2\\n2\\n2\\n1\\n2\"\nprint(solution(\"5\\n9\\n1\\n1\\n5\\n7\"))\n\"\"\"\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\"\"\""
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\nassert solution('5\\n3\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\n\"\"\""
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\nassert solution(\"3\\n145\\n77\\n333\") == \"4\\n3\\n3\\n4\"\nassert solution(\"10\\n1000\\n10\\n10\") == \"2\\n3\\n3\\n4\"\nassert solution(\"3\\n55\\n25\\n3\") == \"2\\n2\\n2\\n2\"\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\">1000\\n>10\\n5789\\n>10000\\n>1\") == \"4\\n1\\n4\\n1\\n5\"\nprint(\"Tests passed\")\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nfor _ in range(n):\n    sys.stdout.write(f\"{len(str(int(sys.stdin.readline())))}\\n\")\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897\\n') == '3\\n1\\n4\\n1\\n5'\n\"\"\"\n\nn = int(input())\n\nfor _ in range(n):\n    print(len(str(int(input()))))\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n5926\\n5\\n35897\\n\") == \"3\\n1\\n4\\n1\\n5\"\n\n\"\"\"\n\nimport sys\nimport math\nimport collections"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\nprint(\"Hooray!\")"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''9 5\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the\n''') == '''yes\nno\nno\nyes\nyes\n'''\nprint(solution(stdin))\n\n-----Explanation-----\nFor each pair of words, the words can be turned into each other by the following translations:\n\na -> c\nc -> t\nt -> r\no -> c\nr -> o\np -> r\ne -> t\nt -> f\nu -> h\nw -> p\nh -> w\nf -> e\ni -> e\nk -> i\nt -> r\nn -> o\nh -> p\nl -> w\ne -> h\nd -> e\n\nThese translations can be used in any order, with some letters having more than one translation.\n\nFor example, for the pair of words we and we, the correct translation for each letter is:\n\nw -> e\ne -> h\nh -> l\nl -> w\n\nThis gives us the word we.\n\n'''\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9 5\\nt\\ti r\\np\\no c\\nr\\to\\te\\tt\\tf\\tu\\th\\tw p\\nwe we\\ncan\\tthe\\twork\\tpeople\\tit of\\tthe\\tout') == 'yes\\nno\\nno\\nyes\\nyes'\n\"\"\"\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of') == 'yes\\nno\\nno\\nyes\\nyes'\n\n\"\"\"\n\nimport collections\nimport re"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\") == \"yes\\nno\\nno\\nyes\\nyes\"\nprint(\"passed\")"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9 5\\nt\\nk\\np\\no\\nr\\nt\\te\\t\\tf\\tu\\th\\tw\\t\\twe\\t\\tcan\\tt\\th\\tt\\t\\tit\\of\\tout') == 'yes'\nassert solution('9 5\\nc\\ti\\nr\\ko\\to\\t\\t\\te\\t\\tf\\tu\\th\\tw\\t\\twe\\t\\tcan\\tt\\th\\tt\\t\\tit\\of\\tout') == 'no'\n\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nimport collections\n\n\"\"\"\nimport collections\n\nM = collections.defaultdict(dict)\nN = collections.defaultdict(int)\nfor _ in range(int(input())):\n    a, b = input().split()\n    M[a][b] = 1\n    N[b] += 1\n\nfor _ in range(int(input())):\n    x, y = input().split()\n    if x in M and y in M[x]:\n        print('yes')\n    else:\n        print('no')\n\"\"\""
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 5\\nc t\\ni r\\nk p\\no c\\ror\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the') == 'yes\\nno\\nno\\nyes\\nyes\\nyes\\nyes\\nyes\\nyes\\nyes'\nassert solution('8 7\\nk g\\nc m\\nr p\\no h\\nq g\\nj o\\nj e\\nw d\\nr r\\nh i\\nk o\\nn i\\nn o\\nz r\\nt i\\nn m') == 'no\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno'\n\n-----Notes-----\nThe number of translations of letters is at least one and is at most `500`. There are at most `50` word pairs. The length of each word in the pair is at least `1` and at most `50`.\n\"\"\""
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 5\\nt i\\nr k\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe\\nwe\\nc an\\tthe\\tt f\\nu h\\nw p\") == 'yes\\nno\\nno\\nyes\\nyes'\n    pass"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 5\\nc t\\n i r\\nk p\\n o c\\n r o\\n t e\\n t f\\n u h\\n w p\\n we we\\ncan the\\nwork people\\nit of\") == \"yes\\nno\\nno\\nyes\\nyes\"\nassert solution(\"8 5\\nc t\\ni r\\nk p\\no c\\n r o\\n t e\\n t f\\n u h\\n w p\\n we we\\ncan the\\nwork people\\nit of\") == \"yes\\nno\\nno\\nyes\\nyes\"\nassert solution(\"9 5\\nc t\\n i r\\nk p\\n o c\\n r o\\n t e\\n t f\\n u h\\n w p\\n we we\\ncan the\\nwork people\\nit of\") == \"yes\\nno\\nno\\nyes\\nyes\"\nassert solution(\"9 5\\ncl t\\n i r\\nk p\\n o c\\n r o\\n t e\\n t f\\n u h\\n w p\\n we we\\ncan the\\nwork people\\nit of\") == \"yes\\nno\\nno\\nyes\\nyes\"\nassert solution(\"9 5\\nc t\\n i r\\nk p\\n o c\\n r o\\n t e\\n t f\\n u h\\n w p\\n we we\\ncan the\\nwork people\\nit of\") == \"yes\\nno\\nno\\nyes\\nyes\"\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\ror o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\") == \"yes\\nno\\nno\\nyes\\nyes\"\nassert solution(\"2 2\\nb r\\nt a\\nb r\\nc a\\na r\\na c\\nb r\\nb t\\na r\\nt a\\na c\\nb t\\nb t\\nb t\\nbb a\\nb t\\nb b\\na c\\nb b\\na c\\nbb t\\nbb t\\nbb a\\nbb b\\n\") == \"yes\\nno\"\nassert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\ror o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\") == \"yes\\nno\\nno\\nyes\\nyes\"\nassert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\ror o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\") == \"yes\\nno\\nno\\nyes\\nyes\"\nassert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\ror o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\") == \"yes\\nno\\nno\\nyes\\nyes\"\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n2 1\ncarrots?\nbunnies\n''') == 1\n\nassert solution('''\n2 1\nCarrots?\nBunnies\n''') == 1\n\nassert solution('''\n2 1\nCarnivores?\nBears\n''') == 0\n\nassert solution('''\n2 1\njessica\njames\n''') == 2\n\nassert solution('''\n2 1\nJessica\nJames\n''') == 2"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 1\ncarrots?\nbunnies''') == 1\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"2 1\nbunnies\"\"\") == \"1\"\n\nassert solution(\"\"\"3 2\nx?\ny\nz\"\"\") == \"3\"\n\nassert solution(\"\"\"6 1\na\nb\nc\nd\ne\nf\"\"\") == \"6\"\n\nassert solution(\"\"\"5 1\nx\ny\nz\na\nb\"\"\") == \"5\"\n\nprint(\"Tests passed\")\n\n\"\"\"\n  How to run the test\n  -----\n  1. Open the console in Pycharm\n  2. Select \"Run\"\n  3. Select \"Unittests\"\n  4. Select \"All\" and then \"Run\"\n\n\"\"\"\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 1\ncarrots?\nbunnies''') == 1\n\nprint(solution(input()))\n\n-----Notes-----\nTo solve this problem, you have to count the number of huffle-puff problems.\n\nYou will be given the number of contestants in the contest and the number of huffle-puff problems solved in total.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of each contestant.\n\nYou will be given a description of"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('carrots?\\nbunnies') == 1\nprint(solution(stdin_lines))\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == '1'\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 1\ncarrots?\nbunnies''') == '1'\nassert solution('''3 5\nred foxes\nexcellent developers\nexcellent developers\nexcellent developers\nexcellent developers''') == '5'\nassert solution('''6 10\nred foxes\nexcellent developers\nexcellent developers\nexcellent developers\nexcellent developers\nexcellent developers''') == '25'\nassert solution('''5 3\nred foxes\nexcellent developers\nexcellent developers\nexcellent developers\nexcellent developers''') == '0'\nassert solution('''5 4\nred foxes\nexcellent developers\nexcellent developers\nexcellent developers\nexcellent developers''') == '0'"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 1\ncarrots?\nbunnies''') == 1"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\n\"\"\"\n\nnum_of_contestants = int(stdin.readline())\nnum_of_hufflepuff_solved = int(stdin.readline())\ncontestants_list = []\n\nfor i in range(num_of_contestants):\n    contestants_list.append(stdin.readline())\n\ncarrots = 0\nfor contestant in contestants_list:\n    if \"carrots\" in contestant:\n        carrots += 1\n\nprint(carrots)\n"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\"\"\") == \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\"\"\n\n\"\"\"\nDetermining the player whose move it is\n\"\"\"\n"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|::p|:p:|:p:|:p:|:p:|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \\\n\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|::p|:p:|:p:|:p:|:p:|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \\\n\"White: Ke1,Qd1,Ra1,Rh1"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(puzzle_pieces)) == str(solution_output)"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\nassert solution(\"\"\"+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:::|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|::p|.p|::p|.p|::p|.p|::p|.p|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n|:::|...|:::|...|:p|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|::p|...|::p|.P|::p|.P|::p|.P|:P|\\n+---+---+---+---+---+---+---+---+\\n|rN|::b|::q|::k|::b|::n|:r|\\n+---+---+---+---+---+---+---+---+\\n|::n|:r|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|...|:::|...|:p|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|P|...|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P|:::|.P|:::|.P|:::|.P|:::|.P|:::|\\n+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:::|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|::p|.p|::p|.p|::p|.p|::p|.p|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n|:::|...|:::|...|:p|\\n+---+---+---+---+---+"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|::p|.p.|::p|.p.|::p|.p.|::p|.p.|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|::p|.p.|::p|.p.|::p|.p.|::p|.p.|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n''') == 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6'\nassert solution('''\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n''') == 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\nassert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|r::|b::|::q|::k|::n|:::|n::|r::|\n+---+---+---+---+---+---+---+---+\n|::p|p::|p::|p::|p::|p:::|p::|\n+---+---+---+---+---+---+---+---+\n|...|:::|n::|:::|...|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|P::|p::|p::|p::|p::|p:::|p::|\n+---+---+---+---+---+---+---+---+\n|.P|::|.P|:::|.P|:::|.P|:::|.P|\n+---+---+---+---+---+---+---+---+\n|R::|N::|B::|Q::|B::|:::|.R|::|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\nassert solution(\"1 2\") == \"Your wish is granted!\"\nassert solution(\"7 5\") == \"You will become a flying monkey!\"\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('10 2') == 'You will become a flying monkey!'\n'''\n\nfrom collections import Counter"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\">?\") == \"You will become a flying monkey!\"\nassert solution(\"+?\") == \"Your wish is granted!\"\n\"\"\"\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('4 1') == 'You will become a flying monkey!'\nassert solution('4 0') == 'Your wish is granted!'\nassert solution('5 5') == 'Your wish is granted!'\nassert solution('5 4') == 'You will become a flying monkey!'\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'You will become a flying monkey!'\nassert solution('8 3') == 'Your wish is granted!'\n\nassert solution('8 3') == 'Your wish is granted!'\nassert solution('8 3') == 'Your wish is granted!'\n\nassert solution('8 3') == 'Your wish is granted!'\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == 'Your wish is granted!'\nassert solution(\"4 3\") == 'You will become a flying monkey!'\nassert solution(\"8 3\") == 'You will become a flying monkey!'\nassert solution(\"8 1\") == 'Your wish is granted!'\nassert solution(\"10 10\") == 'Your wish is granted!'\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('8 6') == 'You will become a flying monkey!'\nassert solution('3 3') == 'Your wish is granted!'\nassert solution('3 6') == 'You will become a flying monkey!'\nassert solution('8 0') == 'Your wish is granted!'\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\nassert solution(\"1 1000000000 1000000000\") == \"You will become a flying monkey!\"\nassert solution(\"2 5\") == \"You will become a flying monkey!\"\nassert solution(\"9 3\") == \"Your wish is granted!\"\n\"\"\""
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'Your wish is granted!'\nassert solution('1 1') == 'Your wish is granted!'\nassert solution('1 10') == 'You will become a flying monkey!'\nassert solution('1 100') == 'You will become a flying monkey!'\nassert solution('1 1000') == 'You will become a flying monkey!'\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('8 4') == 'You will become a flying monkey!'\nassert solution('5 2') == 'Your wish is granted!'\nassert solution('6 5') == 'You will become a flying monkey!'\nassert solution('1 1') == 'Your wish is granted!'\n\"\"\"\n\nimport sys\n\nN, K = [int(i) for i in sys.stdin.readline().strip().split(\" \")]\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('16') == '16'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('16') == '16'\nassert solution('4') == '4'\nassert solution('8') == '8'\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"16\") == 16\n\n\"\"\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('5') == '1.41421356237'\n'''"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"16\") == \"16\"\nassert solution(\"5\") == \"16\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"16\") == \"16\"\n\"\"\"\n\nfrom sys import stdin\n\na = int(stdin.readline())\nprint(a)\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"16\") == \"16\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"8\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"16\") == \"16\"\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('16') == '16'\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('16') == 16\n\"\"\"\n\n\n\n\"\"\"\nGiven a list of integers, find the maximal possible sum of some of its elements.\n\nInput\n\nThe first input line contains an integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100). The second line contains a sequence of n integers a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u2009100).\n\nOutput\n\nPrint the maximal possible sum of some of its elements.\n\nExamples\ninputCopy\n5\n1 2 3 7 5\noutputCopy\n9\ninputCopy\n6\n1 2 3 4 5 6\noutputCopy\n12\ninputCopy\n10\n19 -4 -3 4 -2 1 3 7 13 21 -1\noutputCopy\n19\ninputCopy\n1\n-1\noutputCopy\n0\ninputCopy\n3\n-1 1 -3\noutputCopy\n1\ninputCopy\n5\n1 -1 2 3 -5 4\noutputCopy\n5\n\"\"\"\n\n\"\"\"\nGiven an array of integers, return the difference between the largest and smallest values in the array.\n\nExample\n\nFor a = [1, 2, 3, 4, 5], the output should be\narrayDifference(a) = 4.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer a\n\nA non-empty array.\n\nGuaranteed constraints:\n1 \u2264 a.length \u2264 105,\n-104 \u2264 a[i] \u2264 104.\n\n[output] integer\n\nThe difference between the largest and smallest values in the array.\n\"\"\"\n\n\"\"\"\nGiven an array, find the integer that appears an odd number of times.\n\nThere will always be only one integer that appears an odd number of times.\n\nExamples\n[7] should return 7, because it occurs 1 time (which is odd).\n\n[0] should return 0, because it occurs 1 time (which is odd).\n\n[0, 1, 0] should return 1 because it occurs 1 time (which is odd).\n\n[0, 0, 0] should return 0 because no number occurs an odd number of times.\n\"\"\"\n\n\"\"\"\nGiven a string, return a \"rotated left 2\" version where the first 2 chars are moved to the end. The string length will be at least 2.\n\nExamples:\n\"Hello\" -> \"lloHe\"\n\"java\" -> \"vaja\"\nReturn the original string if \"rotated left 2\" is not possible.\n\"\"\"\n\n\"\"\"\nGiven a string, compute recursively a new string where all the lowercase 'x' chars have been moved to the end of the string.\n\nExamples:\n\"manxdog\" -> \"dogxman\"\n\"xxrexx\" -> \"rexxxx\"\n\"xxx\" -> \"\" (empty string)\n\"x\" -> \"\" (empty string)\nReturn the original string if it does not contain any lowercase 'x' chars.\n\"\"\"\n\n\"\"\"\nGiven a string, compute recursively a new string where all the odd-indexed characters are at the beginning of the string. The even-indexed characters should be at the end of the string.\n\nExamples:\n\"Codewars\" -> \"orswC\"\n\"Even\" -> \"evn\"\n\"Odd\" -> \"odd\"\nReturn the original string if index is not multiple of 2.\n\"\"\"\n\n\"\"\"\nGiven a string, compute recursively a new string where all the characters are duplicated once. The only characters that should appear in the new string are 'a' and 'b'.\n\nExamples:\n\"ab\" -> \"aba\"\n\"aa\" -> \"aaa\"\n\"baab\" -> \"baaba\"\n\"code\" -> \"code\"\nReturn the original string if it does not contain the letter 'a'.\n\"\"\"\n\n\"\"\"\nGiven a string, compute recursively a new string where all the vowels are removed.\n\nExamples:\n\"My name is Mike\" -> \"My name is mike\"\n\"are you Mike\" -> \"rre yooo mike\"\n\"hello world!\" -> \"hll wrld!\"\nReturn the original string if it does not contain any vowels.\n\"\"\"\n\n\"\"\"\nGiven a string, compute recursively a new string where all the adjacent chars are now separated by a \"*\".\n\nExamples:\n\"coding\" -> \"c*o*i*n*g\"\n\"xx\" -> \"x*x\"\nReturn the original string if it does not contain any adjacent chars.\n\"\"\"\n\n\"\"\"\nGiven a string, compute recursively a new string where identical chars that are adjacent in the original string are separated from each other by a \"*\".\n\nExamples:\n\"code\" -> \"c*o*e*d\"\n\"xxyyz\" -> \"x*xy*y*z\"\n\"cbbb\" -> \"c*bb*\"\n\"cabb\" -> \"c*a*b*\"\nReturn the original string if it does not contain any identical chars.\n\"\"\"\n\n\"\"\"\nGiven an array of integers, compute recursively the number of times that the largest element occurs in the array.\n\nExamples\n[13, 19, 13, 13] should return 3\n[13, 19, 13, 13, 13] should return 5\n[5, 1, 2, 5] should return 2\n[17, 3, 3, 5, 17, 13, 17, 5] should return 3\n\"\"\"\n\n\"\"\"\nGiven a string, compute recursively a new string where all the lowercase 'x' chars have been moved to the end of the string.\n\nExamples\n\"manxdog\" -> \"dogxman\"\n\"xxrexx\" -> \"rexxxx\"\n\"xxx\" -> \"\" (empty string)\n\"x\" -> \"\" (empty string)\nReturn the original string if it does not contain any lowercase 'x' chars.\n\"\"\"\n\n\"\"\"\nGiven a string, compute recursively a new string where identical consecutive chars are grouped together and all the spaces are removed.\n\nExamples\n\"1 2 3 4 5 6 7 8 9 10 b 12 c\" -> \"12bc\"\n\"1 2 3 4 5 6 7 8 9 10 b 12 c d\" -> \"12bc d\"\n\"1 2 3 4 5 6 7 8 9 10 b 12 c d e\" -> \"12cd\"\n\"1 2 3 4 5 6 7 8 9 10 b 12 c d e f\" -> \"12cd ef\"\nReturn the original string if it does not contain any spaces.\n\"\"\"\n\n\"\"\"\nGiven an array of numbers, compute recursively if all the numbers are consecutive integers.\n\nExamples\n[1,2,3,4,5] should return true, since 1,2,3,4,5 are consecutive integers.\n[1,2,6,7,8] should return false, since there are two missing numbers between 1 and 8.\n[2,3,4,5] should also return false.\n[0,1,2,3,4,5] should also return false.\nReturn true if the list is empty.\n\"\"\"\n\n\"\"\"\nGiven a string, compute recursively a new string where all the lowercase 'x' chars have been moved to the end of the string.\n\nExamples\n\"manxdog\" -> \"dogxman\"\n\"xxrexx\" -> \"rexxxx\"\n\"xxx\" -> \"\" (empty string)\n\"x\" -> \"\" (empty string)\nReturn the original string if it does not contain any lowercase 'x' chars.\n\"\"\"\n\n\"\"\"\nGiven a string, compute recursively a new string where identical consecutive chars are merged into a single one and the consecutive runs of whitespace are removed.\n\nExamples\n\"1 2 3 4 5\" -> \"1235\"\n\"1 2 3 4 5 6\" -> \"1236\"\n\"1 2 3 4 5 6 7\" -> \"1237\"\n\"1 2 3 4 5 6 7 8\" -> \"1238\"\n\"xx y x  \" -> \"xy\"\n\"xx y x  z\" -> \"xyz\"\nReturn the original string if it does not contain any whitespace characters.\n\"\"\"\n\n\"\"\"\nGiven an array of integers, compute recursively the number of"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(4)\n\n----\n\nclass Server(object):\n    def __init__(self, task_queue, seconds_left):\n        pass\n\n    def add_task(self, task):\n        pass\n\n    def tick(self):\n        pass\n\nclass Manager(object):\n    def __init__(self, number_of_servers, seconds_left):\n        pass\n\n    def add_task(self, task):\n        pass\n\n    def tick(self):\n        pass\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_server(self):\n        server = Server([1, 2, 3], 180)\n        server.add_task(1)\n        self.assertEqual(server.tick(), [1, 2, 3])\n        self.assertEqual(server.tick(), [])\n        server.add_task(1)\n        self.assertEqual(server.tick(), [1, 2, 3])\n        server.add_task(1)\n        server.add_task(1)\n        server.add_task(1)\n        self.assertEqual(server.tick(), [1, 2, 3])\n\n    def test_manager(self):\n        manager = Manager(3, 180)\n        manager.add_task(1)\n        self."
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nprint(solution(stdin))\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"6 180\\n\"\n    \"45 30 55 20 80 20\"\n) == \"4\"\nprint(solution(input()))\n\n-----Solution-----\nfrom collections import deque\n\nnum_tasks, time_limit = map(int, input().split())\ntask_times = list(map(int, input().split()))\n\nqueue = deque()\nfor task_time in task_times:\n    queue.append(task_time)\n\nnum_completed = 0\nwhile len(queue) > 0 and time_limit > 0:\n    task_time = queue.popleft()\n    time_limit -= task_time\n    num_completed += 1\n\nprint(num_completed)"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 180\\n5 7 10\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20') == '4'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 180\\n3 5 7 8\\n') == '3'\nassert solution('5 180\\n3 5 7 8\\n') == '4'\n\n\"\"\"\n\nimport math\nimport collections"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 180\\n1 2 3') == '1'\n\n\"\"\"\n\nT, N = [int(x) for x in stdin.readline().split()]\nline = stdin.readline().strip()\n\narr = [int(x) for x in line.split()]\n\ncount = 0\nfor i in range(len(arr)):\n    if arr[i]*i <= T:\n        count += 1\n    else:\n        break\n\nprint(count)\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 30\\n1\\n2\\n3\\n4\\n') == '4'\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 180\\n45 30 55 20 80 20\") == 4\nassert solution(\"2 100\\n1 10\") == 1\nassert solution(\"1 10\\n10\") == 1\nassert solution(\"2 100\\n10 20\") == 1\nassert solution(\"2 100\\n10 20 10 20\") == 1\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20') == '4'\n\"\"\"\n\nfrom math import ceil\n\nn, T = map(int, input().split())\nl = list(map(int, input().split()))\n\nans = 0\nfor i in l:\n    ans += ceil(i / T)\n\nprint(ans)"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\nprint(\"Test PASSED\")\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\"\"\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\nassert solution('4\\n35\\n2\\n41') == '50'\nassert solution('4\\n35\\n2\\n41\\n4\\n5') == '49'\n\n\"\"\"\n\nn = int(stdin.readline())\nlengths = list(map(int, stdin.readline().split('\\n')[0].split()))\nlengths.sort()\nlength = 0\nfor i in range(n):\n    length += lengths[i]\n    if i % 2 == 0:\n        length -= lengths[i] / 2\nprint(int(length))\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '3'\nassert solution('1\\n2\\n3\\n4') == '10'\nassert solution('1\\n2\\n3\\n4\\n5') == '15'\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"4\\n21\\n34\\n18\\n9\"\n) == \"79\"\nprint(solution(stdin, 20))\n\n-----Solution-----"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\nassert solution(\"4\\n18\\n34\\n21\\n9\") == \"66\""
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n21\n34\n18\n9''') == '79'\nprint('Test pass.')\n\n-----Explanation-----\nThere are $4$ rods, the lengths of which are given in the first line. For each rod, the blacksmith makes a fuse with a second rod. The length of the fused rod is the sum of the lengths of the two rods.\n\nThe fused rod will have length $21+34+18+9=79$ cm. The fused rod loses $1$ cm of its length, so its new length is $79-1=78$ cm.\n\nThe blacksmith is trying to get some value from his jewels, but for his own purposes. To get the same value for his own purposes, he wants to make the fused rod the biggest possible. Since the fused rod is the biggest possible, the jumbo javelin will have its length equal to the length of the fused rod.\n\nAs a javalin thrower, Jessica is happy with the result. She is happy, because she wants to become a javelin thrower, a javalin thrower, a javelin thrower, an javelin thrower!\n'''\nimport sys\nimport math\n\nn = int(input())"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\nprint(solution(\"4\\n21\\n34\\n18\\n9\"))\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\nassert solution(\"5 1 3 4\\n5\") == \"impossible\"\n\"\"\"\n\nfrom collections import deque, defaultdict\nimport random"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n\"\"\"\n\nimport random\nfrom collections import defaultdict\nfrom functools import reduce\nfrom typing import Callable, List, NamedTuple, Optional, Tuple, Union\n\nfrom icontract import require, ensure, DBC\n\n\nclass Rand(NamedTuple):\n    num: int\n    denom: int\n\n\nclass Solution(NamedTuple):\n    s: int\n    c: List[int]\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'impossible'\nassert solution('0 1 4') == '2 3 0'\n'''\n\nimport sys\nimport random"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n\"\"\"\n\nimport random"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 3 3 4\n0 1 4''') == '2 3 0'\nassert solution('''5 3 3 4\n0 1 4''')!= '2 3 1'\nassert solution('''5 3 3 4\n0 1 4''')!= '0 1 4'\nassert solution('''5 3 3 4\n0 1 4''')!= '1 2 3'\nassert solution('''5 3 3 4\n0 1 4''')!= '1 1 1'"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(expected_output(input()))\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 3 4\\n0 1 4\") == \"2 3 0\"\nassert solution(\"4 1 3 4\\n0 1 1\") == \"impossible\"\nassert solution(\"2 1 2 1\\n0 1\") == \"2 2 0\"\nassert solution(\"1 1 1 1\\n0\") == \"impossible\"\nassert solution(\"4 1 3 4\\n0 0 4\") == \"2 3 0\"\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 4\\n0 1 4\") == \"2 3 0\"\n\nassert solution(\"3 5 4 2\\n0 1 2 3\") == \"2 3 0 1\"\n\nassert solution(\"7 4 4 8\\n0 1 2 3 4 5 6 7\") == \"4 0 1 3 7 2 6 5\"\n\nassert solution(\"8 3 6 3\\n0 1 2 3 4 5 6 7 8 9 10\") == \"3 7 8 9 0 1 6 4 2 10 5\"\n\nassert solution(\"11 3 3 7\\n0 1 2 3 4 5 6 7 8 9 10 11\") == \"5 10 0 1 3 7 2 9 6 11 4 8\""
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 3 4\\n0 1 4') == '2 3 0'\n\n\"\"\"\n\nimport math\nimport random\nimport statistics"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 0 0 0 0 0\") == \"6 0 0 0 0 0\"\nassert solution(\"2 1 2 2 2 8\") == \"1 1 1 1 1 1\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 1 2 2 2 6\") == \"0 0 0 1 0 0\"\nassert solution(\"0 0 0 0 0 0\") == \"0 0 0 0 0 0\"\nassert solution(\"10 10 10 10 10 10\") == \"0 0 0 0 0 0\"\n\n\"\"\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 1 2 2 2 7\\n') == '1 0 0 0 0 1'\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 1 2 2 2 8\") == \"0 0 0 0 0 0\"\nassert solution(\"0 1 2 2 2 8\") == \"1 0 0 0 0 1\"\nassert solution(\"0 1 2 2 2 8\") == \"0 0 0 0 0 0\"\nassert solution(\"1 2 2 2 8\") == \"0 0 0 0 0 0\"\n\"\"\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''0 1 2 2 2 7''') == '1 0 0 0 0 1'\nassert solution('''0 1 2 2 2 7\n0 0 0 0 0 0''') == '0 1 0 0 0 1'\nassert solution('''0 1 2 2 2 7\n0 0 0 0 0 0\n0 0 0 0 0 0''') == '1 0 0 0 0 1'\nassert solution('''0 1 2 2 2 7\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0''') == '0 1 0 0 0 1'\nassert solution('''0 1 2 2 2 7\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0''') == '1 0 0 0 0 1'\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 0 0 0 0 0\") == \"6 0 0 0 0 0\"\n\"\"\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"1 1 1 1 1 1\") == \"8 0 0 0 0 8\"\nassert solution(\"0 0 0 0 0 0\") == \"8 8 8 8 8 8\"\nassert solution(\"1 1 1 1 1 1\") == \"0 0 0 0 0 0\"\nassert solution(\"0 0 0 0 0 0\") == \"0 0 0 0 0 0\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '0 0 0 0 0 0'\nassert solution('1 0 0 1 1 0') == '0 0 0 0 1 0'\nassert solution('1 0 0 1 1 1') == '0 1 0 0 0 0'\nassert solution('0 0 0 1 0 1') == '1 1 0 0 0 0'\nassert solution('0 1 0 0 0 1') == '1 0 0 0 0 1'\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == '1.3334'\nassert solution(\"3\\n123456 0.6666\\nqwerty 0.3334\\ntrash 5.4321\") == '1.3334'\nassert solution(\"4\\n123456 0.6666\\nqwerty 0.3334\\ntrash 5.4321\\nzasdf 2.3214\") == '1.3334'\nassert solution(\"500\\n123456 0.6666\\nqwerty 0.3334\\ntrash 5.4321\\nzasdf 2.3214\") == '1.3334'\nassert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == '1.3334'\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '2\\n123456 0.6666\\nqwerty 0.3334'\n) == '1.3334'\n\n-----Problem-----\nThe number of attempts to find the correct password is known. In order to improve your security, you want to know the probability that the correct password is the $ith$ password in the list. For example, if there are $5$ passwords in the list, the probability of the correct password being the $1$th password is $0.3333$.\n\nWrite a program that takes a positive integer $N$, the number of passwords in the list, and prints the probability of the correct password being the $i$th password in the list, for $1<=i<=N$.\n\n-----Constraints-----\n1 \u2264 N \u2264 500\n\n-----Test Cases-----\nSample Case 0\nSample Input 0\n2\n123456 0.6666\nqwerty 0.3334\nSample Output 0\n0.3333\nSample Case 1\nSample Input 1\n3\n123456 0.9999\nqwerty 0.1111\nqwerty 0.2222\nSample Output 1\n0.2222\n\n-----Solution-----\n\n\"\"\"\n\nn = int(input())\nl = []\nfor _ in range(n):\n    l.append(tuple([float(x) for x in input().split()]))\nl.sort()\ncnt = 0\nfor i in range(n):\n    cnt += l[i][0]\nprint(round(cnt, 4))\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\""
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == '1.3334'\nprint(solution(\"2\\n123456 0.6666\\nqwerty 0.3334\"))\n\n-----Problem-----\nN = int(input())\npasswords = []\nprobs = []\nfor i in range(N):\n    passwords.append(input())\n    probs.append(float(input()))"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0.25'\nassert solution('1\\n1\\n1') == '0.25'\nassert solution('1\\n1\\n0.25') == '0.25'\nassert solution('1\\n0.25\\n1') == '0.5'\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\nassert solution(\"2\\nqwerty 0.3334\\n123456 0.6666\") == \"1.3334\"\n\"\"\"\n\nimport sys\nfrom math import e, log\n\nn = int(sys.stdin.readline())\nlst = [None]*n\nfor i in range(n):\n    lst[i] = sys.stdin.readline().split()"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n\"\"\"\n\n\"\"\"\nn = int(input())\n\nlist_of_passwords = []\nlist_of_probabilities = []\nfor _ in range(n):\n    list_of_passwords.append(input().split())\n    list_of_probabilities.append(input().split()[1])\n\nfor i in range(len(list_of_passwords)):\n    list_of_passwords[i][0] = list_of_passwords[i][0].lower()\n\nlist_of_probabilities = [float(i) for i in list_of_probabilities]\nlist_of_probabilities = [i/sum(list_of_probabilities) for i in list_of_probabilities]"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\nprint(solution(\"4\\n123 123.45 0.1111\\nabc.def 0.2222\\nzxcv.qwe 0.3333\\nwww.hghg.jkl 0.4444\\n\"), \"0.11111\")\nprint(solution(\"1\\n123.456 0.1111\\nwww.hghg.jkl 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0.1111\\n2.2222 0.1111\\n3.3333 0.1111\"), \"1.1111\")\nprint(solution(\"1\\n1.1111 0"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\""
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1\\n1 2 4') == '1'"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_stdin) == test_stdout"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nprint(solution('1 2 3'))\nassert solution('1 2 3') == '1'\nprint(solution('3 1'))\nassert solution('3 1') == '1'\nprint(solution('3 3'))\nassert solution('3 3') == '0'\nprint(solution('3 1'))\nassert solution('3 1') == '1'\nprint(solution('1 2 3'))\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\nassert solution('4 1\\n1 2 4') == '1'\nassert solution('1 3\\n1') == '1'\nassert solution('1 2\\n1') == '1'\nassert solution('3 1\\n1 1') == '1'\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n2\") == \"1\"\nassert solution(\"5 3\\n1 2 4 3 1\") == \"1\"\nassert solution(\"6 6\\n1 2 3 4 5 6\") == \"1\"\nassert solution(\"7 5\\n1 2 3 4 5 6 7\") == \"1\"\nassert solution(\"8 4\\n1 2 3 4 5 6 7 8\") == \"1\"\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '2 1\\n1 2'\n) == '1'\n\nassert solution(\n    '3 1\\n1 2 4'\n) == '1'\n\nassert solution(\n    '3 2\\n2 3'\n) == '2'\n\nassert solution(\n    '5 2\\n2 4 6 3 8'\n) == '4'\n\nassert solution(\n    '100 1\\n100'\n) == '100'\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 2 3\") == '1'\nassert solution(\"4 5\\n3 3 5 7\") == '1'\n\nassert solution(\"100 100\\n30 20 10 50 100 150 10 100 50 20 50 30 100 50 50\") == '1'\n\"\"\"\nfrom collections import Counter\nfrom math import inf"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('23') == 'G:                                    \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:                                                  *        \\ng: -----------------------------------------------*----------\\nf:                                                           \\ne: ----------------------------------------------------------\\nd:                                                           \\nc:                                                           \\nb:                                                           \\na: ----------------------------------------------------------'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n----\n\nYou are given a song in which notes are denoted by the first character of the note name. The notes are arranged on different staves, with some notes on one staff and others on another staff. Each staff is represented by a single line of 5 characters. The first character on each staff is the note at the first beat of the first bar. The fifth character on the staff is the note at the first beat of the second bar. We will use a letter for each note, with A for the first note on each staff and B for the second note on each staff. Note that the first note in a bar is denoted by the same letter as the first note of the next bar.\n\nFor example, the song\n\nABCBABC\n\nrepresents the first bar with one note on staff one: A, the second bar with one note on staff one: B, the third bar with two notes on staff two: A, A, and the fourth bar with one note on staff two: B.\n\nYour task is to convert the song into a text-based representation. For example,\n\nABCBABC\n\nABABAC\n\nA      B    A\nB      A    A\nA      A    B\n\nWrite a program that takes as input the song represented as a string and outputs the song in text-based representation, with each staff on a separate line. Each line should have the same number of characters as the staff.\n\n-----"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\nC C\\nD D') == 'G:                                           \\nF: -------------------------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **'\nassert solution('3\\nB B B\\nC C C\\nD D D') == 'G:                                           \\nF: -------------------------------------*----------------------*-------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------*-----------------*-----*------\\nA:                                                  *        '\nassert solution('4\\nA A A\\nB B B\\nC C C\\nD D D') == 'G:                                           \\nF: -------------------------------------*----------------------*-------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------*-----------------*-----*------\\nA:                                                   *        '"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:                                                                        \nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\"\n\n\"\"\"\nExample of the return value\nG:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n\"\"\"\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\"\nprint(\"The local tests are done. The solution is correct!\")"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\") == \"G:           \\nF: -------------------------------------*--------------------\\nE:       *\\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:                                                  *\\ng: -----------------------------------------------*----------\\nf:                                                   \\ne: ----------------------------------------------------------\\nd:                                                   \\nc:                                                   \\nb:                                                   \\na: ----------------------------------------------------------\"\n\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(sample_input) == sample_output\n\"\"\"\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \\\n\"G:                                                          \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:                                                  *        \\ng: -----------------------------------------------*----------\\nf:                                                               \\ne: ----------------------------------------------------------\\nd:                                                               \\nc:                                                               \\nb:                                                               \\na: ----------------------------------------------------------\"\n\"\"\"\n\nimport unittest\nimport sys\nimport numpy as np\n\nlines = sys.stdin.readlines()"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:                                           \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:                                                  \\ng: -----------------------------------------------*----------\\nf:                                                               \\ne: ----------------------------------------------------------\\nd:                                                               \\nc:                                                               \\nb:                                                               \\na: ----------------------------------------------------------'\n\"\"\"\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\", solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\", solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\", solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\", solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\", solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\", solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\", solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 1') == 'possible'\nassert solution('2 2 3') == 'impossible'\nassert solution('2 3 3') == 'impossible'\n\n-----Notes-----\nYou are not allowed to use functions like sum, min, max, sort, sorted, or any built-in functions other than math.gcd.\n\n\"\"\"\n\nimport sys\n\nfrom typing import List\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'possible'\nassert solution('1 2 3') == 'possible'\nassert solution('1 2 3 5') == 'possible'\nassert solution('1 2 1 3') == 'possible'\nassert solution('1 3 5') == 'possible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 1\") == \"possible\"\nassert solution(\"5 1 1\") == \"possible\"\nassert solution(\"5 2 1\") == \"possible\"\nassert solution(\"5 3 2\") == \"possible\"\nassert solution(\"5 3 3\") == \"possible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('3\\n0 1 1') == 'possible'\nassert solution('3\\n1 1 0') == 'impossible'\nassert solution('3\\n0 1 1') == 'impossible'\nassert solution('3\\n2 1 1') == 'possible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 1\\n1 1 1\") == \"possible\"\nassert solution(\"4 1 1\\n1 1 1\") == \"impossible\"\nassert solution(\"3 5 4\\n1 1 1\") == \"impossible\"\nassert solution(\"3 5 5\\n1 1 1\") == \"impossible\"\nassert solution(\"3 5 6\\n1 1 1\") == \"possible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\n\n\"\"\""
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 1\") == \"possible\"\nassert solution(\"4 1 1\") == \"impossible\"\n\"\"\"\n\nfrom random import randint\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3, 1, 1, 1) == 'possible'\nassert solution(100, 1, 1, 1) == 'possible'\nassert solution(3, 1, 1, 1) == 'possible'\nassert solution(100, 4, 1, 1) == 'possible'\nassert solution(100, 2, 1, 1) == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"3\\n2 1 1\") == \"impossible\"\nassert solution(\"4\\n2 2 2 2\") == \"impossible\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"possible\"\nassert solution(\"7\\n3 3 3 3 3 3 3\") == \"impossible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3\n1 1 1\"\"\") == \"possible\"\nassert solution(\"\"\"3\n2 1 2\"\"\") == \"possible\"\nassert solution(\"\"\"3\n3 1 1\"\"\") == \"impossible\"\nassert solution(\"\"\"5\n1 1 1 1 1\"\"\") == \"impossible\"\nassert solution(\"\"\"100\n
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 3 2 1 2 2 1 1 3\") == \"3\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == 3\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''10\n4 3 3 2 1 2 2 1 1 3''') == 3\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == \"3\""
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == \"3\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\n4 3 3 2 1 2 2 1 1 3') == 3\n\"\"\"\n\nimport sys\nimport typing\nfrom collections import deque"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('5 4 3 2 1') == 3\nassert solution('5 4 3 1 1') == 2\n'''"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4\\n3\\n2\\n1\\n2\\n1\\n1\\n3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE'\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"a\\nb\") == \"\"\n\n-----Problem-----\nThe $4 \\times 100$ m relay is due to start in one hour. \n\nFor each problem, you are given the list of the names of the runners in the pool and the times when each of them will run the first leg and the times when each of them will run any of the other 3 legs. You are also given the name of the sprinter who will run the last leg and the time it takes him to run it.\n\nYou are also given the name of the sprinter who will run the second last leg and the time it takes him to run it. For simplicity, we assume that the second last sprinter can run the last leg on time.\n\nYou are to find a team of four runners which will complete the relay in the least amount of time. Find a team of four with the least total time for the second and third legs.\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\"\n\n\"\"\""
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\\nCARTER\\nBOLT\\nPOWELL\"\nprint(solution(\"3\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\"))\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\\n1\\n2\\n3\\n4\\n5\\n6\\n\") == \"5.0\"\nassert solution(\"\\n1\\n1\\n1\\n1\\n1\\n1\\n\") == \"1.0\"\nassert solution(\"\\n2\\n3\\n4\\n5\\n6\\n\") == \"6.0\"\nassert solution(\"\\n2\\n3\\n4\\n5\\n6\\n\") == \"6.0\"\n\"\"\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\nASHMEADE 9.90 8.85\nBLAKE 9.69 8.72\nBOLT 9.58 8.43\nCARTER 9.78 8.93\nFRATER 9.88 8.92\nPOWELL 9.72 8.61\n\"\"\") == '35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE'\n\nassert solution(\"\"\"\n8.70 8.19\nVIRBET 8.07 8.17\nMARQUET 8.44 8.50\nNURRI 8.56 8.02\nEZRA 8.32 8.22\nTANDEM 8.12 8.30\nGUNNAR 8.21 8.18\nTHOR 8.00 8.28\n4.56 8.30\n7.64 8.22\n\"\"\") == '8.36\\nGUNNAR\\nTHOR\\n4.56\\nEZRA'\n\nassert solution(\"\"\"\n9.56 8.43\nRANDOM 8.58 8.30\nVETTOR 8.15 8.28\nLENNE 11.63 8.32\nKRANG 8.61 8.27\nHORNE 8.62 8.31\n\"\"\") == '9.56\\nLENNE\\nKRANG'\n\nassert solution(\"\"\"\nXCEL 8.10 8.14\nPUMP 8.08 8.24\nMADAL 8.16 8.41\nKUHN 8.12 8.36\n\")\") == '8.32\\nKUHN'\n\"\"\") == '8.32\\nKUHN'\n\nassert solution(\"\"\"\nBOE 8.08 8.30\nDARK 8.33 8.23\nKEEVES 8.21 8.49\nADIDAS 8.19 8.44\n\"\"\") == '8.24\\nADIDAS\\nKEEVES'"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\nA 9.90 8.85\\nB 9.69 8.72\\nC 9.58 8.43\\nD 9.78 8.93\\nE 9.88 8.92\\nF 9.72 8.61') == '35.54\\nC\\nD\\nA'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\\n\".join([\n    \"6\",\n    \"ASHMEADE 9.90 8.85\",\n    \"BLAKE 9.69 8.72\",\n    \"BOLT 9.58 8.43\",\n    \"CARTER 9.78 8.93\",\n    \"FRATER 9.88 8.92\",\n    \"POWELL 9.72 8.61\"])) == \"35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE\"\n\n_input = \"\"\"\\\n6\nASHMEADE 9.90 8.85\nBLAKE 9.69 8.72\nBOLT 9.58 8.43\nCARTER 9.78 8.93\nFRATER 9.88 8.92\nPOWELL 9.72 8.61\"\"\"\nassert solution(_input) == \"35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == '2'\n\n-------Test Case Description-------\n2\n1 2\n2 4\n5 6\n\nAnswer:\n2\n\nExplanation:\nWe can assign room 1 to the minion 1, and room 2 to the minion 2.\n\n------Question------\nYou are the boss of ACM (Air Conditioned Minions), an upstanding company with a single goal of world domination.\n\nThe company has $N$ minions. Each minion works evilly from early morning until evening inside a super secret bunker in Helsinki. After much deliberation, you decided to move your headquarters to Singapore. However, unlike Helsinki, Singapore is very hot, so the entire complex must be air conditioned. With strenuous working hours (under minimum wage too), it is imperative that all your minions work under optimal work condition. In particular, all minions must like the temperatures of the rooms they are in.\n\nYou are planning to construct several rooms in your new hideout, and assign your minions there. You fix the temperature of each room to any value you want (different rooms may have different temperatures). After you fix the temperatures, you will assign each of your minions to these rooms (a room can hold any number of minions). You want all minions to like the temperatures of their assigned rooms. Each minion likes an interval of temperature, and these preferences will be given to you.\n\nAir conditioners are very expensive to maintain. Thus, you want to construct as few rooms as possible. What is the minimum number of rooms you need to set up such that it would be possible to assign minions to rooms as discussed earlier?\n\n-----Input-----\nThe first line contains a non-negative integer $2 \\leq N \\leq 100$, giving the number of minions in your company. The next $N$ lines each describe the temperature preferences of all your minions. The $i$-th line consists of two single space separated integers $L$ and $U$ ($1 \\le L \\le U \\le 2N$), which denotes that the $i$-th minion likes any temperature between $L$ and $U$, inclusively.\n\n-----Output-----\nPrint an integer denoting the minimum number of rooms you need to set up such that it would be possible to assign minions to rooms as discussed earlier.\n\n-----Examples-----\nSample Input:\n3\n1 2\n2 4\n5 6\nSample Output:\n2\n\n-------Test Case Description-------\n2\n1 2\n2 4\n5 6\n\nAnswer:\n2\n\nExplanation:\nWe can assign room 1 to the minion 1, and room 2 to the minion 2.\n\n------Question------\nYou are the boss of ACM (Air Conditioned Minions), an upstanding company with a single goal of world domination.\n\nThe company has $N$ minions. Each minion works evilly from early morning until evening inside a super secret bunker in Helsinki. After much deliberation, you decided to move your headquarters to Singapore. However, unlike Helsinki, Singapore is very hot, so the entire complex must be air conditioned. With strenuous working hours (under minimum wage too), it is imperative that all your minions work under optimal work condition. In particular, all minions must like the temperatures of the rooms they are in.\n\nYou are planning to construct several rooms in your new hideout, and assign your minions there. You fix the temperature of each room to any value you want (different rooms may have different temperatures). After you fix the temperatures, you will assign each of your minions to these rooms (a room can hold any number of minions). You want all minions to like the temperatures of their assigned rooms. Each minion likes an interval of temperature, and these preferences will be given to you.\n\nAir conditioners are very expensive to maintain. Thus, you want to construct as few rooms as possible. What is the minimum number of rooms you need to set up such that it would be possible to assign minions to rooms as discussed earlier?\n\n-----Input-----\nThe first line contains a non-negative integer $2 \\leq N \\leq 100$, giving the number of minions in your company. The next $N$ lines each describe the temperature preferences of all your minions. The $i$-th line consists of two single space separated integers $L$ and $U$ ($1 \\le L \\le U \\le 2N$), which denotes that the $i$-th minion likes any temperature between $L$ and $U$, inclusively.\n\n-----Output-----\nPrint an integer denoting the minimum number of rooms you need to set up such that it would be possible to assign minions to rooms as discussed earlier.\n\n-----Examples-----\nSample Input:\n3\n1 2\n2 4\n5 6\nSample Output:\n2\n\n-------Test Case Description-------\n2\n1 2\n2 4\n5 6\n\nAnswer:\n2\n\nExplanation:\nWe can assign room 1 to the minion 1, and room 2 to the minion 2.\n\n------Question------\nYou are the boss of ACM (Air Conditioned Minions), an upstanding company with a single goal of world domination.\n\nThe company has $N$ minions. Each minion works evilly from early morning until evening inside a super secret bunker in Helsinki. After much deliberation, you decided to move your headquarters to Singapore. However, unlike Helsinki, Singapore is very hot, so the entire complex must be air conditioned. With strenuous working hours (under minimum wage too), it is imperative that all your minions work under optimal work condition. In particular, all minions must like the temperatures of the rooms they are in.\n\nYou are planning to construct several rooms in your new hideout, and assign your minions there. You fix the temperature of each room to any value you want (different rooms may have different temperatures). After you fix the temperatures, you will assign each of your minions to these rooms (a room can hold any number of minions). You want all minions to like the temperatures of their assigned rooms. Each minion likes an interval of temperature, and these preferences will be given to you.\n\nAir conditioners are very expensive to maintain. Thus, you want to construct as few rooms as possible. What is the minimum number of rooms you need to set up such that it would be possible to assign minions to rooms as discussed earlier?\n\n-----Input-----\nThe first line contains a non-negative integer $2 \\leq N \\leq 100$, giving the number of minions in your company. The next $N$ lines each describe the temperature preferences of all your minions. The $i$-th line consists of two single space separated integers $L$ and $U$ ($1 \\le L \\le U \\le 2N$), which denotes that the $i$-th minion likes any temperature between $L$ and $U$, inclusively.\n\n-----Output-----\nPrint an integer denoting the minimum number of rooms you need to set up such that it would be possible to assign minions to rooms as discussed earlier.\n\n-----Examples-----\nSample Input:\n3\n1 2\n2 4\n5 6\nSample Output:\n2\n\n-------Test"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == 2"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n1 2\n2 4\n5 6''') == 2\n\n\"\"\""
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 1\\n6 4\\n7 8\\n4 3\\n3 5\\n5 9') == '2'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == '2'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 2\\n3 4\\n5 6\\n\") == \"2\"\n\nassert solution(\"3\\n1 2\\n3 4\\n5 6\\n\") == \"3\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == '2'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2\n2 4\n5 6''') == 2\nprint('Test pass.')"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == 2\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2\\n2 4\\n5 6\") == 2\n\"\"\"\n\nimport math\nimport sys\nimport unittest\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('hehey') == 'heehee'\n\nassert solution('heey') == 'heehee'\n\nassert solution('heehee') == 'heeee'\n\nassert solution('heeeee') == 'heeee'\n\nassert solution('heyhey') == 'heehee'"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('hey') == 'heey'\nassert solution('yea') == 'yeey'\nassert solution('hello') == 'heeellloooo'\nassert solution('hi there') == 'hiiiiieeeee'\n\"\"\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"heey\") == \"hee\"\nassert solution(\"hye\") == \"hye\"\nassert solution(\"eh\") == \"hee\"\nassert solution(\"ell\") == \"elle\"\n\"\"\""
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('hey') == 'heey'\n\"\"\""
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('hey') == 'hee'\nassert solution('hell') == 'heell'\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"hee\") == \"hee\"\nassert solution(\"hee\") == \"heeee\"\nassert solution(\"hee hee\") == \"heeeeee\"\nassert solution(\"hee hee hee\") == \"heeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('hey') == 'heey'\n\nassert solution('heyy') == 'heeeee'\n\nassert solution('heyyy') == 'heeeee'\n\nassert solution('heeeee') == 'heeeee'\n\nassert solution('heeeeee') == 'heeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('hey') == 'heey'\nassert solution('Hello') == 'Heelllloo'\nassert solution('hello') == 'heeeeeeeeeeeeeeeeeeee'\nassert solution('Hey') == 'Heeeeeeeeee'\nassert solution('3') == '33'\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('he') == 'hee'\nassert solution('h') == 'he'\nassert solution('hee') == 'hee'\nassert solution('heee') == 'heee'\nassert solution('heeee') == 'heee'\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('hey') == 'heey'\nassert solution('heyy') == 'heehee'\nassert solution('hihi') == 'hihihi'\nassert solution('hie') == 'hee'\nassert solution('hiey') == 'hee'\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0''') == \"1 2\\n1 3\\n1 4\\n\"\n\n'''\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n\"\"\""
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\""
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nassert solution(\"2\\n0 1 1\\n1 0 2\") == \"1 2\"\nassert solution(\"3\\n1 2 2\\n2 0 3\\n3 0 1\") == \"1 2\\n1 3\\n2 3\"\nassert solution(\"4\\n1 2 2 3\\n2 0 3\\n3 0 1\\n4 0 1\") == \"1 2\\n1 3\\n1 4\\n2 3\"\nassert solution(\"5\\n1 2 2 3 4\\n2 0 3\\n3 0 4\\n4 0 1\\n5 0 1\") == \"1 2\\n1 3\\n1 4\\n2 3\\n2 4\"\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nassert solution(\"4\\n0 1 1 2\\n0 2 3 4\\n1 1 2 3\\n2 2 0 3\") == \"1 2\\n1 3\\n1 4\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\n0 1 1 2\\n1 0 2 3\") == \"1 2\"\nassert solution(\"4\\n2\\n0 1 1 2\\n1 0 2 3\") == \"1 2\\n1 3\"\nassert solution(\"4\\n2\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\") == \"1 2\\n1 3\\n1 4\"\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\\n\") == \"1 2\\n1 3\\n1 4\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nassert solution(\"AJRB\") == \"BKSC\"\nassert solution(\"LQG\") == \"CQH\"\n\"\"\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"EWPGAJRB\"\n) == \"ABCD\"\nassert solution(\n    \"SGFHSKJSZ\"\n) == \"ABCD\"\nassert solution(\n    \"JRPQDMDSS\"\n) == \"ABCD\"\nassert solution(\n    \"KDIQLCNMP\"\n) == \"ABCD\"\nassert solution(\n    \"GQQDGGQQDM\"\n) == \"ABCD\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"EWPGAJRB\"\n) == \"ABCD\"\n\nassert solution(\n    \"WHEQYEVLNJ\"\n) == \"WHEQYEVLNJ\"\n\nassert solution(\n    \"BLMZRLFJYU\"\n) == \"BLMZRLFJYU\"\n\nassert solution(\n    \"SIRGNSLQJK\"\n) == \"SIRGNSLQJK\"\n\nassert solution(\n    \"SWRQLNQIB\"\n) == \"SWRQLNQIB\""
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nprint(solution(\"EWPGAJRB\"))\n\n----"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\n\"\"\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\nassert solution('KSPVN') == 'ABCD'\nassert solution('VPSXGWK') == 'ABCD'\nassert solution('UNPRG') == 'ABCD'\nassert solution('ABKGY') == 'ABCD'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\nprint(solution('EWPGAJRB'))"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(DRM_Encryption) == \"ABCD\"\n\"\"\"\n\nDRM_Encryption = \"EWPGAJRB\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\n\n\"\"\"\n\nimport sys\nimport string"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"bcba\") == 1\nassert solution(\"ab\") == 0\n\"\"\""
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"aab\") == 0\n\"\"\"\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abba') == 0\n\nassert solution('aabb') == 1\n\nassert solution('abab') == 0\n\nassert solution('abc') == 0\n\nassert solution('abcc') == 1"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"aba\") == 0\nassert solution(\"abba\") == 0\nassert solution(\"abab\") == 0\nassert solution(\"abcab\") == 1\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ab') == 1\nassert solution('aba') == 0\nassert solution('a') == 0\nassert solution('abba') == 0\nassert solution('abc') == 2\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abccba') == 2\nassert solution('abccba') == 2\nassert solution('abccb') == 1\nassert solution('bccb') == 0\n\n\"\"\""
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"abcccba\") == 0\nassert solution(\"abcc\") == 1\nassert solution(\"ab\") == 0\nassert solution(\"aaaaa\") == 0\n\"\"\""
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abc\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a') == 0\nassert solution('aba') == 0\nassert solution('abab') == 0\nassert solution('abac') == 1\nassert solution('aab') == 1\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 1\nassert solution('aaaaa') == 0\nassert solution('abcdef') == 3\n\n\"\"\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaah\") == \"no\"\nassert solution(\"aabbh\") == \"no\"\nassert solution(\"aaaaaaah\") == \"go\"\nassert solution(\"aabbhh\") == \"no\"\n\"\"\""
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"a\") == \"go\"\nassert solution(\"aaaaa\") == \"no\"\nassert solution(\"aaahh\") == \"no\"\n\nprint('Test passed\\n')\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aaah') == 'no'\nassert solution('aaaaah') == 'go'\nassert solution('aaaaaaaaa') == 'go'\nassert solution('aaaaaaaaaa') == 'go'\nassert solution('aaaaaaaaaa') == 'go'\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aaah') == 'no'\nassert solution('aaaaaah') == 'go'\n\n'''"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaaaah\") == \"no\"\nassert solution(\"hh\") == \"no\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaah\") == \"no\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaah\") == \"no\"\nassert solution(\"aaaaaah\") == \"go\"\n\"\"\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == output\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aaah') == 'no'\nassert solution('aaaaah') == 'no'\nassert solution('a') == 'go'\nassert solution('h') == 'go'\nassert solution('aa') == 'go'\n\n\"\"\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'go'\nassert solution('h') == 'no'\nassert solution('hh') == 'no'\nassert solution('ah') == 'no'\nassert solution('ahh') == 'go'\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A1A2B1B2A2B1A1') == 'B'\nassert solution('B2A1A2B1B2A2B1') == 'B'\nassert solution('B1A2B1B2A2B1A1') == 'B'\nassert solution('A1A2B1B2A2B1A1') == 'B'\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A1A2A3B3B3A1B2B2') == 'B'\nassert solution('A1A2A3B3B3B1A1B2B2') == 'A'\nassert solution('A1A2A3B3B3A1B2B2') == 'B'\nassert solution('A1A2A3B3B3B1A1B2A2') == 'A'\n\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A1B2A2A1B2A2B1') == 'A'\nassert solution('A1A2A2A1A2A2A2') == 'A'\nassert solution('A1B2B1A2A2B2A1') == 'B'\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2A2\") == \"B\"\nassert solution(\"B2A1A2B2A1A2A2A2\") == \"B\"\nassert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"B2A1B2A2A1B2A2A2\") == \"B\"\nassert solution(\"A2B2A1B1A1A2B2A2\") == \"A\"\nassert solution(\"A2A1B2B1A2A2A1B2A2\") == \"A\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\n\nassert solution('A2B1A2B2A1A2A2A2A') == 'A'\n\nassert solution('A2B1A2B2A1A2A2A2A') == 'A'\n\nassert solution('A2B1A2B2A1A2A2A2A') == 'A'\n\nassert solution('A2B1A2B2A1A2A2A2A') == 'A'"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2A2\") == \"B\"\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('B2A1B2A2') == 'B'\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\"\n\"\"\"\n\nN, M = [int(x) for x in input().split()]\nstart, end = [int(x) for x in input().split()]\ns_start, s_end = [int(x) for x in input().split()]\nK = s_start - start\nG = len([int(x) for x in input().split()])\n\nroads = [[int(x) for x in input().split()] for y in range(M)]\nroads.sort(key=lambda x: x[2])\n\nleast_time = K\nroads_to_visit = roads.copy()\n\ncurr_time = K\n\nwhile roads_to_visit:\n    road_start, road_end, road_time = roads_to_visit.pop(0)\n    while curr_time < road_time:\n        least_time = min(least_time, curr_time)\n        curr_time += roads[0][2]\n        roads_to_visit.append(roads.pop(0))\n\nprint(least_time)\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 10 20\") == \"1\"\nassert solution(\"1 2 10 20\") == \"1\"\nassert solution(\"1 2 10 20\") == \"1\"\nassert solution(\"1 2 10 20\") == \"1\"\nassert solution(\"1 2 10 20\") == \"1\"\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 10 5\\n1 2 1\\n2 3 2\\n1 3 2\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 20 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\\n\") == \"21\"\nassert solution(\"2 2 20 4\\n1 1 4\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\\n\") == \"13\"\nassert solution(\"1 6 20 4\\n1 1 4\\n2 2 8\\n2 4 3\\n3 6 10\\n3 5 15\\n\") == \"21\"\nassert solution(\"1 6 20 4\\n5 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\\n\") == \"13\"\n\n\"\"\""
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 8\\n3 6 10\\n3 5 15\\n2 3 8\\n2 4 3\") == \"21\"\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == '21'\n\"\"\"\n\nN, M = [int(i) for i in input().split(' ')]\nA, B, K, G = [int(i) for i in input().split(' ')]\nA, B = A - 1, B - 1\nK, G = K - 1, G - 1\n\nroad = {}\nfor i in range(M):\n    a, b, l = [int(j) for j in input().split(' ')]\n    road[(a - 1, b - 1)] = l\n\nroute = {}\nfor i in range(G):\n    a, b = [int(j) for j in input().split(' ')]\n    route[(a - 1, b - 1)] = set()\n    route[(b - 1, a - 1)] = set()\n\nanswer = 0\n\nqueue = [(A, B)]\nwhile queue:\n    a, b = queue.pop(0)\n    if a == G and b == A:\n        break\n    if a == A:\n        for i in route[(b, a)]:\n            if road[(i, b)] == road[(b, a)]:\n                answer += road[(b, a)]\n                queue.append((b, i))\n    elif b == G:\n        for i in route[(a, b)]:\n            if road[(a, i)] == road[(a, b)]:\n                answer += road[(a, b)]\n                queue.append((a, i))\n    else:\n        for i in route[(a, b)]:\n            if road[(a, i)] == road[(a, b)]:\n                answer += road[(a, b)]\n                queue.append((a, i))\n        for i in route[(b, a)]:\n            if road[(b, i)] == road[(b, a)]:\n                answer += road[(b, a)]\n                queue.append((b, i))\n    if answer > K:\n        break\n\nprint(answer)\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 6\\n1 2 3\\n2 3 4\\n3 4 5\\n4 5 6\\n5 6 7\\n6 7 1\\n2 4 1\\n3 5 4\\n1 3 1\\n3 2 4\\n1 4 7\\n6 4 3\\n5 6 6\\n1 5 5\\n5 4 2\\n4 6 9\") == '21'\n\n-----Constraints-----\n1 <= N, M <= 1000\n1 <= K <= 2000\n0 <= G <= 1000\n1 <= A, B, L <= N\n0 <= K, G <= 1000\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 2\\n2 3 8') == '21'\n\"\"\"\n\nimport sys\nimport os\nimport time\nfrom io import StringIO\nfrom typing import List\n\nclass Solution:\n    def solve(self, _input_str: str) -> str:\n        # get input\n        data = StringIO(_input_str)\n        inputs = [int(x) for x in data.readline().split()]\n        \n        # function to get time\n        def get_time(current_time: int, diff: int, num_streets: int) -> int:\n            time_taken = current_time + diff\n            return time_taken if time_taken % num_streets == 0 else time_taken + (num_streets - time_taken % num_streets)\n\n        # get number of intersections and streets\n        N, M = inputs[0], inputs[1]\n        start_inter, end_inter = inputs[2], inputs[3]\n\n        # get mister george roads\n        roads_mister_george = []\n        for i in range(inputs[4]):\n            roads_mister_george.append([int(x) for x in data.readline().split()])\n\n        # get input\n        inputs = []\n        for i in range(M):\n            inputs.append([int(x) for x in data.readline().split()])\n\n        # declare path\n        path = {(start_inter, roads_mister_george[0][0])}\n        paths = [path]\n        \n        # iterate over roads mister george\n        for road in roads_mister_george:\n            # check if current path exists\n            paths_new = []\n            for path in paths:\n                # check if current path exists\n                for i in range(road[0], road[1] + 1):\n                    if (i, road[0]) in path:\n                        path_new = set(path)\n                        path_new.add((i, road[1]))\n                        paths_new.append(path_new)\n            paths = paths_new\n        \n        # get time\n        for path in paths:\n            if end_inter in path:\n                return str(len(path) - 1)\n\n        return 'Impossible'"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1 2 3 4 5 6\") == \"0\"\nassert solution(\"0 1 2 3 4 5 6 7\") == \"8\"\nassert solution(\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\") == \"19\"\nassert solution(\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\") == \"20\"\nassert solution(\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320\") == \"26\"\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 7 20 1') == '21'\nassert solution('6 10 20 3') == '30'\nassert solution('2 4 20 4') == '31'\nassert solution('6 10 10 1') == '31'\nassert solution('7 12 20 5') == '44'"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution('D HHHeellloWooorrrrlld!!') == 'HHHeellloWooorrrrlld!!'\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nprint(solution(stdin))\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    'E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution(\n    'D mH3e2l3o1W1o3r4l2d1!2') =='mHHElllloooorrrrrrd!'\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\nassert solution(\"D w3r7\") == \"w3r7\"\n\"\"\""
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\n\"\"\"\n\nimport string\nimport unittest"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(TEST_CASE) == EXPECTED_SOLUTION\n\"\"\"\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"E HHHeellloWooorrrrlld!!\"\n) == \"H3e2l3o1W1o3r4l2d1!\"\n\nassert solution(\n\"D H3e2l3o1W1o3r4l2d1!\"\n) == \"HHHeellloWooorrrrlld!!\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2''') == 'Bob'\nassert solution('''4''') == 'Alice'\nassert solution('''3''') == 'Alice'\nassert solution('''9''') == 'Alice'\nassert solution('''9''') == 'Alice'\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"3\") == \"Bob\"\nassert solution(\"4\") == \"Alice\"\nassert solution(\"5\") == \"Bob\"\nassert solution(\"6\") == \"Alice\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"10\") == \"Bob\"\nprint(\"Success\")\n\n\"\"\""
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 'Alice'\nassert solution('4') == 'Bob'\nassert solution('10') == 'Alice'\nassert solution('11') == 'Bob'\n\n\"\"\""
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(expected_output)\n\nprint(solution(str(input())))\n\n----Problem----\nFor any two integers $a, b$ there is a simple mathematical operation that can be performed on them: $a + b$, if the sum of the lengths of the two pieces is equal to the length of the whole branch.\n\nThe Mookerheide bridge is long enough that Bob and Alice don't want to pass the whole bridge, as that would be too long.\n\nHowever, they are allowed to break the bridge into parts of arbitrary lengths, and if both pieces are of equal length, Bob will always win.\n\nCan Alice win?\n\n-----Problem Description-----\nWrite a function:\n\n    def solution(length)\n\nthat, given the length of the Mookerheide bridge, returns the minimum number of parts that Alice can break off and win the game.\n\nFor example, given the length $n = 10$ the function should return $2$ because Alice can break off two pieces and win. On the other hand, given the length $n = 9$ the function should return $1$ because no matter what Alice breaks off, Bob will still win.\n\nAssume that:\n\n    the length of the bridge is an integer within the range [2\u20262*10^9];\n    the length of the pieces is an integer within the range [1\u20262*10^9].\n\nIn your solution, focus on correctness. The performance of your solution will not be the focus of the assessment.\n\n'''"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"9\") == \"Bob\"\n\"\"\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 'Alice'\nassert solution('2') == 'Alice'\nassert solution('3') == 'Bob'\nassert solution('8') == 'Bob'\nassert solution('10') == 'Alice'\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"3\") == \"Bob\"\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n') == 'Alice'\nassert solution('3\\n') == 'Bob'\n\n\"\"\""
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == 'Alice'\nassert solution('3\\n') == 'Bob'\nassert solution('8\\n') == 'Alice'\nassert solution('11\\n') == 'Bob'\n\n-----Explanation-----\nLet\u2019s look at the example of the given input.\n\nSince the length of the branch is $2$, Alice can only break off a piece with length 1.\n\nSo Alice will lose, but if Bob play optimally, Alice can win.\n\nWe\u2019ll always output Alice.\n\nFinally, the length of the piece Alice can break off is 1.\n\nSample Input:\n4\n\nSample Output:\nAlice\n2\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('5 3 9') == '5+3=9'\nassert solution('5 4 5') == '5+4=9'\nassert solution('5 4 6') == '5+4=6'\nassert solution('5 3 8') == '5+3=8'\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\n\nassert solution(\"5 3 9\") == \"5+3=9\"\n\nassert solution(\"10 20 3\") == \"10+20=3\"\n\nassert solution(\"2 5 9\") == \"2+5=9\"\nassert solution(\"13 42 93\") == \"13+42=93\""
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 3 8''') == '''5+3=8'''\nassert solution('''6 8 9''') == '''6+8=9'''\nassert solution('''7 3 7''') == '''7+3=10'''\nassert solution('''15 1 5''') == '''15=5'''\nassert solution('''1 1 1''') == '''1=1'''\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 3 8''') == '5+3=8'\nassert solution('''5 3 8''') == '5+3=8'\nassert solution('''5 3 8''') == '5+3=8'\nassert solution('''1 2 3''') == '1+2=3'\nassert solution('''5 3 8''') == '5+3=8'\n'''\nfrom typing import List\n\nclass Equation:\n    def __init__(self, in1: int, in2: int, in3: int, op: str):\n        self.in1 = in1\n        self.in2 = in2\n        self.in3 = in3\n        self.op = op\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('3 5 8') == '5+3=8'\nassert solution('5 8 3') == '5+3=8'\nassert solution('5 8 3 1') == '5+3=8'\nassert solution('3 5 8 4') == '3+5=8'\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 8') == '5+3=8'"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 3 8''') == '5+3=8'"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"2 3 6\") == \"2+3=6\"\nassert solution(\"7 6 9\") == \"7+6=9\"\nassert solution(\"1 5 6\") == \"1+5=6\"\nassert solution(\"12 4 6\") == \"12-4=6\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\n\nIn the first line, 5 3 8 are integers less than 100.\nIn the second line, the string \"5+3=8\" contains a valid equation.\n\nimport sys\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"3 5 8\") == \"3+5=8\"\nassert solution(\"5 8 3\") == \"5+8=3\"\nassert solution(\"8 5 3\") == \"8-5=3\"\nassert solution(\"3 8 5\") == \"3-8=5\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 1 2\") == \"YES\"\nassert solution(\"4\\n1 3 1 3\") == \"NO\"\nassert solution(\"5\\n1 2 2 3 3\") == \"YES\"\nassert solution(\"7\\n2 3 2 1 2 3 2\") == \"NO\"\nassert solution(\"8\\n1 3 1 3 2 2 3 1\") == \"YES\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 2 2 1 1 3 1 1') == 'YES'\nassert solution('6 4 2 1 1 5 1 1') == 'YES'\nassert solution('6 6 4 1 1 5 1 1') == 'NO'"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 1\\n\") == \"YES\"\nassert solution(\"7\\n1 3 3 3 3 3 3\\n\") == \"NO\"\nassert solution(\"9\\n1 1 1 1 1 1 1 1\\n\") == \"YES\"\nassert solution(\"8\\n3 2 2 1 1 1 1 1\\n\") == \"NO\"\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\nassert solution('8\\n3 2 2 1 1 4 1 1') == 'NO'\n\"\"\"\n\nn = int(input())\nd = list(map(int, input().split()))"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\nassert solution('8\\n4 2 2 1 1 3 1 1') == 'NO'\nassert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\nassert solution('8\\n3 2 2 1 1 3 1 1') == 'NO'\n\n----\n\n- 1 <= N <= 1000\n- 1 <= D_ i <= N - 1\n\nhttps://www.youtube.com/watch?v=X2YUpQVUoCc\n\nhttps://www.youtube.com/watch?v=sd2KADVt2sE\n\n'''\n\nn = int(input())\nd = list(map(int, input().split()))\n\nd.sort()\n\ncheck = True\nfor i in range(1, n):\n    if d[i] == d[i - 1] + 1:\n        continue\n    else:\n        check = False\n        break"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 3 1\") == \"YES\"\nassert solution(\"10\\n7 3 1 2 4 6 2 3 5\") == \"YES\"\nassert solution(\"15\\n3 7 3 4 5 5 5 1 5 1 1 1 1\") == \"YES\"\nassert solution(\"15\\n5 1 4 1 4 1 5 1\") == \"NO\"\n\nassert solution(\"15\\n4 4 2 5 1 5 5 4 5 4 4 5 5 1 5 1 1 1 5 4 5\") == \"YES\"\n\"\"\"\n\nn = int(stdin.readline())\nd = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n1 1 1 1 1 2 3\") == \"YES\"\nassert solution(\"8\\n1 1 1 1 1 2 3\") == \"NO\"\nassert solution(\"9\\n1 1 1 1 1 2 3\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\nassert solution('5\\n1 1 1 2 2') == 'NO'\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''8\n3 2 2 1 1 3 1 1''') == 'YES'\nassert solution('''8\n3 2 2 1 1 3 1 1''') == 'YES'\nassert solution('''8\n3 1 1 1 1 3 1 1''') == 'NO'\nassert solution('''8\n3 2 2 1 1 3 1 1''') == 'NO'\nassert solution('''8\n3 1 1 1 1 3 1 1''') == 'NO'\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\nd = list(map(int, sys.stdin.readline().rstrip().split()))"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"demon\\nmummy\\nghost\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"mummy\"\nassert solution(\"demon\\nmummy\\nghost\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"demon\"\nassert solution(\"demon\\nmummy\\nghost\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"demon\"\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List, Dict\nfrom string import ascii_lowercase\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'a'\nassert solution('abcd') == 'a'\nassert solution('zzz') == 'z'\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\n''') == 'ghost'\nassert solution('''1\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\n''') == 'ghost'\nassert solution('''2\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\n''') == 'ghost'\nassert solution('''3\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\n''') =='mummy'\nassert solution('''4\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\n''') == 'witch'\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"4\\nghoulish\\nmost\\nmalignant\") == \"most\"\n\"\"\""
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost'\nassert solution('10\\nmummy\\nmummy\\nghost\\nghost\\nghost\\nghost\\nghost\\nghost\\nghost') =='mummy'\nassert solution('10\\nwitch\\nwitch\\nwitch\\nwitch\\nwitch\\nwitch\\nwitch\\nwitch\\nwitch') == 'witch'"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('asd') == 'asd'\nassert solution('') == ''\nassert solution('12345') == '1234'\nassert solution('asdasdasd') == 'asd'\nassert solution('asdasdasdasd') == 'asdasd'\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''10\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon''') == 'ghost'\nassert solution('''8\nblood\nblood\nblood\ndemon\ndemon\ndemon\ndemon\ndemon''') == 'blood'\nassert solution('''12\nblood\nblood\nblood\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon''') == 'blood'\nassert solution('''20\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\nblood\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\") == 'ghost\\nmummy\\nwitch'\nassert solution(\"5\\ndemon\\nmummy\\nwitch\\ndemon\\nghost\") == 'demon\\nmummy\\nghost'\nassert solution(\"3\\nghost\\nmummy\\nwitch\\ndemon\") == 'demon\\nmummy\\nghost'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost'\nassert solution('1\\nhalloween') == 'halloween'\n\"\"\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100\") == \"mummy\"\nassert solution(\"4\") == \"mummy\"\nassert solution(\"15\") == \"ghost\"\nassert solution(\"9\") == \"mummy\"\nassert solution(\"11\") == \"ghost\"\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n''') == '''Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n'''\nassert solution('''Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n''') == '''Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n'''\n'''\nTime: O(2n + 26) = O(n)\nSpace: O(n)\n'''\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('Artist Album Song_Title Length_seconds') == \\\n    'Artist Album Song_Title Length_seconds\\n' + \\\n    'Tchaikovsky Piano_Favorites November 163\\n' + \\\n    'James_Taylor Dad_Loves_His_Work Hard_Times 192\\n' + \\\n    'James_Taylor Dad_Loves_His_Work London_Town 236\\n' + \\\n    'James_Taylor Dad_Loves_His_Work Summers_Here 163\\n' + \\\n    'George_Winston Summer Lullaby 215\\n'\n\nassert solution('Artist Album Song_Title Length_seconds\\n' + \\\n    'James_Taylor Dad_Loves_His_Work Hard_Times 192\\n' + \\\n    'James_Taylor Dad_Loves_His_Work London_Town 236\\n' + \\\n    'James_Taylor Dad_Loves_His_Work Summers_Here 163\\n' + \\\n    'George_Winston Summer Lullaby 215\\n') == \\\n    'Artist Album Song_Title Length_seconds\\n' + \\\n    'James_Taylor Dad_Loves_His_Work Hard_Times 192\\n' + \\\n    'James_Taylor Dad_Loves_His_Work London_Town 236\\n' + \\\n    'George_Winston Summer Lullaby 215\\n' + \\\n    'Tchaikovsky Piano_Favorites November 163\\n' + \\\n    'James_Taylor Dad_Loves_His_Work Summers_Here 163\\n'\n\n-----Explanation-----\nThe first line contains the list of attributes, each given by one word. Each attribute has values between $1$ and $30$ characters, using only a\u2013z, A\u2013Z, $0$\u2013$9$, and underscore (_). The remaining lines contain the songs. All the attributes are given, and no two songs share the same values for the same attributes.\n\nThe first sorting starts from the order of the songs as given on the input. Each subsequent sorting starts from the order given by the previous sort, rather than starting from the initial order. The output will be the same as the input, but the song order will be different.\n\nAt first the list will be sorted by Artist, then Album, then Song title, and so on. When sorting by Artist, the songs will be sorted by Song title, then Album, then Artist. When sorting by Album, the songs will be sorted by Song title, then Artist, then Album. When sorting by Song title, the songs will be sorted by Artist, then Album, then Song title.\n\nIf two songs have equal values for the given attribute, they should remain in the order given on the input. If the same song is given for two different attributes, the output should be the same as the input.\n\"\"\"\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title') == \\\n    'Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\n'\n\"\"\""
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"Artist Album Song_Title Length_seconds\\n\" \\\n    + \"George_Winston Summer Lullaby 215\\n\" \\\n    + \"James_Taylor Dad_Loves_His_Work Hard_Times 192\\n\" \\\n    + \"James_Taylor Dad_Loves_His_Work London_Town 236\\n\" \\\n    + \"James_Taylor Dad_Loves_His_Work Summers_Here 163\\n\" \\\n    + \"Tchaikovsky Piano_Favorites November 163\"\n\n-----Problem-----\nSteve likes to read and write about music. He has a large collection of his favorite songs, and he wants to organize them. He has an interesting way of organizing them. He decides to assign the following integer number to each of his favorite songs:\n\n0 : Nirvana\n1 : Led Zeppelin\n2 : AC/DC\n3 : The Beatles\n4 : Queen\n5 : Smokey Robinson\n6 : The Who\n7 : Stoner\n8 : the Doors\n9 : Nirvana\n10 : Pink Floyd\n11 : Britney Spears\n12 : Maroon 5\nHe wants to use the number to sort his collection of songs, but he also wants the songs to be sorted in ascending order by number. He has heard of the function sort(), which changes the order of the elements in an array, but not the numbers themselves. He also knows that if you give the sort function an array and an order, it will put the numbers in the order given by the order parameter. Can you help Steve?\n\n-----Solution------\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\"\"\"\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\"\n\n\"\"\"\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\\n\") == 'Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n'\n\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nAlbum\\nSong_Title\\n\") == 'Artist Album Song_Title Length_seconds\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\nGeorge_Winston Summer Lullaby 215\\n'"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n\"\"\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\"\"\"\n\n\n\"\"\"\n(2 points)\n\nWrite a program that will print the list of attributes followed by the list of songs in the order given by the sorting commands.\n\nFirst the song list is given in the input. After each sorting command, print the list of attributes followed by the song list in the order given by the sort command, one song per line. Print a space between adjacent fields. Between each pair of printed lists, print a blank line.\n\nSample input:\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n\nSample output:\nArtist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\"\"\""
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\\n\") == \"Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n\"\n\n\"\"\""
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\"\"\"\n\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\"\"\"\n\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\"\"\""
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 10 5\\n3 2 3 4 2 5 2') == 'YES'\nassert solution('5 10 5\\n3 2 3 4 2 5 2\\n2 5 3 3 3 1 1 2') == 'YES'\nassert solution('5 10 5\\n3 2 3 4 2 5 2\\n2 5 3 3 3 1 1 2\\n3 2 3 3 1 1 2 3') == 'NO'\nassert solution('5 10 5\\n3 2 3 4 2 5 2\\n2 5 3 3 3 1 1 2\\n3 2 3 3 1 1 2 3\\n3 2 3 3 1 1 2 3') == 'YES'\nassert solution('5 10 5\\n3 2 3 4 2 5 2\\n2 5 3 3 3 1 1 2\\n3 2 3 3 1 1 2 3\\n3 2 3 3 1 1 2 3\\n3 2 3 3 1 1 2 3') == 'YES'\n\n------Solution------\n\"\"\""
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\n\nassert solution('2 10 7\\n5 6 5 5 5 5 5') == 'NO'\n\nassert solution('2 10 7\\n5 1 1 1 1 1 1') == 'NO'\n\nassert solution('2 10 7\\n5 1 1 1 1 1 1') == 'NO'\n\nassert solution('2 10 7\\n5 1 1 1 1 1 1') == 'YES'"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('1 10 2\\n1 2') == 'NO'\n\n'''\n\nfrom sys import stdin, stdout\n\na, b, n = [int(x) for x in stdin.readline().split()]\nlengths = [int(x) for x in stdin.readline().split()]\n\nl, r = 0, 0\n\nwhile r < n:\n    if sum(lengths[l:r+1]) <= b:\n        r += 1\n    else:\n        l += 1\n\nstdout.write(['YES', 'NO'][r < n])"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'YES'\nassert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'NO'\nassert solution('''1 1 1\n1''') == 'YES'\nassert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'NO'\nassert solution('''2 10 7\n10 10 10 10 10 10 10''') == 'NO'\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == 'YES'\nassert solution(\"2 10 7\\n5 1 5 5 5 5 5\") == 'NO'\nassert solution(\"2 10 7\\n7 1 1 1 1 1 1\") == 'NO'\nassert solution(\"2 10 7\\n7 1 5 1 5 5 1\") == 'NO'\nassert solution(\"2 10 7\\n7 7 7 7 7 7 7\") == 'YES'\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n5 5 5 5 5 5 5') == 'NO'\nassert solution('2 10 7\\n5 5 5 5 5 5 5') == 'NO'\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == 'YES'\nassert solution(\"1 2 3\\n1 2 3\") == 'NO'\nassert solution(\"1 10 100\\n1 2 3\") == 'YES'\nassert solution(\"2 3 1\\n2 1 2\") == 'NO'\nassert solution(\"2 10 100\\n
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'YES'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == \"66.666667\\n50.000000\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\") == \"Not Effective\\n66.666667\\n50.000000\"\nassert solution(\"6\\nN\\nN\\nN\\nN\\nN\\nN\\nN\") == \"Not Effective\"\n\"\"\"\n\nimport math\nimport sys\nimport re\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"YYYY\\nNNNN\\nYYNN\\nYYYY\\nYYNN\\nYYNN\\nYYNN\\nYYYY\\nYYNN\\nYYYY\\n\") == \"100.000000\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom math import sqrt\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'Not Effective'\nassert solution('NYNY') == 'Not Effective'\nassert solution('NNYY') == '66.666667'\nassert solution('NYYY') == '50.000000'\nassert solution('NYYN') == 'Not Effective'\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nNYNY\\nNNYY\\nYYNN\\nYYNY\") == \"66.666667\"\n\"\"\"\n\nstdin = input()\n\nvaccine = {\n    'YNY': 0,\n    'YYY': 0,\n    'YYN': 0,\n    'YNN': 0,\n    'NNY': 0,\n    'NYN': 0,\n    'YYY': 0,\n    'NNY': 0,\n    'NYY': 0,\n    'NNN': 0,\n    'NNN': 0,\n    'NNY': 0,\n    'NNN': 0,\n    'YYY': 0,\n    'NNN': 0,\n    'NNN': 0,\n    'NNN': 0,\n    'NNN': 0,\n    'NYN': 0,\n    'NNN': 0\n}\n\nfor i in range(0, int(stdin)):\n    participant = stdin[i]\n    if participant[0] == 'Y':\n        vaccine[participant] += 1\n    else:\n        vaccine[participant[1:] + participant[0]] += 1\n\nvaccine['N'] = int(stdin) - (vaccine['Y'] + vaccine['N'])\n\nfor i in vaccine:\n    if vaccine[i] == 0:\n        vaccine[i] = \"Not Effective\"\n    else:\n        vaccine[i] = \"{:.2f}\".format((vaccine[i] / vaccine['N']) * 100)\n\nprint(vaccine['YNY'], vaccine['YYY'], vaccine['YYN'], vaccine['YNN'], vaccine['NNY'], vaccine['NYN'], vaccine['YYY'], vaccine['NNY'], vaccine['NYY'], vaccine['NNN'], vaccine['NNN'], vaccine['NNY'], vaccine['NNN'], vaccine['YYY'], vaccine['NNN'], vaccine['NNN'], vaccine['NNN'], vaccine['NNN'], vaccine['NYN'], vaccine['NNN'])\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"NYNNYY\") == \"Not Effective\"\nassert solution(\"NNNNYY\") == \"Not Effective\"\nassert solution(\"NNNNNN\") == \"Not Effective\"\nassert solution(\"NYYYN\") == \"Not Effective\"\nassert solution(\"YYYYY\") == \"Not Effective\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"NYNY\") == \"Not Effective\"\nassert solution(\"NNYY\") == \"66.666667\"\nassert solution(\"NYYY\") == \"50.000000\"\nassert solution(\"NYYN\") == \"Not Effective\"\nassert solution(\"NNNY\") == \"66.666667\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''10\nNYNY\nNNYY\nNYYY\nNYYN\nNNNY\nYYNN\nYYYN\nYYNY\nYYNN\nYYNY''') == '66.666667\\n50.000000'\n\nassert solution('''10\nYNYY\nNYYN\nYNNY\nNYNN\nNNYY\nYNYY\nNYYN\nNYYN\nNNNN\nNNNN''') == 'Not Effective\\nNot Effective\\n66.666667\\n0.000000'\n\nassert solution('''10\nNNYN\nNNYY\nNYYN\nNYYN\nNNYY\nYNNY\nNNYN\nNYYN\nNNNN\nNNNN''') == 'Not Effective\\nNot Effective\\nNot Effective\\nNot Effective\\nNot Effective\\n66.666667\\n0.000000'\n\nassert solution('''10\nNNNN\nNNNN\nNNNN\nNNNN\nNNNN\nNNNN\nNNNN\nNNNN\nNNNN\nNNNN''') == 'Not Effective\\nNot Effective\\nNot Effective\\nNot Effective\\nNot Effective\\nNot Effective\\nNot Effective\\n66.666667\\n0.000000'\n\nassert solution('''10\nNNNN\nNNNN\nNNNN\nNNNN\nNNNN\nNNNN\nNNNN\nNNNN\nNNNN\nNNNN''') == 'Not Effective\\nNot Effective\\nNot Effective\\nNot Effective\\nNot Effective\\nNot Effective\\n66.666667\\n0.000000'"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('NYNY') == 'Not Effective'\nassert solution('YYYY') == 'Not Effective'\nassert solution('NYNN') == '100.000000'\nassert solution('NNYY') == 'Not Effective'\nassert solution('YYNN') == '66.666667'\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\\n') == '66.666667\\n50.000000'"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABCBDAB\") == \"Bruno\"\nprint(solution(\"BAACC\"))\n\"\"\"\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('BAACC') == '3', 'Sample 1'\nassert solution('CCABB') == '2', 'Sample 2'\nassert solution('AAABB') == '2', 'Sample 3'\nassert solution('BACCC') == '1', 'Sample 4'\nassert solution('ACCCB') == '1', 'Sample 5'\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BAACC\") == \"Bruno\"\n\"\"\"\n\n\nimport sys\nimport itertools"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BAACC\") == \"3\"\nassert solution(\"AABCC\") == \"Bruno\"\nassert solution(\"AABBC\") == \"Bruno\"\n\nSample Input:\n6\nCBABA\nSample Output:\n3\nBruno\n\"\"\""
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('BAACC') == 'Bruno'\n\n\"\"\"\n\nn = int(input())\ns = input()\n\nA = 0\nB = 0\nC = 0\n\nfor i in range(n):\n    if s[i] == 'A':\n        A += 1\n    if s[i] == 'B':\n        B += 1\n    if s[i] == 'C':\n        C += 1"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('BAACC') == 'Bruno'\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BAACC\") == \"3\\nBruno\"\nassert solution(\"AAB\") == \"2\\nBruno\"\nassert solution(\"BAB\") == \"1\\nGoran\"\nassert solution(\"CABA\") == \"2\\nGoran\"\nassert solution(\"AAAB\") == \"1\\nAdrian\"\n\"\"\"\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BAACC\") == \"Bruno\"\n\n\"\"\"\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(read()) == \"Bruno\"\n\n\"\"\"\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AB') == 'Bruno'\nassert solution('AC') == 'Bruno'\nassert solution('BB') == 'Bruno'\nassert solution('AA') == 'Adrian'\nassert solution('CC') == 'Goran'"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\") == \"3 543\"\n\nimport sys; input = sys.stdin.readline\nn = int(input())\narr = [0]\nwhile n!= -1:\n    arr.append(n)\n    n = int(input())\nl = len(arr)\nfor i in range(l):\n    if arr[i]!= -1:\n        time = arr[i]\n        ans = \"\".join(sorted(set(input().split())))\n        if ans == \"right\":\n            time += 20\n        else:\n            time -= 20\n        for j in range(i+1, l):\n            if arr[j] == time:\n                arr[j] = -1\nprint(len(set(arr)), time)"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\") == (3, 543)\n\"\"\""
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\nprint(solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\"))\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 E right\\\\n10 A wrong\\\\n30 C wrong\\\\n50 B wrong\\\\n100 A wrong\\\\n200 A right\\\\n250 C wrong\\\\n300 D right\\\\n-1\") == (3, 543)\nprint(solution(\"3 E right\\\\n10 A wrong\\\\n30 C wrong\\\\n50 B wrong\\\\n100 A wrong\\\\n200 A right\\\\n250 C wrong\\\\n300 D right\\\\n-1\"))\n\n\"\"\"\nimport sys\nimport collections\nimport functools\nimport itertools\nimport math\nimport pprint\nimport re\nimport queue\nimport copy\nimport collections\nfrom collections import defaultdict, Counter, deque\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == (3, 543)\nprint(solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\"))\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        lines = stdin.split('\\n')\n        lst = []\n        for line in lines:\n            lst.append(line.split())\n        lst.pop()\n        dct = {}\n        for i in range(len(lst)):\n            if int(lst[i][0]) not in dct:\n                dct[int(lst[i][0])] = []\n            dct[int(lst[i][0])].append(lst[i][1])\n        if -1 in dct:\n            for key in dct:\n                if key!= -1:\n                    dct[key].pop()\n        dct_order = {}\n        for key in sorted(dct.keys()):\n            dct_order[key] = dct[key]\n        dct_order_n = {}\n        for key in dct_order:\n            dct_order_n[key] = len(dct_order[key])\n        score = 0\n        time = 0\n        for key in dct_order:\n            time += key\n            if 'A' in dct_order[key]:\n                score += 1\n            if 'B' in dct_order[key]:\n                score += 2\n                time += 40\n            if 'C' in dct_order[key]:\n                score += 4\n                time += 20\n            if 'D' in dct_order[key]:\n                score += 7\n                time += 300\n            if 'E' in dct_order[key]:\n                time += 200\n                score += 5\n        return (score, time)\n\nassert Solution().solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == (3, 543)\nprint(Solution().solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\"))\n\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\nassert Solution().solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == (3, 543)\nprint(Solution().solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\"))\n\n-----Problem-----\nA judge sits in the middle of a crowd and watches them perform a contest. At the beginning of each contest, the judge knows the rating of each contestant, and of course the contest provides a scoreboard which indicates the current rating of each contestant.\n\nAt the end of the contest, the judge decides that one contestant will no longer be able to compete in the future contests, and that contestant\u2019s rating will have to be dropped from the scoreboard.\n\nGiven the initial ratings of all the contestants, your task is to determine which contestant will be excluded from all future contests.\n\n-----Solution-----\nWrite the list of contestants who will not be able to compete in future contests in a list.\n\n-----Example-----\nSample Input:\n6\n6\n7\n3\n8\n5\n6\nSample Output:\n6\n6\n7\n8\n5\n6\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\nassert Solution().solution(\"6\\n6\\n7\\n3\\n8\\n5\\n6\") == (\"6\\n6\\n7\\n8\\n5\\n6\")\nprint(Solution().solution(\"6\\n6\\n7\\n3\\n8\\n5\\n6\"))\n\n-----Problem-----\nA candy store charges different rates for candies based on the number of children they feed. Their rates are as follows:\n\n0 children:\n    1 candy costs $0.10 a piece\n1 child:\n    1 candy costs $0.05 a piece\n2 children:\n    1 candy costs $0.01 a piece\n3 children:\n    1 candy costs $0.50 a piece\n4 children:\n    2 candies cost $0.40 a piece\n5 children:\n    2 candies cost $0.70 a piece\n6 children:\n    3 candies cost $1.60 a piece\n7 children:\n    3 candies cost $3.10 a piece\n8 children:\n    3 candies cost $6.40 a piece\n9 children:\n    4 candies cost $10.60 a piece\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == (3, 543)\n\"\"\"\n\nimport sys\nfrom itertools import groupby"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\") == '3 543'\n\nassert solution(\"1 A right\") == '1 6'\n\nassert solution(\"1 C wrong\") == '1 1'\n\nassert solution(\"2 B wrong\") == '0 6'\n\nassert solution(\"1 B wrong\\n2 C wrong\\n3 B wrong\\n4 B right\\n5 C wrong\\n-1\") == '1 1'"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1') == '3 543'\n\"\"\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('1 right') == 1\nassert solution('1 A wrong') == 1\nassert solution('1 A right') == 1\nassert solution('1 E right') == 1\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1') == (3, 543)\nassert solution('7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n-1') == (4, 1076)\nassert solution('7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n-1') == (4, 1076)\nassert solution('7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n-1') == (4, 1076)\n'''\n\nimport sys\nimport itertools"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == '5'\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\") == \"5\"\n\nassert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\") == \"5\"\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"\n\nassert solution(\"10 4\\n4 1 5 3 1 2 5\\n1 3 2 4 1 4 3\\n3 1 4 2 1 2 4\\n2 3 4 4 4 3 1\") == \"5\"\n\nassert solution(\"3 5\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n\") == \"0\"\n\nassert solution(\"3 2\\n1 2 1\\n2 1 2\\n1 2 1\") == \"3\"\n\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\") == \"4\""
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\") == \"5\"\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == 5\n\n\"\"\"\nimport collections"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == 5\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"\nassert solution(\"9 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\") == \"-1\"\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '5'\n\n\"\"\"\n\nimport math\nimport numpy as np"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n4 5 6\\n7 8 9') == '1\\n4\\n7'\nassert solution('1 2 3\\n4 5 6\\n7 8 9\\n10 11 12') == '1\\n4\\n7\\n10'\n\n-----Challenge-----\n\n'''"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\\\n1 7\") == 'gunilla has a point'\n\nSolution:\n\nimport sys"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 7\\n5 5') == 'gunilla has a point'\nassert solution('2 9\\n1 7\\n5 5') == 'edward is right'\n'''\n\nfrom typing import List"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2\n1 7\n5 5\n\"\"\") == 'gunilla has a point'\n\n-----Explanation-----\nEdward first watched the pot start boiling in second 1, and then he watched the pot start boiling in seconds 7. The pot then first started boiling in seconds 5, and then in seconds 7.\n\nAs you can see, Gunilla is right \u2013 the pots started boiling in the same point of time, every time.\n\"\"\")\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open(r\"D:\\code\\practice\\python\\pyfun\\p5.txt\").read()) == \"gunilla has a point\"\n\"\"\"\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 7') == 'gunilla has a point'\nassert solution('3\\n10 20') == 'edward is right'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(2) == \"edward is right\"\nassert solution(3) == \"gunilla has a point\""
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1 7\\n5 5') == 'gunilla has a point'\n\n\"\"\"\n\nn = int(input())\ni = 0\ncount = 0\nans = 'edward is right'\nwhile i < n:\n    a,b = map(int, input().split())\n    if b-a >= 60:\n        count += 1\n        if count == 3:\n            ans = 'gunilla has a point'\n    i += 1\nprint(ans)"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 7\\n5 5\") == \"edward is right\"\nassert solution(\"1\\n2\\n3\") == \"gunilla has a point\"\nassert solution(\"0\\n0\\n0\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n7\\n7\\n7\\n7\\n7\\n8\\n8\\n8\\n8\\n9\\n9\\n9\\n9\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n11\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12\\n12"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n1 2\\n4 2\\n4 7\") == \"gunilla has a point\"\nassert solution(\"1 2\\n5 7\") == \"edward is right\"\nassert solution(\"1 7\\n5 3\") == \"edward is right\"\nassert solution(\"1 9\\n1 1\") == \"edward is right\"\nassert solution(\"1 1\\n4 2\") == \"edward is right\"\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 7\\n5 5') == 'gunilla has a point'\n'''\n\nn = int(stdin.readline())\nlog = [[] for _ in range(n)]\nfor i in range(n):\n    a, b = map(int, stdin.readline().split())\n    log[i] = [a, b]\n\nans = 'edward is right'\n\nfor i in range(n - 1):\n    if log[i][1] < log[i + 1][0]:\n        ans = 'edward is wrong'\n        break\n\nprint(ans)\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 11\\n t 1 10\\n t 1 2\\n t 1 3\\n s 1\\n s 2\\n s 3\\n s 4\\n t 5 6\\n s 5\\n s 6\\n s 10\\n') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10''') == '''4\n4\n4\n1\n2\n2\n4\n'''\nprint(solution(stdin))\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('abc') == 'abc'\nassert solution('a b') == 'ab'\nassert solution('a b c') == 'abc'"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open(r\"D:\\Git\\AOC\\2020\\day_5.txt\").read()) == 't7'\n\"\"\""
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n1 1') == '0'\nassert solution('1\\n1 1\\n1 1') == '0'\nassert solution('1\\n1 1\\n1 1\\n1 1') == '0'\nassert solution('1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1') == '0'\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10\"\"\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\n\"\"\"\n\n\"\"\"\n\nimport sys\nfrom queue import Queue\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 11\\n t 1 10\\n t 1 2\\n t 1 3\\n s 1\\n s 2\\n s 3\\n s 4\\n t 5 6\\n s 5\\n s 6\\n s 10\\n') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\nassert solution('10 11\\n t 1 10\\n t 1 2\\n t 1 3\\n s 1\\n s 2\\n s 3\\n s 4\\n t 5 6\\n s 5\\n s 6\\n s 10\\n') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\n\nprint(solution(stdin))\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nclass Solution:\n\n    def __init__(self):\n        self.m = 0\n        self.d = defaultdict(list)\n\n\n    def read(self, stdin):\n        n, m = list(map(int, stdin.readline().strip().split(' ')))\n        self.m = m\n        for i in range(m):\n            typ, a, b = list(stdin.readline().strip().split(' '))\n            if typ == 't':\n                self.d[a].append(b)\n                self.d[b].append(a)\n            elif typ =='s':\n                print(len(self.d[a]) - 1)\n\n    def solution(self):\n        visited = set()\n        for key in self.d:\n            if key in visited:\n                continue\n            self.dfs(key, visited)\n            visited.add(key)\n\n\n    def dfs(self, key, visited):\n        for child in self.d[key]:\n            if child not in visited:\n                self.dfs(child, visited)\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 11\\n\"\n                \"t 1 10\\n\"\n                \"t 1 2\\n\"\n                \"t 1 3\\n\"\n                \"s 1\\n\"\n                \"s 2\\n\"\n                \"s 3\\n\"\n                \"s 4\\n\"\n                \"t 5 6\\n\"\n                \"s 5\\n\"\n                \"s 6\\n\"\n                \"s 10\\n\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\n\"\"\"\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 11\\n'\n                't 1 10\\n'\n                't 1 2\\n'\n                't 1 3\\n'\n                's 1\\n'\n                's 2\\n'\n                's 3\\n'\n                's 4\\n'\n                't 5 6\\n'\n                's 5\\n'\n                's 6\\n'\n                's 10\\n') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\nprint(solution(stdin))\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2') == '2015\\n1982\\n2016\\n'\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == '2016\\n1982\\n2016'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == '2015\\n1982\\n2016\\n'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == '2015\\n1982\\n2016'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2') == '2015\\n1982\\n2016'"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n\") == \"2016\\n1982\\n2016\"\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n') == '2016\\n1982\\n2016'"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n1982\\n2016\\n\"\n\nSample Input:\n3\nIceland 2016\nSweden 2015\nIceland 1982\n4\nSweden 1\nIceland 1\nIceland 2\nNorway 1999\n5\nSweden 1\nIceland 1\nIceland 2\nIceland 3\nIceland 4\nSample Output:\n2015\n1981\n2016\n\nExplanation:\nIceland went on his first trip to Sweden on year 2016, so the answer is 2015.\nIceland went on his second trip to Sweden on year 1982, so the answer is 1981.\nIceland went on his third trip to Sweden on year 2016, so the answer is 2016.\nIceland went on his fourth trip to Sweden on year 1999, so the answer is 1999.\nIceland went on his fifth trip to Sweden on year 2018, so the answer is 2018.\n\"\"\"\n\nn = int(input())\ndict = {}\n\nfor _ in range(n):\n    country, year = input().split()\n    dict[country] = int(year)\n\nq = int(input())\n\nfor _ in range(q):\n    country, k = input().split()\n    print(dict[country] + int(k) - 1)\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2') == '2016\\n1982\\n2016'\nprint(solution(stdin))\n\"\"\"\n\n\nclass TrieNode:\n    def __init__(self):\n        self.children = [None] * 26\n        self.end = False\n\n    def is_end(self):\n        return self.end\n\n    def add_child(self, idx, node):\n        self.children[idx] = node\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('a') == 1\nassert solution('aa') == 1\nassert solution('aaa') == 1\nassert solution('aaaa') == 1\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abbcccddddeeeee') == 10\n\"\"\""
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\nprint(solution(stdin.readline().strip()))\n\nSample Input 1:\naababcc\nSample Output 1:\n3\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abbcccddddeeeee') == 10\n\"\"\"\n\nimport collections\n\nimport pytest"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\nassert solution(\"bbcccbddddeeeee\") == 10\nassert solution(\"abcccddddeeeee\") == 10\nassert solution(\"bbcccbdddde\") == 8\nassert solution(\"bbcccbddddeeee\") == 10\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ab') == 2\nassert solution('abc') == 3\nassert solution('abcc') == 4\nassert solution('abcde') == 5\nassert solution('abcdef') == 6\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abbcccddddeeeee') == 10\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ab\") == 2\nassert solution(\"abc\") == 3\nassert solution(\"abcde\") == 5\n\"\"\""
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nprint(solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\"))\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\n\"\"\"\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency.. is a blight on.. and its\\nhumanity\"\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\n\"\n                \"Inefficiency is a blight on the world and its\\n\"\n                \"humanity\") == \"Engineering will save the world from inefficiency\\n.\"\n                \" is a blight on.. and its\\n\"\n                \"humanity\"\nprint(solution(stdin))\n\n-----Test input-----\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\n\n-----Explanation-----\nEngineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency.. is a blight on.. and its\\nhumanity\"\nprint(\"All tests passed.\")\n---\nThere is a.py solution file. \nThis file imports your solution function. It does so by importing your solution file and then executes your function inside of that file.\n\n---\nChallenge\n\nMy solution should work correctly even if the number of words is very large.\n\n-\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Inefficiency is a blight on the world and its humanity\") == \"Inefficiency is a blight on the world and its humanity\"\nassert solution(\"I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a pangram for I am a"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\n'''\n) == '''\nEngineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\n'''.strip()\n\nassert solution(\n'''\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\n'''\n) == '''\nEngineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\n'''.strip()\n\nassert solution(\n'''\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\n'''\n) == '''\nEngineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\n'''.strip()\n\n'''\n--------------------\n'''\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency.. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency.. is a blight on.. and its\\nhumanity'\nassert solution('Inefficiency is a blight on the world and its\\nhumanity') == 'Inefficiency is a blight on the world and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency') == 'Engineering will save the world from inefficiency'\nassert solution('Inefficiency is a blight on the world and its\\nhumanity') == 'Inefficiency is a blight on the world and its\\nhumanity'\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency.. is a blight on.. and its\\nhumanity'\nassert solution('a b c d\\na b c d') == 'a. b. c. d'\nassert solution('Hello') == 'Hello'\nassert solution('Hello\\n') == 'Hello'\nassert solution('abc\\n\\n\\n\\ndef\\n') == 'abc. def'\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\") == \"Engineering will save the world from inefficiency\"\nassert solution(\"Inefficiency is a blight on the world and its\") == \"Inefficiency. is a blight on the world and its\"\nassert solution(\"I am a human being\") == \"I. am a.. and human...\""
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stderr.readline()) =='satisfactory\\n'\n\"\"\"\n\nfrom itertools import product\nfrom typing import Dict\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\n\"\"\""
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\nassert solution('5 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') =='satisfactory'\nassert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\nassert solution('5 3\\n-1 2 -3\\n1 2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') =='satisfactory'\n\"\"\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') == 'unsatisfactory'\n\n-----Constraints-----\n$1 \\leq m \\leq 20$\n$1 \\leq n \\leq 20$\n$-n \\leq {x_i} \\leq n$\n$-n \\leq {y_i} \\leq n$\n$-n \\leq {z_i} \\leq n$\n$1 \\leq {x_i} \\leq {y_i} \\leq {z_i} \\leq n$\nAt most $100$ instances.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n\") == \"unsatisfactory\"\nprint(\"passed\")\n\"\"\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\nassert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"satisfactory\"\n\n\"\"\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\nassert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') =='satisfactory'\nprint('Test pass.')\n\n-----Note-----\nThis is a sample test case. You can find bigger test cases here: https://developer.yandex.com/load-test/doc/sample-testcases/3sat.\n\nAfter you finish the problem, paste the input and output here, then send the link to the chat channel and wait for the verdict.\n\nThanks for the problems solved with the help of the participants.\n'''\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == 'unsatisfactory'\nassert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") =='satisfactory'\nassert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") =='satisfactory'\n\n'''\nimport sys\n\nassert len(sys.argv) == 2\nlines = sys.argv[1]\n\nnum_clauses, num_variables = list(map(int, lines.split(' ')))\n\nclauses = []\n\nfor _ in range(num_clauses):\n    clause = list(map(int, lines.split(' ')[1:]))\n    clauses.append(clause)\n\nsatisfiable = True\n\nfor clause in clauses:\n    if len(clause) == 3:\n        for literal in clause:\n            if literal == 0:\n                satisfiable = False\n                break\n    else:\n        for literal in clause:\n            if literal!= 0:\n                break\n        else:\n            satisfiable = False\n            break"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str([-1, 2, 3])) == 'unsatisfactory'\nassert solution(str([-1, -2, 3])) =='satisfactory'\nassert solution(str([1, 2, 3])) == 'unsatisfactory'\nassert solution(str([1, -2, 3])) =='satisfactory'\n\"\"\""
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = dict()\nfor i in range(n):\n    d[a[i]] = d.get(a[i], 0) + 1\n\nmaxx = max(d.values())\nfor key, value in d.items():\n    if value == maxx:\n        print(key)\n        break\nelse:\n    print('none')\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\n\"\"\""
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\ninp = [int(i) for i in sys.stdin.readline().strip().split(\" \")]\nresult = dict()\nfor i, n in enumerate(inp):\n    if n not in result.keys():\n        result[n] = i + 1\nprint(result[max(result)])\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\n\"\"\"\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n4\\n4\\n1\") == \"none\"\nassert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\nassert solution(\"3\\n4\\n1\") == \"none\"\nassert solution(\"10\\n5 1 4 1 3 4 1\") == \"none\"\nassert solution(\"6\\n4 4 4 4 4 4 4\") == \"none\"\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\nassert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\nassert solution(\"8\\n1 1 1 1 1 1 1 1\") == \"none\"\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3\\n1\") == \"0\"\nassert solution(\"2\\n3\\n1\\n2\") == \"0\"\nassert solution(\"1\\n1\") == \"none\"\nassert solution(\"1\\n1\\n1\") == \"none\"\nassert solution(\"1\\n2\\n3\") == \"none\"\n\"\"\""
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split()))\nunique = set(l)\nunique = list(unique)\nunique.sort()\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '4\\n'\n    '2\\n'\n    '3\\n'\n    '1\\n'\n    ) == 'none'\nassert solution(\n    '4\\n'\n    '2\\n'\n    '2\\n'\n    '2\\n'\n    ) == 'none'\n\nassert solution(\n    '4\\n'\n    '6\\n'\n    '2\\n'\n    '3\\n'\n    ) == 'none'\nassert solution(\n    '5\\n'\n    '5\\n'\n    '1\\n'\n    '3\\n'\n    ) == 'none'\n\nassert solution(\n    '3\\n'\n    '1\\n'\n    '2\\n'\n    ) == 'none'\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20:00:00') == '08:00:00'\nassert solution('04:00:00') == '20:00:00'\n\nprint('Success')\n\"\"\"\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20:00:00', '04:00:00') == '08:00:00'\nprint(solution('20:00:00', '04:00:00'))\nassert solution('13:42:21', '04:42:21') == '17:22:21'\nprint(solution('13:42:21', '04:42:21'))\nassert solution('18:13:22', '04:13:22') == '20:24:22'\nprint(solution('18:13:22', '04:13:22'))\nassert solution('01:23:22', '05:23:22') == '07:13:22'\nprint(solution('01:23:22', '05:23:22'))\nassert solution('24:23:22', '05:23:22') == '22:43:22'\nprint(solution('24:23:22', '05:23:22'))\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"04:00:00\") == \"12:00:00\"\nassert solution(\"22:21:33\") == \"09:59:59\"\n\n\"\"\"\n\nimport sys\nfrom datetime import datetime, timedelta"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20:00:00', '04:00:00') == '08:00:00'\nassert solution('16:00:00', '07:01:00') == '23:01:00'\nassert solution('18:06:33', '18:17:59') == '24:07:59'"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\n\"\"\""
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\n\"\"\"\n\na, b = input().split()\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"04:00:00\") == \"08:00:00\"\nassert solution(\"12:34:56\") == \"01:34:56\"\nassert solution(\"12:34:59\") == \"02:35:59\"\nassert solution(\"23:59:59\") == \"06:59:59\"\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\n\"\"\"\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20:00:00', '04:00:00') == '08:00:00'\nprint(solution('20:00:00', '04:00:00'))\n\nimport sys\nassert int(solution(sys.stdin.readline().strip(), sys.stdin.readline().strip())) == int(sys.stdin.readline().strip())\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"23:59:59\") == \"23:59:59\"\n\"\"\"\n\nfrom datetime import datetime\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('31 6') == '4'\nassert solution('9 9') == '4'\nassert solution('9 99') == '4'\nassert solution('9 999') == '4'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"31 6\") == \"4\"\nprint(solution(\"31 6\"))\n\"\"\"\n\nimport sys\n\ntry:\n    a = int(sys.argv[1])\n    b = int(sys.argv[2])\nexcept:\n    print(\"The input should be 2 integers separated by space.\")\n    sys.exit()\n\ni = 2\nk = 1\nwhile True:\n    if a % i == 0 and b % i == 0:\n        k += 1\n        a /= i\n        b /= i\n    else:\n        i += 1\n    if a == 1 and b == 1:\n        break\nprint(k)\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"31 6\") == \"4\"\n\"\"\"\n\nfrom __future__ import print_function\n\nimport sys"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('31 6') == '4'\n\"\"\"\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"31 6\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('31 6') == '4'\n\"\"\"\n\nimport sys\nimport os\nimport math\nimport timeit\n\nfrom input_utils import parse_input, parse_output"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('31 6') == '4'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 6') == '4'\nassert solution('100 500') == '6'\nassert solution('10 10') == '0'\nassert solution('100 100') == '0'\nassert solution('1 100') == '1'\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"31 6\") == 4\n\"\"\"\n\nfrom typing import Dict, List, Tuple"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('31 6') == '4'\n\n\"\"\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == 2.6666666666666665\n\"\"\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\n\"\"\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '2.6666666666666665'\n\"\"\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n') == '6.0'\nassert solution('2\\n7\\n') == '9.0'\nassert solution('7\\n') == '8.38610619E-21'\nassert solution('10000\\n') == '1.977264424e+19'\nassert solution('0\\n') == '0.0'\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == 2.6666666666666665\n\"\"\"\nimport sys\nimport math\nimport numpy as np"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\n\"\"\"\n\nfrom math import factorial\n\nN = int(input())\nresult = 0\nfor i in range(0, N + 1):\n    result += 1 / factorial(i)\n\nprint(result)\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == 2.6666666666666665\n\nassert solution(\"1000\") == 20.085536923187668\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == 2.6666666666666665\n\"\"\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == 2.6666666666666665\n\"\"\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n3\n''') == '2.6666666666666665'\n\n\"\"\"\n\nimport math\nimport collections\nimport numpy as np"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"5 1 5\") == \"opponent\"\n\"\"\"\n\nfrom math import gcd\nimport sys"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 7\\n') == 'paul'\nassert solution('5 3 6\\n') == 'opponent'\nassert solution('5 3 6\\n') == 'paul'\n\n-----Source-----\n-----Test Cases-----\n-----Best Time to Buy and Sell Stock-----\n\"\"\"\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 7') == 'paul'\nassert solution('5 2 4') == 'opponent'\nassert solution('7 3 7') == 'opponent'\n\n-----Constraints-----\n$1 \\leq N \\leq 10^9$\n$0 \\leq P \\leq 10^9$\n$0 \\leq Q \\leq 10^9$\n\n\"\"\""
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 7\\n') == 'paul'\nassert solution('5 3 1\\n') == 'opponent'"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"4 4 6\") == \"opponent\"\nassert solution(\"2 6 5\") == \"paul\"\nassert solution(\"4 5 6\") == \"opponent\"\n\nSample Input:\n3 4 6\nSample Output:\nopponent\n\nSample Input:\n10 3 4\nSample Output:\npaul\n\nSample Input:\n5 5 6\nSample Output:\npaul\n\nSample Input:\n5 7 4\nSample Output:\nopponent\n\"\"\""
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 7\\n') == 'paul'\nassert solution('5 0 7\\n') == 'opponent'\nassert solution('1 0 7\\n') == 'paul'\nassert solution('1 1 7\\n') == 'opponent'\nassert solution('7 0 7\\n') == 'paul'\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'paul'\nassert solution('5 3 7') == 'opponent'\nassert solution('0 3 7') == 'paul'\nassert solution('10 5 4') == 'opponent'\nassert solution('5 1 7') == 'paul'\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'paul'\nassert solution('5 3 7') == 'paul'\nassert solution('6 0 8') == 'opponent'\nassert solution('5 3 4') == 'opponent'\nassert solution('5 3 0') == 'paul'\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"5 3 4\") == \"opponent\"\nassert solution(\"5 3 5\") == \"paul\"\nassert solution(\"5 0 5\") == \"paul\"\nassert solution(\"0 0 5\") == \"opponent\"\n\"\"\"\n\n\"\"\"\nimport math\nn, p, q = [int(x) for x in input().split(' ')]\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\n\nassert solution(\"5 3 0\") == \"opponent\"\nassert solution(\"5 3 3\") == \"paul\"\n\"\"\"\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n') == 2\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"2\"\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10**8)\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\n'''\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 2\n\n-------\nSample Input:\n3\nSample Output:\n3\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n') == 2\n\"\"\"\nimport math\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\n'''"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n') == '2'\n\nassert solution('1\\n') == '1'\n\nassert solution('2\\n') == '2'\n\nassert solution('10\\n') == '5'\n\nassert solution('11\\n') == '4'"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == 2\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == 2\nassert solution('2') == 3\nassert solution('3') == 4\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('123') == 'Yes'\nassert solution('123a') == 'No'\nassert solution('a123') == 'Yes'\nassert solution('a1') == 'No'\nassert solution('a12') == 'Yes'\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123\\n123a\") == \"No\"\n\"\"\"\nimport re"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('123') == 'No'\nassert solution('123a') == 'Yes'\nassert solution('12345') == 'Yes'\n\"\"\""
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'No'\nassert solution('123') == 'Yes'\nassert solution('1a2') == 'Yes'\nassert solution('aA') == 'No'\n\"\"\""
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"123\", \"123a\") == \"No\"\nassert solution(\"123\", \"1234\") == \"Yes\"\nassert solution(\"1234\", \"1234\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123') == 'Yes'\nassert solution('123a') == 'No'\n\"\"\""
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"123a\") == \"Yes\"\nassert solution(\"123a1\") == \"No\"\nassert solution(\"123a12\") == \"Yes\"\nassert solution(\"123a1a\") == \"No\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('123', '123a') == 'Yes'\nassert solution('abcd', 'Abcd') == 'Yes'\nassert solution('bc', 'BC') == 'Yes'\nassert solution('', 'bc') == 'No'\nassert solution('123', '123') == 'Yes'\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"12345\") == \"Yes\"\nassert solution(\"\") == \"Yes\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('123\\n123a') == 'No'\nassert solution('123\\n123a') == 'No'\nassert solution('123\\n123a') == 'No'\nassert solution('123\\n123a') == 'No'\nassert solution('123\\n123a') == 'No'\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nassert solution(\"qwqw qweqw qwqw qqwqw\") == \"wqwq wqwq wqwq wqwq\"\nassert solution(\"iit\") == \"it\"\nassert solution(\"lopa krraklop\") == \"lopa\"\nassert solution(\"\") == \"\"\n\"\"\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"kemija\") == \"kepemipijapa\"\n\nassert solution(\n\"pepaprika\") == \"pepapripikapa\"\n\nassert solution(\n\"paprika\") == \"papapripikapa\"\n\nassert solution(\n\"zepemepi\") == \"zepepemepipi\"\n\nassert solution(\n\"papipap\") == \"papapapipap\""
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nprint(solution(\"zepelepenapa papapripikapa\"))\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\"\n\nfrom typing import Dict, List, Tuple\n\n\nclass Solution:\n    def decode(self, stdin: str) -> str:\n        \"\"\"\n        #\u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0432 \u0434\u0432\u0430, \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434\n        :param stdin: str\n        :return: str\n        \"\"\"\n\n        assert isinstance(stdin, str)\n\n        def code(encoded_sentence: str) -> Tuple[str, int]:\n            \"\"\"\n            \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0432 \u0434\u0432\u0430\n            :param encoded_sentence: str\n            :return: Tuple[str, int]\n            \"\"\"\n            sentence, length = '', len(encoded_sentence)\n            for i in range(0, length, 2):\n                sentence += encoded_sentence[i]\n                if encoded_sentence[i] in 'aeiou':\n                    sentence += 'p' + encoded_sentence[i]\n            return sentence, (i + 1) // 2\n\n        def decode(encoded_sentence: str) -> str:\n            \"\"\"\n            \u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0432 \u0434\u0432\u0430\n            :param encoded_sentence: str\n            :return: str\n            \"\"\"\n            if not encoded_sentence:\n                return encoded_sentence\n            else:\n                sentence, length = code(encoded_sentence)\n                return sentence + decode(encoded_sentence[length:])\n\n        return decode(stdin)\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\n\"\"\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"kemija\") == \"kepemipijapa\"\nassert solution(\"paprika\") == \"papapripikapa\"\nassert solution(\"popepepipipoopoopoopoopoopoopepe\") == \"popepepipipoopoopoopoopopoopoope\"\nassert solution(\"oaeuoeuoeueiueiueui\") == \"oaeueiueiueiueui\"\nassert solution(\"oaeuoeuoeueiueiueui\") == \"oaeueiueiueiueui\"\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"32 2\") == \"-32\"\n\"\"\"\n\n\n\"\"\"\nProblem: https://codeforces.com/problemset/problem/158/A\n\"\"\"\n\n\"\"\"\nLet A be a (finite) set of positive integers.\nLet a be an integer.\nLet S be a set of positive integers.\nLet i be an integer.\n\nWrite a program that determines whether the intersection of the set A and the set S is empty.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('32 2') == '-32'\n\"\"\"\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('32 2') == '-32'\nassert solution('64 1') == 'IMPOSSIBLE'\nassert solution('32 1') == 'ALL GOOD'\nassert solution('3 1000000000') == 'IMPOSSIBLE'\n\"\"\""
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('32 2') == '-32'\nassert solution('1 100') == 'IMPOSSIBLE'\nassert solution('100 100') == 'ALL GOOD'"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(32 2) == '-32'\n\"\"\"\n\nX, Y = [int(i) for i in input().split()]\n\nprint('IMPOSSIBLE' if Y > (X - X % Y) else X - X % Y)\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(32, 2) == 'IMPOSSIBLE'\nassert solution(25, 3) == 'IMPOSSIBLE'\nassert solution(32, 4) == 'ALL GOOD'\nassert solution(1, 100) == 'IMPOSSIBLE'\nassert solution(0, 100) == 'IMPOSSIBLE'\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('32 2') == '-32'\nassert solution('-32 2') == '-32'\nassert solution('32 -2') == 'IMPOSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"32 2\") == \"-32\"\nassert solution(\"6 1\") == \"IMPOSSIBLE\"\nassert solution(\"2 0\") == \"IMPOSSIBLE\"\n\"\"\""
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"32 2\") == \"-32\"\nassert solution(\"0 0\") == \"IMPOSSIBLE\"\nassert solution(\"1 1\") == \"IMPOSSIBLE\"\nassert solution(\"0 9\") == \"ALL GOOD\"\nassert solution(\"3 2\") == \"1.00\"\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"32 2\") == \"-\"\nassert solution(\"0 1\") == \"IMPOSSIBLE\"\nassert solution(\"0 2\") == \"ALL GOOD\"\nassert solution(\"-32 2\") == \"-32\"\nassert solution(\"0 0\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"one\"\nassert solution(\"10 3 4\") == \"none\"\n\nprint(\"Successfully passed all tests.\")\n\n-----Solution-----\n\"\"\"\n\na, b, c, d = map(int, input().split())\np, m, g = map(int, input().split())"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2 3 3') == 'both'\nassert solution('1 3 4') == 'one'\nassert solution('1 2 3 4') == 'none'\n\n\"\"\"\n\na, b, c, d = map(int, stdin.split())\np, m, g = map(int, stdin.split())\n\ncount = 0\nwhile True:\n    count += 1\n    if count % 3 == 0:\n        p = (p + 1) % (a + b)\n    elif count % 3 == 1:\n        m = (m + 1) % (c + d)\n    else:\n        g = (g + 1) % (a + b)\n    if p == 0 and m == 0 and g == 0:\n        break\n\nprint(['both', 'one', 'none'][(p + m + g) % 3])\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\n\n\"\"\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"one\"\nassert solution(\"2 2 3 4\") == \"none\"\nassert solution(\"2 1 3 3\") == \"both\"\nassert solution(\"1 2 3 4\") == \"none\""
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\n\"\"\""
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n2 2 3 3\n1 3 4\n\"\"\") == \"both\"\nassert solution(\n\"\"\"\n2 2 3 3\n1 3 4\n\"\"\") == \"one\"\nassert solution(\n\"\"\"\n2 2 3 3\n1 3 4\n\"\"\") == \"none\"\n\"\"\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2 3 3\\n1 3 4') == 'both'\nassert solution('2 2 3 3\\n1 3 5') == 'both'\nassert solution('2 2 3 3\\n1 3 3') == 'both'\nassert solution('2 2 3 3\\n1 3 3') == 'one'\n\nprint('Success')\n\n----------------------------------------------------------"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 3 3\\n1 3 4') == 'both'\nassert solution('1 3 4\\n1 3 4') == 'none'\nassert solution('2 2 3 3\\n2 3 4') == 'one'\nassert solution('1 3 4\\n1 3 4') == 'one'\nassert solution('2 2 3 3\\n1 3 4') == 'one'\n\"\"\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 3 3\\n1 3 4\") == \"both\"\nassert solution(\"1 1 1 1\\n1 1 1\") == \"none\"\nassert solution(\"1 1 1 1\\n1 1 1\") == \"one\"\nassert solution(\"1 1 1 1\\n2 2 2\") == \"both\"\nassert solution(\"1 1 1 1\\n1 1 2\") == \"one\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 3 3\\n1 3 4\") == \"both\"\nassert solution(\"1 2 3 4\\n2 3 4\") == \"one\"\nassert solution(\"1 2 3 4\\n5 6 7\") == \"none\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"1 2 3\") == \"4\"\nassert solution(\"-1 -1 2\") == \"2\"\n\nprint(solution(\"4 6 8\"))\nprint(solution(\"1 2 3\"))\nprint(solution(\"-1 -1 2\"))\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 6 8') == '10'\n\n\"\"\""
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 6 8') == '10'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6 8\") == \"10\"\n\n\"\"\"\n\nimport sys\n\na, b, c = [int(i) for i in sys.stdin.readline().strip().split()]\nprint(max(a + b, a + c, b + c) - min(a, b, c))\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 6 8') == '10'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"4 6 10\") == \"8\"\nassert solution(\"4 10 4 10\") == \"10\"\nassert solution(\"8 8 8\") == \"8\"\nassert solution(\"10 10 10\") == \"10\"\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 6 8') == '10'\nassert solution('-2 2 1') == '0'\nassert solution('0 2 5') == '7'\nassert solution('-7 -3 1') == '0'"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"8 4 6\") == \"10\"\nassert solution(\"4 6 10\") == \"8\"\n\"\"\"\n\na = input()\nb = input()\nc = input()\n\narr = [int(a), int(b), int(c)]\narr.sort()\nprint(arr[2])\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 6 8') == '10'\nassert solution('0 5 5') == '5'\nassert solution('0 1 0') == '0'\nassert solution('-5 0 3') == '3'\nassert solution('-100 -200 -300') == '0'\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 6 8') == '10'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == '0'\nassert solution('1 2\\n') == '2'\nassert solution('2 1\\n') == '1'\nassert solution('2 2\\n') == '1'\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\""
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''400 70''') == '533'\nassert solution('''500 70''') == '533'\nassert solution('''500 70''') == '533'\nassert solution('''500 70''') == '533'\nassert solution('''500 70''') == '533'\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"500 70\") == \"533\"\nprint(solution(\"500 70\"))\n\"\"\"\n\nimport sys\n\nh, v = map(int, sys.stdin.readline().split())\n\nprint(int(h * (1 + v / 100) + h * 0.5))\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"500 70\") == \"533\"\nprint(solution(input()))\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"500 70\") == \"533\"\n\n\"\"\"\n\n\"\"\"\nSolution\n\"\"\"\n\nh, v = list(map(int, stdin.split()))\nprint(int(h + v + 1))\n\n\"\"\"\nTests\n\"\"\"\n\nfrom unittest.mock import patch\nfrom io import StringIO\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n\n    def test_01(self):\n        with patch('sys.stdin', StringIO(\"500 70\\n\")):\n            with patch('sys.stdout', new=StringIO()) as fake_out:\n                solution()\n                self.assertEqual(fake_out.getvalue(), \"533\\n\")\n\n    def test_02(self):\n        with patch('sys.stdin', StringIO(\"50 70\\n\")):\n            with patch('sys.stdout', new=StringIO()) as fake_out:\n                solution()\n                self.assertEqual(fake_out.getvalue(), \"613\\n\")\n\n    def test_03(self):\n        with patch('sys.stdin', StringIO(\"500 1\\n\")):\n            with patch('sys.stdout', new=StringIO()) as fake_out:\n                solution()\n                self.assertEqual(fake_out.getvalue(), \"554\\n\")\n\n    def test_04(self):\n        with patch('sys.stdin', StringIO(\"500 90\\n\")):\n            with patch('sys.stdout', new=StringIO()) as fake_out:\n                solution()\n                self.assertEqual(fake_out.getvalue(), \"814\\n\")\n\n    def test_05(self):\n        with patch('sys.stdin', StringIO(\"500 70\\n\")):\n            with patch('sys.stdout', new=StringIO()) as fake_out:\n                solution()\n                self."
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('500 70') == '533'\n\"\"\"\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"500 70\") == \"533\"\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('500 70') == '533'\nprint(solution('500 70'))\n\"\"\"\n\nimport sys\nfrom collections import Counter\nimport numpy as np\n\nassert solution('500 70') == '533'\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n2 3\\n4 2') == '3.0\\n4.0'\n\n\"\"\"\nimport math\nimport sys\nimport os\nfrom typing import List\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\"\"\"\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2 9\n69 60\n100 60\n\"\"\") == \"39.0\\n30.0\"\n\"\"\"\n\nSolution:\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 9\\n69 60\\n100 60\\n') == '39.0\\n30.0'\n\nprint(solution('2 9\\n69 60\\n100 60\\n'))\n\n-----Problem-----\nGiven that the coefficient of acceleration due to gravity is approximately 9.8 m/s^2, calculate the speed of a biker starting at the top of the slope and finishing at the bottom.\n\nHint: Try breaking this problem down into a series of simpler subproblems.\n\n-----Constraints-----\n - $1 \\le N \\le 4$\n - $1 \\le g \\le 100$\n - $1 \\le D \\le 10^4$\n - $\\theta \\in [1, \\; 90]$\n - $1 \\le \\theta \\le 89$\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'\n\"\"\"\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\nSample Case 1\nSample Case 2\nSample Case 3\n'''\nfrom math import acos, degrees, sqrt\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n2 9\n69 60\n100 60\n\"\"\") == \"\"\"\n39.0\n30.0\n\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0 30.0\"\n\"\"\""
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '1 2 3 4 5'\nassert solution('1 2 3 4 5', '1 2 3 4 5') == '1 2 3 4 5'\nassert solution('1 2 3 4 5', '4 5 6 7 8 9 10') == '4 10'\nassert solution('1 2 3 4 5', '1 4 7 10') == '1 4 7'\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == '1 2'\nassert solution('5\\n23 27 31 28 30') == '2 28'\n\n\"\"\""
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open('test_input.txt')) == '3 21'"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\"\"\"\n\nfrom collections import defaultdict\n\nN = int(input())"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\nprint(solution(\"5\\n23 27 31 28 30\"))\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6\\n1 2 3\") == \"2\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6\\n1 2 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6\\n1 2 3\") == 2\n\"\"\"\n\nfrom typing import IO, List, Set, Dict"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 1\\n0 2 1') == '2'\nassert solution('2 6 3\\n1 2 1') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6\\n1 2 3\") == 2\n\"\"\""
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6\\n1 2 3\") == 2\n\"\"\"\n\n\"\"\"\nThe problem can be solved in the following ways:\n1) The time complexity is O(n^2), because for each possible number of battles it is necessary to check the same number of battles.\n2) The space complexity is O(1).\n\n\"\"\""
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 6\\n1 2 3') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3 6\n1 2 3\n\"\"\") == 2\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == 2\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(s) == res\nprint(solution(s))\n\n-----Solution-----\n\"\"\"\n\nn, a = [int(num) for num in stdin.split()]\nships = [int(num) for num in stdin.split()][1:]\n\nres = 0\nfor i, ship in enumerate(ships):\n    res = max(res, min(ship, a - ship))\n\nprint(res)\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('MWWMMMMW') == 'W'\nassert solution('WWWMMWWWMMMMMW') == 'W'\nassert solution('WWWWMMWWWWWMMWWMW') == 'W'\nassert solution('WWWWMMWWWWWMMMMMWW') == 'W'\nassert solution('WMWMWMMWWMMMMWMWWMW') == 'W'\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"MWWMWMWMW\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n1\nMWWMWMMWM\n\"\"\"\n) == \"9\"\nprint(solution(stdin))\n\nassert solution(\n\"\"\"\n3\nWWWMMW\n\"\"\"\n) == \"4\"\nprint(solution(stdin))\n\nassert solution(\n\"\"\"\n5\nMMMMM\n\"\"\"\n) == \"1\"\nprint(solution(stdin))\n\nassert solution(\n\"\"\"\n6\nMWMWMW\n\"\"\"\n) == \"3\"\nprint(solution(stdin))\n\nassert solution(\n\"\"\"\n8\nWWWWM\n\"\"\"\n) == \"3\"\nprint(solution(stdin))"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('MWWMWMMWM') == '9'\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('WMWMWMWM') == '9'\n\"\"\""
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('MWWMWMMWM') == 9\n\"\"\""
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"WWWMMWM\") == \"9\"\nprint(solution(\"WWWMMWM\"))\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('WMWMWMWWMW') == '9'\nassert solution('MWMWMW') == '6'\nassert solution('M') == '1'\nassert solution('W') == '0'\nassert solution('WWW') == '3'\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WMWMWMMMW\") == \"9\"\n\"\"\""
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('MWWMWMMWM') == 9\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == '3'"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n\n\"\"\"\n\nn, k = [int(x) for x in stdin.split()]\n\nsteps = []\nfor i in range(k):\n    steps.append(int(stdin.readline()))\n\nprint(steps)"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\nassert solution(\"5 4\\n8 -2 3 -2 3 undo 1\") == \"2\"\nassert solution(\"5 5\\n-1 -1 -1 -1 -1 undo 1\") == \"0\"\nassert solution(\"5 5\\n1 1 1 1 1 undo 1\") == \"0\"\nassert solution(\"5 5\\n1 1 1 1 1 undo 1\") == \"4\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 -2 3 undo 2\") == \"3\"\n\"\"\"\n\nn, k = map(int, stdin.split())\nl = [int(i) for i in stdin.split()]\n\nl1 = l[:k]\nl2 = l[k:]\n\nr = l1[0]\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n\"\"\"\n\nimport sys\nimport math\nimport re\nimport pdb\n\nclass Node:\n    def __init__(self, data, prev=None, next=None):\n        self.data = data\n        self.next = next\n        self.prev = prev"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\nassert solution('5 3\\n3') == '0'\nassert solution('5 2\\n1') == '4'\nassert solution('5 2\\n5') == '4'"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == '3'\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n8 2\\n8 -1\") == \"2\"\nassert solution(\"4 1\\n8 2\\n8 -1\") == \"0\"\nassert solution(\"4 2\\n8 2\\n8 1\") == \"0\"\nassert solution(\"4 1\\n8 2\\n8 -1\") == \"0\"\nassert solution(\"4 1\\n8 -2\\n8 1\") == \"3\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\n\nSample Input:\n3 5\n3 1 2 0 undo 1\nSample Output:\n0\n\"\"\"\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 3\n1 2 3\n3 2 1''') == '6 7'\nprint(solution(stdin))\n\n'''\n2 3\n1 2 3\n3 2 1\nSample Output\n6 7\nExplanation\nThe first line indicates that there are 2 swathers, and 3 stages, so we have 2 stages with 3 workers.\n\nAt stage 2, worker 1 starts first. They are waiting for worker 2.\nAt stage 3, worker 2 starts first. They are waiting for worker 3.\nAt stage 2, worker 3 starts first. They are waiting for worker 1.\nAt stage 2, worker 1 starts first. They are waiting for worker 3.\nAt stage 1, worker 2 starts first. They are waiting for worker 1.\nAt stage 3, worker 3 starts first. They are waiting for worker 2.\nAt stage 2, worker 2 starts first. They are waiting for worker 1.\nAt stage 3, worker 1 starts first. They are waiting for worker 2.\nAt stage 2, worker 3 starts first. They are waiting for worker 1.\nAt stage 1, worker 3 starts first. They are waiting for worker 2.\nAt stage 2, worker 2 starts first. They are waiting for worker 3.\nAt stage 2, worker 1 starts first. They are waiting for worker 2.\nAt stage 3, worker 3 starts first. They are waiting for worker 1.\nAt stage 1, worker 2 starts first. They are waiting for worker 3.\nAt stage 1, worker 3 starts first. They are waiting for worker 1.\nAt stage 2, worker 3 starts first. They are waiting for worker 2.\nAt stage 2, worker 2 starts first. They are waiting for worker 3.\nAt stage 1, worker 2 starts first. They are waiting for worker 1.\nAt stage 1, worker 3 starts first. They are waiting for worker 3.\nAt stage 1, worker 1 starts first. They are waiting for worker 2.\nAt stage 2, worker 1 starts first. They are waiting for worker 2.\nAt stage 2, worker 3 starts first. They are waiting for worker 1.\nAt stage 1, worker 3 starts first. They are waiting for worker 2.\nAt stage 2, worker 2 starts first. They are waiting for worker 3.\nAt stage 1, worker 2 starts first. They are waiting for worker 3.\nAt stage 1, worker 3 starts first. They are waiting for worker 2.\nAt stage 1, worker 2 starts first. They are waiting for worker 1.\nAt stage 2, worker 2 starts first. They are waiting for worker 1.\nAt stage 1, worker 2 starts first. They are waiting for worker 3.\nAt stage 1, worker 1 starts first. They are waiting for worker 2.\nAt stage 2, worker 3 starts first. They are waiting for worker 1.\nAt stage 1, worker 3 starts first. They are waiting for worker 2.\nAt stage 1, worker 2 starts first. They are waiting for worker 3.\nAt stage 1, worker 2 starts first. They are waiting for worker 1.\nAt stage 3, worker 1 starts first. They are waiting for worker 2.\nAt stage 1, worker 2 starts first. They are waiting for worker 2.\nAt stage 1, worker 3 starts first. They are waiting for worker 2.\nAt stage 1, worker 3 starts first. They are waiting for worker 1.\nAt stage 1, worker 1 starts first. They are waiting for worker 3.\nAt stage 1, worker 1 starts first. They are waiting for worker 2.\nAt stage 1, worker 2 starts first. They are waiting for worker 3.\nAt stage 1, worker 1 starts first. They are waiting for worker 1.\nAt stage 2, worker 1 starts first. They are waiting for worker 2.\nAt stage 1, worker 1 starts first. They are waiting for worker 2.\nAt stage 1, worker 1 starts first. They are waiting for worker 3.\nAt stage 1, worker 1 starts first. They are waiting for worker 1.\nAt stage 2, worker 3 starts first. They are waiting for worker 1.\nAt stage 1, worker 2 starts first. They are waiting for worker 3.\nAt stage 1, worker 1 starts first. They are waiting for worker 1.\nAt stage 1, worker 1 starts first. They are waiting for worker 2.\nAt stage 1, worker 3 starts first. They are waiting for worker 2.\nAt stage 1, worker 2 starts first. They are waiting for worker 1.\nAt stage 1, worker 1 starts first. They are waiting for worker 2.\nAt stage 1, worker 2 starts first. They are waiting for worker 1.\nAt stage 2, worker 2 starts first. They are waiting for worker 3.\nAt stage 2, worker 1 starts first. They are waiting for worker 2.\nAt stage 1, worker 1 starts first. They are waiting for worker 2.\nAt stage 2, worker 1 starts first. They are waiting for worker 3.\nAt stage 1, worker 3 starts first. They are waiting for worker 2.\nAt stage 1, worker 2 starts first. They are waiting for worker 1.\nAt stage 1, worker 2 starts first. They are waiting for worker 3.\nAt stage 1, worker 1 starts first. They are waiting for worker 1.\nAt stage 1, worker 3 starts first. They are waiting for worker 3.\nAt stage 1, worker 1 starts first. They are waiting for worker 1.\nAt stage 1, worker 1 starts first. They are waiting for worker 2.\nAt stage 1, worker 3 starts first. They are waiting for worker 2.\nAt stage 1, worker 1 starts first. They are waiting for worker 2.\nAt stage 1, worker 1 starts first. They are waiting for worker 1.\nAt stage 3, worker 1 starts first. They are waiting for worker 2.\nAt stage 1, worker 2 starts first. They are waiting for worker 1.\nAt stage 1, worker 1 starts first. They are waiting for worker 3.\nAt stage 1, worker 1 starts first. They are waiting for worker 2.\nAt stage 1, worker 1 starts first. They are waiting for worker 2.\nAt stage 1, worker 1 starts first. They are waiting for worker 3.\nAt stage 1, worker 1 starts first. They are waiting for worker 3.\nAt stage 1, worker 2 starts first. They are waiting for worker 1.\nAt stage 1, worker 1 starts first. They are waiting for worker 3.\nAt stage 1, worker 3 starts first. They are waiting for worker 2.\nAt stage 1, worker 3 starts first. They are waiting for worker 3.\nAt stage 1, worker 2 starts first. They are waiting for worker 1.\nAt stage 1, worker 1 starts first. They are waiting for worker 3.\nAt stage 1, worker 2 starts first. They are waiting for worker 1.\nAt stage 1,"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3\\n3 2 1') == '6 7'\n\"\"\"\n\n\"\"\"\ninput = \"\"\"\n2 3\n1 2 3\n3 2 1\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n1 2 3\\n3 2 1') == '6 7'\nassert solution('3 5\\n1 4 2\\n4 3 3\\n2 3 1') == '6 5 4'\nassert solution('1 4\\n1 2\\n1 1') == '1'\nassert solution('3 3\\n1 1 1\\n2 1 1\\n3 1 1') == '2 1 3'\nassert solution('3 3\\n1 2 1\\n2 1 1\\n3 1 1') == '2 1 3'\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3 1\n1 2 3\n''') == '3 2 1'\nassert solution('''\n2 2\n1 2 3\n3 2 1\n''') == '5 4'\nassert solution('''\n2 3\n1 2 3\n3 2 1\n''') == '6 7'\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"\nprint(solution(\"2 3\\n1 2 3\\n3 2 1\"))\n\n-----Notes-----\n\n-----Hints-----\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n1 2 3\\n3 2 1') == '6 7'\nassert solution('2 3\\n1 2 3\\n1 3 1') == '5 7'\n\"\"\"\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"\n\"\"\""
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\""
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_cases[0]) == expected_results[0]"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n5\ni am in the war\ni am confused\ni am in the war\ni am confused\ni am in the war\n\"\"\") == \"\"\"\n5\n64 correct\n665 incorrect\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\n-----Explanation-----\nThere is a single correct translation for the sentence, which is \"als mollen mollen mollen mollen mollen mollen\".\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\nmollen\nmollen\nmollen\nmollen\nmollen\n''') == '64 correct'\n\nassert solution('''9\nmollen\nmollen\nmollen\nmollen\nmollen\nmollen\nmollen\nmollen\nmollen\nmollen\n''') == '665 incorrect'\n\nassert solution('''6\nmollen\nmollen\nmollen\nmollen\nmollen\nmollen\n''') == '64 correct'\n\nassert solution('''2\nmollen\nmollen\n''') == '2 incorrect'\n\nassert solution('''1\nmollen\n''') == '1 correct'"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\n mollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\nprint('Test finished.')\n\n\"\"\""
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7\nals mollen mollen mollen mollen mollen mollen''') == '64 correct\\n665 incorrect'\nassert solution('''4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect''') == '64 correct\\n665 incorrect'\n\n-----Explanation-----\nThe translation of the sentence is:\n\n    als mollen mollen mollen mollen mollen mollen\n'''\n\"\"\"\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64\\n665\"\n\nNote: See other solutions for best practices when writing your own solutions.\n\n'''"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\") == \"64 correct\\n665 incorrect\"\n\n\"\"\"\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\n-----Problem-----\nShakespeare once wrote a play, The Wind_s_tawne_wife, in which there was a main character called Windor. The play began with the character creating a huge fan, which helped him to destroy the evil dragon. The windor first met a young princess who was saved from the dragon by the fan. Later, the fan was blown in different directions, which caused the windor to meet different types of monsters, which killed the princess and all the monsters. The windor then defeated the evil dragon and captured it. The play ended when the windor met the dragon.\n\nThe Dragon_s_tawne_wife was a very interesting play, and it is very similar to the game Mad_Libs. When the player enters the correct information, the text changes and the player can see a story. The player can also try to enter incorrect information, and the story changes as well. But all of that is interesting to play.\n\nGiven a text and the information about the correct and incorrect translations, you are to determine the number of words of the correct translation and the number of words of the incorrect translation.\n\n-----Solution-----\n\nimport string\n\nn = int(input())\ns = input()\nd = {}\nfor i in range(n):\n    w, e, c = input().split()\n    d[w] = e\n\ns = s.split()\nr = 0\nfor i in s:\n    if i in d:\n        r += 1\n    else:\n        r += 2\nprint(r, end=\" \")\nprint(n - r)\n\n-----Test cases-----\n\n-----Problem-----\nWrite a Python program to find the sum of digits of a given number N.\n\nNote: The number is in range [1, 100,000], so it is a 32-bit integer.\n\n-----Solution-----"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmelled destroy correct\\nmollen mills incorrect\") == \"64 correct\\n1045 incorrect\"\n\"\"\"\n\n\nfrom collections import Counter, OrderedDict\nfrom typing import OrderedDict, Counter\n\n\nclass Solution:\n    def __init__(self):\n        self.en2nr = OrderedDict()\n        self.nr2en = OrderedDict()\n\n    def solution(self, stdin: str) -> str:\n        d = OrderedDict()\n        for line in stdin.splitlines():\n            word, *s = line.split()\n            d[word] = s\n        for word in d:\n            for i, s in enumerate(d[word]):\n                self.nr2en[s] = word if i == 0 else self.nr2en[s] + word\n                self.en2nr[word] = s if i == 0 else self.en2nr[word] + s\n        for i, (en, nr) in enumerate(self.en2nr.items()):\n            self.en2nr[en] = [nr]\n        for i, (nr, en) in enumerate(self.nr2en.items()):\n            self.nr2en[nr] = [en]\n        for i, (en, nrs) in enumerate(self.en2nr.items()):\n            self.en2nr[en] = [en] + list(Counter(nrs).keys())\n        for i, (nr, ens) in enumerate(self.nr2en.items()):\n            self.nr2en[nr] = [nr] + list(Counter(ens).keys())\n        for i, (en, nrs) in enumerate(self.en2nr.items()):\n            self.en2nr[en] = [en] + list(Counter(nrs).keys())\n        for i, (nr, ens) in enumerate(self.nr2en.items()):\n            self.nr2en[nr] = [nr] + list(Counter(ens).keys())\n        total_correct = 0\n        total_incorrect = 0\n        for line in stdin.splitlines():\n            words = line.split()\n            correct_words = words[1:]\n            for i, word in enumerate(words):\n                if word == correct_words[i]:\n                    total_correct += 1\n                else:\n                    total_incorrect += 1\n        return f\"{total_correct} correct\\n{total_incorrect} incorrect\"\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\nassert solution('4\\n4 4 4 4') == '1'\nassert solution('4\\n1 1 1 1') == '4'\n\"\"\"\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\n\n\"\"\""
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\nassert solution('3\\n1 2 3') == '5'\nassert solution('5\\n1 2 3 4 5') == '7'\n\n-------------------------\nSample Input:\n7\n1 2 3 4 5 6 7\nSample Output:\n2\nassert solution('7\\n1 2 3 4 5 6 7') == '2'\n\n-------------------------\nSample Input:\n5\n1 2 3 4 5\nSample Output:\n-1\nassert solution('5\\n1 2 3 4 5') == '-1'\n\n-------------------------\nSample Input:\n1\n100\nSample Output:\n101\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\nassert solution('5\\n2 3 4 3 5') == '10'\nassert solution('5\\n4 5 6 7 3') == '6'\nassert solution('7\\n2 3 4 3 5 6 7') == '8'\nassert solution('7\\n2 3 4 6 5 3 7') == '8'\n\n\"\"\"\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\"\"\"\n\nN = int(input())\nT = list(map(int, input().split()))\n\nmax = 0\nfor i in range(len(T)):\n    if T[i] > max:\n        max = T[i]\n\nl = [i for i in range(N)]\n\ni = 0\nwhile i < len(l):\n    for j in range(len(T)):\n        if l[i] == T[j]:\n            i += 1\n            break\n    else:\n        l.pop(i)\n\nprint(max + 1 + len(l))\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 4 3\") == 7\n\"\"\"\n\n\"\"\"\nThe problem can be solved using Dynamic Programming. We know that it takes at most 4 days for a tree to grow to full maturity. Also, it takes 2 days for a tree to become mature. The idea is to keep track of the number of days for which a tree has been mature. If the number of days for which a tree has been mature is less than the number of days remaining until we hit the number of days for which a tree has been mature, then we can assume that the party is to be organized on the next day.\n\nHence, we need to keep track of the number of days that a tree has been mature and we can take the max of this and the number of days remaining until a tree becomes mature and compare these two values. The day that the party can be organized will be the minimum of these two values.\n\nHence, the problem can be solved using Dynamic Programming.\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 4 3\") == 7\n\"\"\"\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0.0 0.0\\n1.0 1.0\\n0.0 2.0\") == \"0.0 0.0\\n2.0 2.0\"\n\"\"\""
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n0 0\\n1 1\\n0 2\\n4\\n') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n0 0\\n1 1\\n0 2') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n\"\"\"\n\n\"\"\"\nSOLUTION\n\"\"\"\n\nimport math\n\nlines = stdin.splitlines()"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\") == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n\nassert solution(\"3\\n0 0\\n1 1\\n0 2\\n1 2\\n2 3\\n3 3\\n3 3\") == '0.0 0.0\\n1.0 1.0\\n0.0 4.0'\n\nassert solution(\"4\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\") == '1.0 1.0\\n1.0 2.0\\n1.0 3.0\\n1.0 4.0\\n1.0 5.0\\n1.0 6.0\\n1.0 7.0'\n\nassert solution(\"5\\n0.0 0.0\\n1.0 1.0\\n1.0 2.0\\n1.0 3.0\\n1.0 4.0\\n1.0 5.0\\n1.0 6.0\\n1.0 7.0\") == '0.0 0.0\\n1.0 1.0\\n1.0 2.0\\n1.0 3.0\\n1.0 4.0\\n1.0 5.0\\n1.0 6.0\\n1.0 7.0'\n\nassert solution(\"3\\n0 0\\n0 1\\n0 2\\n0 2\\n0 2\\n0 2\") == '0.0 0.0\\n0.0 1.0\\n0.0 2.0\\n0.0 2.0\\n0.0 2.0\\n0.0 2.0'"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\n\"\"\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n\"\"\"\n\nfrom math import sin, cos, atan2, pi\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n0 0\\n1 1\\n0 2') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution('3\\n1 1\\n0 2') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution('3\\n1 1\\n1 2') == '1.0 1.0\\n0.0 4.0'\n\"\"\"\n\n\nimport math\nimport sys\n\nsys.setrecursionlimit(5000)\n\n\nclass CookieCutter:\n    def __init__(self, max_x, max_y):\n        self.max_x = max_x\n        self.max_y = max_y\n\n    def grow(self, points, x, y):\n        if x >= self.max_x or y >= self.max_y:\n            return\n\n        if x == y == 0:\n            self.grow(points, x + 1, y)\n            self.grow(points, x, y + 1)\n            return\n\n        point = (x, y)\n\n        if point not in points:\n            self.grow(points, x + 1, y)\n            self.grow(points, x, y + 1)\n            points.add(point)\n\n        return\n\n    def shrink(self, points):\n        points_min_x = [p for p in points if p[0] == min([p[0] for p in points])]\n        points_min_y = [p for p in points if p[1] == min([p[1] for p in points])]\n        points_max_x = [p for p in points if p[0] == max([p[0] for p in points])]\n        points_max_y = [p for p in points if p[1] == max([p[1] for p in points])]\n\n        if len(points_min_x) == len(points_min_y):\n            # All points in the same vertical line\n            return points_min_x[0], points_max_y[0]\n        elif len(points_min_x) == len(points_max_y):\n            # All points in the same horizontal line\n            return points_min_y[0], points_max_x[0]\n        else:\n            raise Exception(f\"Points not on a line: {points}\")\n\n    def __call__(self, points):\n        # x and y axis\n        self.grow(points, 0, 0)\n\n        points = set(points)\n        x, y = self.shrink(points)\n\n        points.remove((x, y))\n        self.grow(points, x + 1, y)\n        self.grow(points, x, y + 1)\n\n        return points\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n0.0 0.0\\n1.0 1.0\\n0.0 2.0\\n4.0') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n0 0\\n1 1\\n0 2') == '0.0 0.0\\n1.0 2.0\\n0.0 4.0'\nassert solution('3\\n0.0 0.0\\n1.0 1.0\\n0.0 2.0') == '0.0 0.0\\n1.0 2.0\\n0.0 4.0'\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n0 0\n1 1\n0 2\n4''') == '''0.0 0.0\n2.0 2.0\n0.0 4.0'''\nassert solution('''3\n0 0\n1 1\n0 2\n3''') == '''0.0 0.0\n2.0 2.0\n0.0 4.0'''\nassert solution('''3\n1 1\n2 2\n3 3\n4''') == '''1.0 1.0\n4.0 4.0\n1.0 7.0'''\n\n-----Problem-----\nCookie cutters are used to make panning a dough easier. The basic idea is to enlarge (or shrink) the shape of the cookie cutter, while retaining its proportions. This allows us to roll the dough in an even way for every single cookie.\n\nIn particular, let's assume that the cookie cutter has $n$ vertices $(x_1, \\ldots, x_n)$. We want to find out which $x_i$ coordinates of the cookie cutter correspond to the four points of the new polygon: $x_1, \\ldots, x_n$, $x_2, \\ldots, x_n$, $x_1, \\ldots, x_n$, $x_2, \\ldots, x_2$.\n\nFor that purpose, please help us determine which coordinates of the cookie cutter will correspond to the vertices of the expanded polygon.\n\n-----Solution-----\nDraw a polygon using the given coordinates of the cookie cutter. Then, find the point $x_i$ that is closest to the origin in the positive quadrant. The point $x_i$ will be used as the new vertex of the expanded polygon."
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\n\"\"\""
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == 1\n\"\"\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '4'\nassert solution('4') == '6'\nassert solution('5') == '8'\n\"\"\"\n\nn = int(stdin.readline())\n\ndays = 0\n\nwhile n > 0:\n    if n % 3 == 0:\n        n = n // 3\n    elif n % 2 == 0:\n        n = n // 2\n    else:\n        n = n - 1\n    days += 1\n\nprint(days)\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"2\") == \"3\"\nassert solution(\"10\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('5') == '5'\nassert solution('100') == '10'\nassert solution('100') == '10'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\n\ndays = 1\nwhile n > 1:\n    n = n / 2\n    days += 1\nprint(int(days))"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('100') == '1'\n\"\"\"\n\nn = int(input())\n\ni = 2\nans = 0\nwhile n > 1:\n    if n % i == 0:\n        n //= i\n        ans += 1\n    else:\n        i += 1\nprint(ans)\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"5\") == 3\nassert solution(\"30\") == 4\nassert solution(\"50\") == 7\nassert solution(\"100\") == 8\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 1\n\n-----\nSample Input:\n5\nSample Output:\n2\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n'''\nfrom math import gcd"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n12 16\") == \"34\"\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n12 16\") == \"34\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n2 1\n5 1\n2\n''') == '6'\nassert solution('''\n3 1\n13 3\n3\n''') == '13'\nassert solution('''\n3 1\n12 16\n2\n''') == '14'\nassert solution('''\n3 1\n5 1\n2\n''') == '5'\nassert solution('''\n3 1\n4 1\n4\n''') == '8'\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n12 16') == '34'\n\"\"\""
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(r\"D:\\Code\\GitHub\\CrackingTheCodingInterview\\Chapter_5\\Inputs\\inputs_problems_5_5_1.txt\", \"r\")) == \"64\"\n\n\"\"\"\nimport math\n\n\nclass Solution:\n    @staticmethod\n    def maximum_rent(apartment_size: int, smartbulbs: int, outlets: int, min_smartbulbs: int) -> int:\n        \"\"\"\n        An integer $x$, such that $1 < x < 10^8$ is a square footage\n        An integer $y$, such that $1 < y < 10^8$ is the number of smartbulbs\n        An integer $z$, such that $1 < z < 10^8$ is the number of outlets\n\n        An integer $r$, such that $1 < r < 10^8$ is the maximum rent of an apartment\n\n        An integer $m$, such that $0 < m < 10^8$ is the maximum number of smartbulbs in the apartment\n        An integer $sigma$, such that $0 < sigma < 10^8$ is the minimum number of outlets in the apartment\n        \"\"\"\n\n        # find the min number of smartbulbs for apartment\n        min_smartbulbs = math.ceil(apartment_size / smartbulbs)\n        if smartbulbs > min_smartbulbs:\n            smartbulbs = min_smartbulbs\n\n        # find the max number of outlets for apartment\n        max_outlets = smartbulbs + 2 * (apartment_size - smartbulbs)\n        if max_outlets > outlets:\n            max_outlets = outlets\n\n        return (apartment_size - 1) * apartments_price + smartbulbs * smartbulbs_price + max_outlets * outlets_price"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n12 16') == '34'\nassert solution('3 1\\n12 21') == '29'\n\"\"\"\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n12 16\\n\") == \"34\"\nprint(\"Hashed out input is '34'\")\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n12 16') == '34'\nassert solution('3 1\\n8 16\\n8 16') == '24'\n\n\"\"\"\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n\"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n1 2 3 1''') == 3\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\nassert solution('1 2 3 4') == 2\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 1') == '3'\n\"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n1 2 3 1\n''') == '3'\n\n-----"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3 1') == '3'\n'''"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n\"\"\"\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\narr.sort()\nmin_diff = 10 ** 9\n\nfor i in range(n - 1):\n    if arr[i + 1] - arr[i] < min_diff:\n        min_diff = arr[i + 1] - arr[i]\n\nprint(min_diff)\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n'''"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('a\\nb\\n') == 0\nassert solution('1\\n2\\n1\\n') == 0\nassert solution('1\\n2\\n2\\n') == 0\nassert solution('1\\n2\\n1\\n2\\n') == 1\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.0\") == \"1088\"\nassert solution(\"1.23\") == \"1288\"\nassert solution(\"1.35\") == \"1388\"\nassert solution(\"1.34\") == \"1388\"\nassert solution(\"1.8\") == \"2388\"\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1.0') == '1088'\nprint(solution(stdin=input()))\n\"\"\"\n\nfrom math import floor\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '1088'\nassert solution('11.1') == '1086'\nassert solution('101') == '1002'\n\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1.0\") == \"1088\"\nassert solution(\"1.2345678901234567890\") == \"177790\"\nassert solution(\"1.25\") == \"1777.5\"\nassert solution(\"0.1\") == \"8\"\nassert solution(\"0.5\") == \"17.5\"\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.0\") == \"1088\"\nassert solution(\"1.01\") == \"1091\"\nassert solution(\"1.1\") == \"1100\"\nassert solution(\"1.2\") == \"1110\"\nassert solution(\"1.3\") == \"1112\"\n\"\"\"\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1.0') == 1088\nassert solution('2.1') == 2469\nassert solution('3.14159') == 3989\nassert solution('3.10000') == 3988\nassert solution('3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051342673980076962355349291443829931638481787719116223697917468354996988058011362928238624046225718371795277908260488130562342516381801681122729621\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.0\") == \"1088\"\nassert solution(\"0.1\") == \"9\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1.0\") == \"1088\"\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1.0') == '1088'\n\"\"\"\n\n\nfrom functools import reduce"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '1000'\nassert solution('6') == '618'\nassert solution('26') == '2666'\nassert solution('12.6') == '1266'\nassert solution('1.0') == '1000'\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 4\\n0 0 0\\n1 0 1\\n1 1 1\\n0 0 0\") == \"25.0\\n25.0\\n25.0\\n25.0\"\n\"\"\""
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 4\\n2 0 1 1 1\\n1 0 0 1 1\\n1 0 1 1 1\\n1 0 1 1 1\\n2 1 1 1 1') == '25.000000000\\n25.000000000\\n25.000000000\\n25.000000000'\n\n'''"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n50, 50, 150, 150, 0\") == \"25.000000000\"\n\"\"\"\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 4\\n1 0 0 1\\n2 1 1 1\\n4 2 2 2\\n5 3 3 3\\n\") == \"25.000000000\"\n\nSample Input:\n3 3\n1 0 0 1\n1 0 0 1\nSample Output:\n9.000000000\n\"\"\"\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 4') == '25.0\\n25.0\\n25.0\\n25.0\\n'\n\nSample Input:\n0 2\nSample Output:\n100.0\n100.0\n\nSample Input:\n1 2\nSample Output:\n5.0\n100.0\n\nSample Input:\n2 4\nSample Output:\n50.0\n50.0\n50.0\n50.0\n\nSample Input:\n2 0\nSample Output:\n0.0\n0.0\n\nSample Input:\n0 0\nSample Output:\n0.0\n0.0\n\nSample Input:\n2 1\nSample Output:\n0.5\n50.0\n\nSample Input:\n3 5\n100.0 100.0 100.0\n100.0 100.0 100.0\n100.0 100.0 100.0\nSample Output:\n25.0\n50.0\n25.0\n50.0\n\"\"\"\n\n################################################################################\n\"\"\"\nThe solution is much shorter than the example.\n\nBut it is important to be able to handle the slices that touch the top of the\ncheese.\n\nHere is a simple solution with an error bound of $10^{-5}$.\n\nThe idea is that we cut the cheese into $s$ slices, where the first slice has\nweight $1$ and the second slice has weight $s/s + 1$. We cut the cheese at\nseveral heights that are uniform enough.\n\nIf we are only interested in the thickness of the slices, the following\ncalculation will give us the desired result:\n\n$s * (s+1) / 2 = (s+1)(s+2) / 2$\n\nWe can solve for $s$ and then for $w$:\n\n$s = \\frac{2(w - 1)(w+1)}{w^2 + w - 2}$\n$w = \\frac{2s(s+1)}{s^2 + s - 2}$\n\nAnd finally, we can calculate the height:\n\n$z = 100 - (w-1)(100-w)$\n\nWe can use $\\tan(x) = \\frac{x}{90^\\circ}$ to get the angle in degrees.\n\"\"\"\n\nfrom math import cos, pi, tan"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 4') == '25.000000000\\n25.000000000\\n25.000000000\\n25.000000000'\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 4\\n100 100 100 100\") == \"25.000000000\"\n\"\"\""
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 4\\n0 0 0 100\\n0 0 100 0\\n0 100 0 0') == '25.000000000'\n\"\"\""
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 4\\n0 0 0 100\\n0 0 50 100\\n0 0 100 50\\n0 0 150 100\") == '25.000000'\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 4\\n0 1 2 3\\n0 2 3 4 5\\n0 3 4 5 6\\n0 4 5 6 7\") == '25.000000000'\n\n-----Notes-----\n\nIf you're stuck, see sample input and outputs.\n\"\"\""
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(5, 3, 4) == 'DA'\nassert solution(3, 4, 5) == 'NE'"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA\\nDA\\nDA\\nNE\\nNE\\n'\n'''"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n') == 'DA'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n') == 'DA'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n') == 'NE'\n'''"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"DA\"\nassert solution(\"5 3 4\") == \"NE\"\nassert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\"\n\nassert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\\n1\\n2\") == \"NE\"\nassert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\\n8\\n9\") == \"NE\"\n\n\"\"\"\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 5\\n3\\n4\\n5\\n6\\n7') == 'DA\\nDA\\nDA\\nNE\\nNE\\nNE'\nassert solution('4 3 5\\n3\\n4\\n5\\n6\\n7\\n8\\n9') == 'DA\\nDA\\nDA\\nNE\\nNE\\nNE\\nNE\\nNE'\n\"\"\""
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 4\\n3\\n4\\n5\\n6\\n7\\n') == 'DA\\nDA\\nDA\\nNE\\nNE\\nNE'\n\nfrom sys import stdin, stdout\nfor i in range(int(stdin.readline())):\n    stdout.write('DA\\n' if sum(int(x) for x in stdin.readline().split()) <= int(stdin.readline()) else 'NE\\n')"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA DA DA NE NE NE'\nprint('Test PASSED')\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2\n0 0\n7 42''') == '6'\nprint(solution(stdin.strip()))\n\n-----Problem-----\nThere is a list of rectangles in a row that need to be printed on a paper. You will be given their widths and heights, and your task is to find out how many of them can be fitted on the paper.\n\n-----Input-----\nThe first line of input contains an integer $n$ ($1 \\le n \\le 100$), which is the number of rectangles.\n\nEach of the following $n$ lines contains two space-separated integers $w$ and $h$, which are the width and height of the rectangle, respectively.\n\n-----Output-----\nOutput a single integer, which is the number of rectangles that can be fitted on the paper.\n\n-----Examples-----\nSample Input:\n3\n1 1\n2 2\n4 4\nSample Output:\n2\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n0 0\\n7 42') == '6'\n\"\"\""
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n2\n0 0\n7 42\n''') == 6\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6') == '6'\nassert solution('6\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6') == '12'\nassert solution('6\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7') == '10'\nassert solution('6\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10') == '20'\n\n-----Explanation-----\nThe first photograph was taken at time $0$ with distance $0$.\n\nThe second photograph was taken at time $1$ with distance $1$.\n\nThe third photograph was taken at time $2$ with distance $2$.\n\nThe fourth photograph was taken at time $3$ with distance $3$.\n\nThe fifth photograph was taken at time $4$ with distance $4$.\n\nThe sixth photograph was taken at time $5$ with distance $5$.\n\nThe seventh photograph was taken at time $6$ with distance $6$.\n\nThe eighth photograph was taken at time $7$ with distance $7$.\n\nThe ninth photograph was taken at time $8$ with distance $8$.\n\nThe tenth photograph was taken at time $9$ with distance $9$.\n\nThe car was traveling at an average speed of 6 miles per hour, so the answer is $6$ miles per hour.\n\n'''\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n0 0\\n7 42') == '6'\nassert solution('2\\n5 5\\n0 0\\n1 1') == '5'\nassert solution('3\\n3 3\\n6 6\\n0 0') == '5'\n\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n0 0\n7 42''') == '6'\nassert solution('''2\n0 0\n7 42''') == '6'\nassert solution('''1\n0 0\n1 2''') == '2'\nassert solution('''1\n0 0\n1 2''') == '2'\nassert solution('''2\n0 0\n7 42\n0 0\n7 42''') == '6'\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(example1) == '6'\nassert solution(example2) == '10'\n\nprint(solution(stdin))\n\"\"\"\n\n\nimport sys\nimport os\nfrom io import StringIO\nfrom math import ceil\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a) == b\nprint(solution(a))\na: List[int] = [0, 0]\nb: List[int] = [42, 42]\nassert solution(a) == b\nprint(solution(a))\na: List[int] = [0, 0]\nb: List[int] = [42, 42]\nassert solution(a) == b\nprint(solution(a))\na: List[int] = [0, 0]\nb: List[int] = [42, 42]\nassert solution(a) == b\nprint(solution(a))\na: List[int] = [0, 0]\nb: List[int] = [42, 42]\nassert solution(a) == b\nprint(solution(a))\na: List[int] = [0, 0]\nb: List[int] = [42, 42]\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n0 1\\n') == '1'\nassert solution('2\\n7 42\\n') == '6'\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n7 42') == '6'\nassert solution('4\\n1 1\\n2 1\\n3 1\\n4 1') == '6'\nassert solution('5\\n0 0\\n1 1\\n2 1\\n3 1\\n4 1') == '6'\n\n\"\"\"\n\nimport sys\nimport math\nimport os\nimport time\nfrom collections import deque\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solution(self, n, nums):\n        pass"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n-> ALICE\n-> BOB\nALICE BOB -> CARL''') == 'correct'\nassert solution('''1\n-> BOB\nALICE BOB -> BOB\n''') == '1'\nassert solution('''3\n-> ALICE\n-> BOB\nALICE BOB -> BOB\n-> ALICE\nALICE BOB -> BOB\n-> ALICE\nALICE BOB -> BOB''') == 'correct'\n\n-----Notes-----\nAssumptions are not repeated on the same line, but only one is.\nAssumptions on one line are not necessarily in the same order, but only one line is allowed to contain more than one assumption.\nAssumptions on one line are not allowed to be repeated.\nAssumptions may not be assumed, only derived.\nAssumptions must be derived from others.\nAssumptions must be derived to conclusions.\nArrow must be present and always after the conclusion.\nConclusion can be repeated.\nAssumptions and conclusions must be the same length.\nAssumptions must be uppercase.\nConclusion must be uppercase.\n'''"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\n\"\"\"\n\n\nimport sys\nimport collections\nimport string\nimport pprint"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == 'correct'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n\"\"\") == \"correct\"\n\"\"\"\n\nfrom typing import List, Tuple\nimport string\nimport re\n\nfrom src.main.python.com.skalicky.python.interviewpuzzles.find_missing_letter import find_missing_letter\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == 'correct'\n\"\"\""
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n-> ALICE\n-> BOB\nALICE BOB -> CARL''') == 'correct'\nassert solution('''2\n-> ALICE\n-> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB''') == '1'\nassert solution('''1\n-> ALICE\nALICE -> BOB''') == 'correct'\nassert solution('''1\nALICE -> BOB\n''') == 'correct'\nassert solution('''1\n-> ALICE\nALICE -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB''') == '2'\n'''\nInput:\n4\n-> ALICE\n-> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE BOB -> JOHN\n-> DOG\nALICE -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\n-> CAT\nALICE -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\n-> LION\nALICE -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\n-> TIGER\nALICE -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\n-> DOG\nALICE -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN\nALICE JOHN -> BOB\nALICE BOB -> CARL\nALICE CARL -> BOB\nALICE CARL -> BOB\nALICE BOB -> JOHN"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n    3\n    -> ALICE\n    -> BOB\n    ALICE BOB -> CARL\n    \"\"\"\n    ) == \"correct\"\n    \nassert solution(\n    \"\"\"\n    2\n    -> ALICE\n    -> BOB\n    ALICE BOB -> CARL\n    \"\"\"\n    ) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 -> A B C\") == 'correct'\nassert solution(\"1 2 3 -> A B C\") == '1'\nassert solution(\"1 2 3 4 -> A B C\") == 'correct'\nassert solution(\"1 2 3 -> A B C\") == '1'\nassert solution(\"1 2 3 4 -> A B C\") == 'correct'\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\n\"\"\"\n\n\nfrom typing import List, Text\n\nimport pytest\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\nassert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> BOB\") == \"2\"\nassert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> BOB\\nALICE ALICE -> BOB\") == \"2\"\nassert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> BOB\\nALICE ALICE -> BOB\\nALICE ALICE -> ALICE\") == \"4\"\nassert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> BOB\\nALICE ALICE -> BOB\\nALICE ALICE -> ALICE\\nALICE ALICE -> ALICE\") == \"4\"\n\"\"\""
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***''') == 'Connie Froggatt'\nassert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***''') == 'Runoff!'\nassert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***''') == 'Penny Franklin'\nassert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***''') == 'Runoff!'\nassert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***''') == 'Penny Franklin'\n\nGiven the list of names, count the number of votes cast for each candidate. Print the winner as a list. \n\n-----Hints-----\nThe structure of the output is as follows: \n\nIf there is a simple winner, print their name followed by the number of votes cast for that candidate. \n\nIf there is a run-off, print the candidate with the least votes cast followed by the number of votes cast. \n\nIf there is no simple winner, print Runoff!\n\nBonus: Solve this without the sort.\n\n-----Solution-----\nimport collections"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Runoff!'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Runoff!'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Runoff!'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Runoff!'\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Connie Froggatt\"\n\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Connie Froggatt\"\n\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Runoff!\"\n\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Runoff!\"\n\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Runoff!\""
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Runoff!\"\nprint(solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\"))\n\n\"\"\""
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution([\"Penny Franklin\",\"Marti Graham\",\"Connie Froggatt\",\"Joseph Ivers\",\"Connie Froggatt\",\"Penny Franklin\",\"Connie Froggatt\",\"Bruce Stanger\",\"Connie Froggatt\",\"Barbara Skinner\",\"Barbara Skinner\",\"***\"]) == \"Connie Froggatt\"\nassert solution([\"Penny Franklin\",\"Marti Graham\",\"Connie Froggatt\",\"Joseph Ivers\",\"Connie Froggatt\",\"Penny Franklin\",\"Connie Froggatt\",\"Bruce Stanger\",\"Connie Froggatt\",\"Barbara Skinner\",\"Barbara Skinner\",\"***\"]) == \"Runoff!\"\nassert solution([\"Penny Franklin\",\"Marti Graham\",\"Connie Froggatt\",\"Joseph Ivers\",\"Connie Froggatt\",\"Penny Franklin\",\"Connie Froggatt\",\"Bruce Stanger\",\"Connie Froggatt\",\"Barbara Skinner\",\"Barbara Skinner\",\"***\"]) == \"Connie Froggatt\"\nassert solution([\"Penny Franklin\",\"Marti Graham\",\"Connie Froggatt\",\"Joseph Ivers\",\"Connie Froggatt\",\"Penny Franklin\",\"Connie Froggatt\",\"Bruce Stanger\",\"Connie Froggatt\",\"Barbara Skinner\",\"Barbara Skinner\",\"***\"]) == \"Runoff!\"\n\n\"\"\""
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\\n') == 'Connie Froggatt'\n\nSample Input:\nPenny Franklin\nPenny Franklin\nPenny Franklin\nPenny Franklin\nPenny Franklin\nPenny Franklin\n***\nSample Output:\nRunoff!\n\n\"\"\"\n\nfrom typing import List, Dict, Any, NamedTuple\n\n\nclass Votant(NamedTuple):\n    name: str\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***''') == \"Connie Froggatt\"\nassert solution('''Penny Franklin\nConnie Froggatt\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***''') == \"Connie Froggatt\"\nassert solution('''Penny Franklin\nPenny Franklin\nPenny Franklin\nPenny Franklin\nPenny Franklin\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***''') == \"Runoff!\"\nassert solution('''Penny Franklin\nPenny Franklin\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nPenny Franklin\nPenny Franklin\n***''') == \"Penny Franklin\"\nassert solution('''Penny Franklin\nPenny Franklin\nPenny Franklin\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nPenny Franklin\nPenny Franklin\n***''') == \"Penny Franklin\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n') == 'Runoff!'"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMartin Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMartin Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMartin Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMartin Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Connie Froggatt\"\n\"\"\"\n\nfrom collections import Counter\n\nstdin = open(\"input.txt\").readlines()"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic') == '2'\nassert solution('4\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\n') == '1'\nassert solution('3\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\n') == '0'\nassert solution('9\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nChewbacca Jawaese Basic\\nGrakchawwaa Huttese Basic\\nGrakchawwaa Jawaese Basic\\nLuke Basic Jawaese\\nR2D2 Basic Jawaese Binary') == '5'\nassert solution('9\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nChewbacca Jawaese Basic\\nGrakchawwaa Huttese Basic\\nGrakchawwaa Jawaese Basic\\nLuke Basic Jawaese\\nR2D2 Basic Jawaese Binary') == '6'\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic''') == '2'\nassert solution('''6\nDarth Vader Huttese Basic\nBib-Fortuna Huttese Basic\nHan Solo Basic Jawaese''') == '3'\nassert solution('''6\nDarth Vader Huttese Basic\nBib-Fortuna Huttese Basic\nHan Solo Basic Jawaese\nHannah Abbott Basic Chewbacca''') == '4'\nprint('Test pass.')\n\n-----"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(TEST_INPUT) == TEST_OUTPUT\n\n\"\"\"\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n\"\"\"\n) == \"2\"\n\n\"\"\"\nSAMPLE INPUT\n\n7\n\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n\"\"\"\n\nSAMPLE OUTPUT\n\n2\n\"\"\"\n\"\"\"\n\n-----EXPLANATION-----\nIn the first sample input, there are seven characters in the cantina.\n\nChewbacca and Grakchawwaa can converse because of language translations: Chewbacca speaks Basic and Grakchawwaa understands Huttese; if Chewbacca leaves, Grakchawwaa can converse with everyone in the cantina.\n\nBoba Fett can speak both Basic and Huttese and can translate between them. Boba Fett and Bib Fortuna can converse because Boba Fett speaks Basic and Bib Fortuna understands Huttese; if Boba Fett leaves, Bib Fortuna can converse with everyone in the cantina.\n\nIt\u2019s impossible to get everyone in the cantina to leave because some characters in the cantina are unable to converse.\n\nIn the second sample input, there are six characters in the cantina.\n\nFran and Ian can converse because all characters in the cantina can speak at least one language and all characters speak at least one language.\n\nAll characters in the cantina can converse, so the only characters that need to leave are those who aren't in the cantina, like Polly and Spencer.\n\n\"\"\""
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n''') == '2'\n\nassert solution('''8\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\nSackrider Cantina\nLestat Cantina Basic\nGil Gintoki Cantina Basic\nBolto Cantina Basic\nDooku Cantina Basic\nBib Fortuna Cantina Basic\nFreedo Cantina Basic\nBombay Cantina Basic\nBartek Cantina Basic\n''') == '3'\n\nassert solution('''8\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\nSackrider Cantina\nLestat Cantina Basic\nGil Gintoki Cantina Basic\nBolto Cantina Basic\nDooku Cantina Basic\nBib Fortuna Cantina Basic\nFreedo Cantina Basic\nBombay Cantina Basic\nBartek Cantina Basic\n''') == '4'\n\n'''\n\n'''\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\nassert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\nassert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'\nassert solution(\"5\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nR2D2 Binary Basic\") == '1'\nassert solution(\"6\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nR2D2 Binary Basic\") == '0'\n\n---\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n''') == '2'\nassert solution('''\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n''') == '1'\nassert solution('''\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n''') == '3'\nassert solution('''\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n''') == '1'\n'''\n\nfrom collections import deque"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\nimport io\nimport unittest\nimport unittest.mock\n\nclass TestSolution(unittest.TestCase):\n    def test_solution_0(self):\n        pass\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\nassert solution('4 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') =='stay home'"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\nprint(\"Passed!\")\n\n\"\"\""
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 1000 2 3\n200\n0 2 2\n300\n27 3 20''') == '900'\n\n-------\n\nfrom __future__ import print_function"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') =='stay home'\nassert solution('1 2') =='stay home'\nassert solution('1 2 3') =='stay home'\nassert solution('1 1 2') =='stay home'\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n\"\"\""
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n\n:type stdin: str\n:rtype: str\n\"\"\"\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 1000 2 3\n200\n0 2 2\n300\n27 3 20''') == '900'\nprint('Test 1:', solution('''3 1000 2 3\n200\n0 2 2\n300\n27 3 20'''))\nassert solution('''3 1000 2 3\n500\n500 500 500\n500\n500 500 500''') =='stay home'\nprint('Test 2:', solution('''3 1000 2 3\n500\n500 500 500\n500\n500 500 500'''))\nassert solution('''3 1000 2 3\n500\n500 500 500\n500\n500 500 500''') == '500'\nprint('Test 3:', solution('''3 1000 2 3\n500\n500 500 500\n500\n500 500 500'''))\nassert solution('''3 1000 2 3\n500\n500 500 500\n500\n500 500 500''') =='stay home'\nprint('Test 4:', solution('''3 1000 2 3\n500\n500 500 500\n500\n500 500 500'''))\nassert solution('''3 1000 2 3\n500\n500 500 500\n500\n500 500 500\n500\n500 500 500''') == '500'\nprint('Test 5:', solution('''3 1000 2 3\n500\n500 500 500\n500\n500 500 500\n500\n500 500 500'''))\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\n------\n\n>>> def solution(stdin: str) -> str:\n    pass\n\nimport math"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\nC D F D C D F F F C\") == \"A# C D# F\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A B C D E\") == \"ABCDE\"\nassert solution(\"C D E F G A\") == \"CDEFGA\"\nassert solution(\"A C E G\") == \"ACEG\"\nassert solution(\"A B C D E F G A B C D E F G A\") == \"ABCDEFGABCDEFGABCDEFGA\"\nassert solution(\"E D C B A\") == \"EBCA\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\", \"A A B C\") == \"A A B C A A B C A A B C\"\nassert solution(\"3\", \"A B C D\") == \"A B C D A B C D A B C D\"\nassert solution(\"3\", \"A B C D E\") == \"A B C D E A B C D E A B C D E\"\nassert solution(\"3\", \"A B C D E F\") == \"A B C D E F A B C D E F A B C D E F\"\nassert solution(\"3\", \"A B C D E F G\") == \"A B C D E F G A B C D E F G A B C D E F G\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"C D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"C C# D D# E E F F# G G#\") == \"none\"\nassert solution(\"C C# D D# E E F F# G G# A A# B\") == \"D C# D D# E E F F# G G# A A# B\"\nassert solution(\"A A# B C# D E F# G#\") == \"none\"\nassert solution(\"D# D# F# F# G# G# A# A# B#\") == \"A# A# B#\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\nC D F D C D F F F C') == 'A# C D# F'\nassert solution('9\\nC D F G A B C D F F') == 'A# C D# F# G'\nassert solution('2\\nC D F') == 'none'\nassert solution('5\\nC D E G F B') == 'none'\nassert solution('10\\nC D E G F B A') == 'A# C D# F'\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 C D F D C D F F F C \") == \"A# C D# F\"\nassert solution(\"1 C\") == \"none\"\n\"\"\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"C D F D C D F F F C \") == \"A# C D# F\"\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\nC D F D C D F F F C') == 'A# C D# F'\nassert solution('13\\nC D F D C D F F F C') == 'none'\nassert solution('12\\nC D F D C D F F F C') == 'none'\nassert solution('10\\nC D F D C D F F F C D') == 'none'\nassert solution('10\\nC D F D C D F F F C D D') == 'none'\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin_contents) == stdout_contents\nprint(solution(stdin_filename))\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"C D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"C D F D C D F F F C C\") == \"none\"\nassert solution(\"C D F D C D F F F C C C\") == \"A# C D# F\"\n\"\"\""
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"aldrig r\u00e4tt\") == \"aldrig r\u00e4tt\"\nassert solution(\"aldrig r\u00e4tt som du kommer \u00f6ver \u00e4r no\") == \"aldrig r\u00e4tt\""
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'dae ae ju traeligt va'\n) == 'dae ae ju traeligt va'\n\nassert solution(\n'helae ae ju traeligt va'\n) == 'haer talar vi rikssvenska'\n\nassert solution(\n'wirdae ae ju traeligt va'\n) == 'haer talar vi rikssvenska'\n\nassert solution(\n'doae ae ju traeligt va'\n) == 'haer talar vi rikssvenska'\n\nassert solution(\n'helae ja ju traeligt va'\n) == 'haer talar vi rikssvenska'"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt va ju ae\") == \"haer talar vi rikssvenska\"\nassert solution(\"ae ju traeligt va\") == \"haer talar vi rikssvenska\"\nassert solution(\"ae ju traeligt va ju ae\") == \"dae ae ju traeligt va\"\n\n\"\"\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"jag \u00e4r h\u00f6gern sju \u00e4ngen\") == \"jag \u00e4r h\u00f6gern sju \u00e4ngen\"\nassert solution(\"rikssvenska\") == \"rikssvenska\"\nassert solution(\"jag \u00e4r h\u00f6gern sju \u00e4ngen\") == \"jag \u00e4r h\u00f6gern sju \u00e4ngen\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    'dae ae ju traeligt va'\n) == 'dae ae ju traeligt va'\nassert solution(\n    'dae ae ju traeligt a'\n) == 'haer talar vi rikssvenska'\nassert solution(\n    'dae ae ju traeligt ae'\n) == 'dae ae ju traeligt va'\nassert solution(\n    'dae ae ju traeligt ae a'\n) == 'dae ae ju traeligt va'\nassert solution(\n    'dae ae ju traeligt aa'\n) == 'dae ae ju traeligt a'\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"jae ae ju traeligt va\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ae ju traeligt ja\") == \"dae ae ju traeligt ja\"\nassert solution(\"dae ae ju traeligt v\u00e4\") == \"dae ae ju traeligt v\u00e4\"\nassert solution(\"jae ae ju traeligt v\u00e4\") == \"haer talar vi rikssvenska\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt va rikssvenska\") == \"haer talar vi rikssvenska\"\n\"\"\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\nassert solution('dae ae ju traeligt va jo hare') == 'dae ae ju traeligt va jo hare'\nassert solution('dae ae ju traeligt va jo hare jo l\u00e4kare') == 'dae ae ju traeligt va jo hare jo l\u00e4kare'\nassert solution('dae ae ju traeligt va jo hare jo l\u00e4kare k\u00e4rlek') == 'dae ae ju traeligt va jo hare jo l\u00e4kare k\u00e4rlek'\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ae ju traeligt va ju ae\") == \"dae ae ju traeligt va ju ae\"\nassert solution(\"dae ae ju traeligt va je ae\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ae ju traeligt va je ae ae ae\") == \"dae ae ju traeligt va je ae ae ae\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"...#.\\n...E#.\\n#..E..\\n.E...E\\n##E.E#\"\n\n\"\"\"\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".#..#\\n.....\\n#####\\n....#\\n...##\") == \"3\\n2\\n1\\n0\\n4\"\n\"\"\""
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('.#.#') == '#'\nassert solution('#.#.###') == '#.'\nassert solution('###.#.') == 'E'\nassert solution('..#..#') == '.'\nassert solution('..#.##') == 'E'\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\n\n\"\"\""
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('...#..') == 'E..#E'\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\nassert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\nassert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\nassert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\nassert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 6\n....#.\n....#.\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\n\n\"\"\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\n----\n>>> \n= RESTART: /Users/sofia/Desktop/Udemy/Cracking the coding interview/Ch16_Trees_Graphs/Ch16_Question_Coffee_Stands.py\n5 6\n.....\n.....\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5 6 7 8 9 10') == '12 10 3 8 4'\nassert solution
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\"\n\na, b, c, d, e, f, g = [int(s) for s in input().split()]"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\nassert solution('8 7 6 1 3 4 5') == '8 7 6 1 3 4'\nassert solution('6 5 4 3 2 1') == '6 5 4 3 2'\nassert solution('1 2 3 4 5 6 7') == '1 2 3 4 5'"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\"\n\nheights = list(map(int, input().split()))\n\nmin_height = min(heights)\nmax_height = max(heights)\n\nprint(heights)\n\nheight_sets = []\n\nfor i in range(len(heights)):\n    for j in range(len(heights)):\n        if i == j:\n            continue\n        if min_height < heights[i] < heights[j] or max_height < heights[i] < heights[j]:\n            print(heights[i], heights[j])\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(    \"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\n-----Instructions-----\nDetermine the top box for the first tower based on the tallest box and the smallest box for the second tower based on the smallest box.\nDetermine the top box for the second tower based on the tallest box and the smallest box for the first tower based on the smallest box.\nDetermine the top box for the first tower based on the tallest box and the smallest box for the second tower based on the tallest box.\nDetermine the top box for the second tower based on the tallest box and the smallest box for the first tower based on the tallest box.\nPrint out the heights of the three boxes in the first tower, then the heights of the three boxes in the second tower. Each set of boxes should be output in order of decreasing height.\n\nYou can use a stack to keep track of the boxes so that you can process them in the order that they appear on the floor.\n\nSince the tower heights will always be given in descending order, you can use the tallest box from each tower as the stack\u2019s top. For instance, if the first box in the input is 12 and the second box is 10, then the tallest box from the first tower is 12.\n\nOnce you have the tallest box from the first tower, you can add the smallest box from the second tower to the top of the stack.\n\nOnce you have the tallest box from the second tower, you can add the smallest box from the first tower to the top of the stack.\n\nThis process can be repeated twice. At the end, the top of the stack will contain the three tallest boxes that were on the floor.\n\nFor example, if the first tower had the tallest box of 20 and the smallest box of 3, and the second tower had the tallest box of 15 and the smallest of 6, the three tallest boxes on the floor would be 20, 15, and 6.\n\nFor the first tower, the tallest box is the first and the smallest is the second.\n\nSimilarly, for the second tower, the tallest box is the third and the smallest is the fourth.\n\nFinally, for the first tower, the tallest box is the fifth and the smallest is the sixth.\n\nThe output should consist of the three heights in the order listed above."
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\nSample Input:\n18 21 10 25 1 19 12 20\nSample Output:\n18 21 12 20 10 25 1 19\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\n\n---"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''12 8 2 4 10 3 25 14''') == '12 10 3 8 4 2'\n\"\"\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 0 3\") == \"4\"\nassert solution(\"1 0 1\") == \"1\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"0 1 1\") == \"0\"\nassert solution(\"9 9 9\") == \"0\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 0 3\") == \"4\"\n\"\"\"\n\ne, f, c = [int(input()) for _ in range(3)]\ns = (f - e) % c\nprint(s + 1 if s!= 0 else e)\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 0 3') == 4\n\"\"\""
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9 0 3') == '4'\nassert solution('2 2 1') == '2'\nassert solution('0 0 0') == '0'\nassert solution('3 0 3') == '2'\nassert solution('5 1 1') == '3'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9 0 3') == '4'\n\n\"\"\""
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 0 3\") == \"4\"\n\"\"\"\n\ne,f,c = list(map(int,input().split()))\nprint(f+c-e)"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 0 3\") == \"4\"\nassert solution(\"9 0 0\") == \"1\"\nassert solution(\"0 9 0\") == \"1\"\n\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9 0 3') == '4'\n\"\"\""
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''9 0 3''') == '4'\n\nassert solution('''1 5 2''') == '0'\n\nassert solution('''0 1 0''') == '0'\n\nassert solution('''9 3 4''') == '1'\n\nassert solution('''9 4 3''') == '0'"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9 0 3') == '4'\nassert solution('9 0 0') == '0'\nassert solution('0 0 0') == '0'\n\"\"\""
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1010') == '12'\nprint(solution('1010'))\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1010') == '12'\nassert solution('1101') == '15'\nassert solution('1111111111') == '255'\nassert solution('101101') == '1246'\nassert solution('1011011110') == '1255'\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1010') == '12'\nprint(solution('1010'))\n\nSample Input:\n10101\nSample Output:\n5\nassert solution('10101') == '5'\nprint(solution('10101'))\n\nSample Input:\n11100010\nSample Output:\n18\nassert solution('11100010') == '18'\nprint(solution('11100010'))\n\nSample Input:\n110011101010\nSample Output:\n65\nassert solution('110011101010') == '65'\nprint(solution('110011101010'))\n\n\"\"\""
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1010') == 12\nprint(solution('1010'))\n\nassert solution('11001010') == 73\nprint(solution('11001010'))\n\nassert solution('110110110') == 131\nprint(solution('110110110'))\n\nassert solution('111011011011110111') == 852\nprint(solution('111011011011110111'))\n\nassert solution('111011011011110111111110111') == 855\nprint(solution('111011011011110111111110111'))"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1010') == '12'\nprint(solution('1010'))"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1010\") == \"12\"\nassert solution(\"110111010\") == \"7777\"\nassert solution(\"11011101110\") == \"77777\"\nassert solution(\"11011101110\") == \"77777\"\nassert solution(\"111111010\") == \"777777\"\n\"\"\"\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1010') == '12'\nassert solution('11001') == '13'\nassert solution('1110110110111') == '12345'\nassert solution('11101101101110') == '123456'\n\nprint('Test passed')\n\n---------------------------------------------------------------------------------------------------------------------\n\nThe second task was solved with the help of the solutions:\n\n1. https://www.codewars.com/kata/5a17d9c2c4d7b0e9c28f6cd/solutions/python\n\n2. https://www.codewars.com/kata/5ae074df2462d0133cb000a3\n\n3. https://www.codewars.com/kata/5ac2f6858c7d6d943e000140\n\n4. https://www.codewars.com/kata/526b3c4ad65b94c914000838\n\n5. https://www.codewars.com/kata/56befa0a6c6c96a78010095e\n\n6. https://www.codewars.com/kata/5511fcb8c46a49dbc9000096\n\n7. https://www.codewars.com/kata/52997b60e99f5c7c3f0000c2\n\n8. https://www.codewars.com/kata/52455f27f95b7c8a940000b8\n\n9. https://www.codewars.com/kata/57a7e0c6700bf5d5e7000e1a\n\n10. https://www.codewars.com/kata/57a9e5e3b9db32de43f1ccea\n\n11. https://www.codewars.com/kata/57a2e37a715ea7a4e100067d\n\n12. https://www.codewars.com/kata/57096e33e2d3fbc0600004c\n\n13. https://www.codewars.com/kata/571863e5ef66b2b7dd000fa5\n\n14. https://www.codewars.com/kata/573983b06eb652518b00008d\n\n15. https://www.codewars.com/kata/566a467aad0f6f0cec00073a\n\n16. https://www.codewars.com/kata/575a2f4b3a149780b8b0b326\n\n17. https://www.codewars.com/kata/57b74c4ed4c9c8c38f10003a\n\n18. https://www.codewars.com/kata/57d9af7b1ed1c7e2c0000ff3\n\n19. https://www.codewars.com/kata/57fcfb2e29aac5a98800001b\n\n20. https://www.codewars.com/kata/57f8a58f9b21f1b0f600008b\n\n21. https://www.codewars.com/kata/57f7f2092c4bcaa09d0007f2\n\n22. https://www.codewars.com/kata/57f8e0cf8cd8f3b97c000cba\n\n23. https://www.codewars.com/kata/57e863c5ce4ff1d7160009a1\n\n24. https://www.codewars.com/kata/57f8b7a660cc095c2b000b58\n\n25. https://www.codewars.com/kata/58efd27fccb7510b710000f7\n\n26. https://www.codewars.com/kata/58f44bfb3c5f83c8a3000008\n\n27. https://www.codewars.com/kata/58f8f3b2fa45bdb8d300010c\n\n28. https://www.codewars.com/kata/5a12f05fc82295ac100000b5\n\n29. https://www.codewars.com/kata/5a4f6f6cda7e0e8b9f000061\n\n30. https://www.codewars.com/kata/5a8da9dc8c0f78fe49e00086\n\n31. https://www.codewars.com/kata/5a8db1aecb2a1cf5e3e0000a0\n\n32. https://www.codewars.com/kata/5a93d2ceb6e9f0d054e00002c\n\n33. https://www.codewars.com/kata/59e208821fb1f4e99f0000b7\n\n34. https://www.codewars.com/kata/59e9d393fbc5d02b90001c29\n\n35. https://www.codewars.com/kata/59f8ffb73f5d8f2f8b01e1d6\n\n36. https://www.codewars.com/kata/59f8ffb73f5d8f2f8b01e1d6\n\n37. https://www.codewars.com/kata/5a6e9ca7926edf5d8340002c2\n\n38. https://www.codewars.com/kata/5a6eb2f6cb409dc4a800002d\n\n39. https://www.codewars.com/kata/5a6fc4225a867a7cbde00aef\n\n40. https://www.codewars.com/kata/5a6fc4225a867a7cbde00aef\n\n41. https://www.codewars.com/kata/5a6fc4225a867a7cbde00aef\n\n42. https://www.codewars.com/kata/59f8ffb73f5d8f2f8b01e1d6\n\n43. https://www.codewars.com/kata/59f8ffb73f5d8f2f8b01e1d6\n\n44. https://www.codewars.com/kata/59f8ffb73f5d8f2f8b01e1d6\n\n45. https://www.codewars.com/kata/59f8ffb73f5d8f2f8b01e1d6\n\n46. https://www.codewars.com/kata/59f8ffb73f5d8f2f8b01e1d6\n\n47. https://www.codewars.com/kata/59f8ffb73f5d8f2f8b01e1d6\n\n48. https://www.codewars.com/kata/59f8ffb73f5d8f2f8b01e1d6\n\n49. https://www.codewars.com/kata/59f8ffb73f5d8f2f8b01e1d6\n\n50. https://www.codewars.com/kata/59f8ffb73"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1010') == '12'\n\"\"\""
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1010') == '12'\nassert solution('1110101110') == '132'\nassert solution('1110101101010111') == '13221'\nassert solution('1100111011010111101111001111') == '132132132132132132'\nassert solution('110011001110111101101011110011110') == '13213213213213213221323'"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1010\") == \"12\"\nassert solution(\"101101\") == \"44\"\nassert solution
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n..o\\no..') == '2'\n\"\"\""
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == \"2\"\n\n\"\"\"\n\nimport sys\n\nR, S = list(map(int, sys.stdin.readline().split()))\nhandshakes = 0\nseating_order = [list(map(str, sys.stdin.readline().rstrip())) for _ in range(R)]\nfor row_num in range(R):\n    for col_num in range(S):\n        if seating_order[row_num][col_num] == 'o':\n            handshakes += 1\n            neighbours_row_num = row_num - 1\n            if neighbours_row_num >= 0:\n                if seating_order[neighbours_row_num][col_num] == 'o':\n                    handshakes += 1\n            neighbours_row_num = row_num + 1\n            if neighbours_row_num < R:\n                if seating_order[neighbours_row_num][col_num] == 'o':\n                    handshakes += 1\n            neighbours_col_num = col_num - 1\n            if neighbours_col_num >= 0:\n                if seating_order[row_num][neighbours_col_num] == 'o':\n                    handshakes += 1\n            neighbours_col_num = col_num + 1\n            if neighbours_col_num < S:\n                if seating_order[row_num][neighbours_col_num] == 'o':\n                    handshakes += 1\nprint(handshakes)\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n..o\\no..') == '2'\n\n-----Explanation-----\nMirko is the only person sitting on the first row and will shake hands with all the people sitting on the same row as him.\n\nSo there are 2 possible pairs.\n\nMirko will have to shake hands with the people on the second row, which are:\n\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko\nMirko"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n..o\\no..\\n\") == 2\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('.o.') == 1\nassert solution('o..') == 0\nassert solution('oo.') == 1\n\"\"\""
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == 2\n\"\"\"\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n..o\\no..') == '2'\nassert solution('2 3\\no..\\no..') == '0'\nprint('All tests passed.')\n\nSample Input:\n3 3\n...\n...\n...\nSample Output:\n3\n\"\"\""
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\no.\\noo') == '2'\n\"\"\"\n\nimport sys\n\nlines = [line.rstrip() for line in sys.stdin]\n\nr, s = map(int, lines[0].split(' '))\n\ncurr_row = list(lines[1])\n\nhandshakes = 0\n\nfor i in range(2, r + 1):\n    if curr_row.count('o') == s:\n        break\n    new_row = list(lines[i])\n    for j in range(s):\n        if new_row[j] == 'o' and curr_row[j] == '.':\n            handshakes += 1\n            curr_row[j] = 'o'\n            break\n    curr_row = new_row\n\nprint(handshakes)\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n\n-----Notes-----\n\nIn the first example, the only possible solution is to store the items in drawer 2, drawer 3, drawer 1, and drawer 2 (all other items will be thrown away).\n\nIn the second example, the only possible solution is to store the items in drawer 3, drawer 1, drawer 1, and drawer 3 (all other items will be thrown away).\n\nIn the third example, the possible solutions are any of the following:\n- if the drawer 1 is empty, then store the item 1 in drawer 2 and store the item 2 in drawer 3.\n- if the drawer 2 is empty, then store the item 1 in drawer 2 and store the item 2 in drawer 3.\n- if the drawer 1 is empty, then store the item 1 in drawer 2 and store the item 2 in drawer 3.\n- if the drawer 2 is empty, then store the item 1 in drawer 1 and store the item 2 in drawer 3.\n- if the drawer 1 is empty, then store the item 1 in drawer 2 and store the item 2 in drawer 3.\n- if the drawer 2 is empty, then store the item 1 in drawer 1 and store the item 2 in drawer 3.\n- store the item 1 in drawer 2 and store the item 2 in drawer 1.\n- store the item 1 in drawer 1 and store the item 2 in drawer 2.\n- store the item 1 in drawer 2 and store the item 2 in drawer 3.\n- store the item 1 in drawer 3 and store the item 2 in drawer 1.\n- store the item 1 in drawer 1 and store the item 2 in drawer 3.\n- store the item 1 in drawer 3 and store the item 2 in drawer 2.\n- throw away the item 1 and store the item 2 in drawer 3.\n- throw away the item 2 and store the item 1 in drawer 3.\n\"\"\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\n''') == '''\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n'''\n\n\"\"\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\"\n\"\"\"\n\nfrom collections import deque\n\nN, L = [int(x) for x in stdin.readline().strip().split()]\n\ndrawer_dict = {}\n\nfor i in range(1, N + 1):\n    drawer_dict[i] = [int(x) for x in stdin.readline().strip().split()]"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\nassert solution(\"4 3\\n2 1\\n1 2\\n2 1\") == \"SMECE\\nLADICA\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n1 2\\n1 3\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\\nSMECE\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\n\"\"\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\"\n\"\"\"\n\nfrom collections import deque\n\nn, l = map(int, input().split())\n\narr = [list(map(int, input().split())) for _ in range(n)]"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\"\nassert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\"\nassert solution(\"5 3\\n3 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\"\nassert solution(\"5 3\\n3 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\"\nassert solution(\"5 3\\n2 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\"\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0\") == \"1 2\"\nprint(solution(\"2\\n0\"))\nassert solution(\"3\\n2 1 1\") == \"1 2 3\"\nprint(solution(\"3\\n2 1 1\"))\nassert solution(\"3\\n0 0 0\") == \"1 2 3\"\nprint(solution(\"3\\n0 0 0\"))\nassert solution(\"5\\n3 2 1 4 1\") == \"4 3 1 2 5\"\nprint(solution(\"5\\n3 2 1 4 1\"))\n\nimport math\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0\") == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n0') == '2 1'\nassert solution('2\\n0 1') == '1 2'\nassert solution('3\\n0 1 2') == '1 2 3'\nassert solution('4\\n0 1 2 3') == '1 2 3 4'\n\nsolution('5\\n0 1 2 3 4') == '1 2 3 4 5'\nsolution('6\\n0 1 2 3 4 5') == '1 2 3 4 5 6'\nsolution('7\\n0 1 2 3 4 5 6') == '1 2 3 4 5 6 7'\nsolution('8\\n0 1 2 3 4 5 6 7') == '1 2 3 4 5 6 7 8'\n\nSample Input 1:\n3\n1 2 0\nSample Output 1:\n1 2\nSample Input 2:\n4\n3 0 1 2\nSample Output 2:\n1 2 3\nSample Input 3:\n5\n2 0 1 3 2\nSample Output 3:\n1 2 3 4 5\n'''\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n0\") == \"1 2\"\n\"\"\"\nimport numpy as np\n\nn = int(stdin.readline())\nd = np.array([int(stdin.readline()) for _ in range(n - 1)])\n\nprint(*np.flip(np.argsort(d) + 1))\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n0\") == \"1 2\"\n\nassert solution(\"3\\n0 2 1\") == \"2 1 3\"\n\nassert solution(\"4\\n0 3 1 2\") == \"3 1 2 4\"\n\nassert solution(\"5\\n0 3 1 2 4\") == \"3 1 4 2 5\"\n\nassert solution(\"6\\n0 3 1 2 4 5\") == \"3 1 5 2 4 6\""
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n0\") == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 0\") == \"1 2\"\nassert solution(\"3\\n1 2\") == \"1 2 3\"\nassert solution(\"4\\n3 1 2 3\") == \"3 1 2 4\"\nassert solution(\"5\\n2 4 1 3 5\") == \"4 1 2 3 5\"\n\"\"\""
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n0\") == \"1 2\"\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\n0''') == '1 2'\nassert solution('''1\n0''') == '1'\nassert solution('''5\n1 2 3 4 0''') == '0 1 2 3 4'\nassert solution('''1\n0''') == '1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == '1'\n\"\"\""
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\n\"\"\"\n\nfrom typing import List, Tuple\nimport random\nimport itertools\n\nfrom operator import itemgetter\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n') == '1'\n\n-----Solution-----\nRun the worst case experiment to get the maximum Horror Index.\n\nIt can be proven that the maximum Horror Index is equal to $Q+1$.\n\nThus, the algorithm should return the movie with the lowest ID.\n\nThe time complexity is O(N) and the space complexity is O(1) because we only use a few variables and no additional data structures.\n\n\"\"\""
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2') == '1'\nassert solution('6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2') == '0'\n\"\"\"\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1,2,3') == '1'\nassert solution('0,1,2,3') == '2'\nassert solution('3,0,1,2') == '0'\nassert solution('0,1,2,0') == '1'\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 1\") == \"0\"\nassert solution(\"4 1 4\") == \"1\"\nassert solution(\"1 1 2\") == \"0\"\nassert solution(\"6 1 6\") == \"5\"\nassert solution(\"4 3 2\") == \"2\"\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 1 2 3\") == \"0\"\nassert solution(\"3 2 2 0\") == \"0\"\nassert solution(\"3 2 1 0\") == \"1\"\nassert solution(\"3 2 1 3\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5 2\\n1 2\\n\") == \"1\"\nassert solution(\"3 4 2\\n0 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"6 5 2\\n0 5\\n1 5\\n2 4\\n3 5\\n4 5\\n0 4\\n1 4\\n2 4\") == \"3\"\n\"\"\"\nimport heapq\nfrom collections import defaultdict\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\nassert solution(\"2 1 2\\n0 1 2\") == \"0\"\n\"\"\"\n\nimport sys\nimport math\nfrom collections import Counter, deque\nfrom typing import List, Deque\nfrom itertools import chain\n\nTEST_CASE = [\n    (6, 3, 5,\n    \"0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\",\n    \"1\"),\n]"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\nassert solution(\"4\\n1 3 4\") == \"impossible\"\nassert solution(\"4\\n1 1 2 4\") == \"impossible\"\nassert solution(\"4\\n1 4 2\") == \"4 2 1\"\n\"\"\""
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\n\nimport math\nimport numpy as np\nimport sys\nimport re\n\nn = int(input())\nt = [int(item) for item in input().split(' ')]\n\ndiff = []\nfor i in range(1, n):\n    diff.append(abs(t[i] - t[i - 1]))\n\ndiff = np.sort(diff)[::-1]\n\nans = ''\nfor item in diff:\n    for i in range(n):\n        if t[i] == t[i - 1] + item:\n            ans += str(i + 1) +''\n            break\n\nprint(ans)"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 3 4\n''') == '4 3 1'\nassert solution('''\n2\n3 2\n''') == 'impossible'\nassert solution('''\n3\n1 3 4\n''') == 'impossible'\n\n'''\n3\n1 3 4\n'''\n\n'''\n3\n1 2 4\n'''\n\n'''\n4\n2 3 4 1\n'''\n\n'''\n4\n4 3 2 1\n'''\n\n'''\n5\n3 1 5 2 4\n'''\n\n'''\n5\n2 1 4 5 3\n'''\n\n'''\n5\n1 3 2 5 4\n'''\n\n'''\n5\n1 1 1 1 1\n'''\n\n'''\n6\n1 1 1 1 2 2\n'''\n\n'''\n6\n1 1 2 1 2 2\n'''\n\n'''\n6\n1 2 1 2 1 2\n'''\n\n'''\n6\n1 1 2 1 2 2\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2 1 3 4 5 6 7\n'''\n\n'''\n7\n2"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n1 3 4''') == '''4 3 1'''\nassert solution('''3\n1 3 4\n2 3 1''') == '''impossible'''\nassert solution('''2\n3 1 4\n3 1 4''') == '''impossible'''\nassert solution('''2\n1 3\n3 2''') == '''impossible'''\nassert solution('''2\n1 3\n3 2\n2 1''') == '''impossible'''\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3 4') == '4 3 1'\nassert solution('3 2 6') == 'impossible'\n\"\"\"\nimport math"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s) == expected\n\n\"\"\"\n\nfrom typing import List, Set, Dict"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n1 3 4\n''') == '4 3 1'\nassert solution('''2\n-1 1\n''') == 'impossible'\nassert solution('''3\n1 1 1\n''') == '1 1 1'\nassert solution('''3\n1 -1 1\n''') == '1 1 1'\nassert solution('''4\n1 -1 1 1\n''') == '1 1 1 1'\n\n-----Test cases-----\n-10^5 <= t_i <= 10^5\n-10^5 <= t\u2019_i <= 10^5\n|t\u2019_i - t\u2019_{i+1}| <= |t\u2019_i - t\u2019_{i-1}|"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1 3 4''') == '4 3 1'\nassert solution('''4\n1 3 4\n2 3 5\n3 1 5\n3 4 2''') == 'impossible'\n'''\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\n\n---"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 20 15\\n3 10') == '18.400'\n\"\"\"\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n2 20 15\n3 10\n\"\"\") == '18.400'\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 20 15\n3 10''') == '18.400'\n'''\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 20 15\\n3 10\") == '18.4'\n\n------\n\n\"\"\""
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 20 15\") == 18.400\n'''\n\nimport math\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 20 15\n3 10''') == '18.400'"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 20 15\") == \"18.400\"\n\"\"\"\n\n\"\"\"\ninput :\n2 20 15\n3 10\n\noutput :\n18.400"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 20 15\n3 10''') == '18.400'\n\nassert solution('''3 50 10\n20 50\n10 90\n10 90\n20 100\n30 100\n50 50\n40 100\n50 60\n100 100\n100 100\n40 100\n60 100\n60 100\n80 60\n90 80\n50 30\n60 100\n100 80\n100 60\n100 50\n100 40\n110 100\n100 100\n110 120\n120 110\n120 90\n110 100\n130 80\n90 110\n110 130\n110 120\n110 120\n110 120\n110 110\n110 100\n110 110\n110 110\n110 110\n110 110\n110 110\n110 120\n110 130\n110 110\n110 100\n110 130\n110 110\n110 110\n110 110\n110 130\n110 110\n110 100\n110 110\n110 110\n110 120\n110 110\n110 110\n110 130\n110 110\n110 130\n110 110\n110 110\n110 130\n110 110\n110 130\n110 110\n110 110\n110 130\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 130\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110\n110 110"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 20 15\\n3 10\") == 18.400\n\"\"\"\n\nimport sys\n\nn, p, k = map(int, sys.stdin.readline().split())\ntimestamps = list(map(int, sys.stdin.readline().split()))\n\ntotal_time = k\nfor t in timestamps:\n    total_time += (t - 1) * p / 100\n\nprint(round(total_time, 6))\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"....H\\n.....\\nS....\\n....H\\n.....\\n\") == \"5\"\n\"\"\"\nimport sys\n\nimport sys"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\") == 5\n\"\"\""
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\") == 5\n\"\"\""
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\nH..\n..S\n...\nH..\n..H''') == '5'\n\nassert solution('''5\n....H\n.....\nS....\n....H\n.....\n''') == '5'\n\nassert solution('''5\nS....\n....H\n.....\nH..H..\n....H.''') == '6'\n\nassert solution('''5\nH....\n....H\nS....\nS....\nH....''') == '5'\n\nassert solution('''5\nH....\n....H\nS....\n.....\n.....\n''') == '5'"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\nassert solution('5\\n.S....\\n.S....\\n.....\\n.....\\n....H') == '0'\nassert solution('5\\n....H\\n.S....\\n....H\\n.S....\\n.....') == '5'\nassert solution('5\\nS....\\nS....\\n.....\\n.....\\n....H') == '5'\nassert solution('5\\n....H\\nS....\\n....H\\n.....\\n.....') == '4'\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\") == \"5\"\nassert solution(\"3\\n.S.\\n.S.\\n.S.\") == \"3\""
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\") == \"5\"\n\"\"\"\n\nimport os\nimport sys\nfrom copy import deepcopy\nfrom itertools import permutations"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"....H\\n.....\\nS....\\n....H\\n.....\") == 5"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\\n\") == \"5\"\n\nSample Input:\n5\nS....\n..HH.\n...H.S\nH....H\n.....\nSample Output:\n0\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\nassert solution('5 2 3\\n2 4\\n1 3 5') == '0'\nassert solution('5 2 3\\n2 4\\n1 3 5') == '0'\nassert solution('5 2 3\\n2 4\\n1 3 5') == '0'\nassert solution('5 2 3\\n2 4\\n1 3 5') == '0'\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(None) == None\nassert solution('1 2 3 4 5') == None\nassert solution('3 1 2 4 5') == None\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\nassert solution('1\\n2\\n2\\n2') == '1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\nassert solution('5 2 3\\n3 5\\n1 3 5') == '2'\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"\n\nassert solution(\"4 2 3\\n1 3\\n1 2 5\") == \"2\"\n\nassert solution(\"7 8 9\\n1 2 3 5 6 7 8 9\") == \"0\"\n\nassert solution(\"6 2 6\\n1 3\\n1 2 5\") == \"0\"\n\nassert solution(\"8 9 10\\n1 2 3 5 6 7 8 9 10\") == \"0\""
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\\n\") == \"0\"\nprint(solution(\"5 2 3\\n2 4\\n1 3 5\\n\"))\n\n\"\"\"\nimport sys\n\ntests = int(sys.stdin.readline())\n\nfor _ in range(tests):\n    n, s, r = list(map(int, sys.stdin.readline().strip().split(' ')))\n    \n    if s == n:\n        sys.stdout.write(str(0))\n    else:\n        sys.stdout.write(str(n-s))\n    \n    sys.stdout.write('\\n')\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"\nassert solution(\"5 2 3\\n5 1\\n4 3 2\") == \"1\"\nassert solution(\"5 2 3\\n5 5\\n4 3 2\") == \"2\"\nassert solution(\"5 2 3\\n5 5\\n5 5\\n4 3 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\\n2 4\") == \"0\"\nassert solution(\"1 2 3\\n2 5\") == \"1\"\nassert solution(\"1 2 3\\n4 5\") == \"0\"\n\"\"\"\n\n\"\"\"\nFor each problem, a helper function is provided to help with the solution. The solution is tested on a few cases.\n\n1)\nIf the first element in stdin is empty, return 0\n2)\nIf the second element in stdin contains a number of teams greater than the first element, return the difference of the two\n3)\nIf the second element in stdin contains a number of teams less than the first element, return the number of teams\n4)\nIf the second element in stdin contains a number of teams equal to the first element, return 0\n\"\"\"\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == 0\nassert solution('5 2 3\\n1 3 5\\n1 3 5') == 0\nassert solution('5 1 3\\n1 3 5') == 0\nassert solution('5 1 3\\n1 1 5') == 1\nassert solution('5 1 3\\n1 2 5') == 2\n\nprint(solution(stdin.readlines()))\n\n----"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 2 3\n2 4\n1 3 5''') == '0'\n\nassert solution('''5 1 3\n3\n4 5 6''') == '0'\n\nassert solution('''5 1 3\n3\n4 5''') == '1'\n\nassert solution('''5 2 3\n4\n4 5''') == '1'\n\nassert solution('''5 2 3\n4\n1 5''') == '2'"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"0.000000000\"\n\"\"\"\n\nR, C = [int(x) for x in input().split()]\n\nt = min(C, R) * R / (R + C)\nprint(\"{:.9f}\".format(t))\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0.000000000'\n\"\"\""
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == '0.000000000'\n\n\"\"\""
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"0.000000000\"\n\"\"\""
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == '0.000000'\nassert solution('2 2') == '0.500000'\nassert solution('3 4') == '0.750000'\nassert solution('10 10') == '1.000000'\n\"\"\""
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3') == '0.142857143'\nassert solution('4 6') == '0.5'\nassert solution('1 1') == '1.0'\n\"\"\"\n\nimport math\n\nR, C = [int(el) for el in input().split()]\nprint(math.sqrt(R**2 + C**2) - (R + C)/2)\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3) == '0.3333333333333333'\nassert solution(2) == '0.6666666666666666'\n\"\"\"\n\nR, C = map(float, input().split())\n\narea_without_cheese = R * C - R * R\n\nprint(area_without_cheese / (R * R))\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n') == '0.000000'\n\"\"\"\n\nR, C = [int(x) for x in stdin.split()]\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n') == '0.000000000'\nassert solution('1 2\\n') == '0.04166666666666667'\nassert solution('0 1\\n') == '0.0'\nassert solution('100 100\\n') == '0.0'\nassert solution('1 1\\n') == '0.0'\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1') == '0.000000'\nassert solution('3 3') == '0.111111'\nassert solution('3 2') == '0.33333'\nassert solution('2 1') == '0.500000'\nassert solution('100 100') == '0.111111'\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n100 101 102 103 488') == '2'\n\"\"\"\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n100 101 102 103 488''') == '2'\nassert solution('''3\n100 101 102 103 488\n100 200 300 101 102\n103 102 101 488 100''') == '2'\nassert solution('''3\n101 100 101 101 101''') == '3'\nassert solution('''4\n500 500 500 300 300\n300 300 300 300 300\n300 300 300 300 300\n300 300 300 300 300''') == '0'\n'''\n\ninput\n\n3\n100 101 102 103 488\n100 200 300 101 102\n103 102 101 488 100\n\noutput\n\n2\n\n'''"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 100 101 102 103 488\") == 2\n\"\"\""
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n100 101 102 103 488\") == \"2\"\nprint(solution(\"3\\n100 101 102 103 488\"))\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 2 4 5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100') == 2\nprint('Success')\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n100 101 102 103 488') == '2'\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n100 101 102 103 488\n100 200 300 101 102\n103 102 101 488 100''') == '2'\nassert solution('''3\n100 101 102 103 488\n100 200 300 101 102\n103 102 101 488 100''') == '2'\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n100 101 102 103\\n100 200 300 101 102\\n103 102 101 488 100\\n\") == \"2\"\nassert solution(\"1\\n100 101 102 103\\n100 200 300 101 102\\n103 102 101 488 100\\n\") == \"1\"\nassert solution(\"0\\n100 101 102 103\\n100 200 300 101 102\\n103 102 101 488 100\\n\") == \"0\"\nassert solution(\"3\\n100 101 102 103\\n100 200 300 101 102\\n103 102 101 488 100\\n\") == \"3\"\n\n-----Notes-----\nYou may assume that the frosh who are eligible for the prize are represented by the integer 1.\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n100 101 102 103 488\") == \"2\"\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == None\nassert solution('1') == 1\nassert solution('1730') == 1729\nassert solution('14') == None\nassert solution('300') == None\n'''\n\nm = int(stdin.read())\nx = 1\n\nwhile x < m:\n    x += 6 * x ** 2 + 1\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1730\") == \"1729\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '1730'\n) == '1729'\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1730') == '1729'\nassert solution('400000') == 'none'\nassert solution('5') == '5'\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1730') == '1729'\nassert solution('400000') == 'none'\nassert solution('1') == 'none'\nassert solution('3') == '1'\nassert solution('0') == 'none'"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"1\") == \"None\"\nassert solution(\"2\") == \"None\"\nassert solution(\"3\") == \"None\"\nassert solution(\"4\") == \"18\"\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1730\") == \"1729\"\n\"\"\"\n\nm = int(stdin.readline().strip())\nn = 1\nwhile n <= m:\n    if n ** 3 - 2 * (n ** 3) // 4 + 2 * (n ** 3) // 12 > m:\n        print(n - 1)\n        break\n    n += 1\nelse:\n    print(\"none\")"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1730') == '1729'\nassert solution('200') == '159'\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1730\") == \"1729\"\n\"\"\""
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('65536') == '16'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"65536\") == 16\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('65536') == 16\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"65536\") == 16\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('65536') == 16\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('65536') == 16\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('65536') == '16'\n\"\"\"\n\nx = int(stdin)\ni = 0\nk = 0\n\nwhile x > 0:\n    if (x % 2 == 1):\n        k += 1\n        x = x // 2\n    else:\n        x = x // 2\n        i += 1\nprint(k + i - 1)\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('65536') == 16\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('65536') == 16\nprint(solution('65536'))\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('65536') == 16\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"....\\n....\\n....\\n...K\") == \"2\"\nassert solution(\"....\\n....\\n....\\n....\\n....\\n....\\n...K\") == \"6\"\nassert solution(\"....\\n....\\n....\\n...K\\n....\\n....\\n....\\n....\") == \"3\"\nassert solution(\"....\\n....\\n....\\n....\\n....\\n....\\n....\\n...K\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\") == \"6\"\nassert solution(\"....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\nK...\\n....\\n....\\n....\\n....\") == \"9\"\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == 2\n\"\"\""
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"....\\n....\\n....\\n...K\\n\") == \"2\"\nassert solution(\"....\\n....\\n....\\n....\\n\") == \"-\"\nassert solution(\"....\\n....\\n....\\nK..\\n\") == \"1\""
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n....\n....\n....\n...K''') == '2'\n\nassert solution('''4\n....\n....\n....\n...K\n''') == '1'\n\nassert solution('''5\n....#\n....#\n...K.\n''') == '0'\n\nassert solution('''3\n...K\n''') == '-1'\n\nassert solution('''4\n.K.\n.K.\n.K.\n''') == '-1'"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n....\\n....\\n....\\n...K') == 2\nassert solution('6\\n.....\\n.#...\\n....K\\n.....\\n.....\\n') == 3\nassert solution('5\\n.....\\n...#K\\n...#..\\n.....\\n') == 4\nassert solution('6\\n.....\\n..#...\\n....K\\n...#..\\n.....\\n') == 4\n\nSample Output\n\n4\n3\n2\n1\n\n-----Notes-----\n- This is a classical problem, related to the generalization of Knight's tour problem. The generalization is known as Euler's tour problem.\n\n- You might want to look up the backtracking solution for this problem. If you don't know the backtracking solution, then try a naive solution and try to find a naive solution first. If you can't find a naive solution, try to solve this problem with backtracking.\n\n- You can solve this problem in O(n) time using BFS, as we can visit all the possible cells in O(n) time using a Breadth-First-Search.\n\n- You can solve this problem in O(n^2) time using a naive approach. This is an obvious idea that comes to mind first. The naive solution tries to traverse every possible cell and every possible path. Then you count the number of ways you could have reached the goal.\n\n- You can also solve this problem in O(n^2) time using a brute force approach. The idea is to try every possible square on the board and then check every possible move from that square. This works well for N = 1, but not for N = 2 or N = 3.\n\n- For a solution that works for N = 2, you can consider a simple heuristic that chooses the moves that will take you closer to the goal square. Here, the heuristic is to look for the square that is closest to the goal square.\n\n- For a solution that works for N = 3, you can choose the next move from the square that is closest to the goal square and move there.\n\n- For N = 4, 5, 6, there are many possible solutions.\n\"\"\"\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"....\\n....\\n....\\n...K\") == \"2\"\nassert solution(\"....\\n....\\n....\\n...#\") == \"-\"\nassert solution(\"##\\n#K\\n.\\n..\") == \"-\"\nassert solution(\"#.\\n#.#\\n#..\\n#.#\") == \"-\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('....\\n....\\n....\\n...K') == 2\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == 2\n\nassert solution(\"3\\n....\\n....\\n....\") == 0\n\nassert solution(\"4\\n....\\n....\\n...K\") == -1\n\nassert solution(\"3\\n#K\\n....\\n....\") == -1\n\nassert solution(\"5\\n.#K\\n...#\\n....\\n....\") == -1"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n...\\n...\\n...\\nK') == 2\nassert solution('3\\n#..\\n#..\\nK') == -1\nassert solution('2\\n.#\\n.#\\nK') == 0\n\n\"\"\""
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\n....\n....\n....\n...K\") == '2'\n\nassert solution(\"4\n....\n....\n....\nK\") == '-1'\n\nassert solution(\"4\n....\n....\n...K\nK\") == '-1'\n\nassert solution(\"4\n....\n....\n....\nK\nK\") == '-1'\n\nassert solution(\"4\n....\n....\n....\nK\n....\") == '5'"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1\\n') == '23'\n\"\"\"\n\n\"\"\"\nAttempting to solve the problem:\nAs a first approach, I thought of keeping a list of already booked rooms. \n\"\"\"\n\n\"\"\"\nFor any room number which is already booked, we check if it is in the range of r. \nIf it is in the range, we output the index of the room number in range. \nOtherwise we output \u201ctoo late\u201d.\n\"\"\""
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\nprint('Cool!')"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'too late'\nassert solution('7\\n3\\n5\\n2\\n1\\n4') == '5'\nassert solution('50\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50') == '3'\nassert solution('53\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53') == '52'\nassert solution('63\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63') == '63'\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == '23'\nassert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == 'too late'\nassert solution(\"1 1\\n\") == '1'\nassert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == '23'\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\n\n---\n\nThe first line of input gives the number of test cases, T. T test cases follow, each on a line. \nThe first line of each test case contains two space-separated integers denoting the number of rooms in the hotel, and the number of rooms already booked. \nThe second line of each test case contains n space-separated integers, where the ith integer is an integer between 1 and the number of rooms in the hotel (inclusive), \ndenoting the room number of the ith room that is already booked. \nAll n room numbers are distinct. \n\nSample Input:\n2\n2 5\n1 3\n1 2\nSample Output:\ntoo late\n12\n\nassert solution(\"2 5\\n1 3\\n1 2\\n\") == \"too late\"\nassert solution(\"2 5\\n1 3\\n5\\n1 2\\n\") == \"12\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\\n\") == \"23\"\n\n---\n\n\n\nInstead of going to a contest such as NWERC, you can also try to write your own algorithm and test it with your own test data.\n\nIn this problem you will implement a naive solution for the task of finding the available room for a given hotel. The hotel has $r$ rooms, numbered from $1$ to $r$, and you will be given a list describing which of these rooms are already booked.\n\n-----Input-----\nThe input consists of:\n - one line with two integers $r$ and $n$ ($1\\leq r \\leq 100$, $0 \\leq n \\le r$), the number of rooms in the hotel and the number of rooms that are already booked, respectively;\n - $n$ lines, each with an integer between $1$ and $r$ (inclusive), a room number that is already booked;\n\nAll $n$ room numbers of the already booked rooms are distinct.\n\n-----Output-----\nIf there are available rooms, output the room number of any such room. Otherwise, output \u201ctoo late\u201d.\n\n-----Examples-----\nSample Input:\n100 5\n42\n3\n2\n99\n1\nSample Output:\n23\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\""
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'too late'\nassert solution('5 5\\n42\\n3\\n2\\n99\\n1') == '23'\nassert solution('5 5\\n42\\n3\\n2\\n99\\n1\\n') == 'too late'\nassert solution('5 5\\n42\\n3\\n2\\n99\\n1\\n3') == 'too late'\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"playfair example\") == \"BMNXDKDYDBLIVDMUJKMNTUVILM\"\nassert solution(\"hide the gold in the tree stump\") == \"BMNXKDQXKXNYKXJWJMSMZQWVZQ\"\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"BDZOJHKSPXANXVNVMJIGXDMUHUZLNYKQBF\"\n\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"KIMWIQYFOCVUQWQQXWZYGGRKYGZH\""
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''playfair example''') == '''BMNDZBXDKYBEJVDMUIXMMNUVIF'''\n\nassert solution('''hide the gold in the tree stump''') == '''BJKXPNVZTKZBCVQNECJHXIMINOL'''\n\nassert solution('''fgfpqrst xyz''') == '''XADXEKPQTJKXCVVZRKZMXGDRJUY'''\n\nassert solution('''vkpkcftgxzrkxvxz''') == '''KHJXKJZWKMXJKWKXJXKFZWKXNZKZJ'''\n\nassert solution('''igtfpcwmgmymyll''') == '''IVHGEKLPNJKTQYBXKJEQNQMTWIL'''"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"NYHEFRDVVGLDSBJWMUCPZIKXKXN\"\n\n\"\"\"\nimport re"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"HSRQWIQBNFXNGQMMCYVVJDE\"\n\"\"\""
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nimport sys\n\nkey_phrase = sys.stdin.readline().strip()\ntext = sys.stdin.readline().strip()\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"playfair example\") == \"BMNXDPEJIDKZBMNYEVDMUI\"\nassert solution(\"hide the gold in the tree stump\") == \"NMNTYXVHWLDIZMUIMPBVV\"\n\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('Playfair example') == 'BMOQNFXDKYZMECWRSVJFHRTXV'\nassert solution('Hide the gold in the tree stump') == 'WZHJDRZNTEBVUTBXOVLAYKMRSDQ'\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('hide the gold in the tree stump') == 'PQRSTUVWXYZQN'\n\n\"\"\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\n\nassert solution(\"1.010 1.010 2.010 2.010\\n1.500 1.500\") == \"The gopher can escape through the hole at (1.500, 1.500).\"\n\n\"\"\"\nfrom itertools import product\nfrom typing import List"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\nassert solution(\"1.010 1.010 2.010 2.010\\n1.700 1.700\") == \"The gopher can escape through the hole at (1.010, 1.010).\"\nassert solution(\"1.010 1.010 2.010 2.010\\n1.200 1.200\") == \"The gopher can escape through the hole at (1.010, 1.010).\"\nassert solution(\"1.010 1.010 2.010 2.010\\n1.600 1.600\") == \"The gopher can escape through the hole at (1.010, 1.010).\"\nassert solution(\"1.010 1.010 2.010 2.010\\n1.700 1.700\") == \"The gopher can escape through the hole at (1.010, 1.010).\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher can escape through the hole at (1.0, 2.0).\"\nassert solution(\"1.010 1.010\\n1.010 1.010\") == \"The gopher cannot escape.\"\nassert solution(\"1.010 1.010\\n1.010 1.010\\n1.010 1.010\") == \"The gopher can escape through the hole at (1.0, 2.0).\"\nassert solution(\"1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\") == \"The gopher can escape through the hole at (1.0, 2.0).\"\n\"\"\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\n\"\"\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1.000 1.000 2.000 2.000\n1.500 1.500''') == 'The gopher cannot escape.'\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher can escape through the hole at (-500.0, 0.0).\"\n\n\"\"\""
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\\n\") == \"The gopher cannot escape.\"\nassert solution(\"1.010 1.010 2.010 2.010\\n1.500 1.500\\n\") == \"The gopher can escape through the hole at (1, 1).\"\nassert solution(\"1.010 1.010 2.010 2.010\\n1.800 1.800\\n\") == \"The gopher can escape through the hole at (1, 1).\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1.000 1.000 2.000 2.000\\n1.500 1.500') == \"The gopher cannot escape.\"\nassert solution('1.010 1.010 1.010 1.010\\n1.070 1.070') == \"The gopher can escape through the hole at (1.070, 1.070).\"\nassert solution('0.000 0.000 0.000 0.000\\n1.070 1.070') == \"The gopher can escape through the hole at (1.070, 1.070).\"\nassert solution('0.000 0.000 0.000 0.000\\n0.020 0.020') == \"The gopher cannot escape.\"\nassert solution('0.000 0.000 0.000 0.000\\n0.020 0.020\\n0.020 0.020\\n0.020 0.020') == \"The gopher cannot escape.\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '1.000 1.000 2.000 2.000\\n1.500 1.500\\n') == 'The gopher cannot escape.'\nassert solution(\n    '1.000 1.000 2.000 2.000\\n1.500 1.500\\n2.000 2.000\\n2.500 2.500\\n') == 'The gopher can escape through the hole at (1.000,1.000).'\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('0 0\\n0 0\\n1') == 'N'\nassert solution('2 2\\n2 2\\n5') == 'N'\n\n-----Solution-----\n\"\"\"\n\nfrom typing import List, Dict, Tuple, Set"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('3 4') == 'Y'\n\nassert solution('3 3') == 'N'\nassert solution('3 2') == 'Y'\n\nassert solution('-3 2') == 'Y'\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('3 4\\n4 3\\n3') == 'N'\nassert solution('3 4\\n2 4\\n5') == 'Y'\nassert solution('3 4\\n4 3\\n5') == 'N'\nassert solution('3 4\\n4 3\\n1') == 'Y'\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\n\"\"\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\nassert solution(\"1 1\\n2 2\\n0\") == \"Y\"\nassert solution(\"-1 -1\\n1 1\\n0\") == \"Y\"\nassert solution(\"1 2\\n0 1\\n1\") == \"N\"\nassert solution(\"1 -2\\n0 1\\n1\") == \"N\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\nassert solution(\"3 4\\n3 4\\n3\") == \"N\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'Y'\nassert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('3 4\\n4 4\\n3') == 'N'\nassert solution('3 4\\n4 3\\n3') == 'N'\nassert solution('3 4\\n3 4\\n3') == 'N'\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('3 4\\n5 4\\n3') == 'N'\nassert solution('7 6\\n7 6\\n1') == 'Y'\nassert solution('7 7\\n7 7\\n1') == 'N'\nassert solution('1 0\\n0 1\\n1') == 'Y'\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    3 4\n    3 3\n    3\n    \"\"\"\n) == 'Y'\nassert solution(\n    \"\"\"\n    3 4\n    3 3\n    0\n    \"\"\"\n) == 'N'\nassert solution(\n    \"\"\"\n    -10 -10\n    10 10\n    1\n    \"\"\"\n) == 'Y'\nassert solution(\n    \"\"\"\n    -10 -10\n    10 10\n    1\n    \"\"\"\n) == 'N'\n\"\"\"\n4 7\n0 0\n1\n\"\"\"\n\"\"\"\n5 3\n0 0\n1\n\"\"\"\n\"\"\"\n0 0\n-1\n\"\"\""
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\n\nSample Input:\n2 -1\n2 2\n2\nSample Output:\nN\n\nSample Input:\n3 -4\n-1 0\n1\nSample Output:\nY\n\"\"\"\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".#..#\\n####.\\n....#\\n...##\") == \"...#..\\n#..##\\n..###\\n#.#..\\n####.\"\nassert solution(\".#..#\\n####.\\n....#\\n#...#\\n#...#\") == \"....#\\n#.##\\n#.#.\"\nassert solution(\"......\\n#..#.#\\n#..#.#\\n#..#.#\\n......\") == \"......\\n#.#.#\\n#.#.#\\n#.#.#\\n......\"\nassert solution(\"......\\n#...#.#\\n#...#.#\\n#...#.#\\n......\") == \"......\\n...#..\\n...#..\\n...#..\\n......\"\nassert solution(\"......\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#\\n......\") == \"......\\n##..##\\n..#..#\\n##..##\\n......\"\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\n\"\"\"\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\nassert solution('5 5\\n....#\\n#..#.\\n#..#.\\n#..#.\\n#....') == '....#\\n#..#.#\\n#..#.#\\n#..#.#\\n#....'\nassert solution('5 6\\n.....\\n.#..#\\n.#..#\\n.##.\\n##.#\\n.#..') == '.....\\n.V.#.#\\n#.#V##\\n##V#.#\\n#.#.#.'\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".V.....#..\") == \"...#..V..\\n..#.#..V.\"\nassert solution(\".#....#..\") == \"..#.##.\\n.##....\"\nassert solution(\".......#..\") == \"...#...\\n...#...\\n....V..\\n.#....\"\nassert solution(\"..V....#..\") == \"...#.V.#\\n#.#.V#.\\n#V#.#.#\\n.V#.##\"\nassert solution(\"..V....#..\") == \"...#.V.#\\n#.#.V#.\\n#V#.#.#\\n.V#.##\"\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\n\"\"\""
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"...\") == \"...\"\nassert solution(\".......\\n...#...\\n..###..\\n.V#V#.\\n.V###V.\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\nassert solution(\"#..\\n#..\\n##.\") == \"..\\n..\\n..\"\n\"\"\"\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\n\"\"\"\n\nN, M = map(int, input().split())\n\nstdin = ''\nfor i in range(N):\n    stdin += input()\n\nrows = stdin.split('\\n')\n\nans = []\nfor row in rows:\n    tmp = []\n    for c in row:\n        if c == '#':\n            tmp.append('#')\n            continue\n        if c == 'V':\n            tmp.append('V')\n            continue\n        if c == '.':\n            tmp.append('.')\n            continue\n        if c =='':\n            tmp.append(' ')\n            continue\n    if len(tmp) == M:\n        ans.append(''.join(tmp))\n\nfor a in ans:\n    print(a)\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n2\\n') == '1\\n'\nassert solution('1\\n2\\n3\\n') == '1\\n2\\n3\\n'\nassert solution('1\\n2\\n3\\n4\\n') == '1\\n2\\n3\\n4\\n'\n\n-----Problem-----\n\n\"\"\""
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n.V..\\n..#.\\n#..V\") == \\\n    \"3 4\\n.V..\\n..#.\\n#..V\"\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13') == '11'\nassert solution('100101') == '101010'\nassert solution('111') == '1111'\nassert solution('111111111') == '1111111111'\nassert solution('1010') == '1010'\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(0b1101) == 0b1011"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13\") == \"11\"\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1011) == 11\nprint(solution(1011))\n\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13\") == \"11\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(13) == 11\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13') == '11'\n\"\"\"\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13') == '11'\n\"\"\"\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13') == '11'\nassert solution('7') == '1'\nassert solution('23') == '2'\n\nprint(solution(stdin.readline()))\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\\npink\\ntequilaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\nPInkpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nrSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon') == '9'"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\nassert solution(\"12\\nCoquelicot\") == \"I must watch Star Wars with my daughter\"\nassert solution(\"1\\nPInkrose\") == \"I must watch Star Wars with my daughter\"\nassert solution(\"2\\npInkrose\") == \"I must watch Star Wars with my daughter\"\nassert solution(\"1\\nCoquelicot\") == \"I must watch Star Wars with my daughter\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12\\npink\\ntequilaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon') == '9'\n\"\"\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\\n\"\n\"pink\\n\"\n\"tequilaSunrose\\n\"\n\"mExicanPInK\\n\"\n\"Coquelicot\\n\"\n\"turqrose\\n\"\n\"roSee\\n\"\n\"JETblack\\n\"\n\"pink\\n\"\n\"babypink\\n\"\n\"pInKpinkPinK\\n\"\n\"PInkrose\\n\"\n\"lazerlemon\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npiNkpinkpinK\\nPInkrose\\nlazerlemon\") == \"9\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12\\npink\\nteaQuilSunrE\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSeE\\nJETblack\\npink\\nbabypink\\npiNkpinkpinK\\nPInkrose\\nlazerlemon\") == \"9\"\n\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solution(self, stdin: str) -> int:\n        pass"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12\\npink\\nteaqulSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\nprint(\"Passed all tests...\")"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\\npink\\nteaquriseSunrse\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 'I must watch Star Wars with my daughter'\nassert solution('12\\n') == '9'\nassert solution('12\\n' + 'pink'*10) == '9'\nassert solution('12\\n' + 'pink'*10 + '\\nturqrose') == '9'\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 5 3') == '1 3 5'\n\nassert solution('3 5 1') == '3 1 5'\n\nassert solution('1 5 3') == '1 3 5'\n\nassert solution('A B C') == 'A C B'\n\nassert solution('C B A') == 'A C B'\n\n\"\"\""
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"1 3 5\") == \"1 3 5\"\nassert solution(\"5 3 1\") == \"1 3 5\"\nassert solution(\"3 5 1\") == \"1 3 5\"\nassert solution(\"3 1 5\") == \"1 3 5\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\""
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(input()).split()\nprint(solution(str(input())))"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 5 3') == '1 3 5'\n\n\"\"\"\n\nfrom typing import List, Iterator"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5 3\\nABC\") == \"1 3 5\"\n\"\"\"\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 4 5''') == '''3 4 5'''\nassert solution('''3 5 4''') == '''3 4 5'''\nassert solution('''5 3 4''') == '''5 3 4'''\nassert solution('''5 4 3''') == '''5 4 3'''\n\nprint(solution(input()))\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 5 3') == '1 3 5'\n\n-----Explanation-----\nYou can rearrange the input in the desired order using some of the Python built-in functions.\n\nFor example,\n\n>>> solution('1 5 3')\n1 3 5\n>>>\n>>> solution('3 5 1')\n3 1 5\n\n\"\"\"\n\nfrom collections import deque\nfrom typing import Deque, List, Tuple, Union\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5 3') == '1 3 5'"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 5 3\\nABC') == '1 3 5'\n\"\"\""
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n''') == '8.0'\n\nassert solution('''\nbuy 2 25\nbuy 3 10\nbuy 4 7\nbuy 5 1\nsell 1 2\nsell 2 1\nsell 3 10\nsell 4 1\nbuy 1 10\nbuy 2 1\nbuy 3 5\nsell 1 3\nsell 2 3\nsell 3 8\nbuy 1 10\nbuy 1 1\nsell 1 6\nsell 1 1\nbuy 1 1\nsell 1 1\n''') == '64.0'\n\nassert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n''') == '8.0'\n\nassert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 2 10\nbuy 1 10\nsell 1 6\nsell 1 6\n''') == '31.0'\n\nassert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n''') == '8.0'"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\") == \"8.0\"\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\") == \"8.00000000\"\nprint(solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\"))\n\n\"\"\"\n\n\"\"\"\nI'm not quite sure what the problem is actually asking for.\n\nI just had to look up some stuff on the internet to understand how to properly implement this in code.\nI don't understand why we need to perform a split after a merge.\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        split_counter = 0\n        merge_counter = 0\n        average_cost = 0\n        total_cost = 0\n        \n        for i in stdin.split('\\n'):\n            if i.startswith('buy'):\n                temp = i.split()\n                num_of_shares = int(temp[1])\n                average_cost += int(temp[2])\n                total_cost += int(temp[2]) * num_of_shares\n                split_counter += 1\n            elif i.startswith('sell'):\n                temp = i.split()\n                num_of_shares = int(temp[1])\n                total_cost -= int(temp[2]) * num_of_shares\n            elif i.startswith('split'):\n                temp = i.split()\n                split_counter += int(temp[1])\n            elif i.startswith('merge'):\n                temp = i.split()\n                merge_counter += int(temp[1])\n            elif i.startswith('die'):\n                temp = i.split()\n                average_cost -= int(temp[1])\n                \n        if split_counter > 0:\n            average_cost /= split_counter\n            print(f'{(1 + average_cost) * total_cost:.2f}')\n        elif merge_counter > 0:\n            print(f'{(1 + average_cost) * total_cost:.2f}')\n        else:\n            print('0.00')\n\nSolution().solution('buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4')\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\nprint(solution(INPUT))\n\n-----Problem-----\nIn Taxmania, the grumpy old aunt of the mitten-producing company Mittens Conglomerated is sick of her lonesome life. She is dying and has recently died at a tender age of $109$ cat years.\n\nThe mitten-producing company is a business that specializes in producing mittens, which are small balls of fluffy fur. In her stock records are records of her purchases and sales of mittens, and the company keeps a running tally of how many mittens it has produced.\n\nMittens can not die, but they can be sold. If a mitten is sold, it is replaced by a new mitten of the same type and age. When the company splits its stock, every share is replaced by $x$ new shares, and the value divided evenly between them. When the company merges its stock, every $x$ shares are replaced by a single stock. If Mittens can not merge all her shares (due to her number of shares not being divisible by $x$), she is forced to sell any remainder stock (at a price equal to the current average cost of her shares).\n\nThe company is also a good neighbor and offers to sell the mittens of the deceased to people who want them. Each mitten of the deceased is sold for $3$ dollars with a 20% markup.\n\nThe grumpy old aunt has recently passed away at the tender age of $109$ cat years. She kept a record of her purchases and sales of mittens, and has recently died at a tender age of $109$ cat years. After she died, she was forced to sell her stock for $30\\% $ of the capital gains paid as taxes.\n\nYou are asked to compute how much money the final sale of mittens yields. There are no tax effects from selling at a loss.\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\") == \"8.0\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4\n''') == \"8.0\"\nassert solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 4\ndie 4\n''') == \"13.0\"\nassert solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 4\nbuy 1 5\nsplit 4\nbuy 1 5\nsplit 4\nbuy 1 5\nsplit 4\nbuy 1 5\nsplit 4\nsell 1 5\ndie 4\n''') == \"36.5\"\nassert solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4\nbuy 1 5\nsplit 4\nbuy 1 5\nsplit 4\nbuy 1 5\nsplit 4\nbuy 1 5\nsplit 4\nbuy 1 5\nsplit 4\nbuy 1 5\nsplit 4\nbuy 1 5\nsplit 4\nsell 1 5\ndie 4\n''') == \"36.5\"\n\nimport math\n\nclass Solution:\n    def solution(self, inp, debug=False):\n        past_buy = 0\n        past_sale = 0\n        past_split = 0\n        past_merge = 0\n        past_death = 0\n        past_gross_gain = 0\n        for s in inp.split('\\n'):\n            s = s.split()\n            if len(s) == 3:\n                past_buy += int(s[1])\n                past_sale += int(s[2])\n                past_gross_gain += math.floor(float(s[2]) * (1 - 0.3) / float(s[1]))\n            if len(s) == 2:\n                past_split += int(s[1])\n            if len(s) == 1:\n                past_death += int(s[1])\n                past_merge += int(s[1])\n        if debug:\n            print(f\"Past sales: {past_sale}\")\n            print(f\"Past buys: {past_buy}\")\n            print(f\"Past deaths: {past_death}\")\n            print(f\"Past merges: {past_merge}\")\n            print(f\"Past splits: {past_split}\")\n            print(f\"Past gross gain: {past_gross_gain}\")\n        return past_sale - past_death - past_gross_gain\n\nassert Solution().solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4\n''') == \"8.0\"\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n''') == '8.0'\n\nassert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n''') == '8.0'\n\nassert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n''') == '8.0'\n\nassert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n''') == '8.0'\n\nassert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n''') == '8.0'"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4''') == '8.0'\n\nassert solution('''buy 1 5\nbuy 2 10\nbuy 3 25\nbuy 4 50\nbuy 5 75\nsell 1 5\nsell 2 10\nbuy 3 25\nsell 3 10\nbuy 4 50\nsell 4 10\nbuy 5 75\nsell 5 10\ndie 4\nbuy 3 100\nsell 3 10\nbuy 4 50\nsell 4 10\nbuy 5 75\nsell 5 10\ndie 4\nbuy 4 50\nsell 4 10\nbuy 5 75\nsell 5 10\ndie 4\nbuy 4 50\nsell 4 10\nbuy 5 75\nsell 5 10\ndie 4\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\\n\") == '8.00000000'\n\"\"\"\n\nimport math\n\ninp = stdin.read()\n\ninp = inp.split('\\n')\n\ninp = [x.split(' ') for x in inp]\n\nmoney = 0\n\nfor i in range(len(inp)):\n    if inp[i][0] == 'buy':\n        money += int(inp[i][1]) * int(inp[i][2])\n    elif inp[i][0] =='sell':\n        money -= int(inp[i][1]) * int(inp[i][2])\n    elif inp[i][0] =='split':\n        money += money / int(inp[i][1])\n    elif inp[i][0] == 'die':\n        money -= money * int(inp[i][1]) / 100\n\nprint(round(money, 2))\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4''') == '8.0'\n\nassert solution('''buy 1 15\nsplit 3\nsell 1 5\nsplit 3\ndie 4\nbuy 1 15\nsplit 3\ndie 4\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 1 15\nsplit 3\ndie 4''') == '25.00000000'\n\nassert solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4\nbuy 1 15\nsplit 3\ndie 4\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 1 15\nsplit 3\ndie 4\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 1 15\nsplit 3\ndie 4''') == '25.00000000'\n\nassert solution('''buy 1 15\nsplit 3\ndie 4\nbuy 1 15\nsplit 3\ndie 4\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 1 15\nsplit 3\ndie 4''') == '25.00000000'\n\nassert solution('''buy 1 15\nsplit 3\ndie 4\nbuy 1 15\nsplit 3\ndie 4\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 1 15\nsplit 3\nsell 1 5\nbuy 1 15\nsplit 3\ndie 4''') == '25.00000000'"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('808') == '8'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"100100\") == \"0\"\nassert solution(\"22\") == \"2\"\nassert solution(\"222222222222222222222222\") == \"9\"\nassert solution(\"2222222222222222222222222222222222222222222222222222222222\") == \"0\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"2\") == \"2\"\nassert solution(\"37\") == \"7\"\nassert solution(\"75\") == \"7\"\nassert solution(\"7\") == \"7\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"808\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('808') == '8'\nassert solution('808') == '8'\nassert solution('808') == '8'\nassert solution('808') == '8'\nassert solution('808') == '8'\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('808') == '8'\nassert solution('999') == '9'\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"100\") == \"0\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('808') == '8'\nassert solution('59') == '5'\nassert solution('812') == '2'\nassert solution('822') == '6'\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('808') == '8'\nassert solution('999') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('808') == '8'\nassert solution('2') == '2'\nassert solution('19') == '9'\nassert solution('99') == '9'\nassert solution('999') == '9'\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\"\"\"\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 0\nassert solution('WWLWWW') == 0\nassert solution('WWLWWW\\nWWLWWW') == 0\nassert solution('WWLLLL\\nWWLWWW') == 1\nassert solution('WWLLLL\\nWWLLLL') == 1\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\"\n) == 0\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == 0\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\nC C C C C\\nW W W W W\\nW W W W W\\nW W W W W\") == \"0\"\nassert solution(\"4 5\\nL L L L C\\nL L L L C\\nL L L L C\\nL L L L C\") == \"2\"\nassert solution(\"4 5\\nL C L C\\nL L L L\\nL C L C\\nL L L L\") == \"1\"\nassert solution(\"4 5\\nL C L C\\nL L L C\\nL C L C\\nL L L L\") == \"3\"\nassert solution(\"4 5\\nL C L C\\nL L L C\\nL C L L\\nL L L L\") == \"4\"\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\nSolution:\nfrom collections import deque\nfrom collections import defaultdict\nimport math"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n4 5\nCCCCC\nCCCCC\nCCCCC\nCCCCC\n''') == 0\nassert solution('''\n4 5\nWWWWW\nWWWWW\nWWWWW\nWWWWW\n''') == 4\nassert solution('''\n3 3\nLLL\nLLL\nLLL\n''') == 0\nassert solution('''\n3 3\nLWC\nLLC\nLWC\n''') == 0\nassert solution('''\n3 3\nLWL\nLWC\nLWC\n''') == 1\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == '0'\n\"\"\""
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(solution.sample_input) == solution.sample_output\nprint(solution(input()))\n\n\"\"\"\nfrom typing import List\nimport copy"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('L') == 'L'\nassert solution('W') == 'W'\nassert solution('C') == 'C'\nassert solution('LL') == 'L'\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\n\\n') == ''\nassert solution('1\\n') == '11'\nassert solution('2\\n') == '21'\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n\nassert solution(\"2 H\\nJH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"0\"\n\nassert solution(\"2 C\\n9H\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"18\"\n\nassert solution(\"2 D\\n9C\\n9H\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"36\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 H\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == '60'\nassert solution(\"1 C\\n8S\\n7H\\n8D\\n9S\\nKS\\nTD\\nAD\\nJH\") == '0'\nassert solution(\"1 C\\n8S\\n7H\\n8D\\n9S\\nKS\\nTD\\nAD\\nJH\") == '0'"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 H\") == \"0\"\nassert solution(\"2 S\") == \"20\"\nassert solution(\"2 D\") == \"0\"\nassert solution(\"2 C\") == \"10\"\nassert solution(\"2 H\") == \"10\"\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\nassert solution(\"3 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"78\"\n\"\"\"\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\\n\") == \"60\"\nprint(solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\\n\"))\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 STH\") == 60\nassert solution(\"1 H\") == 0\nassert solution(\"4 JD\") == 0\nassert solution(\"4 2D\") == 0\nassert solution(\"4 KS\") == 20\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH''') == '60'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\nassert solution(\"2S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\nassert solution(\"2S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n\nassert solution(\"2S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\nassert solution(\"2S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\nassert solution(\"  \") == \"\"\nassert solution(\"l\") == \"l\"\nassert solution(\"x \") == \"x\"\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\n---"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('this is very annoying') =='se'\nassert solution('thiss iss veery annoying') =='se'"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str_in) == str_out"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\n\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\nassert solution(\"x\") == \"x\"\nassert solution(\"the quick brown fox jumps over the lazy dog\") == \"zvzxxdvzvzx\"\nassert solution(\"x x\") == \"z\"\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 3\ns, t = sys.argv[1], sys.argv[2]\n\nresult = [c for c in s if s.index(c) % 2 == 0 and t[2 * s.index(c)] == t[2 * s.index(c) + 1]]\nprint(\"\".join(result))\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\nassert solution(\"supercalifragilisticexpialidocious\") == \"spu\"\nassert solution(\"aaaaa bbbbb ccccc ddddd eeeee fffff\") == \"a b c d e f\"\nassert solution(\"o oo ooo\") == \"o\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\n\"\"\"\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        pass\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\nSample Input:\nid\nit is\nSample Output:\nd\nSample Input:\nthis is very annoying\nthiss is very annoying\nSample Output:\nse\n\"\"\"\n\ns = input()\nt = input()\n\ns = s.split()\nt = t.split()\n\nans = []\n\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        ans.append(s[i])\n\nprint(''.join(ans))"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n\"\"\""
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 0\\n0 0 1 1 2\") == 3\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom math import ceil\n\nfrom utils.number_theory import gcd\n\nS, C, K = [int(x) for x in stdin.readline().split()]\nD = [int(x) for x in stdin.readline().split()]\nD.sort()\nN = S * 10 ** 9\n\nlcm = N // gcd(N, S)\n\nlast_d = D[0]\nfor d in D[1:]:\n    lcm = lcm // gcd(lcm, d - last_d)\n    last_d = d\n\nlcm = ceil(lcm / K)\n\nprint(lcm)\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n\"\"\""
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('1 1 2 3') == 0\nassert solution('2 2 3 3') == 1\nassert solution('1 0 1 0') == 1\nassert solution('2 2 3 3') == 1\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == '3'\nassert solution('2 2 0\\n0 0 1') == '1'\nassert solution('5 3 1\\n0 1 2 1 3') == '2'\nassert solution('3 5 10\\n0 0 1 1 2 2 3 2 3') == '3'\nassert solution('5 5 0\\n0 0 1 1 2 2 3 3') == '1'\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\nassert solution(\"6 4 0\\n0 1 1 2 2 3\") == 2\nassert solution(\"8 5 1\\n0 0 1 1 2 2 3 3 4\") == 1\nassert solution(\"5 2 0\\n0 0 1 1 2\") == 2"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n\n'''\n\nimport sys\nfrom collections import deque, defaultdict\n\nN, C, K = [int(x) for x in input().split()]\nsocks = [int(x) for x in input().split()]\ndic = defaultdict(int)\ndic[0] = 1\n\nfor i in range(N):\n    dic[abs(socks[i] - K)] += 1\n\ncur_val = 0\nres = 0\nfor i in sorted(dic.keys()):\n    cur_val += dic[i]\n    res += cur_val\n    if cur_val > C:\n        print(res)\n        sys.exit(0)\nprint(res)\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 0\\n0 0 1 1 2\") == 3\n\n\"\"\"\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\nassert solution('3 1 0\\n0 0 1 2') == 1\nassert solution('8 2 0\\n0 0 1 2 3 4 5 6 7') == 0\n\nprint(solution(stdin))\n\n\"\"\"\n\n\nimport math\nfrom collections import Counter"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3') == '6'\nassert solution('5\\n12\\n20') == '6'\nassert solution('10\\n100\\n1000\\n10000') == '0'\nassert solution('100\\n123\\n1234\\n12345\\n123456\\n1234567\\n12345678\\n123456789') == '8'\nassert solution('100\\n123\\n1234\\n12345\\n123456\\n1234567\\n12345678\\n123456789') == '8'\n\"\"\""
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\") == \"1\"\nassert solution(\"3\\n4\") == \"6\""
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n3') == '6'\nassert solution('1\\n1') == '1'\nassert solution('3\\n2') == '6'\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3\\n2\") == '6'\n\"\"\""
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n2\") == \"6\"\n\nassert solution(\"4\\n5\") == \"0\"\n\nassert solution(\"4\\n3\") == \"6\"\n\nassert solution(\"3\\n10\") == \"2\"\n\nassert solution(\"5\\n5\\n4\\n5\\n4\") == \"0\""
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n\") == 5\n\"\"\""
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"6\"\nassert solution(\"1\\n1\\n1\\n\") == \"3\"\nassert solution(\"5\\n5\\n5\\n\") == \"0\"\n\n\"\"\"\n\nimport unittest\nimport math"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n2\\n3\") == \"6\"\n\nassert solution(\"3\\n4\\n5\\n6\") == \"0\"\nassert solution(\"10\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"5\"\nassert solution(\"9\\n7\\n5\\n3\\n1\") == \"2\"\nassert solution(\"1\\n2\\n3\\n4\\n5\") == \"0\"\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3') == '6'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '6'\nassert solution('2\\n3') == '2'\n\"\"\"\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\\n\") == \"4 2\"\nassert solution(\"6 9 9\\n\") == \"6 18 18\"\n\"\"\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\n\"\"\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\"\"\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 2') == '4 2'\nassert solution('1') == '1 1'\nassert solution('2') == '2 2'\n\"\"\"\n\n\"\"\"\n\u041f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u0447\u0438\u0441\u043b\u0430 10, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 2. \u041a\u0430\u043a \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u0430?\n\n\u0414\u043b\u044f \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u043e\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043d\u0430 2.\n\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 - \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044e range(). \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u0430\u0436\u0434\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438.\n\nSample Input:\n10\nSample Output:\n0\n1\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\"\"\"\n\n\"\"\"\n\u041f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u0447\u0438\u0441\u043b\u0430 10, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 2. \u041a\u0430\u043a \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u0430?\n\n\u0414\u043b\u044f \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u043e\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043d\u0430 2.\n\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 - \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044e range(). \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u0430\u0436\u0434\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438.\n\nSample Input:\n10\nSample Output:\n0\n1\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\"\"\"\n\n\"\"\"\n\u041f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u0447\u0438\u0441\u043b\u0430 10, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 2. \u041a\u0430\u043a \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u0430?\n\n\u0414\u043b\u044f \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u043e\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043d\u0430 2.\n\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 - \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044e range(). \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u0430\u0436\u0434\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438.\n\nSample Input:\n10\nSample Output:\n0\n1\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\"\"\"\n\n\"\"\"\n\u041f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u0447\u0438\u0441\u043b\u0430 10, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 2. \u041a\u0430\u043a \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u0430?\n\n\u0414\u043b\u044f \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u043e\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043d\u0430 2.\n\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 - \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044e range(). \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u0430\u0436\u0434\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438.\n\nSample Input:\n10\nSample Output:\n0\n1\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\"\"\"\n\n\"\"\"\n\u041f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u0447\u0438\u0441\u043b\u0430 10, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 2. \u041a\u0430\u043a \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u0430?\n\n\u0414\u043b\u044f \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u043e\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043d\u0430 2.\n\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 - \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \ufffd"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\"\"\"\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 2') == '4 2'\nassert solution('4 1 2') == '3 3'\nassert solution('5 1 2 3 4') == '9 9'\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 2') == '4 2'\n\nassert solution('2 1 2') == '3 1'\n\nassert solution('1 1 1') == '1 2'\n\nassert solution('1 1') == '2 1'\n\nassert solution('1 2') == '2 2'"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 2\\n') == '4 2'\nassert solution('3\\n1 1 2') == '3'\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 \u0410\u0422\u0411. \u0410\u043b\u0438\u0441\u0430 \u0438 \u0411\u043e\u0431 \u043f\u0440\u043e\u0442\u0438\u0432 \u043d\u0430\u0441 \u043f\u043e\u0448\u043b\u0438 \u0432 \u0442\u043e\u0440\u0433\u043e\u0432\u0443\u044e \u043c\u0430\u0433\u0430\u0437\u0438\u043d, \u043e\u043d\u0438 \u043e\u0431\u043c\u0430\u043d\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u043f\u0440\u043e\u0434\u0430\u0436\u0435 \u0437\u043e\u043b\u043e\u0442\u0430. \u0412 \u043c\u0430\u0433\u0430\u0437\u0438\u043d \u0410\u043b\u0438\u0441\u0430 \u043f\u0440\u0438\u0435\u0445\u0430\u043b\u043e $n$ \u043a\u043e\u043d\u0444\u0435\u0442. \u041a\u0430\u0436\u0434\u0443\u044e \u0438\u0437 \u043d\u0438\u0445 \u043e\u043d \u043f\u043e\u043a\u0443\u043f\u0430\u043b \u043f\u043e\u0434 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u043e\u0439, \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0439 \u043e\u0442\u0446\u043e\u043c. \u041e\u0442\u0446\u043e\u043c \u043f\u0440\u0438\u043d\u044f\u043b\u0441\u044f \u0442\u043e\u0442, \u043a\u0442\u043e \u043a\u0443\u043f\u0438\u043b \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u043e\u043d\u0444\u0435\u0442. \u0423 \u0410\u043b\u0438\u0441\u044b \u043d\u0435 \u0434\u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a \u0440\u0430\u0441\u043f\u0440\u043e\u0434\u0430\u0442\u044c \u0432\u0435\u0441\u044c \u043a\u043e\u0444\u0435, \u043d\u043e \u043e\u043d \u043d\u0430\u0447\u0430\u043b \u0431\u044b\u0441\u0442\u0440\u043e \u0441\u043e\u0431\u0438\u0440\u0430\u0442\u044c \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445. \u041f\u043e\u043c\u043e\u0433\u0438\u0442\u0435 \u0435\u0439 \u0432\u044b\u0439\u0442\u0438 \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u043c\u0438\u0440\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 n \u0438 m. \u041a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u0442 \u0441\u0432\u043e\u0439 \u043e\u0442\u0446, \u0438\u043d\u0434\u0435\u043a\u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d \u0438\u043c\u0435\u0435\u0442 \u0432 \u043d\u0430\u043b\u0438\u0447\u0438\u0438.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0443\u0436\u043d\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430. \u041f\u0435\u0440\u0432\u043e\u0435 - \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443 \u0410\u043b\u0438\u0441\u044b \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u0443\u043f\u0430\u043a\u043e\u0432\u043e\u043a, \u0438 \u0432\u0442\u043e\u0440\u043e\u0435 - \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u044b\u043b\u043e \u043e\u0442\u0446\u043e\u043c \u043a\u043e\u0444\u0435 \u0438 \u043f\u043e\u0434\u0430\u0432\u0430\u043b\u043e\u0441\u044c \u0435\u043c\u0443 \u0434\u0430\u043b\u044c\u0448\u0435.\n\nSample Input 1:\n3 1\nSample Output 1:\n0 1\nSample Input 2:\n3 3\nSample Output 2:\n0 2\nSample Input 3:\n1 1\nSample Output 3:\n0 0\n\"\"\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\"\"\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\"\"\""
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == \"2\"\nassert solution(\"4 1 1\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"4 2 3\") == \"1\"\nassert solution(\"2 3 2\") == \"3\"\nassert solution(\"5 3 2\") == \"2\"\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 1\") == 2\n\"\"\""
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 1\") == \"2\"\n\"\"\"\n\nfrom typing import List\n\n\"\"\"\nhttps://leetcode.com/problems/trolls-lcci/discuss/85625/Python-3-brute-force-solution\n\"\"\""
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 1\") == \"2\"\nassert solution(\"5 3 1\") == \"3\"\nassert solution(\"5 5 1\") == \"5\"\nassert solution(\"5 5 2\") == \"2\"\n\"\"\"\n\na, b, c = [int(n) for n in input().split()]\n\ng = 0\nwhile c > 0:\n    c -= b\n    g += 1\n    if c > 0:\n        b += a\n        c -= b\n\nprint(g)\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 1') == 2\n\"\"\""
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 2 1''') == '2'\nassert solution('''3 1 2''') == '1'\nassert solution('''1 1 1''') == '0'\nassert solution('''2 3 3''') == '1'\nassert solution('''1 2 3''') == '2'\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 1') == 2\n\"\"\""
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1,3,3') == '1'\nassert solution('2,2,1') == '0'\nassert solution('2,2,2') == '2'\nassert solution('3,1,1') == '1'\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == 36\nassert solution(\"7\") == 288\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == 36\n\"\"\"\nimport sys"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == '36'\nassert solution('7') == '288'\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == 36\nassert solution('7') == 288\n\"\"\"\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5) == 36\n\nassert solution(7) == 288\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == 36\nassert solution('7') == 288\n\"\"\"\n\n\"\"\"\nIf you do the problem recursively, the recursion depth will be unbounded.\n\nOn the exam, any other type of solution will receive zero points!\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"36\"\nassert solution(\"7\") == \"288\"\nassert solution(\"8\") == \"729\"\nassert solution(\"4\") == \"80\"\nassert solution(\"2\") == \"40\"\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"36\"\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"36\"\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline().strip())\n\nh = [1]\nwhile h[-1]!= 1:\n    if h[-1] % 2 == 0:\n        h.append(h[-1] // 2)\n    else:\n        h.append(3 * h[-1] + 1)\n\nprint(sum(h))\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\") == \"288\"\n\"\"\"\n\n\"\"\"\nassert solution(\"13\") == \"169\"\nassert solution(\"17\") == \"284\"\nassert solution(\"11\") == \"134\"\nassert solution(\"23\") == \"253\"\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\n\"\"\"\n\n\nclass Room():\n    def __init__(self, n):\n        self.n = n\n        self.s = [0] * self.n\n        self.p = []\n\n    def add_students(self, n):\n        if self.s[-1] < self.n:\n            self.s[-1] += n\n            return True\n        else:\n            return False\n\n    def next_room(self):\n        if self.s[-1] > self.n:\n            return None\n        else:\n            self.s[-1] += 1\n            if self.s[-1] <= self.n:\n                self.s[:-1] = [self.s[i] + 1 for i in range(self.n - 1)]\n                self.s[-1] = 1\n            return self.s\n\n    def is_safe(self):\n        if self.s[-1] == self.n:\n            self.s[:-1] = [self.s[i] + 1 for i in range(self.n - 1)]\n            self.s[-1] = 1\n            return True\n        return False\n\n    def add_exams(self, p):\n        self.p.extend(p)\n        while self.p:\n            self.s[self.p.pop(0) - 1] -= 1\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"2\\n3 3 1\") == \"impossible\"\nassert solution(\"1\\n2\") == \"impossible\"\nassert solution(\"2\\n1\") == \"impossible\"\nassert solution(\"2\\n1 1\") == \"1 2\"\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n2 3 3 1''') == '2 3 4 1'\nassert solution('''4\n2 3 1 3''') == 'impossible'\nassert solution('''4\n1 3 1 3''') == '2 3 4 1'\n'''\n\u041b\u0456\u043d\u0434\u0430 \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u0440\u043e\u0437\u0432'\u044f\u0437\u043e\u043a \u0437\u0430\u0434\u0430\u0447\u0456 \u0434\u043b\u044f \u043f\u0435\u0440\u0448\u043e\u0433\u043e \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u043d\u043e\u0433\u043e \u0437\u0430\u0432\u0434\u0430\u043d\u043d\u044f \u0437\u0430\u0434\u0430\u0447\u0456 \u041b\u0456\u043d\u0434\u0438.\n\u0406\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u043e\u0432\u0443\u0454 \u0437\u043c\u0456\u043d\u043d\u0443 n, \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u044e\u0447\u0438 \u0444\u0443\u043d\u043a\u0446\u0456\u044e input().\n\u041f\u043e\u0442\u0456\u043c \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u044e\u0447\u0438 \u0444\u0443\u043d\u043a\u0446\u0456\u044e input(), \u0437\u0430\u043f\u0438\u0441\u0443\u0454 \u0432 \u043e\u043a\u0440\u0435\u043c\u0438\u0439 \u0440\u044f\u0434\u043e\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0437\u043c\u0456\u043d\u043d\u043e\u0457 n, \u0449\u043e \u0454 \u043d\u0430\u0439\u043c\u0435\u043d\u0448\u0438\u043c \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u0432\u0456\u0434 2 \u0434\u043e 30.\n\u041f\u043e\u0442\u0456\u043c \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u0444\u0443\u043d\u043a\u0446\u0456\u044e int(), \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u044e\u0447\u0438\u0441\u044c \u043c\u0435\u0442\u043e\u0434\u043e\u043c split(), \u0434\u043b\u044f \u0440\u043e\u0437\u0434\u0456\u043b\u0435\u043d\u043d\u044f \u0440\u044f\u0434\u043a\u0430 \u043d\u0430 \u0437\u043c\u0456\u043d\u043d\u0456 \u0437 \u0440\u043e\u0437\u0434\u0456\u043b\u0435\u043d\u043d\u044f\u043c \u043d\u0430 \u0447\u0438\u0441\u043b\u0430 \u0437 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u043e\u043a\u0440\u0435\u043c\u0438\u0445 \u043b\u0456\u0442\u0435\u0440. \u041f\u0456\u0441\u043b\u044f \u0432\u0438\u043a\u043e\u043d\u0430\u043d\u043d\u044f \u0434\u0456\u0457, \u043e\u043a\u0440\u0435\u043c\u043e \u0444\u0443\u043d\u043a\u0446\u0456\u044f print() \u0432\u0438\u0432\u043e\u0434\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0440\u044f\u0434\u043a\u0430.\n\u041f\u0456\u0441\u043b\u044f \u0432\u0438\u043a\u043e\u043d\u0430\u043d\u043d\u044f \u0432\u0441\u0456\u0445 \u0434\u0456\u0439, \u0431\u0443\u0434\u0435 \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u043e \u0434\u043e\u043f\u043e\u0432\u043d\u0435\u043d\u043d\u044f \u0437 \u0437\u043c\u0456\u043d\u043d\u043e\u044e result, \u044f\u043a\u0430 \u043f\u0443\u0441\u0442\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u043c \u043f\u043e\u0447\u0438\u043d\u0430\u0454\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u043f\u043e\u0447\u0430\u0442\u043a\u043e\u043c \u0432\u0438\u043a\u043e\u043d\u0430\u043d\u043d\u044f \u0444\u0443\u043d\u043a\u0446\u0456\u0457.\n\u0417\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0437\u043c\u0456\u043d\u043d\u043e\u0457 result \u043f\u0440\u0438\u0441\u0432\u043e\u044e\u0454\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0435\u0434\u0431\u0430\u0447\u0435\u043d\u043d\u044f\u043c \u0444\u0443\u043d\u043a\u0446\u0456\u0457 int(), \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u044e\u0447\u0438\u0441\u044c \u0444\u0443\u043d\u043a\u0446\u0456\u0454\u044e int(), \u0434\u043b\u044f \u0441\u0443\u043c\u0438 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b, \u044f\u043a\u0456 \u0437\u043d\u0430\u0445\u043e\u0434\u044f\u0442\u044c\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043a\u0443, \u0449\u043e \u0456\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0432 \u043c\u0435\u0436\u0430\u0445 \u0432\u0456\u0434 2 \u0434\u043e 30.\n\u0424\u0443\u043d\u043a\u0446\u0456\u044f \u0446\u0438\u043a\u043b\u0443 \u043f\u0440\u0430\u0446\u044e\u0454 \u0434\u043e \u0442\u0438\u0445 \u043f\u0456\u0440, \u043f\u043e\u043a\u0438 \u043d\u0435 \u0431\u0443\u0434\u0435 \u043d\u0430\u0439\u043c\u0435\u043d\u0448\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0432\u0456\u0434 2 \u0434\u043e 30.\n\u041f\u0456\u0441\u043b\u044f \u0432\u0438\u043a\u043e\u043d\u0430\u043d\u043d\u044f \u0446\u0438\u043a\u043b\u0443 \u043e\u043a\u0440\u0435\u043c\u0430 \u0444\u0443\u043d\u043a\u0446\u0456\u044f print() \u0432\u0438\u0432\u043e\u0434\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0437\u043c\u0456\u043d\u043d\u043e\u0457 result.\n\n-----Input-----\n\u0406\u043d\u0456\u0446\u0456\u0430\u043b\u0456\u0437\u043e\u0432\u0443\u0454 \u0437\u043c\u0456\u043d\u043d\u0443 n, \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u044e\u0447\u0438 \u0444\u0443\u043d\u043a\u0446\u0456\u044e input().\n\n-----Output-----\n\u041f\u043e\u0432\u0438\u043d\u043d\u0435 \u0432\u0438\u0432\u0435\u0441\u0442\u0438 \"impossible\", \u044f\u043a\u0449\u043e \u0444\u0443\u043d\u043a\u0446\u0456\u044f int() \u043d\u0435 \u0437\u043c\u043e\u0436\u0435 \u0437\u0431\u0456\u043b\u044c\u0448\u0438\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0437\u043c\u0456\u043d\u043d\u043e\u0457 n, \u0430\u0431\u043e \"2 3 4 1\", \u044f\u043a\u0449\u043e \u0444\u0443\u043d\u043a\u0446\u0456\u044f int() \u0437\u043c\u043e\u0436\u0435 \u0437\u0431\u0456\u043b\u044c\u0448\u0438\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0437\u043c\u0456\u043d\u043d\u043e\u0457 n.\n\u0406\u043d\u0430\u043a\u0448\u0435 \u0432\u0438\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043e\u043a\u0440\u0435\u043c\u0438\u0439 \u0440\u044f\u0434\u043e\u043a, \u044f\u043a\u0438\u0439 \u0441\u043a\u043b\u0430\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u0437 \u0442\u0440\u044c\u043e\u0445 \u0440\u044f\u0434\u043a\u0456\u0432:\n1. \u0420\u044f\u0434\u043e\u043a, \u0449\u043e \u0441\u043a\u043b\u0430\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u0437 \u0447\u0438\u0441\u0435\u043b, \u0449\u043e \u0441\u0442\u043e\u044f\u0442\u044c \u0432 \u0441\u043f\u0438\u0441\u043a\u0443 \u0447\u0438\u0441\u0435\u043b \u0456\u0437 \u0432\u0456\u0434\u0441\u043e\u0440\u0442\u043e\u0432\u0430\u043d\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u043c\u0438 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u0437\u0440\u043e\u0441\u0442\u0430\u043d\u043d\u044f \u0432\u0456\u0434 \u0437\u0430\u0434\u0430\u043d\u043e\u0433\u043e \u0432 \u043f\u0435\u0440\u0448\u043e\u043c\u0443 \u0440\u044f\u0434\u043a\u0443 \u0447"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 3 1\") == '2 3 4 1'\n\nassert solution(\"5\\n2 3 4 1\") == 'impossible'\n\nassert solution(\"5\\n3 3 4 1\") == '2 3 4 1'\n\nassert solution(\"5\\n1 3 3 4 1\") == '2 3 4 1'\n\nassert solution(\"5\\n3 2 4 1\") == 'impossible'"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 3 1\") == '2 3 4 1'\nassert solution(\"7\\n3 3 3 2 3 3 4\") == '2 3 4 5 7 1'\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1\") == '1 2 3 4 5 6 7 8 9 10'\nassert solution(\"4\\n1 1 1 1\") == '1 2 3 4'\nassert solution(\"1\\n1\") == '1'\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'impossible'\nassert solution('\\n') == 'impossible'\nassert solution('3\\n1 2 3\\n') == '1 3 2'\nassert solution('5\\n1 3 2\\n') == '1 3 2 5'\nassert solution('5\\n1 2 3\\n') == '1 2 3 5'\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"5\\n3 2 2 4 1\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\"\"\"\n\nfrom typing import List, Dict\nimport sys\nimport random\n\nclass Library(object):\n    def __init__(self, n_books: int, signup_time: int, books: List[int]):\n        self.n_books: int = n_books\n        self.signup_time: int = signup_time\n        self.books: List[int] = books\n        self.shipped: List[bool] = [False for _ in range(n_books)]\n    def ship_next(self, i: int) -> bool:\n        if i < 0 or i >= len(self.books):\n            return False\n        self.shipped[i] = True\n        return True\n    def can_ship_last(self) -> bool:\n        for shipped in self.shipped:\n            if not shipped:\n                return False\n        return True\n    def get_next(self) -> int:\n        for i in range(self.n_books):\n            if not self.shipped[i]:\n                return i\n        return -1"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == 4\n\n\"\"\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n\"\"\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == '4'\n\n\"\"\"\nimport os\nfrom collections import Counter"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\n\"\"\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\nassert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\nassert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\nassert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\nassert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 5\nleft_oar\nright_oar\nleft_oar\nhull\nright_oar''') == '4'\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('left_oar') == 'left_oar'\nassert solution('right_oar') == 'right_oar'\nassert solution('left_oar right_oar') == 'left_oar'\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3\\nleft_oar\\nleft_oar\\nright_oar\\nhull\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n2 4\\n3 6') == '3 3'\n\"\"\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5 5\n5 7\n7 5\n''') == '7 7'\nassert solution('''\n5 5\n7 7\n5 7\n''') == '5 5'\nassert solution('''\n5 5\n7 7\n7 5\n''') == '5 7'\nassert solution('''\n7 5\n5 7\n7 7\n''') == '7 7'"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 5\\n5 7\\n7 5\\n') == '7 7'\nassert solution('1 1\\n2 1\\n3 2\\n') == '3 3'\n\"\"\""
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1\\n2 5\\n7 9\\n4 3\\n') == '4 4'\nassert solution('1 2\\n3 2\\n7 2\\n4 3\\n') == '7 2'\n\n\"\"\"\n\nimport itertools\nimport sys"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5\\n5 7\\n7 5') == '7 7'\nassert solution('2 2\\n1 1\\n4 4') == '2 2'\nassert solution('1 1\\n2 2\\n3 3') == '2 2'\nassert solution('1 1\\n2 2\\n3 3\\n4 4') == '2 2'\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a\\nb\\nc') == 'd\\ne\\nf'\nassert solution('1 1\\n2 2\\n3 3') == '4 4'\nassert solution('4 4\\n5 5\\n7 7') == '6 6'\nassert solution('4 4\\n5 5\\n7 7\\n9 9') == '8 8'\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5\\n5 7\\n7 5') == '7 7'\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 5\n5 7\n7 5''') == '7 7'\nassert solution('''0 0\n0 5\n5 0''') == '5 0'\nassert solution('''6 6\n6 6\n6 6''') == '6 6'\nassert solution('''2 3\n5 5\n5 5''') == '6 5'\nassert solution('''10 10\n7 6\n8 5\n8 9\n10 7''') == '8 9'\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5') == '3\\n4\\n5'\n\n\"\"\""
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\\n\") == \"4 4\"\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n1 61\") == \"measurement error\"\n\"\"\"\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\">-1.234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n1 61\") == \"1.016666667\"\n\"\"\"\n\nfrom math import ceil\n\nn = int(stdin.readline())\nnumbers = []\nfor i in range(n):\n    m, s = map(int, stdin.readline().split())\n    numbers.append((m, s))\n\naverage = 0\nfor m, s in numbers:\n    average += (m / 60) + ceil(s / 3600)\n\naverage /= len(numbers)\n\nprint(round(average, 7))\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 61\\n') == '1.016666667'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\n61\n\"\"\") == \"1.016666667\"\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 61\") == \"measurement error\"\nassert solution(\"2 32\") == \"3.66666667\"\nassert solution(\"2 32\\n1 62\") == \"2.5\"\n\n\"\"\"\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"measurement error\"\nassert solution(\"1 61\") == 1.016666667\nassert solution(\"2 61\") == 2.016666667\nassert solution(\"1 1\") == \"measurement error\"\nassert solution(\"1 1\\n1 1\") == \"measurement error\"\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n1 61') == '1.016666667'\nassert solution('1\\n2 58') =='measurement error'\nassert solution('1\\n2 120') =='measurement error'\nassert solution('1\\n3 36') == '1.2916666667'\nassert solution('1\\n2 31') == '1.4733333333'\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') =='measurement error'\nassert solution('5\\n30 120\\n100 140\\n50 100\\n150 200') == 5\n'''"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 61\\n\") == \"1.016666667\"\nassert solution(\"10 57\\n\") == \"measurement error\"\nassert solution(\"1 33\\n\") == \"1.016666667\"\n\"\"\"\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"YPMCRYY\") == \"CALGARY\"\nassert solution(\"VPMCRYY\") == \"CALGARY\"\nassert solution(\"CPMCRY\") == \"CALGARY\"\nassert solution(\"YPMCRY\") == \"CALGARY\"\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"GMDGKVYW\") == \"EVENING\"\nassert solution(\"XYZABC\") == \"NOPQRST\"\n\"\"\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"MNNTEQRK\") == \"CRKTEQR\"\nassert solution(\"QWERTY\") == \"QRTYEW\"\nassert solution(\"FLERTYU\") == \"LERTYU\"\nassert solution(\"THQWERTG\") == \"QRWERTYG\"\n\nprint(\"All tests passed.\")\n\nimport time\n\nstart_time = time.time()\nanswer = solution(\"QWERTY\")\nelapsed_time = time.time() - start_time\n\nprint(\"Answer: \" + str(answer))\nprint(\"Elapsed time: \" + str(elapsed_time) + \" seconds\")\n\nimport time"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"MYTSVY\") == \"NATSRC\"\nassert solution(\"HIMDPSO\") == \"COMDPSO\"\nassert solution(\"HZOZGKW\") == \"XZOSGKW\"\n\"\"\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('CPMCRYY', 'ALBERTA') == 'CALGARY'\n\"\"\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"CPMCRYY\") == \"ALBERTA\"\nassert solution(\"KYMYQQP\") == \"CALGARY\"\n\"\"\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"CALGARY\") == \"CALGARY\"\nassert solution(\"CALGARYY\") == \"CALGARY\"\nassert solution
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('CPMCRYY') == 'CALGARY'\n\"\"\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"CPMCRYY\", \"ALBERTA\") == \"CALGARY\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'CPMCRYY'\n) == 'CALGARY'\n\"\"\"\n\nmessage = stdin[0]\nkey = stdin[1]\n\nfor i in range(len(message)):\n    if i % 2 == 0:\n        print(chr((ord(message[i]) + ord(key[i]) - 2*ord('A')) % 26 + ord('A')), end='')\n    else:\n        print(chr((ord(message[i]) - ord(key[i]) + 26) % 26 + ord('A')), end='')"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABC\") == \"3\"\nassert solution(\"ABCCBA\") == \"1\"\nassert solution(\"ABCCBACBA\") == \"2\"\nassert solution(\"ABCCBACBAA\") == \"3\"\nassert solution(\"ABCCBACBAB\") == \"1\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('AB') == '3'\nassert solution('BCA') == '1'\nassert solution('CBA') == '2'\nassert solution('CAB') == '2'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AB\") == \"3\"\n\n-----Notes-----\nIf the ball is under the right cup, the trick is to move the left cup to the right.\n\nIf the ball is under the middle cup, the trick is to swap it with the right cup.\n\nIf the ball is under the left cup, the trick is to swap it with the middle cup.\n\nFor example, here is how the trick works for the string ABCABABC:\n\nstep 1\nABACABABC\n\nstep 2\nCABABCAB\n\nstep 3\nABACABAC\n\nstep 4\nCABACABA\n\nstep 5\nABCACABA\n\n'''"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"ACCABCA\") == \"1\"\nassert solution(\"CBABCBA\") == \"2\"\nassert solution(\"BABCBAC\") == \"3\"\nassert solution(\"BCACBA\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"CBA\") == \"2\"\n\"\"\"\n\nimport itertools\nimport collections"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"ABBC\") == \"1\"\nassert solution(\"ABCBA\") == \"2\"\nassert solution(\"CABBAA\") == \"1\"\nassert solution(\"BAAACCD\") == \"4\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '1'\nassert solution('A') == '1'\nassert solution('AA') == '2'\nassert solution('AAA') == '3'\nassert solution('BB') == '3'\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"ABC\") == \"1\"\nassert solution(\"CAB\") == \"2\"\nassert solution(\"ACB\") == \"3\"\nassert solution(\"BAC\") == \"1\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AB\") == \"3\"\n\"\"\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABC') == '3'\nassert solution('BB') == '1'\n\"\"\"\n\nfrom itertools import combinations\nfrom collections import Counter"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('2 3 3 4') == '3'\nassert solution('3 3 3 4') == '1'\nassert solution('4 3 2 3') == '1'\nassert solution('3 3 3 4') == '4'"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"2 3 4 5\") == \"10\"\nassert solution(\"2 1 2 4\") == \"6\"\nassert solution(\"10 20 30 10\") == \"200\"\nassert solution(\"10 20 30 7\") == \"10\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"3 1 1 1\") == \"3\"\nassert solution(\"3 1 2 1\") == \"3\"\nassert solution(\"3 1 2 3\") == \"3\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\n\nimport sys\n\nassert solution(sys.stdin.readline().strip()) == sys.stdin.readline().strip()\n\n\nimport re\nimport sys"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 1 2 2\") == \"2\"\nassert solution(\"1 2 2 3\") == \"0\"\nassert solution(\"2 2 2 2\") == \"0\"\nassert solution(\"1 2 3 4\") == \"3\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\n\"\"\"\nfrom math import sqrt\n\nfrom typing import List, Tuple, Union\n\nfrom custom_types import N\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1 2 3 4''') == '3'\nassert solution('''3 2 3 4''') == '4'\nassert solution('''3 4 2 4''') == '6'\nassert solution('''4 2 5 4''') == '10'\nassert solution('''5 2 6 3''') == '8'\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"4 1 4 1\") == \"4\"\nassert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"4 1 4 1\") == \"4\"\n\n-----Explanation-----\n1) You can enclose an area of width=2 and height=3.\n2) You can enclose an area of width=1 and height=4.\n3) You can enclose an area of width=3 and height=4.\n\nExample solution:\n\nimport math"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"3 2 1 2\") == \"4\"\nassert solution(\"4 3 2 1\") == \"4\"\n\nassert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"3 2 1 2\") == \"4\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3 1\") == 3\nassert solution(\"1 2 3 4\") == 3\n\"\"\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('103 27') == '4'\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('103 27') == 4\n\"\"\"\n\n\"\"\"\n\u4e8c\u5206\u63a2\u7d22\na \u306e\u4e8c\u5206\u63a2\u7d22\n\"\"\"\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('103 27') == 4\n\n-----Solution-----\n\na, b = map(int, stdin.split(' '))\nwhile a!= b:\n    if a % 2 == 0:\n        a /= 2\n    else:\n        a += 1\n    b += 1\nprint(b - 1)\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('103 27') == '4'\nprint(solution('103 27'))\n\n-----Constraints-----\n1 <= a, b <= 10^9\n\"\"\"\n\n\nfrom math import ceil\nfrom typing import List"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(123, 45) == 2\nassert solution(1, 1) == 0\nassert solution(1, 10) == 0\nassert solution(1, 2) == 0\nassert solution(10, 5) == 0\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"103 27\") == \"4\"\nassert solution(\"27 103\") == \"4\"\nassert solution(\"103 27\") == \"4\"\n\n-------------------\nSample Input:\n123 456\nSample Output:\n2\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('103 27') == 4\n\"\"\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('103 27') == '4'"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('103 27') == '4'\nprint(solution(stdin))\n\n-----Explanation-----\nThe solution is to transform $103$ into $27$ by adding 4 times.\n\n\"\"\"\n\n\"\"\"\nIn this problem, we have to find minimum operations to transform a number to a target number.\nWe can think of this problem as a graph problem, in which we have two nodes, source and target, and an edge between them if a number is even and it is transformed into another number by adding 1.\n\nSo we need to find a path from source to target.\n\nSo, what we do is maintain a queue with all the source numbers, and a visited set.\nAt every step, we pop out the first number from the queue and check if it is the target. If it is, we return the steps.\nIf it is not, then we search for the number which is closest to it in the set.\nIf the difference is 2, then the number is even and we add it to the queue.\nIf the difference is 1, then the number is odd and we add it to the queue with a step+1.\n\n\"\"\"\n\nfrom collections import deque\n\nclass Solution:\n    def solve(self, a, b):\n        queue = deque()\n        queue.append(a)\n        visited = set()\n        visited.add(a)\n        steps = 0\n        while queue:\n            size = len(queue)\n            for _ in range(size):\n                cur = queue.popleft()\n                if cur == b:\n                    return steps\n                for next in [cur+1, cur//2]:\n                    if next == b or (next in visited):\n                        continue\n                    queue.append(next)\n                    visited.add(next)\n            steps += 1\n        return -1\n\nimport unittest\nclass TestCases(unittest.TestCase):\n    def test_1(self):\n        a = 103\n        b = 27\n        output = 4\n        self.assertEqual(Solution().solve(a, b), output)\n    def test_2(self):\n        a = 1\n        b = 1\n        output = 0\n        self.assertEqual(Solution().solve(a, b), output)\n    def test_3(self):\n        a = 2\n        b = 3\n        output = -1\n        self.assertEqual(Solution().solve(a, b), output)\n    def test_4(self):\n        a = 3\n        b = 5\n        output = 2\n        self.assertEqual(Solution().solve(a, b), output)\n    def test_5(self):\n        a = 5\n        b = 25\n        output = 3\n        self."
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a, b) == k\n"
    }
]