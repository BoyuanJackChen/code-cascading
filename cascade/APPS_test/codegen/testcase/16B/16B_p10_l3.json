[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\""
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6') == '5\\n1 8 6'\nassert solution('3\\n1 2\\n2 3') == '2\\n1 3'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5') == '5\\n1 8 6'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7') == '7\\n1 8 6'\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n2 3\\n3 4\\n4 5\\n4 6') == '5\\n1 8 6'"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"1 3\\n1 4\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n5 4\") == \"1 4\\n1 5\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"1 2\\n1 3\\n1 4\\n1 5\"\nassert solution(\"3\\n1 2\\n2 3\") == \"1 2\\n1 3\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n1 3\") == '5\\n1 3 6'\n\"\"\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == '5\\n1 8 6'\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n8 4\\n4 1\") == '5\\n1 8 6'\nassert solution(\"5\\n1 2\\n2 3\\n3 4\") == '1 4'\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n8 4\\n4 1\") == '5\\n1 8 6'\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n8 4\\n4 1\") == '5\\n1 8 6'\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n3 4\") == \"5\"\nassert solution(\"3 3\\n1 2\\n2 3\") == \"1 3 2\"\n\n\"\"\""
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n2 3\\n3 4\") == '5'\nassert solution(\"5 3\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\") == '1 8 6'"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2\\n2 3\\n3 4\\n4 5') == '5\\n1 2\\n3 4'\nassert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\nassert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\nassert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\nassert solution('9\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n8 9') == '5\\n1 8 6'\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readlines()\n\nN = int(input[0])\n\nedges = []\n\nfor line in input[1:]:\n    edges.append(tuple(map(int, line.strip().split())))\n\nedges.sort()\n\nres, prev = 0, 0\n\nfor a, b in edges:\n    if a!= prev:\n        res += 1\n        prev = b\n\nprint(res, edges[-3], edges[-2], edges[-1])\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\nimport math\n\nn = int(input())\nls = list(map(int, input().split()))"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('5') == '1 2 3 5'\nassert solution('6') == '1 2 3 6'\nassert solution('7') == '1 2 3 5 7'\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 1 1 3 4 1 1 2 3\") == \"3 2\"\nassert solution(\"1 1 2 4 5 7 8\") == \"1 1 2 3 4 5\"\nassert solution(\"4 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98\") == \"4 6 8 10 12 16 20 24 28 36 42 48 54 60 72 84 96\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 1 3\") == \"3 1\"\n\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\nassert solution('10\\n1 2 4 1 2 20 4 5') == '1 2 4 20 8'\nassert solution('10\\n1 1 2 4 20 4 5') == '1 2 4 20 8'\n\"\"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 3') == '24'\nassert solution('5 5 4') == '56'\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\nassert solution('5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6') == '56'\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n\") == \"24\"\n\"\"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\nassert solution('5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6') == '56'\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4\\nR R R\"\nassert solution(\"4\\n1 2 3 4\") == \"4\\nR R R\"\nassert solution(\"2\\n1 2\") == \"1\\nR\"\nassert solution(\"2\\n1 2\") == \"1\\nR\"\nassert solution(\"1\\n1\") == \"1\\nL\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRR\"\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 4 3 2\\n\") == \"4\\nLRRR\"\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin_str) == output_str"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nLRRR'\nassert solution('7\\n1 3 5 6 5 4 2') == '6\\nLRLRRR'\nassert solution('3\\n2 2 2') == '1\\nR'\nassert solution('4\\n1 2 4 3') == '4\\nLLRR'\n\n\"\"\"\n\nfrom math import inf\nfrom collections import deque\nfrom typing import List, Set, Deque, Tuple\n\n__all__ = ['solution']\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n7\n1 3 5 6 5 4 2\n\"\"\") == \"\"\"\n6\nLRRR\"\"\", solution(\"\"\"\n7\n1 3 5 6 5 4 2\n\"\"\") == \"\"\"\n6\nLRRR\"\"\"\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nLRRR'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == '4\\nLRRR'\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\"\nassert solution(\"3\\n2 2 2\") == \"1\"\nassert solution(\"4\\n1 2 4 3\") == \"4\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRR\"\n\n\"\"\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str([2, 8])) == 3\nassert solution(str([1, 4, 7, 7])) == 3\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n8\") == \"3\"\nassert solution(\"1\\n4\\n4\\n7\\n4\\n1\") == \"3\"\nassert solution(\"1\\n4\\n7\\n7\") == \"3\"\nassert solution(\"1\\n4\\n7\\n7\\n5\") == \"-1\"\nassert solution(\"1\\n4\\n7\\n7\\n5\\n8\") == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 4 7 4 1\") == \"3\"\nassert solution(\"5 2 5 2 5\") == \"3\"\nassert solution(\"5 2 5 2 5\") == \"3\"\nassert solution(\"5 2 5 2 5\") == \"3\"\nassert solution(\"4 1 3 7\") == \"-1\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_0) == test_0_result\nassert solution(test_1) == test_1_result\nassert solution(test_2) == test_2_result\nassert solution(test_3) == test_3_result\n\"\"\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 2 3 4\") == \"3\"\n\"\"\"\n\n\"\"\"\nn = int(input())\na = list(map(int, input().split()))\n\nmax_a = max(a)\nmin_a = min(a)"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4\\n5 6 7 8') == '3'\nassert solution('1 2\\n5 6') == '-1'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\ns = sum(a)\na.sort()\n\nfor i in range(n):\n    if 2 * a[i] < s:\n        d = a[i]\n        break\nelse:\n    d = -1\nprint(d)\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8\") == 3\nassert solution(\"1 4 4 7 4 1\") == 3\nassert solution(\"2 2 5 2 5\") == 3\nassert solution(\"1 3 3 7\") == -1\nassert solution(\"2 8\") == 3\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\\n\") == \"3\"\nassert solution(\"5\\n2 2 5 2 5\\n\") == \"3\"\nassert solution(\"4\\n1 3 3 7\\n\") == \"-1\"\nassert solution(\"2\\n2 8\\n\") == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"3\"\nassert solution(\"5\\n1 2 3 7 4\") == \"3\"\nassert solution(\"5\\n1 2 3 7 5\") == \"3\"\nassert solution(\"5\\n1 2 3 7 6\") == \"-1\"\nassert solution(\"5\\n1 2 3 7 8\") == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 4 4 7 4 1\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"-1\"\nassert solution(\"2 8\") == \"3\"\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 499999 1000000\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\") == \"YES\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"0 0 4 6\n0 0 7 4\"\"\"\n) == \"YES\"\n\nassert solution(\n\"\"\"0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000\n\"\"\"\n) == \"YES\"\n\nassert solution(\n\"\"\"2 2 4 4\n1 1 3 5\n3 1 5 5\"\"\"\n) == \"NO\"\n\nassert solution(\n\"\"\"0 0 10 10\n0 0 10 10\"\"\"\n) == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 2 2\") == \"NO\"\nassert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"2 2 3 4\") == \"YES\"\nassert solution(\"1 1 3 5\") == \"NO\"\nassert solution(\"3 1 5 5\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 499999 1000000\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 499999 1000000\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"1 1 3 5\") == \"YES\"\nassert solution(\"3 1 5 5\") == \"YES\"\n\n\nassert solution(\"0 0 4 6\") == \"YES\"\nassert solution(\"0 0 7 4\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 4 4\") == 'NO'\nassert solution(\"3 1 7 6\") == 'YES'\nassert solution(\"0 0 4 6\") == 'YES'\nassert solution(\"5 2 10 5\") == 'YES'\n\"\"\""
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1098\") == 20\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10098\") == 20\nassert solution(\"10\") == 19"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\nassert solution(\"77\") == 18\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1098') == 20\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1098\") == \"20\"\nassert solution(\"10\") == \"19\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1098\") == \"20\"\n\"\"\""
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\n\"\"\"\n\nimport sys\nfrom typing import List\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\n\"\"\""
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n5 0 0 2 4\\n\") == \"5 3 1 2 4\"\n\"\"\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n2 1 0 0 0\") == \"2 1 4 5 3\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '5\\n5 0 0 2 4'\n) == '5 3 1 2 4'\n\nassert solution(\n    '7\\n7 0 0 1 4 0 6'\n) == '7 3 2 1 4 5 6'\n\nassert solution(\n    '7\\n7 4 0 3 0 5 1'\n) == '7 4 2 3 6 5 1'\n\n\"\"\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\n\"\"\""
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n5 0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nls = list(map(int, sys.stdin.readline().split()))\n\nls2 = [0] * n\n\nfor i, v in enumerate(ls):\n    if v > 0:\n        ls2[v - 1] = i + 1"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n5 0 0 2 4\\n\") == '5 3 1 2 4'\nassert solution(\"7\\n7 0 0 1 4 0 6\\n\") == '7 3 2 1 4 5 6'\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == '7 4 2 3 6 5 1'\n\"\"\""
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5 0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n2 1 0 0 0\\n\") == \"2 1 4 5 3\"\nassert solution(\"7\\n4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n7\n7 0 0 1 4 0 6\n''') == '7 3 2 1 4 5 6'\n\nassert solution('''\n7\n4 0 0 3 0 5 1\n''') == '4 2 3 6 5 1'\n\nassert solution('''\n5\n2 1 0 0 0\n''') == '2 1 4 5 3'\n\nassert solution('''\n5\n4 0 0 2 4\n''') == '5 3 1 2 4'\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\n\n\"\"\"\n\nn = int(input())\n\nmatrix = [int(i) for i in input().split(' ')]\n\ns = set()\nfor i in matrix:\n    if i == 0:\n        s.add(i)"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == '2 1 4 5 3'\n\"\"\"\n\nfrom collections import Counter\n\nN = int(input())\nf = list(map(int, input().split()))"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([\"4 2\", \"1 2 1 2 3\"]) == 'NO'\nassert solution([\"5 2\", \"3 2 1 2 3\"]) == 'YES'\nassert solution([\"5 2\", \"2 1 1 2 1\"]) == 'NO'\nassert solution([\"5 2\", \"1 1 1 2 1\"]) == 'YES'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 1 2\") == \"NO\"\n\nprint(\"All cases passed\")\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'NO'\nassert solution('a') == 'NO'\nassert solution('ab') == 'NO'\nassert solution('ab\\n') == 'NO'\nassert solution('3\\n1 1 2') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n2 1 1 2 1\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"4 2\\n1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"YES\\n2 1 1 2 1\"\n\"\"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n    4 2\n    1 2 2 3\n    \"\"\"\n    ) == 'YES\\n1 1 2 2'\nassert solution(\n    \"\"\"\n    5 2\n    3 2 1 2 3\n    \"\"\"\n    ) == 'YES\\n2 1 1 2 1'\nassert solution(\n    \"\"\"\n    5 2\n    2 1 1 2 1\n    \"\"\"\n    ) == 'NO'\nassert solution(\n    \"\"\"\n    5 3\n    2 1 1 2 1\n    \"\"\"\n    ) == 'NO'\nassert solution(\n    \"\"\"\n    5 2\n    2 1 1 1 2\n    \"\"\"\n    ) == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 2 2 3\\n') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 3\\n') == 'NO'\nassert solution('5 2\\n1 2 1 2 1\\n') == 'NO'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\nassert solution(\"11 5 10000\") == \"10000\"\nassert solution(\"100 100 100 100\") == \"0\"\nassert solution(\"1000 100 100 1\") == \"1\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\n\"\"\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\n\n-----\n1. n = 11\n2. x = 5\n3. y = 2\n\n-----\n1. n = 11\n2. x = 5\n3. y = 1\n\n-----\n11\n100101\n10011\n\n\n11\n100101\n10011\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11\n101101\n10111\n\n-----\n11"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\nassert solution(\"11 5 0\") == \"0\"\nassert solution(\"10 10 9\") == \"2\"\nassert solution(\"10 10 10\") == \"0\"\n\"\"\"\nfrom collections import deque\nfrom sys import stdin\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11 5 2\\n11010100101') == '1'\nassert solution('11 5 1\\n11010100101') == '3'\nassert solution('11 5 1\\n11010101010') == '0'\nassert solution('11 5 1\\n11010101110') == '1'\nassert solution('11 5 1\\n11011101110') == '1'\n\nprint(\"Check test.py for more examples.\")\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == '1'\nassert solution(\"11 5 1\\n11010100101\") == '3'\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 5 2\") == \"1\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n\nassert solution(\"11 5 4\") == \"2\"\nassert solution(\"11 6 5\") == \"1\"\n\nassert solution(\"11 7 4\") == \"1\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1') == 'YES'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1') == 'YES'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1') == 'NO'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1') == 'NO'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1') == 'NO'\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\n\"\"\""
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1\\n3\") == \"YES\"\nassert solution(\"3\\n1 2 2\\n3\") == \"YES\"\nassert solution(\"1\\n2\") == \"NO\"\nassert solution(\"1\\n2\\n2\\n3\") == \"NO\"\n\"\"\"\n\nfrom typing import List, Union, Callable\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"NO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"NO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\") == 'YES'\nassert solution(\"4\\n1 2 3 5\") == 'NO'\n\nassert solution(\"4\\n1 2 1 4\") == 'YES'\nassert solution(\"4\\n1 2 1 3\") == 'NO'\n\nassert solution(\"5\\n1 2 2 1\") == 'YES'\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 2 2 1\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 2 2 2 1\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 2 2 2 1\") == \"NO\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 1 2\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 1 2\") == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 1\") == \"YES\"\nassert solution(\"5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 1 2\") == \"NO\"\nassert solution(\"4\\n1 2 2 1\") == \"YES\"\nassert solution(\"10\\n1 1 2 2 3 3 4 4 5 5\") == \"NO\"\n\n----Problem----\n\nIn a forest, each rabbit has some color. Some subset of rabbits (possibly all of them) tell you how many other rabbits have the same color as them. Those answers are placed in an array.\n\nReturn the minimum number of rabbits that could be in the forest.\n\nThe number of rabbits in the forest doesn't exceed $10^9$.\n\nExamples\n\nInput\n4\n1 2 3 4\nOutput\n4\n\nInput\n2\n1 2\n3 4\nOutput\n2\n\nInput\n3\n1 2 1\n3 4 1\nOutput\n2\n\nInput\n10\n1 2 3 4 5 6 7 8 9 10\nOutput\n1\n\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5') == 'YES'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5') == 'NO'\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(5000)\nimport re\nimport itertools"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1337') == '1553'\n\nassert solution('11111') == '99999'\nassert solution('9 8 7 6 5 4 3 2 1') == '99999'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\""
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11111\") == \"99999\"\nassert solution(\"1337\") == \"1557\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\n1337\n1 2 5 4 6 6 3 1 9\") == \"1557\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1337\") == \"1557\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"333\") == \"33333\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1337') == '1553'\n\nassert solution('11111') == '99999'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1337') == '1553'\n\"\"\"\nimport sys\n\nsys.stdin = open('input.txt')\ninput = sys.stdin.readline\n\nn = int(input())\na = input()\nf = list(map(int, input().split()))"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1337') == '1553'\nassert solution('11111') == '99999'\nassert solution('33') == '33'\n\"\"\""
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"111111\") == \"99999\"\nassert solution(\"1234\") == \"1234\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"333\") == \"3\"\nassert solution(\"11110\") == \"999\"\nassert solution(\"11101\") == \"999\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"33\") == \"33\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46') == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n3') == '1\\n1 1 3'\nassert solution('2\\n1 2 3') == '1\\n2 1 3'\nassert solution('3\\n123 321 456') == '1\\n2 1 3'\n\"\"\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 3\") == \"1 1 3\"\nassert solution(\"123 321 456\") == \"1 2 3\"\nassert solution(\"5 10 15\") == \"1 1 2\"\nassert solution(\"15 18 21\") == \"1 1 1\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3\\n12 34 56\") == \"1\\n1 2 3\\n2\\n4 8 16\"\nassert solution(\"5\\n1 2 3\\n12 34 56\\n5 10 15\\n15 18 21\\n100 100 101\") == \"1\\n1 2 3\\n102\\n4\\n4 8 16\\n114 228 456\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46') == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'\nprint('Success')\n\n\"\"\"\n\nimport sys\n\nDEBUG = False"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3\\n123 321 456') == '1\\n1 1 3'\nassert solution('5\\n1 2 3\\n123 321 456') == '4\\n1 2 3'\nassert solution('8\\n1 2 3\\n123 321 456') == '4\\n1 2 3'\nassert solution('8\\n1 2 3\\n123 321 456') == '4\\n1 2 3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"123 321 456\") == \"1\"\nassert solution(\"5 10 15\") == \"2\"\nassert solution(\"15 18 21\") == \"3\"\nassert solution(\"100 100 101\") == \"1\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 2') == '1\\n1 2 3'\nassert solution('3 5 8') == '4\\n5 3 8'\nassert solution('1 1 1') == '0\\n1 1 1'\nassert solution('1 2 3') == '0\\n1 2 3'\nassert solution('2 1 3') == '2\\n1 2 3'\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == ''\nassert solution('1 2 3') == '1 1 3'\nassert solution('1 2 3\\n1 2 3') == '1 1 3'\nassert solution('1 2 3\\n1 2 3\\n') == '1 1 3'\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\\n\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\"\n\"\"\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 3 7\") == '2'\nassert solution(\"2\\n1 100000\") == '0'"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 3 7\") == 2\nassert solution(\"2\\n1 100000\") == 0\nassert solution(\"4\\n1 3 3 7\") == 2\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\n\n\"\"\"\n\n\"\"\"\nsolution 1\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\n\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 2\n1 3 1\n1 5 1''') == '1 2 3 0 3'\nassert solution('''3 2\n1 3 1\n1 2 1''') == '-1'\nassert solution('''10 3\n4 7 2\n1 10 3\n8 9 1''') == '2 2 2 1 1 0 4 3 4 4'\nassert solution('''5 2\n1 3 1\n1 5 1''') == '1 2 3 0 3'\nassert solution('''3 2\n1 3 1\n1 2 1''') == '-1'\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == result"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == '1 2 3 0 3'\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == '-1'\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == '2 2 2 1 1 0 4 3 4 4'"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"0\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"-1\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(\"examples/15.txt\").read()) == \"3 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 2\\n1 10 3\\n8 9 1\") == '2 2 2 1 1 0 4 3 4 4'\nassert solution(\"5 3\\n1 3 1\\n1 2 1\") == '-1'\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == '2 2 2 1 1 0 4 3 4 4'\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 2\n1 3 1\n1 2 1''') == '1 2 3 0 3'\n\nassert solution('''5 2\n1 3 1\n1 5 1''') == '-1'\n\nassert solution('''10 3\n4 7 2\n1 10 3\n8 9 1''') == '2 2 2 1 1 0 4 3 4 4'\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"no solution\""
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\nassert solution('120 51840') == '7'\nassert solution('42 42') == '0'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution([\"120\", \"51840\"]) == \"7\"\nassert solution([\"42\", \"42\"]) == \"0\"\nassert solution([\"48\", \"72\"]) == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aba') == 'abababa'\nassert solution('cat') == 'catcat'\nassert solution('aaaaaaaaaaa') == 'aaaaaaaaaaa'\n\n-----Implementation-----\n\nTime Complexity: O(n ^ 2)\nSpace Complexity: O(n)\n\n\"\"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba\", 3) == \"ababababa\"\nassert solution(\"cat\", 2) == \"catcat\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"abababa\"\nassert solution(\"cat\") == \"catcat\"\nassert solution(\"abc\") == \"abcabcabc\"\nassert solution(\"abac\") == \"abacabac\"\nassert solution(\"abacd\") == \"abacdabacd\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 3\nababa''') == 'ababababa'\nassert solution('''5 2\ncat''') == 'catcat'\nassert solution('''5 3\nababa''') == 'ababababa'\nassert solution('''3 2\ncat''') == 'catcat'\nassert solution('''3 1\ncat''') == 'cat'"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"ababababa\""
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba') == 'ababababa'\n\nassert solution('cat') == 'catcat'\n\nprint(solution(stdin))"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aba') == 'ababababa'\nassert solution('cat') == 'catcat'\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aba') == 'abababa'\n\nassert solution('cat') == 'catcat'\n\"\"\""
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 2\ncat''') == 'catcat'\nassert solution('''5 4\nababa''') == 'ababababa'\nassert solution('''1 1\na''') == 'a'\nassert solution('''4 4\naaaa\n''') == 'aaaa'\nassert solution('''4 3\naaba\n''') == 'aabaaba'\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\ns = stdin.readline().rstrip()\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aba') == 'ababababa'\nassert solution('cat') == 'catcat'\n\n\"\"\"\n\nimport sys\nfrom collections import Counter, deque\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5 1 2 2\") == \"3\"\nassert solution(\"8 3 5 2\") == \"2 1 4\"\nassert solution(\"2 1 2 4 3\") == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1 2 2\\n\") == \"3\\n4 1 5\"\nassert solution(\"4\\n8 3 5 2\\n\") == \"2\\n1 4\"\nassert solution(\"5\\n2 1 2 2\\n\") == \"0\"\nassert solution(\"4\\n8 3 5 2\\n\") == \"2\\n1 4\""
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 5 1 2 2\") == \"3\\n4 1 5\"\nassert solution(\"4\\n8 3 5 2\") == \"2\\n1 4\"\nassert solution(\"5\\n2 1 2 4 3\") == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5 1 2 2\") == \"3\"\nassert solution(\"8 3 5 2\") == \"2\"\nassert solution(\"8 3 5 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1 2 2 4 3') == '3\\n4 1 5'\nassert solution('4\\n8 3 5 2') == '2\\n1 4'\nassert solution('5\\n2 1 2 4 3') == '0'\nassert solution('4\\n3 4 5 6') == '0'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '1\\n7 8'\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 2 2\\n\") == \"3\\n1 4\"\nassert solution(\"4\\n8 3 5 2\\n\") == \"2\\n1 4\"\nassert solution(\"5\\n2 1 2 4 3\\n\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n2 5 1 2 2') == '3\\n4 1 5'\nassert solution('5\\n2 1 2 4 3') == '0'\nassert solution('4\\n8 3 5 2') == '2\\n1 4'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 2 2\") == \"3\\n1 4\"\n\"\"\""
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 5 1 2 2') == '3\\n4 1 5'\nassert solution('4\\n8 3 5 2') == '2\\n1 4'\nassert solution('5\\n2 1 2 4 3') == '0'\n\"\"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5 1 2 2\") == \"3\"\nassert solution(\"2 1 2 4 3\") == \"0\"\nassert solution(\"8 3 5 2\") == \"2\"\nassert solution(\"2 1 2 4 3\") == \"0\"\n\n\"\"\"\n\nfrom typing import List, Dict\n\nclass Solution:\n    def sum_dict(self, dict: Dict[int, int]):\n        s = 0\n        for _, num in dict.items():\n            s += num\n        return s\n\n    def solve(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n <= 2:\n            return 0\n        dict = {}\n        for i in range(n):\n            dict[nums[i]] = dict.get(nums[i], 0) + 1\n\n        res = {}\n        for key, value in dict.items():\n            sub = dict.copy()\n            sub[key] = 0\n            sum = self.sum_dict(sub)\n            if sum == value:\n                res[key] = value\n        if res:\n            return len(res)\n        else:\n            return 0\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\nasdf\") == '4'\nassert solution(\"5 6\\naaaaa\") == '15'\nassert solution(\"5 7\\naaaaa\") == '-1'\nassert solution(\"10 100\\najihiushda\") == '233'\n\n\n\"\"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 asdf') == '4'\nassert solution('5 6 aaaa') == '15'\nassert solution('5 7 aaaa') == '-1'\nassert solution('10 100 ajihiushda') == '233'\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ajihiushda\") == 233\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"aaaaa\") == \"15\"\nassert solution(\"ajihiushda\") == \"233\"\n\n\"\"\"\n\nn, k = [int(n) for n in stdin.readline().split()]\ns = stdin.readline().strip()\ncost = {n: i for i, n in enumerate(s)}\nsubstring = sorted(cost.keys())\n\nmin_cost = 0\nfor substring_length in range(1, len(substring) + 1):\n    substring_start = 0\n    substring_cost = 0\n    while substring_start + substring_length <= len(s):\n        substring_cost += cost[substring[substring_start]]\n        substring_start += 1\n    if substring_cost <= k:\n        min_cost = min(min_cost, substring_cost)\n    else:\n        break\n\nprint(min_cost if min_cost!= 0 else -1)\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abaca\") == \"abaca\"\nassert solution(\"abbc\") == \"abbc\"\nassert solution(\"abca\") == \"abca\"\nassert solution(\"aaabbc\") == \"aaabbc\"\nassert solution(\"aaaaa\") == \"aaaaa\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 5\nasdf''') == '4'\nassert solution('''5 6\naaaaa''') == '15'\nassert solution('''5 7\naaaaa''') == '-1'\nassert solution('''10 100\najihiushda''') == '233'\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5', 'asdf') == 4\nassert solution('5 6', 'aaaaa') == 15\nassert solution('5 7', 'aaaaa') == -1\nassert solution('10 100', 'ajihiushda') == 233\nassert solution('8 2', 'aaaaaaaaaaa') == 8\n\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\nsdf\") == \"4\"\nassert solution(\"5 6\\naaaaa\") == \"15\"\nassert solution(\"5 7\\naaaaa\") == \"-1\"\nassert solution(\"10 100\\najihiushda\") == \"233\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 5\nasdf''') == '4'\nassert solution('''5 6\naaaaa''') == '15'\nassert solution('''5 7\naaaaa''') == '-1'\nassert solution('''10 100\najihiushda''') == '233'\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"aaaaa\") == \"15\"\nassert solution(\"ajihiushda\") == \"233\"\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\"\n\n\"\"\"\n\nimport collections\n\n\"\"\"\nunion-find\n\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n2 3\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == 'YES\\n1 2\\n1 4\\n4 1'\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == 'NO'\nassert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == 'YES\\n1 2\\n1 3\\n1 4'\nassert solution(\"5 7 2\\n1 2\\n1 3\\n1 4\\n1 5\\n2 5\\n3 5\\n4 5\\n2 4\\n3 4\\n4 3\\n5 4\") == 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution('4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n1 2\\n1 3\\n4 1\\n2 3\\n3 4'\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'YES\\n2 1\\n2 3'\nassert solution('''4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'YES\\n1 2\\n1 3\\n4 1\\n4 3'\nassert solution('''4 4 3\n1 2\n1 4\n2 3\n3 4''') == 'NO'\n\n\n-----Test cases-----\n\n=>>=\n\n\n-----Solution-----\n\n'''"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n3 1\\n4 3\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\nassert solution(\"4 4 4\\n1 2\\n1 3\\n2 3\\n3 4\") == \"NO\"\nassert solution(\"4 4 4\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\\n3 2\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n2 1\\n2 3\\n3 4\\n\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n1 2\\n1 3\\n4 1\\n\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n1 2\\n1 3\\n4 1\\n\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\") == \"NO\\n\"\nassert solution(\"4 4 2\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"NO\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport datetime"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10:00 11:00') == '10:30'\nassert solution('11:10 11:12') == '11:11'\nassert solution('01:02 03:02') == '02:02'"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:00') == '11:00'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\n\n---\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\n\"\"\"\n\nx1, x2 = input().split(':')\ny1, y2 = input().split(':')\nx1, x2, y1, y2 = int(x1), int(x2), int(y1), int(y2)"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30\"\nassert solution(\"11:10 11:12\") == \"11:11\"\nassert solution(\"01:02 03:02\") == \"02:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30\"\nassert solution(\"11:10 11:12\") == \"11:11\"\nassert solution(\"01:02 03:02\") == \"02:02\"\n\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10:00\\n11:00') == '10:30'\nassert solution('11:10\\n11:12') == '11:11'\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\n\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:00') == '11:00'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\n\"\"\"\nimport time"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\n\nprint(solution('2'))\nprint(solution('4'))\nprint(solution('27'))\nprint(solution('42'))"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2') == 1\nassert solution('3') == 2\n\"\"\"\n\na = int(input())\n\nprint(1 if a & 1 else 2 if a & 2 else 3 if a & 4 else 4 if a & 8 else 5 if a & 16 else 6 if a & 32 else 7 if a & 64 else 8)\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(2) == 1\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == 1\nassert solution('2') == 2\nassert solution('3') == 3\nassert solution('4') == 4\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(2) == 1\nprint(solution(2))\nassert solution(4) == 2\nprint(solution(4))\nassert solution(27) == 5\nprint(solution(27))\nassert solution(42) == 6\nprint(solution(42))\nprint('The local tests are done. Something else?')"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\n\nprint('All tests passed.')"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('27') == '5'\nassert solution('42') == '6'\n\"\"\"\n\nfrom math import ceil, log2"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"5\"\nassert solution(\"42\") == \"6\"\n\nprint(\"all tests passed.\")"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\n\"\"\"\n\nfrom math import log2\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n2 2') == '0'\nassert solution('2 1\\n1 2') == '2'\nassert solution('2 2\\n2 1') == '1'\n\nassert solution('') == ''\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\\n\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\\n\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\\n\"\n\"\"\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3\\n2 6\\n0 4\\n3 3') == '1'\nassert solution('5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4') == '2'\nassert solution('3\\n4 5\\n1 2\\n9 20') == '0'\nassert solution('2\\n3 10\\n1 5\\n') == '7'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\\n\""
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"2\\n10 5\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"2\\n10 10\\n10 10\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n2 1 1 2 5''') == 'YES'\nassert solution('''3\n4 5 3''') == 'NO'\nassert solution('''2\n10 10''') == 'YES'"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"YES\"\nassert solution(\"1 1 1 1 1 1\") == \"YES\"\nassert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"2 1 1 2 5\") == \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 1 2 5') == 'YES'\nassert solution('3 4 5') == 'NO'\nassert solution('4 5 3') == 'YES'\n\"\"\""
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n5\n2 1 1 2 5\n''') == 'YES'\n\nassert solution('''\n3\n4 5 3\n''') == 'NO'\n\nassert solution('''\n2\n10 10\n''') == 'YES'\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == 233\nassert solution(\"a\") == 0\nassert solution(\"\") == 0\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('asdf') == 4\n\"\"\"\n\nimport collections\nimport sys"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 asdf\") == \"4\"\nassert solution(\"5 6 aaaa\") == \"15\"\nassert solution(\"5 7 aaaa\") == \"-1\"\n\n\"\"\"\nimport itertools\n\nfrom collections import Counter\nfrom functools import reduce\nfrom itertools import combinations\nfrom typing import List, Dict\n\nfrom utils import timer\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abaca\") == \"abaca\"\nassert solution(\"abac\") == \"abac\"\nassert solution(\"aabaca\") == \"abaca\"\nassert solution(\"aabac\") == \"abac\"\nassert solution(\"aabaca\") == \"abaca\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ajihiushda\") == 233\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('asdf') == 4\n\"\"\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\nasdf\") == \"4\"\nassert solution(\"5 6\\naaaaa\") == \"15\"\nassert solution(\"5 7\\naaaaa\") == \"-1\"\nassert solution(\"10 100\\najihiushda\") == \"233\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('asdf') == 4\nassert solution('aaaaa') == 15\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\nasdf') == '4'\nassert solution('5 6\\naaaaa') == '15'\nassert solution('5 7\\naaaaa') == '-1'\n\"\"\""
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"aaaaa\") == \"15\"\nassert solution(\"ajihiushda\") == \"233\"\n\n\"\"\"\nfrom itertools import combinations"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == '4'\nassert solution(\"3 2 2\") == '7'\nassert solution(\"1 100 1\") == '3'\nassert solution(\"30 20 10\") == '39'\n\"\"\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\n\"\"\"\n\na, b, c = [int(i) for i in input().split()]\n\nn_sunday = c // a\nn_monday = b // a\nn_tuesday = c // b\nn_wednesday = (c - n_tuesday * b) // a\nn_thursday = (c - n_wednesday * a) // b\nn_friday = (c - n_thursday * b) // a\nn_saturday = (c - n_friday * a) // b\n\nn_total = n_sunday + n_monday + n_tuesday + n_wednesday + n_thursday + n_friday + n_saturday\n\nprint(n_total)\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 1') == 4\nassert solution('1 100 1') == 3\n\"\"\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 100 1') == '4'\nassert solution('30 20 10') == '39'\nassert solution('100 1 1') == '4'\nassert solution('30 20 10') == '39'\n\n\"\"\"\n\na, b, c = map(int, input().split())\nl = [a, b, c]\n\nday = {'mon': {'fish': a}, 'thu': {'fish': b,'stake': c}, 'wed': {'stake': c}, 'fri': {'fish': b,'stake': c},'sat': {'fish': a,'stake': c},'sun': {'fish': a}}\n\nday_keys = day.keys()\nday_values = day.values()\nday_tuple = tuple(day_values)\n\nl.sort(reverse=True)"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\nprint('Passed')\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 1\\n') == '4'\nassert solution('3 2 2\\n') == '7'\nassert solution('1 100 1\\n') == '3'\n\n\"\"\"\nimport math\nimport itertools\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2 1 1\n''') == \"4\"\nassert solution('''\n3 2 2\n''') == \"7\"\nassert solution('''\n1 100 1\n''') == \"3\"\nassert solution('''\n30 20 10\n''') == \"39\""
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\n\na, b, c = map(int, stdin.split())\n\nd = (a - b - c)\nm = min(a, b, c)\n\ns = max(0, d // m)\n\nprint(s)"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n\") == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(s) == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n3 4\n1 2\n2 3\n1 2\n1 2\n1 2\n\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n3 4\n1 2\n2 3\n2 3\n1 2\n\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n3 4\n1 2\n2 3\n1 2\n\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n3 4\n1 2\n2 3\n1 2\n\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\") == \"YES\"\nassert solution(\"3 4\\n5 5\\n5 7\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\") == \"NO\"\n\"\"\"\n\nimport sys\n\nnum = int(sys.stdin.readline())\n\nfor _ in range(num):\n    n, m = map(int, sys.stdin.readline().split())\n    \n    tiles = []\n    for _ in range(n):\n        a, b = map(int, sys.stdin.readline().split())\n        tiles.append((a, b))\n    tiles.sort()\n\n    ans = 'NO'\n    cur_tile = tiles[0]\n    used = {}\n\n    for t in tiles[1:]:\n        if t[0] in used:\n            if used[t[0]] == t[1]:\n                ans = 'YES'\n                break\n            else:\n                ans = 'NO'\n                break\n        else:\n            used[cur_tile[0]] = cur_tile[1]\n            cur_tile = t\n\n    print(ans)\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 1\\n1 1') == 'YES'\nassert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2') == 'YES'\nassert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2') == 'YES'\nassert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2') == 'NO'\nassert solution('1 1\\n1 2\\n2 2') == 'NO'\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n') == 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\") == \"YES\"\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10000000)"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2') == 'YES'\nassert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2') == 'NO'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == \"0\"\nassert solution(\"1 2 3 7 8 9 10\") == \"1\"\nassert solution(\"1 2 3 4 7 8 9 10\") == \"1\"\n\"\"\"\n\nfrom typing import List, Dict\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == '0'\nassert solution(\"5\") == '1'\nassert solution(\"6\") == '1'\n\"\"\""
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n\n\n\n-----"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"3\") == \"0\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('1\\n2\\n') == '0'\nassert solution('1\\n2\\n3\\n') == '0'\nassert solution('1\\n2\\n3\\n4\\n') == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('4') == 0\nassert solution('1 2 3 4') == 1\nassert solution('1 2 3 4 5') == 1\nassert solution('1 2 3 4 5 6') == 1\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"3\") == \"0\"\n\"\"\"\n\nfrom typing import List, Tuple, Set\nimport sys\n\nN: int = int(sys.stdin.readline())\n\nA: List[int] = [int(sys.stdin.readline()) for _ in range(N)]\n\nA_sum: int = sum(A)\nB_sum: int = 0\nfor i in range(N - 1):\n    if i % 2 == 0:\n        B_sum += A[i]\n    else:\n        A_sum -= A[i]\n\nprint(abs(A_sum - B_sum))\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '1'\n\"\"\""
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"(()))()\") == 5\nassert solution(\"(()()))()\") == 4\nassert solution(\"((((()))()()))\") == 5\nassert solution(\"((((()))()()))\") == 5\nassert solution(\"((((()))()())\") == 5\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\") == 0\nassert solution(\"()\") == 1\nassert solution(\"(((()))())\") == 4\nassert solution(\"((()))()\") == 5\nassert solution(\"(((((((((((((((((((((((((((((((((((())))))()))((((()))(\") == 2047 \n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"()))()\") == \"5\"\nassert solution(\"(()))()\") == \"4\"\nassert solution
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()))()\") == \"5\"\nassert solution(\"(()))()\") == \"4\"\nassert solution(\"(((()))())\") == \"0\"\nassert solution(\"((()))()()\") == \"4\"\nassert solution(\"(()(()))()\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"(()))()\") == 5\nassert solution(\"(((())))\") == 4\nassert solution(\"(((((((((())))))()()((((()(((((((((((((((((((((((())))((())))((())((())))((((())))((((()()()(()(((((((((((((((((((((((((())())((()(()((()(()((()())((())(()((()()((()())))((((((((((((((((()())))((())(()()(()((()())((()()((()()())((()())((())(((((()))(()()((()(()()((()()(((()((((()(((((())(()())(()(()()((()(((((((()(((()())((())))(()()()()(()((((()()()(((())))((())))(()()()((()((((((()()((((((()())((()())((())))(()(()()(()(((((()((()(((((()())))((()())((())))((()))(())()((()()(((((((((()()())((()())((((((((((((((((((((((((((((((()(((((()((()(((())((()(()()(())()((()()(()(()((()())(((())(((())))(()(((()))(()((()()()(()(((((((((((((((())((()()))(()(((((((((((((((((((()())((((((((((((((()))(()(()(((())((()(())()(())()(()(((((((((((((((((((((())))(()()(()(()((()()(((((((((((((((((((()(((()((()(((((((((((((((((()()))(())()(()(()(()(()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()()))\") == 4\nassert solution(\"(()()\") == 4\nassert solution(\"(()()\") == 0\nassert solution(\"(((()))\") == 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(((()))())\") == 4\nassert solution(\"(((((((((((((((((((((((((((((((((((((())))))))))))))))))))))))))))))))))))))))\") == 0"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()(()))()\") == 4\nassert solution(\"((((((((((((((((((()))))))))))))))))\")) == 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(((())))\") == \"4\"\nassert solution(\"(()())\") == \"2\"\nassert solution(\"()((()))\") == \"0\"\nassert solution(\"(()((()(()))(())))(()((()()((())((())))(())))(((((()()(((()((()(()()(((((())))))))))))))))((()(()(())))((()))())\") == \"8208\"\n\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n\n\n\"\"\"\n\nfrom tools import timing"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('705') == '1'\nassert solution('1241367') == '-1'\nassert solution('5071') == '4'\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5071') == '4'\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5071\") == 4\nassert solution(\"705\") == 1\n\n-------"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1234567\") == -1\nassert solution(\"1234\") == 1\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5071') == '4'\n\nassert solution('705') == '1'\n\nassert solution('1241367') == '-1'\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"705\") == 1\nassert solution(\"5071\") == 4\nassert solution(\"1241367\") == -1\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'a'\nassert solution('aab') == 'a'\nassert solution('abac') == 'a'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacbecfd\") == \"2\", \"String abacbecfd is not sorted in 2 swaps\"\nassert solution(\"abcde\") == \"1\", \"String abcde is not sorted in 1 swap\"\nassert solution(\"aaabbcbb\") == \"2\", \"String aaabbcbb is not sorted in 2 swaps\"\nassert solution(\"aabbcbb\") == \"2\", \"String aabbcbb is not sorted in 2 swaps\"\nassert solution(\"abcd\") == \"1\", \"String abcd is not sorted in 1 swap\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abcdedc') == '1 1 1 1 1 2 3', 'First'\nassert solution('aaabbcbb') == '1 2 1 2 1 2 1 2 1', 'Second'\nassert solution('abcdefgh') == '1 2 1 2 1 2 1 1', 'Third'"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abacbecfd') == '2'\nassert solution('aaabbcbb') == '2'\nassert solution('abcdedc') == '3'\nassert solution('abcde') == '1'"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcd\") == \"1 1 2 1 1\"\n\"\"\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcdedc') == '1 2 1 2 1 2 1 1'\nassert solution('aaabbcbb') == '1 2 1 2 1 2 1 1'\nassert solution('abcde') == '1 1 1 1 1 2 3'\nassert solution('abcdef') == '1 1 1 1 1 2 2 3'\nassert solution('abcdefg') == '1 1 1 1 1 2 2 2 3'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abacbecfd') == '2'\nassert solution('aaabbcbb') == '2'\nassert solution('abcdedc') == '3'\nassert solution('abcde') == '1'\nassert solution('abc') == '1'\n\n-----Notes-----\n\n\n-----Source-----\n\nThis problem was asked by Twitter.\n\n'''"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abacbecfd') == '2'\nassert solution('aaabbcbb') == '2'\nassert solution('abcdedc') == '3'\nassert solution('abcde') == '1'\nassert solution('a') == '1'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('aabbc') == 'aabbc'\nassert solution('abacdedc') == 'aabbc'\nassert solution('abacbecfd') == 'aabbc'"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacbecfd') == '2'\nassert solution('aaabbcbb') == '2'\nassert solution('abcde') == '1'\nassert solution('abcdedc') == '3'\nassert solution('abbcde') == '1'\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'NO'\nassert solution('a') == 'YES'\nassert solution('ab') == 'NO'\nassert solution('abacaba') == 'YES'\nassert solution('qwerty') == 'YES'\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a\\naba\\nabacaba\\nba\\naba\\nabab') == 'YES\\na\\nba\\naba\\naba\\nabacaba\\n'\nassert solution('qwerty\\nqwerty\\nqwerty') == 'YES\\nqwerty\\nqwerty\\nqwerty'\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\naba\\nabacaba\\nba\\naba\\nabab\") == \"YES\\naba\\nba\\naba\\nabacaba\"\nassert solution(\"5\\na\\nabacaba\\nba\\naba\\nabab\") == \"NO\"\n\"\"\"\n\n\"\"\"\nn = int(input())\n\nlst = []\nfor _ in range(n):\n    lst.append(input())\n\ni = 0\nwhile i < n:\n    s = set()\n    for j in range(n):\n        s.add(lst[j][i:i+len(lst[j])])\n    if len(s)!= n:\n        print(\"NO\")\n        break\n    else:\n        print(\"YES\")\n        i += len(lst[0])\n        print(lst[0])\n        for j in range(1, n):\n            print(lst[j])\nelse:\n    print(\"YES\")\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a\\naba\\nabacaba\\nba\\naba\\nabab\\n') == 'YES\\na\\nba\\naba\\naba\\nabacaba\\n'\nassert solution('a\\nabacaba\\nba\\naba\\nabab\\n') == 'NO\\n'\n\"\"\"\n\n\nfrom collections import defaultdict\n\nimport sys"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\"\nassert solution(\"aba\") == \"YES\\na\\nba\\naba\"\nassert solution(\"abab\") == \"NO\"\nassert solution(\"qwerty\") == \"YES\\nq\\nqw\\nqwe\\nqwer\\nqwerty\"\n\"\"\""
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abba\") == \"NO\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"abab\") == \"NO\"\nassert solution(\"abcd\") == \"NO\"\nassert solution(\"abcde\") == \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aba') == 'YES'\nassert solution('abacaba') == 'YES'\nassert solution('abacab') == 'NO'\n\"\"\""
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"for\") == \"NO\"\nassert solution(\"for\") == \"YES\"\nassert solution(\"for\") == \"NO\"\nassert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"for\") == \"NO\"\nassert solution(\"aba\") == \"YES\"\nassert solution(\"a\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\") == \"0\"\nassert solution(\"6 3\") == \"1\"\nassert solution(\"6 4\") == \"3\"\nassert solution(\"6 5\") == \"5\"\nassert solution(\"6 6\") == \"6\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 100\\n12 34 55 43 21') == '5'\nassert solution('5 2\\n3 1 2 1 3') == '0'\nassert solution('5 2\\n3 1 2 1') == '5'"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\n\n\"\"\"\n\nimport sys\n\ninp = sys.stdin.read()\nn, k = map(int, inp.split())\narr = list(map(int, inp.split()))\n\nl, r = 0, len(arr) - 1\n\nwhile True:\n    if arr[l] >= k or arr[r] >= k:\n        break\n    else:\n        l += 1\n        r -= 1\nprint(len(arr) - max(l, r))\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 4') == '5'\nassert solution('5 2') == '0'\nassert solution('5 100') == '5'\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 4\\n4 2 3 1 5 1 6 4') == '5'\nassert solution('5 2\\n3 1 2 1 3') == '0'\nassert solution('5 100\\n12 34 55 43 21') == '5'\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 4\") == \"5\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"5 100\") == \"5\"\nassert solution(\"12 34 55 43 21\") == \"5\"\n\n\n-----Source-----\nhttps://www.codewars.com/kata/56ef6ac3ad9ed923780000a7/python\n\"\"\""
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\">5<\") == 0\nassert solution(\">2<\") == 1\n\"\"\"\n\nimport math\n\na, k = list(map(int, input().split()))\narr = list(map(int, input().split()))\narr.sort()\n\ncount = 0\n\nfor i in range(len(arr)):\n    if arr[i] < k:\n        count += 1\n    else:\n        break\n\nprint(count)"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected_result\n\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"12\"\n\"\"\"\n\nimport sys\nimport math\n\nA, B = list(map(int, sys.stdin.readline().split()))\n\nl = math.ceil(A/2) + math.ceil(B/2)\n\nprint(l*2)\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n\n\"\"\""
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2\\n3 4') == '10'\nassert solution('3 9\\n6 6') == '14'\nassert solution('7 9\\n8 7') == '14'\nassert solution('6 9\\n8 6') == '12'\nassert solution('7 9\\n8 7') == '14'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(4,4) == 12\nassert solution(3,9) == 14\nassert solution(9,3) == 14\nassert solution(3,6) == 12\nassert solution(506, 2708) == 3218"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 9\") == \"14\"\nassert solution(\"4 4\") == \"12\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 9\") == \"14\"\nassert solution(\"4 4\") == \"12\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4') == '12'\n\nassert solution('3 9') == '14'\n\nassert solution('9 3') == '14'\n\nassert solution('3 6') == '12'\n\nassert solution('506 2708') == '3218'"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcdee\") == \"eeabcd\"\nassert solution(\"abceff\") == \"ffaebcd\"\nassert solution(\"abcd12\") == \"12abcd\"\nassert solution(\"dcba\") == \"dcba\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacbecfd') == \"YES\\n001010101\"\nassert solution('aaabbcbb') == \"YES\\n01011011\"\nassert solution('abcdedc') == \"NO\\n\"\nassert solution('abcde') == \"YES\\n00000\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom queue import PriorityQueue\nimport sys"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abacbecfd') == 'NO'\nassert solution('aaabbcbb') == 'YES'\nassert solution('abcdedc') == 'NO'\nassert solution('abcde') == 'YES'\n\"\"\"\n\nimport collections\nimport itertools\nfrom typing import Dict, List\n\nfrom icontract import require, ensure, DBC\n\n\nclass Mapping(DBC):\n    \"\"\"Represent a mapping.\"\"\"\n\n    @require(lambda mapping: all(key in mapping for key in ['0', '1']))\n    @require(lambda mapping: all(value in ['0', '1'] for value in mapping.values()))\n    def __init__(self, mapping: Dict[str, str]) -> None:\n        \"\"\"Initialize with a mapping.\"\"\"\n        self.mapping = mapping\n\n    def __repr__(self) -> str:\n        \"\"\"Represent the mapping as a string.\"\"\"\n        return f'Mapping({self.mapping!r})'\n\n\nclass Colors(DBC):\n    \"\"\"Represent the color of a character.\"\"\"\n\n    @require(lambda mapping: all(key in mapping for key in ['0', '1']))\n    @require(lambda mapping: all(value in ['0', '1'] for value in mapping.values()))\n    def __init__(self, mapping: Dict[str, str]) -> None:\n        \"\"\"Initialize the colors.\"\"\"\n        self.coloring = mapping\n\n    def __repr__(self) -> str:\n        \"\"\"Represent the colors as a string.\"\"\"\n        return f'Colors({self.coloring!r})'\n\n\nclass Fmt(DBC):\n    \"\"\"Represent a fmt string.\"\"\"\n\n    @require(lambda fmt: all(char in '0' for char in fmt))\n    @require(lambda fmt: all(fmt[i] < fmt[i + 1] for i in range(len(fmt) - 1)))\n    def __init__(self, fmt: str) -> None:\n        \"\"\"Initialize with a fmt string.\"\"\"\n        self.fmt = fmt\n\n    def __repr__(self) -> str:\n        \"\"\"Represent the fmt string as a string.\"\"\"\n        return f'Fmt({self.fmt!r})'\n\n\nclass Fmts(DBC):\n    \"\"\"Represent all valid fmt strings.\"\"\"\n\n    def __init__(self, fmts: List[Fmt]) -> None:\n        \"\"\"Initialize with a list of all valid fmt strings.\"\"\"\n        self.fmts = fmts\n\n    def __repr__(self) -> str:\n        \"\"\"Represent the fmt strings as a string.\"\"\"\n        return f'Fmts({self.fmts!r})'\n\n\nclass Swaps(DBC):\n    \"\"\"Represent swaps made on a mapping.\"\"\"\n\n    @require(lambda mapping: all(key in mapping for key in ['0', '1']))\n    @require(lambda mapping: all(value in ['0', '1'] for value in mapping.values()))\n    def __init__(self, mapping: Dict[str, str], swaps: List[Tuple[str, str]]) -> None:\n        \"\"\"Initialize with a mapping and swaps.\"\"\"\n        self.mapping = mapping\n        self.swaps = swaps\n\n    def __repr__(self) -> str:\n        \"\"\"Represent the swaps as a string.\"\"\"\n        return f'Swaps({self.mapping!r}, {self.swaps!r})'\n\n\nclass Mappings(DBC):\n    \"\"\"Represent all mappings from a string to a color.\"\"\"\n\n    @require(lambda string: all(char in string for char in 'ab'))\n    @require(lambda string: len(string) == len(set(string)))\n    def __init__(self, string: str) -> None:\n        \"\"\"Initialize with a string.\"\"\"\n        self.string = string\n\n    def __repr__(self) -> str:\n        \"\"\"Represent the mapping as a string.\"\"\"\n        return f'Mappings({self.string!r})'\n\n\nclass Solution:\n    \"\"\"Solve the problem.\"\"\"\n\n    @require(lambda string: len(string) > 1)\n    @require(lambda string: all(char in string for char in 'ab'))\n    @require(lambda string: len(string) == len(set(string)))\n    def solve(self, string: str) -> bool:\n        \"\"\"Solve.\"\"\"\n        return self.__help(string)\n\n    @require(lambda mappings: all(mappings[i]!= mappings[j] for i, j in itertools.combinations(mappings, 2)))\n    def __help(self, mappings: Mappings) -> bool:\n        \"\"\"Evaluate the string.\"\"\"\n\n        coloring = dict()  # type: Dict[str, str]\n        for char in mappings.string:\n            coloring[char] = '1' if char in 'ab' else '0'\n\n        mapping = Mapping(coloring)\n\n        swaps = list()  # type: List[Tuple[str, str]]\n        for old, new in itertools.combinations(coloring, 2):\n            if coloring[old]!= coloring[new]:\n                swaps.append((old, new))\n                coloring[old] = coloring[new]\n                coloring[new] = '1' if coloring[new] == '0' else '0'\n\n        mapping = Mapping(coloring)\n        return Swaps(mapping, swaps).can_be_sorted()\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abacbecfd') == \"YES\\n001010101\"\nassert solution('aaabbcbb') == \"YES\\n01011011\"\nassert solution('abcdedc') == \"NO\"\nassert solution('abcde') == \"YES\\n00000\"\nassert solution('aabbbcccd') == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abacbecfd') == 'YES\\n001010101'\nassert solution('aaabbcbb') == 'YES\\n01011011'\nassert solution('abcdedc') == 'NO'\nassert solution('abcde') == 'YES\\n00000'"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abacbecfd') == 'YES\\n001010101'\nassert solution('aaabbcbb') == 'YES\\n01011011'\nassert solution('abcde') == 'YES\\n00000'\nassert solution('abc') == 'NO'\n\"\"\"\n\nn = int(input())\ns = input()"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcd\") == \"NO\"\nassert solution(\"abcde\") == \"YES\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"YES\"\nassert solution(\"abcd\") == \"NO\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"YES\""
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcdedc\") == \"YES\"\nassert solution(\"abacbecfd\") == \"YES\"\nassert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"aabbcd\") == \"NO\"\nassert solution(\"abcd\") == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcd\") == \"YES\\n101\"\nassert solution(\"abce\") == \"YES\\n100\"\nassert solution(\"abcd\") == \"NO\"\nassert solution(\"abcde\") == \"YES\\n100\"\n\n\"\"\"\n\ns = input()\nn = len(s)\ns = list(s)"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"25\"\nprint(\"Test 1: OK\")\n\n\"\"\"\nimport math"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n') == '25'\n\"\"\"\n\nimport sys\n\ndata = list(map(int, sys.stdin.readlines()))\nprice, tax = data[0] - 1, data[1]"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2') == 25\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"2 2\"\n) == 25\n\"\"\"\n\nimport math\n\nA, B = input().split(' ')\nA, B = int(A), int(B)\n\nmin_c, max_c = math.floor(A * 0.08), math.floor(A * 0.1)\nprice = (A - min_c) * B"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"25\"\n\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"2 5\") == \"25\"\nassert solution(\"5 10\") == \"25\"\nassert solution(\"10 20\") == \"25\"\nassert solution(\"5 10\") == \"25\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"100 100\") == \"-1\"\nassert solution(\"100 101\") == \"102\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2') == '25'\nassert solution('2 1') == '-1'\nassert solution('1 1') == '-1'\nassert solution('1 10') == '-1'\nassert solution('10 10') == '-1'\n\n\"\"\"\n\na, b = map(int, stdin.split())\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n2') == '25'\nassert solution('2 1\\n2') == '-1'\n\"\"\"\nfrom math import floor"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == 25\nassert solution(\"4 3\") == -1\nassert solution(\"2 2\") == 25\nassert solution(\"4 3\") == -1\nassert solution(\"1 1\") == -1\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"26 6\\n\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\\n\") == \"NO\\n\"\nassert solution(\"1 1\\n\") == \"YES\\n1\"\nassert solution(\"9 4\\n\") == \"NO\\n\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'8 3'\n) == 'YES\\n1 2 4 5 6 8'\nassert solution(\n'1 1'\n) == 'YES\\n1'\nassert solution(\n'1 4'\n) == 'NO'\nassert solution(\n'2 2'\n) == 'NO'\nassert solution(\n'8 10'\n) == 'NO'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\") == \"NO\\n\"\nassert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"9 4\") == \"NO\\n\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\") == \"NO\"\nassert solution(\"1 1\") == \"YES\\n1\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('26 6') == 'YES'\nassert solution('8 3') == 'NO'\nassert solution('1 1') == 'YES'\nassert solution('9 4') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"1 2 4\") == \"YES\\n1 2 4\"\nassert solution(\"1 2 4 6\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('26 6') == 'YES\\n1 2 4 5 6 8'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\") == \"NO\\n\"\nassert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"9 4\") == \"NO\\n\"\nassert solution(\"8 2\") == \"YES\\n1 2 4 6\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2\\n3 4\\n5 6\\n7 8') == 'YES\\n1 2 4 5 6\\n7 8'\nassert solution('4 2\\n1 3\\n2 4\\n2 3\\n1 2') == 'NO'\nassert solution('5 2\\n2 4\\n3 5\\n4 5\\n5 6') == 'NO'\nassert solution('8 3\\n1 2\\n4 6\\n5 7\\n3 4\\n2 5\\n1 3\\n6 7\\n7 8') == 'YES\\n1 3\\n5 7\\n6 7\\n7 8'\n\nimport json\nimport pytest\nimport random\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3\\n\") == \"YES\\n1 2 4\"\nassert solution(\"5 2\\n\") == \"YES\\n1 3\"\nassert solution(\"1 1\\n\") == \"YES\\n1\"\nassert solution(\"10 9\\n\") == \"NO\"\nassert solution(\"3 4\\n\") == \"NO\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == 3\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\\n\") == '3'\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\\n\") == '5'\n\"\"\"\n\n\"\"\"\n2\n1 2\n1 -1\n\n\"\"\"\n\n\"\"\"\n2\n0 1\n1 2\n\n\"\"\""
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n300 -300\\n1 299\\n1 123') == '3'\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == '5'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1 2\\n') == '2'\nassert solution('1 2 3\\n') == '2'\nassert solution('1 2 3\\n4 5 6') == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == '2'\nassert solution('2 3\\n1 2\\n3 4') == '1'\nassert solution('2 3\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10') == '3'\nassert solution('2 3\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n11 12\\n13 14\\n15 16') == '4'"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 3\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == 5"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == '3'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 6\\n10 -2\\n8 -1') == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution('1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('4\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('1\\n10') == 'YES\\n10'\nassert solution('2\\n1 1') == 'NO'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(1000000)\n\nN = int(input())\nnumbers = [int(s) for s in input().split()]\n\nvalid = False"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"1\\n1\") == \"YES\\n1 1\"\n\n\"\"\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'NO'\n\nassert solution('4\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3\\n1 3 1\\n1 3 1'\n\nassert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\\n') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == \"YES\"\nassert solution(4) == \"YES\"\nassert solution(2) == \"NO\"\n\n\"\"\"\n\n\nfrom typing import List\n\nfrom utils.decorators import timer\n\n\n@timer\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == 'YES\\n1 3 1\\n3 1 3'\nassert solution(\"4\\n1 1 1 1 1 3 3 3 3\") == 'YES\\n1 3 1\\n3 1 3'\nassert solution(\"1\\n10\") == 'YES\\n10'\nassert solution(\"1\\n1\") == 'YES\\n1'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\n\"\"\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 10\\n10 0\\n10 -10\\n30 0') == 'YES'\nassert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 'YES'\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2') == 'YES'\nassert solution('3 5\\n4 -5\\n4 -2\\n1 3\\n') == 'YES'\n\"\"\"\n\nn, r = map(int, input().split())"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n3 4\n4 6\n10 -2\n8 -1\n\"\"\"\n) == 'YES'\n\nassert solution(\n\"\"\"\n3 5\n4 -5\n4 -2\n1 3\n\"\"\"\n) == 'YES'\n\nassert solution(\n\"\"\"\n4 4\n5 2\n5 -3\n2 1\n4 -2\n\"\"\"\n) == 'YES'\n\nassert solution(\n\"\"\"\n3 10\n10 0\n10 -10\n30 0\n\"\"\"\n) == 'NO'\n\nassert solution(\n\"\"\"\n4 4\n5 2\n5 -3\n2 1\n4 -2\n\"\"\"\n) == 'NO'"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\nassert solution(\"4 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == 'YES'\nassert solution('3 10\\n10 0\\n10 -10\\n30 0\\n') == 'NO'\nassert solution('3 4\\n4 6\\n10 -2\\n8 -1\\n') == 'YES'\n\"\"\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 2\\n1 2 1\\n\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n\"\"\"\n\nfrom typing import List, Tuple, Union\nimport sys\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3 2\\n1 2 1\\n\") == \"YES\\n0 1 0 2 2 0 3\\n\"\nassert solution(\"10 1 11\\n1\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1\\n\"\nassert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0\\n\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"4 3 2\\n2\\n1 2 1\") == \"YES\\n0 0 0 0 1 1 0 0 0\"\nassert solution(\"7 3 2\\n1 2 1\\n2\\n2\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\"\nassert solution(\"7 3 2\\n1 2 1\\n2\\n1 2\\n2\\n2\\n2\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\"\nassert solution(\"5 3 2\\n1 2\\n1 2\\n1 2\\n1 2\") == \"YES\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\\n0 0 0 0 1 1 0 0 0\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3 2\\n1 2 1\\n') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1\\n') == 'YES\\n0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2\\n') == 'YES\\n0 0 0 0 1 1 0 0 0 0'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\nassert solution(\"7 3 2\\n1 2 1\\n\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"7 3 2\\n2\\n\") == \"NO\"\nassert solution(\"7 3 2\\n1\\n\") == \"NO\"\nassert solution(\"7 3 2\\n4\\n\") == \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 2\\n1 2 1\\n\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\nassert solution(\"6 1 5\\n3\\n\") == \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3 \"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1 \"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0 \"\n\n\nassert solution(\"10 5 9\\n2\\n4\\n8\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\nassert solution(\"10 1 5\\n3\") == \"NO\"\nassert solution(\"10 1 5\\n7\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n\nprint(\"Successfully solved warmup-1\")"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"bbba\") == 3\nassert solution(\"bb\") == 0\nassert solution(\"a\") == 0\nassert solution(\"\") == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"test\") == 3, \"Test\"\n\nassert solution(\"asdf\") == 0, \"Asdf\"\n\n\"\"\"\n\ns1 = \"test\"\ns2 = \"tst\""
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 1\nassert solution(\"\") == 0\n\nassert solution(\"baaba\") == 2\nassert solution(\"ab\") == 0"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 1\nassert solution('abcde') == 0\nassert solution('asdfasdf') == 3\nassert solution('asdf') == 2\n\n\n---\npython [utility.py](./utility.py)\n\n### The only difference between easy and hard versions is the length of the string.\n\nYou are given a string $s$ and a string $t$, both consisting only of lowercase Latin letters. It is guaranteed that $t$ can be obtained from $s$ by removing some (possibly, zero) number of characters (not necessary contiguous) from $s$ without changing order of remaining characters (in other words, it is guaranteed that $t$ is a subsequence of $s$).\n\nFor example, the strings \"test\", \"tst\", \"tt\", \"et\" and \"\" are subsequences of the string \"test\". But the strings \"tset\", \"se\", \"contest\" are not subsequences of the string \"test\".\n\nYou want to remove some substring (contiguous subsequence) from $s$ of maximum possible length such that after removing this substring $t$ will remain a subsequence of $s$.\n\nIf you want to remove the substring $s[l;r]$ then the string $s$ will be transformed to $s_1 s_2 \\dots s_{l-1} s_{r+1} s_{r+2} \\dots s_{|s|-1} s_{|s|}$ (where $|s|$ is the length of $s$).\n\nYour task is to find the maximum possible length of the substring you can remove so that $t$ is still a subsequence of $s$.\n\n\n-----Input-----\n\nThe first line of the input contains one string $s$ consisting of at least $1$ and at most $200$ lowercase Latin letters.\n\nThe second line of the input contains one string $t$ consisting of at least $1$ and at most $200$ lowercase Latin letters.\n\nIt is guaranteed that $t$ is a subsequence of $s$.\n\n\n-----Output-----\n\nPrint one integer \u2014 the maximum possible length of the substring you can remove so that $t$ is still a subsequence of $s$.\n\n\n-----Examples-----\nInput\nbbaba\nbb\n\nOutput\n3\n\nInput\nbaaba\nab\n\nOutput\n2\n\nInput\nabcde\nabcde\n\nOutput\n0\n\nInput\nasdfasdf\nfasd\n\nOutput\n3\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcd\") == 1\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == 26\nassert solution(\"bca\") == 1\nassert solution(\"b\") == 0\nassert solution(\"\") == 0\n\"\"\"\n\ns, t = input().strip(), input().strip()\ncnt = 0\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        if len(s) - i < len(t):\n            break\n        for j in range(len(t)):\n            if t[j] == s[i+j]:\n                if j == len(t) - 1:\n                    cnt += 1\n                continue\n            else:\n                break\nprint(len(s) - cnt)\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 1\nassert solution(\"tt\") == 0\nassert solution(\"et\") == 1\nassert solution(\"test\") == 3\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('test') == 0\nassert solution('abcde') == 0\nassert solution('baaba') == 3\nassert solution('bb') == 3\n\nprint('Test passed\\n')\n\n\"\"\""
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"tst\") == 0\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 2\nassert solution(\"asdf\") == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('bbaba') == '3'\nassert solution('baaba') == '2'\nassert solution('abcde') == '0'\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('test') == 5\n\"\"\"\n\ns, t = [input() for _ in range(2)]\n\nl = 0\nr = 0"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1.200000) == \"3 2\"\nassert solution(2.572479) == \"10 3\"\nassert solution(4.024922) == \"9 9\""
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1.1') == '3 2'\nassert solution('1.2') == '3 2'\nassert solution('1.3') == '3 2'\nassert solution('1.4') == '3 2'\nassert solution('1.5') == '3 2'\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n\n\"\"\""
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('.1') == '1 1'\nassert solution('.8') == '1 2'\nassert solution('.7') == '2 1'\nassert solution('.3') == '2 2'\nassert solution('.2') == '3 1'\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\nimport math"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"8 5 5\") == \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1 3\\n') == 'NO'\nassert solution('6 3 3\\n') == 'YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6'\nassert solution('6 2 3\\n') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7'\nassert solution('8 5 3\\n') == 'YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 3\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\\n\"\nassert solution(\"6 2 3\") == \"NO\\n\"\nassert solution(\"8 5 3\") == \"YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"8 10 3\") == \"NO\""
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 5 3\") == \"YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\"\nassert solution(\"6 3 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 4 3') == 'YES'\nassert solution('6 2 3') == 'NO'\nassert solution('8 5 3') == 'YES'\nassert solution('1 1 1') == 'YES'\nassert solution('10 5 3') == 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 3 3\\n') == 'YES'\nassert solution('6 2 3\\n') == 'NO'\nassert solution('8 5 3\\n') == 'YES'\nassert solution('10 4 3\\n') == 'YES'\n\nimport sys\n\nfor line in sys.stdin:\n    stdin = line.strip()\n    if stdin == '':\n        break\n    n, d, k = map(int, stdin.split())\n    if d == 0:\n        if k == 0:\n            print('YES')\n            for _ in range(n - 1):\n                print(n, n - 1)\n        else:\n            print('NO')\n    else:\n        print('YES')\n        for i in range(1, n):\n            print(i, i + (d - 1))"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 3\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\nassert solution(\"10 4 3\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"6 3 3\"\n) == \"YES\"\n\nassert solution(\n    \"6 2 3\"\n) == \"NO\"\n\nassert solution(\n    \"10 4 3\"\n) == \"YES\"\n\nassert solution(\n    \"8 5 3\"\n) == \"YES\"\n\nassert solution(\n    \"1 2 3\"\n) == \"NO\""
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 3\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 2') == '101100'\nassert solution('5 3 6') == '01010100'\n\n\"\"\"\n\n\nfrom itertools import product"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"101010\") == \"110010\"\n\"\"\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"01010\") == \"1100\"\nassert solution(\"111001\") == \"101100\"\nassert solution(\"1101010\") == \"110010\"\nassert solution(\"10101010\") == \"100110\"\nassert solution(\"011101010\") == \"1101101010\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\nassert solution(\"5 5 2\") == \"01010110\"\nassert solution(\"5 6 5\") == \"010101100\"\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1 3\") == \"101100\"\nassert solution(\"1 1 1\") == \"110010\"\n\"\"\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"01010\") == \"110010\"\nassert solution(\"111001\") == \"101100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10 3\") == \"101010\"\nassert solution(\"7 7 3\") == \"0111010\"\nassert solution
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 6') == '101100'\nassert solution('2 2 1') == '1100'\nassert solution('5 3 6') == '01010100'"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1\") == \"1100\"\nassert solution(\"2 2 1\") == \"0011\"\nassert solution(\"3 2 1\") == \"101100\"\nassert solution(\"5 2 1\") == \"01010100\"\n\nprint(\"PASSED\")\n\n'''"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11 1 0') == '1010'\nassert solution('1 1 0') == '101'\nassert solution('11 1 1') == '110'\nassert solution('1 1 1') == '1010'\n\nassert solution('1 1 1') == '1010'\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"cb\"\nassert solution(\"bb\") == \"bc\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aa\") == \"YES\"\nassert solution(\"bc\") == \"YES\"\nassert solution(\"ab\") == \"YES\"\n\nassert solution(\"cba\") == \"YES\"\nassert solution(\"abc\") == \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ab\") == \"acb\"\nassert solution(\"ca\") == \"cc\"\nassert solution(\"bb\") == \"cbc\"\nassert solution(\"ba\") == \"cbb\"\n\"\"\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ac\") == \"bc\"\nassert solution(\"bb\") == \"bc\"\nassert solution(\"ca\") == \"cb\"\nassert solution(\"cb\") == \"cac\"\n\"\"\"\n\nimport sys\n\na = int(sys.stdin.readline())\ns = sys.stdin.readline().strip()\nt = sys.stdin.readline().strip()\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1\na\na\n''') == 'YES\\naa'\nassert solution('''1\nc\nb\n''') == 'YES\\ncc'\nassert solution('''2\na\na\n''') == 'NO'\nassert solution('''1\nc\nb\n''') == 'YES\\ncc'\nassert solution('''2\nc\nb\n''') == 'NO'\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bb\"\nassert solution(\"bb\") == \"cba\"\nassert solution(\"cb\") == \"cba\"\nassert solution(\"bc\") == \"cba\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"cbac\"\nassert solution(\"bb\") == \"cbac\"\n\nassert solution(\"aa\") == \"ac\"\nassert solution(\"bc\") == \"cbac\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"bc\") == \"bc\"\nassert solution(\"ca\") == \"cc\"\n\nassert solution(\"aa\") == \"cac\"\nassert solution(\"bc\") == \"bc\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ab') == 'ac'\nassert solution('ca') == 'bb'\n\"\"\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aa\") == \"YES\"\nassert solution(\"bc\") == \"YES\"\nassert solution(\"ca\") == \"YES\"\nassert solution(\"ab\") == \"YES\"\nassert solution(\"ac\") == \"YES\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 2') == '3 1 2'\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1 2') == '3 1 2'\nassert solution('5 1 1 1') == '5 1 2 3 4'\nassert solution('4 1 2') == '4 2 1 3'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n-2 1\") == \"3 1 2\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4\\n-1 2 2\") == \"-1\"\nassert solution(\"5\\n4 2 3 1\") == \"-1\"\nassert solution(\"5\\n1 2 3 4\") == \"1 2 3 4 5\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n-2 1\") == \"3 1 2\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n-2 1\") == \"3 1 2\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4\\n-1 2 2\") == \"-1\"\nprint(\"Tests passed.\")"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 2') == '3 1 2'\nassert solution('5 1 1 1') == '1 2 3 4 5'\nassert solution('4 1 2') == '1 2 3 4'\nassert solution('3 1 -1') == '3 1 -1'\nassert solution('3 1 -1') == '3 1 -1'\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 2\") == \"3 1 2\"\nassert solution(\"5 1 2\") == \"3 1 2\"\nassert solution(\"5 -1 2\") == \"4 3 1\"\nassert solution(\"5 -1 1 1\") == \"4 2 3\"\nassert solution(\"5 -1 2 1\") == \"4 3 1\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 -2 1\") == \"3 1 2\"\nassert solution(\"5 -1 1\") == \"1 2 3 4 5\""
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"2 1\"\nassert solution(\"2 2\") == \"3 1\"\nassert solution(\"1 2\") == \"2 1\"\nassert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"1 1 1\") == \"1 2 3\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n-2 1\") == \"3 1 2\"\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nfor i in range(n - 1):\n    if a[i] == -1:\n        continue\n    if a[i + 1] == a[i] + 1:\n        print(*[i + 1 for i in range(n) if a[i] == i])\n        break\nelse:\n    print(-1)\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('3 2 3') == '1'\nassert solution('5 2 2 3 3') == '2'\nassert solution('5 2 2 3 3 5') == '2'\nassert solution('5 2 2 3 3 5 7') == '3'\n\n----"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2') == '1'\nassert solution('2\\n2') == '1'\nassert solution('2\\n1') == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\""
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 2 2 3 3') == '2'\nassert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\n\"\"\"\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\n\"\"\""
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5) == 2\nprint('Test pass.')\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == '5'\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == '5'\nassert solution('5') == '0'\n\"\"\"\nimport math\n\nn = int(input())"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n') == '3'\nassert solution('10\\n') == '5'\n\"\"\"\n\nimport math\nimport sys\nimport os\n\nDEBUG = False\ndata_dir = '/home/kunal_2010/code/python/DS_Stacks_Queues/stacks/data/'"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '5'\nassert solution('1') == '0'\n\n\"\"\"\n\nfrom itertools import product\nimport unittest\n\n\nclass Solution:\n    def moves_to_square(self, n: int) -> int:\n        square = self.get_square(n)\n        return sum([abs(n - v) for v in square])\n\n    def get_square(self, n: int) -> list:\n        max_value = n ** 0.5\n        result = [v * v for v in range(1, max_value + 1)]\n        return result + [v * v for v in range(max_value + 1, n + 1)]\n\n\nclass SolutionTest(unittest.TestCase):\n    def test_solution(self):\n        assert Solution().moves_to_square(10) == 5\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == '5'\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == '5'\nassert solution('20') == '10'\nassert solution('30') == '15'\nassert solution('40') == '20'\nassert solution('50') == '25'\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '5'\nassert solution('5') == '2'\n\"\"\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('15\\n5 5 5\\n5 5 5') == '0 15'\nassert solution('3\\n0 0 3\\n3 0 0') == '3 3'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"0 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\"\"\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"3 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\"\"\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1\") == \"0 1\"\nassert solution(\"1 1 0\") == \"1 1\"\nassert solution(\"15 5 5\") == \"0 15\"\nassert solution(\"5 5 5\") == \"0 15\"\nassert solution(\"3 0 3\") == \"3 3\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"0 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 1 1\\n1 1 0\") == '0 1'\nassert solution(\"15 5 5\\n5 5 5\") == '0 15'\nassert solution(\"3 0 3\\n0 0 0\") == '3 3'\nassert solution(\"686\\n479 178 29\\n11 145 530\") == '22 334'\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == '0 1'\nassert solution(\"15\\n5 5 5\\n5 5 5\") == '0 15'\nassert solution(\"686\\n479 178 29\\n11 145 530\") == '22 334'\n\"\"\"\n\nn = int(input())\na = [0] * 3\nb = [0] * 3\na[0], a[1], a[2] = map(int, input().split())\nb[0], b[1], b[2] = map(int, input().split())\n\nalice_rounds_min = float('inf')\nalice_rounds_max = -1\n\nbob_rounds_min = float('inf')\nbob_rounds_max = -1\n\nfor i in range(n):\n    if i % 2 == 0:\n        alice_rounds_max = max(alice_rounds_max, a[i % 3])\n        bob_rounds_min = min(bob_rounds_min, b[i % 3])\n    else:\n        alice_rounds_min = min(alice_rounds_min, a[i % 3])\n        bob_rounds_max = max(bob_rounds_max, b[i % 3])\n\nprint(max(alice_rounds_max - 1, 0), max(alice_rounds_min, bob_rounds_max + 1))"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == solution(str(input()))\n\n-----Testcases-----\n\nPrecondition:\n\n1 <= n <= 10^9\n\n0 <= a_i <= n\n\n0 <= b_i <= n\n\n0 <= a_i + b_i <= n\n\n>>> solution(\"2\\n0 0 1\\n1 1 0\")\n'0 1'\n>>> solution(\"3\\n0 0 3\\n3 0 0\")\n'3 3'\n>>> solution(\"686\\n479 178 29\\n11 145 530\")\n'22 334'\n>>> solution(\"319\\n10 53 256\\n182 103 34\")\n'119 226'\n>>> solution(\"15\\n5 5 5\\n5 5 5\")\n'0 15'\n>>> solution(\"2\\n1 1 0\")\n'0 1'\n>>> solution(\"3\\n0 0 3\")\n'3 3'\n>>> solution(\"1\\n0 0 1\")\n'0 1'\n>>> solution(\"4\\n0 0 4\\n4 0 0\")\n'0 4'\n>>> solution(\"5\\n0 0 5\\n5 0 0\")\n'0 5'\n>>> solution(\"1\\n0 0 1\\n0 0 0\")\n'0 1'\n>>> solution(\"2\\n0 0 1\\n1 1 0\")\n'0 1'\n>>> solution(\"1\\n1 1 0\")\n'0 1'\n>>> solution(\"3\\n0 0 3\\n1 0 0\")\n'1 2'\n>>> solution(\"4\\n0 0 4\\n4 0 0\")\n'0 4'\n>>> solution(\"5\\n0 0 5\\n5 0 0\")\n'0 5'\n>>> solution(\"1\\n1 1 0\")\n'1 2'\n>>> solution(\"1\\n0 1 1\")\n'0 1'\n>>> solution(\"2\\n1 0 1\\n0 1 1\")\n'0 1'\n>>> solution(\"3\\n1 1 0\\n0 0 3\")\n'1 2'\n>>> solution(\"5\\n1 1 0\\n1 1 0\")\n'0 1'\n>>> solution(\"1\\n1 1 0\")\n'1 2'\n>>> solution(\"3\\n2 2 0\")\n'0 3'\n>>> solution(\"2\\n1 1 0\\n1 0 1\")\n'1 1'\n>>> solution(\"1\\n0 1 1\")\n'0 1'\n>>> solution(\"1\\n1 0 1\")\n'0 1'\n>>> solution(\"1\\n1 1 0\")\n'1 2'\n>>> solution(\"1\\n0 1 1\")\n'0 1'\n>>> solution(\"3\\n0 1 1\\n1 1 0\")\n'1 2'\n>>> solution(\"1\\n0 0 1\\n0 0 0\")\n'0 1'\n>>> solution(\"2\\n1 0 1\\n1 1 0\")\n'1 1'\n>>> solution(\"1\\n1 0 1\")\n'1 1'\n>>> solution(\"3\\n0 0 3\\n1 1 0\")\n'1 1'\n>>> solution(\"3\\n0 0 3\\n1 1 0\")\n'1 1'\n>>> solution(\"1\\n1 1 0\")\n'1 1'\n>>> solution(\"1\\n0 1 1\")\n'0 1'\n>>> solution(\"3\\n1 1 0\\n0 0 3\")\n'1 1'\n>>> solution(\"2\\n0 1 1\\n1 1 0\")\n'1 1'\n>>> solution(\"2\\n1 0 1\\n0 0 3\")\n'1 1'\n>>> solution(\"2\\n1 1 0\\n0 0 3\")\n'1 1'\n>>> solution(\"2\\n1 0 1\\n0 0 3\")\n'1 1'\n>>> solution(\"1\\n1 0 1\")\n'1 1'\n>>> solution(\"2\\n0 0 1\\n1 1 0\")\n'0 1'\n>>> solution(\"2\\n0 0 1\\n1 1 0\")\n'0 1'\n>>> solution(\"2\\n0 0 1\\n1 1 0\")\n'0 1'\n>>> solution(\"2\\n0 0 1\\n1 1 0\")\n'0 1'\n>>> solution(\"2\\n1 0 1\\n0 0 3\")\n'0 3'\n>>> solution(\"2\\n1 0 1\\n1 0 3\")\n'0 3'\n>>> solution(\"2\\n1 0 1\\n0 0 3\")\n'0 3'\n>>> solution(\"2\\n0 0 1\\n1 0 3\")\n'0 3'\n>>> solution(\"2\\n1 1 0\\n1 1 0\")\n'1 1'\n>>> solution(\"3\\n1 1 0\\n1 1 0\")\n'0 1'\n>>> solution(\"2\\n1 0 1\\n1 1 0\")\n'1 1'\n>>> solution(\"2\\n1 0 1\\n1 0 3\")\n'0 3'\n>>> solution(\"2\\n1 0 1\\n1 0 3\")\n'1 3'\n>>> solution(\"2\\n1 0 1\\n1 0 3\")\n'0 3'\n>>> solution(\"2\\n0 0 1\\n1 0 3\")\n'0 3'\n>>> solution(\"2\\n0 0 1\\n1 0 3\")\n'0 3'\n>>> solution(\"2\\n1 0 1\\n0 0 3\")\n'0 3'\n>>> solution(\"2\\n0 1 1\\n1 0 3\")\n'0 3'\n>>> solution(\"2\\n0 1 1\\n0 0 3\")\n'"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"15\\n5 5 5\\n5 5 5\") == \"0 15\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\nassert solution(\"319\\n10 53 256\\n182 103 34\") == \"119 226\"\n\n\n\"\"\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 1') == '1 0'\n\"\"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"4\\n1 1\") == \"1\\n1 1\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 2 2 1 5 3\\n') == '3'\n\nsolution('7 1 2 2 1 5 3\\n') == '3'\n\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5\\n') == '2'\n\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5\\n') == '2'\n\nassert solution('7 1 2 2 1 5 3\\n') == '3'\n\nassert solution('4 1 2 2 1 5 3\\n') == '3'"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == \"2\\n3 4\\n1 1\\n2 2\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"4\\n4 4\\n1 1\"\nassert solution(\"4\\n1 1 1\\n\") == \"2\\n3 3\\n1 1\"\n\n\"\"\"\n\nimport sys\n\nINT_MAX = sys.maxsize\n\n\nclass LinkedList:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n    def __repr__(self):\n        result = [self.val]\n        node = self.next\n        while node:\n            result.append(node.val)\n            node = node.next\n        return str(result)\n\n\nclass HashTable:\n    def __init__(self, size=101):\n        self.size = size\n        self.slots = [None] * self.size\n        self.data = [None] * self.size\n\n    def put(self, key, data):\n        hash_value = self.hash_function(key, len(self.slots))\n\n        if self.slots[hash_value] is None:\n            self.slots[hash_value] = key\n            self.data[hash_value] = data\n        else:\n            if self.slots[hash_value] == key:\n                self.data[hash_value] = data  # replace\n            else:\n                next_slot = self.rehash(hash_value, len(self.slots))\n                while self.slots[next_slot] is not None and self.slots[next_slot]!= key:\n                    next_slot = self.rehash(next_slot, len(self.slots))\n\n                if self.slots[next_slot] is None:\n                    self.slots[next_slot] = key\n                    self.data[next_slot] = data\n                else:\n                    self.data[next_slot] = data  # replace\n\n    @staticmethod\n    def hash_function(key, size):\n        return key % size\n\n    @staticmethod\n    def rehash(old_hash, size):\n        return (old_hash + 1) % size\n\n    def get(self, key):\n        start_slot = self.hash_function(key, len(self.slots))\n\n        data = None\n        stop = False\n        found = False\n        position = start_slot\n        while self.slots[position] is not None and not found and not stop:\n            if self.slots[position] == key:\n                found = True\n                data = self.data[position]\n            else:\n                position = self.rehash(position, len(self.slots))\n                if position == start_slot:\n                    stop = True\n        return data\n\n    def __getitem__(self, key):\n        return self.get(key)\n\n    def __setitem__(self, key, data):\n        self.put(key, data)\n\n\nclass Solution:\n    def __init__(self):\n        self.result = []\n\n    def get_result(self, blocks):\n        blocks = sorted(blocks)\n        blocks = list(map(str, blocks))\n        print(' '.join(blocks))\n\n    def get_blocks(self, n):\n        blocks = []\n        for i in range(1, n + 1):\n            blocks.append(i)\n        return blocks\n\n    def find_max_blocks(self, a):\n        n = len(a)\n        if n == 1:\n            return 1\n        blocks = []\n        for i in range(n):\n            blocks.append(a[i] + 1)\n        max_blocks = 1\n        for i in range(1, n):\n            if blocks[i] > blocks[i - 1]:\n                max_blocks += 1\n        return max_blocks\n\n    def find_max_sets(self, a, max_blocks):\n        n = len(a)\n        if n == 1:\n            return max_blocks\n        if n == 2:\n            return max_blocks + 1\n        max_sets = 1\n        for i in range(1, n - 1):\n            if a[i] > a[i - 1] and a[i] > a[i + 1]:\n                max_sets += 1\n        return max_sets\n\n    def solve(self, a):\n        n = len(a)\n        max_blocks = self.find_max_blocks(a)\n        max_sets = self.find_max_sets(a, max_blocks)\n        return max_sets\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3\\n7 7'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4'\nassert solution('4\\n1 1 1 1') == '4\\n4 4'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4'\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n1 1 1 1\n''') == '4\\n4\\n1 1\\n2 2\\n3 3'\n\nassert solution('''7\n4 1 2 2 1 5 3\n''') == '3\\n7 7\\n2 3\\n4 5'\n\nassert solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '2\\n3 4\\n1 1\\n2 2\\n3 3'\n\nassert solution('''4\n1 1 1 1\n''') == '4\\n4\\n1 1\\n2 2\\n3 3'\n\nassert solution('''7\n4 1 2 2 1 5 3\n''') == '3\\n7 7\\n2 3\\n4 5'"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('7 4 1 2 2 1 5 3') == '3'"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\n\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == '3\\n7 7'\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == '2\\n3 4'\nassert solution(\"4\\n1 1 1 1\") == '4\\n4 4'\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == '2\\n3 4'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nres = 0\nleft = []\nright = []\n\nfor i in range(n):\n    left.append(a[i])\n    right.append(a[-(i+1)])\n\nleft.sort()\nright.sort()\n\nres = 0\nfor i in range(n):\n    for j in range(n):\n        if i!= j:\n            if left[i] + right[j] > res:\n                res = left[i] + right[j]\n\nprint(res)"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 3\") == \"NO\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\") == \"YES\"\nassert solution(\"3 3 3 4 4 4 4 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 1 2 3\") == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 1 2 3\") == \"NO\"\nassert solution(\"1 1 1\") == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\nassert solution(\"5\\n4 2 3 5 1\") == \"YES\"\n\nprint(solution(input()))\n\"\"\"\n\nn = int(input())\narray = list(map(int, input().split()))"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2') == 'NO'\nassert solution('1 2 3') == 'YES'\n\nfrom collections import deque\nimport copy\n\nclass Stack:\n    def __init__(self, maxsize=None):\n        self.maxsize = maxsize\n        self.items = deque()\n    def push(self, x):\n        if not self.maxsize or self.size() < self.maxsize:\n            self.items.append(x)\n        else:\n            raise ValueError\n    def pop(self):\n        if self.items:\n            return self.items.pop()\n        else:\n            raise ValueError\n    def size(self):\n        return len(self.items)\n    def is_empty(self):\n        return not self.items\n    def peek(self):\n        if self.items:\n            return self.items[-1]\n        raise ValueError\n    def __repr__(self):\n        return \"Stack({!r})\".format(list(self.items))\n    def __str__(self):\n        return \"Stack({})\".format(list(self.items))\n    def __len__(self):\n        return self.size()"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"3 1 2\") == \"NO\"\nprint(solution(stdin))\n\n-----"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 2') == 'NO'\nassert solution('3 1 2 3') == 'NO'\nassert solution('4 1 2 3') == 'YES'\nassert solution('4 1 2 3 1 2 3') == 'YES'\nassert solution('4 1 2 3 1') == 'YES'\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2\") == \"YES\"\nassert solution(\"4 2 1\") == \"NO\"\nassert solution(\"5 2 4 3 1\") == \"YES\"\nassert solution(\"7 4 1 5 6 2 3\") == \"YES\"\nassert solution(\"6 2 4 1 5 3\") == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 1 2\") == \"NO\"\n\nprint(solution(\"3 1 2\"))\n\n\n\n\n------BEST SOLUTION------"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcdef\", \"abdcef\") == \"4 5 4 5\"\nassert solution(\"abcd\", \"accd\") == \"-1\"\nassert solution(\"\", \"abcd\") == \"0\"\nassert solution(\"\", \"\") == \"0\"\nassert solution(\"abcd\", \"abcde\") == \"5 5 5 5\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abcdef') == 'abdcef'\nassert solution('abdfec') == 'abdcfe'\n\nassert solution('abc') == 'abcc'\nassert solution('abbcc') == 'abbcc'\nassert solution('abcddd') == 'abbddd'"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcd\") == \"0\"\nassert solution(\"accd\") == \"-1\"\n\"\"\"\n\n\"\"\"\nExample\nInput:\n5\nabcdef\nabdfec\n\nOutput:\n4\n3 5 4 5\n\n\"\"\"\n\nn = int(input())\ns = input()\nt = input()\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcdef') == 'abdcef'\nassert solution('abcd') == '-1'\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"abcdef\"\n) == \"abdcef\"\nassert solution(\n\"abcd\"\n) == \"accd\"\nassert solution(\n\"abcde\"\n) == \"accde\"\nassert solution(\n\"abcdefghijklmnopqrstuvwxyz\"\n) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\n\"abcdef\"\n) == \"abdcef\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('abcdef') == 'abdcef'\nassert solution('abdfec') == 'abdcfe'\nassert solution('abcd') == 'accd'\nassert solution('abc') == 'abdc'\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\nassert solution(\"abdcfe\") == \"abdfec\"\n\"\"\"\n\nn = int(input())\ns = input()\nt = input()"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\nassert solution(\"abcd\") == \"accd\"\nassert solution(\"accd\") == \"accd\"\nassert solution(\"abc\") == \"acc\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"abdcef\") == \"abdcef\"\nassert solution(\"abdcefg\") == \"abdcefg\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline()\nt = sys.stdin.readline()"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\") == \"PS\"\nassert solution(\"aaaaa\") == \"SPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"\") == \"PS\"\nassert solution(\"aa\") == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\na\\nb\\nc\\nd\\n') == 'SPSP'\nassert solution('5\\naa\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\n') == 'PSPS'\nassert solution('3\\naa\\nbb\\ncc\\n') == 'PS'\nassert solution('1\\na\\n') == 'SP'\nassert solution('2\\na\\na\\na\\n') == 'SSS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"PS\"\n\nassert solution(\"ba\") == \"SP\"\n\nassert solution(\"ab\") == \"PS\"\n\nassert solution(\"a\") == \"S\"\n\nassert solution(\"c\") == \"P\""
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"PPS\"\nassert solution(\"ac\") == \"SP\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abab') == 'PPSS'\nassert solution('aa') == 'PPS'\nassert solution('aba') == 'PS'\n\n'''\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == \"PS\"\nassert solution(\"aaa\") == \"PPS\"\nassert solution(\"abab\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"c\") == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"PPS\"\nassert solution(\"baba\") == \"PPS\"\nassert solution(\"ac\") == \"PS\"\nassert solution(\"c\") == \"P\"\nassert solution(\"abab\") == \"PSPSPSPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba\") == \"SPS\"\nassert solution(\"aa\") == \"PS\"\nassert solution(\"ac\") == \"SP\"\n\"\"\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ba') == 'PS'\nassert solution('a') == 'PS'\nassert solution('abab') == 'PSPSPSPS'\nassert solution('a') == 'PS'\nassert solution('aba') == 'PSS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"PS\"\nassert solution(\"abbabababbbaabab\") == \"PSPSPSPSPSPSPSPS\"\nassert solution(\"baba\") == \"PS\"\nassert solution(\"aa\") == \"PPS\"\nassert solution(\"aaa\") == \"PPSS\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 6 8 10') == '1'\nassert solution('1 2 3 4 5') == '5'\nassert solution('3 2 1') == '2'\nassert solution('2 3 4 5 1') == '5'\nassert solution('1 2 3 4 5 6 7 8') == '8'\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"1 1 1 1 1 1\") == \"6\"\n\"\"\""
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6 8 10\") == 1\nprint(solution(\"4 6 8 10\"))\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\n\n-----Explanation-----\n\nIn the standard order, the first line of the input contains numbers 2, 4, 6, 8, 10. In this order, the smallest number is 2, the second is 4, the third is 6, the fourth is 8, and the fifth is 10. So, the number with the smallest ordinal is 2.\n\na)\n\n\n-----\n\n2 4 6 8 10\n\na) 2\nb) 4\nc) 6\nd) 8\ne) 10\n\n-----\n\n5 9 5 8 3\n\na) 1\nb) 2\nc) 3\nd) 5\ne) 4\n\n\n\"\"\""
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 6 8 10') == '1'\nprint(solution('2 4 6 8 10'))\n\n-----Constraints-----\n\na_i are integers in the range [0, 100].\n\n\n-----Comments-----\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nFugiat ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 4 6 8 10''') == '1'\nassert solution('2 4 6 8 10') == '1'\nassert solution('2 4 6 8') == '1'\nassert solution('2 4 6 8 9 10') == '2'\nassert solution('2 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100') == '2'\n\nInput\n2 4 6 8\n\nOutput\n0\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\"\"\"\na = [int(x) for x in input().split(\" \")]\nprint(min(a))\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\n\"\"\"\n\na = [int(x) for x in input().split(' ')]\nprint(1 if sum(a)//2 == len(a) else 0)\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\"\"\"\n\n\nfrom typing import List, Tuple\nimport operator\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 6 8 10') == 1\n\n\"\"\"\n\nfrom typing import List, Set, Dict\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n\n\nimport sys\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n1 1 0 1 1 0 1 0 1 0\\n') == '2'\nassert solution('5\\n1 1 0 0 0\\n') == '0'\nassert solution('4\\n1 1 1 1\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == '2'\nassert solution(\"5\\n1 1 0 0 0\") == '0'\nassert solution(\"4\\n1 1 1 1\") == '0'\nassert solution(\"2\\n1 1\") == '1'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nk = 0\ns = set()\n\nfor i in range(1, n - 1):\n    if a[i - 1] == 1 and a[i] == 1 and a[i + 1] == 1:\n        k += 1\n        s.add(i)\n\nprint(len(s))\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == '2'\nassert solution(\"5\\n1 1 0 0 0\") == '0'\nassert solution(\"4\\n1 1 1 1\") == '0'\n\nstdin = \"\"\"10\n1 1 0 1 1 0 1 0 1 0\n\"\"\"\nassert solution(stdin) == '2'\n\nstdin = \"\"\"5\n1 1 0 0 0\n\"\"\"\nassert solution(stdin) == '0'\n\nstdin = \"\"\"4\n1 1 1 1\n\"\"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5 1 1 0 0 0\") == \"0\"\nassert solution(\"4 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 1 1\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\nassert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"3\\n1 1 1\") == \"0\"\n\nprint(\"Well done!\")\n\"\"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n\nprint('Success')\n\n\"\"\"\n\nimport sys\nimport os\n\nfrom typing import List, Dict\n\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solution(self, stdin: str) -> str:\n        n = int(stdin.readline().strip())\n        arr = list(map(int, stdin.readline().strip().split(\" \")))\n        arr_len = len(arr)\n        i = 0\n        while i < arr_len - 1:\n            if arr[i] == 1 and arr[i + 1] == 1:\n                break\n            i += 1\n        if i == arr_len - 1:\n            return 0\n        else:\n            return i + 1\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\n1 1 0 1 1 0 1 0 1 0') == '2'\nassert solution('5\\n1 1 0 0 0') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"6\\n6 90 12 18 30 18\") == \"4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 4 5') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('6 90 12 18 30 18') == '4'\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"1\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == '1'\nassert solution(\"6\\n6 90 12 18 30 18\") == '4'\n\n\"\"\""
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4 5') == '1'\nassert solution('6\\n6 90 12 18 30 18') == '4'\nassert solution('6\\n0 1 3 1 3') == '0'\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1 2\\n') == 1\n\"\"\""
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4') == '1'\nassert solution('7\\n1 2 3 4 5 6 7') == '7'\n\"\"\"\nimport math"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 4 5') == '2'\n\"\"\""
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1 2 3 4') == 2\nassert solution('6 90 12 18 30 18') == 4"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 90 12 18 30 18\") == 4\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nd = {}\n\nfor i in a:\n    if i == 1:\n        continue\n    if i == 2:\n        d[i] = 2\n    else:\n        divisor = 2\n        while divisor * divisor < i:\n            if i % divisor == 0:\n                if divisor in d:\n                    d[divisor] += 1\n                else:\n                    d[divisor] = 1\n            divisor += 1\n        if divisor * divisor == i:\n            d[divisor] = 1"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 4 3 3 2\") == 2"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 4 3 3 2\") == \"2\"\nassert solution(\"1 2 3 4 3 2\") == \"2\"\nassert solution(\"1 2 1 1 2 1\") == \"1\"\nassert solution(\"1 1 1 1 1 1\") == \"1\"\nassert solution(\"1 2 3 4 3 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1\\n2\\n2\\n3\\n1\\n') == '3'\nassert solution('4\\n3\\n2\\n1\\n1\\n') == '1'\nassert solution('4\\n2\\n1\\n3\\n2\\n1\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 4 3 3 2\\n\") == \"2\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4') == 2\nassert solution('6\\n1 2 4 3 3 2') == 2\nassert solution('2\\n3 2') == 1\nassert solution('8\\n1 2 3 4 5 6 7 8') == 1\nassert solution('1\\n100') == 1\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 3 3 2\") == 2\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 2 4 3 3 2\") == 2\n\"\"\""
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 4 3 3 2\") == \"2\"\nassert solution(\"100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\") == \"1\"\nassert solution(\"5 6 7 8 9 10\") == \"2\"\nassert solution(\"3 4 5 6 7\") == \"2\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split()))"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\nassert solution(\"5 10\\n0 0 1 1 0 1 0 0 0 1\") == \"2\"\nassert solution(\"5 10\\n0 0 0 0 0 0\") == \"-1\"\nassert solution(\"6 2\\n0 1 1 0 0 1\") == \"3\"\nassert solution(\"1 10\\n0 0\") == \"-1\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1\\n') == '3'\nassert solution('5 3\\n1 0 0 0 1\\n') == '2'\nassert solution('5 10\\n0 0 0 0 0\\n') == '-1'\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1\\n') == '3'\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n0 0 1 1\") == \"2\"\nassert solution(\"6 2\\n0 1 1 0 0 1\") == \"3\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\nassert solution(\"6 10\\n0 0 0 0 0 0\") == \"1\"\nassert solution(\"6 10\\n0 0 0 0 0 0\\n0 1 1 1 1 1\") == \"1\"\n\n-----end----\"\"\""
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"10 3\") == \"2\"\nassert solution(\"5 10\") == \"-1\"\n\"\"\"\n\n\nfrom itertools import product\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == 3\nassert solution(\"5 3\\n1 0 0 0 1\") == 2\nassert solution(\"5 10\\n0 0 0 0 0\") == -1\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == 3\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 0 0 1') == '2'\nassert solution('6 2\\n0 1 1 0 0 1') == '3'\nassert solution('6 10\\n0 0 0 0 0 0') == '-1'\nassert solution('6 10\\n1 0 0 0 0 0') == '-1'\nassert solution('6 10\\n0 1 1 0 0 0') == '3'\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(1, 2) == 1\nassert solution(6, 2) == 3\nassert solution(10, 3) == -1\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''6 2\n0 1 1 0 0 1''') == 3\n\nassert solution('''5 3\n1 0 0 0 1''') == 2\n\nassert solution('''5 10\n0 0 0 0 0\n''') == -1\n\nassert solution('''10 3\n0 0 1 1 0 1 0 0 0 1\n''') == 3\n\n'''\n\n\nn,r = list(map(int,input().split()))\nA = list(map(int,input().split()))\n\npos = [0]*n\nfor i in range(n):\n    if A[i] == 1:\n        pos[i] = i\n\nheaters = []\nfor i in range(n):\n    if A[i] == 0:\n        heaters.append(i)\n\nans = 0\nfor i in range(n):\n    start = max(0,i-r+1)\n    end = min(n,i+r)\n    if pos[end]-pos[start] >= r:\n        ans += 1\n\nprint(ans)\n\n'''\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1') == 3\nassert solution('5 10\\n0 0 0 0 0 0') == -1\nassert solution('5 10\\n0 0 0 0 0') == -1\nassert solution('5 2\\n0 0 0 0 0') == -1\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1') == 3\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10\\n0 0 0 0 0\\n\") == '3'\nassert solution(\"6 2\\n0 1 1 0 0 1\\n\") == '3'\nassert solution(\"5 3\\n0 0 0 0 0\\n\") == '-1'\nassert solution(\"10 3\\n0 0 0 0 0 0 0 0 0 0 1\\n\") == '3'"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == 3\n\"\"\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"3\"\nprint(solution(\"3\"))\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == 3\nprint(solution('3'))\n\n-------------------------"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '2'\nassert solution('6') == '3'\nassert solution('3') == '1'\nassert solution('1') == '0'\nassert solution('9') == '4'"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('10') == '2'\nassert solution('11') == '1'\nassert solution('555') == '0'\nassert solution('333') == '3'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('8') == '5'\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n\") == \"3\"\nassert solution(\"4\\n\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3\"\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3) == 3\n\nprint(solution('3'))\n\"\"\""
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"((((())\") == 3\nassert solution(\"()(()())()\") == 1\nassert solution(\"((()))\") == 1\n\"\"\"\n\nimport pytest\nimport sys\nimport os\n\nsys.path.insert(1, os.path.join(sys.path[0], \"..\"))\nfrom util.decorators import timeit\n\nfrom typing import Dict, List"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"()()\") == 0\nassert solution(\"()(()))(((()())()\")) == 4\nassert solution(\"(((())))((()))\") == 2\nassert solution(\"(((())))((())())\") == 2\nassert solution(\"((())))(((()()))((())())()(())()\") == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"()()\") == 3\nassert solution(\"(((()))\") == 3\nassert solution(\"(()()(()))\") == 3\n\n\"\"\"\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"())((()())\") == 1\nassert solution(\"((()))\") == 0\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"()(())\") == 1\nassert solution(\"((()))\") == 2\nassert solution(\"())\") == 0\n\"\"\""
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"()\") == 0\nassert solution(\"((()))\") == 0\nassert solution(\"((((((((((((()))))))))))\") == 0\nassert solution(\"()()\") == 0\nassert solution(\"((((((((((((()))))))))))\") == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"()()\") == 0\nassert solution(\"(((())))\") == 1\nassert solution(\"(())((()())())\") == 2\nassert solution(\"()(()())()\") == 3\n\nprint('The code ran Correctly')"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('(((())(())()))((())())') == 5\nassert solution(')(') == 2\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '(((()'\n) == 3\n\nassert solution(\n    ')))(((((('\n) == 0\n\nassert solution(\n    ')))(((((('\n) == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"(()\") == \"2\"\nassert solution(\"()()\") == \"0\"\nassert solution(\"((()))\") == \"1\"\nassert solution(\"(())((()()))\") == \"3\"\nassert solution(\"(())(()(()()))\") == \"5\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 3\nassert solution('a') == 1\nassert solution('a bb abc abd') == 1\nassert solution('a bb') == 1\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('test') == 3\nassert solution('tst') == 2\nassert solution('tt') == 1\nassert solution('et') == 0\nassert solution('tes') == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 1\n\"\"\""
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 1\nassert solution('test') == 1\nassert solution('tst') == 0\nassert solution('tt') == 1\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"test\") == 5\nassert solution(\"tt\") == 1\nassert solution(\"aaaaa\") == 3\nassert solution(\"aaaaaa\") == 0\nassert solution(\"\") == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaaaaaaaaaaaa\") == 1\nassert solution(\"aaaaaaaaaaaaaa\") == 0\nassert solution(\"a\") == 0\nassert solution(\"aab\") == 1\nassert solution(\"ab\") == 1\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('a') == 0\nassert solution('aaaaa') == 0\nassert solution('a') == 1\nassert solution('aa') == 1\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abracadabra\") == 3\nassert solution(\"qwertyuiopasdfghjklzxcvbnm\") == 0\nassert solution(\"qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxc"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 2\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 0\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"tst\") == 1\nassert solution(\"tt\") == 0\nassert solution(\"et\") == 1\nassert solution(\"ee\") == 0\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6 2 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1,2,1,1) == 2\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"1 1 1 2\") == \"2\"\nassert solution(\"1 2 2 1\") == \"1\"\nassert solution(\"2 2 1 1\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\nassert solution(\"1 1 1 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 1\") == \"2\"\nassert solution(\"3 2 5 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 1 1') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 1 1') == '2'\n\"\"\"\n\na, b, c, d = [int(i) for i in stdin.read().split(' ')]\n\nl = [a, b, c, d]\nl = sorted(l)\n\nmax = l[0] * l[1]\n\nprint(max)\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 1 1') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 1 4 4 6 7\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n9 1 4 4 6 7\") == \"2\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 1 4 4 6 7') == '2'\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('6 1 4 4 6 7') == '2'\n\n------Problem Statement-----\n - 2 \\leq N \\leq 10^5\n - N is an even number.\n - 1 \\leq d_i \\leq 10^5\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nd_1 d_2... d_N\n\n-----Output-----\nPrint the number of choices of the integer K that make the number of problems for ARCs and the number of problems for ABCs the same.\n\n-----Sample Input-----\n6\n9 1 4 4 6 7\n\n-----Sample Output-----\n2\n\nIf we choose K=5 or 6, Problem 1, 5, and 6 will be for ARCs, Problem 2, 3, and 4 will be for ABCs, and the objective is achieved.\nThus, the answer is 2.\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n9 1 4 4 6 7') == '2'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n9 1 4 4 6 7\") == \"2\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 1 4 4 6 7\") == 2\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n9 1 4 4 6 7\") == \"2\"\n\n---\nIf you like this Kata, please try:\n\nNice Kata #2 - Dominoes Game\nNice Kata #3 - Intersection of Two Arrays\nNice Kata #4 - Binary String with Ones and Zeroes\nNice Kata #5 - Maximum Sum of Subarray Minimums\nNice Kata #6 - Plus One\nNice Kata #7 - Sum of Digits in Integer\nNice Kata #8 - Rotate String\nNice Kata #9 - Intersection of Two Arrays II\nNice Kata #10 - Reverse Integer\nNice Kata #11 - Decrease Elements To Make Array Zigzag\nNice Kata #12 - Target Sum\nNice Kata #13 - H-Index\nNice Kata #14 - Number of Steps to Reduce a Number to Zero\nNice Kata #15 - Subtract the Product and Sum of Digits of an Integer\nNice Kata #16 - Check if Numbers Are Ascending\nNice Kata #17 - Kth Missing Positive Number\nNice Kata #18 - Restore the Array\nNice Kata #19 - Score of Parentheses\nNice Kata #20 - Remove Nth Node From End of List\nNice Kata #21 - Merge Two Sorted Lists\nNice Kata #22 - Implement Trie (Prefix Tree)\nNice Kata #23 - Merge k Sorted Lists\nNice Kata #24 - Swap Nodes in Pairs\nNice Kata #25 - Insert Interval\nNice Kata #26 - Merge Overlapping Intervals\nNice Kata #27 - Sort Colors\nNice Kata #28 - Implement Trie (Prefix Tree)\nNice Kata #29 - Subtract the Product and Sum of Digits of an Integer\nNice Kata #30 - Insert Interval\nNice Kata #31 - Number of Steps to Reduce a Number to Zero\nNice Kata #32 - Maximum Product of Splitted Concatenated Array\nNice Kata #33 - Number of Longest Increasing Subsequence\nNice Kata #34 - Number of Longest Increasing Subsequence\nNice Kata #35 - How many Numbers Are Smaller Than the Current Number\nNice Kata #36 - Replace Elements with Greatest Element on Right Side\nNice Kata #37 - Leetcode 169 - Majority Element\nNice Kata #38 - JadenCase\nNice Kata #39 - First Bad Version\nNice Kata #40 - Implement Trie (Prefix Tree)\nNice Kata #41 - First Bad Version\nNice Kata #42 - Jump Game\nNice Kata #43 - Partition Array into Disjoint Intervals\nNice Kata #44 - Wildcard Mutation\nNice Kata #45 - Tree Diameter\nNice Kata #46 - Number of Longest Increasing Subsequence\nNice Kata #47 - Number of Longest Increasing Subsequence\nNice Kata #48 - Implement Trie (Prefix Tree)\nNice Kata #49 - Number of Longest Increasing Subsequence\nNice Kata #50 - Number of Longest Increasing Subsequence\nNice Kata #51 - Number of Longest Increasing Subsequence\nNice Kata #52 - Longest Increasing Subsequence\nNice Kata #53 - Maximum Subarray\nNice Kata #54 - Implement Trie (Prefix Tree)\nNice Kata #55 - Implement Trie (Prefix Tree)\nNice Kata #56 - Implement Trie (Prefix Tree)\nNice Kata #57 - Implement Trie (Prefix Tree)\nNice Kata #58 - Implement Trie (Prefix Tree)\nNice Kata #59 - Maximum Product of Splitted Concatenated Array\nNice Kata #60 - Implement Trie (Prefix Tree)\nNice Kata #61 - Number of Longest Increasing Subsequence\nNice Kata #62 - Number of Longest Increasing Subsequence\nNice Kata #63 - Longest Increasing Subsequence\nNice Kata #64 - Longest Increasing Subsequence\nNice Kata #65 - Longest Increasing Subsequence\nNice Kata #66 - Longest Increasing Subsequence\nNice Kata #67 - Longest Increasing Subsequence\nNice Kata #68 - Longest Increasing Subsequence\nNice Kata #69 - Longest Increasing Subsequence\nNice Kata #70 - Longest Increasing Subsequence\nNice Kata #71 - Longest Increasing Subsequence\nNice Kata #72 - Longest Increasing Subsequence\nNice Kata #73 - Longest Increasing Subsequence\nNice Kata #74 - Longest Increasing Subsequence\nNice Kata #75 - Longest Increasing Subsequence\nNice Kata #76 - Longest Increasing Subsequence\nNice Kata #77 - Longest Increasing Subsequence\nNice Kata #78 - Longest Increasing Subsequence\nNice Kata #79 - Longest Increasing Subsequence\nNice Kata #80 - Longest Increasing Subsequence\nNice Kata #81 - Longest Increasing Subsequence\nNice Kata #82 - Longest Increasing Subsequence\nNice Kata #83 - Longest Increasing Subsequence\nNice Kata #84 - Longest Increasing Subsequence\nNice Kata #85 - Longest Increasing Subsequence\nNice Kata #86 - Longest Increasing Subsequence\nNice Kata #87 - Longest Increasing Subsequence\nNice Kata #88 - Longest Increasing Subsequence\nNice Kata #89 - Longest Increasing Subsequence\nNice Kata #90 - Longest Increasing Subsequence\nNice Kata #91 - Longest Increasing Subsequence\nNice Kata #92 - Longest Increasing Subsequence\nNice Kata #93 - Longest Increasing Subsequence\nNice Kata #94 - Longest Increasing Subsequence\nNice Kata #95 - Longest Increasing Subsequence\nNice Kata #96 - Longest Increasing Subsequence\nNice Kata #97 - Longest Increasing Subsequence\nNice Kata #98 - Longest Increasing Subsequence\nNice Kata #99 - Longest Increasing Subsequence\nNice Kata #100 - Longest Increasing Subsequence\nNice Kata #101 - Longest Increasing Subsequence\nNice Kata #102 - Longest Increasing Subsequence\nNice Kata #103 - Longest Increasing Subsequence\nNice Kata #104 - Longest Increasing Subsequence\nNice Kata #105 - Longest Increasing Subsequence\nNice Kata #106 - Longest Increasing Subsequence\nNice Kata #107 - Longest Increasing Subsequence\nNice Kata #108 - Longest Increasing Subsequence\nNice Kata #109 - Longest Increasing Subsequence\nNice Kata #110 - Longest Increasing Subsequence\nNice Kata #111 - Longest Increasing Subsequence\nNice Kata #112 - Longest Increasing Subsequence\nNice Kata #113 - Longest Increasing Subsequence\nNice Kata #114 - Longest Increasing Subsequence\nNice Kata #115 - Longest Increasing Subsequence\nNice Kata #116 - Longest Increasing Subsequence\nNice Kata #117 - Longest Increasing Subsequence\nNice Kata #118 - Longest Increasing Subsequence\nNice Kata #119 - Longest Increasing Subsequence\nNice Kata #120 - Longest Increasing Subsequence\nNice Kata #121 - Longest Increasing Subsequence\nNice Kata #122 - Longest Increasing Subsequence\nNice Kata #123 - Longest Increasing Subsequence\nNice Kata #124 - Longest Increasing Subsequence\nNice Kata #125 - Longest Increasing Subsequence\nNice Kata #126 - Longest Increasing Subsequence\nNice Kata #127 - Longest Increasing Subsequence\nNice Kata #128 - Longest Increasing Subsequence\nNice Kata #129 - Longest Increasing Subsequence\nNice Kata #130 - Longest Increasing Subsequence\nNice Kata #131 - Longest Increasing Subsequence\nNice Kata #132 - Longest Increasing Subsequence\nNice Kata #133 - Longest Increasing Subsequence\nNice Kata #134 - Longest Increasing Subsequence\nNice Kata #135 - Longest"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 9 8 10') == 3\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2 3 4\") == \"2\"\nassert solution(\"6 1 2 3 4 4 6\") == \"2\"\nassert solution(\"8 1 2 3 4 4 6 7 8\") == \"2\"\nassert solution(\"10 1 2 3 4 4 6 7 8 9 10\") == \"2\"\nassert solution(\"12 1 2 3 4 4 6 7 8 9 10 11 12\") == \"2\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == '3'\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\nassert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\\n16 17 14 20 20 11 22\") == \"3\"\nassert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\\n16 17 14 20 20 11 22\\n16 17 14 20 20 11 22\") == \"3\"\nassert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\\n16 17 14 20 20 11 22\\n16 17 14 20 20 11 22\\n16 17 14 20 20 11 22\") == \"3\""
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 24 21 23\") == 3\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 24 21 23\") == 3\n\"\"\"\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ngood_times = 0"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 24 21 23\") == 3\n\"\"\""
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == '3'\n\"\"\"\n\nfrom datetime import datetime\nfrom typing import List\n\n\nclass Solution:\n    \"\"\"\n    Complexity:\n        Time: O(n)\n        Space: O(1)\n    \"\"\"\n\n    def solve(self, n: int, h: int, l: int, r: int, a: List[int]) -> int:\n        \"\"\"\n        Complexity:\n            Time: O(n)\n            Space: O(1)\n        \"\"\"\n        return sum([1 for x in a if l <= x < r])\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 24 21 23\") == 3\n\"\"\"\n\nimport os\n\nfrom collections import deque\nfrom typing import Deque, List, Set\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 24 21 23\") == 3\n\"\"\"\n\nimport unittest\nfrom typing import List\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''7 24 21 23\n16 17 14 20 20 11 22''') == '3'\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == '4'\nassert solution('5\\n2 10 50 110 250') == '1'\nassert solution('6\\n4 7 12 100 150 199') == '3'"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '0'\nassert solution('10\\n1 2 5 6 7 10 21 23 24 49') == '4'\nassert solution('5\\n2 10 50 110 250') == '1'\nassert solution('6\\n4 7 12 100 150 199') == '3'\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('2') == '2'\nassert solution('1 1') == '1'\nassert solution('1\\n2') == '2'\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49\\n') == '4'\nassert solution('5\\n2 10 50 110 250\\n') == '1'\nassert solution('6\\n4 7 12 100 150 199\\n') == '3'\n\"\"\"\n\nfrom typing import List, Dict, Union, Tuple\nfrom collections import deque, namedtuple\nfrom math import inf\nfrom sys import stdin\n\nDEBUG = False\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == '4'\nassert solution('5\\n2 10 50 110 250') == '1'\nassert solution('6\\n4 7 12 100 150 199') == '3'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\nassert solution(\"6\\n2 5 10 1 10 2\") == \"1 4\"\n\n\"\"\"\n\nimport sys\nfrom typing import List\n\nsys.stdin = open('test_files/Y11R5P1/A.in', 'r')\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\n\n\"\"\""
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == '1 2'\nassert solution(\"6\\n2 5 10 1 10 2\") == '1 4'\n\n\"\"\"\n\nimport math\nfrom collections import Counter"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2\\n') == '1 2'\nassert solution('5\\n2 4 8 3 6') == '1 2'\nassert solution('6\\n2 5 10 1 10 2') == '1 4'\nassert solution('5\\n2 11 3 7') == '1 2'\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\nassert solution(\"6\\n2 5 10 1 10 2\") == \"1 4\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 4 8 3 6\\n\") == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n2 4 8 3 6\n''') == '1 2'\n\nassert solution('''5\n5 2 11 3 7\n''') == '2 4'\n\nassert solution('''6\n2 5 10 1 10 2\n''') == '1 4'\n\"\"\""
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2 1\") == \"1 2\"\nassert solution(\"4 3 2 1\") == \"1 2\"\nassert solution(\"4 3 2 1\") == \"1 2\"\nassert solution(\"4 3 2 1\") == \"1 2\"\nassert solution(\"4 3 2 1\") == \"1 2\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n2 5 10 1 10 2\") == \"1 4\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 8 3 6\") == \"1 2\"\nassert solution(\"5 2 11 3 7\") == \"2 4\"\nassert solution(\"6 2 5 10 1 10 2\") == \"1 4\"\n\n\"\"\"\n\nimport math\n\nn = int(input())\na = list(map(int, input().split()))\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"121\") == \"021\"\nassert solution(\n\"000000\") == \"001122\"\nassert solution(\n\"211200\") == \"211220\"\nassert solution(\n\"120110\") == \"120120\"\nassert solution(\n\"12110\") == \"112110\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('121') == '021'\nassert solution('1100100') == '120120'\nassert solution('211200') == '211200'\n\"\"\"\nfrom typing import List\n\ns = input()\n\nzero_count = 0\none_count = 0\ntwo_count = 0\nfor i in range(len(s)):\n    if s[i] == '0':\n        zero_count += 1\n    if s[i] == '1':\n        one_count += 1\n    if s[i] == '2':\n        two_count += 1\n\nprint('0' * (zero_count - 1) + '1' * (one_count - 1) + '2' * (two_count - 1))\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"12010\") == \"120120\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"211200\") == \"120120\"\nassert solution
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"121\") == \"021\"\n\nassert solution(\"100100\") == \"101100\"\n\nassert solution(\"11112\") == \"111111\"\n\"\"\""
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"120110\") == \"120120\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"1100101\") == \"1011010\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"211200\") == \"211220\"\nassert solution(\"120110\") == \"120120\"\n\nprint(\"Passed!\")\n\"\"\"\nimport collections\n\n\nclass Ternary:\n    def __init__(self, str_):\n        self.ternary_string = str_\n\n    def __repr__(self):\n        return \" \".join(self.ternary_string)\n\n    def __len__(self):\n        return len(self.ternary_string)\n\n    def __iter__(self):\n        self.i = 0\n        return self\n\n    def __next__(self):\n        if self.i < len(self.ternary_string):\n            self.i += 1\n            return self.ternary_string[self.i - 1]\n        else:\n            raise StopIteration\n\n    def __getitem__(self, index):\n        return self.ternary_string[index]\n\n    def __setitem__(self, index, value):\n        self.ternary_string[index] = value\n\n    def __delitem__(self, index):\n        del self.ternary_string[index]\n\n    def __add__(self, other):\n        self.ternary_string += other\n\n    def __radd__(self, other):\n        return self.__add__(other)\n\n    def __iadd__(self, other):\n        return self.__add__(other)\n\n    def __eq__(self, other):\n        if len(self.ternary_string)!= len(other):\n            return False\n        for i in range(len(self)):\n            if self[i]!= other[i]:\n                return False\n        return True\n\n    def __contains__(self, other):\n        return other in self.ternary_string\n\n    def __len__(self):\n        return len(self.ternary_string)\n\n    def __lt__(self, other):\n        if self.ternary_string < other.ternary_string:\n            return True\n        return False\n\n    def __le__(self, other):\n        if self.ternary_string < other.ternary_string:\n            return True\n        if len(self.ternary_string) < len(other):\n            return True\n        return False\n\n    def __gt__(self, other):\n        if self.ternary_string > other.ternary_string:\n            return True\n        return False\n\n    def __ge__(self, other):\n        if self.ternary_string > other.ternary_string:\n            return True\n        if len(self.ternary_string) > len(other):\n            return True\n        return False\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('121') == '021'\nassert solution('211200') == '211220'\nassert solution('120110') == '120120'\nassert solution('110110') == '110120'\nassert solution('110111') == '110121'\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1110110111') == '101101110'\nassert solution('10111101101110') == '101101110'\nassert solution('10111101101110') == '101101110'\nassert solution('10111101101110') == '101101110'\n\nassert solution('10111101101110') == '101101110'\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1\\n3\\n\") == \"4\"\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().strip().split())\n\nstairs = [[] for _ in range(N+1)]\n\nfor step in range(1, N+1):\n    if step - 1 >= 1:\n        stairs[step - 1].append(step)\n    if step + 1 <= N:\n        stairs[step + 1].append(step)\n\nfor step in range(1, N+1):\n    if step in stairs[step]:\n        stairs[step].remove(step)\n\nprint(len([step for step in stairs[M] if len(stairs[step]) >= 1]))\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\nprint('Success!')"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1\\n3\") == '4'\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 1\\n3') == '4'\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"3 1\\n3\"\n) == \"4\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(1000000)\n\n\nclass Solution:\n    def __init__(self, num_of_steps: int, steps: str):\n        self.steps = steps\n        self.num_of_steps = num_of_steps\n        self.cache = {}\n\n    def solve(self) -> int:\n        \"\"\"\n        0 = [0,0,0,0,0,0,0,0,0,0]\n        1 = [0,1,1,1,1,1,1,1,1,1]\n        2 = [0,1,0,1,0,0,1,1,1,1]\n        3 = [0,1,0,0,0,1,0,0,1,1]\n        4 = [0,0,0,1,0,0,0,0,0,1]\n        5 = [0,0,0,0,0,0,0,1,0,0]\n        6 = [0,0,0,0,0,0,0,0,0,0]\n\n        \"\"\"\n        # 0 <= i < self.num_of_steps+1\n        # f(i) = f(i-1) + f(i-2) + f(i-3)\n        # f(0) = f(1) = 0\n        # f(1) = 1\n        # f(2) = 2\n        # f(3) = 4\n        # f(4) = 7\n        # f(5) = 12\n        # f(6) = 20\n        # f(7) = 36\n        # f(8) = 84\n        # f(9) = 252\n        # f(10) = 1097\n        # f(11) = 3516\n        # f(12) = 12587\n        # f(13) = 53284\n        # f(14) = 162964\n\n        # f(i) = f(i-1) + f(i-2) + f(i-3)\n        # f(0) = 0\n        # f(1) = 1\n        # f(2) = 2\n        # f(3) = 4\n        # f(4) = 7\n        # f(5) = 12\n        # f(6) = 20\n        # f(7) = 36\n        # f(8) = 84\n        # f(9) = 252\n        # f(10) = 1097\n        # f(11) = 3516\n        # f(12) = 12587\n        # f(13) = 53284\n        # f(14) = 162964\n        # f(15) = 53284 + 12587\n        # f(16) = 53284 + 12587 + 3516\n        # f(17) = 53284 + 12587 + 3516 + 3516\n        # f(18) = 53284 + 12587 + 3516 + 3516 + 3516\n        # f(19) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516\n        # f(20) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(21) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(22) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(23) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(24) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(25) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(26) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(27) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(28) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(29) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(30) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n        # f(31) = 53284 + 12587 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516 + 3516\n\n        # f(i) = f(i-1) + f(i-2) + f(i-3) + f(i-4) + f(i-5) + f(i-6) + f(i-7) + f(i-8) + f(i-9) + f(i-10) + f(i-11) + f(i-12) + f(i-13) + f(i-14) + f(i-15) + f(i-16) + f(i-17) + f(i-18) + f(i-19) + f(i-20) + f(i-21) + f(i-22) + f(i-23) + f(i-24) + f(i-25) + f(i-26) + f(i-27) + f(i-28) + f(i-29) + f(i-30) + f(i-31) + f(i-32)\n        # f(0) = 0\n        # f(1) = 1\n        # f(2) = 2\n        # f(3) = 4\n        # f(4) = 7\n        # f(5) = 12\n        # f(6) = 20\n        # f(7) = 36\n        # f(8) = 84\n        # f(9) = 252\n        # f(10) = 1097\n        # f(11) = 3516\n        # f(12) = 12587\n        # f(13) = 53284\n        # f(14) = 162964\n        # f(15) = 53284 + 12587\n        "
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 1\\n3') == '4'\n\n-------------\n\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 1\\n3') == '4'\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n2\\n3\\n\") == \"4\"\nassert solution(\"6\\n4\\n5\\n3\\n1\\n2\\n\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1\\n3\") == \"4\"\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"6 1\\n\"\n\"3\"\n) == \"4\"\nassert solution(\n\"4 1\\n\"\n\"1\"\n) == \"1\"\nassert solution(\n\"3 1\\n\"\n\"1\"\n) == \"1\"\nassert solution(\n\"3 2\\n\"\n\"1 1\"\n) == \"2\"\nassert solution(\n\"5 3\\n\"\n\"1 1 1\\n\"\n\"1 1 1\\n\"\n\"1 1 1\"\n) == \"4\"\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\nX, K, D = input().split()\n\nX, K, D = int(X), int(K), int(D)\n\nmin_abs = abs(X)\n\nfor i in range(K):\n    min_abs = min(abs(X), min_abs)\n    if X < 0:\n        X += D\n    else:\n        X -= D\n\nprint(min_abs)\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5 -1') == '5'\nassert solution('3 0 -2') == '3'\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 2 4\\n') == '2'\n\"\"\"\n\nfrom math import ceil\n\nx, k, d = map(int, input().split(' '))\n\nmoves = ceil(d / 2) * k\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n6 2 4\n''') == '2'\nassert solution('''\n6 2 -4\n''') == '2'\nassert solution('''\n6 2 4\n''') == '2'\nassert solution('''\n-6 2 4\n''') == '2'\nassert solution('''\n1000000000000 1 1\n''') == '1'\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 2 4') == '2'\nassert solution('1 2 3') == '1'\n\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 4\\n3 2 1\\n5 2 3\\n1 4 3\") == \"1\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '-1 2 -3'\n) == '2'\nassert solution(\n    '4 5 -6'\n) == '0'\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 2 4\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 2 4') == '2'\nassert solution('-1 1 1') == '-2'\nassert solution('0 2 1') == '2'\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 10\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11\") == 2\nassert solution(\"14\") == 0\nassert solution(\"61441\") == 10\n\n\"\"\""
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 10\nassert solution('2128506') == 3\n\"\"\""
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == 2\nassert solution('61441') == 10\nassert solution('2128506') == 3\nassert solution('1') == 0\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"3\") == 2\nassert solution(\"4\") == 3\nassert solution(\"5\") == 5\nassert solution(\"6\") == 8\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\") == 2\nassert solution(\"14\") == 0\nassert solution(\"61441\") == 10\nassert solution(\"571576\") == 3\n\"\"\""
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"61441\") == 2\nassert solution(\"2128506\") == 3\nassert solution(\"2000000000\") == 0\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == \"2\"\nassert solution(\"61441\") == \"10\"\nassert solution(\"571576\") == \"3\"\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('14') == '0'\nassert solution('14') == '0'\nassert solution('14') == '0'\nassert solution('14') == '0'\nassert solution('14') == '0'\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\") == 2\nassert solution(\"14\") == 0\nassert solution(\"61441\") == 10\nassert solution(\"571576\") == 3\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == 27\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == 27\n\"\"\"\n\na = int(input())\nprint(a * (a + 1) // 2)"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == 27\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 2\nassert solution(\"3\") == 3\nassert solution(\"10\") == 27\nassert solution(\"20\") == 17\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == 27\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == 27\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == solution(stdin)\n-------------------------------\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == 27\n\n----"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == 27\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n\nprint('all tests passed.')\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13\") == 1\nassert solution(\"927\") == 1\nassert solution(\"48\") == 0\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(int(input()))\n\nassert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\nassert solution('35') == '0'\n\n\"\"\"\n\nimport os\nfrom io import StringIO\nimport unittest"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13') == '1'\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n\n\n-----Explanation-----\nYou can read the input using the stdin.readlines() method.\nThe input method always returns a list of strings, even if there is just one line of input, so we must index the first element using 0."
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 3 1') == 4\n\n-----How to run-----\nInput the test cases to the problem in the editor and press \"Run\"\nPress \"Run\" again to execute the tests and find the correct solution\n\n-----Problem-----\n\nTwo integers are passed to your function.\nThe first is a and the second is b.\nYour function must return the smallest possible value of the following expression:\n\na^b % d\n\nwhere d = 1337.\n\nReturn the result modulo 1337.\n\nConstraints:\n\n1 \u2264 a \u2264 10\n1 \u2264 b \u2264 1337\n\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5 3 1\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 3 1\") == \"4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5 3 1') == '4'"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 5 1\") == \"4\"\n\n-----Problem-----\n\nFind the minimum number of coins needed to make change for an amount.\n\n-----Solution-----\n\nhttps://www.hackerrank.com/challenges/coin-change/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=dynamic-programming\n\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5 3 1') == 4\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 3 1\") == 4\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('2 5 3 1') == 4\nassert solution('2 5 1 3') == 4\nassert solution('2 5 6 5') == 5\nassert solution('5 5 6 5') == 6\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 3 1\") == 4\n\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('1 2') == '1'\nassert solution('2 2') == '1'\nassert solution('1 0') == '0'\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\""
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 7\") == 2\nassert solution(\"8 1\") == 8\nassert solution(\"6 10\") == 1\nassert solution(\"999999733 999999733\") == 9999999733\nassert solution(\"999999733 999999733\") == 1\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''8 7''') == '2'\nassert solution('''8 1''') == '8'\nassert solution('''6 10''') == '1'\nassert solution('''999999733 999999732''') == '999999733'\nassert solution('''999999733 999999733''') == '1'\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"8 1\\n8 1\"\n) == \"2\\n8\\n1\"\n\nassert solution(\n    \"8 7\\n8 1\"\n) == \"2\\n8\\n1\"\n\nassert solution(\n    \"999999733 999999732\\n999999733 999999733\"\n) == \"999999733\\n999999733\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733') == 2\nassert solution('8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733') == 8\nassert solution('8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733') == 1\nassert solution('8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733') == 999999733\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'\n\nassert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'\n\nassert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'\nprint('Success')\n\n'''\n\nimport sys\nimport functools"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\nassert solution(\"3 3\\n1 1 2 3\\n1 2\\n0 1\") == \"1\"\nassert solution(\"4 4\\n1 1 2 3\\n1 2\\n0 1\\n0 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\nassert solution(\"5 2\\n1 2\\n1 3\\n1 4\\n4 5\") == \"9\"\nassert solution(\"5 2\\n1 2\\n1 3\\n1 4\\n4 5\") == \"9\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == 1\n\"\"\"\n\n\nfrom collections import Counter\n\nn, m = [int(c) for c in stdin.readline().strip().split()]\n\ncnt = Counter()\nfor _ in range(m):\n    k = int(stdin.readline())\n    s = [int(c) for c in stdin.readline().strip().split()]\n    cnt[k] += sum(s) % 2\n\nprint(sum(c * (c - 1) // 2 for c in cnt.values()))\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\n----\n3 4\n3 1 2 3\n1 3 1\n0 1 2\n\n4 1\n1 1 1 1\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == 1\n\"\"\"\nimport math\n\nN, M = map(int, input().split())\narr = []\nfor i in range(M):\n    arr.append(list(map(int, input().split())))\n\narr1 = []\nfor i in range(N):\n    for j in range(N):\n        arr1.append([i+1, j+1])\n\narr2 = []\nfor i in range(N):\n    for j in range(M):\n        arr2.append([i+1, j+1])\n\narr3 = []\nfor i in range(N):\n    for j in range(M):\n        arr3.append([j+1])\n\narr4 = []\nfor i in range(N):\n    for j in range(M):\n        arr4.append([i+1])\n\narr5 = []\nfor i in range(N):\n    for j in range(M):\n        arr5.append([j+1])\n\narr6 = []\nfor i in range(M):\n    for j in range(N):\n        arr6.append([i+1])\n\narr7 = []\nfor i in range(M):\n    for j in range(N):\n        arr7.append([j+1])\n\nfor i in range(M):\n    arr1.remove(arr[i])\n\narr8 = []\nfor i in range(M):\n    for j in range(M):\n        arr8.append([i+1, j+1])\n\narr9 = []\nfor i in range(M):\n    for j in range(N):\n        arr9.append([i+1, j+1])\n\narr10 = []\nfor i in range(N):\n    for j in range(M):\n        arr10.append([j+1])\n\narr11 = []\nfor i in range(N):\n    for j in range(M):\n        arr11.append([i+1])\n\narr12 = []\nfor i in range(N):\n    for j in range(M):\n        arr12.append([j+1])\n\narr13 = []\nfor i in range(M):\n    arr13.append(arr[i])\n\narr14 = []\nfor i in range(M):\n    arr14.append(arr[i])\n\narr15 = []\nfor i in range(M):\n    arr15.append(arr[i])\n\narr16 = []\nfor i in range(M):\n    arr16.append(arr[i])\n\narr17 = []\nfor i in range(M):\n    arr17.append(arr[i])\n\narr18 = []\nfor i in range(N):\n    arr18.append(arr1[i])\n\narr19 = []\nfor i in range(N):\n    arr19.append(arr1[i])\n\narr20 = []\nfor i in range(N):\n    arr20.append(arr1[i])\n\narr21 = []\nfor i in range(N):\n    arr21.append(arr1[i])\n\narr22 = []\nfor i in range(N):\n    arr22.append(arr1[i])\n\narr23 = []\nfor i in range(N):\n    arr23.append(arr1[i])\n\narr24 = []\nfor i in range(M):\n    arr24.append(arr2[i])\n\narr25 = []\nfor i in range(M):\n    arr25.append(arr2[i])\n\narr26 = []\nfor i in range(M):\n    arr26.append(arr2[i])\n\narr27 = []\nfor i in range(M):\n    arr27.append(arr2[i])\n\narr28 = []\nfor i in range(M):\n    arr28.append(arr2[i])\n\narr29 = []\nfor i in range(M):\n    arr29.append(arr2[i])\n\narr30 = []\nfor i in range(M):\n    arr30.append(arr2[i])\n\narr31 = []\nfor i in range(M):\n    arr31.append(arr2[i])\n\narr32 = []\nfor i in range(M):\n    arr32.append(arr2[i])\n\narr33 = []\nfor i in range(N):\n    arr33.append(arr3[i])\n\narr34 = []\nfor i in range(N):\n    arr34.append(arr3[i])\n\narr35 = []\nfor i in range(N):\n    arr35.append(arr3[i])\n\narr36 = []\nfor i in range(N):\n    arr36.append(arr3[i])\n\narr37 = []\nfor i in range(N):\n    arr37.append(arr3[i])\n\narr38 = []\nfor i in range(N):\n    arr38.append(arr3[i])\n\narr39 = []\nfor i in range(N):\n    arr39.append(arr3[i])\n\narr40 = []\nfor i in range(N):\n    arr40.append(arr3[i])\n\narr41 = []\nfor i in range(M):\n    arr41.append(arr4[i])\n\narr42 = []\nfor i in range(M):\n    arr42.append(arr4[i])\n\narr43 = []\nfor i in range(M):\n    arr43.append(arr4[i])\n\narr44 = []\nfor i in range(M):\n    arr44.append(arr4[i])\n\narr45 = []\nfor i in range(M):\n    arr45.append(arr4[i])\n\narr46 = []\nfor i in range(M):\n    arr46.append(arr4[i])\n\narr47 = []\nfor i in range(M):\n    arr47.append(arr4[i])\n\narr48 = []\nfor i in range(M):\n    arr48.append(arr4[i])\n\narr49 = []\nfor i in range(M):\n    arr49.append(arr4[i])\n\narr50 = []\nfor i in range(N):\n    arr50.append(arr5[i])\n\narr51 = []\nfor i in range(N):\n    arr51.append(arr5[i])\n\narr52 = []\nfor i in range(N):\n    arr52.append(arr5[i])\n\narr53 = []\nfor i in range(N):\n    arr53.append("
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\\n\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == 1\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\"\"\"\nimport unittest\nfrom typing import Dict, List\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \"\"\"O(N) time, O(1) space\"\"\"\n        n, m = map(int, stdin.split())\n        on_count = [0] * n\n        off_count = [0] * n\n        num_on = 0\n        for i in range(m):\n            on_count[int(stdin.split()[i]) - 1] += 1\n            num_on += 1\n        for i in range(n):\n            off_count[i] = num_on - on_count[i]\n        #print(on_count)\n        #print(off_count)\n        num_on = 0\n        num_off = 0\n        for i in range(m):\n            if off_count[int(stdin.split()[i]) - 1] % 2 == 0:\n                num_on += 1\n            else:\n                num_off += 1\n        #print(num_on, num_off)\n        if num_on == num_off:\n            return str(2 ** num_on - 1)\n        else:\n            return str(2 ** num_on)\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        pass\n\n    def tearDown(self) -> None:\n        pass\n\n    def test_solution(self):\n        stdin = \"2 2\\n2 1 2\\n1 2\\n0 1\"\n        expected = \"1\"\n        self.assertEqual(Solution().solution(stdin), expected)\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 12 0\") == \"5.0000000000\"\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\n\"\"\"\n\nimport math\nimport sys\n\nlines = []\nfor line in sys.stdin:\n    lines.append(line.rstrip('\\n'))\n    \nA, B, H, M = lines[0].split()\n\nA, B = int(A), int(B)\nH, M = int(H), int(M)\n\nT = (12 * H + M) / 720 * math.pi\n\nx = A * math.cos(T)\ny = A * math.sin(T)\n\nd = ((x - B) ** 2 + (y - B) ** 2) ** 0.5\n\nprint(d)\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1 1\") == \"3.0\"\nassert solution(\"1 1 1 1\") == \"0.0\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n\"\"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\"\nimport sys\n\nA, B, H, M = map(int, sys.stdin.readline().strip().split())\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\\n\") == \"8\"\n\"\"\"\nimport math"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n1 1 1\") == \"6\"\nassert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n\n\nclass Solution:\n    def get_median_count(self, n: int, m: int, a: List[int]) -> int:\n        # assume median is unique\n        # so if median is in list, the count is the same as when it appears once\n        c = Counter(a)\n        median = (n + 1) // 2\n        return c[m] if m in c else 0\n\n    def get_median_count2(self, n: int, m: int, a: List[int]) -> int:\n        c = Counter(a)\n        a = sorted(a)\n        median = (n + 1) // 2\n        if m in c:\n            count = c[m]\n            start = 0\n            end = n - 1\n            while True:\n                if start == end:\n                    break\n                mid = (start + end) // 2\n                if m == a[mid]:\n                    count += 1\n                    break\n                elif m < a[mid]:\n                    end = mid - 1\n                else:\n                    start = mid + 1\n            if count % 2:\n                # odd\n                return (end + 1 - start) // 2\n            else:\n                # even\n                return (end + 1 - start) // 2 + 1\n        else:\n            # m not in a\n            left = 0\n            right = n - 1\n            while True:\n                if left == right:\n                    break\n                mid = (left + right) // 2\n                if a[mid] >= m:\n                    right = mid\n                else:\n                    left = mid + 1\n            if m < a[left]:\n                return left\n            else:\n                return left + 1\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == 8\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n''') == '8'\nassert solution('''5 2\n1 4 5 60 4\n''') == '8'\nassert solution('''5 1\n1 4 5 60 4\n''') == '6'\n\n'''\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5 4\n1 4 5 60 4\"\"\") == \"8\"\n\nassert solution(\"\"\"3 1\n1 1 1\"\"\") == \"6\"\n\nassert solution(\"\"\"15 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\"\"\") == \"97\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\") == \"8\"\nassert solution(\"1 4 5 60 4\") == \"8\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5') == '8'\nassert solution('3 1') == '6'\nassert solution('15 2') == '97'\nprint('Success')"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 4 5 60 4\") == \"8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n1 4 5 60 4') == '8'\nassert solution('3 1\\n1 1 1') == '6'\nassert solution('15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3') == '97'\n\"\"\""
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n') == '7\\n2\\n1 4'\nassert solution('1 0\\n1000000\\n') == '0\\n0'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2'\nassert solution('5 4\\n1 -1 2 3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n3\\n2 2'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\\n\") == \"0\\n0\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"7\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n') == '6\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000\\n') == '0\\n0'\nprint('Test passed\\n')"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == '6\\n2\\n1 4'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 2 -2 3 1 2\") == \"6\"\nassert solution(\"5 4 2 -2 3 1 4\") == \"7\"\nassert solution(\"1000000\") == \"0\""
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\") == '7\\n2\\n1 4'\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == '7\\n2\\n3 2'\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == '7\\n2\\n3 2'\nassert solution(\"1 0\\n1000000\") == '0\\n0'\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == '7\\n2\\n3 2'\n\n\"\"\""
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"fced\\nxyz\\nr\\ndabcef\\naz\\n\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\n\nsolution(stdin.read())\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"fced\\nxyz\\nr\\ndabcef\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\naz\\nabcef\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\nbaccef\") == \"No\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\"\n\n\"\"\""
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '7\\n2\\n4 1'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\") == \"7\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\"\nassert solution(\"1 0\\n1000000\") == \"0\"\n\"\"\"\nimport sys\nfrom typing import List, Dict, Set, Tuple\nfrom collections import namedtuple\n\nclass Segment:\n    def __init__(self, l: int, r: int):\n        self.l: int = l\n        self.r: int = r"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution([\"5 4\", \"2 -2 3 1 2\", \"1 3\", \"4 5\", \"2 5\", \"1 3\"]) == \"6\\n2\\n4 1\"\nassert solution([\"5 4\", \"2 -2 3 1 2\", \"3 5\", \"3 4\", \"2 4\", \"2 5\"]) == \"7\\n2\\n3 2\"\nassert solution([\"1 0\", \"1000000\"]) == \"0\\n0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == \"2 1\"\nassert solution(\"1 0\") == \"0 0\"\nassert solution(\"1 1000000000\") == \"0 0\"\nassert solution(\"1 2\") == \"0 1\"\n\n\"\"\""
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"7\\n2\\n4 1\\n\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\\n\"\nassert solution(\"1 0\\n1000000\\n\") == \"0\\n0\\n\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"6\\n2\\n4 1\\n\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == '6\\n2\\n4 1'\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == '7\\n2\\n3 2'\nassert solution(\"1 0\\n1000000\") == '0\\n0'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n4 1'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n\"\"\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == '6\\n2\\n4 1'\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == '7\\n2\\n3 2'\nassert solution(\"1 0\\n1000000\") == '0\\n0'\n\n\n\n\n\n\n\n\n\n-----\n\nfrom collections import deque"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\") == 0\nassert solution(\"1\") == 1\nassert solution(\"1 2\") == 0\nassert solution(\"2 1\") == 0\nassert solution(\"1 2 5 4 3\") == 4\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 5 4 3\") == 4\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4\\nLRRR'\nassert solution('7\\n1 3 5 6 7 4 2') == '7\\nLRLRLLL'\nassert solution('3\\n1 2 3') == '3\\nLLL'\nassert solution('4\\n1 2 4 3') == '4\\nLLRL'\n\n'''\nimport math\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nRRL\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 1 5 4 3\\n') == '4\\nRLLL'\n\"\"\"\n\nfrom typing import List\n\nN = int(input())\na = list(map(int, input().split()))\n\n\"\"\"\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[2, 1, 5, 4, 3]\n[1, 2, 3, 5, 4]\n[1, 2, 3, 4, 5]\n\"\"\"\n\nr = [1 for _ in range(N)]\nans = [0 for _ in range(N)]\n\nfor i in range(N):\n    ans[i] = a[i] * r[i]\n    for j in range(i):\n        if a[j] < a[i]:\n            if ans[j] > ans[i]:\n                ans[i] = ans[j] + a[i]\n    r[i] += 1\n\nprint(max(ans))\nprint('L' * ans.index(max(ans)) + 'R' * (ans.index(max(ans)) + 1))"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5\n2 1 5 4 3\n\"\"\") == '4'\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\"\nassert solution(\"3\\n1 2 3\") == \"3\"\nassert solution(\"4\\n1 2 4 3\") == \"4\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 1 5 4 3') == 4\nassert solution('7\\n1 3 5 6 7 4 2') == 7\nassert solution('3\\n1 2 3') == 3\nassert solution('4\\n1 2 4 3') == 4\n\"\"\""
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 5 3 4') == '4'\nassert solution('2\\n1 2') == '2'\nassert solution('7\\n6 5 4 3 2 4 3') == '2'\n\n\"\"\""
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2 5\\n') == '2'\nassert solution('3 2 5\\n2 3 4') == '2'\nassert solution('3 2 5\\n1 2 3') == '2'\nassert solution('3 2 5\\n1 2 2') == '2'\n\n\"\"\""
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 5 3 4') == '4'\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 5 3 4') == '4'\nassert solution('2\\n1 2') == '2'\nassert solution('7\\n6 5 4 3 2 4 3') == '2'\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '0'\nassert solution('1\\n2') == '1'\nassert solution('1\\n2\\n3') == '1'\nassert solution('1\\n2\\n3\\n4') == '1'\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == 4\nassert solution(\"2\\n1 2\") == 2\nassert solution(\"7\\n6 5 4 3 2 4 3\") == 2\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\nassert solution(\"2\\n1 2\") == \"2\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5') == 5\nassert solution('1 2 5 3 4') == 4\nassert solution('6 5 4 3 2 4 3') == 2\nassert solution('7 6 5 4 3 2 4 3') == 2\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"2\\n1 2\\n5 3\") == \"3\"\nassert solution(\"3\\n1 2 5 3 4\") == \"4\"\nassert solution(\"3\\n1 2 5 3 4\\n6 2 3 7 8 9\") == \"4\"\nassert solution(\"3\\n1 2 5 3 4\\n6 2 3 7 8 9\\n1 2 2 2 2 2 1 1 1 1\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 3\n1 2 2 4 5\n''') == \"1\"\nassert solution('''5 3\n1 2 3 4 5\n''') == \"2\"\nassert solution('''5 3\n1 2 2 4 5\n''') == \"1\"\nassert solution('''5 3\n1 2 3 4 5\n''') == \"2\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5 3\\n1 2 2 2 2\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 3 3') == 0\nassert solution('1 2 3 3 3', 0, 5) == 0\nassert solution('1 2 3 3 3', 0, 4) == 0\nassert solution('1 2 3 3 3', 0, 3) == 2\nassert solution('1 2 3 3 3', 0, 2) == 1\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == 1\nassert solution(\"5 3\\n1 2 3 4 5\") == 2\n\"\"\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3\\n1 2 3 3 4 5 6\") == '2'\nassert solution(\"7 5\\n1 2 2 2 2 2 2 2\") == '0'\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 3\n1 2 2 4 5\n''') == '1'\n\nassert solution('''5 3\n1 2 3 4 5\n''') == '2'\n\nassert solution('''5 3\n1 2 3 3 3\n''') == '0'\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 3 3 3') == '0'"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == '1'\n\nassert solution(\"5 3\\n1 2 2 4 5\") == '1'\n\nassert solution(\"5 3\\n1 2 3 3 3\") == '0'"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 2 4 5\\n3 3 3 3\") == '2'\nassert solution(\"1 2 3 4 5\\n3 3 3 3\") == '0'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 3 4') == 4\n\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('A A B') == '4'\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\"\n\n\nfrom math import ceil, sqrt\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\n-------------------------------------------------------\n\nimport math"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\"\n\nn, a, b = [int(x) for x in input().split()]\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 3\") == \"4\"\n\"\"\"\n\nN, A, B = [int(x) for x in input().split()]\n\ncounter = 0\nwhile A and B:\n    if A + B == 1:\n        counter += 1\n        A -= 1\n        B -= 1\n    elif A + B == 2:\n        counter += 2\n        A -= 2\n        B -= 2\n    else:\n        counter += A\n        A -= A\n        B -= A\n    print(counter)\n\nprint(counter)\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == answer\n\"\"\"\nimport sys"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 8 12 6 4 24 16 3\\n1\\n2') == '48\\n4'\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/529981c18f8c7f5b7a00005d\n\nThe prime factors of 13195 are 5, 7, 13 and 29.\n\nWhat is the largest prime factor of the number 600851475143?\n\n\"\"\""
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n8\\n12\\n6\") == \"48\"\n\nassert solution(\"8\\n1\\n12\\n6\") == \"4\"\n\nassert solution(\"8\\n1\\n12\\n6\\n8\\n12\\n6\") == \"4\"\n\nassert solution(\"8\\n1\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\") == \"4\"\n\nassert solution(\"8\\n1\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\n8\\n12\\n6\\"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"48\"\n\nprint(solution(\"2\\n1\\n2\\n\"))\n'''\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"48\\n4\\n\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5\\n6') == '6'\nassert solution('3\\n2 1\\n5') == '6'\nassert solution('7\\n3 4 6 7 8 10\\n1 2 3') == '6'\nassert solution('1\\n4') == '4'\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1\\n2') == '2\\n-1'\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom itertools import chain, combinations"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3\\n1\\n2\\n1\\n2\\n2\\n2\\n2\\n2\") == \"4\"\n\nassert solution(\"4\\n3\\n1\\n2\\n1\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"48\"\n\"\"\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n8\\n8 2 12 6 4 24 16 3\") == \"48\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\n\n\n\n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\\n\") == \"3\\n5 6 1\"\nassert solution(\"5\\n6 6 6 6 6\\n\") == \"1\\n6\"\nassert solution(\"5\\n2 4 2 4 4\\n\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\\n\") == \"1\\n6\"\nassert solution(\"5\\n1 2 2 3 3\\n\") == \"3\\n1 2 3\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 5 5 1 6 1\n''') == '3\\n5 6 1'\n\nassert solution('''\n6\n2 4 2 4 4\n''') == '2\\n2 4'\n\nassert solution('''\n5\n6 6 6 6 6\n''') == '1\\n6'\n\nprint('Success')\n'''"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n1 5 5 1 6 1') == '3\\n5 6 1'\nassert solution('5\\n2 4 2 4 4') == '2\\n2 4'\nassert solution('5\\n6 6 6 6 6') == '1\\n6'\n\"\"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\\n\") == \"3\\n5 6 1\"\nassert solution(\"5\\n6 6 6 6 6\\n\") == \"1\\n6\"\nassert solution(\"5\\n6 6 6 6\\n\") == \"1\\n6\"\nassert solution(\"6\\n2 4 2 4 4\\n\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6\\n\") == \"1\\n6\"\n\"\"\"\nimport collections\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"6\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\n\n\"\"\"\n\nimport sys\nimport json"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 5 5 1 6 1\\n') == '3\\n5 6 1'\n\nassert solution('5\\n2 4 2 4 4\\n') == '2\\n2 4'\n\nassert solution('5\\n6 6 6 6 6\\n') == '1\\n6'\n\n\n'''"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 6 6 6 6') == '1'\nassert solution('5 5 5 5 5') == '1'\nassert solution('5 6 6 6 6') == '3'\nassert solution('6 6 6 6 6') == '1'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 6 6 6 6') == '1 6'\nassert solution('5 5 5 5 5') == '1 5'\nassert solution('1 2 2 2 2') == '2'\n\n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 5 5 6 6\") == \"3 6 1\"\nassert solution(\"5 6 6 6 6\") == \"2 6\"\nassert solution(\"5 6 6 6 1\") == \"1 6\"\n\nprint(solution(input()))"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n\n\"\"\""
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\nassert solution('26') == '27'\nprint('All tests passed')"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n\"\"\"\n\n\nfrom collections import deque\nfrom math import ceil, floor\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n\"\"\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\nassert solution(\"99\") == \"103\"\n\"\"\""
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\nassert solution(\"10\") == \"11\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"abc\") == \"b\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"abac\"\n) == \"aac\"\nassert solution(\n\"abc\"\n) == \"b\"\nassert solution(\n\"abba\"\n) == \"aba\"\nassert solution(\n\"ecoosdcefr\"\n) == \"codeforces\"\nassert solution(\n\"abracadabra\"\n) == \"abracadabra\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abac') == 'aac'\nassert solution('abc') == 'b'\nassert solution('abba') == 'aba'\nassert solution('ecoosdcefr') == 'codeforces'\nassert solution('ecoo') == 'codeforces'\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abac\") == 'aac'\nassert solution(\"abc\") == 'b'\nassert solution(\"abba\") == 'aba'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"bbb\") == \"bbb\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\"\"\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"abracadabra\") == \"abracadabra\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 'b'"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == 'a'\nassert solution('27') == 'a'\nassert solution('18279') == 'a'\nassert solution('475256') == 'aaaa'\nassert solution('10000001') == 'aa'\n\nprint(solution(stdin.readline().strip()))\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 'b'"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"b\"\n\"\"\"\n\n\"\"\"\nLet\u2019s play with the idea of searching for the smallest possible number. \nFor this, we will use the binary search algorithm.\n\nThe following pseudocode will help you to implement the binary search algorithm:\n\n    define the function binary_search(number)\n        if the number is found\n            return the number\n        else\n            return\n        \n            calculate the mid_number\n            calculate the mid_number\n            if the number is bigger than the mid_number\n                reduce the search range to the first half of the given range\n            else\n                reduce the search range to the second half of the given range\n\nThis implementation of the binary search algorithm is a good start.\n\nTo make it more efficient, we can calculate the mid_number at the beginning of each iteration, and use it to define the boundaries of the search range.\n\nTo do that, we can replace lines 6 and 7 of the pseudocode with the following code:\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"b\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 'b'\n\"\"\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6') == 'z'\nassert solution('20') == 'zz'\nassert solution('18277') == 'zzz'\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\n\nn = int(sys.argv[1])\n\nalphabet = 'abcdefghijklmnopqrstuvwxyz'"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('N') == 'a'\nassert solution('2') == 'b'\n\"\"\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == 'b'\nassert solution('6\\n') == 'zz'\n\"\"\""
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"to be or not to be\") == \"12\"\nassert solution(\"a ab a a b ab a a b c\") == \"13\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\nto be or not to be\\n') == '12'\n\nassert solution('10\\na ab a a b ab a a b c\\n') == '13'\n\nassert solution('6\\naa bb aa aa bb bb\\n') == '11'\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a ab a a b ab a a b c\") == \"13\"\nassert solution(\"aa bb aa aa bb bb\") == \"11\"\nassert solution(\"to be or not to be\") == \"12\"\n\n\"\"\"\nimport re"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\nto be or not to be\\n\") == '12'\nassert solution(\"10\\na ab a a b ab a a b c\\n\") == '13'\nassert solution(\"6\\naa bb aa aa bb bb\\n\") == '11'\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"a ab a a b ab a a b c\") == \"a AAAB aa AB bb\""
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('to be or not to be') == 'TB or not TB'\nassert solution('a ab a a b ab a a b c') == 'a AAAB AAAB c'\nassert solution('aa bb aa aa bb bb') == 'AB aa AB bb'\n\nprint(solution('to be or not to be')) # -> 12\nprint(solution('a ab a a b ab a a b c')) # -> 13\nprint(solution('aa bb aa aa bb bb')) # -> 11\n\n'''\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('to be or not to be') == 'TB or not TB'\nassert solution('a ab a a b ab a a b c') == 'a AAAB AAAB c'\nassert solution('aa bb aa aa bb bb') == 'AB aa AB bb'\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"a ab a a b ab a a b c\") == \"a AAAB aa AB bb\"\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 2000 2000 2\\n') == '4000\\n2 2'\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 2000 2000 2\\n') == '4000\\n2 2'\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2') == '20\\n3 2 3'\nassert solution('5 1\\n1 1 1 1 1') == '1\\n5'\nassert solution('4 2\\n1 2000 2000 2') == '4000\\n2 2'"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\\n2 2\"\n\nimport math\nfrom typing import List, Tuple\n\n\nclass Problem:\n    def __init__(self, difficulties: List[int]):\n        self.difficulties = difficulties\n\n    def __repr__(self):\n        return str(self.difficulties)\n\n    @classmethod\n    def from_stdin(cls) -> 'Problem':\n        return cls([int(i) for i in input().split(' ')])\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\"\n\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 2000 2000 2') == '4000'\n\n\"\"\"\n\nfrom typing import List\n\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\n\nclass Node:\n    def __init__(self, item):\n        self.item = item\n        self.next = None\n\n    def __str__(self):\n        return str(self.item)\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def add(self, item):\n        node = Node(item)\n        if self.head is None:\n            self.head = node\n            return\n        last = self.head\n        while last.next:\n            last = last.next\n        last.next = node\n\n    def __str__(self):\n        result = []\n        last = self.head\n        while last:\n            result.append(str(last.item))\n            last = last.next\n        return''.join(result)\n\n    def __iter__(self):\n        node = self.head\n        while node is not None:\n            yield node\n            node = node.next\n\n    def __len__(self):\n        length = 0\n        last = self.head\n        while last is not None:\n            length += 1\n            last = last.next\n        return length\n\n    def __getitem__(self, index):\n        if self.head is None:\n            return None\n        last = self.head\n        while index > 0:\n            last = last.next\n            index -= 1\n        return last\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 2000 2000 2\") == \"4000\\n2 2\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\\n2 2\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2') == '20'\nassert solution('5 1\\n1 1 1 1 1') == '1'\nassert solution('4 2\\n1 2000 2000 2') == '4000'\n\n\"\"\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2\\n') == '20'\nassert solution('5 1\\n1 1 1 1 1\\n') == '1'\nassert solution('4 2\\n1 2000 2000 2\\n') == '4000'\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -1 1 -1 1 -1 1 1 -1 -1\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -1 1 -1 1 -1 1 1 -1 -1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 -2 3 -9 2') == '0'\nassert solution('5 -1 3 -9 2') == '3'\nassert solution('9 -1 1 -1 1 -1 1 1 -1 -1') == '6'\nassert solution('8 -5 -11 -15 10 5 4 -4') == '3'\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 -5 3 2') == '1'\nassert solution('5\\n4 -2 3 -9 2') == '0'\nassert solution('9\\n-1 1 -1 1 -1 1 1 -1 -1') == '6'\nassert solution('8\\n16 -5 -11 -15 10 5 4 -4') == '3'\n\"\"\""
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n1 -5 3 2\n''') == '1'\nassert solution('''5\n4 -2 3 -9 2\n''') == '0'\nassert solution('''9\n-1 1 -1 1 -1 1 1 -1 -1\n''') == '6'\nassert solution('''8\n16 -5 -11 -15 10 5 4 -4\n''') == '3'"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 -2 3 -9 2') == '0'\nassert solution('5 -2 3 -9 2') == '0'\nassert solution('9 -1 1 -1 1 -1 1 1 -1 -1') == '3'\nassert solution('8 -5 -11 -15 10 5 4 -4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 -5 3 2') == '1'\nassert solution('5 -2 3 -9 2') == '0'\nassert solution('9 -1 1 -1 1 -1 1 1 -1 -1') == '6'\nassert solution('8 -5 -11 -15 10 5 4 -4') == '3'\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\n\n\"\"\"\nfrom typing import Tuple, List\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 -5 3 2\") == \"1\"\nassert solution(\"5\\n4 -2 3 -9 2\") == \"0\"\nassert solution(\"9\\n-1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8\\n16 -5 -11 -15 10 5 4 -4\") == \"3\"\n\n\n\n\"\"\"\n\n\n\"\"\"\n(1)\n\n\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0434\u043b\u044f \u0440\u0435\u0437\u0430\u043b\u044c\u0442\u0430\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043c\u043e\u0436\u0435\u0442 \u0434\u043e\u0431\u0440\u0430\u0442\u044c \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u0440\u0430\u0437\u0440\u0435\u0437\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u0434\u0432\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u0438\u043d\u043e\u0439 L, \n\u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 S \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443. \n\u041f\u0440\u0438\u043c\u0435\u0440: \u0435\u0441\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432: a[1..n] \u0438 \u0441\u0442\u0440\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u0434\u0430\u0451\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u043e\u0442 1 \u0434\u043e n. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \n\u043a\u043e\u0433\u0434\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0435 \u043e\u0441\u0442\u0430\u043d\u0435\u0442\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043d\u0430\u0434\u043e \u0432\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u043d\u0430\u0447\u0430\u043b\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0438\u043c\u0432\u043e\u043b $d$, \u0430 \u0432 \u043a\u043e\u043d\u0435\u0446 \u0441\u0442\u0440\u043e\u043a\u0438 \u2014 \u0441\u0438\u043c\u0432\u043e\u043b $a$. \n\u041f\u0440\u0438\u043c\u0435\u0440: \u0435\u0441\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 a[1..n], \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 $1$ \u0438 $2$ (\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0442\u043e\u044f\u0442 \u0432 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u043c \u043c\u0435\u0441\u0442\u0435), \n\u0432 \u0441\u0442\u0440\u043e\u043a\u0435 S \u043d\u0435 \u043e\u0441\u0442\u0430\u043d\u0435\u0442\u0441\u044f \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0430\u0434\u043e \u0432\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0438\u043c\u0432\u043e\u043b $d$, \u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 S \u043e\u0441\u0442\u0430\u043d\u0435\u0442\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b $a$.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b:\n\nsolution(\"1 2\") == 0\nsolution(\"1 2 3\") == 1\nsolution(\"1 2 3 4\") == 1\nsolution(\"1 2 3 4 5\") == 2\nsolution(\"1 2 3 4 5 6\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 -5 3 2\") == \"1\"\nassert solution(\"4\\n1 -5 3 2\") == \"0\"\nassert solution(\"9\\n-1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8\\n16 -5 -11 -15 10 5 4 -4\") == \"3\"\nassert solution(\"8\\n-1 1 -1 1 -1 1 1 -1 -1\") == \"0\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n2\n1\n10''') == '''0\n2\n9\n10'''\nassert solution('''5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000''') == '''0\n2\n10\n1000000000\n2000000000'''"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == '0'\nassert solution(\"1 100\") == '0'\nassert solution(\"2 2\") == '0'\nassert solution(\"5 5\") == '0'\nassert solution(\"1 100\") == '0'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 100\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"3 5\") == \"2\"\nassert solution(\"100 100\") == \"0\"\nassert solution(\"100 1000000000\") == \"2000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3\n1 2\n3 4\n9 8\n1 1\n1 1000000000\"\"\") == \"\"\"0\n2\n10\n1000000000\"\"\"\n\nassert solution(\"\"\"2\n5 10\n2 1000000000\n1 1000000000\"\"\") == \"\"\"0\n2\n10\"\"\"\n\nassert solution(\"\"\"1\n5 10\n1 1000000000\"\"\") == \"\"\"0\n2\"\"\"\n\nassert solution(\"\"\"3\n1 2\n3 4\n9 8\n1 1\n1 1000000000\"\"\") == \"\"\"0\n2\n10\n1000000000\"\"\"\n\nassert solution(\"\"\"2\n5 10\n2 1000000000\n1 1000000000\"\"\") == \"\"\"0\n2\n10\"\"\""
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10\\n5 10\\n4 8\") == \"8\\n5\"\nassert solution(\"4 10\\n1 1\\n2 2\\n3 3\") == \"1\\n2\\n0\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n\"\"\") == \"\"\"\n0\n2\n10\n1000000000\n2000000000\n\"\"\"\n\n\"\"\"\nYou have to maximize the sum of absolute differences between adjacent (consecutive) elements.\n\nConstraints\n\n1 <= t <= 10^4\n1 <= n <= 10^9\n1 <= m <= 10^9\n\nExample\nInput\n4\n1 3\n2 5\n3 8\n4 2\n1 10\n2 1\n5 7\n10 10\n1 10000000\n2 1000000000\n5 1000000000\n\nOutput\n0\n2\n10\n1000000000000000\n\"\"\"\nfrom collections import deque\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 100\") == \"0\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"5 5\") == \"10\"\nassert solution(\"2 1000000000\") == \"2000000000\"\nassert solution(\"1 1000000000\") == \"1000000000\"\n\nprint('Success')"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 100\") == '2'\nassert solution(\"1 100\") == '0'\nassert solution(\"2 2\") == '0'\nassert solution(\"5 5\") == '0'\nassert solution(\"1 1000000000\") == '1'\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101') == '4'\nassert solution('13') == '6'\nassert solution('1337') == '8'\nassert solution('133333') == '6'\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n') == '2'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('101') == '4'\nprint(solution('101'))"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_solution\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('101\\n7') == '4'\nassert solution('101\\n77') == '7'\nassert solution('101\\n777') == '7'\n\nprint(solution('101\\n7'))\nprint(solution('101\\n77'))\nprint(solution('101\\n777'))\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101\") == \"4\"\nassert solution(\"7\") == \"1\"\nassert solution(\"1011\") == \"6\"\nassert solution(\"7777\") == \"7\"\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101') == '4'\n\"\"\"\n\nK = int(stdin.readline().rstrip())\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('101') == '4'\n\nsolution('101')\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\"\n\nK = int(input())\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('101') == '4'\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4') == '4'\nassert solution('5 5') == '1'\nassert solution('15 8') == '48'\n\"\"\""
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"1\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"15 8\") == \"48\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\") == \"4\"\n\nassert solution(\"5 5\") == \"1\"\n\nassert solution(\"15 8\") == \"48\""
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n2 4 5 3 1') == '4'\nassert solution('5 5\\n1 2 3 4 5') == '1'\nassert solution('15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9') == '48'\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 4') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\", \"2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\", \"1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\", \"1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n\n\"\"\"\nimport math\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 4\n2 4 5 3 1\n''') == '4'\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4') == '4'\n\"\"\"\n\nfrom typing import List, Optional\nfrom collections import Counter\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\", \"2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\", \"1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\", \"1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\\n\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\\n\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"-1\"\nassert solution(\"5 1\\n5 5 5 5 5\\n\") == \"2\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n\n\"\"\""
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == 4\nassert solution('7 10\\n5 5 5 5 5') == 2\nassert solution('5 15\\n5 5 5 5 5') == -1\nassert solution('5 26\\n5 5 5 5 5') == -1\nassert solution('5 15\\n5 5 5 5 5') == 2\n\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"5 15\") == \"2\"\nassert solution(\"5 26\") == \"-1\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 16\") == \"2\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\""
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == 4\nassert solution('7 10\\n1 3 4 2 1 4 2') == 2\nassert solution('5 15\\n5 5 5 5 5') == 1\nassert solution('5 26\\n5 5 5 5 5') == -1\nassert solution('5 36\\n5 5 5 5 5') == 2\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\\n\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\\n\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"2\"\n\"\"\"\n\nn, m = list(map(int, input().split()))\na = list(map(int, input().split()))\nd = dict()\n\nfor i in range(1, n + 1):\n    d[i] = 0\n\nfor x in a:\n    d[x] += 1\n\ns = set()\nfor k, v in d.items():\n    s.add(k)\n    if k + 1 in s and k + 2 in s:\n        break"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nlst = [0] * m\nfor i in range(n):\n    lst[i] = a[i]\nlst.sort(reverse=True)\nsum = 0\nday = 0\nfor i in range(n):\n    if lst[i] > sum + 1:\n        break\n    sum += lst[i]\n    day += 1\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 15\") == \"-1\"\nassert solution(\"5 26\") == \"2\"\nassert solution(\"5 16\") == \"2\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\nassert solution(\"1 3 6 9 12\") == \"0\"\nassert solution(\"14 5 1\") == \"0\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n24 21 14 10\") == \"3\"\nassert solution(\"2\\n500 500\") == \"0\"\nassert solution(\"3\\n14 5 1\") == \"-1\"\nassert solution(\"5\\n1 3 6 9 12\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n24 21 14 10\") == \"3\"\nassert solution(\"2\\n500 500\") == \"0\"\nassert solution(\"3\\n14 5 1\") == \"-1\"\nassert solution(\"5\\n1 3 6 9 12\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 21 14 10\\n') == '3'\nassert solution('2 500 500\\n') == '0'\nassert solution('5 1 3 6 9 12\\n') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 21 14 10') == '3'\nassert solution('500 500') == '0'\nassert solution('3 5 1') == '-1'\nassert solution('5 1 3 6 9 12') == '1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"3 5 1\") == \"-1\"\nassert solution(\"1 3 6 9 12\") == \"1\"\n\n\"\"\"\n\n\"\"\"\n\u0414\u0430\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430. \u041d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0439\u0442\u0435 \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n\n\u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e substring().\n\"\"\""
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n24 21 14 10\") == \"3\"\nassert solution(\"2\\n500 500\") == \"0\"\nassert solution(\"5\\n1 3 6 9 12\") == \"-1\"\n\"\"\"\nimport math\nimport sys\nimport re\n\nsys.stdin = open('./test_case.txt')"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 24 21 14 10') == 3\nassert solution('500 500') == 0\nassert solution('1 3 6 9 12') == -1\nassert solution('14 5 1') == 1\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 24 21 14 10\") == 3\nassert solution(\"500 500\") == 0\nassert solution(\"1 3 6 9 12\") == -1\nassert solution(\"5 1 3 6 9 12\") == 1\nassert solution(\"1 1\") == -1"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n24 21 14 10\") == \"3\"\nassert solution(\"2\\n500 500\") == \"0\"\nassert solution(\"3\\n14 5 1\") == \"-1\"\nassert solution(\"5\\n1 3 6 9 12\") == \"1\""
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n1 2 15 15 15') == '5'\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\\n\") == \"5\"\n\"\"\"\n\nimport collections\nfrom functools import lru_cache"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 10 100 1000\\n\") == \"4\"\nassert solution(\"5 2\\n1 2 15 15 15\\n\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\\n\") == \"2\"\n\"\"\"\n\nn,k = map(int,input().split())\na = list(map(int,input().split()))\n\na.sort(reverse=True)\n\nmax_skill = 0\nmax_team = 0\n\nfor i in range(k):\n    max_skill += a[i]\n    if i%2 == 1:\n        max_skill -= 5\n    if max_skill > 0:\n        max_team += 1\n\nprint(max_team)\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n1 2 15 15 15') == 5\nassert solution('6 1\\n36 4 1 25 9 16') == 2\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\n\"\"\"\n\nN, K = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\narr.sort(reverse=True)\nr = []\ncnt = 0\n\nfor i in range(K):\n    r.append(arr[i])\n\ncnt += K\nwhile N - cnt >= K:\n    cnt += K\n    if cnt < N:\n        r.append(arr[cnt])\n\nprint(len(r))"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1 2 15 15 15') == 5\n\"\"\"\n\nn, k = map(int, input().split(' '))\narr = list(map(int, input().split(' ')))\n\nmin_diff = 5\nteam_count = 0\nteam_size = 1\n\nfor i in range(n):\n    team_size += 1\n    if arr[i] - team_size > min_diff:\n        team_count += 1\n        team_size = 1\n        min_diff = 5\n\nprint(team_count)\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 10 100 1000\") == 4\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n3 9\\n\") == \"5\"\nassert solution(\"3 1\\n2 2\\n1 3\\n\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == ''\nassert solution('1 2 3 4 5') == ''\nassert solution('1 2 3 4 5 6') == ''\nassert solution('1 2 3 4 5 6 7') == ''\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n1 2 15 15 15') == '5'\n\nassert solution('6 1\\n36 4 1 25 9 16') == '2'\nassert solution('4 4\\n1 10 100 1000') == '4'\n\nassert solution('5 3\\n1 2 15 15 15') == '5'\nassert solution('6 3\\n36 4 1 25 9 16') == '2'\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\\n\") == '8'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == '8'\n\"\"\"\n\nimport sys\n\nN, K, M = [int(x) for x in sys.stdin.readline().split()]\nA = [int(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == '8'\n\"\"\"\n\nimport sys\n\ninput_file = sys.stdin\n\nn, k, m = map(int, input_file.readline().split())\n\ntotal = 0\npoints = 0\nfor i in range(n - 1):\n    a = int(input_file.readline())\n    points += a\n    total += a\n    if points > m:\n        break\n\nprint(points) if points >= m else print(-1)\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\nprint(solution(\"5 10 7\\n8 10 3 6\"))"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == 8\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n\nfrom typing import List\nimport unittest\n\n\nclass Solution:\n    def solve(self, stdin: str) -> int:\n        n, k, m = [int(x) for x in stdin.split()]\n        scores = [int(x) for x in stdin.split()][1:]\n        # print(n, k, m, scores)\n        res = sum(scores)\n        scores.sort()\n        for i in range(m):\n            res -= scores.pop()\n            if res < k:\n                return res\n        return -1\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution()\n\n    def test_solution(self):\n        cases = [\n            [\"5 10 7\", \"8 10 3 6\"],\n            [\"10 10 10\", \"8 10 3 6\"],\n            [\"4 10 4\", \"8 10 3 6\"],\n        ]\n        for case in cases:\n            self.assertEqual(self.solution.solve(case[0]), case[1])\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == '8'\nassert solution('3 5 3\\n6 9 6') == '5'\nassert solution('3 5 3\\n7 7 7') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3\\n2\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\"\n\"\"\"\n\nN, K, Q = [int(i) for i in input().split()]\nscores = [K] * N\nfor i in range(Q):\n    A = int(input())\n    scores[A - 1] -= 1\n\nfor score in scores:\n    if score <= 0:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\nassert solution(\"5 3 4\\n1\\n2\\n2\\n2\\n1\") == \"Yes\\nYes\\nNo\\nYes\\nYes\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n\"\"\"\n\n\nimport re\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 3\\n3\\n1\\n3\\n2\\n\") == 'No\\nNo\\nYes\\nNo\\nNo\\n'\nassert solution(\"5 3 2\\n3\\n1\\n3\\n2\\n\") == 'No\\nNo\\nYes\\nNo\\nNo\\n'\nassert solution(\"3 3 3\\n3\\n1\\n3\\n2\\n\") == 'No\\nNo\\nYes\\nNo\\nNo\\n'\n\n'''\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5 1 1\\n1\\n3\\n2\\n\\n') == 'No\\nNo\\nYes\\nNo\\nNo'\n\n-------------\n\nOne day three best friends Petya, Vasya and Tonya decided to form a team and take part in programming contests. Participants are usually offered several problems during programming contests. Long before the start the friends decided that they will implement a problem if at least two of them are sure about the solution. Otherwise, the friends won't write the problem's solution.\nThis contest offers its participants three problems, each of which is guaranteed to be so sure about the right answer, that each friend will always implement it. Of course, each friend knows that the right answer may be different in different cases, so each friend wants to check each problem and consider different right answers.\nThe friends are currently discussing which problems they are sure about and which ones they are not sure about. The problems are stored in arrays A, B and C of size N each, where N is equal to 3. The i-th element of array A (0 \\leq i \\leq 2) contains the right answer for the i-th problem on the first line, B (0 \\leq i \\leq 2) on the second and C (0 \\leq i \\leq 2) on the third line.\nUnfortunately, the friends are too busy with coding and indexing, so they've filled their programs with the problems' solutions. The i-th line of the program should contain the i-th problem's solution.\nThat is, the i-th line should contain the characters '1' if the i-th problem is sure for the friend Petya, '2' if the i-th problem is sure for the friend Vasya and '3' if the i-th problem is sure for the friend Tonya. Otherwise, the i-th line of the program should contain the characters '0'.\nHelp the friends check the problems.\n\n-----Constraints-----\n - Each array A, B and C is guaranteed to be of the same size N.\n - Each element of arrays A, B and C is guaranteed to be an integer in the range [0; 3].\n - It's guaranteed that at least two elements in each of the arrays are equal to 1.\n\n-----Input-----\nThe first line contains integers N, M and Q (1 \\leq N, M, Q \\leq 10^5) separated by single spaces.\nThe next N lines contain the description of the problems in the format:\nA_1 A_2 A_3\nB_1 B_2 B_3\nC_1 C_2 C_3\n\n-----Output-----\nThe next Q lines should contain the check results for each of the problems, in the format:\n1 2 1 3\n0 0 2 0\n1 1 1 1\n0 2 0 0\n\nIn the i-th problem, the i-th line should contain the characters '1', '2' or '3' (or '0' if the problem is sure for nobody).\n\nSample Input:\n3 3 4\n2 1 2\n3 3 3\n3 1 1\n\nSample Output:\n2 2 3\n2 2 3\n1 1 1\n3 1 1\n\n- The first line contains the values of N, M and Q.\n- The next N lines contain the descriptions of the problems.\n- The next Q lines should contain the check results for each of the problems.\n\n- The first character of each line should be 1 if Petya is sure about the solution for the i-th problem, 2 if Vasya is sure about the solution, and 3 if Tonya is sure about the solution. Otherwise, the character should be 0.\n\n-------------\n\nOne day three best friends Petya, Vasya and Tonya decided to form a team and take part in programming contests. Participants are usually offered several problems during programming contests. Long before the start the friends decided that they will implement a problem if at least two of them are sure about the solution. Otherwise, the friends won't write the problem's solution.\nThis contest offers its participants three problems, each of which is guaranteed to be so sure about the right answer, that each friend will always implement it. Of course, each friend knows that the right answer may be different in different cases, so each friend wants to check each problem and consider different right answers.\nThe friends are currently discussing which problems they are sure about and which ones they are not sure about. The problems are stored in arrays A, B and C of size N each, where N is equal to 3. The i-th element of array A (0 \\leq i \\leq 2) contains the right answer for the i-th problem on the first line, B (0 \\leq i \\leq 2) on the second and C (0 \\leq i \\leq 2) on the third line.\nUnfortunately, the friends are too busy with coding and indexing, so they filled their programs with the problems' solutions. The i-th line of the program should contain the i-th problem's solution.\nThat is, the i-th line should contain the characters '1' if the i-th problem is sure for the friend Petya, '2' if the i-th problem is sure for the friend Vasya and '3' if the i-th problem is sure for the friend Tonya. Otherwise, the i-th line of the program should contain the characters '0'.\nHelp the friends check the problems.\n\n-----Constraints-----\n - Each array A, B and C is guaranteed to be of the same size N.\n - Each element of arrays A, B and C is guaranteed to be an integer in the range [0; 3].\n - It's guaranteed that at least two elements in each of the arrays are equal to 1.\n\n-----Input-----\nThe first line contains integers N, M and Q (1 \\leq N, M, Q \\leq 10^5) separated by single spaces.\nThe next N lines contain the description of the problems in the format:\nA_1 A_2 A_3\nB_1 B_2 B_3\nC_1 C_2 C_3\n\n-----Output-----\nThe next Q lines should contain the check results for each of the problems, in the format:\n1 2 1 3\n0 0 2 0\n1 1 1 1\n0 2 0 0\n\nIn the i-th problem, the i-th line should contain the characters '1', '2' or '3' (or '0' if the problem is sure for nobody).\n\nSample Input:\n3 3 4\n2 1 2\n3 3 3\n3 1 1\n\nSample Output:\n2 2 3\n2 2 3\n1 1"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\nassert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n4\\n\") == \"No\\nNo\\nNo\\nNo\\nNo\\nYes\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n6 3 4\n3\n1\n3\n2\n''') == '''\nNo\nNo\nYes\nNo\nNo\nNo\n'''\n\n'''\nWrite a program that receives a sequence of integers on a single line and prints it, but prints it in such a way that in each line it contains a single integer.\n\n-----Constraints-----\n - All values in input are integers.\n\n-----Input-----\nThe first line contains a single integer n (1 \\leq n \\leq 100) \u2014 the number of integers.\nThe next line contains n integers a_1,a_2,\u2026,a_n (0 \\leq a_i \\leq 1000) \u2014 numbers in the sequence.\n\n-----Output-----\nPrint the sequence in such a way that in each line it contains a single integer.\n\n-----Sample Input-----\n3\n3\n7\n2\n10\n\n-----Sample Output-----\n3\n7\n2\n10\n'''\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6 3 4\n3\n1\n3\n2\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('''\n6 3 4\n3\n1\n3\n2\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('''\n6 3 4\n3\n1\n3\n2\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('''\n6 3 4\n3\n1\n3\n2\n3\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('''\n6 3 4\n3\n1\n3\n2\n3\n1\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n010\"\nassert solution(\"3 4\\n0 0 0\\n1 0 1\\n1 1 1\\n\") == \"YES\\n010\\n0000\"\nassert solution(\"3 4\\n1 1 1\\n0 0 0\\n0 0 0\") == \"YES\\n001\\n101\"\nassert solution(\"3 3\\n0 0 0\\n0 0 0\\n1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\n\"\"\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n1 1\\n0 1') == 'YES\\n10'\nassert solution('3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1') == 'YES\\n010\\n0000'"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == 'YES\\n10'\nassert solution(\"3 4\\n0 0 0\\n1 0 1\\n1 1 1\\n\") == 'YES\\n010\\n0000'\nassert solution(\"3 4\\n0 0 0\\n1 0 1\\n1 1 1\\n\") == 'NO'\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\\n\") == 'NO'\nassert solution(\"2 2\\n1 1\\n0 1\") == 'YES\\n010'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n\nprint(\"Successfully solved.\")\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\") == \"YES\\n010\\n0000\"\n\"\"\""
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == 'YES\\n00\\n10'\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == 'YES\\n010\\n0000'\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == 'NO'\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 'Yes'\nassert solution('5') == 'Yes'\nassert solution('1') == 'Yes'\nassert solution('6') == 'Yes'\nassert solution('4') == 'Yes'\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"121\") == \"Yes\"\nassert solution(\"373\") == \"Yes\"\nassert solution(\"436\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1234\") == \"Yes\"\nassert solution(\"2341\") == \"No\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nprint('Test pass.')\n\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\n\"\"\"\n\n\"\"\"\nSolution for this problem\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0\\n') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1\\n') == '3'\n\nassert solution('10 2 2\\n1 0 0 1 0 0 1 0 0 1\\n') == '6'\nassert solution('10 3 1\\n1 0 0 1 0 0 1 0 0 1\\n') == '8'\nassert solution('10 4 1\\n1 0 0 1 0 0 1 0 0 1\\n') == '4'\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0\\n') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1\\n') == '3'\nassert solution('6 2 100\\n0 0 0 1 0 1\\n') == '0'\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\nassert solution('6 2 5\\n1 0 0 1 0 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\\n\") == 5\n\"\"\"\n\nn, b, a = [int(x) for x in input().split()]\ns = [int(x) for x in input().split()]\n\nc = 0\nb = max(b, a)\nfor i in range(n):\n    c += s[i]\n    if c > b:\n        c = s[i]\n\nprint(c)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\"\n\nfrom collections import namedtuple\n\nPoint = namedtuple('Point', 'x y')\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('5 2 1') == '5'\nassert solution('6 2 1') == '3'\nassert solution('5 2 3') == '0'\nassert solution('7 2 3') == '2'\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(8-7+6-5+4-3+2-1-0) == 4\nassert solution(2+2) == -46\nassert solution(112-37) == 375\n\nprint(solution(8-7+6-5+4-3+2-1-0))\nprint(solution(2+2))\nprint(solution(112-37))\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\nInput\n-16\n\nOutput\n4\n\nInput\n-1\n\nOutput\n0\n\nInput\n0\n\nOutput\n0\n\nInput\n1\n\nOutput\n0\n\nInput\n4-1\n\nOutput\n3\n\nInput\n8-7-2\n\nOutput\n0\n\nInput\n8-7-2-1\n\nOutput\n1\n\nInput\n8-7-2-1-0\n\nOutput\n1\n\nInput\n8-7-2-1-0-1\n\nOutput\n1\n\nInput\n8-7-2-1-0-1-0\n\nOutput\n0\n\"\"\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"0\"\nassert solution(\"112-37\") == \"375\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n\"\"\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\n\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\n\"\"\""
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('10 4') == 'YES'\nassert solution('13 4') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('10 4') == 'YES'\nassert solution('13 4') == 'NO'"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"2 4\") == \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == 'YES'\nassert solution(\"10 4\") == 'YES'\nassert solution(\"13 4\") == 'NO'"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"YES\\n3 1\\n1 3\\n3 2\\n2 3\\n\"\nassert solution(\"10 4\") == \"YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n\"\nassert solution(\"13 4\") == \"NO\\n\"\nassert solution(\"20 4\") == \"NO\\n\"\nassert solution(\"100 4\") == \"NO\\n\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 3\n''') == 'YES\\n3 1\\n1 3\\n3 2\\n2 3\\n'\n\nassert solution('''10 4\n''') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n'''\n\nassert solution('''13 4\n''') == 'NO\\n'''\n\nassert solution('''4 3\n''') == 'YES\\n3 1\\n1 3\\n3 2\\n2 3\\n'\nassert solution('''4 4\n''') == 'NO\\n'''\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('10 4') == 'YES'\nassert solution('13 4') == 'NO'\nassert solution('2 3') == 'NO'\nassert solution('3 2') == 'NO'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1 3 10 1') == '18'\n\"\"\""
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\\n\") == '18'\nassert solution(\"6 1 5\\n10 30 30 70 10 10\\n\") == '-1'\nassert solution(\"4 1 5\\n1 100 1 1\\n\") == '100'\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\") == \"-1\"\nassert solution(\"4 1 5\") == \"100\"\n\"\"\"\n\nn, k, x = [int(x) for x in input().split()]\nlst = [int(x) for x in input().split()]\nl = len(lst)"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"100\"\nassert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\nassert solution(\"2 3 2\\n100 100\") == \"-1\"\nassert solution(\"1 1 1\\n1\") == \"1\"\n\n\"\"\"\nimport sys\n\ninputs = sys.stdin.readlines()\n\nn, k, x = list(map(int, inputs[0].split()))\na = list(map(int, inputs[1].split()))"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\\n\") == \"18\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 1\\n1 100 1 1') == '100'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('5 2 3\\n5 1 3 10 1') == '18'\nassert solution('10 5\\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10') == '10'\nassert solution('10 5\\n10 10 10 10 10 10 10 10 10 10 10 10 10 10') == '10'\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\\n\") == \"18\"\n\"\"\""
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('4 3 1\\n1 100 1 1') == '100'\n\"\"\"\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 1\\n1 10 2 1') == '10'\nassert solution('4 5 2\\n1 2 5 2 1') == '6'\nassert solution('3 2 3\\n1 10 2 1') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('100') == 100\nassert solution('01') == 1\nassert solution('101101010') == 10\nassert solution('100001') == 1\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1100100') == 3\nassert solution('0011') == 1\nassert solution('10111') == 3\nassert solution('101010') == 2\nassert solution('111111111') == 15\n\n\"\"\""
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('00100') == 3\nassert solution('11110') == 3\nassert solution('111010') == 4\nassert solution('1110010') == 5\nassert solution('11100111') == 21\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"0111010\") == 5\nassert solution(\"0111010\") == 5\nassert solution(\"1110110\") == 21\nassert solution(\"1110110\") == 21\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0' * 7) == '21'\nassert solution('0' * 9) == '15'\nassert solution('1' * 9) == '4'\n\n\"\"\""
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1101010') == '15'\nassert solution('0111010') == '8'\nassert solution('1110111') == '17'\nassert solution('1111011') == '19'\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"010\") == \"1\"\nassert solution(\"00100\") == \"3\"\nassert solution(\"111111\") == \"0\"\nassert solution(\"10101010\") == \"11\"\nassert solution(\"101010\") == \"2\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"10101\") == \"5\"\nassert solution(\"10111\") == \"6\"\nassert solution(\"11111\") == \"5\"\nassert solution(\"11101\") == \"4\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"10110\") == 0\nassert solution(\"01110\") == 0\nassert solution(\"10010\") == 1\nassert solution(\"10101\") == 0\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('00100') == 3\nassert solution('10000') == 10\nassert solution('101010') == 10\nassert solution('11111') == 1\n\"\"\"\nimport sys"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"hazel\") == \"No\"\nassert solution(\"nazel\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"No\"\nassert solution(\"hello\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"No\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\n\"\"\"\n\n\"\"\"\nSOLUTION 1\n\"\"\"\n\nS = input()\nT = input()\ns_list = []\nt_list = []\n\nfor i in S:\n    s_list.append(i)\n\nfor i in T:\n    t_list.append(i)"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('www') == 'No'\nassert solution('zzz') == 'No'\nassert solution('zzzz') == 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abc', 'abc') == 'Yes'\nassert solution('abc', 'cba') == 'No'\nassert solution('abc', 'bac') == 'No'\nassert solution('', 'bac') == 'No'\nassert solution('abcccc', 'ac') == 'Yes'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"azzel\"\n) == \"Yes\"\nassert solution(\n    \"apple\"\n) == \"Yes\"\nassert solution(\n    \"abcd\"\n) == \"No\"\nassert solution(\n    \"zzzz\"\n) == \"Yes\"\nassert solution(\n    \"ababb\"\n) == \"Yes\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('failure') == 'No'\n\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('aaaa') == 'Yes'\nassert solution('baa') == 'No'\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"moo\") == \"No\"\n\"\"\"\n\nS, T = input(), input()\nprint(\"Yes\" if S.replace(\"z\", \"p\").replace(\"e\", \"l\").replace(\"p\", \"e\").replace(\"l\", \"z\") == T else \"No\")\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n10\n10\n20\n20\n15''') == '110'\nassert solution('''3\n20\n20\n30''') == '0'\nassert solution('''5\n10\n10\n20\n30\n20''') == '110'\nassert solution('''7\n30\n20\n20\n30\n20\n20\n30''') == '40'\nassert solution('''5\n10\n10\n20\n20\n30''') == '110'\n\nprint('Success')"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 4\") == \"20\"\nassert solution(\"2 2 2\") == \"8\"\nassert solution(\"2 3 1\") == \"12\"\nassert solution(\"4 4 4\") == \"25\"\nassert solution(\"1 1 1\") == \"2\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3 6\") == \"16\"\nassert solution(\"8 5 5\") == \"18\"\nassert solution(\"8 5 6\") == \"11\"\nassert solution(\"8 5 7\") == \"12\"\nassert solution(\"8 4 5\") == \"14\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 5\") == \"10\"\nassert solution(\"3 10 3 10\") == \"8\"\nassert solution(\"4 10 2 7 3\") == \"13\"\nassert solution(\"3 3 5\") == \"7\"\nassert solution(\"3 10 3 10\") == \"8\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''6\n5\n1\n5\n4\n1\n6\n2''') == 'false'\nassert solution('''5\n5\n1\n5\n4\n1\n6\n2''') == 'false'\nassert solution('''5\n5\n1\n5\n4\n1\n6\n2''') == 'false'\nassert solution('''5\n5\n1\n5\n4\n1\n6\n2\n''') == 'false'\nassert solution('''5\n5\n1\n5\n4\n1\n6\n2\n3''') == 'false'\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 10 10\") == \"13\"\nassert solution(\"2 1 10 20\") == \"23\"\nassert solution(\"2 1 10 20 100\") == \"113\"\nassert solution(\"2 1 10 20 100 100\") == \"115\"\nassert solution(\"2 1 10 20 100 100 100\") == \"111\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4 3\") == \"10\"\nassert solution(\"2 2 1\") == \"2\"\nassert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"5 5 5 5 5\") == \"0\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6\") == \"5\"\nassert solution(\"7 13\") == \"15\"\nassert solution(\"8 13\") == \"11\"\nassert solution(\"1 13\") == \"12\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6 7 8 9 10\") == \"30\"\nassert solution(\"1 2 3 4 5 6\") == \"12\"\nassert solution(\"5 5 5 5 5 5\") == \"0\"\nassert solution(\"1 5 3 1 4\") == \"15\"\nassert solution(\"1 1 1 1 1 1\") == \"12\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5 3 6 2 3 1 4\") == \"8\"\nassert solution(\"2 5 3 6 2 3 1 4 1\") == \"12\"\nassert solution(\"1 5 2 6 1 5 3 6 2 2 2 3 6 1 5 3 6 3 2 2 2 4\") == \"32\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 700\") == '3'\nassert solution(\"3 500\") == '3'\nassert solution(\"5 800\") == '1'\n\"\"\"\n\nimport sys\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\n------Solution------\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == '3'\nassert solution('3 500\\n5 800') == '3'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 700\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == 3\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == 3\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_data) == \"3\"\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(2)\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 4 5 5 6\") == \"2\"\nassert solution(\"4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9 2 3 4 2 2 3 2 2 4\") == \"3\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6\\n') == 2\nassert solution('8\\n4 8 8 7 8 4 4 5\\n') == 2\nassert solution('9\\n2 3 4 2 2 3 2 2 4\\n') == 3\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split(' ')))\n\neven = []\nodd = []\n\neven_count = 0\nodd_count = 0\n\nfor i in range(n):\n    if i % 2 == 0:\n        even.append(a[i])\n        even_count += a[i]\n    else:\n        odd.append(a[i])\n        odd_count += a[i]\n\nsum_even = sum(even)\nsum_odd = sum(odd)"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\\n\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\\n\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\\n\") == \"3\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 4 3 3\") == \"1\"\nassert solution(\"10\\n1 2 4 4 4 4 4 4 4 4 4 4\") == \"1\"\nassert solution(\"8\\n1 4 4 4 4 4 4 4 4 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4') == '3'\n\"\"\"\n\nn = int(stdin.readline().strip())\n\nweight = list(map(int, stdin.readline().strip().split(' ')))\ncount = 0\n\nfor i in range(n - 1):\n    if (weight[i] + weight[i + 1]) % 2!= 0:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 2\\n1 100 1 1') == 100\nassert solution('5 1 3\\n1 100 1 1') == -1\nassert solution('5 1 4\\n1 100 1 1') == 100\nassert solution('5 2 4\\n1 100 1 1') == -1\nassert solution('5 2 3\\n1 100 1 1') == 100\n\nprint('The code ran Correctly')\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1 3 3', '5 1 3 10 1') == '18'\nassert solution('6 1 5', '10 30 30 70 10 10') == '-1'\n\"\"\"\n\nn, k, x = map(int, input().split())\nlst = list(map(int, input().split()))\n\nlst.sort(reverse=True)\nmax_sum = 0\n\nfor i in range(n):\n    if k - 1 < i < n - x:\n        max_sum += lst[i]\n        if max_sum > 0:\n            break"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 5') == '100'\nassert solution('6 1 5') == '-1'\n\"\"\"\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\nm = 0\nfor i in range(n - k + 1):\n    if x == 1:\n        m = max(m, a[i] + a[i + k - 1])\n    else:\n        m = max(m, sum([a[j] for j in range(i, i + k)]) / k)\n\nprint(m) if m < max(a) else print(-1)\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\\n\") == \"18\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nimport sys\nimport typing\nimport collections\n\nclass Segment:\n    \"\"\"\n    Model of segment.\n    \"\"\"\n    def __init__(self, start: int, end: int) -> None:\n        self.start = start\n        self.end = end\n\nclass Result:\n    \"\"\"\n    Model of result.\n    \"\"\"\n    def __init__(self) -> None:\n        self.best_sum = sys.maxsize\n        self.best_segment = None"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\"\nassert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\nassert solution(\"1\\n10 10 10 10\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 3\\n1 1 2 1\\n\") == \"3\"\n\nassert solution(\"7 4 5\\n4 1 3 1 1 1 1\\n\") == \"6\"\n\nassert solution(\"7 2 4\\n4 2 1 2 3 4\\n\") == \"-1\"\n\nassert solution(\"5 4 4\\n1 1 1 1 1\\n\") == \"5\"\n\nassert solution(\"1 1\\n10\\n\") == \"10\""
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 1\\n1 100 1 1') == '100'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('5 2 3\\n5 1 3 10 1') == '18'\n\"\"\"\nimport sys\n\nn, k, x = map(int, sys.stdin.readline().split())\narr = list(map(int, sys.stdin.readline().split()))\n\nmax_sum = 0\nsum_of_segment = 0\nfor i in range(n):\n    sum_of_segment += arr[i]\n    if i >= k and sum_of_segment >= x:\n        max_sum = max(max_sum, sum_of_segment)\n        sum_of_segment -= arr[i-k]\n\nprint(max_sum if max_sum >= 0 else -1)\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\") == 100\n\"\"\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11') == \"Yes\"\nassert solution('10') == \"Yes\"\nassert solution('9') == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"No\"\nassert solution(\"5\") == \"Yes\"\nassert solution(\"11\") == \"Yes\"\n\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"11\"))\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"4\") == \"No\"\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n5') == 'Yes'\nassert solution('10\\n15') == 'No'\nassert solution('7\\n9') == 'No'\nassert solution('12\\n13') == 'No'\nassert solution('1\\n1') == 'Yes'\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\") == \"Yes\"\nassert solution(\"13\") == \"No\"\nassert solution(\"0\") == \"Yes\"\nassert solution(\"100\") == \"Yes\"\nassert solution(\"55\") == \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == 'Yes'\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\") == \"Yes\"\nassert solution(\"6\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1) == \"Yes\"\nassert solution(2) == \"Yes\"\nassert solution(4) == \"Yes\"\nassert solution(5) == \"Yes\"\nassert solution(6) == \"Yes\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == 'Yes'\nassert solution('7') == 'Yes'\nassert solution('11') == 'Yes'\nassert solution('15') == 'No'\nassert solution('16') == 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 'Yes'\nassert solution('3') == 'Yes'\nassert solution('4') == 'Yes'\nassert solution('5') == 'No'\nassert solution('6') == 'No'\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n\nfrom typing import List, NamedTuple"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\npoints = []\nfor _ in range(n):\n    points.append(list(map(int, sys.stdin.readline().split())))"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n\") == \"2 2 6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n\n\"\"\"\n\u4eca\u56de\u306f\u3001\u5168\u3066\u306e\u89e3\u7b54\u6642\u9593\u304c\u8a08\u6e2c\u3067\u304d\u3066\u3044\u308b\u304c\u3001\u3059\u3079\u3066\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u898b\u3066\u3044\u308b\u3088\u308a\u3082\u3001\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5834\u6240\u306e\u89e3\u7b54\u6642\u9593\u304c\u6642\u9593\u304c\u304b\u304b\u308b\u3088\u3046\u3060\u3002\n\u305d\u3053\u3067\u306f\u3001\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u89e3\u7b54\u6642\u9593\u306e\u8a08\u6e2c\u3092\u884c\u3046\u3002\n\n\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u89e3\u7b54\u6642\u9593\u306e\u8a08\u6e2c\u3092\u884c\u3046\u306b\u306f\u3001\u8981\u7d20\u6570\u304c\u5927\u304d\u304f\u5909\u308f\u3063\u3066\u3044\u308b\u914d\u5217\u3092\u8a08\u6e2c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u3053\u306e\u3088\u3046\u306b\u3001\u8a08\u6e2c\u3067\u304d\u3066\u3044\u308b\u3068\u306f\u8a00\u3048\u3070\u8a08\u6e2c\u3067\u304d\u3066\u3044\u306a\u3044\u89e3\u7b54\u6642\u9593\u306e\u8a08\u6e2c\u306f\u884c\u308f\u308c\u3066\u3044\u308b\u3002\n\u8a08\u6e2c\u3067\u304d\u3066\u3044\u306a\u3044\u89e3\u7b54\u6642\u9593\u306e\u8a08\u6e2c\u306e\u305f\u3081\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u64cd\u4f5c\u3092\u884c\u3044\u3001\u7d2f\u7a4d\u548c\u3092\u8a08\u7b97\u3057\u3066\u3044\u304f\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\u64cd\u4f5c\n- \u30a8\u30ea\u30a2(\u5019\u88dc\u304b\u3089\u9664\u5916)\n- \u7d2f\u7a4d\u548c\n\n\u3053\u308c\u3089\u306e\u64cd\u4f5c\u3092\u884c\u3063\u3066\u3001\u8a08\u6e2c\u3067\u304d\u3066\u3044\u308b\u3068\u306f\u8a00\u3048\u3070\u8a08\u6e2c\u3067\u304d\u3066\u3044\u306a\u3044\u89e3\u7b54\u6642\u9593\u306e\u8a08\u6e2c\u306f\u884c\u308f\u308c\u3066\u3044\u308b\u3002\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == '2 2 6'\n\n\"\"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(    \"4\\n\"\n        \"2 3 5\\n\"\n        \"2 1 5\\n\"\n        \"1 2 5\\n\"\n        \":\\n\"\n        \"3 2 5\"\n        ) == \"2 2 6\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"4\n1 2 5\n2 1 5\n1 2 5\n3 2 5\n\"\"\") == \"2 2 6\"\n\n\"\"\"\n\u4e88\u60f3\u3055\u308c\u308b\u89e3\u6cd5\n- \u7d20\u76f4\u306b\u6570\u5217\u5168\u63a2\u7d22\u3057\u3066\u307f\u308b\n- \u7121\u7406\u3067\u306f\u306a\u3044\u306e\u3067\u96e3\u3057\u3044\n- \u7d20\u76f4\u306b\u9006\u9806\u7d2f\u7a4d\u548c\u3092\u8003\u3048\u308c\u3070\u826f\u3044\n\"\"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\n\"\"\"\n\n\"\"\"\n\u672c\u89e3\u6cd5\u672c\u8d28\u4e0a\u4e5f\u662f\u62d3\u6251\u7ed3\u6784\uff0c\u5148\u628a\u8fb9\u60c5\u51b5\u6392\u4e00\u6b21\u5e8f\uff0c\u7136\u540e\u628a\u56fe\u7684\u8fb9\uff0c\u7ed3\u70b9\u989c\u8272\uff0c\u7ed3\u70b9\u503c\u90fd\u8bb0\u5f55\u597d\uff0c\u4e0b\u9762\u5199\u4e2a\u540c\u6b65\u8ba1\u7b97\u989c\u8272\u7684\u65b9\u6cd5\n1. \u53ea\u6709\u8bbf\u95ee\u8fc7\u7684\u70b9\u7684\u989c\u8272\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684value\u53ea\u8bb0\u5f55\u6700\u540e\u4e00\u6b21\u8bbf\u95ee\u65f6\u7684\u989c\u8272\n2. \u5982\u679c\u8bbf\u95ee\u8fc7\uff0c\u82e5\u8be5\u8282\u70b9\u7684\u6700\u540e\u4e00\u6b21\u8bbf\u95ee\u989c\u8272\uff0c\u4e0e\u6b64\u6b21\u8bbf\u95ee\u989c\u8272\u4e0d\u540c\uff0c\u5219\u8bf4\u660e\u53d1\u751f\u4e86\u73af\u8def\uff0c\u8be5\u8282\u70b9\u5c31\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u7ea2\u8272\n3. \u628a\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u540e\u4e00\u6b21\u8bbf\u95ee\u989c\u8272\u4e3a\u7ea2\u8272\uff0c\u4e14\u8fd8\u8bb0\u5f55\u4e0b\u6b64\u65f6\u6700\u5927\u7684value\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\n\nprint(solution(stdin.rstrip('\\n')))"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(s) == answer\nprint(solution(s))\n\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('redcoder') == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"redcoder\") == 1\nassert solution(\"abracadabra\") == 0\nassert solution(\"kasjdlkfjsdlkjfdsalkjfklsdkjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkjfdsalkjfklsdkjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkjfdsalkjfklsdkjfkljdlkfjslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslkdjfkljdlkfjslkdjfklsdlkjfslk"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abcd') == 0\nassert solution('abcc') == 1\nassert solution('abc') == 1\n\"\"\"\n\nimport sys\nimport string"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('redcoder') == 1\nassert solution('redcod') == 2\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('redcoder') == '1'\nassert solution('hello') == '2'\nassert solution('hihihi') == '0'\nassert solution('adc') == '3'\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"9\") == \"Yes\"\nassert solution(\"4\") == \"No\"\nassert solution(\"6\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"100\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"12\") == \"No\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"15\") == \"No\"\nassert solution(\"4\") == \"Yes\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n') == 'No'\nassert solution('3\\n') == 'Yes'\nassert solution('4\\n') == 'Yes'\nassert solution('5\\n') == 'Yes'\nassert solution('6\\n') == 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == 'Yes'\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"30\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == \"Yes\"\nassert solution('20') == \"No\"\nassert solution('7') == \"No\"\nassert solution('100') == \"Yes\"\nassert solution('0') == \"No\"\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected_stdout\n\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == 'Yes'\nassert solution('5') == 'Yes'\nassert solution('2') == 'No'\nassert solution('4') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4 9 7 5\") == \"5\"\n\"\"\"\nimport sys\nfrom math import factorial"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"\n\nfrom typing import List, Tuple\n\nn = int(input())\nnums = [int(x) for x in input().split()]\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"\n\nimport os\nimport sys\n\nclass Solution:\n    def __init__(self):\n        self.sol = None\n    \n    def check(self, lst):\n        # check if (lst[0], lst[1], lst[2]) forms a triangle\n        for i in range(3):\n            for j in range(i+1, 3):\n                if lst[i] + lst[j] > lst[j] + lst[i]:\n                    return False\n        return True\n\n    def solve(self, n):\n        if self.sol:\n            return self.sol\n        else:\n            if n < 3:\n                return 0\n            else:\n                if n == 3:\n                    return 1\n                else:\n                    return sum([self.solve(i) for i in range(n-3, n)])\n\n    def solution(self, stdin: str) -> str:\n        n = int(stdin.split()[0])\n        lst = list(map(int, stdin.split()[1:]))\n        self.sol = sum([self.solve(i) for i in range(n)])\n        return str(self.sol)"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(    '4 4 9 7 5'    ) == '5'\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 4 9 7 5\") == '5'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 9 7 5\") == 5\nassert solution(\"7 5 4 4 8 9\") == 6\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4 9 7 5\\n') == '5'\n\"\"\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"\nfrom typing import List, Set, Dict, Tuple\n\n\nclass Triangle:\n    def __init__(self, length_1: int, length_2: int, length_3: int):\n        self.length_1 = length_1\n        self.length_2 = length_2\n        self.length_3 = length_3\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2, 5) == 10\nassert solution(1, 3) == -1\n\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n\na, b = list(map(int, stdin.split()))\nprint(a * b) if a * b < 10 else print(\"-1\")\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == 10\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(2, 5) == 10\nassert solution(4, 7) == -1\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5') == '10'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5\\n') == '10'\n\nprint(solution('2 5\\n'))\n\n\"\"\"\n\"\"\"\n2 \\times 5 = 10.\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n1 3 2 4') == '2'\nassert solution('3 5\\n1 3 2 4 5') == '5'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 1 1 2 3\\n\") == \"5\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 5\\n1 2 3 4 5 6\\n\") == \"4\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n\"\"\"\n\n\"\"\"\n----- Approach 1: Dynamic Programming -----\n\nDP is a dynamic programming technique for finding the minimum number of moves required to achieve the objective.\n\nWe can solve this problem using dynamic programming with the help of a table.\nThe table can be seen as an auxiliary data structure which maintains, for each coordinate x, the minimum number of moves\nrequired to achieve the objective so far.\n\nIf we visit x, then the minimum number of moves required to achieve the objective so far is,\n1) minimum of moves required to achieve the objective so far when x is not visited,\n2) the sum of the minimum numbers of moves required to achieve the objective so far and the minimum of the number of moves required to achieve the objective so far when x is visited.\n\ndp[i] will store the minimum number of moves required to achieve the objective so far when x_i is visited.\nThe answer is dp[M]\n\nTime Complexity: O(MN)\nSpace Complexity: O(MN)\n\n----- Complexity Analysis-----\n\nThe above solution has a time complexity of O(MN) and a space complexity of O(MN).\n\"\"\"\n\n\"\"\"\n----- Approach 2: Greedy -----\n\nA greedy approach would be to find the minimum of the following three conditions:\n1) The minimum number of moves required to achieve the objective when x_1 is visited\n2) The minimum number of moves required to achieve the objective when x_2 is visited\n3) The minimum number of moves required to achieve the objective when x_3 is visited\n\n\"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 12 1 2 14\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n1 2 3 4 5\") == '5'\nassert solution(\"5 3\\n1 2 3 4 5\") == '3'\nassert solution(\"5 2\\n1 2 3 4 5\") == '2'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n9 10 1 3 2\\n\") == \"2\"\n\"\"\"\n\nn, m = map(int, input().split())\nx = list(map(int, input().split()))"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 2 3 4 5\") == \"5\"\nassert solution(\"4 3\\n1 2 3 4\") == \"4\"\nassert solution(\"2 5\\n10 12 1 2\") == \"5\"\nassert solution(\"2 5\\n10 12 1\") == \"5\"\nassert solution(\"2 5\\n10 12 1 1\") == \"2\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\nassert solution('3 5\\n20 14 20 14') == '3'\nassert solution('1 5\\n20 14 20 14') == '0'\n\"\"\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 3\") == \"1011\"\nassert solution(\"4 6 3\") == \"10110101\"\nassert solution(\"5 6 2\") == \"111100\"\nassert solution(\"4 4 3\") == \"1011\"\nassert solution(\"5 6 2\") == \"111100\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\\n1011\"\n\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\\n101001\\n\"\n\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\\n111100\\n110110\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\\n1011\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"2\\n1110\\n1011\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"1\\n101001\\n\"\nassert solution(\"4 6 2\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n\") == \"2\\n1110\\n1011\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"1\\n101001\\n\"\nassert solution(\"4 6 3\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n\") == \"0\\n101001\\n\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\\n1011\"\n\n\"\"\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\\n111100\\n110110\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"1\\n101001\\n110110\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"4 4 3\n1 2\n2 3\n1 4\n4 3\"\"\"\n) == \"\"\"2\n1110\n1011\"\"\"\n\nassert solution(\n\"\"\"5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\"\"\"\n) == \"\"\"1\n101001\n\"\"\"\n\n\n\"\"\"\n3.4.1.3\n\n\u0417\u0430\u0434\u0430\u0447\u0430\n\u0412 \u043d\u0430\u0448\u0435\u043c \u0441\u0442\u0440\u0430\u043d\u0435 \u0412\u0414\u041d\u0425 \u043a\u0430\u0436\u0434\u044b\u0439 \u0433\u043e\u0434 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u0432\u043e\u043b\u043e\u043d\u0442\u0435\u0440\u0441\u043a\u0438\u0439 \u043a\u043e\u043d\u043a\u0443\u0440\u0441 \u043f\u043e \u043f\u043e\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044e \u0432 \u0412\u0414\u041d\u0425. \u041c\u044b \u043d\u0430\u0443\u0447\u0438\u043b\u0438\u0441\u044c \u043d\u0430\u0439\u0442\u0438 \u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u043a\u043e\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u044f\u0442 \u0432 \u043a\u0430\u0444\u0435, \u0435\u0441\u043b\u0438 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432.\n\n\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 (\u0441\u0442\u0430\u0442\u0443\u0441\u044b \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0442 \u043e\u0442 1 \u0434\u043e 5 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e) \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0430\u0436\u0435\u0440\u043e\u0432, \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c.\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442, \u043a\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u044f\u0442 \u0432 \u043a\u0430\u0444\u0435, \u0435\u0441\u043b\u0438 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\n\u0422\u0435\u0441\u0442 1\n>>> 5\n>>> 2\n1\n2\n3\n4\n5\n>>> 1\n>>> 2\n>>> 3\n>>> 4\n>>> 5\n>>> 1\n>>> 2\n>>> 3\n>>> 4\n>>> 5\n>>> 1\n1\n2\n3\n4\n5\n1\n2\n3\n4\n5\n1\n2\n3\n4\n5\n1\n2\n3\n4\n5\n1\n2\n3\n4\n5\n1\n2\n3\n4\n5\n\n\u0422\u0435\u0441\u0442 2\n>>> 4\n>>> 1\n1\n2\n3\n4\n>>> 1\n>>> 2\n1\n2\n3\n4\n>>> 1\n>>> 2\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n>>> 1\n1\n2\n3\n4\n\n\u0422\u0435\u0441\u0442 3\n>>> 6\n>>> 2\n1\n2\n3\n4\n5\n6\n>>> 1\n1\n2\n3\n4\n5\n6\n>>> 1\n1\n2\n3\n4\n5\n6\n>>> 1\n1\n2\n3\n4\n5\n6\n>>> 1\n1\n2\n3\n4\n5\n6\n>>> 1\n1\n2"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == b\nprint(solution(input()))\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"1\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"2\"\nassert solution(\"4 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"1\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\"\nassert solution(\"5 6 3\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"1\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"3 1 1 2 5\") == \"YES\"\nassert solution(\"2 10 10\") == \"YES\"\nassert solution(\"3 4 5\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 1 2 5\") == \"YES\"\nassert solution(\"3 1 2 3\") == \"YES\"\nassert solution(\"3 1 2 1 3\") == \"NO\"\nassert solution(\"2 10 10\") == \"YES\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n2 1 1 2 5\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n2\n10 10\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"3 1 2 1 2\") == \"YES\"\nassert solution(\"3 1 2 1 5\") == \"NO\"\nassert solution(\"4 5 3\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 1 2 5\") == \"YES\"\nassert solution(\"3 1 2\") == \"YES\"\nassert solution(\"2 10\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"3 1 3\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 1 2 5') == 'YES'\nassert solution('3 5 4') == 'NO'\nassert solution('10 10') == 'YES'\nassert solution('1 2 3') == 'NO'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"1\\n10\") == \"YES\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == '9'\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == '4999999999996'\n\"\"\"\n\nfrom typing import Tuple, List, Union\nfrom fractions import Fraction"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4 5\\n6 7 8 9 10') == 9\nassert solution('10 5\\n0 -2 -4 -6') == 5\nassert solution('1 1 1 1\\n1 1 1 1') == -1\nassert solution('1 1 1 1\\n1 1 1 0') == 4999999999\nassert solution('1 1 1 1\\n1 1 1 0') == 499999999\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == '9'\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == '4999999999996'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 6 -100 -200 -300 125 77 -4\") == '9'\nassert solution(\"1000000000000 5\") == '4999999999996'\nassert solution(\"10 4 -1 0 0 0 0\") == '-1'\nprint(\"All test cases passed.\")\n\n----------"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\nassert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BBAABBBA\") == \"BB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\"\"\"\n\n\nimport collections\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AAABBB\") == \"BB\"\nassert solution(\"ABABABABAB\") == \"ABABABAB\"\nassert solution(\"ABAABABAABABAABAABAB\") == \"ABAABABAABABAABABAABAB\"\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABCD\") == \"AB\"\nassert solution(\"ABACABA\") == \"AB\"\nassert solution(\"AAABBB\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\"\"\""
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\n########################################################################################################################################################################################################################################\n########################################################################################################################################################################################################################################\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n###\n###\n\n###\n###\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BA\") == \"BA\"\n\nassert solution(\"AA\") == \"AA\"\n\nassert solution(\"ZZ\") == \"ZZ\"\n\nassert solution(\"ZZAA\") == \"ZZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BBAABBBA\") == \"BB\"\nassert solution(\"AZAAAZAA\") == \"AZ\"\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABC') == 'A'\nassert solution('ZZZ') == 'ZZ'\nassert solution('ABCABBA') == 'AB'\nassert solution('ABCABBABCABBABCABBABCABBAB') == 'ABBABCABBABC'\nassert solution('ABCABBABCABBABCABBAB') == 'ABBABCABBABC'\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"test\") == \"est\"\nassert solution(\"b\") == \"a\"\nassert solution(\"ab\") == 1\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('codeforces') == 'es'\nassert solution('yes') == 'es'\nassert solution('test') == 'est'\nassert solution('b') == 'ab'\nassert solution('a') == ''\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"test\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"ab\"\n\n-----Problem-----\n\nInput Format\n\nThe first line of the input contains $s$. In the second line of the input contains $t$. Both strings consist only of lowercase Latin letters. The number of letters in each string is between 1 and $2\\cdot10^5$, inclusive.\n\nConstraints\n\nIt's guaranteed that a solution always exists.\n\nOutput Format\n\nOutput the fewest number of moves required. It is possible that, in the end, both strings will be equal to the empty string, and so, are equal to each other. In this case, the answer is obviously the sum of the lengths of the given strings.\n\nSample Input 0\n\ncodeforces\nyes\n\nSample Output 0\n\n9\n\nSample Input 1\n\ntest\nyes\n\nSample Output 1\n\n2\n\nSample Input 2\n\nb\nab\n\nSample Output 2\n\n1\n\nSample Input 3\n\na\naa\n\nSample Output 3\n\n1\n\n\n'''"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"test\") == \"est\"\nassert solution(\"b\") == \"ab\"\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    'codeforces'\n) == 'es'\nassert solution(\n    'yes'\n) == 'es'\nassert solution(\n    'test'\n) == 'est'\nassert solution(\n    'b'\n) == 1\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"where\") == \"here\"\nassert solution(\"a\") == \"\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"test\") == \"est\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"ab\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"west\") == 2\nassert solution(\"codeforces\") == 9\nassert solution(\"yes\") == 7\n\nassert solution(\"a\") == 0\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('codeforces') == 'es'\nassert solution('yes') == 'es'\nassert solution('b') == 'a'\nassert solution('ab') == 1\nassert solution('abcd') == 3\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"test\") == \"est\"\nassert solution(\"b\") == \"ab\"\n\n\"\"\"\nfrom typing import Union\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 3\n1 7 11\n''') == '2'\n\n'''\nThe main idea is to calculate the minimum difference between two consecutive cities.\nSo we are trying to find the minimum difference (D) between x_i and x_{i + 1}.\nWe can easily solve this problem by using a greedy algorithm.\n\nFor example, if the cities are arranged as follows:\n\nx_1    x_2    x_3\nx_4    x_5    x_6\nx_7    x_8    x_9\n\nThen we are trying to find the minimum difference (D) between x_i and x_{i + 1}\nfor all i, and this is equal to 2.\n\nNow, since the minimum difference (D) between two consecutive cities must be positive,\nand since x_1 is the only city whose value is less than x_2, we should start with x_2.\n\nOur greedy algorithm for the problem can be described as follows.\n\nFind the city that has the minimum value (the city that has the minimum value of D).\nFind the minimum difference between this city and the next city.\nIf this difference is positive, then set D = D + 1.\nIf this difference is negative, then set D = D - 1.\nThis algorithm will stop when D becomes 0.\n\nSo, we can find the minimum value of D by following the above algorithm.\n\nOur greedy algorithm gives us the minimum value of D which is 2.\n'''"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\"\n\nfrom math import ceil, log2"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5 3') == '2'\nassert solution('7 5\\n1 7 11') == '2'\nassert solution('8 4\\n1 7 11 1 12') == '2'\nassert solution('7 10\\n1 7 11 1 12') == '3'\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open(\"sample/1.in\").read()) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('N X') == 'N X'\nassert solution('N\\n X') == 'N'\nassert solution('2\\n 1 7 11') == '2'\n\"\"\""
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\nfrom __future__ import annotations\n\nimport math\nfrom enum import Enum\nfrom typing import List\n\nfrom icontract import require, ensure, DBC\n\n\nclass Direction(Enum):\n    \"\"\"Where to go to next.\"\"\"\n\n    SAME = 0  # type: Direction\n    FAR = 1  # type: Direction\n    CLOSE = 2  # type: Direction\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 7 11\\n') == '2'\n\"\"\"\n\nimport collections\n\nclass Node(collections.namedtuple('Node', ['left', 'right'])):\n    def walk(self, code, acc):\n        self.left.walk(code, acc + '0')\n        self.right.walk(code, acc + '1')"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(open(\"sample/2.in\").read()) == 2\nassert solution(open(\"sample/2.in\").read()) == 2\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('akasaka') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('akasaka') == 'Yes'\n\"\"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"Yes\"\nassert solution(\"abaa\") == \"Yes\"\nassert solution(\"abac\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"ab\") == \"No\"\nassert solution(\"abba\") == \"Yes\"\nassert solution(\"bb\") == \"Yes\"\nassert solution(\"abbab\") == \"No\"\n\"\"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aka\") == \"Yes\"\nassert solution(\"a\") == \"Yes\"\nassert solution(\"akak\") == \"Yes\"\nassert solution(\"akasaka\") == \"Yes\"\nassert solution(\"aabaa\") == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Yes'\nassert solution('a') == 'Yes'\nassert solution('aa') == 'Yes'\nassert solution('aaa') == 'Yes'\nassert solution('aab') == 'No'\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('198 1.10') == '217'\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"198 1.10\") == \"217\"\nassert solution(\"82984 4.73\") == \"27717\"\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('198 1.10') == '217'\nprint('Test PASSED')\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n\nimport sys\n\nA, B = [int(n) for n in sys.stdin.readline().split()]\n\nA, B = A * 10, B * 10\n\nwhile A > 0:\n    A, B = A // 10, B // 10\n\nprint(int(B))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('198 1.10') == '217'\n\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7') == '3'\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('2000000000') == '999999999'\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''6\n7\n1\n2\n3\n2000000000\n763243547''') == '3\\n0\\n0\\n1\\n999999999\\n381621773'\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('2\\n1\\n') == '1'\nassert solution('2\\n2\\n') == '0'\nassert solution('1\\n1\\n') == '1'\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('1 2') == '0'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('2\\n7\\n9\\n2') == '2'\nassert solution('4\\n5\\n2') == '3'\nassert solution('3\\n4\\n6\\n2') == '0'\nassert solution('10\\n1\\n2') == '0'\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\"\nassert solution(\"6\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"1\"\nassert solution(\"5\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"0\"\nassert solution(\"5\\n1\\n2\\n3\\n763243547\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\n\"\"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\"\n\"\"\"\n\nimport sys\nimport collections\n\nsys.setrecursionlimit(10 ** 7)\nDEBUG = False\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('1') == 0\nassert solution('2') == 0\nassert solution('3') == 0\nassert solution('4') == 1\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\n\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\n\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"1\"\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\\n\") == \"3\"\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\n\"\"\"\n\nfrom sys import stdin\nfrom collections import defaultdict\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == '3'\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == '1'\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 1\\n1 2\\n2 3') == '0'\nassert solution('4 3 2\\n1 2\\n2 3') == '1'\nassert solution('4 3 3\\n1 2\\n2 3') == '1'\nassert solution('4 3 4\\n1 2\\n2 3') == '1'\n\n\"\"\"\n\nfrom collections import defaultdict, deque"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('1 2\\n') == '0'\nassert solution('1 2 3\\n') == '0'\nassert solution('1 2\\n3 4\\n') == '0'\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\nassert solution(\"5 4 2\\n1 2\\n2 3\\n3 4\\n4 1\") == \"0\"\nprint(\"Ok!\")\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\\n') == '3'\nassert solution('5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n') == '1'\nassert solution('5 4 0\\n1 2\\n2 3\\n3 4\\n4 1\\n') == '0'\nassert solution('4 2 0\\n1 2\\n2 3\\n3 4\\n') == '0'\nassert solution('3 2 0\\n1 2\\n2 3\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 1 1 4 4 4') == '5'\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'\n\"\"\"\n\n\nimport collections"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('1\\n15') == '1'\nassert solution('2\\n4 3') == '3'\nassert solution('7\\n1 3 3 3 3 1') == '7'\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 2 4 1\") == 4\n\"\"\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n1 32\\n2 63\\n1 12') == '000001000002\\n000002000001\\n000001000001'\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\np, y = [0]*n, [0]*n\nfor i in range(n):\n    p[i], y[i] = map(int, stdin.readline().split())\n\nfor i in range(m):\n    print('{:06d}{:06d}'.format(p[i], y[i]))"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nprefectures, cities = [], []\n\nfor _ in range(n):\n    prefecture, year = sys.stdin.readline().split()\n    prefectures.append(prefecture)\n    cities.append(int(year))\n\nfor i in range(m):\n    cities[cities.index(max(cities))] = 0\n\nfor i, (p, y) in enumerate(zip(prefectures, cities)):\n    print(\"{:06d}\".format(int(p + str(i+1))))\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\n\"\"\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 32\\n2 63') == '000001000002\\n000002000001'\n\"\"\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\\n\") == \"000001000002\\n000002000001\\n000001000001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\n\"\"\"\n\nfrom sys import stdin, stdout\n\nn_m = stdin.readline().split(' ')\nprefectures = {}\n\nfor _ in range(int(n_m[0])):\n    city, year = stdin.readline().split(' ')\n    prefectures[city] = year\n\nfor _ in range(int(n_m[1])):\n    city = stdin.readline()\n    stdout.write(prefectures[city[0:6]] + '\\n')\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\nassert solution(\"1 9\\n2 32\") == \"000001000001\"\nassert solution(\"3 4\\n1 5\\n2 12\\n3 16\") == \"01111110011111\"\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '2 3\\n1 32\\n2 63'\n) == '000001000002\\n000002000001'\nassert solution(\n    '2 3\\n1 12\\n2 63'\n) == '000001000001\\n000002000001'\nassert solution(\n    '2 2\\n1 2\\n2 3'\n) == '000001000002'\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 3\n1 32\n2 63''') == '000001000002\\n000002000001\\n000001000001'\nprint('Test pass.')"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n1 32\\n2 63') == '000001000002\\n000002000001\\n000001000001'\n\"\"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\nprint(solution(\"4\\n2 10 8 40\"))\n\n-----\n5\n1 2 3 4 5\n\n-----\n4\n1 1 1 1 1\n\n-----\n3\n1 3 9\n\n-----\n5\n1 2 3 4 5\n\n-----\n\n-----\n4\n1 5 1 2\n\n-----\n5\n1 2 4 2\n\n-----\n4\n10 20 6 7\n\n-----\n2\n2 1\n\n-----\n4\n10 20 6 7\n\n-----\n5\n3 5 1 2 4\n\n-----\n1\n1\n\n-----\n6\n1 2 3 4 5 6\n\n-----\n6\n2 3 4 5 6 1\n\n-----\n6\n1 1 1 1 1 1\n\n-----\n5\n1 1 1 1 1\n\n-----\n7\n1 2 3 4 5 6\n\n-----\n7\n1 2 3 4 5 6\n\n-----\n4\n1 3 6 2\n\n-----\n3\n2 3\n\n-----\n3\n2 3\n\n-----\n2\n1 1\n\n-----\n3\n2 3\n\n-----\n3\n2 2\n\n-----\n5\n1 1 1 1 1\n\n-----\n5\n1 1 1 1 1\n\n-----\n5\n2 2 2 2 2\n\n-----\n5\n1 1 1 1 1\n\n-----\n5\n1 1 1 1 1\n\n-----\n3\n3 3\n\n-----\n\n-----\n5\n1 1 1 1 1\n\n-----\n5\n2 2 2 2 2\n\n-----\n5\n1 1 1 1 1\n\n-----\n5\n1 1 1 1 1\n\n-----\n4\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n5\n1 1 1 1 1\n\n-----\n5\n1 1 1 1 1\n\n-----\n5\n1 1 1 1 1\n\n-----\n5\n1 1 1 1 1\n\n-----\n3\n1 1 1\n\n-----\n2\n1 1\n\n-----\n3\n1 2\n\n-----\n4\n1 1 1 1\n\n-----\n3\n1 2\n\n-----\n2\n1 1\n\n-----\n1\n1\n\n-----\n4\n10 20 6 7\n\n-----\n1\n1\n\n-----\n2\n2 1\n\n-----\n3\n2 3\n\n-----\n4\n2 2 2 2\n\n-----\n3\n1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n4\n1 1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n3\n1 2\n\n-----\n4\n1 1 1 1\n\n-----\n3\n1 2\n\n-----\n3\n1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n4\n1 2 1 2\n\n-----\n4\n1 1 1 1\n\n-----\n1\n1\n\n-----\n4\n1 1 1 1\n\n-----\n1\n1\n\n-----\n3\n1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n3\n1 2\n\n-----\n4\n1 1 1 1\n\n-----\n1\n1\n\n-----\n2\n2 1\n\n-----\n3\n1 2\n\n-----\n4\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n3\n1 1 1\n\n-----\n2\n1 1\n\n-----\n4\n1 1 1 1\n\n-----\n3\n1 2\n\n-----\n4\n1 1 1 1\n\n-----\n1\n1\n\n-----\n4\n10 20 6 7\n\n-----\n1\n1\n\n-----\n1\n2\n\n-----\n2\n1 1\n\n-----\n3\n2 2\n\n-----\n4\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n3\n1 1 1\n\n-----\n4\n1 1 1 1\n\n-----\n4\n1 1 1 1\n\n-----\n1\n1\n\n-----\n3\n1 2\n\n-----\n5\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n5\n1 1 1 1\n\n-----\n1\n1\n\n-----\n4\n1 1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n3\n1 2\n\n-----\n2\n1 1\n\n-----\n4\n1 1 1 1\n\n-----\n4\n1 2 1 2\n\n-----\n5\n1 1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n3\n1 2\n\n-----\n4\n1 2 1 2\n\n-----\n2\n1 1\n\n-----\n2\n1 1\n\n-----\n3\n2 1\n\n-----\n2\n1 1\n\n-----\n1\n1\n\n-----\n4\n10 20 6 7\n\n-----\n1\n1\n\n-----\n3\n2 1\n\n-----\n5\n1 1 1 1\n\n-----\n3\n1 2\n\n-----\n1\n1\n\n-----\n2\n1 1\n\n-----\n2\n1 1\n\n-----\n4\n1 1 1 1\n\n-----\n4\n1 2 1 2\n\n-----\n5\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n4\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n3\n1 2\n\n-----\n5\n1 1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n4\n1 1 1 1\n\n-----\n4\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n4\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n3\n1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n1\n1\n\n-----\n2\n1 1\n\n-----\n4\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n3\n1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n1\n1\n\n-----\n2\n1 1\n\n-----\n3\n1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n4\n1 1 1 1\n\n-----\n4\n1 2 1 2\n\n-----\n5\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n5\n1 1 1 1\n\n-----\n2\n1 1\n\n-----\n5\n1 1 1 1\n\n-----\n3\n1 2\n\n-----\n3\n1 2\n\n-----\n2\n1 1\n\n-----\n1\n1\n\n-----\n1\n2\n\n-----\n2\n1 1\n\n-----\n4\n1 1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n4\n1 1 1 1\n\n-----\n1\n1\n\n-----\n3\n1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n4\n1 1 1 1\n\n-----\n5\n1 1 1 1\n\n-----\n4\n1 1 1 1\n\n-----\n1\n1\n\n-----\n5\n1 1 1 1\n\n-----\n4\n1 2 1 2\n\n-----\n5\n1 1 1 1\n\n-----\n3\n1 1 1\n\n-----\n2\n1 1\n\n-----\n5\n1 1 1 1\n\n-----\n3\n1 2\n\n-----\n5\n1 1 1 1\n\n-----\n4\n1 2 1 2\n\n-----\n4\n1 1 1 1\n\n-----\n4\n1 2 1 2\n\n-----\n5\n1 1 1 1\n\n-----\n3\n1 1 1\n\n-----\n1\n1\n\n-----\n4\n1 1 1 1\n\n-----\n3\n1 1 1\n\n-----\n1\n1\n\n-----\n3\n1 1 1"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"4\\n\"\n    \"2 10 8 40\"\n) == \"2\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 10 8 40\\n\") == 2\n\"\"\"\nimport math\nimport random"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\n\nIf we have less than 2 monsters, no one will die, so the minimum final health is 0.\nassert solution('1\\n2') == '0'\n\n-----Test 1-----\nINPUT:\n4\n2 10 8 40\n\nOUTPUT:\n2\n\n-----Test 2-----\nINPUT:\n5\n3 2 1 3\n\nOUTPUT:\n1\n\"\"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10 8 40\") == \"2\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\n\"\"\"\nimport sys\nfrom math import log2\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10 8 40\") == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 10 8 40\") == '2'\n\n\"\"\"\n\n\nfrom typing import List\nfrom random import randint"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\nprint('Test pass.')\n\n\"\"\"\n\nimport sys\n\nfrom typing import Iterator, List\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('?(__+___+__-___):-___>__') == '0250341'\nassert solution('?(_-_/___*__):-___>__._____<__.___') == '0010'\nassert solution('?(__-_+_/_____):-__>__,_____<__.___') == 'false'\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('?(_-_/___*__):-___>__.\\n') == '0010'\nassert solution('?(__-_+_/_____):-__>__,_____<__.\\n') == 'false'\nassert solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n') == '0250341'\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('?(_-_/___*__):-___>__.\\n') == '0010'\nassert solution('?(__-_+_/_____):-__>__,_____<__.\\n') == 'false'\nassert solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n') == '0250341'\n\"\"\"\n\nimport string\nimport re\nimport sys\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"?(__+___+__-___):-___>__\") == \"0101\"\nassert solution(\"?(____+___+__-___):-__<__\") == \"false\"\nassert solution(\"?(____+____+__-___):-__<__,__<__\") == \"0250341\"\nassert solution(\"?(____+____+__-___):-__<__,___<__\") == \"false\"\nassert solution(\"?(____+____+__-___):-__<__,____<__\") == \"false\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('?(_-__-__-_-)') == '101010'\nassert solution('?(_-/___/_____-)') == '101010'\nassert solution('?(_____*_____-_/____)') == '101010'\nassert solution('?(____*_________/____)') == '101010'\nassert solution('?(___*_________/____)') == '101010'\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"?(_-_/___*__):-___>__.\\n\") == \"0010\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.\\n\") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n\") == \"0250341\"\nassert solution(\"?(__+___+__-___):-___>__.\\n\") == \"0101\""
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('?(_-_--_-_-_-*_-_-_-_-_-_-_-_-_-_-_-_-_/-_-_-_-_-_-_-_/-_-_-_-_-_-_-_-_-_-_-_/-_-_-_-_-_-_-_-_/-_-_-_-_-_-_-_/-_-_-_-_-_-_-_/-_-_-_-_-_-_-_-_/-_+_+_-_-_/-_+_+_+_+_+_+_+_+_+_-_+_+_+_+_+_+_+_+_-_-_-_+_+_+_+_+_+_+_+_+_-_-_-_+_+_-_+_+_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_/-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_/-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_/-_+_+_+_+_+_+_+_+_+_+_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"?(_-)\") == \"01\"\nassert solution(\"?(_+_)\") == \"10\"\nassert solution(\"?(_-_-)\") == \"false\"\nassert solution(\"?(_-_-_-)\") == \"false\"\nassert solution(\"?(_-_-_-_-)\") == \"false\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"?(__+___+__-___):-___>__.\") == \"0250341\"\nassert solution(\"?(__+___+__-___):-___>__.\") == \"0101\"\n\"\"\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"?(__-_+_/_____):-__>__,_____<__.?\") == \"0250341\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\") == \"0250341\"\nassert solution(\"?(__+___+__-___):-___>__.?\") == \"0101\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.\") == \"0010\"\n\"\"\"\n\nimport string\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"4 4 1000000000000000000\") == \"0\"\nassert solution(\"4 4 2\") == \"5\"\n\nprint('Success')"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\nassert solution(\"3 4 100000000000000\") == 0\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"1 3 3 3\") == \"5\"\nassert solution(\"1 3 3 2\") == \"5\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"5\"\nassert solution(\"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\") == \"3\""
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n\nassert solution(\"3 4 1000000000000000000\") == \"0\""
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 11\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\n'''\n\nfrom itertools import product"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\") == \"3\"\nassert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"5\"\nassert solution(\"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"0\"\n\n\n    \n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\") == 3\nassert solution(\"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == 5\nassert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == 0"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"thisisexampletwo\") == \"thisisexampletwo\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"rocesfedoc\") == \"codeforces\"\n\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('codeforces') =='secrofedoc'\nassert solution('orcesfedoc') == 'rocesfedoc'\nassert solution('rocesfedoc') == 'rocesfedoc'\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\n\nn = int(input())\nt = input()\nm = len(t)\nk = m\n\nfor i in range(1, n):\n    if m % i == 0:\n        k = i\n\nprint(t[:k][::-1] + t[k:])\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"orcesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"z\") == \"z\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('codeforces') =='secrofedoc'\nassert solution('rocesfedoc') == 'rocesfedoc'\nassert solution('z') == 'z'\nassert solution('x') == 'x'\n\"\"\"\n\n\"\"\"\n1 <= len(stdin) <= 100\nstdin is a string consisting of lowercase Latin letters.\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"thisisexampletwo\") == \"plmaetwoxesisiht\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"rocesfedoc\") == \"codeforces\"\nassert solution(\"plmaetwoxesisiht\") == \"thisisexampletwo\"\n\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 14') == '19'\n\nsolution(input())\n\"\"\"\n\na, b = map(int, input().split())\nprint(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n\"\"\"\n\na, b = map(int, input().split())\nprint(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 14\") == \"19\"\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('3 4') == '7'\nassert solution('2 5') == '7'\nassert solution('0 0') == '0'\nassert solution('0 0 1') == '1'\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 14') == '19'\n\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\nprint('Passed')\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 14\") == \"19\"\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 14') == '19'\n\"\"\"\nimport math\na, b = map(int, input().split(' '))\nprint(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 14') == '19'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n\"\"\""
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3+4') == '>>+'\n\"\"\"\n\n\n\"\"\"\nI got the solution from https://codeforces.com/contest/1412/submission/114573726. It's a super concise solution. \nBut I have to admit I did not really understand it at first. The logic is rather simple, and I can explain it through some simple examples. \nIn these examples, the expression is \"3+4\", and we treat it as a binary tree. \nEach node contains a value and a right and left child. \nIn each step, we move to the right and then to the left. \n\n1) The expression is a single number, the root, and there are no children.\n\n2) There are two children, the left child is the root, and the right child is not. We move to the left child, and then to the right child, at the end, we will be in the node where the value is equal to the number. \n\n3) There are three children, and the left child is the root, the right child is the left child, and the right child is the right child. We move to the left child, then to the right child, and then to the right child, at the end, we will be in the node where the value is equal to the number. \n\n4) There are four children, the left child is the root, the right child is the left child, the right child is the right child, and the right child is the right child. We move to the left child, then to the right child, then to the right child, then to the right child, at the end, we will be in the node where the value is equal to the number.\n\nThe idea is that, in each step, we move to the right child, and then to the left child.\n\nThe reason for the right and left child is that in the order of traversal, we go to the left child, then to the right child. \n\nIn step 3, we move to the right child, and the result is that we will be in the node where the value is equal to the number (4). \n\nIn step 4, we move to the left child, and then to the right child, and then to the right child, and finally, we will be in the node where the value is equal to the number (3). \n\nIn step 5, we move to the left child, then to the right child, then to the right child, then to the right child, and finally, we will be in the node where the value is equal to the number (2). \n\nIn step 6, we move to the left child, and finally, we will be in the node where the value is equal to the number (1). \n\nSo the result is that the final expression is: \n+++++++\n[[>>+>>-]<[-<<+>>]]+<<<\n++++++++++++++++++++++++++++++++++++++++++++++++.\n\"\"\""
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('+2-3') == '<[<+>-]<'\nassert solution('+2-3') == '<[<+>-]<'\nassert solution('+2-3') == '<[<+>-]<'\nassert solution('+2-3') == '<[<+>-]<'\nassert solution('+2-3') == '<[<+>-]<'\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2+3\") == \"+>\\n++>\\n<[<+>-]<\"\n\"\"\"\n\n\nclass Solution:\n    def solution(self, s):\n        stack = []\n        for c in s:\n            if c == \" \":\n                continue\n            if c == \">\":\n                if len(stack) < 2:\n                    return \"> not enough arguments\"\n                print(stack.pop(-1), end=\"\")\n                print(stack.pop(-1), end=\"\")\n            elif c == \"<\":\n                if len(stack) < 2:\n                    return \"< not enough arguments\"\n                print(stack.pop(0), end=\"\")\n                print(stack.pop(0), end=\"\")\n            elif c == \"+\":\n                if len(stack) < 2:\n                    return \"+ not enough arguments\"\n                print(stack.pop(-1) + stack.pop(-1), end=\"\")\n            elif c == \"-\":\n                if len(stack) < 2:\n                    return \"- not enough arguments\"\n                print(stack.pop(-1) - stack.pop(-1), end=\"\")\n            elif c == \"[\":\n                stack.append(0)\n            elif c == \"]\":\n                x = stack.pop(-1)\n                print(x * \" \", end=\"\")\n                if x < 0:\n                    print(\"> not enough arguments\")\n            else:\n                stack.append(int(c))\n        return \"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2+3\") == \"+>\\n\"\nassert solution(\"9-7\") == \"+>\\n\"\nassert solution(\"2+3-5\") == \"+>\\n<[->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2+3') == '++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n'\nassert solution('9-7') == '+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n'\n\"\"\"\n\n\"\"\"\nAccepted solution 1: O(n) time, O(1) space, where n is the length of the expression\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12-34\") == \"+>++++++++++++++[>+++++++++>-]<\"\nassert solution(\"-23\") == \"+>++++++++++++++[>+++++++++>-]<\"\n\"\"\"\n\n\nclass Solution:\n    def solve(self, input_str):\n        # TODO: Implement me\n        pass"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\"\n\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2+3\") == \"+>\\n++++++++++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"9-7\") == \"+>+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1121211122112122111311131\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"5\"\n\"\"\"\n\nfrom sys import stdin\nimport math\nimport string\n\nQ = int(stdin.readline())\n\nfor _ in range(Q):\n    K = int(stdin.readline())\n    N = math.ceil(math.log10(K))\n    \n    res = []\n    for i in range(N):\n        res.append(string.digits[K % 10])\n        K //= 10\n    \n    print(''.join(res[::-1]))\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1\\n2\\n3\\n') == '2\\n1\\n1\\n2\\n'\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"112123123412345\") == \"1\"\nassert solution(\"112123412341234123412341234123412341234\") == \"1\"\nassert solution(\"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"112123123412345$\") == \"112123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412341234123412"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"112233445566778899\") == \"9\"\nassert solution(\"12345\") == \"0\"\nassert solution(\"112345\") == \"5\"\nassert solution(\"0123\") == \"2\"\nassert solution(\"101\") == \"1\""
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1122\\n3456\\n7890\\n1122') == '1\\n0\\n0\\n1'\n\"\"\""
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"11212312341234512345612345671234567812345678912345678910\"\n\"\"\"\n\n\n\"\"\"\n2.4.1 Exceptions\n\"\"\"\n\n\"\"\"\nAn exception is an error that occurs while the execution of a program.\nIn programming, exceptions are handled by the programmer, rather than the computer.\n\nWhen a program runs successfully (i.e. until the last line of code), it ends normally.\nWhen a program ends unsuccessfully, its last line of code (the statement or exception that caused the program to end) is treated as an exception.\n\nWe call the error that occurs when the program ends unsuccessfully an exception.\n\nAn exception is an instance of a subclass of the class Exception.\n\nWhen an exception occurs, the program ends abnormally. When an exception occurs, it stops and does not run the statements following the one that caused the exception.\n\"\"\"\n\n\n\"\"\"\ntry:\n    code\nexcept:\n    code\n\"\"\"\n\"\"\"\nThe line of code that causes the exception is placed in parentheses after the except keyword.\nIf the exception occurs, the code inside the parentheses is executed.\n\nThe code that caused the exception is called the exception handler.\n\"\"\"\n\n\n\"\"\"\ntry:\n    code\nexcept:\n    code\nexcept:\n    code\n\"\"\"\n\"\"\"\nThe handler for the exception type specified in the first parentheses after the except keyword is used.\nIt executes if the exception occurs, and code following the except clause is skipped.\n\nIf there is no matching exception handler, the exception is propagated up to the line immediately after the try statement.\n\nIf there is no exception, the line after the try clause is executed.\n\"\"\"\n\n\"\"\"\ntry:\n    code\nexcept:\n    code\nexcept:\n    code\nelse:\n    code\n\"\"\"\n\"\"\"\nThe else clause specifies code to be executed if no exception occurs.\n\nCode after the else clause is skipped if an exception occurs.\n\nIf there is no matching exception handler, the exception is propagated up to the line immediately after the try statement.\n\"\"\"\n\n\"\"\"\ntry:\n    code\nexcept:\n    code\nfinally:\n    code\n\"\"\"\n\"\"\"\nThe finally clause specifies code to be executed no matter if the try clause raises an exception or not.\n\nThe finally clause is always executed, regardless of whether an exception occurred.\n\"\"\"\n\n\"\"\"\nIn Python, you can define as many exception handlers as you need, one for each exception.\n\nIf you want to define only one exception handler for multiple exceptions, you can use the following trick:\n\"\"\"\n\"\"\"\ntry:\n    code\nexcept exception1:\n    code1\nexcept exception2:\n    code2\nexcept:\n    code3\nelse:\n    code4\n\"\"\"\n\"\"\"\nIf the exception occurs, the first matching exception handler will be executed.\nIf the exception does not match any exception handler, the exception is propagated up to the line immediately after the try statement.\n\"\"\"\n\n\"\"\"\nIn Python, you can define as many exception handlers as you need.\n\nThe statement try: catches the exception.\nThe statement except: catches the exception and discards it.\nThe statement else: is executed if no exception occurs.\nThe statement finally: is executed in any case.\n\"\"\"\n\n\"\"\"\nIf the exception occurs, the first matching exception handler will be executed.\nIf the exception does not match any exception handler, the exception is propagated up to the line immediately after the try statement.\nIf no exception handler is found, the exception is propagated up to the line immediately after the try statement.\n\"\"\"\n\n\n\"\"\"\n2.4.2 User-defined Exceptions\n\"\"\"\n\"\"\"\nIn Python, you can define your own exception by extending the built-in Exception class.\n\nYou can define an exception by creating a class that inherits from the Exception class or one of its subclasses.\n\"\"\"\n\"\"\"\n1.\n\"\"\"\nclass NotPerfectSquare(Exception):\n    def __init__(self,x):\n        self.x = x\n\nfor x in range(1,50):\n    if x*x > 50:\n        break\n    if x*x!= x:\n        raise NotPerfectSquare(x)\n\n\"\"\"\n2.\n\"\"\"\nclass NotPerfectSquare(Exception):\n    def __init__(self,x):\n        self.x = x\n\nfor x in range(1,50):\n    try:\n        if x*x > 50:\n            break\n        if x*x!= x:\n            raise NotPerfectSquare(x)\n    except NotPerfectSquare:\n        print(\"Not a perfect square\")\n\n\"\"\"\n3.\n\"\"\"\nclass NotPerfectSquare(Exception):\n    def __init__(self,x):\n        self.x = x\n\nfor x in range(1,50):\n    try:\n        if x*x > 50:\n            break\n        if x*x!= x:\n            raise NotPerfectSquare(x)\n    except NotPerfectSquare:\n        pass\n\n\"\"\"\n4.\n\"\"\"\nclass NotPerfectSquare(Exception):\n    def __init__(self,x):\n        self.x = x\n\nfor x in range(1,50):\n    try:\n        if x*x > 50:\n            break\n        if x*x!= x:\n            raise NotPerfectSquare(x)\n    except NotPerfectSquare:\n        print(\"Not a perfect square\")\n\n\"\"\"\n5.\n\"\"\"\nclass NotPerfectSquare(Exception):\n    def __init__(self,x):\n        self.x = x\n\nfor x in range(1,50):\n    try:\n        if x*x > 50:\n            break\n        if x*x!= x:\n            raise NotPerfectSquare(x)\n    except NotPerfectSquare as p:\n        print(\"Not a perfect square\")\n\n\"\"\"\nThe expression x*x also raises an exception if it is not a perfect square.\n\"\"\"\n\n\"\"\"\n2.4.3 Handling Exceptions\n\"\"\"\n\n\"\"\"\ntry:\n    code\nexcept:\n    code\nfinally:\n    code\n\"\"\"\n\"\"\"\nCode after the try clause is skipped if an exception occurs.\n\nCode following the except clause is skipped if no exception occurs.\n\nCode after the finally clause is always executed.\n\nCode after the finally clause is always executed.\n\"\"\"\n\n\"\"\"\n2.4.4 The raise Statement\n\"\"\"\n\"\"\"\nThe statement raise exception causes the exception exception to be raised when it occurs.\n\nIf the exception occurs, the program ends abnormally and the exception is propagated up to the statement immediately following the raise statement.\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1\\n3\\n20\\n38\\n56\\n\") == \"1\\n2\\n5\\n2\\n0\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('575') == 4\n\"\"\"\n\nimport math"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('575') == 4\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('575') == '4'\nassert solution('20') == '7'\nassert solution('1') == '0'\nassert solution('0') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('575') == 4\n\"\"\"\nfrom itertools import product\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"575\") == 4\nassert solution(\"100\") == 0\nassert solution(\"1002\") == 0\nassert solution(\"1004\") == 0\nassert solution(\"1000\") == 0\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5) == 1\nassert solution(1) == 0\nassert solution(3) == 0\nassert solution(5) == 1\nassert solution(10) == 4\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"575\") == \"4\"\n\n\"\"\"\n\nn = int(stdin.readline())\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('575') == '4'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == '1'\nassert solution('10') == '3'\nassert solution('1000') == '48'\nassert solution('567') == '4'\nassert solution('1000') == '51'\n\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"010\") == 1\nassert solution(\"100\") == 1\nassert solution(\"111\") == 0\nassert solution(\"101\") == 2\nassert solution(\"011\") == 1\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('00100') == 1\nassert solution('11110') == 2\nassert solution('11101') == 2\nassert solution('11110') == 2\nassert solution('10111') == 2\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"111001101\") == \"2\"\nassert solution(\"111011101\") == \"4\"\nassert solution(\"1110011010\") == \"2\"\nassert solution(\"1110111010\") == \"4\"\nassert solution(\"1110011010\") == \"2\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('111') == 1\nassert solution('000') == 1\nassert solution('011') == 2\nassert solution('100') == 1\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"111\") == 0\nassert solution(\"000\") == 1\nassert solution(\"1110\") == 2\nassert solution(\"1111\") == 2\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1111\") == 0\nassert solution(\"0011\") == 1\nassert solution(\"111111111\") == 0\nassert solution(\"11111\") == 1\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('011') == 1\nassert solution('010') == 2\nassert solution('010') == 1\n\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"010\") == 1\nassert solution(\"010\") == 1\nassert solution(\"110\") == 2\nassert solution(\"010\") == 1\n\n-------------\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1110\") == 2\nassert solution(\"10011\") == 1\n\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\n\nS = sys.argv[1]\n\nprint(S.count(\"1\") * S.count(\"0\") - S.count(\"110\") - S.count(\"1110\") - S.count(\"11110\"))\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11010') == 1\nassert solution('10111') == 2\nassert solution('11001') == 0\nassert solution('11110') == 1\nassert solution('11111') == 0\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 6 8') == 'APPROVED'\n\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 7 9 10 31\\n') == 'APPROVED'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 21 31 50\") == \"APPROVED\"\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\nassert solution(\"4\\n6 7 9 10 31\") == \"DENIED\"\n\"\"\"\n\n\"\"\"\n>>> solution(\"5\\n6 7 9 10 31\")\n'APPROVED'\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n5\n6 7 9 10 31\n\"\"\"\n) == \"APPROVED\"\n\nassert solution(\n\"\"\"\n5\n6 7 9 10 32\n\"\"\"\n) == \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RRRUDLDR') == 'No'\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"LLRLLRR\") == \"No\"\nassert solution(\"LLRLLRDRR\") == \"Yes\"\nassert solution(\"RDRLLRUULRUUDLRLUULLULLLLRRDDLLRRRUUDRLDDLLUDL\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('LDRRRUULR') == 'No'\n\n-----\nRUDLUDR\n\nRLUUDDR\n\n-----\nLDRRRUULR\n\nRLUUDDR"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    'RUDLUDR'\n) == 'Yes'\n\"\"\"\n\n\"\"\"\n\nAlgorithm:\n\nTo solve this problem, we first need to check if the string satisfies the condition described in the problem.\n\nWe define a helper function is_possible(s):\n\nTo check if a string is possible:\n\n1. Go through each character c in s:\n\n2. If the character is in odd position (1, 3, 5,...), then c should be R, U, or D.\n\n3. If the character is in even position (2, 4, 6,...), then c should be L, U, or D.\n\nIn other words, for any odd index i, the character is R, U, or D; for any even index i, the character is L, U, or D.\n\n4. If c is not in the above two sets, then return False.\n\n5. If c is not in the above two sets, then return False.\n\n6. If c is in the above two sets, then return True.\n\n7. We can simplify this problem to the problem described in Problem: \"Find if a given string is easy or hard\".\n\nSolution:\n\n1. For each string, we will check whether it is hard or not.\n\n2. For each character of the string, we will check whether it is R, U, or D.\n\n3. If the character is in odd position, we will check if it is L, U, or D.\n\n4. If the character is in even position, we will check if it is R, U, or D.\n\n5. If the character is not in the above two sets, then the string is hard.\n\n6. If the character is not in the above two sets, then the string is hard.\n\n7. If the character is in the above two sets, then the string is easy.\n\n8. If all characters are in the above two sets, then the string is easy.\n\n9. If any character is not in the above two sets, then the string is hard.\n\n10. If the string is empty, then the string is easy.\n\n11. The string is hard if and only if it is not easy.\n\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\n-----\nYou can also use the following code to test your solution locally.\n----\nfrom io import StringIO\nfrom unittest.mock import patch\n\nsample_input1 = \"\"\"RUDLUDR\n\"\"\"\n\nsample_input2 = \"\"\"LRDRLLDRRR\n\"\"\"\n\nsample_output1 = \"\"\"Yes\n\"\"\"\n\nsample_output2 = \"\"\"No\n\"\"\"\n\n@patch('sys.stdin', StringIO(sample_input1))\n@patch('sys.stdout', StringIO())\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RULD\") == \"Yes\"\nassert solution(\"LURD\") == \"No\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RUDLUDR\") == 'Yes'\nassert solution(\"RDRLUDUDRLDRU\") == 'Yes'\nassert solution(\"RDRRUULRDDL\") == 'No'\nassert solution(\"RDRLRRUULRDDL\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RUULDR\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3\\n2\\n4\\n3\\n\") == \"7\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\"\n\n\n\nfrom collections import deque"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n\") == \"0\"\n\"\"\"\n\nimport collections\nimport sys\n\n\nclass Solution:\n    # Time complexity: O(N), where N is the number of cities\n    # Space complexity: O(1)\n    def solution(self, stdin):\n        N, A, B, C, D, E = map(int, stdin.readline().strip().split())\n\n        cities = collections.defaultdict(list)\n\n        for i in range(1, N + 1):\n            cities[i].append(1)\n\n        for city in cities:\n            cities[city].append(2 * cities[city][0])\n            cities[city].append(3 * cities[city][0])\n            cities[city].append(4 * cities[city][0])\n            cities[city].append(5 * cities[city][0])\n\n        cities[1].append(0)\n        for city in cities:\n            cities[city].append(0)\n\n        for i in range(2, N + 1):\n            for j in range(6):\n                cities[i][j + 1] += min(cities[i - 1][j + 1], cities[i - 1][j + 2])\n\n        return min(\n            cities[N][6],\n            cities[N][5] + cities[N][1],\n            cities[N][4] + cities[N][2],\n            cities[N][3] + cities[N][3]\n        )\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1 5 4\") == \"7\"\nassert solution(\"4 3 1 5 4\") == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2\\n4\\n3\\n5') == '7'\nprint('test passed')\n\"\"\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 2 4 3 5\") == \"7\"\n\"\"\"\n\nn, a, b, c, d, e = map(int, input().split())\n\ntrain_time = min(n // a, a)\nbus_time = min(n // b, b)\ntaxi_time = min(n // c, c)\nairplane_time = min(n // d, d)\nship_time = min(n // e, e)\n\ntime = train_time + bus_time + taxi_time + airplane_time + ship_time\n\nprint(time)\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"\nimport sys\n\nN, A, B, C, D, E = [int(i) for i in sys.stdin.readline().strip().split('\\n')]\n\nprint(min((A + B + C) * N, D + E * N))\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '1'\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(output())"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n') == '2'\n\"\"\"\n\nimport sys\nimport timeit\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\") == \"0\\n0\\n\"\n\"\"\"\n\nimport sys\nfrom collections import deque\nimport itertools"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 2\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n\") == \"0\"\n\n-----Test Case-----\nSubtask #1 (20 points in total): 10 points\n\nSubtask #2 (20 points in total): 20 points\n\nSubtask #3 (20 points in total): 20 points\n\nSubtask #4 (20 points in total): 20 points\n\nSubtask #5 (20 points in total): 20 points\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == 3\nassert solution('10') == 10\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == 2\n\"\"\"\nimport sys"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20') == '23'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(123) == \"prime\"\nassert solution(\"23\") == \"not prime\"\nassert solution(2) == \"prime\"\nassert solution(7) == \"not prime\"\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"20\") == \"23\"\nassert solution(\"15\") == \"17\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20\") == \"23\"\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20') == '23'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '7'\nassert solution('5') == '11'\n\n\"\"\"\n\nfrom math import ceil\nfrom sys import stdin"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20\") == \"23\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6') == '7'\nassert solution('7') == '7'\nassert solution('10') == '11'\nassert solution('4') == '5'\nassert solution('13') == '13'\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20\") == \"23\"\n\"\"\"\n\n\"\"\"\n    The greatest prime factor of the number 600851475143 \n    is 6857.\n    The prime factors of 6857 are:\n    \n    6857 = 2^3 * 3^2 * 5 * 7 * 11 * 13 * 17 * 19\n    \n    Prime factors of 2, 3, 5, 7, 11, and 13 are 2, 3, 5, 7, \n    and 11.\n    \n    Prime factors of 2, 3, 5, 7, and 11 are 2, 3, 5, 7, and 11.\n    \n    Prime factors of 2, 3, and 7 are 2, 3, and 7.\n    \n    Prime factors of 2 and 7 are 2 and 7.\n    \n    Prime factors of 2 are 2.\n    \n    Prime factors of 3 are 3.\n    \n    Prime factors of 5 are 5.\n    \n    Prime factors of 7 are 7.\n    \n    Prime factors of 11 are 11.\n    \n    Prime factors of 13 are 13.\n    \n    Prime factors of 17 are 17.\n    \n    Prime factors of 19 are 19.\n    \n    Prime factors of 6857 are 6857.\n\"\"\"\n\n\"\"\"\n    Given a prime number p, write a program to print the\n    largest prime factor of p.\n    \n    For example, if p = 6857, then the output should be\n    5.\n    \n    A prime number greater than 1 is called a prime factor\n    of a number.\n    \n    The prime factors of 6857 are:\n    \n    6857 = 2^3 * 3^2 * 5 * 7 * 11 * 13 * 17 * 19\n    \n    The prime factors of 2, 3, 5, 7, 11, and 13 are 2, 3, 5, 7, \n    and 11.\n    \n    The prime factors of 2, 3, 5, 7, and 11 are 2, 3, 5, 7, and 11.\n    \n    The prime factors of 2, 3, and 7 are 2, 3, and 7.\n    \n    The prime factors of 2 and 7 are 2 and 7.\n    \n    The prime factors of 2 are 2.\n    \n    The prime factors of 3 are 3.\n    \n    The prime factors of 5 are 5.\n    \n    The prime factors of 7 are 7.\n    \n    The prime factors of 11 are 11.\n    \n    The prime factors of 13 are 13.\n    \n    The prime factors of 17 are 17.\n    \n    The prime factors of 19 are 19.\n\"\"\"\n\n\"\"\"\n    Given a string containing an alphabetic \n    character, write a program to count the \n    number of times that the character occurs in \n    the string.\n    \n    For example, if the input is:\n    \n    String1 = \"abcde\"\n    \n    Then, the output should be:\n    \n    For each character, the count of the character \n    in String1 is as follows:\n    \n    a : 1\n    b : 1\n    c : 1\n    d : 1\n    e : 1\n    \n    Please do not count the spaces.\n    \n    For example, if the input is:\n    \n    String1 = \"a b cde\"\n    \n    Then, the output should be:\n    \n    For each character, the count of the character\n    in String1 is as follows:\n    \n    a : 1\n    b : 1\n    c : 1\n    d : 1\n    e : 2\n    \n    Please do not count the spaces.\n    \n    For example, if the input is:\n    \n    String1 = \"abcdef\"\n    \n    Then, the output should be:\n    \n    For each character, the count of the character\n    in String1 is as follows:\n    \n    a : 1\n    b : 1\n    c : 1\n    d : 1\n    e : 1\n    f : 1\n    \n    Please do not count the spaces.\n\"\"\"\n\n\"\"\"\n    Given a list of numbers and a number k, write a program to \n    find all pairs of numbers from the list that sum to k.\n    \n    Input\n    First line contains the number of elements in the list. \n    The second line contains the elements of the list.\n    \n    Third line contains the value of k.\n    \n    Output\n    Print the pairs in sorted order, each pair in a new line.\n    \n    If no such pairs exist, print -1.\n    \n    For example, if the input is:\n    \n    6\n    2 4 5 9 14 10\n    15\n    \n    Then, the output should be:\n    \n    10 14\n    2 4\n    \n    Please do not print the elements in any order.\n    \n    Note: There are multiple pairs that sum to k, \n    please print each pair in separate line.\n\"\"\"\n\n\"\"\"\n    Given a list of numbers, find the average of all \n    the elements in the list. The average of a set of numbers \n    is the sum of all the numbers in the list divided by the \n    number of elements in the list.\n    \n    Input\n    First line contains the number of elements in the list. \n    The second line contains the elements of the list.\n    \n    Output\n    Print the average of the elements in the list.\n    \n    For example, if the input is:\n    \n    4\n    2 4 6 8\n    \n    Then, the output should be:\n    \n    5.0\n    \n    Please do not print the elements in any order.\n\"\"\"\n\n\"\"\"\n    Given a number n, write a program to calculate the sum of \n    all the even numbers from 1 to n.\n    \n    For example, if the input is:\n    \n    4\n    \n    Then, the output should be:\n    \n    10\n    \n    Please do not count the numbers ending in. or!.\n\"\"\"\n\n\"\"\"\n    Given a number n, write a program to calculate the sum of \n    all the odd numbers from 1 to n.\n    \n    For example, if the input is:\n    \n    4\n    \n    Then, the output should be:\n    \n    5\n    \n    Please do not count the numbers ending in. or!.\n\"\"\"\n\n\"\"\"\n    Write a program to count the number of strings \n    where the string length is 2 or more and the first \n    and last character are same from a given list of \n    strings. \n    \n    Sample List : ['abc', 'xyz', 'aba', '1221']\n    \n    Expected Result : 2\n    \n    Notes: Assume that all the strings are lower case.\n\"\"\"\n\n\"\"\"\n    Given a number n, write a program to calculate the sum of \n    all the multiples of 3 or 5 below n.\n    \n    For example, if the input is:\n    \n    10\n    \n    Then, the output should be:\n    \n    23\n    \n    Please do not count the numbers ending in. or!.\n\"\"\"\n\n\"\"\"\n    Given an array of integers, write a program to find the \n    sum of all the positive integers in that array that have \n    a sum of their digits equal to a given number n. \n    \n    For example, if the input is:\n    \n    [13, 21, 12, 5, 25]\n    \n    n = 9\n    \n    Then, the output should be:\n    \n    13\n    \n    Notes: Assume that all the numbers in the array are \n    greater than 0 and less than 10^100.\n\"\"\"\n\n\"\"\"\n    Given a number n, write a program to generate a dictionary \n    that contains (i, i*i) such that is an integral number \n    between 1 and n (both included). and then the program \n    should print the dictionary.\n    \n    For example, if the input is:\n    \n    6\n    \n    Then, the output should be:\n    \n    {1: 1, 2: 4, 3: 9, 4: 16, 5: 25"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(5) == 5\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('15') == '17'\nassert solution('20') == '23'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 3 2') == '1'\nassert solution('4\\n3 1 3 2') == '1'\nassert solution('8\\n1 4 5 6 7 2 3 4 5') == '3'\nassert solution('4\\n3 2 2') == '0'\nassert solution('4\\n1 2 3 4') == '0'\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 1 3 2\") == \"1\"\nassert solution(\"4 3 2 5 6 7\") == \"0\"\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1 3 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 1 3 2\") == \"1\"\nassert solution(\"10 10 10 10 10 10 10 10 10 10 10 10\") == \"0\"\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 3 2\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\\n\") == \"23\"\n\"\"\"\n\nn,a,b,c = [int(x) for x in input().split()]\nl = [int(x) for x in input().split()]\n\nl.sort()\n\nmp = n*c + b + a\n\nfor i in range(n):\n    l[i] = l[i] - 1\n    mp += 1\n    if mp >= a and mp <= b:\n        mp -= l[i]\n\nprint(mp)"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\n\"\"\"\nfrom collections import Counter\nfrom itertools import combinations"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''5 100 90 80\n98\n40\n30\n21\n80''') == \"23\"\n\n'''\nWhen I have to produce a maximum of three bamboos, I have to use the\nmagic extension, then I have to use the composition magic, then I have to\nuse the shortening magic and at the end I have to use the extension\nmagic to obtain the three bamboos.\n\nThat's the reason why we had to sort the input in order to find the minimum\ntotal cost, since the extension magic consumes the last elements of the\ninput (even if we have enough MP) and we want to avoid that.\n\n'''\n\n'''\nThe magic extension consumes the last elements of the input, so we have to\nuse the srt input in descending order.\n\n'''"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\n\"\"\"\n\n\nimport collections\nimport itertools\nimport math\nimport re\n\nregex = r'\\d+'"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nprint(solution(\"ABCXYZ\"))\n\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('AB') == 'BC'\nassert solution('ABC') == 'BCD'\nassert solution('ABCD') == 'BCDE'\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\") == \"C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C\"\nassert solution(\"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\") == \"B D E F G H I J K L M N O P Q R S T U V W X Y Z A B C\"\n\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys\nimport string"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABCXYZ', 2) == 'CDEZAB'\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nassert solution(\"SQZY\") == \"XWVUY\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"NOPQRSTUVWXYZABCDEFGHIJKLM\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"NOPQRSTUVWXYZABCDEFGHIJKLM\"\nassert solution(\"JKLMNOPQRSTUVWXYZABCDEFGHIJK\") == \"NOPQRSTUVWXYZABCDEFGHIJKLM\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABCXYZ\", 2) == \"CDEZAB\"\nprint(solution(\"ABCXYZ\", 2))\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\n\n\"\"\"\n\nimport string"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131\") == \"199999\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"1 6\") == \"6\"\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\nassert solution(\"1 3\") == \"3\"\n\"\"\"\n\nfrom utils import *\nimport math\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\n\"\"\"\n\nn = int(input())\nb = list(map(int, input().split()))\na = [1]\n\np = 2\nwhile len(a) < n:\n    for i in range(len(a)):\n        if b[i] % p == 0:\n            b.append(b[i])\n            a.append(p)\n    p += 1\n\nans = []\n\nfor i in range(len(a)):\n    ans.append(b[i] // a[i])\n\nprint(*ans)\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '1\\n2'\nassert solution('3\\n3\\n2') == '3\\n3\\n2'\nassert solution('3\\n3\\n2\\n3\\n3\\n2') == '2\\n3\\n3\\n3\\n3\\n2'\nassert solution('1\\n3\\n2') == '1\\n3\\n2'\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131\") == \"199999\"\nassert solution(\"1 3\") == \"3\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 2\n2 4 5 3 1\n\"\"\") == \"11111\"\nassert solution(\"\"\"\n5 1\n2 1 3 5 4\n\"\"\") == \"21112\"\nassert solution(\"\"\"\n7 1\n7 2 1 3 5 4 6\n\"\"\") == \"1121122\"\nassert solution(\"\"\"\n5 1\n2 4 5 3 1\n\"\"\") == \"21112\"\nassert solution(\"\"\"\n5 1\n2 1 3 5 4\n\"\"\") == \"21112\"\n\n\"\"\""
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2') == '111111'\nassert solution('5 1') == '22112'\nassert solution('7 1') == '1121122'\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\") == \"21112\"\nassert solution(\"6 1\") == \"211122\"\nassert solution(\"4 2\") == \"21112\"\nassert solution(\"7 1\") == \"221122\"\nassert solution(\"7 2\") == \"221122\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"111111\"\nassert solution(\"5 1\") == \"22112\"\nassert solution(\"7 1\") == \"112122\"\nassert solution(\"5 1\") == \"21112\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"21112\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\""
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"5 3\") == \"21111\"\nassert solution(\"5 2\") == \"11111\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\n\nassert solution(\"5 1\\n2 1 3 5 4\") == \"21112\"\n\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\n\nassert solution(\"5 1\\n2 4 5 3 1\") == \"21112\"\n\n\"\"\"\nimport string\n\nfrom typing import List, Dict, Tuple\nfrom collections import Counter\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 1 2 3') == 2\n\nassert solution('2\\n1 2') == 2\nassert solution('4\\n1 3 3 7') == 4\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == \"2\"\nassert solution(\"2\\n100 1\") == \"2\"\nassert solution(\"4\\n1 3 3 7\") == \"4\"\nassert solution(\"7\\n100 10 10 10 10\") == \"10\"\nassert solution(\"7\\n1 2 3 4 5 6 7\") == \"10\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == 2\nassert solution(\"2\\n1 2\\n1 2\") == 0\nassert solution(\"4\\n1 3 3 7\") == 4\nassert solution(\"3\\n1 3 7\") == 4\n\nassert solution(\"1\\n1\") == 0\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 3 7\") == 4\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1 2 3\") == 2\nassert solution(\"1 2 1 2 3\") == 2"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == \"2\\n\", 'error'\nassert solution(\"2\\n100 1\") == \"2\\n\", 'error'\nassert solution(\"4\\n1 3 3 7\") == \"4\\n\", 'error'\n\n\"\"\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 1 2 3') == 2\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nuniq_a = set(a)"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == 2\nassert solution(\"4\\n1 3 3 7\") == 4\n\"\"\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 1 2 3') == 2\nassert solution('2\\n1 1') == 0\nassert solution('4\\n1 3 3 7') == 4\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 1 2 3') == '2'\nassert solution('2\\n1 2') == '2'\nassert solution('2\\n100 1') == '2'\nassert solution('4\\n1 3 3 7') == '4'\n\n\"\"\"\n\na = int(stdin.readline())\n\narr = list(map(int, stdin.readline().split()))\n\ncount = 0\narr.sort()"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4 7 1 5 4 9\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 2 3 4 5\n\"\"\") == \"2\"\nassert solution(\"\"\"\n16\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 7 1 5 4 9\n\"\"\") == \"0\"\nassert solution(\"\"\"\n1 1 1 1023\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 1 1 1023\") == \"0\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 1 1 1023\") == \"0\"\nassert solution(\"4 7 1 5 4 9\") == \"1\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n4 7 1 5 4 9\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"1\\n16\") == \"1\"\nassert solution(\"4\\n1 1 1 1023\") == \"0\"\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\n\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 1 1 1023') == '0'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n4 7 1 5 4 9\") == \"1\"\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 1 5 4 9\") == '1'\nassert solution(\"1 2 3 4 5\") == '2'\nassert solution(\"1 1 1 1023\") == '0'\nassert solution(\"16\") == '1'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 1 5 4 9\\n\") == \"1\"\nassert solution(\"1 2 3 4 5\\n\") == \"2\"\nassert solution(\"16\\n\") == \"1\"\nassert solution(\"1 1 1 1023\\n\") == \"0\"\nassert solution(\"4 7 1 5 4 9\\n\") == \"1\"\n\n\"\"\"\n\nimport sys\nimport math\nfrom typing import List\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"6\\n4 7 1 5 4 9\") == \"1\"\nassert solution(\n    \"5\\n1 2 3 4 5\") == \"2\"\nassert solution(\n    \"1\\n16\") == \"1\"\nassert solution(\n    \"4\\n1 1 1 1023\") == \"0\"\n\n\n\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11110\") == 1\nassert solution(\"11101\") == 2\nassert solution(\"11110\") == 1\nassert solution(\"11101\") == 2\nassert solution(\"11100110\") == 4\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0011') == 4\n\"\"\"\n\nimport math"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11011100\") == \"4\"\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10011\") == 4\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0011') == '4'\nassert solution('1110') == '0'\nassert solution('0111') == '0'\nassert solution('1111') == '4'\nassert solution('1010') == '2'\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10111') == '5'\nassert solution('101010') == '4'\nassert solution('11110') == '0'\nassert solution('11111') == '1'\nassert solution('11111') == '1'\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0011') == 4\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('0') == 0\nassert solution('1') == 1\nassert solution('00') == 1\nassert solution('11') == 2\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11001100110011010') == '7'\nassert solution('111011101111110111010') == '18'\nassert solution('111011101111110111010') == '18'\n\"\"\"\nfrom typing import List, Dict, Tuple, Optional\n\nimport operator\n\n\nclass Node:\n    def __init__(self, name: str, is_red: bool = False):\n        self.name = name\n        self.is_red = is_red\n        self.neighbors: List[Node] = []\n\n\nclass Edge:\n    def __init__(self, parent: Node, child: Node, is_red: bool = False):\n        self.parent = parent\n        self.child = child\n        self.is_red = is_red\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10011') == '4'\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 2\n1 3\n2 4''') == '2'\nprint(solution(stdin))\n'''"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == 2\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 3\\n2 4\") == \"2\"\nassert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n4 2\n1 3\n2 4\n\"\"\") == \"2\"\n\n\"\"\"\n\n<text>\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 2 1\\n') == 2"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 2 1\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 2 1') == 2\n\"\"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 2 1') == 2\n\n\"\"\"\n\nfrom typing import Tuple\n\n\nclass Solution:\n    def min_watering_operations(self, height: str) -> Tuple[int, int]:\n        watering_operations = 0\n\n        for i in range(len(height) - 1):\n            l, r = i, i + 1\n            while l >= 0 and height[l] >= height[r]:\n                l -= 1\n            while r < len(height) and height[r] >= height[l]:\n                r += 1\n            watering_operations += r - l - 1\n\n        return watering_operations, height\n\n    def min_watering_operations_wrapper(self, height: str) -> Tuple[int, int]:\n        min_operations, final_height = self.min_watering_operations(height)\n        return min_operations, final_height\n\n    def run(self) -> None:\n        n = int(input())\n        height = input()\n        min_operations, final_height = self.min_watering_operations_wrapper(height)\n        print(min_operations)\n        print(' '.join(final_height))\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2 1\") == 2\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\nassert solution(\"5\\n3 1 2 4 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\nassert solution(\"10\\n1 5 1 2 5 2 2 3 3 3\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\""
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n2 1 -3') == '3'\nassert solution('2 4\\n-1 1') == '4'\nassert solution('4 10\\n2 4 1 2') == '2'\n\n\"\"\"\nfrom typing import List, Dict, Tuple\nimport math\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\"\"\"\n\nimport sys\nfrom math import factorial\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2, 3) == 1\nassert solution(3, 5) == 2\nassert solution(4, 10) == 2\n\"\"\""
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == '3'\nassert solution(\"2 4\\n-1 1\") == '4'\nassert solution(\"4 10\\n2 4 1 2\") == '2'\nassert solution(\"1 1\\n1\") == '0'\n\"\"\"\n\nn, w = [int(i) for i in input().split()]\n\na = [int(i) for i in input().split()]\n\ndp = [[0 for i in range(w + 1)] for j in range(n + 1)]\n\ndp[0][0] = 1\n\nfor i in range(n):\n    for j in range(w + 1):\n        dp[i + 1][j] = dp[i + 1][j] + dp[i][j - a[i]]\n\nprint(dp[n][w])\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\"\"\"\n\nn, w = [int(i) for i in input().split(' ')]\na = [int(i) for i in input().split(' ')]\n\npass_ = {}\nfor i in range(w):\n    pass_[i] = 0\n\nfor i in a:\n    if i < 0:\n        pass_[0] += i\n    else:\n        pass_[i] += 1"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\n\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom itertools import accumulate\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == 3\nassert solution(\"2 4\\n-1 1\") == 4\nassert solution(\"4 10\\n2 4 1 2\") == 2\n\"\"\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == '3'\nassert solution(\"2 4\\n-1 1\") == '4'\nassert solution(\"4 10\\n2 4 1 2\") == '2'\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8 6 3 12 9') == '9 3 6 12 4 8'\nassert solution('42 28 84 126') == '126 42 84 28'\nassert solution('1000000000000000000 3000000000000000000') == '3000000000000000000 1000000000000000000'\n\"\"\""
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4\\n1\") == \"1\\n4\\n3\"\nassert solution(\"4\\n8\\n6\\n3\\n12\\n9\") == \"9\\n3\\n6\\n12\\n4\\n8\"\nassert solution(\"2\\n1\\n1000000000000000000\\n3000000000000000000\") == \"3000000000000000000\\n1\\n1000000000000000000\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8 6 3 12 9') == '9 3 6 12 4 8'\n\n-----Tests-----\n\nTests.assert_equals(solution(\"4 8 6 3 12 9\"), \"9 3 6 12 4 8\")\nTests.assert_equals(solution(\"2 1 2\"), \"2 2 1\")\nTests.assert_equals(solution(\"1000000000000000000 3000000000000000000\"), \"3000000000000000000 1000000000000000000\")\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8 6 3 12 9\\n') == '9 3 6 12 4 8\\n'\nassert solution('42 28 84 126\\n') == '126 42 84 28\\n'\nassert solution('1000000000000000000 3000000000000000000\\n') == '3000000000000000000 1000000000000000000\\n'\n\n\n-----"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8 6 3 12 9') == '9 3 6 12 4 8'\n\"\"\""
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\\n\") == '9 3 6 12 4 8'\nassert solution(\"4\\n42 28 84 126\\n\") == '126 42 84 28'\nassert solution(\"2\\n1000000000000000000 3000000000000000000\\n\") == '3000000000000000000 1000000000000000000'\n\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\n\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\n\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\""
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\"\n\n\n\n------"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 4 7 10 12\") == \"3\"\nassert solution(\"-1 2 5 8 11\") == \"1\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 4 7 10 12') == '3'\nassert solution('5 -1 2 5 8 11') == '1'\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 6 5') == '2'\nassert solution('2 4 5') == '1'\nassert solution('1 2 3') == '0'\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 5 6 7') == '3', 'Test 1'\nassert solution('5\\n1 2 3 4 5') == '4', 'Test 2'\nassert solution('6\\n1 2 3 4 5 6') == '2', 'Test 3'\nassert solution('7\\n1 2 3 4 5 6 7') == '5', 'Test 4'\n\"\"\""
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 4 7 10 12\") == \"3\"\nassert solution(\"5 -1 2 5 8 11\") == \"1\""
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 4 7 10 12') == '3'\nassert solution('5 -1 2 5 8 11') == '1'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\"\n\n\"\"\"\n\nimport sys\n\n_n = int(input())\n_points = list(map(int, input().split()))"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\"\n\n\n\n\n\n'''\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 3') == '0 2'\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\n1. sum(list) will sum all the elements in a list.\n2. We can also use a for loop to sum up all the numbers in a list.\n3. max(list) gives us the max number in a list.\n\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\"\n\n\"\"\"\n-----SOLUTION-----\n\n------PREPARATION------\nimport sys"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 3 3''') == '0 2'\n\n---\n2\n3\n3\n'''\n) == '0 2'\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 3\") == '0 2'\n\"\"\"\nimport sys"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nA = int(stdin.readline().strip())\nB = int(stdin.readline().strip())\nK = int(stdin.readline().strip())\n\nTakahashi = A\nAoki = B\n\nfor i in range(K):\n    if Takahashi >= 1:\n        Takahashi -= 1\n    elif Aoki >= 1:\n        Aoki -= 1\n    else:\n        continue\n\nprint(Takahashi, Aoki)\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\nfrom pydantic import validate_arguments, root_validator\nfrom typing import List\n\nfrom.types import Problem, ProblemConfig, ProblemArgument\n\n\nclass Config(ProblemConfig):\n    args: List[ProblemArgument] = [\n        ProblemArgument(\"A\", str, \"Input for A\", is_optional=False),\n        ProblemArgument(\"B\", str, \"Input for B\", is_optional=False),\n        ProblemArgument(\"K\", str, \"Input for K\", is_optional=False),\n    ]\n\n\n@validate_arguments\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\nassert solution(\"1 2 5\") == \"0 0\"\nassert solution(\"3 2 1\") == \"0 0\"\nassert solution(\"6 0 8\") == \"6 6\"\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"103\") == \"3\"\n\n\"\"\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"101\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"103\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('101') == '1'\nassert solution('104') == '2'\nassert solution('105') == '3'\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('101') == '1'\nassert solution('102') == '2'\nassert solution('103') == '3'\nassert solution('104') == '4'\nassert solution('105') == '5'\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"103\") == \"3\"\n\n-----Problem-----\nAtCoder World Judge (TWJ) is conducting a contest in which the participants are required to solve various problems on AtCoder. One of the problems is a problem related to finding the number of ways to reach a certain goal, which is the purpose of this problem.\n\nGiven that all participants have the same amount of money, they want to get as many as possible. However, their goal is to get as much as possible.\n\nThe contest's goal is to get as many as possible, i.e., the number of ways to reach the goal.\n\nYou are given the amount of money N in yen, and the contest's goal is to reach the goal of getting as many as possible.\n\nFind the minimum positive integer k such that the number of ways to reach the goal of getting as many as possible with at least k participants is maximized.\n\n - 1 \u2264 N \\le 10^{18}\n\nExample:\n\ninput:\n12\n\noutput:\n2\n\n- The minimum number of participants is 2.\n- If we choose 1 participant, we can reach the goal of getting as many as possible with 2 participant.\n- If we choose 2 participants, we can reach the goal of getting as many as possible with 2 participant.\n- If we choose 3 participants, we can reach the goal of getting as many as possible with 3 participant.\nThus, we can obtain the maximum possible number of ways to reach the goal of getting as many as possible with at least 2 participants.\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('103\\n') == '3'\n\"\"\"\n\nimport sys\n\nx = sys.stdin.readline()\n\nx = int(x)\n\ny = 100\n\na = 100\n\nfor i in range(1, 101):\n    if a < x:\n        print(i)\n        break\n    a = a + a * 0.01\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"103\") == \"3\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('103') == '3'\n\n\"\"\"\n\nimport os\nimport sys\n\nDEBUG = False"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(100) == 3\nprint(solution(101))"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\"\n\nfrom itertools import product\nfrom functools import reduce\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2') == '9'\n\"\"\"\n\n\"\"\"\nFirst step is to solve the input.\n\nInput contains K (total numbers).\nWe need to iterate through all the numbers and calculate the sum of all the gcd for all the numbers.\nWe will be doing this using an O(K^3) time complexity solution.\n\nIn the below solution, we'll be using the lcm() function to get the LCM of all the numbers.\n\nUsing this approach we will be able to get the sum of all the gcd's in O(1) time complexity.\n\nAlgorithm:\n\n1. We will create an array of K elements.\n2. For each element i in the input we will calculate the LCM(i)\n3. We will then initialize the sum to 0.\n4. Iterate through the array and do the following for each index.\n    * Get the LCM at i and add it to the sum.\n    * Multiply the LCM by the current value of sum and add it to the sum.\n    * This is done since the LCM of the current element * the previous sum is the LCM of the current element * the current sum.\n5. The final answer will be sum which is the sum of all the gcd's.\n\nComplexity Analysis:\n\nTime Complexity: O(K)\n\nSpace Complexity: O(K)\n\nAssumptions:\n\nThere are no repeated values in the input.\n\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '9'\nassert solution('1') == '1'\nassert solution('3') == '5'\nassert solution('6') == '27'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n2') == '9'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '9'\nassert solution('1') == '1'\nassert solution('3') == '6'\nassert solution('5') == '10'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n3') == '9'\n\"\"\"\n\nfrom __future__ import division\nfrom math import gcd\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.readline()) == sys.stdin.readline().strip()\n\"\"\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3\\n2\\n') == '7'\nprint(solution(stdin))\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nfrom functools import reduce\nimport operator"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"10\"\nassert solution(\"6\") == \"15\"\nassert solution(\"7\") == \"21\"\nassert solution(\"8\") == \"39\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n3 4 6\") == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 6\") == 10\n\"\"\"\n\n\"\"\"\nWrite a program that prompts the user to input N positive integers\na_1, a_2,..., a_N. The program then calculates and prints\nthe maximum value of the function f(m) = (m\\ mod\\ a_1) + (m\\ mod\\ a_2) +... + (m\\ mod\\ a_N)\nHere, X\\ mod\\ Y denotes the remainder of the division of X by Y.\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 6\") == 10\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 6') == '10'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3 4 6\") == 10\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n3 4 6\") == \"10\"\n\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n3\\n5') == '8'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 6\\n\") == \"10\"\nprint(\"Teste\")"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 6') == '10'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 6\") == 10\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2') == 'Yes'\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == 'Yes'\nassert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == 'Yes'\n\"\"\"\n\nimport re\nimport sys\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\nIn this example, the first roll was (1, 2). The second roll was (6, 6).\nThe third roll was (4, 4). The fourth roll was (3, 3). The fifth roll was (3, 2).\nThe rolling process continues like this.\n\nIn the first roll, there is only one doublet: 1.\nIn the second roll, there are two doublets: 6 and 6.\nIn the third roll, there are two doublets: 4 and 4.\nIn the fourth roll, there are two doublets: 3 and 3.\nIn the fifth roll, there are two doublets: 3 and 2.\nSo we see that three doublets occurred in a row.\n\nfrom stdin import stdin"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == 'Yes'\nassert solution(\"7\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\") == 'No'\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\n\"\"\"\nimport re\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(r) == expected\n\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 4\nassert solution('10') == 100\nassert solution('100') == 49\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('7') == '4'\nassert solution('12') == '9'\nassert solution('99') == '8'\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 4\n\"\"\"\n\nr = int(input())\n\nprint(r * r * 3.14159265359)\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '4'\nprint('Test passed\\n')\n\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n') == '4'\nassert solution('4\\n') == '4'\n\"\"\"\n\n\"\"\"\n0<=r<=100\n\nA=4r\nB=\u03c0r^2\nA/B=1\n\nA/B=A/B/A/B/...\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == '4'\n\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '4'\n\"\"\"\n\nr = int(input())\ncount = 0\n\nfor i in range(1, r+1):\n    if i**2 > r:\n        break\n    else:\n        count += r // (i**2)\nprint(count)"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n\"\"\"\n\nfrom math import pi\nfrom collections import Counter\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 8 5 1') == 'Yes'\nassert solution('3 8 5 1') == 'No'\n\"\"\"\n\nfrom typing import List, Tuple\nimport functools\nimport itertools\nimport re"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\nassert solution(\"2\\n3 5 6\") == \"No\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8 5 1\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n1 5\\n3 5\\n5 1\\n3 5\\n3 3\\n1 7\") == \"703\"\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 7\\n3 2\\n1 7\") == \"702\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 3\n1 7\n3 2\n1 7''') == '702'\nassert solution('''3 4\n3 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n2 1\n1 2\n3 3\n2 2\n1 7\n1 2\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\nfor i in range(m):\n    num = int(stdin.readline())\n    if num < 0 or num > 10 ** n:\n        print(-1)\n    else:\n        print(num)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"9\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2') == '9'\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"9\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"9\"\nassert solution(\"6 5\") == \"18\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n') == 9\n\"\"\"\n\nimport math\nimport sys\n\ninputs = sys.stdin.readlines()\n\nfor line in inputs:\n    n, k = line.split()\n    n, k = int(n), int(k)\n    print(n * (n - 1) * (n - 2) // 6 // k)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2') == '9'\n\"\"\"\n\nN, K = map(int, stdin.split())\nprint(N*(N-1)*(N-2)//6 // K*(K-1)//2)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2') == '9'\nprint('Test pass.')"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n') == '9'\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == 1\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2') == '9'\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import combinations\n\nN, K = input().split()\nN = int(N)\nK = int(K)"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('-9') == '1011'\nassert solution('0') == '0'\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"-9\") == \"1011\"\nprint(solution(\"-9\"))\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('-9') == '1011'\n\"\"\"\n\nfrom __future__ import print_function\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('-9') == \"1011\"\n\"\"\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"-9\") == \"1011\"\nprint(solution(\"-9\"))\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('-9') == '1011'\nassert solution('9') == '1001'\nassert solution('101010') == '101010'\nassert solution('10101010') == '10101010'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(1) == \"0\"\nassert solution(0) == \"0\"\nassert solution(1, 2) == \"0 1\"\nassert solution(3, 2) == \"1 1 0\"\nassert solution(3, 4) == \"1 0 1 1\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('-9') == '1011'\n\"\"\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"-9\") == \"1011\"\n\n-------\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('-1') == '1011'\nassert solution('-3') == '101010'\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 5\n4 9\n2 4''') == '12'\nassert solution('''3 4\n5 10\n5 11\n6 8''') == '18'\n\n'''\n[\uc544\uc774\ub514\uc5b4]\n- \uac00\uc7a5 \ub0ae\uc740 \uc74c\uc2dd \uc2a4\ud0c0\uc704\uce58\ub97c \ucc3e\ub294\ub2e4.\n- \uc2a4\ud0c0\uc704\uce58\ub97c \uc21c\ucc28\uc801\uc73c\ub85c \ub3cc\uba74\uc11c \ud574\ub2f9 \uc2a4\ud0c0\uc704\uce58\ub85c\ubd80\ud130 \uac00\uc7a5 \ud070 \uc74c\uc2dd\ub4e4\uc744 \ucc3e\ub294\ub2e4.\n- \uadf8 \uacb0\uacfc\ub85c \uacc4\uc0b0\ud574\uc11c \uacb0\uacfc\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n[\uc2dc\uac04\ubcf5\uc7a1\ub3c4]\n- O(N)\n\n[\uace0\uae09\ud480\uc774]\n- https://blog.naver.com/nova020510/222114810078\n\n[\uc2e4\uc218]\n- \uc74c\uc2dd\uc774 \uc788\ub294 \uc2a4\ud0c0\uc704\uce58\uac00 \uc788\ub294 \ubaa8\ub4e0 \uc74c\uc2dd\uc744 \ud558\ub098\uc758 \uc2a4\ud0c0\uc704\uce58\uc5d0\uc11c \ubf51\ub294 \uc810\ud654\uc2dd\uc740 \uc7ac\uadc0\ub97c \uc774\uc6a9\ud574\uc57c \ud55c\ub2e4.\n- \uc74c\uc2dd\uc758 \uac1c\uc218 N\uc774 \ucd5c\ub300 10,000\uc774\uae30 \ub54c\ubb38\uc5d0 \uc815\ub82c\ud574\uc57c \ud55c\ub2e4.\n- \uc774\ub97c \uc810\ud654\uc2dd\uc5d0 \uc758\ud574 \uad6c\ud604\ud558\uba74 \ub420 \uac83 \uac19\ub2e4.\n- \uc2a4\ud0c0\uc704\uce58\ub97c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud558\uace0 \uac01 \uc2a4\ud0c0\uc704\uce58\uc758 \uc74c\uc2dd\ub4e4\uc744 \ubf51\uc544\uc11c \uc9d1\ud569\uc73c\ub85c \ub9cc\ub4e4\uace0\n- \uc9d1\ud569\uc758 \uae38\uc774\uac00 M\uc774\uba74 \uadf8 \uc9d1\ud569\uc758 \ud3c9\uade0\uc744 \uacc4\uc0b0\ud558\uace0 \ucd5c\uc18c\uac12\uc744 \uad6c\ud560 \uc218 \uc788\uc74c.\n'''\nimport heapq"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n2 4\") == \"12\"\n\n\"\"\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n2 4\\n1 1\") == \"12\"\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\\n\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n2 4') == '12'\nassert solution('2 5\\n4 9') == '12'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\"\"\"\n\nn, m = map(int, input().split())\n\ndrinks = []\nfor _ in range(n):\n    a, b = map(int, input().split())\n    drinks.append([a, b])\n\ndrinks.sort()"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 9\\n2 4\\n') == '12'\nassert solution('2 5\\n4 9\\n2 4\\n') == '12'\nassert solution('1 1\\n4 9\\n2 4\\n') == '7'\n\"\"\"\nimport math"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\"\"\"\n\nn, m = map(int, input().split())\na = [0] + list(map(int, input().split()))\nb = [0] + list(map(int, input().split()))\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if a[i] <= j:\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a[i]] + b[i])\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[n][m])\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 9\\n2 4\") == 12\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4 8 7 3\\n\") == 2\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == 2\n\n\"\"\"\n\n\"\"\"\n7\n1 2 3 4 5 6 7\nOutput:\n5\n\n1 2 3 4 5\nOutput:\n4\n\n1\nOutput:\n0\n\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n10 4 8 7 3''') == 2\nassert solution('''5\n1 10 4 8 7 3''') == 1\nassert solution('''5\n9 8 7 6 5''') == 0\nassert solution('''6\n3 2 1 3 2 1''') == 2\nassert solution('''5\n5 6 7 8 9''') == 1\n'''\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == 2\n\"\"\"\n\nN = int(input())\nH = list(map(int, input().split()))\n\nans = 0\ni = 0\nwhile i < len(H):\n    #print(H[i], H[i+1])\n    while i+1 < len(H) and H[i] >= H[i+1]:\n        i += 1\n    ans += 1\n    i += 1\n\nprint(ans)\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3\\n1\\n2\") == '2'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == 2\n\"\"\"\nimport sys"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4 8 7 3\") == 2\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline())\nline = sys.stdin.readline().strip().split(\" \")"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n10 4 8 7 3') == '2'\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n10 4 8 7 3\\n\") == \"2\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 4\\n') == '2'\nassert solution('4\\n4 3 2 1\\n') == '0'\nassert solution('2\\n4 4\\n') == '-1'\nassert solution('1\\n1\\n') == '0'\nassert solution('2\\n1 1\\n') == '1'\n\nimport sys"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2 3 4 5') == '2'\n\"\"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 2 3\") == '2'\nassert solution(\"2 4\\n1 2 2 3\") == '2'\nassert solution(\"2 5\\n1 2 2 2 2\") == '0'\nassert solution(\"2 7\\n1 2 2 2 2 2 2\") == '1'\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 1 2 2 4 5\") == \"1\"\nassert solution(\"5 3 1 2 3 3\") == \"0\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 2 3\") == \"0\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 3\n1 2 2 4 5\n''') == '1'\n\nassert solution('''5 3\n1 2 3 3 3\n''') == '0'\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 2 3\") == '1'\nassert solution(\"4 3\\n1 2 3 3 3\") == '0'\n\"\"\"\n\n\nfrom math import floor"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 2 4 5\\n') == '1\\n', 'wrong result'\nassert solution('1 2 3 4 5\\n') == '2\\n', 'wrong result'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 2 3 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '5 3\\n1 2 2 4 5'\n) == '1'\n\nassert solution(\n    '5 3\\n1 2 3 3 3'\n) == '0'\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 5\\n1 2 2 4 2 3') == 3\n\"\"\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"6 5\n1 2 2 4 2 3\n\"\"\") == '3'\nassert solution(\"\"\"7 5\n3 3 2 1 1 1 3\n\"\"\") == '4'\n\nprint(solution(input().strip()))\n\n\"\"\"\nline = list(map(int, stdin.strip().split(' ')))\nn, k = line[0], line[1]\n\na = sorted(list(map(int, stdin.strip().split(' '))))\n\nans = 0\nfor i in range(n):\n    ans += max(0, k - a.count(a[i]))\n\nprint(ans)\n\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 1 2 3') == '2'\nassert solution('4 2\\n3 4 4 5') == '0'\nassert solution('4 1\\n1 2 3 4') == '3'\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 2 4 2 3\") == 3\nassert solution(\"1 1 1 1 1 1 1\") == 3\nassert solution(\"1 2 2 3\") == 1\nassert solution(\"2 3 3 3 3 3 3\") == 3\nassert solution(\"3 3 3 3 3 3 3\") == 0\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 2 4 2 3\") == 3\n\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4') == '0'\nassert solution('6 6') == '1'\nassert solution('4 5') == '1'\nassert solution('6 7') == '2'\nassert solution('7 6') == '1'\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"2\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 1 1 1 1\") == \"0\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1\") == \"0\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"0\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3') == \"3\"\nassert solution('10 5') == \"3\"\nassert solution('5 7') == \"2\"\nassert solution('7 7') == \"0\"\n\nassert solution('10 5') == \"3\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\") == 0\nassert solution(\"7 5\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 5\\n1 2 2 4 2 3\") == 3\n\"\"\""
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\""
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 2\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\n\n\"\"\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\nprint(solution(\"10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\"))\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 2\\n4\\n2\\n\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1 1\\n1 1 1') == '2'\n\n'''\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 3\\n1 2\") == \"2\"\nassert solution(\"3 1 3\\n1 2\") == \"3\"\nassert solution(\"4 1 3\\n2 2\") == \"2\"\nassert solution(\"6 1 5\\n3 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\nprint(solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\"))\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\n\n\"\"\""
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == '10\\n9\\n1000\\n42000000000000'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8 3\\n1 2 3 4 5\") == \"2\"\n\"\"\"\n\n\nfrom math import sqrt\nfrom typing import List\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n1 3 5 2 4') == '2'\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 6\\n3 4 5') == '2'\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 6\\n3 4 5') == 2\nassert solution('2 4\\n3 3 4') == 0\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6\\n3 4 5') == 2\nassert solution('3 6\\n3 3 5') == 1\nassert solution('3 6\\n4 3 5') == 0\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 5') == '2'\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6\") == 2\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\") == \"2\"\nassert solution(\"3 4 5\") == \"2\"\nassert solution(\"3 4 5 7\") == \"3\"\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n3 4 5\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 5\") == \"3\"\nassert solution(\"1 5 4\") == \"3\"\nassert solution(\"7 7 7 7\") == \"1\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'Yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == 'No'\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nlines = sys.argv[1].split('\\n')\n\nwords = []\nfor line in lines:\n    words.append(line.split('\\n')[0])\n\nprint(\"Yes\" if len(set(words)) == len(words) else \"No\")"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\"\n\n-------------------------------------------------------------------------------"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\n-----Explanation-----\nIn the first turn, Takahashi announces \"hoge\"\nIn the second turn, Takahashi announces \"english\"\nIn the third turn, Takahashi announces \"hoge\"\nIn the fourth turn, Takahashi announces \"enigma\"\nThe last word announced by Takahashi is \"enigma\"\nThe last word announced by Takahashi is \"hoge\"\nThe first character of \"enigma\" is \"g\" and the last character of \"hoge\" is \"e\".\nBecause \"hoge\" was announced before and the first character of \"hoge\" is the same as the last character of the last word announced,\nthe rules of shiritori was not observed.\n\"\"\"\n\n\"\"\"\nRead data\n\nIn the first turn, a player announces any one word.\nIn the subsequent turns, a player announces a word that satisfies the following conditions:\nThat word is not announced before.\nThe first character of that word is the same as the last character of the last word announced.\nWrite 5 lines of code to test the correctness of solution:\nTakahashi is practicing shiritori alone again today.\nShiritori is a game as follows:\n - In the first turn, a player announces any one word.\n - In the subsequent turns, a player announces a word that satisfies the following conditions:\n - That word is not announced before.\n - The first character of that word is the same as the last character of the last word announced.\nIn this game, he is practicing to announce as many words as possible in ten seconds.\nYou are given the number of words Takahashi announced, N, and the i-th word he announced, W_i, for each i. Determine if the rules of shiritori was observed, that is, every word announced by him satisfied the conditions.\n\n-----Constraints-----\n - N is an integer satisfying 2 \\leq N \\leq 100.\n - W_i is a string of length between 1 and 10 (inclusive) consisting of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nW_1\nW_2\n:\nW_N\n\n-----Output-----\nIf every word announced by Takahashi satisfied the conditions, print Yes; otherwise, print No.\n\n-----Sample Input-----\n4\nhoge\nenglish\nhoge\nenigma\n\n-----Sample Output-----\nNo\n\nAs hoge is announced multiple times, the rules of shiritori was not observed.\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma') == 'No'"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma') == 'No'"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\nassert solution(\"3\\nhoge\\nhoge\\nhoge\") == \"Yes\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"hoge\\nenglish\\nhoge\\nenigma\") == \"Yes\"\nassert solution(\"hoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n\") == 6\n\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"2 5\") == \"8\"\nassert solution(\"2 9\") == \"12\"\nassert solution(\"3 3\") == \"4\"\nassert solution(\"3 5\") == \"8\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n3 4') == '5'\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3') == '6'\n\"\"\"\n\na, b = map(int, input().split())\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"5 2\") == \"8\"\n\n\"\"\"\n\nA, B = list(map(int, input().split()))\n\nprint((A + B - 1) // (A - B) + 1)\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"2 3\"\n) == \"6\"\n\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n') == '6'\n\n-----Test Input-----\n2 3\n4 5\n\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3') == '6'\nassert solution('2 4') == '5'\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"6\"\nprint(solution(\"2 3\"))\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == \"6\"\nassert solution(\"1 5\") == \"2\"\n\"\"\"\n\nimport sys\nfrom math import ceil\n\nA, B = tuple(map(int, sys.stdin.readline().split()))\n\nprint(min(A*B, ceil((A+B)/2)))\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\n\"\"\"\n\nimport unittest\nimport re\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('sardine') == 'xxxxxxx'\nprint('Test Successful!')\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(sardine) == xxxxxxx\n'''\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n1 2 1 1 3''') == 'Yes'\nassert solution('''6\n1 2 1 1 3 4''') == 'No'\nassert solution('''2\n2 1''') == 'Yes'\nassert solution('''2\n2 1\n2 1''') == 'Yes'\nassert solution('''3\n1 1 1''') == 'Yes'\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 1 1 3\\n') == 'Yes'\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1 1 3\") == \"Yes\"\n\"\"\"\n\nimport sys\nimport collections\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 1 1 3') == \"Yes\"\n\n\"\"\"\n\nimport sys\nimport os\n\npath = os.path.dirname(os.path.realpath(__file__))"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\nassert solution(\"3\\n1 2 3\") == \"No\"\n\n\"\"\"\n\n\"\"\"\nInput:\n\n3\n1 2 3\n1 1 1\n3 2\n\nOutput:\n\nYes\nNo\nYes\n\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == 'Yes'\n\n-------\n5\n1 2 1 1 3\nNo\n\n-------\n5\n4 2 1 1 3\nYes\n\n-------\n5\n1 2 1 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nYes\n\n-------\n6\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nYes\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n2 1 2 1 3\nYes\n\n-------\n5\n1 2 2 1 3\nNo\n\n-------\n5\n2 2 1 1 3\nYes\n\n-------\n5\n2 1 2 1 3\nNo\n\n-------\n5\n2 1 2 1 3\nNo\n\n-------\n5\n2 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nYes\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n4 1 2 1 3\nYes\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n4 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n4 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n4 1 2 1 3\nNo\n\n-------\n5\n4 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3\nNo\n\n-------\n5\n3 1 2 1 3"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\nassert solution('4\\n1 1 1 1 3') == 'No'\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\nassert solution('5\\n1 2 3 4 5') == 'No'\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 1 1 3') == 'Yes'\nassert solution('1 2 3 1 3') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == 1\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\n\"\"\"\n\n\"\"\"\n\\ Solution 1\n\n\\ Time Complexity: O(NM + Nlog(N))\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\nassert solution('2 2 -10\\n1 1\\n3 2\\n1 2') == '0'\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 1\\n1 2 2\\n\") == 1\n\"\"\"\n\nn, m, c = map(int, stdin.readline().split())\narr = []\narr2 = []\nfor _ in range(n):\n    arr.append(list(map(int, stdin.readline().split())))\nfor _ in range(m):\n    arr2.append(list(map(int, stdin.readline().split())))\nprint(arr, arr2)\n\nmax_score = 0\nfor i in range(n):\n    temp = 0\n    for j in range(m):\n        temp += arr[i][j] * arr2[j][0]\n    if temp + c > 0:\n        max_score += 1\nprint(max_score)"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\"\n\nn, m, c = [int(val) for val in input().split()]\n\nb = [int(val) for val in input().split()]\na = []\nfor _ in range(n):\n    a.append([int(val) for val in input().split()])\n\ncount = 0\nfor i in range(n):\n    s = 0\n    for j in range(m):\n        s += a[i][j] * b[j]\n    if s > c:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == 1\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1900\") == 100\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1900\") == 100\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n5') == '4'\nassert solution('1\\n10') == '9'\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1900\") == \"100\"\n\"\"\"\n\n\"\"\"\n1.\u89e3\u984c\u601d\u8def\uff1a\n\u984c\u76ee\u7d66\u4e88\u7684\u662f1000-yen\u7684\u7c21\u55ae\u9810\u8a2d\u8b8a\u6578\u521d\u59cb\u503c\uff0c\n\u8a72\u984c\u70ba1600\u5143\uff0c\n\u6240\u4ee5\u6211\u5011\u75281600\u5143\u4f86\u8a08\u7b97\u63db\u7b97\u7684\u984d\u9762\uff0c\n16 - int(n)\uff0c\n\u59821600 - 1900\u5f97\u5230100\uff0c\u5373\u4ee3\u8868\u6703\u63db\u7b97100\u5143\n\n2.\u8a3b\u89e3\uff1a\n\u5012\u6578\u7b2c\u4e8c\u984c\u76ee\uff0c\n\u5c31\u662f\u63db\u7b97\u7684\u984d\u9762\u662f100\u5143\uff0c\n\u8a72\u984c\u76ee\u70ba\u63db\u7b97100\u5143\u7684\u73fe\u91d1\uff0c\n\u7d66\u4e88\u4e00\u7fa4\u5546\u5bb6\u8981\u63db100\u5143\u73fe\u91d1\uff0c\n\u5247\u6700\u5c11\u8981\u7528\u5e7e\u500b1000-yen\u9280\u5e63\u63db\u7b97\u73fe\u91d1\uff0c\n\u5373\u662f\u8981\u7528\u5e7e\u500b3\u5143\u9280\u5e63\u621610\u5143\u9280\u5e63\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '0'\nassert solution('19') == '1'\nassert solution('19') == '1'\n\nassert solution('9999') == '0'\nassert solution('10000') == '0'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 1000\nassert solution('4') == 500\nassert solution('5') == 500\nassert solution('9') == 100\nassert solution('11') == 100\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin=\"1500\\n\") == \"100\"\n\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n100\") == \"100\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\n\nc = 1000 - n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100') == '1'\nassert solution('200') == '2'\nassert solution('300') == '3'\nassert solution('400') == '4'\nassert solution('500') == '5'\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n5\\n') == \"100\"\nassert solution('2\\n10\\n') == \"200\"\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n3 5\\n\") == 9\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n3 5') == '9'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\n3 5 2\n4 5''') == '9'\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 2\\n3 5\\n\") == 9\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 5 2\\n4 5\") == 9\n\"\"\"\n\nimport sys\nimport logging\nimport itertools\n\nlogging.basicConfig(\n    level=logging.DEBUG, format=\"%(message)s\"\n)"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2\\n4 5\") == \"9\"\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == '9'\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 2 10 20\n8 15 13\n16 22''') == 'No War'\nassert solution('''3 2 10 20\n8 15 13\n16 22''') == 'No War'\nassert solution('''2 1 10 20\n8 15 13\n16 22''') == 'War'\nassert solution('''2 1 10 20\n8 15 13\n16 22''') == 'War'\nassert solution('''1 1 10 20\n8 15 13\n16 22''') == 'War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"3 2 10 20\\n8 15 13\\n16 22\"\n) == \"No War\"\nassert solution(\n    \"4 2 10 20\\n8 15 13\\n16 22\"\n) == \"War\"\nassert solution(\n    \"5 2 10 20\\n8 15 13\\n16 22\\n18 25\\n24 30\"\n) == \"War\"\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\nprint(solution(\"3 2 10 20\\n8 15 13\\n16 22\"))\n\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\nassert solution(\"2 2 10 20\\n8 15 13\\n16 22\") == \"War\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"\n\nN, M, X, Y = list(map(int, stdin.split()))\nXs = list(map(int, stdin.splitlines()[1:]))\nYs = list(map(int, stdin.splitlines()[1:]))\n\nXs.sort()\nYs.sort()\n\nwhile Xs and Ys:\n    if Xs[0] < Ys[0]:\n        Xs.pop(0)\n    elif Ys[0] < Xs[0]:\n        Ys.pop(0)\n    else:\n        break"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\nassert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"War\"\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22') == 'No War'\n\"\"\"\n\nn, m, x, y = [int(i) for i in stdin.split('\\n')[0].split(' ')]"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22') == 'No War'\nassert solution('1 2 3 4\\n3 4 5\\n6 7') == 'War'\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n2\\n3') == '6'\nassert solution('2\\n3') == '5'\nassert solution('1\\n2') == '4'\nassert solution('1\\n1') == '1'\nassert solution('3\\n1\\n4') == '9'\n\"\"\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\n\"\"\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3\\n6\\n\") == \"6\"\nassert solution(\"1\\n1\\n1\\n\") == \"0\"\nassert solution(\"3\\n3\\n3\\n\") == \"0\"\n\"\"\"\nimport math\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\n3\") == '6'\nassert solution(\"1\\n5\\n1\") == '1'\n\nimport unittest\nclass SolutionTest(unittest.TestCase):\n    def test(self):\n        self.assertEqual(solution(\"2\\n2\\n3\"), '6')\n        self.assertEqual(solution(\"1\\n5\\n1\"), '1')\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2\\n3\") == '6'\nassert solution(\"2\\n2\\n3\") == '6'\nassert solution(\"2\\n2\\n3\") == '6'\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3\\n6\") == 6\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter\nfrom math import log10"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\nassert solution(\"3\\n2\\n3\") == \"5\"\nassert solution(\"3\\n3\\n3\") == \"6\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3\\n4\\n\") == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3\\n6\") == \"6\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3') == '0'\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == '0'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3\\n') == '0'\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 2 3\") == \"0\"\nassert solution(\"2\\n1 2\") == \"0\"\nassert solution(\"3\\n1 1 1\") == \"0\"\n\n-----\nIn the first test case, the weights are 1, 2, and 3, and T = 2. We divide them into two groups:\n1 and 2 are in the first group, so S_1 = 1 + 2 = 3.\n3 is in the second group, so S_2 = 3.\nTherefore, the absolute difference of S_1 and S_2 is 0.\nIn the second test case, the weights are 1, 2, and 3, and T = 1. We divide them into two groups:\n1 and 2 are in the first group, so S_1 = 1 + 2 = 3.\n3 is in the second group, so S_2 = 3.\nTherefore, the absolute difference of S_1 and S_2 is 0.\nIn the third test case, the weights are 1, and 1, and T = 2. We divide them into two groups:\n1 is in the first group, so S_1 = 1.\n1 is in the second group, so S_2 = 1.\nTherefore, the absolute difference of S_1 and S_2 is 0.\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 1 1 1\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 3''') == '0'\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"3\n    1 2 3\"\"\"\n) == \"0\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3\\n') == '0'\n\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())\nweights = list(map(int, input().split()))"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == '0'\n'''\n\nimport math"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"0\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"2\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\nassert solution(\"3 4\\n6 10 3 4\\n5 9 2 11\\n12 8 7 6\") == \"2\"\n\n\"\"\"\nfrom typing import List, Dict\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n\") == \"6\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"2\"\nassert solution(\"3 3\\n1 2 1\\n4 5 6\\n\") == \"0\"\nassert solution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"6\"\nassert solution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\") == \"0\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n3 2 1\\n1 2 3\\n4 5 6') == '6'\nassert solution('4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '2'\nassert solution('3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '0'\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\n\nmat = []\nfor i in range(n):\n    mat.append([int(x) for x in input().split()])\n\nfor j in range(m):\n    mn = 10 ** 6\n    for i in range(n):\n        mn = min(mn, mat[i][j])\n        mat[i][j] -= mn\n    for i in range(n):\n        mn = mat[i][j]\n        mat[i][j] += mn\n        mat[i][j] = mat[i][j] % (n * m)\n\nmn = 10 ** 6\nfor i in range(n):\n    mn = min(mn, mat[i][0])\nprint(mn)\n\n\"\"\"\nMy solution (LEETCODE):"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\n\nprint(solution(input()))"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n3 2 1\\n1 2 3\\n4 5 6') == '6'\nassert solution('4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '2'\nassert solution('3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '0'\nassert solution('1 1\\n1 1') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == '5'\nassert solution(\"2\\n1 100\") == '99'\nassert solution(\"7\\n1 2 3 4 5 6 7\") == '7'\nassert solution(\"4\\n1 2 3 4\") == '4'\nassert solution(\"2\\n100\") == '99'\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\nassert solution(\"4\\n100 100 100 100\") == \"1\"\n\"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 2 3 14 5\") == \"5\"\nassert solution(\"1 100\") == \"99\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\nassert solution(\"3\\n1 100\") == \"100\"\nassert solution(\"4\\n1 100\") == \"100\"\n\"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''6\n5 10 2 3 14 5'''\n) == '5'\n\nassert solution(\n'''2\n1 100'''\n) == '99'\n\nassert solution(\n'''5\n3 10 2 3 14 5'''\n) == '1'\n\nassert solution(\n'''2\n1 100'''\n) == '99'\n\nassert solution(\n'''1\n100'''\n) == '0'\n\n\nprint('The local tests are done. Click on \"Check\" for the global tests.')\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 10 2 3 14 5') == '5'\nassert solution('2 100') == '99'\nassert solution('1 1') == '0'\nassert solution('1 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10 2 3 14 5\") == \"5\"\nassert solution(\"5 10 2 3 14 5\") == \"5\"\nassert solution(\"1 100\") == \"99\"\nassert solution(\"2 100\") == \"99\"\nassert solution(\"3 100\") == \"100\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 2 3 14 5\") == \"5\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\nassert solution(\"6\\n1 1 1 1 1 1\\n\") == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 0 1 0 1\") == '2'\nassert solution(\"6\\n0 1 0 1 1 0\") == '2'\nassert solution(\"7\\n1 0 1 1 1 0 1\") == '3'\nassert solution(\"3\\n0 0 0\") == '0'\n\"\"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 0 1 0 1\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\n\nprint(\"Well done!\")"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == 2\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == 2\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == 3\nassert solution(\"3\\n0 0 0\\n\") == 0\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n0 0 0 1 1 0\\n\") == '2'\nassert solution(\"7\\n0 0 0 1 1 0 1\\n\") == '3'\nassert solution(\"3\\n0 0 0\\n\") == '0'\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n0 0 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\nassert solution(\"2\\n0 1\") == \"0\"\nassert solution(\"1\\n1\") == \"1\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\n\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\n\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\n\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n\nassert solution(\"1\\n0\\n\") == \"0\""
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n0 1 0 1 1\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\n\"\"\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"7\") == \"0\"\nassert solution(\"16\") == \"5\"\nassert solution(\"100000000\") == \"5\"\nassert solution(\"11\") == \"2\"\n\"\"\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(8)) == 1\nassert solution(str(0)) == 0\nassert solution(str(15)) == 0\nassert solution(str(9)) == 0\n\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7') == 0\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7') == 0\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"7\") == \"0\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"9\") == \"2\"\nassert solution(\"9\") == \"2\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('1') == 1\nassert solution('2') == 2\nassert solution('3') == 4\nassert solution('4') == 5\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"7\") == \"0\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"7\") == \"0\"\nassert solution(\"7\") == \"0\"\n\"\"\"\n\nprint(int(input()) % 16)\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == \"3\"\n\"\"\"\n\nn = int(input())\ncheese = dict()\n\nfor i in range(n):\n    name, type = input().split()\n    cheese[name] = type\n\nprint(len(cheese))\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"9\nbrie soft\ncamembert soft\nfeta soft\ngoat soft\nmuenster soft\nasiago hard\ncheddar hard\ngouda hard\nswiss hard\n\"\"\") == \"3\"\n\nassert solution(\"\"\"6\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard\n\"\"\") == \"4\"\n\n\"\"\"\nFor each new cheese you find, add it to the cheeses dictionary with a count of 1. If the cheese is already in the cheeses dictionary, increase the count by 1.\n\nAfter scanning the input, the count for each cheese should be the number of times it shows up in the input. For example, if the input is:\n\nbrie soft\ncamembert soft\nfeta soft\ngoat soft\nmuenster soft\nasiago hard\ncheddar hard\ngouda hard\nswiss hard\n\nthen the cheeses dictionary will contain:\n\n{'brie': 1, 'camembert': 1, 'feta': 1, 'goat': 1,'muenster': 1, 'asiago': 2, 'cheddar': 1, 'gouda': 1,'swiss': 1}\n\nEach time you encounter a new cheese, increase its count by 1.\n\nAfter scanning the input, the count for each cheese should be the number of times it shows up in the input. For example, if the input is:\n\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard\n\nthen the cheeses dictionary will contain:\n\n{'parmesan': 1, 'emmental': 1, 'edam': 1, 'colby': 1, 'gruyere': 1, 'asiago': 2}\n\nAfter scanning the input, the count for each cheese should be the number of times it shows up in the input. For example, if the input is:\n\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard\n\nthen the cheeses dictionary will contain:\n\n{'parmesan': 1, 'emmental': 1, 'edam': 1, 'colby': 1, 'gruyere': 1, 'asiago': 2}\n\nAfter scanning the input, the count for each cheese should be the number of times it shows up in the input. For example, if the input is:\n\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard\n\nthen the cheeses dictionary will contain:\n\n{'parmesan': 1, 'emmental': 1, 'edam': 1, 'colby': 1, 'gruyere': 1, 'asiago': 2}\n\nThe count for each cheese should be the number of times it shows up in the input. For example, if the input is:\n\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard\n\nthen the cheeses dictionary will contain:\n\n{'parmesan': 1, 'emmental': 1, 'edam': 1, 'colby': 1, 'gruyere': 1, 'asiago': 2}\n\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == 4\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == 3\nprint(\"Successfully passed!\")\n\n------\n\nimport sys\n\nf = open(\"input.txt\")\nlines = f.readlines()\nf.close()\n\nn = int(lines[0].strip())\ncheeses = [line.strip().split() for line in lines[1:]]\n\nf = open(\"output.txt\", \"w\")\nf.write(str(solution(cheeses)))\nf.close()\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == 3\nassert solution(\"parmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n\") == 4\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(example) == \"3\"\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n\" + \"parmesan hard\\n\" + \"emmental hard\\n\" + \"edam hard\\n\" + \"colby hard\\n\" + \"gruyere hard\\n\" + \"asiago hard\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nbrie hard\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == 3\nassert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n\") == 4\nassert solution(\"4\\nbrie hard\\ncamembert soft\\nfeta soft\\ngoat soft\\n\") == 4\nassert solution(\"7\\napfel soft\\nk\u00e4se hard\\nschokolade soft\\ngummis soft\\nj\u00e4germeister soft\\n\") == 3\nassert solution(\"9\\nmozzarella soft\\nmascarpone hard\\nmuenster soft\\nfeta soft\\ngoat soft\\nmozarella hard\\nstilton hard\\ngouda hard\\nswiss hard\\n\") == 4\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(sample1) == \"1\"\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9\\n brie soft\\n camembert soft\\n feta soft\\n goat soft\\n muenster soft\\n asiago hard\\n cheddar hard\\n gouda hard\\n swiss hard\\n') == '3'"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\") == \"0 0 0 1 0 2 4\"\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\n\"\"\""
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == '1 0 0 2'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\nassert solution('7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1') == '0 0 0 1 0 2 4'\n\"\"\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\\n\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\\n\") == \"0 0 0 1 0 2 4\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1\\n\") == \"0 0 0 1 0 2 4 0 0 0\"\nprint('Test pass.')"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\""
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\nassert solution('7\\n2 5 1 5 3 4 3') == '0 0 0 1 0 2 4'"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 1 3\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\n\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"0 1 1 0\"\n) == \"0\"\n\nassert solution(\n    \"1 0 1 1 0\"\n) == \"1\"\n\nassert solution(\n    \"1 1 1 0 1\"\n) == \"0\"\n\nassert solution(\n    \"1 1 1 1 1\"\n) == \"1\"\n\nassert solution(\n    \"0 0 0 0 0\"\n) == \"0\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"111010\") == \"0\"\nassert solution(\"101101\") == \"1\"\nassert solution(\"100010\") == \"1\"\n\n\"\"\"\n\n\"\"\"\n\u9898\u76ee\uff1a\u5728\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6570\u7ec4 A \u4e2d\uff0c\u6709\u591a\u5c11\u4e2a\u5143\u7d20\u7684\u548c\u4e3a S\u3002\n\n\u601d\u8def\uff1a\n\u66b4\u529b\u6cd5\uff1aO(n)\n\n\u5e26\u5907\u5fd8\u5f55\u7684\u66b4\u529b\u6cd5\uff1aO(n**2)\n\n\u6570\u5b66\u65b9\u6cd5\uff1aO(n)\n\n\u6839\u636e\u6027\u8d28\u548c\u603b\u548c\uff0c\u53ef\u4ee5\u8f7b\u677e\u6c42\u51fa\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u7ec4\u5143\u7d20\u4e4b\u548c\u3002\n\n\u6570\u5b66\u65b9\u6cd5\u603b\u7ed3\uff1a\n\n\u56fa\u5b9a\u5143\u7d20\uff1a\u5728\u6570\u7ec4\u4e2d\u67d0\u4e2a\u4e0b\u6807 i\uff0c\u5206\u522b\u7528\u5de6\u53f3\u4e24\u4e2a\u6570\u7ec4\u8868\u793a\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u548c\u3002\n\n\u627e\u51fa\u548c\u4e3a S \u7684\u6240\u6709\u5143\u7d20\u4e0b\u6807 i \u548c j\uff0c\u5373\u6c42\u548c\u51fd\u6570 f(i, j)\uff0c\n\n\u8bbe f(i, j) = A[i] + A[i+1] +... + A[j] \uff0c\n\nA[k] \u82e5\u5728 [i, j] \u7684\u8303\u56f4\u5185\uff0c\u90a3\u4e48 f(i, j) \u5fc5\u7136\u4e3a S\u3002\n\n\u627e\u5230\u6240\u6709 (i, j) \u7684\u4e00\u4e2a\u6700\u5c0f\u503c\uff0c\u5373\u5f97\u5230\u8303\u56f4\uff08i, j\uff09\u7684\u548c\u6700\u5c0f\u503c\u3002\n\n\u6570\u5b66\u65b9\u6cd5\u603b\u7ed3\uff1a\n\n\u7b97\u6cd5\uff1a\n\u679a\u4e3e\u5143\u7d20 j\uff1a\n    \u5f53 j \u4e3a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u65f6\uff0ci=j\uff0c\u8fd9\u79cd\u60c5\u51b5\u5373\u4e3a\u548c\u4e3a S \u7684\u5143\u7d20\u4e0b\u6807\u3002\n\n\u56fa\u5b9a\u5143\u7d20\uff1a\u5728\u6570\u7ec4\u4e2d\u67d0\u4e2a\u4e0b\u6807 i\uff0c\u5206\u522b\u7528\u5de6\u53f3\u4e24\u4e2a\u6570\u7ec4\u8868\u793a\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u548c\u3002\n\n\u627e\u51fa\u548c\u4e3a S \u7684\u6240\u6709\u5143\u7d20\u4e0b\u6807 i \u548c j\uff0c\u5373\u6c42\u548c\u51fd\u6570 f(i, j)\uff0c\n\n\u8bbe f(i, j) = A[i] + A[i+1] +... + A[j] \uff0c\n\nA[k] \u82e5\u5728 [i, j] \u7684\u8303\u56f4\u5185\uff0c\u90a3\u4e48 f(i, j) \u5fc5\u7136\u4e3a S\u3002\n\n\u6570\u5b66\u65b9\u6cd5\uff1a\n\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20 i\uff0c\u53ef\u4ee5\u679a\u4e3e j \u7684\u53d6\u503c\u8303\u56f4\uff0c\u6ee1\u8db3 i <= j\u3002\n\n\u56fa\u5b9a\u5143\u7d20\uff1a\u5728\u6570\u7ec4\u4e2d\u67d0\u4e2a\u4e0b\u6807 i\uff0c\u5206\u522b\u7528\u5de6\u53f3\u4e24\u4e2a\u6570\u7ec4\u8868\u793a\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u548c\u3002\n\n\u627e\u51fa\u548c\u4e3a S \u7684\u6240\u6709\u5143\u7d20\u4e0b\u6807 i \u548c j\uff0c\u5373\u6c42\u548c\u51fd\u6570 f(i, j)\uff0c\n\n\u8bbe f(i, j) = A[i] + A[i+1] +... + A[j] \uff0c\n\nA[k] \u82e5\u5728 [i, j] \u7684\u8303\u56f4\u5185\uff0c\u90a3\u4e48 f(i, j) \u5fc5\u7136\u4e3a S\u3002\n\n\u66b4\u529b\u6cd5\uff1aO(n**2)\n\u56fa\u5b9a\u5143\u7d20\uff1aO(1)\n\u627e\u51fa\u548c\u4e3a S \u7684\u6240\u6709\u5143\u7d20\u4e0b\u6807 i \u548c j\uff0c\u5373\u6c42\u548c\u51fd\u6570 f(i, j)\uff0cO(1)\n\u627e\u51fa\u548c\u4e3a S \u7684\u6240\u6709\u5143\u7d20\u4e0b\u6807 i \u548c j\uff0c\u5373\u6c42\u548c\u51fd\u6570 f(i, j)\uff0cO(1)\n\u6c42\u4e00\u4e2a\u8303\u56f4\u5185\uff0cf(i, j) \u7684\u6700\u5c0f\u503c\uff0cO(1)\n\u6570\u5b66\u65b9\u6cd5\u603b\u7ed3\uff1a\n\nO(1)\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n\n\"\"\"\n\n\"\"\"\n\u9898\u76ee\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u7684\u80a1\u7968\u5728\u7b2c i \u5929\u7684\u4ef7\u683c\u3002\n\n\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u6700\u591a\u53ef\u4ee5\u5b8c\u6210\u00a0\u4e24\u7b14\u00a0\u4ea4\u6613\u3002\n\n\u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002\n\n\u793a\u4f8b\u00a01:\n\n\u8f93\u5165\uff1aprices = [3,3,5,0,0,3,1,4]\n\u8f93\u51fa\uff1a6\n\u89e3\u91ca\uff1a\u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 0\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 6 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 3-0 = 3 \u3002\n\u00a0    \u968f\u540e\uff0c\u5728\u7b2c 7 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 8 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 4\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 4-1 = 3 \u3002\n\n\u793a\u4f8b 2\uff1a\n\n\u8f93\u5165\uff1aprices = [1,2,3,4,5]\n\u8f93\u51fa\uff1a4\n\u89e3\u91ca\uff1a\u5728\u7b2c 1 \u5929"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"1\") == 1\nassert solution(\"1\") == 1\nassert solution(\"0\") == 0\n\"\"\"\nfrom itertools import zip_longest\nimport sys"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 1 1 0') == '0'\nprint(solution('0 1 1 0'))\n\n\n-----\n\nThis solution works:\n\n1. create a function that takes input and parses it into a list of booleans\n2. iterate through the list of booleans, and return the first boolean that is true\n\n----\n\nYou are not allowed to use the list of booleans.\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"111000\") == \"0\"\nassert solution(\"111001\") == \"1\"\nassert solution(\"111010\") == \"1\"\nassert solution(\"111011\") == \"0\"\nassert solution(\"111100\") == \"0\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0'\nassert solution('0 0 1 0') == '0'\nassert solution('1 1 1 1') == '1'\n\n-----Problem-----\nA binary string is an 11-bit binary string (i.e., a sequence of 0s and 1s).\n\nWrite a program that takes as input an 11-bit binary string and outputs the decimal equivalent.\n\n-----Solution-----"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 1 1 0\") == \"0\"\nprint(solution(\"0 1 1 0\"))\n-----"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 1 0\") == \"0\"\n\nprint(solution(\"0 1 1 0\"))\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1 1 0\") == \"0\"\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1010\") == 0\nassert solution(\"1011\") == 1\nassert solution(\"1101\") == 1\nassert solution(\"1110\") == 0\nassert solution(\"1111\") == 1\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"500 120 1000\") == \"No\"\nassert solution(\"1000 1000 10000\") == \"No\"\nassert solution(\"10000 15 10000\") == \"Yes\"\nassert solution(\"10000 15 10000\") == \"Yes\"\n\n\"\"\"\n\nD, T, S = [int(x) for x in input().split()]\nprint(\"Yes\" if D / S <= T else \"No\")\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\nimport math\n\nD, T, S = list(map(int, input().split()))\ndistance = math.floor(D/S*T)\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\"\n\nimport math\n\nD, T, S = [int(i) for i in input().split()]\n\nt = (D/S) * 60 + T"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\nassert solution(\"2 10 1\") == \"No\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\n\"\"\"\nimport os\nimport sys\nfrom io import StringIO\nimport unittest\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == 'Yes'\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.r = 3\n        self.c = 3\n        self.m = []\n        self.a = []\n        self.b = []\n        self.x = []\n        self.n = 0\n        self.d = []\n        self.n2 = []\n\n    def solution(self, stdin: str):\n        a = stdin.split('\\n')\n        for i in range(self.r):\n            a[i] = a[i].split(' ')\n        for i in range(self.r):\n            for j in range(self.c):\n                self.m.append(int(a[i][j]))\n        self.n = int(stdin.split('\\n')[-1])\n        for i in range(self.n):\n            self.b.append(int(stdin.split('\\n')[i+1]))\n        for i in range(self.n):\n            if self.m[0][0] == self.b[i] and self.m[1][0] == self.b[i] and self.m[2][0] == self.b[i]:\n                self.x.append('Yes')\n            elif self.m[0][1] == self.b[i] and self.m[1][1] == self.b[i] and self.m[2][1] == self.b[i]:\n                self.x.append('Yes')\n            elif self.m[0][2] == self.b[i] and self.m[1][2] == self.b[i] and self.m[2][2] == self.b[i]:\n                self.x.append('Yes')\n            elif self.m[0][0] == self.b[i] and self.m[1][1] == self.b[i] and self.m[2][2] == self.b[i]:\n                self.x.append('Yes')\n            elif self.m[0][2] == self.b[i] and self.m[1][1] == self.b[i] and self.m[2][0] == self.b[i]:\n                self.x.append('Yes')\n            elif self.m[0][0] == self.b[i] and self.m[1][0] == self.b[i] and self.m[2][0] == self.b[i]:\n                self.x.append('Yes')\n            elif self.m[0][1] == self.b[i] and self.m[1][1] == self.b[i] and self.m[2][1] == self.b[i]:\n                self.x.append('Yes')\n            elif self.m[0][2] == self.b[i] and self.m[1][2] == self.b[i] and self.m[2][2] == self.b[i]:\n                self.x.append('Yes')\n        print('\\n'.join(self.x))"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('84 97 66') == 'Yes'\nassert solution('79 89 11') == 'Yes'\nassert solution('61 59 7') == 'Yes'\nassert solution('7') == 'No'\nassert solution('89') == 'Yes'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"No\"\nassert solution(\"61 59 7\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'Yes'\nassert solution('''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'No'\n\n-----\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"Yes\"\nassert solution(\"61 59 7\") == \"Yes\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"89\") == \"Yes\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\"\n\nn, m = map(int, input().split())\n\na = list(map(int, input().split()))\n\ndp = [0] * (n + 1)\n\nfor i in range(n):\n    dp[i + 1] = dp[i] + a[i]\n\nfor _ in range(m):\n    l, r = map(int, input().split())\n    print(dp[r] - dp[l - 1])\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n5 6\") == \"30\"\n\n'''\nimport sys"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n\") == \"7\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(output())\n'''\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"41 2\\n\"\n\"5 6\\n\") == \"30\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 2 3\\n1 2 3') == '3'\nassert solution('2 2\\n1 2') == '-1'\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\"\n\nimport math\n\nn, m = map(int, input().split())\n\narr = list(map(int, input().split()))\n\nsum = 0\n\nfor i in arr:\n    sum += i"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('41 2\\n5 6') == '30'\n'''\n\n'''\nProblem 2\nWrite a function:"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 4\\n2 3 4 5 6') == '6', \"example\"\nassert solution('3 2\\n2 2') == '2','single'\nassert solution('5 3\\n2 1 2 3 4') == '4', 'all the same'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"./sample_input.txt\") == \"5\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 2\\n\") == \"5\"\n\n\"\"\"\n\nfrom math import ceil\nfrom math import floor\nfrom typing import List\n\nD: int = int(stdin.readline().split()[0])\nN: int = int(stdin.readline().split()[0])\n\ni = 1\nwhile D * i < N:\n    i += 1\n\nd = D * i"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n\") == \"5\"\nassert solution(\"3 3\\n\") == \"15\"\nassert solution(\"2 1\\n\") == \"2\"\nassert solution(\"0 0\\n\") == \"1\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 2\\n\") == \"5\"\nassert solution(\"1 2\\n\") == \"1\"\nassert solution(\"2 2\\n\") == \"2\"\nassert solution(\"0 5\\n\") == \"5\"\nassert solution(\"1 5\\n\") == \"5\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 5\\n') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 2\\n\") == \"1\"\nassert solution(\"1 2\\n\") == \"2\"\nassert solution(\"2 2\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n7 6 8\") == 2\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 2\\n\") == \"2\"\n\nsolution(\"5\\n6 5 4 8\\n\")\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n7 6 8\") == 2\n\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '1'\nassert solution('3 4 5 6 7') == '1'\nassert solution('4 5 6 7 8 9') == '1'\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n7 6 8') == '2'\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 6 8\") == \"2\"\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 6 8\\n4\\n\") == \"2\"\nassert solution(\"2 3 4\\n12\\n\") == \"12\"\n\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nN = int(sys.argv[1])\n\na = [int(s) for s in sys.stdin.readline().split()]\n\ngcd = min(a)\nfor i in range(1, 10**9):\n    temp = [a[0] % i, a[1] % i, a[2] % i]\n    if temp.count(0) == len(a):\n        gcd = i\n        break\nprint(gcd)\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 5\") == \"1\"\n\nassert solution(\"4 6 8\") == \"2\"\n\nassert solution(\"3 7 6\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 6\") == 3\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 6 8\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 1') == '3 1 2'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2\\n2 3') == '3 1 2'\n\n------------Solution------------\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nstack = []\nres = []\nfor i in range(n):\n    if a[i] not in stack:\n        stack.append(a[i])\n        res.append(str(stack.index(a[i]) + 1))\n    else:\n        res.append(str(stack.index(a[i]) + 1))\n\nprint(' '.join(res))\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1 3 2\"\n\nimport unittest\nimport sys\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        assert solution(\"3\\n1 2 3\") == \"1 3 2\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2 1'\nassert solution('1 2 3') == '3 2 1'\nassert solution('1 2 3 4') == '4 3 2 1'\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2 3 1') == '3 1 2'\nassert solution('1\\n2') == '2 1'\nassert solution('3\\n2 3 1') == '3 1 2'\n\nimport sys\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 1') == '3 1 2'\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin_lines) == stdout_lines\n\n------\nYou are given a sequence of N lowercase English letters.\nFor a given integer K, you can select any K indices (assume 1-based indexing) with a uniform probability from the sequence.\nFind the probability that at least one of the K indices selected will contain the letter: 'a'.\n\nInput Format\nThe input consists of three lines.\nThe first line contains the integer N, denoting the length of the sequence.\nThe next line consists of N space-separated lowercase English letters, denoting the elements of the sequence.\nThe third and the last line of the input contains the integer K, denoting the number of indices to be selected.\n\nOutput Format\nOutput a single line consisting of the probability that at least one of the K indices selected contains the letter: 'a'.\nNote: The answer must be correct up to 3 decimal places.\n\nConstraints\n 1 \\le N \\le 10^5\n 1 \\le K \\le N\n\nSample Input 1:\n4\na a c d\n2\n\nSample Output 1:\n0.8333\n\nSample Input 2:\n6\na a b b c c\n3\n\nSample Output 2:\n0.5\n\nSample Input 3:\n5\na a b c d e\n4\n\nSample Output 3:\n0.8333\n\n------\n'''"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\n\n-----Sample Input-----\n4\n4 5 3 2\n\n-----Sample Output-----\n4 3 5 2 1\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\nassert solution(\"4\\n2 3 4 1\") == \"2 3 1 4\"\n\"\"\"\n\nfrom typing import List\nfrom collections import deque"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 7 100') == '9'\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\"\n\nfrom typing import List, Dict\n\nA: int = 0\nB: int = 0\nX: int = 0\n\nA, B, X = map(int, input().split())\n\nlargest = 0\n\nfor i in range(1, 10 ** 9):\n    n: int = A * i + B * len(str(i))\n    if n <= X:\n        largest = i\n    else:\n        break\n\nprint(largest)\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 7 100\") == '9'\nassert solution(\"10 5 100\") == '0'\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 7 100') == '9'\nassert solution('1 2 3 4') == '0'\nassert solution('7 8 9 10') == '8'\n\"\"\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 7 100\") == '9'\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\"\n\na, b, x = map(int, input().split())\n\nn = 0\n\nfor i in range(1, 10 ** 9 + 1):\n    # print(i)\n    if i * a + b * len(str(i)) <= x:\n        n = i\n        break"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '10 7 100'\n) == '9'\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 7 100') == '9'\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('0 1 1') == 0\nassert solution('1 1 1') == 0\nassert solution('1 1 2') == 0\nassert solution('1 1 3') == 0\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 150\n150 140 100 200''') == '2'\nassert solution('''4 10\n10 10 10 10''') == '0'\n\"\"\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == 2\n\"\"\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 150\\n150 140 100 200\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\"\nimport sys\n\nn, k = [int(x) for x in sys.stdin.readline().strip().split()]\n\nh = [int(x) for x in sys.stdin.readline().strip().split()]\n\nans = 0\n\nfor i in h:\n    if i >= k:\n        ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\n\"\"\"\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"4 150\\n150 140 100 200\"), \"2\")"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 150\\n150 140 100 200\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n\"\"\"\nimport sys\nfrom typing import List\nimport bisect"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 150\n150 140 100 200''') == '2'\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == 2\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\nassert solution(\"4 1\\n5 1 2 3\") == \"No\"\nassert solution(\"2 1\\n2 1\") == \"Yes\"\nassert solution(\"2 1\\n1 1\") == \"No\"\n\"\"\"\n\nN, M = input().split()\narr = list(map(int, input().split()))\n\ncount = 0\nfor i in arr:\n    if i >= len(arr) / int(M):\n        count += 1"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nN, M = map(int, input().split())\nvotes = list(map(int, input().split()))\n\nvotes.sort(reverse=True)\nprint(\"Yes\" if votes[M-1] * 4 >= sum(votes) else \"No\")\n\n\n\"\"\"\nSolution 2\n\"\"\"\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\ntotal = sum(a)\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\nassert solution(\"4 3\\n5 4 2 1\") == \"No\"\nassert solution(\"4 5\\n5 4 2 1\") == \"No\"\n\n'''\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\n'''\n\nfrom functools import reduce\nimport math"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '2 3 2\\n'\n    '.#\\n'\n    '###\\n'\n) == '5'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nfrom z3 import Int, Bool\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 2\\n..#\\n###\\n') == '5'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"\nassert solution(\"2 1 1\\n.#\\n#\\n\") == \"0\"\nassert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 2\\n..#\\n###') == '5'\n\"\"\"\n\nimport numpy as np\nfrom collections import defaultdict"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 2\\n..#\\n###\\n') == '5'\n\n-----Note-----\nThe last test case may be incorrect.\nThe sample input is only a part of the full input.\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 2\\n..#\\n###') == '5'\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == 5\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\".#.#\\n..#.\") == \"5\"\nassert solution(\"#.#\\n.##\") == \"0\"\nassert solution(\"###\\n#.\\n#.\\n#.\") == \"1\"\n\n\"\"\"\n\nimport sys\n\nfrom itertools import product\nfrom operator import xor\nfrom typing import Dict, List, Optional, Tuple\n\n_N = list(range(1, 7))\n_C = (\"#\", \".\")\n\n\nclass Grid:\n    def __init__(self, h: int, w: int, k: int, grid: str):\n        self.h = h\n        self.w = w\n        self.k = k\n        self.grid = grid\n        self.grid_list = [list(row) for row in self.grid.split(\"\\n\")]\n\n    def get_all_k_combinations(self) -> List[Tuple[Tuple[int, int]]]:\n        combinations = []\n        for i, j in product(_N, _N):\n            combinations.append((i, j))\n        return combinations\n\n    def check_if_square_is_black(self, square: Tuple[int, int]) -> bool:\n        i, j = square\n        row = self.grid_list[i - 1]\n        if row[j - 1] == \"#\":\n            return True\n        else:\n            return False\n\n    def count_black_squares(self) -> int:\n        all_combinations = self.get_all_k_combinations()\n        count_black_squares = 0\n        for square in all_combinations:\n            if self.check_if_square_is_black(square):\n                count_black_squares += 1\n        return count_black_squares\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n\nimport sys\n\nimport unittest\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2020 2040') == '2'\n\n\"\"\"\n\nL, R = map(int, stdin.readline().split())\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n\nl, r = [int(x) for x in stdin.split()]\n\nr %= 2019\n\nimport sys\n\nfor i in range(r, l-1, -1):\n    for j in range(r, i-1, -1):\n        if i * j % 2019 == r:\n            print(i * j)\n            sys.exit(0)\n\nprint(-1)\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2020 2040') == 2\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('0 2040') == '2'\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n\nL, R = [int(i) for i in input().split()]"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2020 2040') == '2'\nprint(solution('2020 2040'))\n\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\"\n\nS = input()"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"AtCoder1\") == \"WA\"\nassert solution(\"AtCoder2\") == \"AC\"\nassert solution(\"AtCoder3\") == \"WA\"\nassert solution(\"AtCoder4\") == \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AtCoder') == 'AC'\n\nassert solution('aCc') == 'AC'\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AtCoder\") == 'AC'\n\"\"\"\n\nS = input()\nfirst = S[0]\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\"\nimport re\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"AtCoder\\n\") == \"AC\"\nassert solution(\"AtCoder\\nAAbbbccc\") == \"WA\"\nassert solution(\"aabbccCC\") == \"AC\"\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1234\") == \"4\"\nassert solution(\"1213\") == \"1\"\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"2221444444444444444444\") == \"2\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1214\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"12345\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"102214444444\") == \"0\"\nassert solution(\"23333\") == \"5\"\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1324\") == \"3\"\nassert solution(\"1334\") == \"4\"\nassert solution(\"1345\") == \"5\"\nassert solution(\"1356\") == \"6\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"12144444444\") == \"2\"\nassert solution(\"121444444442222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1214') == '2'\n\n\"\"\"\n\nS = stdin[0]\nK = int(stdin[1])"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1214\") == \"2\"\n\"\"\"\n\nimport os\n\nS = input()\nK = int(input())\nK %= 100\n\nprint(S[K % len(S)])\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1214') == '2'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 3 4 1') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"2 5 1 4 3\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(p) == \"YES\" or solution(p) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3 4 1\") == 'YES'\nassert solution(\"5 1 2 3 4\") == 'NO'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"5 3 2 4 1\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'YES'\nassert solution('5 3 1 4 2') == 'NO'\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"201920181\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\nassert solution('201920181') == '4'\n\"\"\"\n\nimport sys\nfrom typing import List, Optional, Dict\n\nfrom icontract import require, ensure, DBC\n\n\nclass DivByThreeAndNotFive(DBC):\n    @require(lambda number: number!= 0)\n    @require(lambda number: number >= 1)\n    @require(lambda number: number <= 10 ** 5)\n    def __init__(self, number: int) -> None:\n        self.number = number\n\n    def numbers(self) -> List[int]:\n        \"\"\"Compute all numbers that are divisible by 3.\"\"\"\n\n        result = []  # type: List[int]\n\n        number = self.number\n        while number > 0:\n            remainder = number % 3\n            if remainder == 0:\n                result.append(number)\n            number = number // 3\n\n        return result\n\n    def count(self) -> int:\n        \"\"\"Count all numbers divisible by 3.\"\"\"\n\n        return len(self.numbers())\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"201920181\") == 4\nassert solution(\"1000000000000000000000000000000000\") == 33\nassert solution(\"201920181\") == 4\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"1000000000000000000000000000000000\") == 33\nassert solution(\"201920181\") == 4\n\n\"\"\""
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"201920181\") == \"4\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"1000000000000000000000000000000000\") == 33\nassert solution(\"201920181\") == 4\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 4 7 11 3\\n') == '2'\nassert solution('3\\n13 37 39\\n1 2 3\\n') == '2'\nassert solution('4\\n0 0 0 0\\n1 2 3 4\\n') == '0'\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == \"3\"\n\n\n\n-----Explanation-----\n\nIn the first example, we may choose $d = -2$, which will produce the following array:\n\n$c = \\begin{pmatrix} -2 & -2 & -2 & -2 \\end{pmatrix}$\n\nIt turns out, that in this case the number of zeros is equal to $2$.\n\nIn the second example, we may choose $d = -\\frac{1}{13}$.\n\nLet us consider another example:\n\n$a = \\begin{pmatrix} 1 & 2 & 3 & 4 \\end{pmatrix}$\n\n$b = \\begin{pmatrix} -2 & -4 & -5 & -7 \\end{pmatrix}$\n\n$d = -\\frac{1}{13}$\n\n$c = \\begin{pmatrix} -2 & -2 & -2 & -2 \\end{pmatrix}$\n\n$c_1 = \\frac{-2}{13} \\cdot 1 + 2 = \\frac{-1}{13}$\n$c_2 = \\frac{-2}{13} \\cdot 2 + 2 = \\frac{-1}{13}$\n$c_3 = \\frac{-2}{13} \\cdot 3 + 2 = \\frac{-1}{13}$\n$c_4 = \\frac{-2}{13} \\cdot 4 + 2 = \\frac{-1}{13}$\n\n$c = \\begin{pmatrix} -1 & -1 & -1 & -1 \\end{pmatrix}$\n\nIt turns out, that $2$ zeroes is the largest number of zeroes.\n\"\"\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\""
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == 2\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 4 7 11 3\\n') == '2'\nassert solution('3\\n13 37 39\\n1 2 3\\n') == '2'\nassert solution('4\\n0 0 0 0\\n1 2 3 4\\n') == '0'\nassert solution('3\\n1 2 -1\\n-6 -12 6\\n') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n1 2 3\\n-6 -12 6\\n\") == \"3\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\\n\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == \"3\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"3\\n1 2 3\\n2 4 7\") == \"2\"\nassert solution(\n\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\n\"3\\n1 2 -1\\n-6 -12 6\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 4 7 11 3\\n1 2 3') == '2'\nassert solution('3\\n13 37 39\\n1 2 3') == '2'\nassert solution('4\\n0 0 0 0\\n1 2 3 4') == '0'\nassert solution('3\\n1 2 -1\\n-6 -12 6') == '3'"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\\n\") == \"3\"\n\"\"\"\nimport itertools\nimport numpy\nimport typing"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == 5\nassert solution(\"dodivthree\") == 7\nassert solution(\"bambarbia\") == 0\nassert solution(\"hellocode\") == 0\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"0\"\nassert solution(\"code???\") == \"10\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('codeforces') == 5\nassert solution('dodivthree') == 7\nassert solution('hellocode') == 0\nassert solution('bambarbia') == 10\nassert solution('??????') == 10\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == 5\nassert solution(\"dodivthree\") == 7\nassert solution(\"bambarbia\") == 0\nassert solution(\"hellocode\") == 0\nassert solution(\"???\") == 10\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('codeforces') == 5"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 abc?def\") == \"5 7\"\nassert solution(\"7 code?\") == \"0\"\nassert solution(\"9 hellocode\") == \"10 9\"\n\nassert solution(\"10 abc?def\") == \"5 7\"\nassert solution(\"7 code?\") == \"0\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == 5\nassert solution(\"dodivthree\") == 7\nassert solution(\"bambarbia\") == 0\nassert solution(\"hellocode\") == 10\nassert solution(\"abaca?b\") == 5\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\ncodeforces\\ndodivthree\") == '5\\n7 8'\nassert solution(\"7\\nabaca?b\\nzabbbcc\") == '5\\n6 5'\nassert solution(\"9\\nbambarbia\\nhellocode\") == '0'\nassert solution(\"10\\ncode??????\\n??????test\") == '10\\n6 2\\n1 6\\n7 3\\n3 5\\n4 8\\n9 7\\n5 1\\n2 4\\n10 9\\n8 10'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"5\\n7 8\\n4 9\\n2 2\\n9 10\\n3 1\"\n\n\"\"\"\n\n\"\"\"\nCodeSignal solution:\nfrom collections import Counter\n\nimport sys\n\nn = int(sys.stdin.readline())\nn_boot_1 = Counter(sys.stdin.readline().strip())\nn_boot_2 = Counter(sys.stdin.readline().strip())\n\nfor i in n_boot_1:\n    if i in n_boot_2:\n        n_boot_2[i] -= n_boot_1[i]\n\nn_boot_3 = Counter()\nfor i in n_boot_2:\n    if n_boot_2[i] == 0:\n        n_boot_3[i] = 0\n    else:\n        n_boot_3[i] = n_boot_2[i] // 2\n\nprint(sum(n_boot_3.values()))\n\nfor i, j in sorted(n_boot_3.items()):\n    print(i, j)\n\"\"\"\n\nfrom collections import Counter\n\nimport sys\n\nn = int(sys.stdin.readline())\nn_boot_1 = Counter(sys.stdin.readline().strip())\nn_boot_2 = Counter(sys.stdin.readline().strip())\n\nn_boot_3 = Counter()\nfor i in n_boot_1:\n    if n_boot_1[i] == 0:\n        n_boot_3[i] = 0\n    else:\n        n_boot_3[i] = n_boot_1[i] // 2\n\nfor i in n_boot_2:\n    if i not in n_boot_3:\n        n_boot_3[i] = 0\n    else:\n        if n_boot_2[i] > n_boot_3[i]:\n            n_boot_3[i] = n_boot_2[i] - n_boot_3[i]\n\nprint(sum(n_boot_3.values()))\n\nfor i, j in sorted(n_boot_3.items()):\n    print(i, j)"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"5\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"0\"\nassert solution(\"baba???????\") == \"5\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\n\n\"\"\"\n\nfrom collections import defaultdict, Counter"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"4 1 2 2 1 5 3\") == \"3\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\\n4 5\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == \"2\\n3 4\\n1 1\\n2 2\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"7 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"4 1 1 1\") == \"4\"\nassert solution(\"4 0 0 0\") == \"1\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\\n2 2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\\n1 1\"\nassert solution(\"3\\n3 3\") == \"1 1\"\n\n\"\"\""
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3\\n7 7'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4'\nassert solution('4\\n1 1 1 1') == '4\\n4 4'\nassert solution('1\\n1') == '1\\n1 1'\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''7\n4 1 2 2 1 5 3''') == '''3\n7 7'''\nassert solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5''') == '''2\n3 4\n1 1\n2 2'''\nassert solution('''4\n1 1 1 1''') == '''4\n4 4'''"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\\n1 1\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 11\\n45 1 10 12 11 7\") == \"7\"\nassert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\""
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n2 78 4 10') == '12'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 11\\n45 1 10 12 11 7') == 7\nassert solution('4 2\\n2 78 4 10') == 12\nassert solution('5 2\\n3 7 19 3 3') == 0\n\nfrom typing import List\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n2 78 4 10') == '12'\n\nassert solution('5 2\\n3 7 19 3 3') == '0'\n\nassert solution('4 2\\n2 78 4 10') == '12'\n\nassert solution('5 2\\n3 7 19 3 3') == '0'\n\nassert solution('4 2\\n2 78 4 10') == '12'"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == 12\n\n\"\"\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 11\") == '7'\nassert solution(\"4 2\") == '12'\nassert solution(\"5 2\") == '0'\n\n-------solution-------\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n2 78 4 10\\n') == 12\n\nassert solution('5 2\\n3 7 19 3 3\\n') == 0\n\nassert solution('5 1\\n3 7 19 3 3\\n') == 7\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n3 7 19 3 3\") == \"12\"\n\n\"\"\"\n\nimport sys\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 11\\n45 1 10 12 11 7\") == \"7\"\n\"\"\""
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\nprint(\"Passed!\")\n\n\"\"\"\nfrom typing import List\nimport math\n\nclass Solution:\n    def func(self, stdin):\n        N = int(stdin)\n        B = list(map(int, stdin.split()))\n        A = []\n        for i in range(0, len(B)-1):\n            A.append(max(B[i], B[i+1]))\n        print(max(A))\n\nsolution = Solution()\nsolution.func(\"3\\n2 5\")\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\nprint(\"PASSED\")\n\n\"\"\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('0') == 0\n'''"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 5\\n\") == \"9\"\nprint(\"PASSED\")\n\n-----Sample Input-----\n4\n4 2 8 10\n\n-----Sample Output-----\n20\n\n-----Sample Input-----\n5\n1 2 3 4 5\n\n-----Sample Output-----\n15\n\n-----Sample Input-----\n5\n1 2 3 4 5\n\n-----Sample Output-----\n15\n\n-----Sample Input-----\n5\n1 0 1 2 0\n\n-----Sample Output-----\n6\n\n-----Sample Input-----\n5\n0 1 1 2 1\n\n-----Sample Output-----\n6\n\n-----Sample Input-----\n5\n-1 0 1 2 0\n\n-----Sample Output-----\n3\n\n-----Sample Input-----\n3\n1 2 1\n\n-----Sample Output-----\n4\n\n-----Sample Input-----\n3\n2 3 1\n\n-----Sample Output-----\n5\n\n-----Sample Input-----\n4\n1 0 1 1\n\n-----Sample Output-----\n2\n\n-----Sample Input-----\n2\n1 2\n\n-----Sample Output-----\n3\n\n-----Sample Input-----\n2\n1 2\n\n-----Sample Output-----\n1\n\n-----Sample Input-----\n1\n1\n\n-----Sample Output-----\n1\n\n-----Sample Input-----\n3\n-1 0 1\n\n-----Sample Output-----\n2\n\n-----Sample Input-----\n3\n2 1 1\n\n-----Sample Output-----\n5\n\n-----Sample Input-----\n4\n1 0 1 1\n\n-----Sample Output-----\n5\n\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solution(self, arr: List[int]) -> int:\n        arr.append(0)\n        current_max = 0\n        for i in range(len(arr) - 1):\n            current_max = max(current_max, arr[i])\n            arr[i + 1] += current_max\n        return max(arr)"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5\") == '9'\nprint(\"PASS\")\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 5\") == \"9\"\nprint(\"Test 1 PASSED\")\n\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == '10', 'wrong result'"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 5') == '9'\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\") == \"9\"\nprint(solution(\"2 5\"))\n\"\"\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2\\n1 1 1 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10'\n) == '110'\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\nimport sys\n\nN, M, Q = list(map(int, sys.stdin.readline().split()))\n\nA = [0] * N\nfor _ in range(Q):\n    a, b, c, d = list(map(int, sys.stdin.readline().split()))\n    A[a - 1] += d\n    A[b - 1] -= d\n\nprint(max(A))\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == '110'\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10'\n) == '110'\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 2\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\nprint('Test passed')\n\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 3\\n1 2 2 10\\n1 3 3 100\\n2 3 2 10\\n1 1 2 100\") == \"110\"\n\"\"\"\n\nn, m, q = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n\nscores = []\n\nfor i in range(q):\n    a, b, c, d = map(int, input().split())\n    \n    l = a - 1\n    r = b - 1\n    while l < r:\n        mid = (l + r) // 2\n        if a[mid] == c:\n            l = mid\n        elif a[mid] > c:\n            r = mid\n        else:\n            l = mid + 1\n    \n    scores.append(d * (b - l))\n\nprint(max(scores))"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == 110\n\"\"\"\n\n\"\"\"\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f N \u043f\u0430\u0440 \u0447\u0438\u0441\u0435\u043b - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u043b\u044f \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441. \u0417\u0430\u0442\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043e\u0442\u0432\u0435\u0442\u043e\u0432. \u041e\u0442\u0432\u0435\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e 1000, \u0438 \u0441\u0443\u043c\u043c\u0430 \u0432\u0441\u0435\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0442\u044c 10000. \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u043e\u043c\u0435\u0440 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430.\n\n-----Constraints-----\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:\n- \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430: N, M, Q - \u0446\u0435\u043b\u044b\u0435, \u043d\u0435\u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435, \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b;\n- \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043f\u0430\u0440\u044b \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0449\u0438\u0445 1000, \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u043e\u0434\u043d\u0438\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0430\u0440\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432.\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u043e\u0442\u0432\u0435\u0442\u044b \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c, \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 1000.\n\n-----Sample Input-----\n10 4 3\n1 2 3 5\n1 2 3 5\n1 2 3 4 6\n1 2 3 5 6\n2 3 2 5\n2 3 2 4 6\n3 3 2 3 5\n3 3 2 3 4 6\n4 4 3 3\n4 4 3 3\n\n-----Sample Output-----\n7\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 4 6 3') == '5'\nassert solution('4 3 2 6 1') == '5'\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 4 2') == '5'\nassert solution('1 4 6 3') == '5'\n\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 4 6 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 4 6 3\\n') == 5\n\"\"\"\nimport sys\n\nlines = [line.strip() for line in sys.stdin]\nN = int(lines[0])\nA = list(map(int, lines[1].split()))\n\nprint(max(A) - min(A))\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 4 6 3\\n') == '5'\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\n-------- Tests --------\n>>> solution(\"4\\n1 4 6 3\")\n'5'\n\n>>> solution(\"4\\n1 4 6 7\")\n'2'\n\n>>> solution(\"5\\n1 4 6 7 2\")\n'1'\n\n>>> solution(\"6\\n1 4 6 7 2 10\")\n'4'\n\n>>> solution(\"7\\n1 4 6 7 2 10 3\")\n'5'\n\n>>> solution(\"8\\n1 4 6 7 2 10 3 11\")\n'6'\n\n>>> solution(\"9\\n1 4 6 7 2 10 3 11 5\")\n'7'\n\n>>> solution(\"10\\n1 4 6 7 2 10 3 11 5 6\")\n'8'\n\n>>> solution(\"11\\n1 4 6 7 2 10 3 11 5 6 7\")\n'9'\n\n>>> solution(\"12\\n1 4 6 7 2 10 3 11 5 6 7 8\")\n'10'\n\n>>> solution(\"13\\n1 4 6 7 2 10 3 11 5 6 7 8 9\")\n'11'\n\n>>> solution(\"14\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10\")\n'12'\n\n>>> solution(\"15\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11\")\n'13'\n\n>>> solution(\"16\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12\")\n'14'\n\n>>> solution(\"17\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13\")\n'15'\n\n>>> solution(\"18\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14\")\n'16'\n\n>>> solution(\"19\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15\")\n'17'\n\n>>> solution(\"20\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16\")\n'18'\n\n>>> solution(\"21\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17\")\n'19'\n\n>>> solution(\"22\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18\")\n'20'\n\n>>> solution(\"23\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\")\n'21'\n\n>>> solution(\"24\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\")\n'22'\n\n>>> solution(\"25\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\")\n'23'\n\n>>> solution(\"26\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\")\n'24'\n\n>>> solution(\"27\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\")\n'25'\n\n>>> solution(\"28\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\")\n'26'\n\n>>> solution(\"29\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\")\n'27'\n\n>>> solution(\"30\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\")\n'28'\n\n>>> solution(\"31\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\")\n'29'\n\n>>> solution(\"32\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\")\n'30'\n\n>>> solution(\"33\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\")\n'31'\n\n>>> solution(\"34\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\")\n'32'\n\n>>> solution(\"35\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\")\n'33'\n\n>>> solution(\"36\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\")\n'34'\n\n>>> solution(\"37\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\")\n'35'\n\n>>> solution(\"38\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\")\n'36'\n\n>>> solution(\"39\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\")\n'37'\n\n>>> solution(\"40\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\")\n'38'\n\n>>> solution(\"41\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\")\n'39'\n\n>>> solution(\"42\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\")\n'40'\n\n>>> solution(\"43\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\")\n'41'\n\n>>> solution(\"44\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\")\n'42'\n\n>>> solution(\"45\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\")\n'43'\n\n>>> solution(\"46\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42\")\n'44'\n\n>>> solution(\"47\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43\")\n'45'\n\n>>> solution(\"48\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\")\n'46'\n\n>>> solution(\"49\\n1 4 6 7 2 10 3 11 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\")\n'"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 4 6 3\\n\") == \"5\"\n\"\"\"\n\nimport unittest\nfrom collections import deque\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 4 6 3\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 4 6 3\") == '5'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2\\n0 0') == '2.276142'\nassert solution('3\\n0 0\\n1 0') == '2.276142'\nassert solution('3\\n0 0\\n0 1') == '1.414213'"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n0 0\\n1 0\\n0 1') == '2.2761423749'\n\"\"\"\n\nimport sys\n\n\nclass Solution:\n    def solution(self, n: int, xy_list: list):\n        def dfs(x, y):\n            if x > y:\n                return\n            if x == y:\n                return 1\n            return (\n                dfs(x + 1, y)\n                + dfs(x, y - 1)\n                + 1\n            ) / 2\n\n        return sum(dfs(*xy) for xy in xy_list) / n\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.0\"\nassert solution(\"2\\n0 0\\n1 0\") == \"1.41421356237\"\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.0\"\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\n\n'''\n\nimport math\n\nn = int(input())\nxs = list(map(int, input().split()))\nys = list(map(int, input().split()))\ndist = [math.sqrt((xs[i]-xs[j])**2 + (ys[i]-ys[j])**2) for i in range(n) for j in range(n)]\n\nprint(sum(dist)/n)\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == '2.2761423749'\n\"\"\"\n\n\"\"\"\nhttps://www.acmicpc.net/problem/1103\n[1103] \ub3d9\uc804 0\n\uc2dc\uac04 \uc81c\ud55c    \uba54\ubaa8\ub9ac \uc81c\ud55c    \uc81c\ucd9c    \uc815\ub2f5    \ub9de\uc740 \uc0ac\ub78c    \uc815\ub2f5 \ube44\uc728\n1 \ucd08    256 MB    63789    22476    15600    30.177%\n\ubb38\uc81c\n\uc9c0\ubbfc\uc774\ub294 \uae38\uc774\uac00 64cm\uc778 \ub3d9\uc804 N\uac1c\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4. \uc5b4\ub290 \ub0a0 \uc9c0\ubbfc\uc774\ub294 \uae38\uc774\uac00 Xcm\uc778 \ub3d9\uc804\uc744 \ub354 \uac00\uc9c0\uac8c \ub418\uc5c8\ub2e4. \uc774\uc81c \uadf8\ub294 \uadf8\ub0a0 Y\uc2dc\uc5d0 \uc9d1\uc5d0 \uac04\ub2e4. \ub3d9\uc804\uc744 \uc9d1\uc5d0 \uac00\uc9c0\uac8c \ub418\uba74 \uadf8\ub294 \uac70\uc2a4\ub984\ub3c8 C\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4.\n\n\uadf8\ub0a0 \uc9d1\uc5d0 \uac04 \uc9c0\ubbfc\uc774\ub294 \uc55e\uc73c\ub85c Kcm\ub9cc\ud07c\uc758 \uac70\uc2a4\ub984\ub3c8\uc744 \uc8fc\ub294\ub370, \uc774\ub54c \uac70\uc2a4\ub984\ub3c8\uc774 \ubaa8\ub450 \uc783\ub294 \uacbd\uc6b0\ub294 \uc5c6\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4. \uc989, K \\leq C \uc77c \ub54c, \uc9c0\ubbfc\uc774\ub294 \uc9d1\uc5d0 \uac04\ub2e4.\n\n\uc9c0\ubbfc\uc774\uac00 \uc9d1\uc5d0 \uac04 \ud6c4\uc5d0 \ub3d9\uc804\uc758 \uac1c\uc218\ub294 \ucd1d \uba87 \uac1c\ub098 \ub418\ub294\uc9c0 \uad6c\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc2dc\uc624.\n\n\uc785\ub825\n\uccab\uc9f8 \uc904\uc5d0 N, X, Y, C, K\uac00 \uc21c\uc11c\ub300\ub85c \uc8fc\uc5b4\uc9c4\ub2e4. (2 \\leq N \\leq 1000000, 1 \\leq X, Y \\leq 1000000, 0 \\leq C, K \\leq 10)\n\n\ucd9c\ub825\n\uccab\uc9f8 \uc904\uc5d0 \uc9c0\ubbfc\uc774\uac00 \uc9d1\uc5d0 \uac04 \ud6c4\uc5d0 \ubc1b\uc744 \uc218 \uc788\ub294 \ub3d9\uc804\uc758 \ucd5c\ub300 \uac1c\uc218\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n\uc608\uc81c \uc785\ub825 1\n5 16 50 120 2\n\uc608\uc81c \ucd9c\ub825 1\n4\n\uc608\uc81c \uc785\ub825 2\n10 500 1 1000 3\n\uc608\uc81c \ucd9c\ub825 2\n0\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline\n\nN, X, Y, C, K = map(int, input().split())\n\ncoin = 0\n\nwhile X * Y > C:\n    if K >= C:\n        coin += 1\n        K = K - C\n    else:\n        break\n    X -= 1\n    Y -= 1\n    \n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\\n\") == \"2.2761423749\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12 4') == '4'\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12 4\") == \"4\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12 4') == 4\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12 4') == '4'\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12 4') == 4\nprint('Test passed\\n')"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12 4\") == 4\n\nYou can use any programming language you want.\nYou have only one task:\nTo do the solution in Python.\n\n---------------------------------\n\nfrom __future__ import print_function\n\nn = input().split()\nw = int(n[0])\nh = int(n[1])\n\nprint(w*h - 2*h)\n\n---------------------------------\n\nn = [int(i) for i in input().split()]\nprint((n[0]*n[1]) - (2*n[1]))\n\n---------------------------------\n\nn = int(input())\nprint((n*n) - (2*n))\n\n---------------------------------"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 4\") == \"4\"\nprint(solution(\"12 4\"), \"4\")\n\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5, 3) == 3\nassert solution(12, 4) == 4\n\"\"\"\n\nimport math"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10000') == '3'\n\"\"\"\n\n\"\"\"\nInput Format\n\nThe first and only line of the input contains a single integer N\n\nOutput Format\n\nPrint the minimum value of F(A,B) as (A,B) ranges over all pairs of positive integers such that N = A \\times B.\n\nSample Input 0\n\n10\nSample Output 0\n\n3\nExplanation 0\n\nF(A,B) has a minimum value of 3 at (A,B)=(10,10).\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10000') == '3'\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10000') == '3'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10000') == 3, 'Wrong solution'\n\"\"\"\n\nfrom math import log10"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10000') == 3\n\"\"\"\n\nfrom typing import List, Set, Dict, Tuple, Optional, cast\n\nfrom icontract import require, ensure, DBC\n\n\nclass Solution(DBC):\n    # fmt: off\n    @require(\n        lambda n: all(c in '0123456789' for c in n),\n        \"Only numbers allowed\"\n    )\n    @require(\n        lambda n: int(n) > 0,\n        \"The number must be positive\"\n    )\n    # fmt: on\n    def __init__(self, n: int) -> None:\n        self.n = n\n\n    @require(lambda n: int(n) > 0)\n    def n(self) -> int:\n        return self.n\n\n    @require(lambda n: len(n) > 0)\n    def __len__(self) -> int:\n        return len(self.n)\n\n    @require(lambda n: len(n) > 0)\n    def __add__(self, other: int) -> 'Solution':\n        return Solution(self.n + str(other))\n\n    def __mul__(self, other: int) -> 'Solution':\n        return Solution(str(self.n) * other)\n\n    def __pow__(self, power: int, modulo=None) -> 'Solution':\n        return Solution(str(self.n) * power)\n\n    def __floordiv__(self, other: int) -> 'Solution':\n        return Solution(str(self.n) + str(other))\n\n    def __divmod__(self, other: int) -> Tuple['Solution', int]:\n        return Solution(str(self.n) + str(other)), 0\n\n    @require(lambda n: len(n) > 0)\n    def __mod__(self, other: int) -> 'Solution':\n        return Solution(str(self.n) + str(other))\n\n    def __repr__(self) -> str:\n        return f'Solution({self.n})'\n\n    @require(lambda n: len(n) > 0)\n    def __eq__(self, other: int) -> bool:\n        return self.n == other\n\n    def __ge__(self, other: int) -> bool:\n        return int(self.n) >= other\n\n    def __gt__(self, other: int) -> bool:\n        return int(self.n) > other\n\n    def __le__(self, other: int) -> bool:\n        return int(self.n) <= other\n\n    def __lt__(self, other: int) -> bool:\n        return int(self.n) < other\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10000') == 3\nprint(solution('10000'))\n\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100') == 3\nassert solution('10000') == 3\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10000') == 3\n\"\"\"\n\nfrom itertools import combinations\nimport math\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\") == \"5\"\n\"\"\"\n\nN, M = map(int, input().split())\n\nfoods = [0 for _ in range(M)]\nliked = [[] for _ in range(N)]\nfor i in range(N):\n    foods[i] = list(map(int, input().split()))\n    for j in range(1, M + 1):\n        liked[i].append(foods[i][j])\n\nfood_liked = set(liked[0])\nfor i in range(1, N):\n    for j in food_liked:\n        if j not in liked[i]:\n            food_liked.remove(j)\n\nprint(len(food_liked))\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(output())\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"\nassert solution(\"1 2\\n3 4\") == \"0\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"\nassert solution(\"5 5\\n2 1 2 3 4\\n3 1 2 3 4\\n5 1 2 3 4\") == \"6\"\nassert solution(\"10 10\\n2 1 3\\n3 1 4\\n5 1 6\\n5 1 7\\n5 1 8\\n5 1 9\\n5 1 10\\n3 10 10\\n8 2 4\\n8 2 6\\n8 1 8\\n1 8 8\\n8 8 8\\n8 7 8\\n8 8 7\\n9 9 8\\n9 9 9\\n9 7 9\\n9 8 7\\n9 8 8\\n9 9 8\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9\\n9 9 9"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n2 3 2\\n2 3 3\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '3 4\\n2 1 3\\n3 1 2 3\\n2 3 2'\n) == '1'\nassert solution(\n    '4 2\\n2 1 2\\n3 1 3'\n) == '0'\n\n-----\n1 3 2\n1 2 3\n3 2\n\n2 2\n1 3\n2 1\n\n1 3 1\n1 1 3\n2 2\n1 3\n3 1\n\n3 2\n1 3\n1 2\n1 1\n\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"\nprint('PASSED')\n\n-----Solution-----\n\"\"\"\nfrom collections import Counter\nimport sys\n\nstdin = sys.stdin\n\nN, M = [int(x) for x in stdin.readline().split()]\n\nc = Counter([int(x) for x in stdin.readline().split()])\nc = c.most_common()\n\nans = []\n\nfor i in range(len(c)):\n    if len(ans) == N:\n        break\n    if c[i][1] == M:\n        ans.append(c[i][0])\n\nprint(ans)\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(4) == '0.5'"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"0.5\"\nprint(solution(\"4\"))"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"4\\n\"\n) == \"0.5\"\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '0.5'\nassert solution('15') == '0.1875'\n\"\"\""
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\nprint(solution(\"4\\n\"), end=\"\")\n\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n') == '0.5'\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"0.5\"\n\"\"\""
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\n\"\"\"\n\nimport sys\nfrom typing import List, Dict\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n') == '0.5'\nassert solution('4\\n') == '0.5'\nassert solution('1\\n') == '0'\nassert solution('100\\n') == '0'\n\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1\\n2 1\\n2 1\\n1\\n2 1\\n1\\n1 1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n2 0\\n2 0\\n1\\n1 1\\n1 1\\n1\\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '2'\nassert solution('6\\n2\\n3 2\\n3 1\\n4 0\\n5 1\\n5 2\\n') == '4'\nassert solution('10\\n1\\n7 1\\n6 0\\n8 1\\n9 0\\n10 1\\n') == '5'\nassert solution('15\\n1\\n7 1\\n6 0\\n8 1\\n9 0\\n10 1\\n11 0\\n12 1\\n13 0\\n14 1\\n') == '7'\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == '2'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1\\n1 1\\n0\\n1\\n0') == '2'\nassert solution('3\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n1\\n2 1\\n0\\n2 0\\n0') == '2'\n\"\"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0') == '2'\nassert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0') == '2'\n\"\"\"\n\nfrom collections import Counter\n\nN = int(input())\nA = list(map(int, input().split()))\nC = Counter(A)\n\nfor i in range(N):\n    if C[i] == 1:\n        print(C[i])\n        break"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\nprint(solution(stdin_lines))\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1\\n1 1\\n1 1\\n2 1\") == \"2\"\n\n\"\"\"\n\nfrom typing import List, Set\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0') == '2'\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == 2\nassert solution(\"4\\n2\\n2 2\\n2\\n2 2\\n2\") == 2\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\nn = int(input())\nhonest = [0] * n\n\nfor i in range(n):\n    honest[i] = int(input())\n\ncount = 0\nfor i in range(n):\n    is_honest = True\n    for j in range(i):\n        if honest[j]!= i and honest[j]!= j:\n            if honest[j] == honest[i] or honest[j] == i:\n                is_honest = False\n    if is_honest:\n        count += 1\nprint(count)\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n\n\"\"\"\nThe solution is implemented below:\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\nassert solution('nikoandsolsticehas') == 'nikoand...'\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\nnikoandsolstice\") == \"nikoand...\"\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"walrusandpoint\") == \"walrusandpoint\"\nassert solution(\"kitten\") == \"kitten\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport sys\n\nK, S = sys.stdin.readline().rstrip().split(\"\\n\")\nK, S = int(K), str(S)\n\nprint(S[:K] + \"...\" if len(S) > K else S)\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('apple') == 'apples'\nassert solution('banana') == 'bananas'\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"dog\") == \"dogs\"\nassert solution(\"bear\") == \"bears\"\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('apple') == 'apples'\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('apple') == 'apples'\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"apple\")!= \"appleses\"\nassert solution(\"horse\") == \"horses\"\nassert solution(\"sea\") == \"seas\"\nassert solution(\"moon\") == \"moons\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == \"apples\"\n\n---Solution---\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == '1'\nprint(\"Test 1 OK\")\n\n-----------------------\n\nfrom math import ceil"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\nprint('Test passes.')\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\n\nn_k = input().split()\nn, k = int(n_k[0]), int(n_k[1])\nsnakes = []\nfor i in range(k):\n    snakes.append(int(input()))\n\nsnakes_with_snacks = 0\nfor i in snakes:\n    if i > n:\n        snakes_with_snacks += (i - n)\n    elif i == 1:\n        snakes_with_snacks += 1\n    else:\n        snakes_with_snacks += 0\n\nprint(snakes_with_snacks)\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\"\n\nimport itertools\nimport re\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\nfrom __future__ import annotations\n\nimport math\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_DATA = []\nfor line in INPUT_LINES:\n    INPUT_DATA.append(list(map(int, line.rstrip().split())))\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(aabbbbaaca) == 5\nassert solution(aabbbbaacca) == 5\nassert solution(aabbbbaacca) == 5\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aabbbbaaca\") == 5\n\"\"\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aabbbbaaca') == '5'\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aaabbbbaaca') == '5'\nassert solution('abcde') == 'abcde'"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aabbbbaaca\") == 5\n\"\"\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aabbbbaaca\") == 5\n\"\"\"\n\n\nimport collections\nimport itertools\nimport math\nimport sys"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aabbbbaaca') == 5\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nsys.setrecursionlimit(1_000_000)\n\nn = int(sys.stdin.readline().strip())\nslimes = list(sys.stdin.readline().strip())\n\nc = Counter(slimes)\nslimes = set(slimes)\nvisited = set()"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"10\\naabbbbaaca\"\n) == \"5\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aabbbbaaca\") == 5\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aabbbbaaca') == '5'\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5 2 4\") == 3\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5 2 4\") == 3\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 4\\n\") == \"3\"\nassert solution(\"1 2 3\\n\") == \"1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n5 2 4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n5 2 4') == '3'\nassert solution('10\\n1 1 1 1 1 1 1 1 1 1') == '10'\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\n\nans = 0\nfor i in range(n):\n    if a[i] % 2 == 0:\n        ans += a[i] // 2\n        a[i] = a[i] // 2\n    else:\n        ans += a[i] // 2\n        a[i] = a[i] // 2\n        ans += a[i] // 2\n        a[i] = a[i] // 2\n        ans += a[i] // 2\n        a[i] = a[i] // 2\nprint(ans)\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 4\") == \"3\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5 2 4\") == 3\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 1 3') == '2'\n\"\"\"\nfrom collections import Counter\nimport math\n\nA, B, C, K = [int(x) for x in input().split()]\n\na = [1] * A\nb = [-1] * B\nc = [0] * C"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 1 3') == '2'\nassert solution('1 1 1 1') == '2'\nassert solution('1 1 1 1') == '2'\nassert solution('1 1 1 1') == '2'\nassert solution('1 1 1 1') == '2'\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"2 2 3 1\") == \"3\"\nassert solution(\"1 3 1 3\") == \"2\"\nassert solution(\"2 2 3 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a=\"1 1 1 3\", b=\"0 0 0 0\") == \"2\"\nassert solution(a=\"2 1 1 3\", b=\"0 0 0 0\") == \"2\"\nassert solution(a=\"2 1 1 3\", b=\"0 0 0 0\") == \"2\"\n\n---\n\nfor t in range(int(input())):\n    a, b, c, k = map(int, input().split())\n    print(k*(k-1)//2)\n\n---\n\nfor t in range(int(input())):\n    a, b, c, k = map(int, input().split())\n    count = [0] * k\n    for i in range(a):\n        for j in range(k):\n            if i % (j+1) == 0:\n                count[j] += 1\n    print(k * (k-1) // 2 - sum(count))\n\n---"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nprint(\"All test cases passed.\")"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 1 3') == 2\nassert solution('0 1 1 1') == 2\nassert solution('1 0 1 1') == 2\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 8\\n') == 'Yes'\nassert solution('3 9\\n') == 'No'\nassert solution('8 3\\n') == 'No'\nassert solution('3 4\\n') == 'Yes'\nassert solution('1 1\\n') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 8') == 'Yes'\nassert solution('1 2') == 'No'\nassert solution('10 10') == 'No'\nassert solution('1 0') == 'Yes'\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"2 2\") == \"No\"\nassert solution(\"7 7\") == \"Yes\"\n\nassert solution(\"1 1\") == \"Yes\"\nassert solution(\"2 2\") == \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 2\n''') == 'Yes'\n\n'''\n3\n2\n3\n4\n'''"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"7 5\") == \"No\"\n\"\"\"\n\nX, Y = input().split()"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8\\n\") == \"Yes\"\nassert solution(\"7 8\\n\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 8\\n') == 'Yes'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 8') == 'Yes'\nassert solution('8 3') == 'No'\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 8') == 'Yes'\nassert solution('5 6') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"6 10\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\nassert solution(\"100 1\") == \"No\"\nassert solution(\"100 101\") == \"No\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2\\n1 3\\n2 3') == 2\nassert solution('2 2\\n1 1') == 1\n\n\"\"\"\n\nclass Solution:\n    def __init__(self, graph):\n        self.graph = graph\n        self.ans = 0\n        self.visited = dict()\n        self.recurse(1, 0)\n        return\n\n    def recurse(self, cur, step):\n        if cur in self.visited:\n            self.visited[cur] = 1\n            if self.visited[cur] == self.graph.count_vertices():\n                self.ans += 1\n            return\n        else:\n            self.visited[cur] = step + 1\n            for node in self.graph.neighbours(cur):\n                self.recurse(node, step + 1)\n        return\n\n    def solve(self):\n        self.recurse(1, 0)\n        return self.ans"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\\n\") == \"2\"\n\n\"\"\"\n\n\n\"\"\"\n    :type n: int\n    :type m: int\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: int\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"2\"\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 2\\n1 3\\n2 3\\n') == '2'\nassert solution('4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n') == '0'\nassert solution('4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n') == '0'\nassert solution('4 4\\n1 2\\n1 3\\n2 3\\n4 4\\n') == '0'\nassert solution('2 3\\n1 2\\n1 3\\n2 3\\n') == '2'\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"4\"\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n1 2\n1 3\n2 3\n'''.strip()) == '2'\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 3\n1 2\n1 3\n2 3\n''') == '2'\n\"\"\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 3\") == '2'\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n') == '18'\nassert solution('4 4\\n') == '0'\nassert solution('3 5\\n') == '13'\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n3 4 5 6\") == \"18\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n') == '18'\n\"\"\"\n\nfrom math import inf\n\nN, L = input().split(' ')\nL = int(L)\n\nflavor_list = [int(input()) for _ in range(int(N))]\n\nflavor_list.sort(reverse=True)\n\nsmallest_diff = inf\nfor i in range(int(N)-1):\n    flavor_diff = abs(flavor_list[i]-flavor_list[i+1])\n    if flavor_diff < smallest_diff:\n        smallest_diff = flavor_diff\n        target_flavor = flavor_list[i+1]\n\nprint(L+sum(flavor_list)-target_flavor)"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n') == '18'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n2 3\\n4 5\\n3 4\\n5 6\\n\") == '18'\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n') == '18'\nassert solution('5 -100\\n') == '-101'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n') == '18'\nassert solution('2 1\\n') == '3'\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2') == '18'\n\"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"18\"\n\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('15\\n') == '60'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"15\") == \"60\"\n\nprint(solution(\"15\"))"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('15') == '60'\n\"\"\"\n\nfrom math import floor\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('15') == '60'\nassert solution('10') == '30'\n\"\"\"\nimport math"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('15') == '60'\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('15') == '60'\nassert solution('1') == '1'\nassert solution('15\\n15') == '60'\nassert solution('1\\n1') == '1'\n\"\"\"\n\nfrom stdnum import fizzbuzz\nimport sys\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3) == 6\nassert solution(15) == 60"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3 4') == '3'\nassert solution('1 2 3 4 5') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3'\nassert solution('1 1 1 1 1 1') == '1'\nassert solution('5 4 7 10 6 5') == '8'\nassert solution('5 5 4 7 10 6 5') == '8'\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 2 3') == '2'\nassert solution('6 5\\n4 7 10 6 5') == '8'\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n\nx, n = input().split()\nx = int(x)\nn = int(n)\nl = list(map(int, input().split()))\nnearest_to_x = float('inf')\nfor num in set(l):\n    if abs(x - num) < abs(x - nearest_to_x):\n        nearest_to_x = num\nprint(nearest_to_x)\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 7 10 6 5') == '8'\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 10 6 5\") == 8\n\"\"\"\n\nimport sys\nfrom typing import Tuple, List, Set\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 7 10 6 5\\n\") == \"8\"\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\nassert solution(\"4 2\\n2 1\") == \"1\"\nassert solution(\"4 4\\n2 1\") == \"0\"\nassert solution(\"3 2\\n1 3\") == \"0\"\nassert solution(\"3 2\\n1 2\") == \"0\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n2 1\") == \"1\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n2 1') == '1'\nassert solution('1 2\\n3 4') == '0'\n\n\"\"\"\n\nimport re\nimport functools\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 2\n2 1''') == '1'\nprint('Test passed\\n')\n\n-----\nhttps://www.codewars.com/kata/55c45be3b2079eccff00010f/train/python\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"3 2\n    2 1\"\"\"\n) == \"1\"\nprint(\"PASSED\")\n\n\"\"\"\n\u279c  python3 black_cell_remaining.py \nPASSED\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n2 1\\n') == '1'\n\"\"\"\n\n\"\"\"\nSOLUTION 2\n\n-----Input-----\nInput is given from Standard Input in the following format:\nH W\nh w\n\n-----Output-----\nPrint the number of white cells that will remain.\n\n-----Sample Input-----\n3 2\n2 1\n\n-----Sample Output-----\n2\n\nThere are 3 rows and 2 columns of cells. When two rows and one column are chosen and painted in black, there are two white cells that remain.\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n2 1') == '1'\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(solutionTest.a) == solutionTest.e\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\nassert solution('6 2\\n5 7 5 6 5') == '6'\nassert solution('6 2\\n5 7 5 6 5') == '6'\nassert solution('6 2\\n5 7 5 6 5') == '6'"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 4') == '6'\nassert solution('7 2') == '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4\", \"3 7 5 1 10 3 20\") == \"6\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5 3\n3 7 5 1 10 3 20\n''') == '6'\nassert solution('''\n7 2\n3 7 5 1 10 3 20\n''') == '-1'\nassert solution('''\n7 2\n3 7 5 1 10 3 20\n''') == '-1'\nassert solution('''\n7 1\n3 7 5 1 10 3 20\n''') == '-1'\nassert solution('''\n2 2\n3 7 5 1 10 3 20\n''') == '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\n\n\"\"\"\n\nn, k = list(map(int, input().split()))\narr = list(map(int, input().split()))\n\nfor x in range(1, 10 ** 9):\n    num = 0\n    for i in range(n):\n        if arr[i] <= x:\n            num += 1\n        if num == k:\n            print(x)\n            break\n    if num == k:\n        break\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\nassert solution('7 2\\n3 5 4 10 2 7 1') == '4'"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\na = sorted(map(int, stdin.readline().split()))\nleft, right = a[0], 10 ** 9\n\nwhile left <= right:\n    middle = (left + right) // 2\n\n    if sum(1 for x in a if x <= middle) >= k:\n        right = middle - 1\n    else:\n        left = middle + 1\nprint(-1 if left == 10 ** 9 else left)\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 4\") == \"6\"\nassert solution(\"7 2\") == \"-\"\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '-1'\nassert solution('5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....') == '-1'\nassert solution('3 3\\n*.*\\n.*.\\n*.*') == '-1'\nassert solution('3 3\\n*.*\\n.*.\\n*.*') == '-1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3\\n3 4 1\\n3 5 2\\n3 5 1'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '-1'\nassert solution('3 3\\n*.*\\n.*.\\n*.*') == '-1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\") == \"2 2 1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\") == \"3 3 1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\") == \"3 4 1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '3'\nassert solution('5 5\\n.*...\\n***..\\n.*...\\n.*...') == '-1'\nassert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3'\nassert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3'\nassert solution('7 7\\n....*...\\n...*...\\n..***..\\n...*...\\n....*...\\n.....*.') == '-1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"-1\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"-1\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"-1\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"-1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n.*\\n.*\\n.*\") == \"3\"\nassert solution(\"3 3\\n.*\\n.*\\n.*\") == \"3\"\nassert solution(\"3 3\\n***\\n***\\n***\") == \"3\"\nassert solution(\"3 3\\n***\\n***\\n***\") == \"3\"\nassert solution(\"2 2\\n**\\n**\") == \"2\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n*.*\\n.*.\\n*.*\\n') == '3'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n') == '3'\nassert solution('5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n') == '-1'\nassert solution('3 3\\n*.*\\n.*.\\n*.*\\n') == '-1'"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n.*..\\n.*..\\n.*..\\n\") == '3'\nassert solution(\"3 3\\n.*..\\n.*..\\n.*..\\n\") == '-1'\nassert solution(\"3 3\\n.*..\\n.*..\\n.*..\\n\") == '-1'\nassert solution(\"3 3\\n.*..\\n.*..\\n.*..\\n\") == '-1'"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"6 8\\n\"\n    \"...*...\\n\"\n    \"...**...\\n\"\n    \"..*****.\\n\"\n    \"...**...\\n\"\n    \"...*...\\n\"\n    \"........\\n\"\n) == \"3\"\n\nassert solution(\n    \"5 5\\n\"\n    \".*...\\n\"\n    \"****.\\n\"\n    \".****\\n\"\n    \"..**.\\n\"\n    \".....\\n\"\n) == \"3\"\n\nassert solution(\n    \"5 5\\n\"\n    \".*...\\n\"\n    \"***..\\n\"\n    \".*...\\n\"\n    \".*...\\n\"\n    \".....\\n\"\n) == \"2\"\n\nassert solution(\n    \"5 5\\n\"\n    \".*...\\n\"\n    \"***..\\n\"\n    \".*...\\n\"\n    \"***..\\n\"\n    \".....\\n\"\n) == \"2\"\n\nassert solution(\n    \"3 3\\n\"\n    \"*.*\\n\"\n    \".*.\\n\"\n    \"*.*\\n\"\n) == \"-1\""
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n.*\\n.*\\n.*\\n') == '3'\nassert solution('5 5\\n.*\\n***\\n.*\\n.*\\n') == '3'\nassert solution('5 5\\n.*\\n***\\n.*\\n.*\\n') == '-1'\nassert solution('5 5\\n.*\\n****\\n.*\\n.*\\n') == '3'\nassert solution('5 5\\n.*\\n***\\n.*\\n.*\\n') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"good\") == 0\nassert solution(\"string\") == 1\nassert solution(\"xyyx\") == 2\nassert solution(\"aba\") == 0\n\"\"\"\n\nn = int(input())\ns = input()\n\ngood_count = 0\nbad_count = 0\n\nfor i in range(n - 1):\n    if s[i] == s[i + 1]:\n        bad_count += 1\n    if s[i]!= s[i + 1]:\n        good_count += 1"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"good\") == 0\nassert solution(\"aabc\") == 2\nassert solution(\"aaa\") == 3\nassert solution(\"aaaa\") == 0\n\"\"\"\n\nn = int(input())\ns = input()\n\nresult = 0\n\nfor i in range(len(s)):\n    if i % 2 == 0:\n        if s[i]!= s[i + 1]:\n            result += 1\n\nprint(result)\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aa\") == \"ab\"\nassert solution(\"aaa\") == \"aaa\"\n\"\"\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aabc') == 2\nassert solution('aaa') == 3\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a\") == \"a\"\nassert solution(\"aa\") == \"\"\nassert solution(\"aab\") == \"ab\"\nassert solution(\"aabb\") == \"aab\"\n\nassert solution(\"aaa\") == \"\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"xyyxxy\") == 3\n\nassert solution(\"x\") == 0\n\nassert solution(\"xxyy\") == 0\n\nassert solution(\"yxx\") == 2\n\nassert solution(\"xyxxyyyxyxyxyxyxyxyxyxyx\") == 4\n\"\"\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('abc') == ''\nassert solution('aab') == 'a'\nassert solution('aa') == 'a'\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('good') == '0'\nassert solution('string') =='string'\nassert solution('xyyx') == 'xyxx'\nassert solution('aaaa') == 'aaa'\nassert solution('aaaaa') == 'aaaa'\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(good) == 0\nassert solution(bad) == 1\nassert solution(aa) == 1\nassert solution(aabc) == 2"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(good) == 0\nassert solution(string) == 2\nassert solution(xyyx) == 3\nassert solution(aa) == 1\nassert solution(aabc) == 2"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 3\\n2 3\\n1 2\\n1 3\\n2 2\") == \"NO\"\nassert solution(\"2 3\\n1 3\\n1 2\\n2 3\\n2 2\") == \"YES\\n101\"\nassert solution(\"2 2\\n1 2\\n2 1\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\") == \"NO\"\n\nassert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\") == \"YES\\n10100\"\n\n\n-----Hint-----\n\nTo solve this problem, you can try to do it by graph coloring. The aim is to color the vertices with the same color using the edges. You can try to color the vertices in a way that no adjacent vertices have the same color.\n\nIf such coloring exists, it is guaranteed that the graph has no paths of length at least 2. If there is no such coloring, there is no way to direct the edges.\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == '10100'\nassert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == '10100'\nassert solution(\"3 1\\n1 2\\n2 3\") == '001'\nassert solution(\"3 1\\n1 3\\n2 3\") == '010'\nassert solution(\"3 1\\n1 3\\n2 3\") == '110'\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n2 3\\n2 4\") == \"YES\\n101\"\n\nassert solution(\"4 3\\n1 2\\n1 3\\n2 3\") == \"NO\"\nassert solution(\"7 6\\n1 5\\n2 5\\n3 5\\n4 5\\n5 4\\n6 4\") == \"NO\"\nassert solution(\"7 7\\n1 5\\n2 5\\n3 5\\n4 5\\n5 4\\n6 4\\n7 4\") == \"NO\"\nassert solution(\"7 7\\n1 5\\n2 5\\n3 5\\n4 5\\n5 4\\n6 4\\n7 4\") == \"YES\\n1110\"\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1\\n1 2\\n1 3\\n3 1\\n1 4\\n1 5\\n4 1') == 'YES\\n1010'\nassert solution('3 3\\n2 3\\n3 2') == 'NO'\nassert solution('4 2\\n1 2\\n2 3\\n3 1') == 'YES\\n010'\n\"\"\"\n\n\nfrom typing import List\nfrom collections import Counter\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 7\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == 'YES\\n11010'\nassert solution('4 3\\n1 2\\n2 3\\n3 4') == 'NO'\n\n\"\"\"\n\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n\") == \"YES\\n100\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"NO\"\nassert solution(\"3 2\\n1 2\\n1 3\") == \"YES\\n101\"\nassert solution(\"4 3\\n1 2\\n2 3\\n3 4\") == \"YES\\n101010\"\nassert solution(\"5 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"YES\\n10101010\"\nassert solution(\"5 3\\n1 2\\n1 3\\n2 4\\n2 5\\n4 5\") == \"YES\\n10111010\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''6 5\n1 5\n2 1\n1 4\n3 1\n6 1''') == 'YES\\n10100'\n\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\\n\"\n) == \"YES\\n10100\"\nassert solution(\n    \"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\\n\"\n) == \"NO\\n\"\nassert solution(\n    \"5 6\\n1 5\\n3 2\\n1 4\\n5 6\\n\"\n) == \"YES\\n101010\"\n\n\"\"\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n1 2\\n5 5\") == '2\\n3 4'\nassert solution(\"1 7\\n1 7\") == '0'\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\nfrom typing import List, Tuple, Set, Optional\n\nSegment = Tuple[int, int]"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"2 2\\n1 2\\n1 1\") == \"0\"\n\n'''\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\n2 2\\n1 2\\n5 5') == '2\\n3 4'\n\n\"\"\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"1 2\\n1 2\") == \"0\"\nassert solution(\"1 3\\n3 3\") == \"0\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5\\n2 2\\n1 2\\n5 5') == '2\\n3 4'\nassert solution('1 7\\n1 7') == '0'\nassert solution('3 3\\n1 3\\n2 3') == '0'"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 5\n2 2\n1 2\n5 5''') == '2\\n3 4'\nassert solution('''1 7\n1 7''') == '0'\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 9 2 3\") == 2\n\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 9 2 3\") == 2\n\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 9 2 3') == '2'\nassert solution('1 4 7 8') == '3'\nassert solution('1 2 3 4') == '0'\nassert solution('4 9 2 3') == '2'\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 9 2 3') == 2\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 9 2 3') == 2\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1') == '0'\nassert solution('1 1 1 2') == '2'\nassert solution('1 1 1 3') == '0'\nassert solution('1 1 1 4') == '1'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 9 2 3') == '2'\n\"\"\"\n\nA, B, C, D = map(int, input().split())\ncount = 0\nfor i in range(A, B+1):\n    if i % C!= 0 and i % D!= 0:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 9 2 3\") == 2\nassert solution(\"7 2 7 3\") == 0\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 9 2 3') == 2\n\"\"\"\n\na,b,c,d = map(int,input().split())\ncnt = 0\nfor i in range(a,b+1):\n    if i%c!=0 and i%d!=0:\n        cnt +=1\nprint(cnt)"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 9 2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('123456789') == \"Yes\"\nassert solution('123456123456') == \"No\"\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"1234567\") == \"No\"\nassert solution(\"12356789\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nIn mathematics, the digit root of a positive integer, where the digits are listed in descending order, is the\nnumber of times you can sum the digits to produce the number.\n\nFor example, if the integer is 235, then the root would be 2 + 3 + 5 = 7.\n\nGiven an integer x, find its digit root.\n\n-----Constraints-----\n - 1 \\leq x < 10^{6}\n - x is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nx\n\n-----Output-----\nPrint the integer root of x.\n\n-----Sample Input-----\n123\n\n-----Sample Output-----\n7\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('12345678') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('123456789') == 'Yes'\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(123456789) == \"Yes\"\n\n---Problem---\n\nYou are given a string S and a number N.\n\nYou have to print all the numbers in the range [0,N] that are not present in the string.\n\nInput Format\n\nThe first line of input contains the string S\n.\nThe second line of input contains the number N\n.\n\nConstraints\n\n0 < len(S) < 100\n0 <= N < 10^6\nOutput Format\n\nPrint all the numbers in the range [0,N] that are not present in the string.\n\nSample Input 0\n\n23\n2\nSample Output 0\n\n0\n1\n\n---SOLUTION---\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"89\") == \"No\"\nassert solution(\"8\") == \"No\"\nassert solution(\"81\") == \"Yes\"\nassert solution(\"85\") == \"No\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"127\") == \"4\"\n\n'''\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('127') == '4'\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('127') == '4'\n\"\"\"\n\nn = int(input())\nx = 0\nwhile True:\n    if n == 1:\n        break\n    x += 1\n    n = (n - 1) // 6 ** x\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n\nn = int(stdin.readline().strip())"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"127\"\n) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n\nfrom math import log\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"127\") == \"4\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n\nN = int(stdin.readline().strip())"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n\nN = int(input())\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('127\\n') == '4'\n\n\"\"\"\nfrom math import log2, ceil\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'No'\nassert solution('kyoto') == 'Yes'\nassert solution('tokyo') == 'No'\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('kyoto') == 'tokyo'\nassert solution('tokyo') == 'kyoto'\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\nassert solution(\"tokyo\") == \"kyoto\"\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"kyoto\") == \"tokyo\"\nassert solution(\"tokyo\") == \"kyoto\"\nassert solution(\"a\") == \"a\"\nassert solution(\"ab\") == \"ba\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\nassert solution(\"tokyo\") == \"kyoto\"\nassert solution(\"wmoqwam\") == \"mowqwam\"\nassert solution(\"mowqwam\") == \"wmoqwam\"\n\nimport unittest\nimport sys\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        s = \"kyoto\"\n        t = \"tokyo\"\n        self.assertEqual(solution(s), t)"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"KYOTO\") == \"YES\"\nassert solution(\"TOOKYO\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('yes') == 'Yes'\nassert solution('no') == 'No'\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0447\u0442\u043e \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0435\u0440\u0448\u0438\u043d \u0433\u0440\u0430\u0444\u0430 \u0438\u0437 n \u0440\u0435\u0431\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0433\u0440\u0430\u0444, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 n-1 \u0432\u0435\u0440\u0448\u0438\u043d.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e n \u2013 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u0448\u0438\u043d. \u0414\u0430\u043b\u0435\u0435 \u0438\u0434\u0451\u0442 n \u2212 1 \u0441\u0442\u0440\u043e\u043a, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0445 \u0440\u0435\u0431\u0440\u0430, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438. \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u0432\u0438\u0434: \u0441\u043b\u043e\u0432\u043e \\w\\w \u2013 \u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c\u044b\u0435 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u043e\u0434\u043d\u0438\u043c \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432. \u0414\u043b\u0438\u043d\u0430 \u0441\u043b\u043e\u0432\u0430 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 100 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u00abYES\u00bb, \u0435\u0441\u043b\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0433\u0440\u0430\u0444 \u0438 \u00abNO\u00bb, \u0435\u0441\u043b\u0438 \u043d\u0435\u043b\u044c\u0437\u044f.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 1\n\n\u0412\u0432\u043e\u0434    \n\n4\nkot ko ku\nkot ku ko\nko ku kot\nkot ko ku\n\n\u0412\u044b\u0432\u043e\u0434\n\nYES\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abc\") == \"cba\"\nassert solution(\"zxy\") == \"xzy\"\nassert solution(\"abcdefg\") == \"gabcdef\"\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"kyoto\") == \"toky\"\nassert solution(\"toKYO\") == \"toky\"\n\"\"\"\n\nS = input()\nT = input()"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"cabacc\", \"abc\") == \"1\"\n\n-------\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n\n122\n\n123\n\n124\n\n125\n\n126\n\n127\n\n128\n\n129\n\n130\n\n131\n\n132\n\n133\n\n134\n\n135\n\n136\n\n137\n\n138\n\n139\n\n140\n\n141\n\n142\n\n143\n\n144\n\n145\n\n146\n\n147\n\n148\n\n149\n\n150\n\n151\n\n152\n\n153\n\n154\n\n155\n\n156\n\n157\n\n158\n\n159\n\n160\n\n161\n\n162\n\n163\n\n164\n\n165\n\n166\n\n167\n\n168\n\n169\n\n170\n\n171\n\n172\n\n173\n\n174\n\n175\n\n176\n\n177\n\n178\n\n179\n\n180\n\n181\n\n182\n\n183\n\n184\n\n185\n\n186\n\n187\n\n188\n\n189\n\n190\n\n191\n\n192\n\n193\n\n194\n\n195\n\n196\n\n197\n\n198\n\n199\n\n200\n\n201\n\n202\n\n203\n\n204\n\n205\n\n206\n\n207\n\n208\n\n209\n\n210\n\n211\n\n212\n\n213\n\n214\n\n215\n\n216\n\n217\n\n218\n\n219\n\n220\n\n221\n\n222\n\n223\n\n224\n\n225\n\n226\n\n227\n\n228\n\n229\n\n230\n\n231\n\n232\n\n233\n\n234\n\n235\n\n236\n\n237\n\n238\n\n239\n\n240\n\n241\n\n242\n\n243\n\n244\n\n245\n\n246\n\n247\n\n248\n\n249\n\n250\n\n251\n\n252\n\n253\n\n254\n\n255\n\n256\n\n257\n\n258\n\n259\n\n260\n\n261\n\n262\n\n263\n\n264\n\n265\n\n266\n\n267\n\n268\n\n269\n\n270\n\n271\n\n272\n\n273\n\n274\n\n275\n\n276\n\n277\n\n278\n\n279\n\n280\n\n281\n\n282\n\n283\n\n284\n\n285\n\n286\n\n287\n\n288\n\n289\n\n290\n\n291\n\n292\n\n293\n\n294\n\n295\n\n296\n\n297\n\n298\n\n299\n\n300\n\n301\n\n302\n\n303\n\n304\n\n305\n\n306\n\n307\n\n308\n\n309\n\n310\n\n311\n\n312\n\n313\n\n314\n\n315\n\n316\n\n317\n\n318\n\n319\n\n320\n\n321\n\n322\n\n323\n\n324\n\n325\n\n326\n\n327\n\n328\n\n329\n\n330\n\n331\n\n332\n\n333\n\n334\n\n335\n\n336\n\n337\n\n338\n\n339\n\n340\n\n341\n\n342\n\n343\n\n344\n\n345\n\n346\n\n347\n\n348\n\n349\n\n350\n\n351\n\n352\n\n353\n\n354\n\n355\n\n356\n\n357\n\n358\n\n359\n\n360\n\n361\n\n362\n\n363\n\n364\n\n365\n\n366\n\n367\n\n368\n\n369\n\n370\n\n371\n\n372\n\n373\n\n374\n\n375\n\n376\n\n377\n\n378\n\n379\n\n380\n\n381\n\n382\n\n383\n\n384\n\n385\n\n386\n\n387\n\n388\n\n389\n\n390\n\n391\n\n392\n\n393\n\n394\n\n395\n\n396\n\n397\n\n398\n\n399\n\n400\n\n401\n\n402\n\n403\n\n404\n\n405\n\n406\n\n407\n\n408\n\n409\n\n410\n\n411\n\n412\n\n413\n\n414\n\n415\n\n416\n\n417\n\n418\n\n419\n\n420\n\n421\n\n422\n\n423\n\n424\n\n425\n\n426\n\n427\n\n428\n\n429\n\n430\n\n431\n\n432\n\n433\n\n434\n\n435\n\n436\n\n437\n\n438\n\n439\n\n440\n\n441\n\n442\n\n443\n\n444\n\n445\n\n446\n\n447\n\n448\n\n449\n\n450\n\n451\n\n452\n\n453\n\n454\n\n455\n\n456\n\n457\n\n458\n\n459\n\n460\n\n461\n\n462\n\n463\n\n464\n\n465\n\n466\n\n467\n\n468\n\n469\n\n470\n\n471\n\n472\n\n473\n\n474\n\n475\n\n476\n\n477\n\n478\n\n479\n\n480\n\n481\n\n482\n\n483\n\n484\n\n485\n\n486\n\n487\n\n488\n\n489\n\n490\n\n491\n\n492\n\n493\n\n494\n\n495\n\n496\n\n497\n\n498\n\n499\n\n500\n\n501\n\n502\n\n503\n\n504\n\n505\n\n506\n\n507\n\n508\n\n509\n\n510\n\n511\n\n512\n\n513\n\n514\n\n515\n\n516\n\n517\n\n518\n\n519\n\n520\n\n521\n\n522\n\n523\n\n524\n\n525\n\n526\n\n527\n\n528\n\n529\n\n530\n\n531\n\n532\n\n533\n\n534\n\n535\n\n536\n\n537\n\n538\n\n539\n\n540\n\n541\n\n542\n\n543\n\n544\n\n545\n\n546\n\n547\n\n548\n\n549\n\n550\n\n551\n\n552\n\n553\n\n554\n\n555\n\n556\n\n557\n\n558\n\n559\n\n560\n\n561\n\n562\n\n563\n\n564\n\n565\n\n566\n\n567\n\n568\n\n569\n\n570\n\n571\n\n572\n\n573\n\n574\n\n575\n\n576\n\n577\n\n578\n\n579\n\n580\n\n581\n\n582\n\n583\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abc\", \"cab\") == 1\nassert solution(\"abb\", \"bbb\") == 0\nassert solution(\"abacb\", \"bcacb\") == 0\nassert solution(\"abc\", \"dab\") == 1\nassert solution(\"abc\", \"bcb\") == 2\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('cabacc') == 1\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '0'\nassert solution('a') == '1'\nassert solution('ab') == '1'\nassert solution('abcd') == '3'\nassert solution('abc') == '1'\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('cabacc') == 1\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"cabacc\") == \"1\"\nassert solution(\"abc\") == \"0\"\n\"\"\"\n\nS, T = input().split()\n\ni = 0\ncount = 0\nwhile i < len(S):\n    if S[i]!= T[i]:\n        count += 1\n    i += 1\n\nprint(count)\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('cabacc') == 1\nassert solution('abc') == 0\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cabacc\") == 1\n\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"abcdefghijklmnopqrstuvwxyz\"\n\"bcdefghijklmnopqrstuvwxyza\"\n) == 4\nassert solution(\n\"bcdefghijklmnopqrstuvwxyz\"\n\"bcdefghijklmnopqrstuvwxyz\"\n) == 0\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cabacc\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 3 2\\n') == '1'\n\n-----Explanation-----\nInput: A = 6, B = 3, K = 2\nOutput: 1\n\n{1, 2, 3, 4, 6}\n{1, 2, 3, 6}\n{1, 2, 3, 4, 6}\n{1, 2, 4, 6}\n{1, 2, 6}\n{1, 6}\n{1, 2}\n\n2 is the second largest number.\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 12 2\\n') == '2'\n\"\"\"\n\nimport heapq\nimport sys"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 12 2\") == 2\n\"\"\"\nimport math"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 3\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"8 12 2\") == \"2\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\"\"\"\n\na, b, k = map(int, input().split())\n\nfor i in range(1, min(a, b) + 1):\n    if i % a == 0 and i % b == 0:\n        k -= 1\n        if k == 0:\n            print(i)\n            break\n    else:\n        continue\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 12 2\") == 2\n\n-------------\n\nA = 8\nB = 12\nK = 2\n\nmax_divisor = 1\n\nwhile K > max_divisor:\n    for i in range(1, A+1):\n        if A % i == 0 and B % i == 0:\n            max_divisor = i\n            break\n\nassert solution(\"8 12 2\") == 2\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 12 2\\n') == '2'\n\"\"\"\n\nfrom typing import List\nimport heapq\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1024') == '2020'\n\"\"\"\n\nfrom typing import List\n\nfrom ex01 import read_int\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n') == '8'\nassert solution('1\\n') == '5'\nassert solution('10\\n') == '20'\nassert solution('16\\n') == '40'\nassert solution('1024\\n') == '2048'\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1024') == '2020'\nprint(solution('1024'))\n\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1024\") == \"2020\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1024\") == \"2020\"\nprint(solution(\"1024\"))\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1024') == '2020'\n\"\"\"\n\nimport sys\n\ninput = int(sys.stdin.readline())\n\ntaka = 1000\nhappiness = 0\n\nfor i in range(input//500):\n    taka += 500\n    happiness += 100\n\nfor i in range(input//100):\n    taka += 100\n    happiness += 5\n\nfor i in range(input//50):\n    taka += 50\n    happiness += 10\n\nfor i in range(input//10):\n    taka += 10\n    happiness += 5\n\nfor i in range(input//5):\n    taka += 5\n    happiness += 5\n\nfor i in range(input):\n    taka += 1\n    happiness += 1\n\nprint(happiness)\n\n\"\"\"\n\u041f\u0440\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0446\u0438\u043a\u043b while \u0438 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445.\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('3\\n1 2 3') == '5'\n\"\"\"\n\nimport math\n\nn = int(input())\npeople = list(map(int, input().split()))\n\nmin_stamina = 1001\n\nfor i in range(1, n):\n    tmp = people[i] - people[i - 1]\n    min_stamina = min(min_stamina, tmp * tmp)\n\nprint(math.sqrt(min_stamina))\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '4'\nassert solution('1 2 3') == '1'\nassert solution('1 2') == '0'\nassert solution('1') == '0'\n'''\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2\n1 4''') == '5'\nassert solution('''2\n2 2''') == '0'\nassert solution('''2\n2 2\n1 4''') == '5'\nassert solution('''2\n2 2\n2 4''') == '6'\nassert solution('''2\n2 2\n2 4\n1 4''') == '6'\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n2\n1 4\n''') == '5'\nassert solution('''\n2\n1 4\n''') == '5'\nassert solution('''\n2\n3 1\n''') == '1'\nassert solution('''\n2\n2 4\n''') == '1'\nassert solution('''\n1\n1\n''') == '0'\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 4\") == 5\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\nprint(\"Test 1 Passed!\")\nassert solution(\"2\\n4 1\") == \"5\"\nprint(\"Test 2 Passed!\")\nassert solution(\"1\\n1 1\") == \"0\"\nprint(\"Test 3 Passed!\")\nassert solution(\"3\\n1 1 1\") == \"1\"\nprint(\"Test 4 Passed!\")\nassert solution(\"100\\n
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == 5\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 4') == 5\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 10\\n') == '3'\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 10') == 3\n\"\"\"\n\na, b = [int(x) for x in stdin.split()]\nprint(a // (a - b) + 1)\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 10') == 3\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 10') == '3'\nassert solution('1 5') == '0'\nassert solution('10 10') == '0'\n\"\"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 10\\n') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10\\n\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n4 10\n\"\"\"\n) == '3'"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 10\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"CSS\") == \"2\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"2\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"2\"\n\n---\n1. GCD of integers:\n[1,2,3,4,5,6]\n[2,3,4,5,6]\n[3,4,5,6]\n[4,5,6]\n[5,6]\n[6]\n---\n2. Given a sorted array, find the k-th smallest element in this array.\n\nA = [1,2,3,4,5]\nk = 3\nx = 2\n\nx = 2\nA[x-1] = 2, k = 3\nk = 2, x = 1\nx = 1\nA[x-1] = 1, k = 2\nk = 1, x = 0\nx = 0\nA[x] = 0, k = 1\nk = 0, x = -1\nx = -1\nA[x] = -1, k = 0\nk = 0, x = -2\nx = -2\nA[x] = -2, k = 0\nk = 0, x = -3\nx = -3\nA[x] = -3, k = 0\nk = 0, x = -4\nx = -4\nA[x] = -4, k = 0\nk = 0, x = -5\nx = -5\nA[x] = -5, k = 0\nk = 0, x = -6\nx = -6\nA[x] = -6, k = 0\nk = 0, x = -7\nx = -7\nA[x] = -7, k = 0\nk = 0, x = -8\nx = -8\nA[x] = -8, k = 0\nk = 0, x = -9\nx = -9\nA[x] = -9, k = 0\nk = 0, x = -10\nx = -10\nA[x] = -10, k = 0\nk = 0, x = -11\nx = -11\nA[x] = -11, k = 0\nk = 0, x = -12\nx = -12\nA[x] = -12, k = 0\nk = 0, x = -13\nx = -13\nA[x] = -13, k = 0\nk = 0, x = -14\nx = -14\nA[x] = -14, k = 0\nk = 0, x = -15\nx = -15\nA[x] = -15, k = 0\nk = 0, x = -16\nx = -16\nA[x] = -16, k = 0\nk = 0, x = -17\nx = -17\nA[x] = -17, k = 0\nk = 0, x = -18\nx = -18\nA[x] = -18, k = 0\nk = 0, x = -19\nx = -19\nA[x] = -19, k = 0\nk = 0, x = -20\nx = -20\nA[x] = -20, k = 0\nk = 0, x = -21\nx = -21\nA[x] = -21, k = 0\nk = 0, x = -22\nx = -22\nA[x] = -22, k = 0\nk = 0, x = -23\nx = -23\nA[x] = -23, k = 0\nk = 0, x = -24\nx = -24\nA[x] = -24, k = 0\nk = 0, x = -25\nx = -25\nA[x] = -25, k = 0\nk = 0, x = -26\nx = -26\nA[x] = -26, k = 0\nk = 0, x = -27\nx = -27\nA[x] = -27, k = 0\nk = 0, x = -28\nx = -28\nA[x] = -28, k = 0\nk = 0, x = -29\nx = -29\nA[x] = -29, k = 0\nk = 0, x = -30\nx = -30\nA[x] = -30, k = 0\nk = 0, x = -31\nx = -31\nA[x] = -31, k = 0\nk = 0, x = -32\nx = -32\nA[x] = -32, k = 0\nk = 0, x = -33\nx = -33\nA[x] = -33, k = 0\nk = 0, x = -34\nx = -34\nA[x] = -34, k = 0\nk = 0, x = -35\nx = -35\nA[x] = -35, k = 0\nk = 0, x = -36\nx = -36\nA[x] = -36, k = 0\nk = 0, x = -37\nx = -37\nA[x] = -37, k = 0\nk = 0, x = -38\nx = -38\nA[x] = -38, k = 0\nk = 0, x = -39\nx = -39\nA[x] = -39, k = 0\nk = 0, x = -40\nx = -40\nA[x] = -40, k = 0\nk = 0, x = -41\nx = -41\nA[x] = -41, k = 0\nk = 0, x = -42\nx = -42\nA[x] = -42, k = 0\nk = 0, x = -43\nx = -43\nA[x] = -43, k = 0\nk = 0, x = -44\nx = -44\nA[x] = -44, k = 0\nk = 0, x = -45\nx = -45\nA[x] = -45, k = 0\nk = 0, x = -46\nx = -46\nA[x] = -46, k = 0\nk = 0, x = -47\nx = -47\nA[x] = -47, k = 0\nk = 0, x = -48\nx = -48\nA[x] = -48, k = 0\nk = 0, x = -49\nx = -49\nA[x] = -49, k = 0\nk = 0, x = -50\nx = -50\nA[x] = -50, k = 0\nk = 0, x = -51\nx = -51\nA[x] = -51, k = 0\nk = 0, x = -52\nx = -52\nA[x] = -52, k = 0\nk = 0, x = -53\nx = -53\nA[x] = -53, k = 0\nk = 0, x = -54\nx = -54\nA[x] = -54, k = 0\nk = 0, x = -55\nx = -55\nA[x] = -55, k = 0\nk = 0, x = -56\nx = -56\nA[x] = -56, k = 0\nk = 0, x = -57\nx = -57\nA[x] = -57, k = 0\nk = 0, x = -58\nx = -58\nA[x] = -58, k = 0\nk ="
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('CSS') == 2\n\"\"\"\n\nweather = input().lower()\nactual = input().lower()"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"CSS\") == 2\n\n\"\"\"\nimport sys\nimport os"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"2\"\n\"\"\"\n\n\"\"\"\nGiven a string S of length 3, the code will return the weather that it will be the day.\nThe i-th character (1 \\leq i \\leq 3) of S represents the weather on the i-th day:\n S, C, and R stand for sunny, cloudy, and rainy, respectively.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the weather that it will be the day.\n\n-----Sample Input-----\nC\n\n-----Sample Output-----\nsunny\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"CSS\") == 2\n\nimport math\nfrom itertools import groupby"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('CSS') == '2'\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '2'\n\"\"\"\n\nS = stdin.readline().strip()\nT = stdin.readline().strip()\n\nsunny_count, rainy_count = 0, 0\n\nfor i in range(3):\n    if S[i] == T[i]:\n        sunny_count += 1\n    else:\n        rainy_count += 1\n\nprint(sunny_count)\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == 2\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 3 1 2\") == 1\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"\nassert solution(\"10\\n1 5 10 2 9 3 7 8 4 6\") == \"8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3 5 4') == '2'\nassert solution('5\\n1 3 5 4 2') == '2'\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 3 5 4 2\") == \"2\"\nassert solution(\"7 1 2 9 3 4 5 6\") == \"3\"\nassert solution(\"10 1 9 3 7 2 4 8 5 6\") == \"5\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 5 4 2\") == 2\n\"\"\"\nimport sys\nimport heapq"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 3 5 4 2') == 2\n\"\"\"\n\n\"\"\"\nProblem 1\nCreate a function that takes a list and returns a new list that contains all the elements of the first list minus all the duplicates.\n\nSample input:\n\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n\nSample output:\n\n[1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\nassert solution('5\\n1 3 5 6 4') == '0'\nassert solution('5\\n1 3 2 4 5') == '2'\nassert solution('5\\n1 3 4 5 2') == '0'\nassert solution('5\\n5 4 3 2 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.040\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n8\n-2.14 2.06\n-1.14 2.04\n-2.16 1.46\n-2.14 0.70\n-1.42 0.40\n-0.94 -0.48\n-1.42 -1.28\n-2.16 -1.62\n''') == '5.410'\n\"\"\"\n\nimport math\n\nn = int(input())\npoints = []\nfor i in range(n):\n    points.append(list(map(float, input().split())))\n\nx1 = 0\ny1 = 0\nx2 = 0\ny2 = 0\nfor i in range(n):\n    x1 += points[i][0]\n    x2 += points[i][0] * points[i][0]\n    y1 += points[i][1]\n    y2 += points[i][1] * points[i][1]\n\nx1 /= n\ny1 /= n\nx2 /= n\ny2 /= n\n\nx1 = math.sqrt(x1)\nx2 = math.sqrt(x2)\ny1 = math.sqrt(y1)\ny2 = math.sqrt(y2)\n\nd = 0\nfor i in range(n):\n    d += (points[i][0] - x1) * (points[i][1] - y1)\n    d += (points[i][0] * points[i][0] - x1 * x1) * (points[i][1] - y1)\n    d += (points[i][1] - y1) * (points[i][0] * points[i][0] - x1 * x1)\n\nd /= n\n\nd = math.sqrt(d)\n\nd1 = 0\nfor i in range(n):\n    d1 += (points[i][0] - x1) * (points[i][1] - y1)\n    d1 += (points[i][0] * points[i][0] - x1 * x1) * (points[i][1] - y1)\n    d1 += (points[i][1] - y1) * (points[i][0] * points[i][0] - x1 * x1)\n\nd1 /= n\n\nd1 = math.sqrt(d1)\n\nprint(abs((d1 - d) / d))\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62') == '5.410'\nassert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66') == '5.620'\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76') == '5.480'\nassert solution('7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04') == '6.720'\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n') == '5.410'\nassert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\\n') == '5.620'\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\\n') == '6.040'\nassert solution('5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\\n') == '6.720'\nassert solution('8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\\n') == '6.720'\n\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n\") == \"5.410\"\n\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\\n\") == \"5.620\"\n\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\\n\") == \"5.480\"\n\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\\n\") == \"6.040\"\n\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\\n\") == \"6.720\"\n\n\"\"\"\n\nimport re\nimport sys\n\nPATTERN = re.compile(r'(\\d*\\.\\d{2})\\s+'\n                     r'(\\d*\\.\\d{2})\\s+'\n                     r'(\\d*\\.\\d{2})')"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == '5.410'\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\") == '5.620'\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == '6.040'\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == '6.720'\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == '6.720'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66') == '5.620'\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76') == '5.480'\nassert solution('8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92') == '6.040'\nassert solution('7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04') == '6.720'\n'''\n\nimport sys\nimport math"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1) == 2.414213562373095\nassert solution(2) == 1.414213562373095\nassert solution(3) == 1.7320508075688772\nassert solution(4) == 1.7320508075688772\nassert solution(5) == 1.8829351898475647\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3.14 3.14\") == '5.910'\nassert solution(\"2.22 0.34 2.22\") == '2.220'\n\"\"\"\n\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\npoint_count = int(INPUT_LINES[0])\n\npoints = [[float(x) for x in line.split(\" \")] for line in INPUT_LINES[1:]]\n\nprint(round(sum(points[i][1] for i in range(point_count)) / point_count, 3))\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == '5.410'\n\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == '5.620'\n\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == '5.480'\n\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == '6.040'\n\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == '6.720'\n\nprint(\"OK!\")\n\n\"\"\"\n\nfrom fractions import Fraction\n\nN = int(input())\npoints = [Fraction(*map(float, input().split())) for _ in range(N)]\ndelta = sum(x * y for x, y in points) / N\nprint(Fraction(*delta.as_integer_ratio()))\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"2\""
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n\nprint('Success')\n'''\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 10\\n5 5 5 5 5\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\ni = 0\nwhile i < n:\n    if i + 1 < n and a[i] >= a[i + 1]:\n        break\n    i += 1\ni += 1\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(s) == e\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == '1 2 3'\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == '7 3 1 3'\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\") == '1 1'"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 2 4 3 1\") == '1 2 3'\nassert solution(\"1 2 3 2 4 3 1\") == '1 2 3'\nassert solution(\"1 2 1 1 2 1 1 2 1 2 1 1 1 1\") == '1 1'\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"7 3 1 3\"\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def solve(self, stdin: List[str]) -> str:\n        pass\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\n\"\"\"\nfrom itertools import combinations\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == \"1 1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == \"1 1\"\n\n\n\n------\n\n\n\"\"\""
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == \"1 1\"\nprint('Passed')\n\n\"\"\""
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 2\n9 9\n10 8\n5 3\n4 3''') == '5'\nassert solution('''6 1\n3\n6\n2\n5\n1\n4''') == '3'\nassert solution('''6 1\n3\n6\n2\n5\n1\n4''') == '0'\nassert solution('''2 4\n1 2 3 4\n10 3 7 3''') == '0'\n\n\n\"\"\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == 5\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n\n\"\"\"\n\nfrom collections import deque, Counter\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'\nassert solution('6 1\\n3') == '3'"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == 5\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == 0\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4') == 3\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4') == '3'"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'''4 2\n9 9\n10 8\n5 3\n4 3''') == '5'\n\nassert solution(\n'''6 1\n3\n6\n2\n5\n1\n4''') == '3'\n\nassert solution(\n'''6 1\n3\n6\n2\n5\n1\n4''') == '0'\n\nassert solution(\n'''4 2\n9 9\n10 8\n5 3\n4 3''') == '5'\n\nassert solution(\n'''2 4\n1 2 3 4\n10 3 7 3''') == '0'"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4') == '3'\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"xxxiii\") == 1\nassert solution(\"xxoxx\") == 0\nassert solution(\"xxxxxxxxxx\") == 8\n\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\nassert solution(\"xxxx\") == \"0\"\nassert solution(\"xxxx\") == \"0\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Exxxii\") == \"Exxxii\"\nassert solution(\"xxxxxx\") == \"xxxxxx\"\nassert solution(\"xxxxx\") == \"xxxx\"\nassert solution(\"xxx\") == \"0\"\nassert solution(\"xxxx\") == \"3\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"xxxiii\") == 1\nassert solution(\"xxoxx\") == 0\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xxxiii\") == 1\nassert solution(\"xxoxx\") == 0\nassert solution(\"xxxxxxxxxx\") == 8\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"exxxii\") == \"exxi\"\nassert solution(\"xxxxixx\") == \"xixx\"\nassert solution(\"xxxxxx\") == \"xxxx\"\nassert solution(\"xxxxx\") == \"xxxx\"\nassert solution(\"xxxxxxx\") == \"xxxx\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\nprint('All tests passed.')\n\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('xxxiii') == '1'\nassert solution('xxoxx') == '0'\nassert solution('xxxxxxxxxx') == '8'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"xxxiii\") == 1\nassert solution(\"xxxxxxx\") == 8\nassert solution(\"xx\") == 0\n\n\n\"\"\"\n\n\"\"\"\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u0430\n6\nxxxxxxx\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u0430\n1\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u0430\n5\nxxoxx\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u0430\n0\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u0430\n10\nxxxxxxxxxx\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u0430\n8\n\"\"\"\n\n\"\"\"\n\u041a\u0430\u043a \u044d\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f: \u0412\u0430\u0448\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u0438\u043c\u0435\u043d\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c:\n\n\u0418\u043c\u044f \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0443 \u0438\u0437 \u0442\u0440\u0435\u0445 \u0431\u0443\u043a\u0432 x, y \u0438\u043b\u0438 z;\n\u0418\u043c\u044f \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043d\u0430\u0447\u0438\u043d\u0430\u0442\u044c\u0441\u044f \u0441 \u0431\u0443\u043a\u0432\u044b y;\n\u0418\u043c\u044f \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043c\u0435\u043d\u0435\u0435 \u0447\u0435\u0442\u044b\u0440\u0435\u0445 \u0431\u0443\u043a\u0432;\n\u0418\u043c\u044f \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 xxx, \u0433\u0434\u0435 \u043a\u0430\u0436\u0434\u0430\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0431\u0443\u043a\u0432\u0430 \u0440\u0430\u0432\u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439;\n\u0418\u043c\u044f \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 xxx, \u0433\u0434\u0435 \u043a\u0430\u0436\u0434\u0430\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0431\u0443\u043a\u0432\u0430 \u0440\u0430\u0432\u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439;\n\u0418\u043c\u044f \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u043b\u043e\u0432\u043e xxx, \u0433\u0434\u0435 \u043a\u0430\u0436\u0434\u0430\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0431\u0443\u043a\u0432\u0430 \u0440\u0430\u0432\u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 1:\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n5\nxxxx\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n1\n\n\u041f\u0440\u0438\u043c\u0435\u0440 2:\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n6\nxxxyyy\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n0\n\n\u041f\u0440\u0438\u043c\u0435\u0440 3:\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n8\nxxyyzz\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n0\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('xxxxxxxxxx') == '0'\nassert solution('xxoxxxxxx') == '0'\nassert solution('xxxiiii') == '1'\nassert solution('xxxxiiii') == '1'\nassert solution('xxxxxiiix') == '1'\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('42') == '42'\nassert solution('100') == '100'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n\") == 48\n\"\"\"\n\nr = int(input())\ns = 3 * r ** 2\nprint(s)\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == 48\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"48\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n\") == '48'\n\"\"\"\n\nfrom math import pi"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"48\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n') == '48'\n\"\"\"\n\n\"\"\"\nGiven an integer r, find the area of a regular dodecagon inscribed in a circle of radius r.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - r is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint an integer representing the area of the regular dodecagon.\n\n-----Sample Input-----\n4\n\n-----Sample Output-----\n48\n\nThe area of the regular dodecagon is 3 \\times 4^2 = 48.\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"48\"\n\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n\") == \"48\"\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == '48'\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5') == 'unsafe'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\nprint(solution(\"4 5\"), \"unsafe\")\n\nassert solution(\"1 1\") == \"safe\"\nprint(solution(\"1 1\"), \"safe\")\n\nassert solution(\"100 101\") == \"safe\"\nprint(solution(\"100 101\"), \"safe\")\n\nassert solution(\"10 11\") == \"unsafe\"\nprint(solution(\"10 11\"), \"unsafe\")\n\nassert solution(\"100 100\") == \"unsafe\"\nprint(solution(\"100 100\"), \"unsafe\")"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n\") == \"unsafe\"\n\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5') == 'unsafe'\nassert solution('10 3') =='safe'\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(4, 5) == 'unsafe'\n\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n\") == \"unsafe\"\nassert solution(\"6 5\\n\") == \"unsafe\"\nassert solution(\"4 6\\n\") == \"safe\"\n\"\"\"\n\nS, W = map(int, input().split())"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'unsafe'\nassert solution('4 5') == 'unsafe'\nassert solution('100 100') =='safe'\nassert solution('10 10') =='safe'\nassert solution('100 500') =='safe'\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5') == 'unsafe'\nassert solution('10 5') =='safe'\nassert solution('15 3') == 'unsafe'\nassert solution('9 4') =='safe'\n\n\"\"\"\n\nS, W = input().split(' ')\nS = int(S)\nW = int(W)"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5') == 'unsafe'\nassert solution('2 3') =='safe'\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\">=\") == \"unsafe\"\nassert solution(\"<=\") == \"safe\"\nassert solution(\"<\") == \"safe\"\nassert solution(\">\") == \"unsafe\"\nassert solution(\"<=\") == \"safe\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 5') == '6'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == 6\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4 5') == '6'\nassert solution('1 1 1') == '0'\nassert solution('5 5 3') == '8'\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nassert solution(\"5 5 4\") == \"10\"\nassert solution(\"4 6 7\") == \"16\"\nassert solution(\"15 3 4\") == \"0\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nprint(\"test passed\")\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 5') == '6'\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 11 4') == '4'\n\"\"\"\n\nA, B, C = input().split()\nA = int(A)\nB = int(B)\nC = int(C)\nprint(A // (C - B) + 1 if A > B else 0)"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 11 4\") == \"4\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"0 1 0\") == \"0\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 11 4\\n\") == \"4\"\n\"\"\"\n\nA, B, C = map(int, input().split())"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 11 4\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n\nA, B, C = [int(x) for x in stdin.split(\" \")]\n\ns = 0\nfor i in range(B):\n    if A <= s + C:\n        print(i + 1)\n        break\n    s += A\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 11 4\") == \"4\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 11 4') == '4'\nassert solution('3 20 6') == '2'\nassert solution('11 18 3') == '0'\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 11 4') == '4'\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n\na,b = map(int, input().split())\nprint(a*b)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\") == \"10\"\n\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n\nimport sys\n\nA, B = map(int, sys.stdin.readline().strip().split())\n\nprint(A * B)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5') == 10\nprint(solution(stdin.readlines()))\n'''\nimport sys"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\") == 10\n\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 5') == '10'\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == 10\n\"\"\"\n\nA, B = map(int, input().split())\n\nprint(A*B)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 5') == '10'\n\n\"\"\"\n\nfrom __future__ import print_function"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5') == '10'"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nimport sys\nimport os\nimport math"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 7') == '10'\nprint(solution(stdin))\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 7') == 10\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 7') == '10'\n\"\"\"\n\nimport os\nimport sys\nfrom collections import deque\n\nsys.path.append(os.path.join(os.path.dirname(__file__), \"..\"))\nfrom int_code_computer import IntCodeComputer\n\nstdin = list(map(int, input().split()))\n\nmax_value = 30000\n\ndiffs = [x for x in range(max_value) if x % 2 == 0]\n\nq = deque()\nq.append(0)\n\ncomputer = IntCodeComputer(stdin)\ncomputer.inputs.append(0)\nwhile not computer.finished:\n    while computer.execute_next_instruction():\n        pass\n    if computer.outputs:\n        q.append(computer.outputs[-1])\n    if len(q) >= 2:\n        value = q.popleft()\n        second_value = q.popleft()\n        if value in diffs and second_value in diffs:\n            print(value * second_value)\n            break\n        q.append(value)\n        q.append(second_value)\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3 5 7\n''') == '10'\n\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 7') == 10\n\"\"\"\n\nfrom sys import stdin, stdout\n\nA, B, T = [int(x) for x in stdin.readline().split(' ')]\n\nstdout.write(str(A * B + B))\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 7\") == 10\n\"\"\"\n\nA, B, T = map(int, stdin.readline().split())\nT += 0.5\nresult = A * (T // A) - (T // A) * B\nprint(result)\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 7\\n') == 10\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n500 600\") == \"OK\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 500 600') == \"OK\"\n\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\n\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('K A B\\n') == 'OK'\nassert solution('A B K\\n') == 'NG'\nassert solution('K B A\\n') == 'NG'\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('567\\n500 600') == 'OK'\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"567 89\") == \"OK\"\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(a) == \"OK\" or \"NG\"\n\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == output()\n\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 500 600') == 'OK'\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\nassert solution(\"1 1\") == \"OK\"\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\"\n\"\"\"\n\nT, X = [int(n) for n in input().split()]\nprint(\"{0:.3f}\".format(T/X))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 3\\n') == '2.6666666667'\n\n\"\"\"\n\nimport math\n\nT, X = map(int, stdin.readline().split())\n\nprint(str(round(T/X, 3)))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"\n\nT, X = map(int, input().split())\n\nprint(\"{0:.3f}\".format(T/X))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\") == \"2.6666...\"\n\n---Problem---\nTaro is at World B, but he does not know that his timezone is wrong and he has fallen asleep.\nThere is a universal clock on the World B building, but Taro does not know its timezone.\nIt is too late to use the Universal clock.\nTherefore, he needs to take a clock at World A and calculate its timezone.\nYou are given the number of hours Taro is in World B and the number of hours he needs to observe in World A.\nYou should calculate the number of hours Taro spends in World A.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq T \\leq 100\n - 1 \\leq X \\leq 100\n\n-----Input-----\nInput is given from Standard Input in the following format:\nT X\n\n-----Output-----\nPrint the number of hours that Taro spends in World A.\nThe output will be regarded as correct when its absolute or relative error from the judge's output is at most 10^{-3}.\n\n-----Sample Input-----\n1 1\n\n-----Sample Output-----\n0\n\nTaro has spent exactly one hour in World A.\n'''\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3') == '2.6666666667'\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3\\n\") == \"2.666667\"\nprint(solution(\"8 3\\n\"), end=\"\")\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3\\n') == '2.6666666667'\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3\\n') == '2.6666666667'\nassert solution('8 7\\n') == '1.1428571429'\n\"\"\"\n\nt, x = input().split()\n\nt = int(t)\nx = int(x)\n\nprint(t / (x - 1))\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\n---\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n\na, b, c = map(int, input().split())\nprint(min(c, b, a))\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n\nA, B, C = map(int, input().split())\n\ncan_be_filled = min(A, B + C - 1)\n\nprint(can_be_filled - B)\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n\na, b, c = map(int, stdin().strip().split())\nprint(max(0, c-b))"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 4 3\") == \"1\"\nprint(\"Test succeeded.\")\n\n\"\"\"\n\n\"\"\"\nAn array of integers is given. We want to determine the maximum sum of elements that are not adjacent elements (adjacent elements are elements that are next to each other).\n\nWe can shift the array.\n\nFor example, if we have [1, 2, 3, 4, 5, 1, 2], then we can shift it as follows: [5, 1, 2, 3, 4, 1, 2]. Now the array is [5, 1, 2, 3, 4, 1, 2] and the adjacent pairs are [1, 2], [3, 4], [1, 2], which gives us a maximum sum of 8 (1 + 2 + 3 + 4).\n\nWrite a function:"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '0'\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 3 2\n3 1 2\n''') == '3'\n\"\"\"\n\nfrom collections import deque, defaultdict\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n\n    def addEdge(self, u, v):\n        self.graph[u].append(v)\n\n    def DFSUtil(self, v, visited):\n        visited[v] = True\n        print(v, end=' ')\n        for i in self.graph[v]:\n            if visited[i] == False:\n                self.DFSUtil(i, visited)\n\n    def fillOrder(self, v, visited, stack):\n        visited[v] = True\n        for i in self.graph[v]:\n            if visited[i] == False:\n                self.fillOrder(i, visited, stack)\n        stack = stack.append(v)\n\n    def getTranspose(self):\n        g = Graph(self.V)\n\n        for i in self.graph:\n            for j in self.graph[i]:\n                g.addEdge(j, i)\n        return g\n\n    def printSCCs(self):\n\n        stack = deque()\n        visited = [False] * self.V\n        for i in range(self.V):\n            if visited[i] == False:\n                self.fillOrder(i, visited, stack)\n        gr = self.getTranspose()\n\n        visited = [False] * self.V\n        while stack:\n            i = stack.pop()\n            if visited[i] == False:\n                gr.DFSUtil(i, visited)\n                print(\"\")"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\nassert solution(\"2\\n3 1 2\") == \"1\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 3 2 4\\n3 1 4 2') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\nassert solution(\"4\\n1 4 2 3\") == \"1\"\nassert solution(\"5\\n1 5 4 2 3\") == \"3\"\nassert solution(\"6\\n1 6 5 2 4 3\") == \"2\"\nassert solution(\"7\\n1 7 6 5 4 3 2\") == \"5\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\nassert solution(\"2\\n1 3 2\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s) == result\nprint(\"Successfully solved.\")\n\"\"\"\n\n\"\"\"\n(1,~2,~3), (1,~3,~2), (2,~1,~3), (2,~3,~1), (3,~1,~2), and (3,~2,~1) come 2-nd and 5-th in lexicographical order, so the answer is |2 - 5| = 3.\n\"\"\"\n\nN = int(input())\nP = input().split()\nQ = input().split()\n\nans = 0\nfor i in range(N):\n    if P[i]!= Q[i]:\n        ans += 1\nprint(abs(ans))\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 2 4\\n3 1 2 4\") == \"3\"\n\nimport sys\n\nassert solution(sys.stdin.read()) == sys.stdin.read()"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 3 2\\n3 1 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\nassert solution(\"4\\n1 2 3 4\") == \"3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ATCODER\") == 3\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ATCODER') == 'ATC'\n\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ATCODER') == 'ATC'\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ATCODER\") == 3\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ATCODER') == 'ATC'"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(A) == 'AT'\n\"\"\"\n\nstdin = input().strip()\n\nmin_length = 100\nmax_length = 0\n\nfor char in stdin:\n    if char == \"A\":\n        min_length = min(min_length, max_length)\n        max_length += 1\n    elif char == \"C\":\n        max_length = max(max_length, min_length)\n        min_length += 1\n    elif char == \"G\":\n        min_length = min(min_length, max_length)\n        max_length += 1\n    else:\n        min_length = min(min_length, max_length)\n        max_length = 0\n\nmin_length = min(min_length, max_length)\nprint(min_length)\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ATCODER\") == \"ATC\"\nprint(\"PASS\" + \" \" + str(solution(\"ATCODER\")))\n\nassert solution(\"ATC\") == \"ATC\"\nprint(\"PASS\" + \" \" + str(solution(\"ATC\")))\n\nassert solution(\"AC\") == \"AC\"\nprint(\"PASS\" + \" \" + str(solution(\"AC\")))\n\nassert solution(\"CA\") == \"CA\"\nprint(\"PASS\" + \" \" + str(solution(\"CA\")))\n\nassert solution(\"TC\") == \"TC\"\nprint(\"PASS\" + \" \" + str(solution(\"TC\")))"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ATCODER') == 3\nprint(solution('ATCODER'))"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ATCODER') == 3\nassert solution('ATC') == 3\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ATCODER') == 'ATC'\n\"\"\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11') == '9'\nassert solution('1') == '1'\nassert solution('100') == '9'\nassert solution('101') == '8'\n\"\"\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11') == '9'\nassert solution('1') == '0'\nassert solution('15') == '6'\n\nprint(solution(stdin.readline()))\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == '9'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(11) == '9'\nprint(solution(stdin))\n\n\"\"\"\n\n\"\"\"\n>>> print(solution(11))\n9\n\"\"\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11') == 9\n'''\nimport sys"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\") == \"9\"\nassert solution(\"1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11') == '9'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == \"9\"\nassert solution(\"10\") == \"4\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11') == '9'\nprint('Test passes')\n\n---\n\nGiven is an integer N. Find the number of positive integers less than or equal to N that have an odd number of digits (in base ten without leading zeros).\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the number of positive integers less than or equal to N that have an odd number of digits.\n\n-----Sample Input-----\n11\n\n-----Sample Output-----\n9\n\nAmong the positive integers less than or equal to 11, nine integers have an odd number of digits: 1, 2, \\ldots, 9."
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\") == 9\n\"\"\"\n\n\"\"\"\nYou are given an integer N. Find the number of positive integers less than or equal to N that have an odd number of digits (in base 10 without leading zeros).\n\nNote: You are only allowed to use the following operators:\n+, -, *, /, %, ^\n\n---Example---\nN = 10\n\noutput: 2\n\nThe integers that meet this criteria are: 1, 3, 5, 7, 9\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('cupofcoffee') == 'hottea'\nassert solution('hired') == 'id'\nassert solution('dent') == 'enT'\nassert solution('tsuruyaki') == 'truyuaki'"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"cupofcoffee\") == 4\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == result\nprint(solution(stdin))\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"cupofcoffee\") == 4\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cupofcoffee\") == 4\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea'\n\nsolution('cupofcoffee')\n\n-----\nUsing string's index() method to find the position of the character.\n'''"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == solution_reference\n\n----Solution (Top Voted), O(N) Space and Time----\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('cupofcoffee') == 4\n\"\"\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\nprint(solution(\"3 7\"))\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\"\n\nfrom math import floor, ceil"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\"\n\nimport sys\n\nK, X = map(int, sys.stdin.readline().strip().split())"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 7\\n\") == \"5 6 7 8 9\"\n\"\"\"\n\nK, X = input().split()\nK, X = int(K), int(X)"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 7') == '5 6 7 8 9'\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('25') == 'No'\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"31\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('25') == 'No'\nassert solution('30') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('30') == 'No'\nassert solution('25') == 'Yes'\n\"\"\"\n\nx = int(input())"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"15\") == \"No\"\nassert solution(\"35\") == \"Yes\"\nassert solution(\"0\") == \"No\"\nassert solution(\"-5\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(20)) == \"No\"\nassert solution(str(30)) == \"Yes\"\nassert solution(str(25)) == \"No\"\n\nprint('PASSED')\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('25') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"30\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"25\") == \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('25') == 'No'\nassert solution('30') == 'Yes'\nassert solution('-10') == 'No'\n\n\"\"\""
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 2\n1 2\n5 5\n-2 8''') == '1'\n\"\"\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\n-----\n\"\"\"\nimport sys\n\nimport numpy as np"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\n-------------\n\n\"\"\""
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 2\n1 2\n5 5\n-2 8''') == '1'\nassert solution('''1 1\n1 1''') == '0'\nassert solution('''1 1\n2 2\n-1 -1''') == '0'\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u0447\u0438\u0441\u043b\u043e\u043c nn, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0437\u0430\u0434\u0430\u0451\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c.\n\u0414\u0430\u043b\u0435\u0435 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 nn \u0441\u0442\u0440\u043e\u043a \u0441 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 x_i, \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u0418\u0442\u043e\u0433\u043e \u0431\u0443\u0434\u0435\u0442 n+1n+1 \u0441\u0442\u0440\u043e\u043a.\n\u041f\u0440\u0438 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u043d\u0438\u0438 \u0447\u0438\u0441\u043b\u0430 x_i \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 f(x_i).\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f f(x) \u0443\u0436\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430.\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0434\u043e\u043b\u0433\u043e \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 xx.\n\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0443\u043b\u043e\u0436\u0438\u0442\u044c\u0441\u044f \u0432 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.\n\nSample Input 1:\n5\n5\n12\n9\n20\n12\n\nSample Output 1:\n11\n41\n47\n61\n41\n\nSample Input 2:\n1\n1\n\nSample Output 2:\n1\n\n\"\"\""
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n1 2\\n5 5\\n-2 8') == '1'\nprint(solution(input()))"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3 2\n1 2\n5 5\n-2 8\n''') == '1'\n\n-----------------------------------------\nsolution:\nimport math"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\"\"\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\\n\"\n\"\"\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n1 2\\n5 5\\n-2 8') == '1'\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3776\") == \"Good\"\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1111) == \"Bad\"\nassert solution(2234) == \"Good\"\nassert solution(1234) == \"Bad\"\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('1234') == 'Good'\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"2345\") == \"Bad\"\nassert solution(\"54321\") == \"Bad\"\nassert solution(\"1256\") == \"Good\"\n\n------Problem------\nHard is the abbreviation of \"hard to enter.\" Write a program that prompts the user to enter a 4-digit number, and then prints Bad if the security code is hard to enter.\n\n-----Solution------\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"12aa\") == \"Bad\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1234') == 'Good'\nassert solution('1233') == 'Bad'\nassert solution('3344') == 'Bad'\nassert solution('1111') == 'Bad'\nassert solution('1212') == 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12345') == 'Good'\nassert solution('13245') == 'Bad'\nassert solution('1234') == 'Good'\nassert solution('1134') == 'Bad'\nassert solution('1234') == 'Good'\n\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1122\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"1256\") == \"Bad\"\nassert solution(\"1515\") == \"Bad\"\nassert solution(\"1221\") == \"Good\"\n\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3776') == \"Good\"\nassert solution('1234') == \"Bad\"\nassert solution('1256') == \"Good\"\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3776) == 'Bad'\n\nassert solution(3776) == 'Bad'\n\nassert solution(1234) == 'Bad'\n\nassert solution(1235) == 'Good'\n\nassert solution(9876) == 'Bad'"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\nassert solution(\"3\\n1 2 3\") == \"2.66667\"\nassert solution(\"3\\n2 3 4\") == \"3.5\"\nassert solution(\"4\\n1 2 3 4\") == \"3.25\"\nassert solution(\"2\\n3\") == \"3.5\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4') == '3.5'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n5 6\") == \"3.5\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\nassert solution(\"2\\n3 4\") == \"3.5\"\nassert solution(\"2\\n3 4\") == \"3.5\"\nassert solution(\"2\\n3 4\") == \"3.5\"\n\nassert solution(\"2\\n3 4\") == \"3.5\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 2\") == \"2.5\"\nassert solution(\"2 3\\n1 2\\n3 4\") == \"3.5\"\nassert solution(\"2 3\\n1 2\\n3 4\\n5 6\") == \"4.0\"\n\"\"\"\n\nn = int(input())\nd = list(map(int, input().split()))\n\nresult = 0\nwhile len(d) > 1:\n    t = (d[0] + d[1]) / 2\n    result = t\n    d = [t] + d[2:]\n\nprint(result)\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 4\") == \"3.5\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '0'\nassert solution('1\\n0') == '0'\nassert solution('2\\n3 4') == '3.5'\n'''\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n3 4') == '3.5'\nassert solution('3\\n1 2 3') == '2.5'\nassert solution('1\\n1') == '1.0'\nassert solution('4\\n4 4 4 4') == '4.0'\nassert solution('1\\n9') == '9.0'\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\") == 14\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2\n2 5\n3 6''') == '14'\n\nassert solution('''3\n3 1 2\n2 5 4\n3 6''') == '14'\n\nassert solution('''3\n1 3\n2 5\n3 6''') == '15'\n\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\\n\") == '14'\nprint(solution(\"3\\n1 2\\n2 5 4\\n3 6\\n\"))\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\\n\") == 14\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2\\n2 5 4\\n3 6\\n') == '14'\nassert solution('3 1 1\\n2 5 4\\n3 6\\n') == '14'\nassert solution('3\\n3\\n3\\n') == '0'\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\n1 2\n2 5\n3 6\"\"\") == \"14\"\nassert solution(\"\"\"3\n3 1 2\"\"\") == \"14\"\n\n\"\"\"\n[\uc81c\uc57d\uc0ac\ud56d]\n\n[\uc785\ub825]\n\uc785\ub825\uc740 T \uac1c\uc758 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uc73c\uba70, \uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub294 \ud55c \uc904\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uc73c\uba70, \uac01 \uc904\uc740 N \uacfc A_1, A_2,..., A_N, B_1, B_2,..., B_N, C_1, C_2,..., C_{N-1}\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\ub2e4.\n\n\uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub294 \uc22b\uc790 N\uc744 \ud3ec\ud568\ud558\uba70, \uac01 \uc904\uc758 \ub2e4\uc74c\uc5d0 \uc22b\uc790 N\uac1c\uac00 \uc8fc\uc5b4\uc9c4\ub2e4.\n\uac01 \uc22b\uc790\ub294 1 \uc774\uc0c1 50 \uc774\ud558\uc774\ub2e4.\n\n[\ucd9c\ub825]\n\uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub9c8\ub2e4, \ud14c\uc2a4\ud2b8\uc5d0 \ub300\ud55c \ub2f5\uc744 \ucd9c\ub825\ud55c\ub2e4.\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == \"14\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2\\n2 5 4') == '14'\nassert solution('3\\n3 6\\n') == '0'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\nb = list(map(int, stdin.readline().split()))\nc = list(map(int, stdin.readline().split()))\n\ns = 0\nfor i in range(n - 1):\n    s += a[i] * b[i] + c[i]\nprint(s)\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\") == \"14\"\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\\n5 6 7 8\") == \"15\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_data_1) == test_result_1\n\"\"\"\n\nfrom collections import Counter\n\nN = input()\nS = input()\n\nA = \"ABC\"\ncount = 0\n\nfor i in range(len(S) - 2):\n    c = S[i:i+3]\n    if c == A:\n        count += 1\nprint(count)"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ZABCDBABCQ\") == 2\nassert solution(\"BCABA\") == 4\n\"\"\"\n\nimport os\nimport sys\nimport math"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ZABCDBABCQ\") == 2\n\"\"\"\n\nn = input()\ns = input()\n\nprint(s.count('ABC'))\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ZABCDBABCQ\") == 2\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABCDBABCQ\") == \"2\"\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABCABCABC\") == 2\nassert solution(\"ABCABCABCABCABCABC\") == 6\nassert solution(\"ABCABACBAC\") == 2\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''10\nZABCDBABCQ''') == '2'\n\"\"\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('KAD') == 'A'\nassert solution('ABCDA') == '1'\nassert solution('ABCDAB') == '2'\nassert solution('ABCDABC') == '2'\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '10\\n'\n    'ZABCDBABCQ'\n) == '2'\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ZABCDBABCQ') == 2\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'\n'''"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI''') == '2'\n\n\"\"\"\n\nN = int(stdin.readline())"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == '2'\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == 2\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'\nprint('Test pass.')\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"2 1\") == \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"1 1\") == \"Yes\"\nassert solution(\"3 2\") == \"No\"\nassert solution(\"1 0\") == \"No\"\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 3\n1 2\n2 3\n3 1''') == 'Yes'\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3, 3) == 'Yes'\n\n-----Explanation-----\nTakahashi has 3 test cases, all of which have been passed.\n\"\"\"\nimport sys"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3') == 'Yes'\nassert solution('5 6') == 'No'\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"Yes\"\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"10 5\") == \"No\"\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 2 3') == 'Yes'\nassert solution('3 3\\n1 2 1') == 'Yes'\nassert solution('3 3\\n3 1 2') == 'No'\nassert solution('1 1\\n1') == 'Yes'\nassert solution('4 2\\n1 1 2 2') == 'No'\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('sippuu') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"siopoo\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('aabbcc') == 'No'\nassert solution('aabbccddd') == 'No'\nassert solution('abc') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"sippuu\") == \"Yes\"\nassert solution(\"sippuu\") == \"Yes\"\nassert solution(\"sippuu\") == \"Yes\"\nassert solution(\"sippuu\") == \"Yes\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('sippuu') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"abcdd\") == \"No\"\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('sippuu') == 'Yes'\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('sippuu') == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aabbbc\") == \"No\"\nassert solution(\"aabbcc\") == \"Yes\"\nassert solution(\"aabbdd\") == \"No\"\nassert solution(\"aabbde\") == \"Yes\"\nassert solution(\"aabbdf\") == \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('sipp') == 'No'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\n\"\"\"\n\nN, T = [int(x) for x in input().split()]\n\nd = []\nfor _ in range(N):\n    c, t = [int(x) for x in input().split()]\n    d.append((c, t))\n\ndp = [0] * (T + 1)\n\nfor i in range(N):\n    cost, time = d[i]\n    for j in range(T, time - 1, -1):\n        dp[j] = max(dp[j], dp[j - time] + cost)\n\nans = max(dp)"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == '4'\n\"\"\"\n\nimport sys\nimport heapq\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50\\n') == '4'\nassert solution('1 1000\\n1 1000') == 'TLE'\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\\n\") == \"4\"\nassert solution(\"3 100\\n7 60\\n1 80\\n4 50\\n\") == \"TLE\"\n\"\"\"\n\nfrom math import inf\nfrom typing import List\nfrom unittest import main, TestCase\n\n\nclass Solution:\n    \"\"\"\n    The solution will be to\n    1. Calculate the cost of each route\n    2. Find the route with the minimum cost\n    \"\"\"\n    def minimum_cost(self, n: int, t: int, c: List[int], t_: List[int]) -> int:\n        cost = []\n        for i in range(n):\n            cost.append((c[i], t_[i]))\n        cost.sort()\n\n        min_cost = inf\n        for i in range(n):\n            if cost[i][1] <= t:\n                min_cost = min(min_cost, cost[i][0])\n\n        return min_cost\n\n\nclass TestSolution(TestCase):\n    def test_example_1(self):\n        assert Solution().minimum_cost(3, 70, [7, 60, 1], [80, 80, 80]) == 4\n\n    def test_example_2(self):\n        assert Solution().minimum_cost(3, 100, [7, 60, 1], [80, 80, 80]) == \"TLE\"\n\n    def test_example_3(self):\n        assert Solution().minimum_cost(3, 100, [7, 60, 1], [80, 80, 80]) == \"TLE\"\n\n    def test_example_4(self):\n        "
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(': ') == 'TLE'\n\"\"\"\n\nimport math\nfrom dataclasses import dataclass\n\n\n@dataclass(frozen=True)\nclass Route:\n    c: int\n    t: int\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\n\"\"\""
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"3 70\\n7 60\\n1 80\\n4 50\"\n) == \"4\"\nassert solution(\n\"3 70\\n7 60\\n1 80\\n4 50\\n5 70\\n8 70\\n10 70\\n11 70\\n12 70\\n14 70\"\n) == \"TLE\"\nassert solution(\n\"3 70\\n7 60\\n1 80\\n4 50\"\n) == \"4\"\nassert solution(\n\"3 70\\n7 60\\n1 80\\n4 50\\n5 70\\n8 70\\n10 70\\n11 70\\n12 70\\n14 70\"\n) == \"TLE\"\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nSolved\n\nAttempted\n\nRate\n\n109 ms\n\nOptimal\n\nAttempted\n\nRate\n\n110 ms\n\nOptimal\n\nTime Limit Exceeded\n\n\"\"\"\n\nimport math\n\n\nclass Solution:\n    def __init__(self):\n        self.primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    def solution(self, stdin: str) -> str:\n        [N, T] = stdin.split(\" \")\n        N, T = int(N), int(T)\n\n        cost = []\n        time = []\n        for i in range(N):\n            [c, t] = stdin.split(\" \")\n            c, t = int(c), int(t)\n            cost.append(c)\n            time.append(t)\n\n        min_time = T\n        min_cost = math.inf\n        for i in range(N):\n            if (time[i] < min_time):\n                if (cost[i] < min_cost):\n                    min_cost = cost[i]\n                    min_time = time[i]\n\n        if min_cost == math.inf:\n            return \"TLE\"\n        return min_cost\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50\\n') == '4'\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 9\\n\") == \"8\"\nassert solution(\"1 1 1\\n\") == \"1\"\nassert solution(\"2 1 0\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 9\\n\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\"\n\nimport sys\nimport math\n\nA, B = (int(i) for i in input().split())"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 2 9''') == '8'\nassert solution('''1 1 1''') == '1'\nassert solution('''10 5 10''') == '10'\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1, 1, 1) == 0\nassert solution(2, 2, 1) == 1\nassert solution(4, 2, 2) == 4\nassert solution(1, 2, 2) == 3\nassert solution(3, 2, 2) == 4\n\n\"\"\"\nimport sys\nimport numpy as np"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 9') == '8'\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\"\n\n\"\"\"\nimport sys\nimport math\nimport re"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 9') == '8'\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 9') == '8'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\nacornistnt\\npeanutbomb') == 1\nassert solution('3\\nacornistnt\\npeanutbomb') == 1\nassert solution('3\\npeanutbomb\\nacornistnt') == 1\nassert solution('3\\npeanutbomb\\nacornistnt') == 1\nassert solution('4\\npeanutbomb\\nacornistnt\\nconstraint') == 1\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6') == '1\\n2\\n2\\n0\\n4\\n4'\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcdefghijklmnopqrstuvwxyz\") == 26\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\na\\nacornistnt\\n:') == '1'\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\nacornistnt\\npeanutbomb\\nconstraint') == '1'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\ns_list = [sys.stdin.readline().rstrip() for i in range(N)]\n\nans = {}\n\nfor s in s_list:\n    s_list_sorted = \"\".join(sorted(s))\n    if s_list_sorted in ans.keys():\n        ans[s_list_sorted] += 1\n    else:\n        ans[s_list_sorted] = 1\n\nfor i in range(1, N+1):\n    print(ans[str(i)])\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\na\\nc\\na\\nb\\n\") == '2'\n\"\"\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\": qp: qp: pqp: p: p: q\") == 1"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"acornistnt\") == \"1\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"acornistnt\") == 1\n\"\"\"\n\nimport numpy as np\n\nstdin = input()\nn = int(stdin[0])\na = np.array([stdin[1:]])\nb = np.array([stdin[1:]])\n\narr = [a]\nfor i in range(1, n):\n    arr.append(np.array([stdin[(2 * i + 1):(2 * i + 2 + i)]]))\n\ns = np.hstack(arr)\n\nu, c = np.unique(s, return_counts=True)\nd = {k: v for k, v in zip(u, c)}\nfor i in range(n):\n    for j in range(n):\n        if i!= j and d[s[i][0]] == d[s[j][0]]:\n            print(i + 1, j + 1)\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == '1'\n\"\"\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('112123123412345') == '1'\nassert solution('11223341234123412345') == '2'\nassert solution('112345') == '2'\nassert solution('122345') == '5'\nassert solution('12345') == '0'\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2132\\n506\\n999999999\\n1000000000\\n\") == \"8\\n2\\n9\\n8\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"112233445566778899010\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"112123123412345$\\\\dots$\") == '1'\nassert solution(\"111111$\\\\dots$\") == '1'\nassert solution(\"11121212$\\\\dots$\") == '2'\nassert solution(\"112121212121212$\\\\dots$\") == '5'\nassert solution(\"1121221221212122$\\\\dots$\") == '2'\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('112123123412345$\\dots$') == '82229003822290038'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('11') == '0'\nassert solution('111') == '0'\nassert solution
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"112233445567\") == \"7\"\nassert solution(\"123456789\") == \"0\"\nassert solution(\"111213141516171819\") == \"4\"\nassert solution(\"111111\") == \"6\"\nassert solution(\"11111\") == \"6\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\nassert solution(\"1$\\dots$2$\\dots$3$\\dots$\") == \"1\"\nassert solution(\"2$\\dots$3$\\dots$4$\\dots$5$\\dots$\") == \"2\"\nassert solution(\"3$\\dots$4$\\dots$5$\\dots$6$\\dots$\") == \"3\"\n\nassert solution(\"1112131415$\\dots$\") == \"1112131415\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"11212312341234512345612345671234567812345678912345678910\"\nassert solution(\"110$\\dots$\") == \"110\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11212312341234512345612345671234567812345678912345678910\") == \"1\" * 56\nassert solution
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6 2\n1 4\n4 3\n3 5\n3 6\n5 2''') == '2\\n1 2 1 1 2'\nassert solution('''4 2\n3 1\n1 4\n1 2''') == '1\\n1 1 1'\nassert solution('''10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9''') == '3\\n1 1 2 3 2 3 1 3 1'\n\n'''\n'''\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\\n\") == \"2\\n1 2 1 1 2 2\"\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n\") == \"1\\n1 1 1\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\\n1 2 1 1 2\"\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\") == \"1\\n1 1 1\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\\n1 1 2 3 2 3 1 3 1\""
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n2 5\") == \"1 2 1 1 2\"\nassert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2 1 1 1 2\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3 1 1 1 2 2 3 3\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n1 3\") == \"1\\n1 1 1\\n2 1 2 2\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\\n1 1 2 3 2 3 1 3 1\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n1 3\\n\") == \"1\\n1 1 1\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\\n\") == \"3\\n1 1 2 3 2 3 1 3 1\"\n\"\"\""
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 4\\n4 3\\n3 5\") == \"2\\n1 2 1 1 2\"\nassert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"1\\n1 1 1 2 2 2 1 1 1 1 2 2\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\\n1 1 2 3 2 3 1 3 1\"\nassert solution(\"7 3\\n1 4\\n1 5\\n2 6\\n2 7\\n3 8\") == \"1\\n1 1 1 1 1 2 2 2 2\"\nassert solution(\"8 3\\n1 4\\n1 5\\n2 6\\n2 7\\n3 8\\n3 9\\n4 10\") == \"1\\n1 1 1 1 1 2 2 2 2\\n1 1 1 1 1 1 2 2 2\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n1 3\\n2 5\\n2 6\\n2 7\") == \"1 1 2 3 2 3 1 3 1\"\n\n\"\"\""
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == ''\nassert solution('1 1 2 1 1 2') == '1 1 2 1 2'\n\n------------------------------------------------------------------------------------------------------------------------\n\nSolution for:\nhttps://www.codewars.com/kata/5d62c2d0a70a2c4ed9a0034b"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n1 4') == '1 2 1 1 2'\nassert solution('6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2') == '1 2 1 1 2'\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 4 4\\n\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\\n\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\\n\") == \"3 6\"\n\"\"\"\n\nfrom functools import reduce\nimport operator\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 4 4\") == \"2 4\"\nassert solution(\"4 3 7 1 4 3\") == \"3 6\"\n\nprint(\"Successfully solved\")\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3') == '3 6'\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 4 4\\n\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\\n\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\\n\") == \"3 6\"\n\"\"\""
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == (0, 0)\nassert solution('1') == (0, 1)\nassert solution('5') == (0, 5)\nassert solution('5\\n1 2 4 4') == (2, 5)\nassert solution('8\\n1 1 8 8 8 4 4 4 4') == (3, 8)\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('2') == '2'\nassert solution('2 3') == '2'\nassert solution('2 3 4') == '2'\nassert solution('2 3 4 5') == '2'\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3') == '3 6'\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nn = int(sys.argv[1])\n\nhouses = []\n\nfor _ in range(n):\n    houses.append(int(input()))\n\nhouses.sort()\n\nmin_occupied = 0\nmax_occupied = 0\n\nfor i in range(n-1):\n    if houses[i+1] - houses[i] > 1:\n        min_occupied += houses[i+1] - houses[i] - 1\n    if houses[i] - 1 - houses[i+1] > 1:\n        max_occupied += houses[i] - 1 - houses[i+1] - 1\n\nprint(min_occupied, max_occupied)"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3') == '3 2 4 1 5'\nassert solution('3\\n2 3\\n3 1\\n1 2') == '3 1 2'\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"1 2 3 4\"\nassert solution(\"4\\n1 3\\n2 4\") == \"1 2 4 3\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"1 2 3 4 5\"\nassert solution(\"3\\n1 3\\n2 4\") == \"1 2 4 3\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n\") == '3 2 4 1 5'"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n\"\"\"\n\n\"\"\"\nI don't know why this algorithm can work. It's not my best solution.\n\"\"\""
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 3\\n3 1\\n1 2\\n\") == \"3 1 2\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3\n''') == '3 2 4 1 5'\nassert solution('''3\n2 3\n3 1\n1 2\n''') == '3 1 2'\n\n'''\nimport sys\nfrom collections import Counter\nn = int(sys.stdin.readline().strip())\na = []\nfor i in range(n):\n    a.append([int(i) for i in sys.stdin.readline().split()])\na = [[x for x in y] for y in a]\na = sorted(a, key=lambda x: x[0])\nc = Counter([i[0] for i in a])\nres = []\nfor i in range(n):\n    if c[i+1] == 1:\n        res.append(i+1)\n        c[i+1] -= 1\n        c[i+2] -= 1\n    else:\n        res.append(a[i][1])\nprint(' '.join([str(i) for i in res]))\n'''\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n\") == \"3 2 4 1 5\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n3 4\") == \"3 1 4\"\nassert solution(\"4\\n4 3\\n1 2\") == \"3 1 4\"\nassert solution(\"4\\n1 2\\n3 4\\n5 6\") == \"3 1 4 5 6\"\nassert solution(\"4\\n2 1\\n3 4\") == \"3 1 4\"\nassert solution(\"4\\n4 3\\n2 1\") == \"3 1 4\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 3\\n3 1\\n1 2\") == \"3 1 2\"\nassert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 1 2 4 5\"\n\n\"\"\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3''') == '3 2 4 1 5'\n\nassert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3''') == '3 2 4 1 5'\n\nassert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3''') == '3 1 4 5 2'\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"10\\n
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 10 100') == '2'\nassert solution('4\\n1 10 100') == '2'\nassert solution('6\\n1 10 100') == '2'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\nassert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n1 1000 10000 10 100 1000000000') == 3\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == 10\n\"\"\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n1 10 17 12 15 2') == '3'\nassert solution('10\\n
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\n\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u0435\u0448 \"\\\".\n\nSample Input:\n\n\\\\\"\n\\\\\\\"\n\nSample Output:\n\n\"\n\\\"\n\"\"\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"10\\n
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\nassert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\nassert solution('1\\n10') == '1'\n\"\"\"\n\nn = int(input())\narray = list(map(int, input().split()))\narray.sort()\n\nmin_diff = 5\n\nfor i in range(n - 1):\n    if array[i + 1] - array[i] < min_diff:\n        min_diff = array[i + 1] - array[i]\n\nprint(min_diff)\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\\n\") == \"3\"\nassert solution(\"10\\n
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n1 10 17 12 15 2') == 3\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == 10\nassert solution('6\\n1 1000 10000 10 100 1000000000') == 1"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\nassert solution(\"9 9 999 9 9\\n7 7 9 1 1\\n9 9 9 1 1\\n9 9 9 9 9\\n9 9 9 9 9\\n9 9 9 9 9\\n9 9 9 9 9\") == \"9\\n-1\\n0\\n0\"\nassert solution(\"1 1 1 1 1\\n9 9 9 9 9\\n9 9 9 9 9\\n9 9 9 9 9\\n9 9 9 9 9\\n9 9 9 9 9\") == \"9\\n9\\n0\\n0\"\nassert solution(\"1 2 2 3 4\\n9 9 9 9 9\\n9 9 9 9 9\\n9 9 9 9 9\\n9 9 9 9 9\\n9 9 9 9 9\") == \"9\\n-1\\n0\\n0\"\nassert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3''') == '4\\n-1\\n5\\n2\\n0\\n1'\n\n\"\"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"15 5 3 2\"\n) == \"4\"\nassert solution(\n    \"15 5 4 3\"\n) == \"-1\"\nassert solution(\n    \"15 5 2 1\"\n) == \"5\"\nassert solution(\n    \"15 5 5 1\"\n) == \"2\"\nassert solution(\n    \"16 7 5 2\"\n) == \"0\""
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == \"4\\n-1\\n5\\n2\\n0\\n1\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\n\"\"\""
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''\n3\n5 4 1 3\n4 3 1 2\n3 2 1 1\n5 10 3 2\n''') == '3'\nassert solution(\n'''\n6\n10 10 10 10 10 10\n7 8 9 10 10 10\n1 1 1 1 1 1 1\n2 2 2 2 2 2 2\n5 5 5 5 5 5 5\n1 1 1 1 1 1 1\n5 5 5 5 5 5 5\n''') == '-1'\n\nassert solution(\n'''\n5\n5 1 1 3\n5 2 1 3\n5 3 1 3\n5 4 1 3\n5 5 1 3\n''') == '4'\nassert solution(\n'''\n6\n10 3 2 3\n10 4 2 3\n10 5 2 3\n10 6 2 3\n10 7 2 3\n10 8 2 3\n''') == '-1'\nassert solution(\n'''\n1\n10 10 10 10 10\n''') == '0'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '1'\nassert solution('2\\n1 2') == '-1'\nassert solution('3\\n1 2\\n1 1') == '0'\nassert solution('3\\n1 2\\n1 1\\n2 2') == '1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5 3 2') == '-1'\nassert solution('15 5 3 2') == '4'\nassert solution('15 5 4 3') == '-1'\nassert solution('15 5 2 1') == '5'\nassert solution('15 5 5 1') == '2'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1 2 5') == '0'\nassert solution('2 4 2 1') == '0'\nassert solution('2 1 2 1') == '1'\nassert solution('10 10 2 1') == '0'\nassert solution('10 10 2 2') == '2'\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ac?b?c\") == '24'\nassert solution(\"a??b?c\") == '2835'\nassert solution(\"a???c\") == '46'\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"???????\") == 2835\nassert solution(\"cccbbbaaa\") == 0\nassert solution(\"a???c\") == 46\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ac?b?c') == 24\nassert solution('??????') == 2835\nassert solution('a??c') == 46\nassert solution('aa??c') == 0\nassert solution('ac??b') == 1\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ac?b?c') == 24\nassert solution('???????') == 2835\nassert solution('cccbbbaaa') == 0\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ac?b?c') == 24\nassert solution('???????') == 2835\nassert solution('cccbbbaaa') == 0\nassert solution('a???c') == 46\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ac?b?c') == '24'\nassert solution('a???c') == '2835'\nassert solution('???????') == '2835'\nassert solution('cccbbbaaa') == '0'\n\"\"\"\n\nfrom collections import Counter\n\nMOD = 10 ** 9 + 7\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"????????\") == 2835\nassert solution(\"cccbbbaaa\") == 0\nassert solution(\"a??c\") == 46\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"????????\") == \"2835\"\nassert solution(\"a???c\") == \"46\"\nassert solution(\"cccbbbaaa\") == \"0\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ac?b?c\") == '24'\n\nassert solution(\"????????\") == '2835'\n\nassert solution(\"cccbbbaaa\") == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ac?b?c') == 24\n\"\"\""
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n1 3 3\\n2 3 5\\n2 1 1') == '5'\nassert solution('4 0\\n1 3 3 7') == '16'\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\") == \"16\""
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 3 3\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\\n2 3 5\\n2 1 1\") == \"16\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\n\n\n-----"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\") == \"16\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 3 3\\n2 3 5\\n2 1 1') == '5'\nassert solution('4 0\\n1 3 3 7') == '16'\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 3 3\\n2 3 5\\n2 1 1') == '5'\nassert solution('4 0\\n1 3 3 7') == '16'"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 0\\n1 3 3 7\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\""
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\") == '5'\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == '18'\n\n\n\n-----Test 1-----\n\nInput\n3 2\n1 3 3\n2 3 5\n2 1 1\nOutput\n5\nExpected\n5\n\n\n-----Test 2-----\n\nInput\n4 0\n1 3 3 7\nOutput\n16\nExpected\n16\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 3 3\\n2 3 5\") == '5'\nassert solution(\"4 0\\n1 3 3 7\") == '16'\n\n\"\"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\") == \"16\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"-1\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == '14'\nassert solution(\"10 1 1\\n0 9\\n0 5\") == '45'\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\n\"\"\"\n\nfrom functools import lru_cache\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'''10 1 1\n0 9\n0 5''') == '45'\nassert solution(\n'''10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2''') == '14'\nassert solution(\n'''10 1 1\n0 9\n0 5''') == '-1'\n'''\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == 14\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n') == '14'\nassert solution('10 1 1\\n0 9\\n0 5\\n') == '-1'\nassert solution('10 1 1\\n0 9\\n1 5\\n') == '45'"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\n\"\"\"\n\nimport collections\nfrom typing import List\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n\") == '14'\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == '45'\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == '-1'\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 7 5') == \"Yes\"\nassert solution('7 7 5') == \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 5') == 'Yes'\nassert solution('5 7 7') == 'No'\nassert solution('1 1 1') == 'No'\nassert solution('1 1 3') == 'Yes'\nassert solution('1 1 1') == 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"7 7 7\") == \"No\"\nassert solution(\"1 2 2\") == \"No\"\nassert solution(\"3 3 3\") == \"No\"\nassert solution(\"1 1 1\") == \"Yes\"\n\"\"\"\n\nA, B, C = list(map(int, input().split()))"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 7 2') == 'No'\nassert solution('1 7 2') == 'Yes'\nassert solution('7 7 7') == 'Yes'\nassert solution('9 7 7') == 'Yes'\nassert solution('7 7 9') == 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"7 7 7\") == \"No\"\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 7 5\\n') == 'Yes\\n'\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 7 5''') == 'Yes'\nassert solution('''5 7 7''') == 'No'\nassert solution('''1 1 1''') == 'Yes'\nassert solution('''5 5 5''') == 'Yes'\nassert solution('''4 2 2''') == 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == expected\n\"\"\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n\n\"\"\"\n\"\"\"\nThe average temperature of Place 1 is 12-1000 \\times 0.006=6 degrees Celsius.\nThe average temperature of Place 2 is 12-2000 \\times 0.006=0 degrees Celsius.\nTherefore, the palace should be built at Place 1.\n\"\"\"\n\nn = int(stdin.readline())\nt, a = map(float, stdin.readline().split())\nh = [int(num) for num in stdin.readline().split()]\n\nh.sort()\n\ndiff = [abs(a - (t - (h[i] * 0.006))) for i in range(n)]\n\nprint(h[diff.index(min(diff))])\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2\n12 5\n1000 2000''') == \"1\"\nassert solution('''4\n40 1\n1 1 2 3''') == \"0\"\nassert solution('''2\n60 1\n1 3 2''') == \"1\"\nassert solution('''1\n60 1\n1''') == \"0\"\n'''\nSolution 1\nO(nlogn)\n'''\nimport sys"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n12 5\\n1000 2000') == '1'\nassert solution('3\\n9 10 1\\n100 200 300') == '2'\nassert solution('2\\n12 5\\n5 10') == '1'\nassert solution('3\\n9 10 1\\n100 200 300') == '1'\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12 5 1000 2000\") == \"1\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 12\") == \"1\"\nassert solution(\"12 5\") == \"1\"\nassert solution(\"4 12\\n1000 2000\") == \"1\"\n\"\"\"\n\nimport sys\n\ntry:\n    num_places = int(sys.stdin.readline())\n    avg_temperature = float(sys.stdin.readline())\n    place_heights = [float(sys.stdin.readline()) for _ in range(num_places)]\n    closest = place_heights[0]\n    index = 0\n    for i, h in enumerate(place_heights):\n        if abs(avg_temperature - h * 0.006) < abs(avg_temperature - closest * 0.006):\n            closest = h\n            index = i\n\n    print(index + 1)\nexcept:\n    pass\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 12 5 1000 2000\") == \"1\"\nprint(\"PASSED\")\n\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\nassert solution(\"3\\n10 -10 -20\") == \"2\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 12 5 1000 2000\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '2\\n12 5\\n1000 2000'\n) == '1'\nassert solution(\n    '4\\n8 36\\n-20 0 -50 0'\n) == '2'\nassert solution(\n    '3\\n25 14\\n14 14 15'\n) == '1'\n\"\"\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n\") == \"1\"\nassert solution(\"3 5\\n\") == \"8\"\nassert solution(\"6 4\\n\") == \"0\""
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n') == '1'\n\"\"\"\n\n\"\"\"\nM = int(stdin.readline())\nN = int(stdin.readline())\n\narr = []\n\nfor i in range(M, 0, -1):\n    arr.append(i)\nfor i in range(N, 0, -1):\n    arr.append(i)\n\narr.sort()"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 1''') == '1'\n\"\"\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"4 2\") == \"1\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"4 5\") == \"6\"\n\n------\n\n2 1\n\n------\n\n1\n\n------\n\n2 2\n\n------\n\n2 3\n\n------\n\n2 4\n\n------\n\n2 5\n\n------\n\n3 2\n\n------\n\n2 3\n\n------\n\n0\n\n------\n\n3 3\n\n------\n\n3 4\n\n------\n\n3 5\n\n------\n\n4 2\n\n------\n\n2 5\n\n------\n\n4 5\n\n------\n\n5 5\n\n------\n\n5 6\n\n------\n\n5 7\n\n------\n\n6 6\n\n------\n\n6 7\n\n------\n\n6 8\n\n------\n\n7 7\n\n------\n\n7 8\n\n------\n\n8 8\n\n------\n\n8 9\n\n------\n\n9 9\n\n------\n\n9 10\n\n------\n\n9 11\n\n------\n\n10 10\n\n------\n\n10 11\n\n------\n\n10 12\n\n------\n\n11 11\n\n------\n\n11 12\n\n------\n\n11 13\n\n------\n\n12 12\n\n------\n\n12 13\n\n------\n\n12 14\n\n------\n\n13 13\n\n------\n\n13 14\n\n------\n\n13 15\n\n------\n\n14 14\n\n------\n\n14 15\n\n------\n\n14 16\n\n------\n\n15 15\n\n------\n\n15 16\n\n------\n\n16 16\n\n------\n\n16 17\n\n------\n\n17 17\n\n------\n\n17 18\n\n------\n\n18 18\n\n------\n\n18 19\n\n------\n\n19 19\n\n------\n\n19 20\n\n------\n\n20 20\n\n------\n\n20 21\n\n------\n\n21 21\n\n------\n\n21 22\n\n------\n\n22 22\n\n------\n\n22 23\n\n------\n\n23 23\n\n------\n\n23 24\n\n------\n\n24 24\n\n------\n\n24 25\n\n------\n\n25 25\n\n------\n\n25 26\n\n------\n\n26 26\n\n------\n\n26 27\n\n------\n\n27 27\n\n------\n\n27 28\n\n------\n\n28 28\n\n------\n\n28 29\n\n------\n\n29 29\n\n------\n\n29 30\n\n------\n\n30 30\n\n------\n\n30 31\n\n------\n\n31 31\n\n------\n\n31 32\n\n------\n\n32 32\n\n------\n\n32 33\n\n------\n\n33 33\n\n------\n\n33 34\n\n------\n\n34 34\n\n------\n\n34 35\n\n------\n\n35 35\n\n------\n\n35 36\n\n------\n\n36 36\n\n------\n\n36 37\n\n------\n\n37 37\n\n------\n\n37 38\n\n------\n\n38 38\n\n------\n\n38 39\n\n------\n\n39 39\n\n------\n\n39 40\n\n------\n\n40 40\n\n------\n\n40 41\n\n------\n\n41 41\n\n------\n\n41 42\n\n------\n\n42 42\n\n------\n\n42 43\n\n------\n\n43 43\n\n------\n\n43 44\n\n------\n\n44 44\n\n------\n\n44 45\n\n------\n\n45 45\n\n------\n\n45 46\n\n------\n\n46 46\n\n------\n\n46 47\n\n------\n\n47 47\n\n------\n\n47 48\n\n------\n\n48 48\n\n------\n\n48 49\n\n------\n\n49 49\n\n------\n\n49 50\n\n------\n\n50 50\n\n------\n\n50 51\n\n------\n\n51 51\n\n------\n\n51 52\n\n------\n\n52 52\n\n------\n\n52 53\n\n------\n\n53 53\n\n------\n\n53 54\n\n------\n\n54 54\n\n------\n\n54 55\n\n------\n\n55 55\n\n------\n\n55 56\n\n------\n\n56 56\n\n------\n\n56 57\n\n------\n\n57 57\n\n------\n\n57 58\n\n------\n\n58 58\n\n------\n\n58 59\n\n------\n\n59 59\n\n------\n\n59 60\n\n------\n\n60 60\n\n------\n\n60 61\n\n------\n\n61 61\n\n------\n\n61 62\n\n------\n\n62 62\n\n------\n\n62 63\n\n------\n\n63 63\n\n------\n\n63 64\n\n------\n\n64 64\n\n------\n\n64 65\n\n------\n\n65 65\n\n------\n\n65 66\n\n------\n\n66 66\n\n------\n\n66 67\n\n------\n\n67 67\n\n------\n\n67 68\n\n------\n\n68 68\n\n------\n\n68 69\n\n------\n\n69 69\n\n------\n\n69 70\n\n------\n\n70 70\n\n------\n\n70 71\n\n------\n\n71 71\n\n------\n\n71 72\n\n------\n\n72 72\n\n------\n\n72 73\n\n------\n\n73 73\n\n------\n\n73 74\n\n------\n\n74 74\n\n------\n\n74 75\n\n------\n\n75 75\n\n------\n\n75 76\n\n------\n\n76 76\n\n------\n\n76 77\n\n------\n\n77 77\n\n------\n\n77 78\n\n------\n\n78 78\n\n------\n\n78 79\n\n------\n\n79 79\n\n------\n\n79 80\n\n------\n\n80 80\n\n------\n\n80 81\n\n------\n\n81 81\n\n------\n\n81 82\n\n------\n\n82 82\n\n------\n\n82 83\n\n------\n\n83 83\n\n------\n\n83 84\n\n------\n\n84 84\n\n------\n\n84 85\n\n------\n\n85 85\n\n------\n\n85 86\n\n------\n\n86 86\n\n------\n\n86 87\n\n------\n\n87 87\n\n------\n\n87 88\n\n------\n\n88 88\n\n------\n\n88 89\n\n------\n\n89 89\n\n------\n\n89 90\n\n------\n\n90 90\n\n------\n\n90 91\n\n------\n\n91 91\n\n------\n\n91 92\n\n------\n\n92 92\n\n------\n\n92 93\n\n------\n\n93 93\n\n------\n\n93 94\n\n------\n\n94 94\n\n------\n\n94 95\n\n------\n\n95 95\n\n------\n\n95 96\n\n------\n\n96 96\n\n------\n\n96 97\n\n------\n\n97 97\n\n------\n\n97 98\n\n------\n\n98 98\n\n------\n\n98 99\n\n------\n\n99 99\n\n------\n\n99 100\n\n------\n\n100 100\n\n------\n\n100 101\n\n------\n\n101 101\n\n------\n\n101 102\n\n------\n\n102 102\n\n------\n\n102 103\n\n------\n\n103 103\n\n------\n\n103 104\n\n------\n\n104 104\n\n------\n\n104 105\n\n------\n\n105 105\n\n------\n\n105 106\n\n------\n\n106 106\n\n------\n\n106 107\n\n------\n\n107 107\n\n------\n\n107 108\n\n------\n\n108 108\n\n------\n\n108 109\n\n------\n\n109 109\n\n------\n\n109 110\n\n------\n\n110 110\n\n------\n\n110 111\n\n------\n\n111 111\n\n------\n\n111 112\n\n------\n\n112 112\n\n------\n\n112 113\n\n------\n\n113 113\n\n------\n\n113 114\n\n------\n\n114 114\n\n------\n\n114 115"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == 1\n\"\"\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 1''') == '1'\n\"\"\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n') == '1'\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == '1'\n\"\"\"\n\nfrom typing import Dict, List\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"1\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 2\") == \"3\"\n\"\"\"\n\n\"\"\"\nGiven a set of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum.\n\nExample:\n\nInput: set[] = {3, 34, 4, 12, 5, 2}, sum = 9\nOutput: True  \nThere is a subset (4, 5) with sum 9.\n\nInput: set[] = {3, 34, 4, 12, 5, 2}, sum = 30\nOutput: False\nThere is no subset that add up to 30.\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ACACTACG\") == '2'\nassert solution(\"ACACTACGTT\") == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(s) == result\n\n\"\"\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ACACTACG\") == '2'\nassert solution(\"ATCODER\") == '5'\n\nprint(solution(\"ACACTACG\"))\nprint(solution(\"ATCODER\"))\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ACACTACG\", 3, 7) == \"2\"\nassert solution(\"ACACTACG\", 2, 3) == \"0\"\nassert solution(\"ACACTACG\", 1, 8) == \"3\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"AACCGGTT\") == \"4\"\n\"\"\"\nimport sys\nimport itertools"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ACTACG\") == 2\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ACACTACG\\n3 7\\n2 3\\n1 8') == '2\\n0\\n3'\nassert solution('ACACTACG\\n3 7\\n2 3\\n1 8\\n4 5') == '2\\n0\\n3'\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ACACTACG') == 2\nassert solution('ATCODER') == 3\nassert solution('ATCODEDR') == 0\n\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\":\") == \"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 3\n50 100 80 120 80''') == 210\nassert solution('''10 10\n50 100 10 120 10 120 10 120 10 120 10 120 10 120 10 120''') == 500\nassert solution('''20 20\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50''') == 450\nassert solution('''100 100\n
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(5) + \" \" + str(3) + \"\\n\" + \"50 100 80 120 80\\n\") == \"210\"\nprint(\"passed\")"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == \"210\"\n\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == \"210\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\nassert solution(\"2 2\\n10 10\") == \"10\"\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n50 100 80 120 80\\n') == '210'\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == \"210\"\nprint(solution(input()))\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\nassert solution(\"4 1\\n10 10 10 10\") == \"10\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected_output\n\"\"\"\nfrom __future__ import print_function\nimport sys\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n50 100 80 120 80\\n') == '210'\nprint(\"Passed\")\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3 4') == '4'\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3 4') == '4'\n\"\"\"\n\nimport sys\nimport math\n\nnums = list(map(int, sys.stdin.readline().split()))\nprint(math.ceil(min(nums) + min(nums) + min(nums)))\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"3 3 3\") == \"7\"\nassert solution(\"4 1 5\") == \"9\"\nassert solution(\"1 3 4\") == \"4\"\nassert solution(\"3 3 3\") == \"7\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == \"4\"\n\n\n------ Test Case #0 -----\n\"\"\"\n3 4 5\n\"\"\"\nIn the first line, print the value of P, then Q, then R.\nIn the second line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the third line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the fourth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the fifth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the sixth line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the seventh line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the eigth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the ninth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the tenth line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the eleventh line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the twelfth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the thirteenth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the fourteenth line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the fifteenth line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the sixteenth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the seventeenth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the eighteenth line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the nineteenth line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the twentieth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the twenty-first line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the twenty-second line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the twenty-third line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the twenty-fourth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the twenty-fifth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the twenty-sixth line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the twenty-seventh line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the twenty-eigth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the twenty-ninth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the thirty-first line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the thirty-second line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the thirty-third line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the thirty-fourth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the thirty-fifth line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the thirty-sixth line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the thirty-seventh line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the thirty-eigth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the thirty-ninth line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the fourtieth line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the fourtieth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the fourtieth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the fourtieth line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the fourtieth line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the fourtieth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the fourtieth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the fourtieth line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the fourtieth line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the fourtieth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn the fourtieth line, print the value of the fourth flight, then the value of the first flight, then the value of the second flight.\nIn the fourtieth line, print the value of the first flight, then the value of the second flight, then the value of the third flight.\nIn the fourtieth line, print the value of the second flight, then the value of the third flight, then the value of the fourth flight.\nIn the fourtieth line, print the value of the third flight, then the value of the fourth flight, then the value of the first flight.\nIn"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\"\nimport sys\n\nwhile True:\n    try:\n        p, q, r = map(int, sys.stdin.readline().split())\n    except:\n        break\n\n    s = p + q + r\n    if (s - (max(p, q, r))) % 2 == 0:\n        print((s - (max(p, q, r))) // 2)\n    else:\n        print((s - (max(p, q, r))) // 2 + 1)\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('2 3 6') == '5'\nassert solution('2 8 6') == '6'\nassert solution('2 1 4') == '3'\nassert solution('1 10 10') == '10'\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"100 100 100\") == \"0\"\nassert solution(\"4 1 1\") == \"4\"\nassert solution(\"1 1 1\") == \"3\"\nassert solution
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3 4') == '4'\n\"\"\"\n\nP, Q, R = [int(i) for i in stdin.split(' ')]\n\nprint(P + Q + R - max([P, Q, R]))\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"7 3 5\") == \"12\"\nassert solution(\"10 4 6\") == \"14\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5') == '0'\n\nprint(solution('3 5'))"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n') == '0'\nassert solution('5 5\\n') == '10'\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3) == 0\n\"\"\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\"\n\nimport sys\n\nnums = list(map(int, sys.stdin.readlines()[0].split()))\nX, A = nums"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5') == '0'\n\n\"\"\"\n\nfrom unittest.mock import patch"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 10') == '10'\nassert solution('10 10') == '0'\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5') == '0'\n\"\"\"\n\nX, A = [int(x) for x in input().split()]"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\") == \"0\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5\\n') == '0'\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5\\n') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4\") == \"1\"\nassert solution(\"0 5\") == \"0\"\nassert solution(\"1 6\") == \"5\"\n\"\"\"\n\nimport sys\nfrom math import ceil, log"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4\") == \"1\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 4') == '1'\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 4') == '1'\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 4') == '1'\nassert solution('3 3') == '0'\nassert solution('15 13') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 4') == '1'\nassert solution('15 17') == '6'\nassert solution('3 10') == '1'\nassert solution('19 17') == '2'\nassert solution('1 9') == '0'\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 4') == '1'\n\"\"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 4') == '1'\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 4\\n\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'win'\nassert solution('5 7 9') == 'win'\nassert solution('5 7 7') == 'bust'\nassert solution('9 8 7') == 'bust'\nassert solution('8 7 7') == 'bust'\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 7 9') == \"win\"\nassert solution('1 1 1') == \"bust\"\n\"\"\"\n\ninput_list = [int(item) for item in input().split()]"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('5 7 8') == 'bust'\nassert solution('6 8 9') == 'bust'\nassert solution('6 7 9') == 'win'\nassert solution('7 7 9') == 'win'\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('1 1 1') == 'bust'\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 7 9\") == \"win\"\nassert solution(\"5 4 7\") == \"bust\"\nassert solution(\"9 9 9\") == \"bust\"\nassert solution(\"11 11 11\") == \"win\"\n\"\"\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 7 9') == 'win'\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3. \nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 7 9\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 7 9\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 7 9\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 7 9\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 7 9\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 7 9\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 7 9\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 7 9\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 7 9\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 7 9\n\n-----Output-----\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\n-----Sample Input-----\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3,5,3) == \"win\"\nassert solution(8,3,5) == \"bust\"\n\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 9\") == \"win\"\nassert solution(\"7 6 5\") == \"bust\"\nassert solution(\"6 2 6\") == \"win\"\nassert solution(\"8 9 10\") == \"bust\"\nassert solution(\"3 2 5\") == \"win\"\n\"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '6'\n\"\"\""
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 6\nassert solution(\"6\") == 12\nassert solution(\"1\") == 2\n\"\"\"\n\n\"\"\"\nMy solution:\n    \n    \"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == '6'\nprint('Success')\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == 6\n\"\"\"\nimport sys\nimport unittest\n\n\nclass TestCases(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution(\"3\"), 6)\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n\") == \"1\"\nassert solution(\"3\\n\") == \"6\"\nassert solution(\"4\\n\") == \"2\"\nassert solution(\"5\\n\") == \"10\"\n\nprint('Success')\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '6'\nassert solution('6') == '6'\nassert solution('7') == '14'\nassert solution('8') == '16'\n\"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"10\"\nassert solution(\"3\") == \"6\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '6'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2\") == 2\n'''"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\") == 2\n\"\"\"\n\nN, D = list(map(int, input().strip().split(\" \")))\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\n'''\n\nN, D = map(int, input().split())\nnums = list(range(1, N + 1))\n\nleft = [0]\nright = [D]\nfor i in range(len(nums)):\n    left.append(left[i] + nums[i])\n    right.append(right[i] + nums[len(nums) - 1 - i])\n\nans = 0\nfor i in range(len(nums)):\n    l = left[i]\n    r = right[i]\n    if l <= r:\n        ans += r - l + 1\n\nprint(ans)\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 2') == '2'\nassert solution('10 6') == '4'\nassert solution('20 10') == '4'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n6 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 2\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"2\"\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 2\\n') == '2'\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import combinations\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2\") == 2\nprint(solution(\"6 2\"))\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n1 2') == '1'\nassert solution('4 3\\n2 1\\n2 3') == '2'\nassert solution('4 6\\n2 2\\n3 1\\n3 4\\n4 1\\n5 4') == '4'\nassert solution('7 15\\n3 1\\n3 4\\n4 1\\n4 5\\n4 8\\n4 10\\n5 6\\n6 7\\n6 8\\n6 10\\n7 7\\n7 10\\n8 9\\n8 10\\n9 9\\n9 10\\n10 10') == '3'\n\"\"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('16') == 'pon'\nassert solution('42') == 'hon'\nassert solution('3') == 'bon'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"35\") == \"hon\"\nassert solution(\"123\") == \"bon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('16') == 'pon'\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('16') == 'pon'\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('16') == 'pon'\nassert solution('18') == 'bon'\nassert solution('20') == 'pon'\nassert solution('24') == 'hon'\nassert solution('30') == 'hon'\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('16') == 'pon'\nassert solution('21') == 'hon'\nassert solution('26') == 'hon'\nassert solution('98') == 'bon'\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('16') == 'pon'\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"16\") == \"pon\"\nprint(\"Passed\")"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 2\\n') == '11'\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == 11\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 2') == '11'\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 2\\n') == '11'\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2\\n') == '11'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '11'\nassert solution('''\n3\n2 1 3\n''') == '8'\nassert solution('''\n2\n3 3\n''') == '7'\n\n'''\n\uc138 \uac1c\uc758 \uc591\uc744 \uba39\uace0 \uc774\ub97c \ub450 \ubc88 \uc5f0\uc18d\ud558\uc5ec \ub9c8\uc2dc\uba74 \uccb4\ub825\uc744 \ucd08\uae30\ud654 \ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uccab \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \ub9c8\uc2dc\ub294 \uac83\uc5d0\uc11c\ub294 \uccb4\ub825\uc774 \ub354 \ud06c\uae30 \ub54c\ubb38\uc5d0 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uac00 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uac00 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uac00 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uac00 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uac00 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uac00 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uac00 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uac00 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uac00 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \ub450 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uc138 \ubc88\uc9f8 \uc138 \ubc88\uc9f8\n'''\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\") == 11\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\\n\") == 11\n\n\"\"\"\n\n\nimport sys\n\nn = int(sys.stdin.readline())\ns = list(map(int, sys.stdin.readline().split()))\ns.sort()"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3\n3 1 2\n''') == '11'\n\nassert solution('''\n4\n3 2 2 2\n''') == '9'\n\nassert solution('''\n5\n2 1 1 2 1\n''') == '4'\n\nassert solution('''\n6\n3 3 3 3 3 3\n''') == '13'\n\nassert solution('''\n8\n1 1 1 1 1 1 1 1\n''') == '53'\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"11\"\n\"\"\"\nimport sys\nfrom typing import List\n\nN = int(sys.stdin.readline())\nd = list(map(int, sys.stdin.readline().split()))\n\nsys.stdout.write(str(sum(sum(d[i:i + j]) for j in range(1, N)) for i in range(N)) + \"\\n\")\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\"\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\\n\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1\n4\n3\n''') == '''\n4\n3\n4\n'''"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(solution) == '4\\n3\\n4'\n\"\"\"\n\nimport sys\n\ntest_inp = \"\"\"\n5\n1\n4\n3\n2\n5\n\"\"\"\nsys.stdin = open('input.txt')\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1\\n4\\n3\\n') == '4\\n3\\n4\\n', 'Test 1'\nassert solution('5\\n4\\n3\\n4\\n5\\n') == '4\\n3\\n4\\n5\\n5\\n', 'Test 2'\n\"\"\"\n\n\"\"\"\nYou are given a sequence of length N: A_1, A_2,..., A_N. For each integer i between 1 and N (inclusive), answer the following question:\n - Find the maximum value among the N-1 elements other than A_i in the sequence.\n\n-----Constraints-----\n - 2 \\leq N \\leq 200000\n - 1 \\leq A_i \\leq 200000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1\n:\nA_N\n\n-----Output-----\nPrint N lines. The i-th line (1 \\leq i \\leq N) should contain the maximum value among the N-1 elements other than A_i in the sequence.\n\n-----Sample Input-----\n5\n1\n2\n3\n4\n5\n\n-----Sample Output-----\n2\n3\n4\n5\n5\n\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\":\\n2\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\\n\"\nassert solution(\":\\n3\\n3\\n3\\n3\\n\") == \"3\\n3\\n3\\n\"\nassert solution(\":\\n2\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\\n\"\nassert solution(\":\\n2\\n4\\n3\\n\") == \"4\\n4\\n4\\n\"\nassert solution(\":\\n1\\n4\\n3\\n\") == \"4\\n4\\n4\\n\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\"\n\n\"\"\"\n\n\"\"\"\nPROGRAM:\nIf the sum of the numbers is divisible by 3, then the first number is divisible by 3.\nThe same applies to 5.\nSince the number can be divided by 3, 5 or both, then, the result will be the greatest\nnumber divisible by 3, 5 or 3 and 5.\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3\n1\n4\n3\n\"\"\") == \"\"\"4\n3\n4\n\"\"\"\n\nassert solution(\"\"\"5\n1\n3\n6\n9\n5\n\"\"\") == \"\"\"6\n6\n6\n5\n6\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == '4\\n3\\n4'\nassert solution(\"5\\n2\\n5\\n4\\n3\\n2\") == '4\\n4\\n5\\n2\\n3'\n\"\"\"\n\nfrom tools import timing\n\n@timing\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1\\n4\\n3') == '4\\n3\\n4'"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\"\n\n\"\"\"\nYou can get 4 + 3 = 7 coins by pressing the button of size 3 twice, and this is the maximum result.\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3') == '9'\nassert solution('4 2') == '6'\n\"\"\"\nimport sys\n\nA, B = map(int, sys.stdin.readline().split())\n\nres = 0\nfor i in range(A, B+1):\n    res += i\n\nprint(res)\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == 9\n\n-----Sample Input-----\n7 6\n\n-----Sample Output-----\n22\n\nYou can get 7 + 6 = 13 coins by pressing the button of size 7 twice, and this is the maximum result.\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n\") == 9\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\"\n\n\"\"\"\nSolution:\n\nThe maximum number of coins that can be obtained is the smallest of the sizes of the buttons.\nIf you press the button with the smallest size, then there are no coins left,\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n') == '9'\n\n-----"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n\") == 9\n\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n') == '3'\nassert solution('1 1\\n') == '1'\nassert solution('2 2\\n') == '0'\nassert solution('3 3\\n') == '2'\nassert solution('5 5\\n') == '5'\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\n\"\"\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n1 1') == '0'\nassert solution('1 1\\n2 1') == '0'\nassert solution('1 1\\n2 2') == '2'\nassert solution('1 1\\n2 3') == '3'\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\\n\") == '40'\n\n\"\"\"\nimport math"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == '1'\nassert solution('1 2 1 1 1') == '0'\nassert solution('1 2 2 2 2') == '1'\nassert solution('1 2 3 3 3') == '1'\nassert solution('5 2') == '3'\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == ''\n\"\"\"\nfrom sys import stdin\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == '40'\n\"\"\"\n\n\"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n\n    Use a sliding window.\n\"\"\""
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n-30 -10 10 20 50') == '40'\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 13') == 2\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 13\") == \"2\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 15\") == \"2\"\n\"\"\"\n\na, b = map(int, input().split())\nprint(max(0, a - b + 1))\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 13') == '2'\nassert solution('8 15') == '1'\n\"\"\"\n\na, b = map(int, input().split())\nsnow = b - a\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == '2'\n\"\"\""
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 13') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 13') == '2'\n\"\"\""
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 13') == '2'\nassert solution('1 1') == '0'\nassert solution('3 3') == '0'\nassert solution('10 4') == '5'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 13\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 13') == '2'\n\"\"\"\nimport unittest\nimport os\nfrom io import StringIO"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 4') == '3'\nprint(solution(stdin), end=\"\")\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 4\") == \"3\"\nprint(\"Success!\")\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 4\") == \"3\"\nprint(solution(\"10 4\"))\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 4\") == \"3\"\nprint(\"Passed!\")\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 4') == 3\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4\") == 3\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4\") == 3\n\"\"\"\n\nimport math"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4\") == 3\n\"\"\"\n\nH, A = input().split()\nH, A = int(H), int(A)\ncount = 0\nwhile H > 0:\n    H -= A\n    if H >= 0:\n        count += 1\n    else:\n        break\nprint(count)\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('0 75 25 100') == '50'\n\"\"\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 75 25 100\") == 50\nassert solution(\"0 75 25 0\") == 0\nassert solution(\"0 75 0 0\") == 0\nassert solution(\"0 100 0 0\") == 100\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 75 25 100') == '50'\n\"\"\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''0 75 25 100''') == '50'\nassert solution('''0 75 25 100''') == '50'\n\n'''\n\n\nimport math\n\nimport fileinput\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\nprint(solution(\"0 75 25 100\"))\n\n\"\"\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 75 25 100') == '50'\nprint(solution(stdin))\n\n'''\n\nimport sys"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 75 25 100') == '50'\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''0 25 100''') == '50'\nassert solution('''0 75 25 100''') == '50'\nassert solution('''0 1 1 1''') == '1'\nassert solution('''0 2 1 2''') == '2'\nassert solution('''0 0 0 0''') == '0'\n\n\"\"\"\nA = int(input())\nB = int(input())\nC = int(input())\nD = int(input())\nprint((A+B) - (C+D))\n\"\"\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('105') == '1'\n\nprint(solution('105'))\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('105') == 1\n\"\"\"\nimport sys"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('105') == '1'\n\"\"\"\n\nN = int(input())\n\ncounter = 0\nfor i in range(1, N + 1):\n    if (i % 2!= 0 and i % 5!= 0 and i % 3!= 0 and i % 7!= 0 and i % 11!= 0):\n        counter += 1\n\nprint(counter)\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == '1'\nassert solution('4') == '0'\nassert solution('3') == '0'\nassert solution('2') == '0'\nassert solution('1') == '0'\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('105') == '1'\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('105') == '1'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '2'\nassert solution('4 6 3') == '0'\nassert solution('1 100 100') == '0'\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n2\\n3\") == 1\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3\\n2 2 3') == '1'\nassert solution('10 5\\n3 4 5 6') == '2'\nassert solution('5 5\\n1 1 1 1 1') == '0'\nassert solution('4 2\\n1 1 1 1') == '0'\nassert solution('4 4\\n1 1 1 1') == '0'\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n2 1\") == \"1\"\nassert solution(\"7 3\\n3 1\") == \"1\"\nassert solution(\"8 5\\n1 2 3 4 5 6 7 8\") == \"0\"\nassert solution(\"9 5\\n1 3 3 3 3 3 3 3 3\") == \"0\"\nassert solution(\"7 3\\n3 2 2\") == \"1\"\n\nsolution(\"8 5\\n3 1 1 3 3 3 3\")\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\"\n\nfrom math import *\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n2 3\\n1 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\\n2 2 3\") == \"1\"\nassert solution(\"6 3\\n2 2 5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n6 3\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n4 2\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n100 100\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n100 101\n\"\"\"\n) == \"1\"\n\nprint(\"Passed.\")\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\") == \"1\"\n\n\"\"\"\n\nn, k = map(int, input().split())\n\nl = []\nfor i in range(k):\n    l.append(int(input()))"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n\nN = input()\n\nwhile len(N) > 3:\n    N = int(N)\n    if N % 1000 == 0:\n        N = str(N)\n        if len(N) == 3:\n            print(N)\n            break\n    N = str(N)\n    N = int(N[-3:])\n    \n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n\nN = int(input())"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nprint(n)"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('111') == '111'\nassert solution('101010') == '101010'\nassert solution('1111') == '1111'\nassert solution('10') == '10'\nassert solution('101') == '101'\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('111') == '111'\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"111\") == \"111\"\nassert solution(\"222\") == \"222\"\nassert solution(\"333\") == \"333\"\nassert solution(\"444\") == \"444\"\nassert solution(\"555\") == \"555\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('111') == '111'\n'''\nimport sys"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 6 3') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3\\n') == '5'\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 6 3') == '5'\n\"\"\"\n\nA = list(map(int, input().strip().split()))\nA.sort()\ntotal_cost = 0\nfor i in range(len(A) - 1):\n    total_cost += abs(A[i + 1] - A[i])\nprint(total_cost)\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n\n'''"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 6 3') == '5'\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 6 3\\n') == '5'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 5') == '3'\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 6 3') == '5'\nassert solution('5 2 3') == '5'\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(8) == 5\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\"\"\"\nfrom math import ceil\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8') == '5'\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\"\n\ns = int(stdin.readline().strip())\n\nprint(s)"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8') == '5'\nprint('all tests passed.')"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8') == '5'"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8') == '5'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == 'No'\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"5 9 5 10\") == \"Yes\"\nassert solution(\"10 9 10 10\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 9 10 10\") == 'No'\nassert solution(\"20 10 20 20\") == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 9 10 10') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"8 9 10 11\") == \"No\"\nassert solution(\"10 10 10 10\") == \"No\"\nassert solution(\"10 10 10 10\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"100 99 100 100\") == \"No\"\nassert solution(\"100 1 100 100\") == \"Yes\"\nassert solution(\"100 100 1 100\") == \"Yes\"\nassert solution(\"1 1 1 1\") == \"Yes\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''10 9 10 10''') == 'No'\nassert solution('''1 1 1 1''') == 'No'\nassert solution('''1 1 1 1''') == 'No'\nassert solution('''1 1 1 1''') == 'No'\nassert solution('''1 1 1 1''') == 'No'\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 4\\n10 2 5\") == \"5\"\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    # Time complexity: O(NlogN)\n    # Space complexity: O(1)\n    def solve(self, num_gems: int, values: List[int], costs: List[int]) -> int:\n        # sort the list in reverse order, then by cost\n        values, costs = zip(*sorted(zip(values, costs), reverse=True))\n        \n        total_value, total_cost = 0, 0\n        for i in range(num_gems):\n            total_value += values[i]\n            total_cost += costs[i]\n            if total_cost > total_value:\n                break\n        return total_value - total_cost\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4\\n') == '5'\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"3\\n10 2 5\\n6 3 4\"\n) == '5'\nprint('Test pass.')"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n\nN = int(input())\nV = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nV.sort(reverse=True)\nC.sort(reverse=True)\n\nV_sum = sum(V)\nC_sum = sum(C)\n\nprint(V_sum - C_sum)"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\\n5 6 7 8\\n\") == \"15\"\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\\n\") == \"5\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3 4 5 6\") == \"9\"\nprint(\"Test 1 PASSED\")\n\nassert solution(\"3\\n1 2 3\\n3 4 5\") == \"3\"\nprint(\"Test 2 PASSED\")\n\nassert solution(\"4\\n1 2 3 4\\n6 5 4 3\") == \"7\"\nprint(\"Test 3 PASSED\")\n\nassert solution(\"4\\n1 2 3 4\\n10 9 8 7\") == \"13\"\nprint(\"Test 4 PASSED\")\n\nassert solution(\"4\\n10 9 8 7\\n1 2 3 4\") == \"13\"\nprint(\"Test 5 PASSED\")"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n4\\n3\\n1\\n2') == '8'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\n\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n.#\\n#.\") == \"3 3\\n#\\n.\\n\"\nassert solution(\"2 2\\n..\") == \"1 1\\n.\\n\"\nassert solution(\"2 4\\n#.\\n##\") == \"1 1\\n#\\n.\\n\"\nassert solution(\"3 5\\n#.\\n##.\\n###\\n#.\") == \"1 1\\n#\\n.\\n\"\nassert solution(\"4 4\\n.#\\n#.\") == \"1 1\\n.\\n.\\n\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\\n\") == \"###\\n###\\n.##\\n\"\nassert solution(\"4 4\\n...#\\n...#\\n...#\\n...#\\n\") == \"....\\n....\\n....\\n....\\n\"\n\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    4 4\n    ##.#\n    ....\n    ##.#\n    .#.#\n    \"\"\"\n) == \"\"\"\n    3 3\n    ##.\n    .##\n    .##\n    \"\"\"\n\nassert solution(\n    \"\"\"\n    4 4\n    ....\n    ##.#\n    ....\n    ##.#\n    \"\"\"\n) == \"\"\"\n    3 3\n    #.\n    .#\n    .#\n    \"\"\"\n\nassert solution(\n    \"\"\"\n    4 4\n    #.#\n    ....\n    ##.#\n    ....\n    \"\"\"\n) == \"\"\"\n    3 3\n    ##.\n    .#.\n    .#.\n    \"\"\"\n\nassert solution(\n    \"\"\"\n    4 4\n    ....\n    ...\n    ....\n    ....\n    \"\"\"\n) == \"\"\"\n    3 3\n    .#.\n    .#.\n    .#.\n    \"\"\"\n\nassert solution(\n    \"\"\"\n    4 4\n    ....\n    ....\n    ....\n    ....\n    \"\"\"\n) == \"\"\"\n    3 3\n    .#.\n    .#.\n    .#.\n    \"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 4\n##.#\n....\n##.#\n.#.#\n\"\"\") == \"\"\"\n3 3\n###\n###\n.##\n\"\"\"\n\nassert solution(\"\"\"\n4 4\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 4\n##.#\n....\n##.#\n.#.#''') == '''###\n###\n.##'''\n\nassert solution('''4 4\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 4\n##.#\n....\n##.#\n.#.#''') == '''###\n###\n.##'''\nassert solution('''2 2\n.#\n.#''') == '''##\n##'''\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\\n\"\nassert solution(\"2 3\\n#.#\\n.#.\") == \"##\\n.##\\n\"\nassert solution(\"3 3\\n##.\\n.#.\\n#.#\") == \"##\\n#.#\\n\"\n\"\"\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\\n\"\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\"\"\"\n\nimport math\n\nr = int(input())\n\nprint(2 * math.pi * r)\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\n---Problem 2---\n\nThe sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n\nFind the sum of all the primes below two million.\n\n-----Constraints-----\n - 1 \\leq n \\leq 1000000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\n\n-----Output-----\nPrint the sum of all the primes below n.\nYour output is considered correct if and only if its absolute or relative error from our answer is at most 10^{-2}.\n\n-----Sample Input-----\n10\n\n-----Sample Output-----\n17\n\nSince we accept an absolute or relative error of at most 10^{-2}, 17 is also an acceptable output, but 17.0 is not.\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n\") == \"30.62170212765963\\n\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == '6.28318530717958623200'\n\n\"\"\"\n\nimport math\n\nR = int(input())\n\nprint(round(2*math.pi*R, 3))\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n\") == '6.28318530717958623200'\nassert solution(\"2\\n\") == '12.566370614359172953850'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\"\"\"\n\nimport math\n\nr = int(input())\ncircumference = 2 * math.pi * r\nprint(\"{:.2f}\".format(circumference))\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '6.28318530717958623200'\nassert solution('0') == '6.28318530717958623200'\nassert solution('5') == '16.83910893386437567010'\n\nprint(\"All sample test cases passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '6.28318530717958623200'\n'''\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ASAS') == \"Yes\"\nassert solution('ASSAS') == \"Yes\"\nassert solution('SASAS') == \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ASSS') == 'Yes'\nassert solution('ASSA') == 'Yes'\nassert solution('AASSA') == 'No'\nassert solution('SSS') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"AASS\") == \"No\"\nassert solution(\"AAAS\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n'ASSA'\n) == 'Yes'\nassert solution(\n'AABB'\n) == 'No'\nassert solution(\n'ABBA'\n) == 'No'\nassert solution(\n'AAAB'\n) == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('HELLO') == 'No'\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ASSS\") == \"Yes\"\nassert solution(\"AATT\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ASSA') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ASSS\") == \"Yes\"\nassert solution(\"AAAS\") == \"No\"\nassert solution(\"ASS\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"AAAA\") == \"No\"\nassert solution(\"ABCD\") == \"No\"\nassert solution(\"A\") == \"Yes\"\n\"\"\"\n\nimport ast\nimport sys\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\"\n\na, b = map(int, input().split())\n\nprint(-max(a - b, a + b, a * b))\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('-13 3') == '-10'\nprint(solution('-13 3'))\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '5 0'\n    '5 1'\n    '3 4'\n    '2 0'\n    '1 1'\n) == '4'\n\nassert solution(\n    '10 1'\n    '100 0'\n    '1 0'\n    '1 0'\n    '0 1'\n    '0 0'\n) == '110'\n\nassert solution(\n    '10 1'\n    '10 1'\n    '1 10'\n    '1 10'\n    '0 1'\n    '0 10'\n) == '10'\n\nassert solution(\n    '10 2'\n    '1 10'\n    '1 10'\n    '1 10'\n    '2 0'\n    '0 10'\n) == '10'\n\nassert solution(\n    '0 0'\n    '0 0'\n    '0 0'\n    '0 0'\n    '0 0'\n    '0 0'\n) == '0'"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\n\"\"\"\n\nfrom a1 import solution\nimport os\nimport sys\nfrom io import StringIO\nimport unittest\n\nclass Test_TC(unittest.TestCase):\n    def test_Total(self):\n        capturedOutput = StringIO()\n        sys.stdout = capturedOutput\n        solution(\"-13 3\")\n        sys.stdout = sys.__stdout__\n        self.assertEqual(capturedOutput.getvalue(), \"-10\\n\")\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('-13 3') == '-10'\nprint(solution('-13 3'))\n\n---"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2\") == \"14\", \"solution('10 2') == 14 failed\"\nassert solution(\"-10 2\") == \"-8\", \"solution('-10 2') == -8 failed\"\nassert solution(\"0 0\") == \"0\", \"solution('0 0') == 0 failed\"\n\nprint('=====> All Tests are Passed!')"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('-13 3') == '-10'\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('-13 3') == '-10'\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\nprint(solution(str(input())))"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n6 5 6 8\") == 3\n\"\"\"\nimport re\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\"\n\n\"\"\"\nIdea:\n    The easiest solution is just traverse all the mountains to see how many inns can you see from the west.\n    For each mountain, it is easier to search the valley from the inn than from the mountain.\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\n\nn = int(sys.argv[1])\ninn_heights = [int(elem) for elem in sys.stdin.readline().strip().split()]\nassert n == len(inn_heights)\n\ncount = 0\ni = 1\nwhile i < n:\n    if inn_heights[i] <= inn_heights[i - 1]:\n        count += 1\n    i += 1\nprint(count)\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\n\n-------------Solution---------------\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n6 5 6 8\") == 3\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"\n\nN = int(input())\nH = [int(i) for i in input().split()]\ncount = 0\nfor i in range(1, N):\n    if H[i] <= H[i - 1]:\n        count += 1\nprint(count)\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\\n\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\\n\") == \"1\\n5\"\nassert solution(\"5\\n1 2 1 2 1\\n\") == \"1\\n5\""
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1 2 2 1\\n') == '4\\n3 2 2 1'\nassert solution('7\\n1 2 3 1 2 3 4\\n') == '2\\n3 4'\nassert solution('5\\n1 2 1 2 1\\n') == '1\\n2 2 1'\n\nassert solution('1\\n1\\n') == '1'\nassert solution('2\\n1 1\\n') == '2\\n1 2'\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n2 2 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n2 2 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n2 2 1\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\nnumbers = list(map(int, sys.stdin.readline().strip().split()))\nstairs = [0 for _ in range(n)]\nstairs[0] = 1\nfor i in range(1, n):\n    for j in range(i):\n        if numbers[j] < numbers[i]:\n            stairs[i] = max(stairs[j] + 1, stairs[i])\n\nprint(stairs[-1])\nprint(' '.join(map(str, stairs)))\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 1 1 1') == '4\\n2\\n1 1'\nassert solution('5\\n1 2 3 4 5') == '1\\n5\\n4 3'\nassert solution('6\\n1 2 3 4 5 6') == '1\\n5\\n4 3'\nassert solution('7\\n1 2 3 4 5 6 7') == '1\\n5\\n4 3'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '1\\n5\\n4 3'\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n\n\"\"\""
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n2 2 1\""
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected_stdout\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == '2\\n3 4'\nassert solution(\"4\\n1 1 1 1\") == '4\\n1 1 1 1'\nassert solution(\"5\\n1 2 1 2 1\") == '1\\n5'\nassert solution(\"5\\n1 2 1 2 1\") == '1\\n5'\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n\"\"\"\n\n\n\nn = int(input())\na = [int(i) for i in input().split()]\n\ncnt = 0\nstairs = []\nfor i in range(n):\n    if a[i] not in stairs:\n        stairs.append(a[i])\n        cnt += 1\nprint(cnt)\nfor i in range(len(stairs)):\n    print(stairs[i], end=' ')\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\\n\") == \"2\\n3 4\\n\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"4\\n1 1 1 1\\n\"\nassert solution(\"5\\n1 2 1 2 1\\n\") == \"1\\n5\\n\"\nassert solution(\"5\\n1 2 1 2 1\\n\") == \"1\\n5\\n\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n3\") == \"1\"\nassert solution(\"9\\n10\") == \"1\"\nassert solution(\"8\\n7\") == \"2\"\nassert solution(\"7\\n21\") == \"1\"\nassert solution(\"7\\n28\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n6\\n7\\n21\\n28\\n999999999\\n999999984\\n\") == \"1\\n2\\n1\\n7\\n4\\n333333333\\n333333328\"\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"6\") == \"2\"\nassert solution(\"7\") == \"1\"\nassert solution(\"21\") == \"7\"\nassert solution(\"28\") == \"4\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('6') == '2'\nassert solution('7') == '1'\nassert solution('21') == '7'\nassert solution('28') == '4'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n6\n7\n21\n28\n999999999\n999999984\n\"\"\") == \"\"\"\n1\n2\n1\n7\n4\n333333333\n333333328\n\"\"\"\n\nassert solution(\"\"\"\n9\n3\n6\n7\n21\n28\n999999999\n999999984\n999999998\n999999997\n\"\"\") == \"\"\"\n1\n2\n1\n7\n4\n333333333\n333333328\n33333333\n333333328\n\"\"\""
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n6\") == \"1\\n2\\n1\"\nassert solution(\"7\\n21\") == \"1\\n2\\n1\"\nassert solution(\"7\\n28\") == \"1\\n2\\n1\\n7\\n4\"\nassert solution(\"999999999\\n999999984\") == \"333333333\\n333333328\"\nprint('PASSED')\n\n\"\"\""
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n6\\n7\\n21\\n28\\n999999999\\n999999984\") == \"1\\n2\\n1\\n7\\n4\\n333333333\\n333333328\"\n\"\"\"\n\nimport sys\nfrom typing import Iterator\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n3') == '2'\nassert solution('2\\n4') == '1'\nassert solution('3\\n5') == '1'\nassert solution('3\\n9') == '4'\nassert solution('4\\n16') == '8'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\n\nassert solution('7') == 0\n\nassert solution('3') == 1\n\nassert solution('3 12') == 0\n\nassert solution('12') == 1"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"6\") == \"2\"\nassert solution(\"7\") == \"1\"\nassert solution(\"21\") == \"7\"\nassert solution(\"28\") == \"4\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"512 4\") == \"50\"\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"512 4\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\n\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\"\"\"\n\nimport sys\nn, k = map(int, sys.stdin.readline().split())\ncount = 0\n\nwhile count < k:\n    num = n\n    while num > 0:\n        num, r = divmod(num, 10)\n        count += r\n    if count == 0:\n        n -= 1\n    else:\n        n //= 10\n    count += 1\n\nprint(n)\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('512 4') == '50'\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('512 4') == '50'\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\nassert solution(\"7\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n5 5\"\n\"\"\"\n\nimport sys\nimport os\nfrom io import StringIO\nfrom itertools import combinations, accumulate\nfrom collections import deque, defaultdict, Counter, OrderedDict\nfrom math import sqrt\nfrom bisect import bisect_right, bisect_left, insort_left\nfrom heapq import heappush, heappop, heapify\nfrom time import time\nfrom fractions import gcd"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1 4\\n') == '2 1 1 2 3\\n'\nassert solution('3 7 5 1 5\\n') == '2 1 1 2 3\\n'\nassert solution('7 2 2 2 1 2 2\\n') == '7 1 2 2 2 2 3 2\\n'\nassert solution('4 2 2 2 1 2 2\\n') == '4 1 2 2 2 2 3 2\\n'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\n\n---\n\n7\n4 3 5 1 2 2 2 1\n5\n2 1 1 2 3\n\n7\n3 7 5 1 5\n5\n2 1 2 2 2 3\n\n3\n5 1 4\n5\n2 1 5\n\n7\n2 2 3 2 1 2 2\n5\n1 2 2 2 2 3 2\n\n\n\nhttps://codeforces.com/contest/1553/submission/114850761\n\nThe maximum number of people is always less or equal to n, so n is the maximum number of people that can be in the circle.\n\n1) We create a min-heap. Every element is a tuple of (number of people, height of person).\n2) The heap is sorted by number of people.\n3) We can always add to the heap the biggest element (the person with the greatest height).\n4) If the height of the biggest element exceeds the height of the person at the beginning of the heap, we can throw out the element and repeat.\n5) We can always push the next person to the end of the heap if the height of the person is greater.\n6) We can push any element in the heap to the end of the heap if the height is greater."
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str([3,7,5,1,5])) == [5,2,1,1,2]\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\nassert solution(\"7\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\"\nassert solution(\"5\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\"\n\"\"\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\n\"\"\""
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\nassert solution('3\\n5 1 4') == '2\\n4 5'\nassert solution('7\\n2 2 3 2 1 2 2') == '7\\n1 2 2 2 2 3 2'"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 5 1 2 2 1\") == \"5\"\n\"\"\""
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 5 1 2 2 1\\n') == '5\\n2 1 1 2 3'\nassert solution('5 3 7 5 1 5\\n') == '2\\n5 5'\nassert solution('3 7 5 1 5\\n') == '2\\n5 5'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 21\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'\nassert solution('4 10\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'\nassert solution('4 10\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"0\"\n\"\"\""
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'''\n4 21\n10 8\n7 4\n3 1\n5 4\n''') == '2'\n\nassert solution(\n'''\n4 16\n10 8\n7 4\n3 1\n5 4\n''') == '-1'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 21\n10 8\n7 4\n3 1\n5 4''') == '2'\nassert solution('''4 16\n10 8\n7 4\n3 1\n5 4''') == '-1'\nassert solution('''4 15\n10 8\n7 4\n3 1\n5 4''') == '-1'\nassert solution('''2 11\n4 4\n1 1\n4 4\n1 1\n4 4''') == '2'\nassert solution('''10 8\n10 9\n8 9\n5 5\n3 3\n5 5\n3 3\n6 6\n6 7\n6 8\n5 5\n1 1\n5 5\n1 1\n1 1\n8 9\n8 10\n8 10\n6 6\n6 8\n6 10\n6 10\n6 8\n6 8\n8 10\n8 10\n8 10\n7 9\n7 9\n7 9\n7 9\n7 9\n7 9\n7 9\n7 9\n7 9\n6 8\n6 8\n6 10\n7 10\n7 10\n6 6\n7 10\n6 7\n7 10\n6 6\n7 10\n6 7\n7 10\n6 7\n7 10\n6 7\n7 10\n6 7\n7 10\n6 7\n7 10\n6 7\n6 10\n6 10\n6 9\n6 9\n7 10\n6 10\n6 9\n6 9\n6 10\n6 10\n6 10\n6 9\n7 10\n6 10\n6 10\n6 10\n6 9\n6 10\n6 9\n6 9\n7 10\n6 10\n6 9\n6 10\n6 10\n6 10\n6 9\n7 10\n6 10\n6 9\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n6 10\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == '2'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"2\"\nassert solution(\"4 19\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"-1\""
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"tleelte\\nqwerty\\nvvvvvv\\nabcde\"\n\"\"\"\n\nfrom typing import List, Dict, Tuple\nfrom collections import defaultdict\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 5 3') == 'tleel'\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1 1\") == \"tleel\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 5 3\\n6 1 1\\n6 6 1\\n5 2 2') == 'tleelte\\nqwerty\\nvvvvvv\\nabcde'\n\"\"\"\n\nimport collections\n\nfrom itertools import combinations, product, chain\n\nINPUT_CHUNK_SIZE = 3\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3\") == \"tleel\"\n\nassert solution(\"7 5 3\") == \"tleel\"\n\nassert solution(\"6 1 1\") == \"qwerty\"\n\nassert solution(\"6 6 1\") == \"qwerty\"\n\nassert solution(\"5 2 2\") == \"vvvvv\""
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n\n\n\n'''"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\n\"\"\"\n\nimport numpy as np\nfrom collections import defaultdict\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\n\"\"\"\nfrom typing import Tuple\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\n--------------------------------------------------------------------------------\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 12 6\") == 12\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\"\"\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20 12 6') == 12\n\"\"\"\nfrom typing import List, Any\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 12 6') == '12'\n\"\"\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 12 6\") == \"12\"\nprint(solution(\"20 12 6\"))\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3') == '2'\nassert solution('5\\n3\\n3\\n3\\n3') == '3'\n\n-----Explanation-----\nFor example, in the first sample, there is three groups of three students, and there is two groups of five students.\n-----Test Data-----\nYou can check your solution on the following data.\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8') == '2'\nassert solution('10') == '3'\nassert solution('10') == '3'\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"8\\n\"\n) == \"2\"\nassert solution(\n\"7\\n\"\n) == \"1\"\nassert solution(\n\"6\\n\"\n) == \"1\"\nassert solution(\n\"3\\n\"\n) == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '8\\n'\n) == '2'\n\nassert solution(\n    '10\\n'\n) == '2'\n\nassert solution(\n    '9\\n'\n) == '2'\n\nassert solution(\n    '7\\n'\n) == '1'\n\nassert solution(\n    '6\\n'\n) == '1'"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n5\\n5\\n4\\n4\\n4\\n4') == '5'\nassert solution('5\\n4\\n4\\n4\\n4') == '4'\nassert solution('5\\n4\\n4\\n4\\n3') == '3'\nassert solution('4\\n4\\n4\\n4') == '4'\nassert solution('3\\n3\\n3\\n3') == '3'\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n') == '2'\nassert solution('1\\n') == '1'\nassert solution('3\\n') == '1'\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('7') == '2'\nassert solution('8') == '2'\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"4\"\nassert solution(\"100\") == \"11\"\nassert solution(\"1000\") == \"53\"\n\"\"\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3') == '3'\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3\") == \"3\"\n\n'''\n\nimport sys"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3') == '3'\n\"\"\"\n\n\"\"\"\nWe have N apples and M oranges in our basket. Our sum is given by:\ns = na + nm\nNow, we need to divide the apples in the basket in three sets, with a sum of a\nset being:\na = na/3\nb = na/3 + nm/3\nc = na/3 + nm/3 + nm/3\nCan you help us to find a?\n\n-----Constraints-----\n - All values in input are integers.\n - 0 \\leq N, M \\leq 100\n - 0 \\leq s, na, nm \\leq 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\n\n-----Output-----\nPrint the maximum number of apple pies we can make with what we have.\n\n-----Sample Input-----\n3 5\n\n-----Sample Output-----\n2\n\"\"\"\n\nfrom typing import List\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3') == \"3\"\nassert solution('1 3') == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"3\"\nassert solution(\"5 4\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3') == '3'\n\"\"\"\nimport re\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == \"3\"\nassert solution(\"5 6\") == \"3\"\nassert solution(\"6 4\") == \"3\"\nassert solution(\"7 8\") == \"3\"\nassert solution(\"8 2\") == \"3\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"4\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"10 10\") == \"10\"\nassert solution(\"10 10\") == \"10\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == '3'\nassert solution(\"1 1\") == '1'\nassert solution(\"1 100\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3\\n') == '3'\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 12') == '16'\nassert solution('4 4') == '0'\nassert solution('12 12') == '0'\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 12') == '16'\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 12') == '16'\nassert solution('6 12') == '12'\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 12\\n\") == \"16\"\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\"\n\nfrom __future__ import print_function"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 12\") == \"16\"\nassert solution(\"1 1\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 12') == '16'\nprint(solution('4 12'))\n\n-------------------------"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 12\\n') == '16'\n\"\"\"\n\n\"\"\"\nGiven a positive integer A and a positive integer B, print A + B if A is a divisor of B, otherwise print B - A.\n\nInput Format\nThe first line of the input contains an integer T denoting the number of test cases.\nThe next T lines contain two space-separated integers A and B.\n\nOutput Format\nPrint the required result for each test case in a new line.\n\nSample Input\n2\n2 4\n5 12\nSample Output\n8\n12\n\nExplanation\nTest Case 1: 2 + 4 = 6, 6 is divisible by 12.\nTest Case 2: 5 + 12 = 17, 17 is not divisible by 12.\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 12') == '16'\n\"\"\"\nimport sys"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\nassert solution('a') == 'No'\nassert solution('abc') == 'No'\nassert solution('chokudai') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\nassert solution(\"chokudai\") == \"No\"\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n\n\"\"\"\n\nimport sys\n\ninput_stdin = sys.stdin\ninput_lines = input_stdin.readlines()\n\nstdout = sys.stdout"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(chokudai) == \"Yes\"\nassert solution(chokudaiz) == \"Yes\"\n\"\"\"\n\n\"\"\"\nGiven two strings, check if they are one edit (or zero edits) away.\n\nNOTE: I actually haven't implemented the check\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 16') == '9'\n\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 16') == '9'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 16') == '9'\nassert solution('1 1') == 'IMPOSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 16') == '9'\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 16') == '9'\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"IMPOSSIBLE\"\nassert solution(\"2 16\") == \"9\"\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 16') == '9'\nassert solution('2 6') == 'IMPOSSIBLE'\n\n---Problem 997/1005---\nWrite a program that takes as input a number n and a k value.\nPrint all of the numbers from 1 to n in ascending order that\nare not divisible by k.\n\n-----Constraints-----\n - 1 \\leq n \\leq 10^9\n - 1 \\leq k \\leq 10^5\n - 1 \\leq A[i] \\leq 10^9\n - k is a prime number.\n - n is an even number\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn k\n\n-----Output-----\nPrint the numbers in ascending order that are not divisible by k.\n\n-----Sample Input-----\n3 5\n\n-----Sample Output-----\n2 4\n\n---Problem 998/1006---\nWrite a program that takes as input an array of positive integers\nand a number n. The program should print the first pair of\nindices (i, j) such that the sum of the elements at those indices\nis exactly n. If no such pair exists, the program should print\nINVALID. If there are multiple such pairs, print any one.\n\n-----Constraints-----\n - There is at most one such pair.\n - 1 \\leq A[i] \\leq 10^9\n - 1 \\leq A[j] \\leq 10^9\n - 1 \\leq n \\leq 10^5\n - 1 \\leq i \\leq j \\leq 10^5\n - n \\leq 10^9\n - n is an integer\n\n-----Input-----\nInput is given from Standard Input in the following format:\nint A[n]\nint n\n\n-----Output-----\nPrint the first pair of indices (i, j) such that the sum of the\nelements at those indices is exactly n. If no such pair exists,\nprint INVALID instead.\n\n-----Sample Input-----\n2\n1 5\n2 4\n3 5\n4 2\n5 7\n6 3\n\n-----Sample Output-----\nINVALID\n1 2\n\n---Problem 999/1007---\nWrite a program that takes as input an array of positive integers\nand a number n. The program should print the first pair of\nindices (i, j) such that the product of the elements at those\nindices is exactly n. If no such pair exists, the program should\nprint INVALID. If there are multiple such pairs, print any one.\n\n-----Constraints-----\n - There is at most one such pair.\n - 1 \\leq A[i] \\leq 10^9\n - 1 \\leq A[j] \\leq 10^9\n - 1 \\leq n \\leq 10^5\n - 1 \\leq i \\leq j \\leq 10^5\n - n \\leq 10^9\n - n is an integer\n\n-----Input-----\nInput is given from Standard Input in the following format:\nint A[n]\nint n\n\n-----Output-----\nPrint the first pair of indices (i, j) such that the product of the\nelements at those indices is exactly n. If no such pair exists,\nprint INVALID instead.\n\n-----Sample Input-----\n3\n1 5\n2 4\n3 5\n4 2\n5 7\n6 3\n\n-----Sample Output-----\n1 2\n\n---Problem 1000/1008---\nWrite a program that takes as input an array of positive integers\nand a number n. The program should print the first pair of\nindices (i, j) such that the absolute difference of the product\nof the elements at those indices is exactly n. If no such pair\nexists, the program should print INVALID. If there are multiple\nsuch pairs, print any one.\n\n-----Constraints-----\n - There is at most one such pair.\n - 1 \\leq A[i] \\leq 10^9\n - 1 \\leq A[j] \\leq 10^9\n - 1 \\leq n \\leq 10^5\n - 1 \\leq i \\leq j \\leq 10^5\n - n \\leq 10^9\n - n is an integer\n\n-----Input-----\nInput is given from Standard Input in the following format:\nint A[n]\nint n\n\n-----Output-----\nPrint the first pair of indices (i, j) such that the absolute\ndifference of the product of the elements at those indices is\nexactly n. If no such pair exists, print INVALID instead.\n\n-----Sample Input-----\n4\n1 5\n2 4\n3 5\n4 2\n5 7\n6 3\n\n-----Sample Output-----\n1 2\n\n---Problem 1009/1009---\nWrite a program that takes as input an array of integers and\nan array of positive integers. The program should print the\nnumber of ways that the integers can be written as the sum of\npositive integers in the second array.\n\n-----Constraints-----\n - There is at most one such pair.\n - 1 \\leq A[i] \\leq 10^9\n - 1 \\leq A[j] \\leq 10^9\n - 1 \\leq n \\leq 10^5\n - 1 \\leq i \\leq j \\leq 10^5\n - n \\leq 10^9\n - n is an integer\n - n is at least 1\n\n-----Input-----\nInput is given from Standard Input in the following format:\nint A[n]\nint B[m]\n\n-----Output-----\nPrint the number of ways that the integers can be written\nas the sum of positive integers in the second array.\n\n-----Sample Input-----\n4\n1 5 2 3\n2 3 4\n\n-----Sample Output-----\n3\n\n---Problem 1010/1011---\nWrite a program that takes as input an array of positive\nintegers and an array of positive integers. The program\nshould print the number of ways that the integers can be\nwritten as the sum of positive integers in the second\narray.\n\n-----Constraints-----\n - There is at most one such pair.\n - 1 \\leq A[i] \\leq 10^9\n - 1 \\leq A[j] \\leq 10^9\n - 1 \\leq n \\leq 10^5\n - 1 \\leq i \\leq j \\leq 10^5\n - n \\leq 10^9\n - n is an integer\n - n is at least 1\n\n-----Input-----\nInput is given from Standard Input in the following format:\nint A[n]\nint B[m]\n\n-----Output-----\nPrint the number of ways that the integers can be written\nas the sum of positive integers in the second array.\n\n-----Sample Input-----\n4\n1 5 2 3\n2 3 4\n\n-----Sample Output-----\n3\n\n---Problem 1012/1013---\nWrite a program that takes as input an array of integers and\nan array of positive integers. The program should print the\nnumber of ways that the integers can be written as the sum\nof positive integers in the first array.\n\n-----Constraints-----\n - There is at most one such pair.\n - 1 \\leq A[i] \\leq 10^9\n - 1 \\leq A[j] \\leq 10^9\n - 1 \\leq n \\leq 10^5\n - 1 \\leq i \\leq j \\leq 10^5\n - n \\leq 10^9\n - n is an integer\n - n is at least 1\n\n-----Input-----\nInput is given from Standard Input in the following format:\nint A[n]\nint B[m]\n\n-----Output-----\nPrint the number of ways that the integers can be written\nas the sum of positive integers in the first array.\n\n-----Sample Input-----\n3\n1 5 2\n2 3 4\n\n-----Sample Output-----\n2\n\n---Problem 1014/1015---\nWrite a program that takes as input an array of positive\nintegers and a number n. The program should print the sum\nof the elements in the array modulo n.\n\n-----Constr"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 16') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"No\"\nassert solution(\"11\") == \"Yes\"\nassert solution(\"1112\") == \"Yes\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"77\") == \"Yes\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"17\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"19\") == \"Yes\"\nassert solution(\"12\") == \"No\"\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"117\") == \"Yes\"\nassert solution(\"456\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"101\") == \"No\"\nassert solution(\"12\") == \"No\"\nassert solution(\"7\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('117') == 'Yes'\nassert solution('101') == 'No'\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(117)) == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"117\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(117) == \"Yes\"\nassert solution(123) == \"No\"\nassert solution(907) == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == 'No'\nassert solution('567') == 'No'\nassert solution('577') == 'Yes'\nassert solution('778') == 'Yes'\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(117) == 'Yes'\n\"\"\"\nimport re"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12') == 'Yes'\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(101) == 'Yes'\nassert solution(12) == 'Yes'\nassert solution(100) == 'No'\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"13\") == \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('101') == 'Yes'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"101\") == \"Yes\"\nassert solution(\"1211\") == \"No\"\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12\\n\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12\\n') == 'Yes'\n\n\"\"\"\n\nimport sys\nimport math\n\nfor line in sys.stdin:\n    s = int(line)\n    print('Yes' if s % 3 == 0 else 'No')\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\") == \"Yes\"\n\n\"\"\"\n\n\"\"\"\n\ud83c\udf4c\n\nIn this problem you will need to calculate the sum of the digits of an integer.\nLet's look at a simple example. If we want to calculate the sum of the digits of 32, we can break it down into a sum of the digits of 2 and 2 and then add the last 2.\n\n32 = 2 + 2 + 2 + 2\n2 + 2 + 2 + 2 = 10\n10 + 2 = 12\nSo, in this example, the sum of the digits of 32 is 12.\n\nTo calculate the sum of the digits of a number, we can use a while loop to break the number down into its individual digits."
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\n\n\"\"\"\nWe are given a polygon P in the plane, with its vertices being integer points. We will denote the vertices of P by (x_1,y_1),(x_2,y_2),...(x_n,y_n). Let (x_1,y_1) be the vertex with the smallest x-coordinate.\n\nThe area of a polygon is given by\nA = (x_n y_1 \u2212 x_1 y_n + x_2 y_1 \u2212 x_1 y_2 +... + x_n\u22121 y_1 \u2212 x_1 y_n + x_n y_2 \u2212 x_2 y_1 +... + x_n y_n \u2212 x_n y_2) / 2\nwhere we have assumed that x_n=x_1, y_n=y_1.\n\nCompute the perimeter of P.\n\n-----Constraints-----\n0 <= x_i, y_i <= 1000\n0 <= n <= 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nx_1 y_1\nx_2 y_2\n...\nx_n y_n\n\n-----Output-----\nPrint the perimeter of P as an integer.\n\n-----Sample Input-----\n0 0\n1 0\n0 1\n\n-----Sample Output-----\n3\n\"\"\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\n-----\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 0 1\") == \"1 1 -1 0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0 1\") == \"1 1 -1 0\"\n\"\"\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\"\"\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 0 0 1') == '1 1 -1 0'\n\"\"\""
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\n\"\"\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == \"2 4\"\nprint(\"test OK\")\n\n-----Explanation-----\nThe first step is to make the two strings into sets, so that we can compare them.\nred,blue = {'r', 'b'}\nred,blue = {'b'}, {'r'}\nNow, we have that red == blue and we know that they are not equal,\nso we return \"2 4\".\n\nYou can also solve this problem by the following code:\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\""
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''red blue\n3 4\nred''') == '2 4'\n\n'''\nred blue\n3 4\nred\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nred\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nred\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nred\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nred\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nred\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nred\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nred\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue\n'''\n'''\nred blue\n3 4\nblue"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('red blue') == '2 4'\n\"\"\""
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('red blue') == '2 4'\n\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('red blue') == '2 4'\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\nimport sys\n\nS, T = map(str, input().split())\nA, B = map(int, input().split())\nU = input()\n\nprint(A, B, end=\" \")"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('red blue') == '2 4'\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"red blue\") == \"2 4\"\nprint(solution(\"red blue\"))\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abcbca') == 'No'\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_str1) == \"No\"\nassert solution(test_str2) == \"Yes\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abcabcabc') == 'Yes'\nassert solution('abcabcabcabc') == 'Yes'\nassert solution('abc') == 'No'\nassert solution('abccba') == 'No'\n\nSolution\n------"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1\na\n''') == 'Yes'\nassert solution('''2\naa\n''') == 'Yes'\nassert solution('''3\nab\n''') == 'Yes'\nassert solution('''4\naba\n''') == 'Yes'\nassert solution('''5\nabcabc\n''') == 'Yes'\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(s) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == 'Yes'\nprint(solution(str(input())))\n\"\"\"\nimport re"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abccba') == 'No'\n\n\"\"\"\n\nN = int(input())\nS = input()\n\nresult = None\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcabc\") == \"Yes\", \"Wrong Answer\"\nassert solution(\"abccba\") == \"No\", \"Wrong Answer\"\n\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abccba') == 'No'\n\"\"\"\n\nfrom itertools import zip_longest\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n2 2 2\") == \"0\"\nassert solution(\"3 3\\n2 1 1\") == \"3.000000\"\nassert solution(\"1 1\\n3 3 3\") == \"1.000000\"\n\"\"\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 1 2\") == \"3.0 0\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 1 2\\n\") == \"3.0 0\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 1 2\") == \"3.0 0\"\nassert solution(\"4 5 4 5\") == \"4.0 1\"\n\n-----------------\nW H x y\n\n>>> a = 2\n>>> b = 3\n>>> c = 1\n>>> d = 2\n\n>>> a + b + c + d\n8\n\n>>> a - b - c - d\n-5\n\n>>> a * b * c * d\n24\n\n>>> a / b / c / d\n0.6666666666666666\n\n>>> a % b % c % d\n0\n\n>>> a ** b ** c ** d\n512\n\n>>> a + b\n6\n\n>>> c + d\n3\n\n>>> a + b + c + d\n10\n\n>>> a - b + c + d\n9\n\n>>> a * b + c * d\n12\n\n>>> a * b * c * d\n24\n\n>>> a / b / c + d\n1.3333333333333333\n\n>>> a / b / c - d\n-0.6666666666666666\n\n>>> a / b * c * d\n-0.6666666666666666\n\n>>> a / b / c / d\n0.1111111111111111\n\n>>> a / b / c - d\n-0.6666666666666666\n\n>>> a / b / c * d\n0.1111111111111111\n\n>>> a + b / c + d\n6.0\n\n>>> a * b / c + d\n4.666666666666667\n\n>>> a * b / c * d\n9.0\n\n>>> a * b / c / d\n0.1111111111111111\n\n>>> a * b / c - d\n-1.6666666666666667\n\n>>> a * b / c / d\n0.1111111111111111\n\n>>> a + b / c / d\n0.6666666666666666\n\n>>> a / b + c / d\n1.3333333333333333\n\n>>> a / b / c + d\n0.6666666666666666\n\n>>> a / b / c - d\n-0.6666666666666666\n\n>>> a / b / c / d\n0.1111111111111111\n\n>>> a / b / c * d\n0.1111111111111111\n\n>>> a / b / c - d\n-0.6666666666666666\n\n>>> a / b / c / d\n0.1111111111111111\n\n>>> a + b / c / d\n0.3333333333333333\n\n>>> a * b / c / d\n0.1111111111111111\n\n>>> a / b + c / d\n0.0\n\n>>> a / b / c + d\n0.0\n\n>>> a / b / c - d\n0.0\n\n>>> a / b / c / d\n0.0\n\n>>> a / b * c / d\n0.0\n\n>>> a + b * c / d\n2.0\n\n>>> a * b * c / d\n0.0\n\n>>> a / b * c / d\n0.0\n\n>>> a / b / c + d\n1.3333333333333333\n\n>>> a / b / c - d\n-0.3333333333333333\n\n>>> a / b / c / d\n0.0\n\n>>> a * b / c - d\n1.3333333333333333\n\n>>> a * b / c / d\n0.3333333333333333\n\n>>> a * b / c + d\n2.6666666666666665\n\n>>> a / b + c / d\n0.5\n\n>>> a / b / c + d\n0.5\n\n>>> a / b / c - d\n-0.5\n\n>>> a / b / c / d\n0.0\n\n>>> a / b / c * d\n0.0\n\n>>> a / b * c / d\n0.0\n\n>>> a / b * c * d\n0.0\n\n>>> a + b / c / d\n0.6666666666666666\n\n>>> a * b / c / d\n0.6666666666666666\n\n>>> a * b / c + d\n1.3333333333333333\n\n>>> a * b / c - d\n1.3333333333333333\n\n>>> a * b / c / d\n0.3333333333333333\n\n>>> a + b / c / d\n1.3333333333333333\n\n>>> a * b / c - d\n1.3333333333333333\n\n>>> a * b / c / d\n0.3333333333333333\n\n>>> a / b + c / d\n1.0\n\n>>> a / b / c + d\n1.0\n\n>>> a / b / c - d\n-1.0\n\n>>> a / b / c / d\n0.0\n\n>>> a / b * c / d\n0.0\n\n>>> a / b * c * d\n0.0\n\n>>> a / b * c + d\n2.0\n\n>>> a * b / c * d\n0.0\n\n>>> a * b / c / d\n0.0\n\n>>> a * b / c / d\n0.0\n\n>>> a / b + c / d\n0.0\n\n>>> a * b / c / d\n0.0\n\n>>> a / b + c / d\n0.0\n\n>>> a / b / c + d\n0.0\n\n>>> a / b / c - d\n-0.0\n\n>>> a / b / c / d\n0.0\n\n>>> a / b * c / d\n0.0\n\n>>> a / b * c * d\n0.0\n\n>>> a * b / c / d\n0.0\n\n>>> a * b / c + d\n2.0\n\n>>> a / b + c / d\n0.0\n\n>>> a / b / c + d\n0.0\n\n>>> a / b / c - d\n-0.0\n\n>>> a / b / c / d\n0.0\n\n>>> a / b / c * d\n0.0\n\n>>> a / b * c / d\n0.0\n\n>>> a * b / c * d\n0.0\n\n>>> a / b / c + d\n1.0\n\n>>> a / b / c - d\n1.0\n\n>>> a / b / c / d\n0.0\n\n>>> a * b / c * d\n0.0\n\n>>> a * b / c + d\n2.0\n\n>>> a / b + c / d\n0.5\n\n>>> a / b / c + d\n0.5\n\n>>> a / b / c - d\n-0.5\n\n>>> a / b / c / d\n0.0\n\n>>> a * b / c * d\n0.0\n\n>>> a / b * c / d\n0.0\n\n>>> a / b * c * d\n0.0\n\n>>> a * b / c / d\n0.0\n\n>>> a * b / c + d\n2.0\n\n>>> a / b + c / d\n0.5\n\n>>> a / b / c + d\n0.5\n\n>>> a / b / c - d\n-0.5\n\n>>> a / b / c / d\n0.0\n\n>>> a / b / c * d\n0.0\n\n>>> a / b * c / d\n0.0\n\n>>> a * b / c * d\n0.0\n\n>>> a / b * c / d\n0.0\n\n>>> a * b / c + d\n2.0\n\n>>> a / b + c / d\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1 2\") == \"3.0 0\"\nassert solution(\"3 2 3 4\") == \"1.0 1\"\nassert solution(\"7 4 5 4\") == \"1.5 0\"\nassert solution(\"10 10 10 10\") == \"10.0 0\"\nassert solution(\"10 10 5 5\") == \"3.5 0\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\nassert solution('1 1 1 1') == '0.000000 0'\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 1 2\") == \"3.0 0\"\n\"\"\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\nassert solution('4 4 3 6') == '16.666667 0'\nassert solution('4 4 8 9') == '16.666667 1'\nassert solution('4 4 2 1') == '4.00000 2 0'\nassert solution('2 3 3 2') == '3.333333 0'\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '0'\nassert solution('W1 H2 1 2') == '3.000000 0'\nassert solution('W3 H4 1 2') == '4.000000 0'\nassert solution('W10 H20 1 2') == '10.000000 0'\nassert solution('W100 H200 1 2') == '100.000000 0'\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('G W Y P Y W') == 'Four'\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nW W W\") == \"Three\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"\nassert solution(\"2\\nP Y\") == \"Two\"\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\", \"Wrong answer for empty string\"\nassert solution(\"P\") == \"Three\", \"Wrong answer for single character\"\nassert solution(\"P P P P P P\") == \"Four\", \"Wrong answer for multiple occurrences of characters\"\nassert solution(\"P P P P Y Y Y Y Y\") == \"Four\", \"Wrong answer for multiple occurrences of characters\"\nassert solution
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 G W P Y') == 'Four'\nassert solution('2 W P Y G') == 'Four'\nassert solution('1 W P Y G') == 'Four'\nassert solution('1 W P Y G') == 'Four'\nassert solution('3 G W P Y') == 'Four'\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nP W G Y\") == \"Four\"\nassert solution(\"5\\nP P P W G G\") == \"Four\"\nassert solution(\"5\\nP W G Y W\") == \"Three\"\n\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\nP Y W\\n') == 'Four'\nassert solution('4\\nP W G\\n') == 'Four'\nassert solution('4\\nP W G Y\\n') == 'Four'\nassert solution('4\\nP W G P\\n') == 'Four'\nassert solution('5\\nP W G Y P\\n') == 'Five'\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"pwgywyw\") == \"Four\"\nassert solution(\"pwgywyww\") == \"Three\"\nassert solution(\"pwgywwy\") == \"Four\"\nassert solution(\"wwgyyyw\") == \"Four\"\nassert solution(\"pwggwyw\") == \"Four\"\n\n\"\"\"\n\n\"\"\"\n\ubb38\uc81c\n3\ubc88 \uc0c1\uc790\ub97c \ub2e4 \uc3f4 \ubd24\uc744 \ub54c, \uc0c1\uc790\uc758 \uc0c9\uc774 \ub2e4\ub978 \uc0c1\uc790\ub07c\ub9ac \uc5f0\uacb0\ub418\uc5b4 \uc788\ub294\uc9c0 \ud655\uc778\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc2dc\uc624.\n\n\uc785\ub825\n\uccab \ubc88\uc9f8 \uc904\uc5d0 \uacf5\ubc31\uc744 \uc0ac\uc774\uc5d0 \ub450\uace0 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc758 \uac1c\uc218\uac00 \uc785\ub825\ub429\ub2c8\ub2e4.\n\ub450 \ubc88\uc9f8 \uc904\ubd80\ud130 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \uac1c\uc218\ub9cc\ud07c \uc785\ub825\uc774 \uc8fc\uc5b4\uc9d1\ub2c8\ub2e4.\n\uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc5d0\ub294 \uacf5\ubc31\uc744 \uc0ac\uc774\uc5d0 \ub450\uace0 \ub2e4\uc12f \uc904\uae4c\uc9c0 \uc0c1\uc790\uc758 \ud615\ud0dc\uac00 \uc785\ub825\ub429\ub2c8\ub2e4.\n\uac01 \uc0c1\uc790\uc758 \uc22b\uc790\ub294 \uc0c1\uc790\uc5d0 \uc788\ub294 \uc22b\uc790\uc758 \ucd5c\uc18c \uac1c\uc218\ub97c \ub098\ud0c0\ub0b4\uba70 \ubaa8\ub450 0\ubcf4\ub2e4 \ud06c\uac70\ub098 \uac19\uace0, 9\ubcf4\ub2e4 \uc791\uac70\ub098 \uac19\uc740 \uc790\uc5f0\uc218\uc785\ub2c8\ub2e4.\n\n\ucd9c\ub825\n\uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc5d0 \ub300\ud574\uc11c \uadf8 \uc0c1\uc790\ub4e4\uc774 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc73c\uba74 Y, \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 N\uc744 \ucd9c\ub825\ud569\ub2c8\ub2e4.\n\n\uc608\uc81c \uc785\ub825 1 \n2\n\nP W G\nY Y Y\n\n\uc608\uc81c \ucd9c\ub825 1 \nY\n\nY\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\nG W Y P Y W') == 'Four'\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"6 3 2\n2 3 1 3 4 2\"\"\") == 6\nassert solution(\"\"\"5 3 3\n1 2 6 10 3\"\"\") == 2\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 2\") == 6\nassert solution(\"5 3 3\") == 2\nassert solution(\"5 5 6\") == 2\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2\\n1 2 3 4 2\\n\") == \"2\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5 6\\n1 2 6 10 3') == 2\n\n\"\"\"\n\n\nimport sys\n\nn, x, y = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\n\nfor i, _ in enumerate(a):\n    if _ < x:\n        a[i] = max(0, _ - x)\n    else:\n        a[i] = _ + y\n\nprint(a.count(0))\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2\\n2 3 1 3 4 2\") == \"6\"\nassert solution(\"5 3 3\\n1 2 4 2 3\") == \"2\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\") == 2\nassert solution(\"6 3 2\\n2 3 1 3 4 2\") == 6\n\n\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 3\\n1 2 6 10 3\\n') == 2\n\"\"\""
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 3 2\\n2 3 1 3 4 2') == 6\nassert solution('5 3 3\\n1 2 4 2 3') == 2\nassert solution('5 5 6\\n1 2 6 10 3') == 2\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\") == \"6\"\nassert solution(\"5 3 3\\n1 2 4 2 3\") == \"2\"\n\"\"\"\n\nfrom functools import lru_cache"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4 2 6 2') == '7'\n\"\"\"\nimport sys\nimport os\nimport numpy as np\nimport math"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 2 6 2\\n4 5 4 1 3\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 2 6 2\") == 7\nassert solution(\"4 5 4 1 3\") == 0\n\"\"\""
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 2 6 2\") == 7\nassert solution(\"1 3 2 4\") == 0\n\"\"\""
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == \"7\"\n\"\"\"\n\na = int(input())\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nd = [x + y for x, y in zip(b, c)]\n\nprint(d.count(max(d)))\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n4 8 2 6 2\\n4 5 4 1 3') == '7'\nassert solution('4\\n1 3 2 4\\n1 3 2 4') == '0'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8 2 6 2\\n4 5 4 1 3') == 7\n\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == \"7\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('1 2 3') == 0\nassert solution('1 1 1 1 1') == 1\nassert solution('1 1 1 1') == 0\nassert solution('2 2 2 2 2') == 1\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 2 4\\n1 3 2 4\") == 0\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2 4 5 10\") == \"1 1 3 5 9\"\n\nassert solution(\"10 10000 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '5\\n1 2 4 5 10'\n) == '1 1 3 5 9'\n\nassert solution(\n    '10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000'\n) == '9999 9 50605065 1 5 89 5 999999999 60506055 999999999'\n\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nprint(\"Cool!\")"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == '1 1 3 5 9'\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str([1, 2, 4, 5, 10])) == '1 1 3 5 9'\nassert solution(str([1, 2, 4, 5, 10, 5])) == '1 1 3 5 9 9'\nassert solution(str([1, 2, 4, 5, 10, 5, 5])) == '1 1 3 5 9 9 9'\nassert solution(str([1, 2, 4, 5, 10, 5, 10])) == '1 1 3 5 9 9 9'\n\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n\n\"\"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4\\n1 2\\n3 4\\n5 4\\n3 5') == 1\nassert solution('17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6') == 2\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == \"1\"\n\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\\n\") == \"2\"\n\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self, num_v):\n        self.num_v = num_v\n        self.edges = defaultdict(list)\n        self.is_bipartite = True\n\n    def add_edge(self, source, destination):\n        self.edges[source].append(destination)\n        self.edges[destination].append(source)\n\n    def is_bipartite_helper(self, current_v, current_color):\n        for dest_v in self.edges[current_v]:\n            if self.colors[dest_v] == current_color:\n                return False\n            if self.colors[dest_v] == -1:\n                self.colors[dest_v] = 1 - current_color\n                if not self.is_bipartite_helper(dest_v, 1 - current_color):\n                    self.is_bipartite = False\n            else:\n                self.colors[dest_v] = 1 - current_color\n                if not self.is_bipartite_helper(dest_v, 1 - current_color):\n                    self.is_bipartite = False\n\n        return True\n\n    def is_bipartite(self):\n        self.colors = [-1] * self.num_v\n        for v in range(self.num_v):\n            if self.colors[v] == -1:\n                self.colors[v] = 0\n                if not self.is_bipartite_helper(v, 0):\n                    self.is_bipartite = False\n\n        return self.is_bipartite"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\\n\") == \"2\"\n\n-----Tests-----\n\n\"\"\""
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\\n1 2\\n3 4\\n5 4\\n3 5\") == 1\n\nprint(solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\"))\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\n\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n\"\"\"\n\nimport sys\nimport queue\n\n\nclass Graph:\n    def __init__(self, n: int) -> None:\n        self.vertices = [set() for _ in range(n)]\n        self.adjacency_list = [set() for _ in range(n)]\n\n    def add_edge(self, v: int, u: int) -> None:\n        self.adjacency_list[v].add(u)\n        self.adjacency_list[u].add(v)\n\n        self.vertices[v].add(u)\n        self.vertices[u].add(v)\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n1 2\\n3 4\\n5 4\\n3 5\") == '1'\n\"\"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == ''\nassert solution('5 3\\n1 2\\n2 3') == '3'\nassert solution('4 3\\n1 2\\n2 3') == '1'\n\nassert solution('5 3\\n1 2\\n2 3\\n4 5\\n1 5') == '1'\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == '1'\nassert solution('2 2\\n') == '0'\nassert solution('1 3\\n') == '2'\nassert solution('2 4\\n') == '0'\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n1 2\\n3 4\\n5 4\\n3 5') == '1'\nassert solution('3 3\\n1 2\\n1 3\\n2 3') == '0'\nassert solution('6 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 1') == '2'\nassert solution('7 7\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 1') == '2'\nassert solution('10 10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 1') == '3'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == 1\n\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == 2\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == '1'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == '4'\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == '0'\n\nassert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n3 4\\n4 5\") == '1'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == '4'\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\\n\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\n\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\n\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == 1\n\nassert solution(\"1 1 2\\n2 3\\n1 3\\n\") == 0\n\nassert solution(\"1 1 2\\n2 2\\n1 3\\n\") == 0\n\nassert solution(\"1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == 4\n\nassert solution(\"1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == 4"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\n\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\n\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\n\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\n\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\") == \"4\"\nassert solution(\"3\\n1 1 2\") == \"0\"\nassert solution(\"5\\n1 0 0 0 2\\n2 3\") == \"4\"\nassert solution(\"5\\n1 0 0 0 2\\n2 3\\n2 4\\n3 5\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\n\n\"\"\"\n\n\n\nimport sys\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1 2\\n') == ''\nassert solution('1 2 3\\n') == ''\nassert solution('1 2 3 4\\n') == ''\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 1\\n2 3\\n2 4\\n2 5\\n\") == '1'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n2 4\\n2 5\\n\") == '4'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == '0'\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\n\"\"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\naz\\nbf\") == \"bc\"\nassert solution(\"5\\nafogk\\nasdji\") == \"alvuw\"\nassert solution(\"6\\nnijfvj\\ntvqhwp\") == \"qoztvz\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"alvuw\"\nassert solution(\"nijfvj\") == \"qoztvz\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('afogk') == 'alvuw'\nassert solution('asdji') == 'qoztvz'\nassert solution('nijfvj') == 'tvqhwp'\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"zv\") == \"b\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"afogk\") == \"qxugw\"\nassert solution(\"asdji\") == \"ijvtu\"\nassert solution(\"abc\") == \"abc\"\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/525f3eda17c7cd9f9e000b39/train/python\n\nYou are given two strings, $s$ and $t$. String $s$ is said to be a predecessor of $t$ if the set of letters of $s$ is a subset of the corresponding letters of $t$. You are required to print the longest possible length of the substring of $s$ that is a predecessor of $t$. If there are no such possible substrings of $s$ then print -1.\n\nInput Format:\n\nThe first line of the input contains T, the number of test cases.\n\nThe first line of the test case will contain a single string, $t$\n\nThe second line of the test case will contain a single string, $s$\n\nConstraints:\n\n1<= T <= 100\n\n1 <= |t|, |s| <= 10^6\n\nThe letters of each string will be lowercase.\n\nOutput Format:\n\nFor every test case, print the length of the longest possible substring of $s$ that is a predecessor of $t$. Print -1 if there is no such possible sub-string.\n\nSample Input 0\n\n2\nabc\naabc\n\nSample Output 0\n\n2\n3\n\nSample Input 1\n\n2\na\nb\n\nSample Output 1\n\n-1\n1\n\nSample Input 2\n\n1\nabba\n\nSample Output 2\n\n4\n\"\"\""
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\n\nassert solution(\"az\", \"afogk\") == \"bf\"\nassert solution(\"bf\", \"afogk\") == \"bc\"\n\nassert solution(\"az\", \"asdji\") == \"alvuw\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"nijfvj\") == \"qoztvz\"\nassert solution(\"asdji\") == \"alvuw\"\nassert solution(\"vqhwp\") == \"qoztvz\"\n\nprint(solution(\"afogk\"))\nprint(solution(\"asdji\"))\nprint(solution(\"tvqhwp\"))\n\n\"\"\"\n\n\n\"\"\"\nO(n) runtime, O(n) space\nhttps://leetcode.com/problems/median-of-two-sorted-arrays/discuss/323540/Python-easy-to-understand-solution-with-detailed-explanation\n\nmedian = (n+m+1) / 2 = (n+m) / 2 + 1\nmedian is the element on index (n+m) / 2 if it exists.\n\nIf we sort these two arrays, we know that the median is somewhere between\nthe two elements on the median index, the element on index (n+m) / 2 if it exists.\nIf we sort the two arrays in ascending order, the element on index (n+m) / 2 is the median.\n\nIn short:\n\nSorting the two arrays will give us one sorted array.\nWe know that the median is somewhere between the two elements on index (n+m) / 2 if it exists.\nIf the length of one of the arrays is 0, we know that the median is the non-empty array.\nTherefore, the median will be the element on index (n+m) / 2 if it exists.\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\n\n\"\"\"\n\n\"\"\"\n-----Solution-----\n\nI will look for all possible solutions, since there can be multiple answers.\n\nI will iterate over all possible team sizes.\n\nFor each team size, I will iterate over all possible teams of that size.\n\nI will iterate over all possible combinations of students in a team.\n\nI will remove impossible combinations.\n\nTime complexity: O(n^2*k), since there can be maximum of k different combinations.\n\nSpace complexity: O(n^2*k), since I have to store at most n^2*k numbers.\n\n\"\"\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\\n\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\\n\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\\n\") == \"YES\\n1 2 3 4\"\n\"\"\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == 'YES\\n1 2 5'\nassert solution(\"5 4\\n15 13 15 15 12\") == 'NO'\nassert solution(\"4 4\\n20 10 40 30\") == 'YES\\n1 2 3 4'\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n15 13 15 15 12') == 'YES\\n1 2 5'\nassert solution('5 4\\n15 13 15 15 12') == 'NO'\nassert solution('4 4\\n20 10 40 30') == 'YES\\n1 2 3 4'\n\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().strip().split())\narr = list(map(int, sys.stdin.readline().strip().split()))\n\narr.sort()"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n15 13 15 15 12') == 'YES\\n1 2 5'\nassert solution('4 4\\n20 10 40 30') == 'YES\\n1 2 3 4'\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\\n\") == \"YES\\n1 2 5\"\nassert solution(\"4 4\\n20 10 40 30\\n\") == \"YES\\n1 2 3 4\"\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n\"\"\"\n\n\"\"\"\nThe goal in this problem is to write the lowest possible code that checks whether it is possible to form a team of students of specified size such that all students in this team have different grades.\n\n\n\n-----------------------\n\nYou have been given an array of integers representing grades for $n$ students. You want to form a team of students of a specified size ($k$) such that all members of this team have different grades. If it is impossible to form a team of desired size, print 'NO' (without quotes). Otherwise, print 'YES', and then print $k$ integers, where the $i$-th integer is the index of the student from the beginning of the array who belongs to the $i$-th team. If there are multiple answers, print any of them.\n\nFor example, if you are given array $[4, 4, 2, 2, 4, 4, 2, 2]$, and $k$ = 3, then you should print:\n\nNO\n\nbecause there is no way to choose $3$ students from the array so that all their grades are different.\n\nOn the other hand, if $k = 4$ and array $[4, 4, 2, 2, 4, 4, 2, 2]$, then you should print:\n\nYES\n\n4 4 4 2 2 \n\nbecause you can choose students 1, 2, 4 and 5 to form a team of size 4.\n\nOn the other hand, if $k = 2$ and array $[4, 4, 2, 2, 4, 4, 2, 2]$, then you should print:\n\nNO\n\nbecause there is no way to choose $2$ students from the array so that all their grades are different.\n\nOn the other hand, if $k = 3$ and array $[4, 4, 2, 2, 4, 4, 2, 2]$, then you should print:\n\nNO\n\nbecause there is no way to choose $3$ students from the array so that all their grades are different.\n\n\n\n-----------------------\n\nInput\nThe first line contains two integers $n$ and $k$ (1\u2264$k$\u2264$n$\u2264100) \u2014 the number of students and the desired size of a team.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ (1\u2264$a_i$\u2264100) \u2014 grades for $n$ students.\n\n\nOutput\nIf it is impossible to form a team of size $k$ such that all its members have different grades, print \"NO\" (without quotes). Otherwise, print \"YES\", and then print $k$ distinct integers from $1$ to $n$ which should be the indices of students in the team you form. If there are multiple answers, print any of them.\n\n\n\n\"\"\""
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == \"NO\"\nassert solution('a') == \"YES\"\nassert solution('a\\n1\\n2\\n3\\n') == \"NO\"\nassert solution('a\\n1\\n2\\n3\\n0\\n') == \"NO\"\nassert solution('a\\n1\\n2\\n3\\n0\\n') == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9\\n5 1 3 6 8 2 9 0 10') == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution('4\\n2 1 3 0') == 'NO\\n0 0 0 1'\nassert solution('7\\n1 2 3 0 4 5 6') == 'YES\\n0 1 0 1 1 1 1 1'\nassert solution('7\\n3 2 1 0 4 5 6') == 'YES\\n0 1 1 1 1 1 1 1'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"4\\n4 1 1 1\") == \"NO\"\nassert solution(\"7\\n5 0 1 2 2 1 3\") == \"YES\\n0 1 1 1 1 0 0 1\"\nassert solution(\"10\\n1 1 1 2 2 2 2 2 3 3 3\") == \"NO\"\nassert solution(\"4\\n4 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 5 6 2\\n\") == \"YES\\n1 1 1 0 1\"\nassert solution(\"7\\n1 2 3 4 5 6 7\\n\") == \"NO\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\\n\") == \"YES\\n1 1 1 0 1 0 1 1 0 1\"\nassert solution(\"10\\n10 9 8 7 6 5 4 3 2 1\\n\") == \"YES\\n1 1 1 0 1 0 1 1 0 1\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\n\"\"\""
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"4\\n2 1 3 4\") == \"NO\\n0 1 1 1\"\nassert solution(\"5\\n1 2 4 0 2\") == \"NO\\n0 1 1 1\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"YES\\n0 0 0 0 1 1 1\"\n\"\"\"\n\n\nimport re\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == 'YES\\n1 0 0 0 0 1 0 1 0'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 8 9 10 11 12 13 14 15\") == \"NO\"\nassert solution(\"2 1 5 3 4\") == \"YES\"\nassert solution(\"8 7 10 10 1 5 3 4\") == \"YES\"\nassert solution(\"3 1 5 10 2 4\") == \"NO\"\nassert solution(\"1 2 4 3\") == \"YES\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\n\"\"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\nprint(solution(\"5\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\"))\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2 3 7\") == \"3\"\nassert solution(\"100 51 51 51\") == \"0\"\nassert solution(\"1234 1 100 199\") == \"1134\"\nassert solution(\"1000000000 1 1 1000000000\") == \"0\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 2 3 7') == '3'\nassert solution('100 51 51 51') == '0'\nassert solution('1234 1 100 199') == '1134'\nassert solution('1000000000 1 1 1000000000') == '0'\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '3\\n0\\n1134\\n0'\nassert solution('4\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '0\\n0\\n1134\\n0'\nassert solution('4\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '0\\n0\\n1134\\n0'\nassert solution('4\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '0\\n0\\n1134\\n0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\"\"\") == \"3\\n0\\n1134\\n0\"\nassert solution(\"\"\"4\n1 10 50 4\n12345 3 7 9\n1234 1 100 199\n1000000000 1 1 1000000000\n\"\"\") == \"0\\n0\\n1134\\n0\"\nassert solution(\"\"\"4\n1 10 50 4\n12345 3 7 9\n1234 1 100 199\n1000000000 1 1 1000000000\n\"\"\") == \"0\\n0\\n1134\\n0\"\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 2 3 4\\n1 1 2 4\\n1 2 1 2\\n1 2 2 3\\n1 2 2 3\\n') == '3'\nassert solution('3\\n1 2 3\\n1 1 2\\n') == '0'\n\n-----Notes-----\n\nYou are supposed to output $t$ integers in the sequence.\n\"\"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '3\\n0\\n1134\\n0'\n\"\"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2 3 5 7\\n1 1 1 1\\n2 1 1 1\") == '3\\n0\\n1\\n0'\nassert solution(\"1\\n3 1 5 1\\n2 2 2 2\\n2 2 2 2\") == '3\\n0\\n1\\n0'\nassert solution(\"1\\n1 1 1 1\\n2 2 2 2\\n2 2 2 2\") == '0\\n0\\n0'\nassert solution(\"1\\n1 1 1 1\\n1 1 1 1\") == '0\\n0\\n0'\nassert solution(\"1\\n2 2 2 2\\n1 1 1 1\") == '1\\n0\\n1'\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '''3\n0\n1134\n0'''\n\n\"\"\"\n\nfrom math import gcd\nfrom collections import Counter"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n\nprint('Hooray!')\n\n\"\"\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n\") == \"1\"\nassert solution(\"4\\n\") == \"3\"\nassert solution(\"8\\n\") == \"1260\"\n\"\"\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n') == '1'\nassert solution('4\\n') == '3'\nassert solution('8\\n') == '1260'\nassert solution('20\\n') == '12164510040883200'\nprint('The local tests are done. Click on \"Check\" for more details about testing.')\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\nassert solution(\"20\") == \"12164510040883200\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n\") == \"1\"\nassert solution(\"4\\n\") == \"3\"\nassert solution(\"8\\n\") == \"1260\"\nassert solution(\"20\\n\") == \"12164510040883200\"\nassert solution(\"2\\n\") == \"1\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\nassert solution(\"20\") == \"12164510040883200\"\n\"\"\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '3'\nassert solution('2') == '1'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n\"\"\"\n\nimport math\nfrom math import factorial\nfrom functools import reduce"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n') == '1'\nassert solution('4\\n') == '3'\nassert solution('8\\n') == '1260'\nassert solution('20\\n') == '12164510040883200'\n\"\"\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '1'\nassert solution('4\\n') == '3'\nassert solution('8\\n') == '1260'\n\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    'cccaabababaccbc'\n) == 'cccbbabaccbc'\n\"\"\""
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == ''\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == \"\"\nassert solution(\"aabbccc\") == \"aaabbccc\"\nassert solution(\"aaaabbccc\") == \"aaaaaaaaa\"\nassert solution(\"aaaabccc\") == \"aaaaaaaaa\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == \"\"\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\"\"\""
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\"\"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n\"\"\""
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\nassert solution('u') == ''\n\"\"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aabbbccc\") == \"ccc\"\nassert solution(\"aabbcccc\") == \"\"\nassert solution(\"abccba\") == \"b\"\n\nprint(solution('aabbbccc'))\nprint(solution('aabbcccc'))\nprint(solution('abccba'))\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n\n\"\"\"\n\n\nimport sys\nimport os"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n') == 20\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '8'\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\nprint(solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\"))\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '8'\nassert solution('''\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n''') == '20'\n'''\n\n\n'''\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\nassert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n') == '20'\n\"\"\"\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\ns = [0] * n\nfor i in range(m):\n    d, t = map(int, input().split())\n    s[t - 1] = d\n\nc = 0\nj = 0\nfor i in range(n):\n    if s[i] == 0:\n        c += a[i]\n        j = i + 1\n    else:\n        break\n\ndp = [None] * (n + 1)\ndp[0] = 0\nfor i in range(j):\n    dp[i + 1] = c\n    for j in range(n):\n        if dp[i] >= s[j] and s[j] >= 0:\n            dp[i + 1] = min(dp[i + 1], dp[i] + a[j])\n\nprint(dp[-1])\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_data) == test_result\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_DATA = [line for line in INPUT_LINES]\ndata = {\n    'n': int(INPUT_DATA[0].split(' ')[0]),\n   'm': int(INPUT_DATA[0].split(' ')[1]),\n    'k': [int(x) for x in INPUT_DATA[1].split(' ')],\n    'd': [int(x) for x in INPUT_DATA[2:2+m]],\n    't': [int(x) for x in INPUT_DATA[2+m:]]\n}\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '8'\nprint(solution(input()))\n\n'''\n[hint: https://tproger.ru/translations/algorithms/choproject-1]\n'''\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5 1 2 0 2 0\") == \"2\"\nassert solution(\"4 2 1 3 2\") == \"6\"\nassert solution(\"4 3 1 3 2\") == \"11\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n.*\\n.*\\n.*\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\n\"\"\"\n\n\n\nclass Solution:\n    def solution(self, input: str) -> str:\n        data = input.split(\"\\n\")\n        n, m = map(int, data[0].split())\n        grid = [[i for i in j] for j in data[1:]]\n\n        def dfs(i, j, visited):\n            if grid[i][j] == \"*\" or (i, j) in visited:\n                return\n            visited.add((i, j))\n            for k, l in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n                if 0 <= k < n and 0 <= l < m and grid[k][l] == \"*\" and (k, l) not in visited:\n                    dfs(k, l, visited)\n\n        stars = set()\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == \"*\":\n                    dfs(i, j, set())\n                    stars.add(len(stars) + 1)\n\n        if not stars:\n            return \"-1\"\n        return \" \".join(map(str, stars))\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".**...****\") == \"3 4 1\"\nassert solution(\"**..***\") == \"3 4 1\"\nassert solution(\"*******\") == \"3 4 1\"\nassert solution(\"*******\") == \"3 4 1\"\nassert solution(\"**.......\") == \"2 2 1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n.*\\n.*\\n*.\") == \"3\"\nassert solution(\"5 5\\n.*\\n.*\\n.*\\n.*\\n.*\") == \"2\"\nassert solution(\"3 3\\n.*\\n.*\\n.*\") == \"-1\"\nassert solution(\"3 3\\n.\\n.*\\n.*\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*\\n.*\") == \"3\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........''') == '''\n3\n3 4 1\n3 5 2\n3 5 1'''\n\nassert solution('''\n5 5\n.*...\n****.\n.****\n..**.\n.....''') == '''\n-1'''\n\nassert solution('''\n5 5\n.*...\n***..\n.*...\n.*...\n.....''') == '''\n-1'''\n\nassert solution('''\n3 3\n*.*\n.*.\n*.*''') == '''\n-1'''\n\nassert solution('''\n5 5\n.*...\n.*.\n*.*\n.*...\n.....''') == '''\n-1'''\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n.*\\n.*\\n.*\\n\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"3 3\\n.*\\n.*\\n.*\\n\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"5 5\\n.*\\n.*\\n.*\\n.*\\n.*\\n\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"5 5\\n.*\\n.*\\n.*\\n.*\\n.*\\n\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"3 3\\n.*\\n.*\\n.*\\n\") == \"-1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n.*\\n.*\\n.*') == '-1'\nassert solution('5 5\\n.*\\n.*\\n.*\\n.*\\n.*') == '-1'\nassert solution('5 5\\n.*\\n.*\\n.*\\n.*\\n.*') == '3'\nassert solution('5 5\\n***\\n***\\n***\\n***\\n***') == '3'\nassert solution('5 5\\n**.\\n**.\\n**.\\n**.\\n**') == '2'\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5') == '-1'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '3\\n2 2 1\\n3 3 1'\nassert solution('3 3\\n*.*\\n.*.\\n*.*') == '-1'\nassert solution('3 3\\n.*.*\\n.*.\\n*.*') == '2\\n2 2 1'\nassert solution('3 3\\n*.*\\n.*.\\n*.*\\n*.*') == '3\\n3 3 1\\n3 4 1'\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n.*\\n.*\\n.*') == 3\nassert solution('5 5\\n.*\\n.*\\n.*\\n.*') == -1\nassert solution('5 5\\n.*\\n.*\\n.*\\n.*') == -1\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"555\") == \"Yes\"\n\n-----Test Case 1-----\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('575') == 'Yes'\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(0) == \"Yes\"\nassert solution(\"577\") == \"Yes\"\nassert solution(\"123\") == \"No\"\nassert solution(\"333\") == \"No\"\nassert solution(\"124\") == \"No\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('575') == 'Yes'\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"10\") == \"No\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('876') == 'Yes'\nassert solution('89') == 'No'\nassert solution('222') == 'Yes'\nassert solution('111') == 'Yes'\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('575') == \"Yes\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"101\") == \"No\"\nassert solution(\"1010\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"5\") == \"No\"\nassert solution(\"9\") == \"Yes\"\nassert solution(\"912\") == \"No\"\nassert solution(\"101\") == \"Yes\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4\\n') == 'Alice'\nassert solution('8 6\\n') == 'Bob'\nassert solution('8 6\\n') == 'Draw'\nassert solution('2 2\\n') == 'Draw'\nassert solution('3 4\\n') == 'Draw'\n\nimport sys"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('7 8') == 'Bob'\nassert solution('4 6') == 'Draw'\n\"\"\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 6\") == \"Alice\"\n\n\"\"\"\n\nimport unittest\nfrom unittest import mock\n\nfrom file_reader import FileReader\n\nclass Test_Exercise1(unittest.TestCase):\n    def test_1(self):\n        with mock.patch(\"builtins.open\", mock.mock_open(read_data=\n                                                        \"8 6\\n\"\n                                                        \"Alice\")) as m:\n            solution = FileReader('file_name.txt')\n            self.assertEqual(solution.file_reader(), \"Alice\")"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 6\") == \"Alice\"\n\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '8 6'\n) == 'Alice'\nassert solution(\n    '4 2'\n) == 'Bob'\nassert solution(\n    '5 9'\n) == 'Draw'\n\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"4 5\") == \"Bob\"\nassert solution(\"2 2\") == \"Draw\"\nassert solution(\"2 3\") == \"Alice\"\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 2\n3 4\n8 5\n9 6\n7 1''') == 'Bob'\nassert solution('''5 2\n9 7\n7 6\n3 4\n8 1''') == 'Alice'\nassert solution('''7 4\n5 8\n9 6\n3 2\n1 3''') == 'Draw'\nassert solution('''1 2\n9 7\n5 6\n3 4\n8 1''') == 'Alice'\nassert solution('''8 1\n7 2\n6 9\n4 5\n3 3''') == 'Draw'\n\n''''\n7 2\n3 4\n8 5\n9 6\n7 1\n\n8 is written on Alice's card, and 6 is written on Bob's card.\nAlice has the stronger card, and thus the output should be Alice.\n'''"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 6\") == \"Alice\"\n\nassert solution(\"2 1\") == \"Draw\"\n\nassert solution(\"1 2\") == \"Bob\"\n\"\"\"\n\nfrom collections import namedtuple\nfrom itertools import groupby\n\nPlayer = namedtuple(\"Player\", [\"card\", \"strength\"])"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 6\\n') == 'Alice'\nassert solution('8 1\\n') == 'Bob'\nassert solution('2 2\\n') == 'Draw'\nassert solution('2 1\\n') == 'Draw'"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('3 3') == 'Draw'\nassert solution('5 5') == 'Draw'\nassert solution('5 5') == 'Draw'\nassert solution('6 9') == 'Alice'\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"hello,world,goodbye\") == \"hello world goodbye\"\n\"\"\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\n-----Explanation-----\nWe can replace the comma with a space by looping over the string and replacing every, with a space.\n\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"\n\ns = input()\n\nprint(s.replace(',',''))\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(s) == answer\n\n\"\"\"\n\ns = stdin.split(\",\")\nprint(s)\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 2\n2 0\n0 0\n-1 0\n1 0''') == '2\\n1'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"2 2\\n0 0\\n-1 0\\n1 0\") == \"1\\n1\"\nassert solution(\"2 2\\n-1 0\\n1 0\") == \"1\\n1\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"3 2\\n1 1\\n1 -1\\n-1 1\") == \"2\\n2\"\nassert solution(\"4 2\\n1 1\\n1 -1\\n-1 1\\n-1 1\") == \"1\\n1\"\nassert solution(\"2 2\\n2 -2\\n0 0\\n-1 0\") == \"1\\n2\"\nassert solution(\"2 2\\n0 -2\\n0 0\\n-1 0\") == \"1\\n2\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n\") == \"2\\n1\"\nassert solution(\"3 4\\n3 -1\\n-1 0\\n1 1\\n\") == \"0\\n0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"2 2\\n1 1\\n2 1\") == \"2\\n1\"\nassert solution(\"3 3\\n3 -7\\n4 -1\\n-1 0\\n1 2\") == \"0\\n1\"\nassert solution(\"5 5\\n1 1\\n3 3\\n4 5\\n0 0\\n2 4\") == \"0\\n1\"\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n2 0\\n0 0\\n-1 0\\n1 0') == '2\\n1'\nassert solution('2 2\\n-2 0\\n0 0\\n-1 0\\n1 0') == '1\\n1'\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n2 0\\n0 0\\n-1 0\\n1 0') == '2\\n1'\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n\") == '2\\n1'\n\"\"\"\n\nfrom collections import namedtuple\n\nInput = namedtuple('Input', 'n m a b c d')"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '14'\n\"\"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == 14\n\"\"\"\n\n\"\"\"\nGiven an integer a as input, print the value of a + a^2 + a^3 +... + a^n, where n is a number entered by the user.\n\n-----Constraints-----\n - 1 \\leq a \\leq 10\n - a is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\na\n\n-----Output-----\nPrint the value of a + a^2 + a^3 +... + a^n, where n is a number entered by the user.\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\n16\n\nWhen a = 3, we have a + a^2 + a^3 +... + a^3 = 1 + 8 + 27 +... = 16.\nPrint the answer as an input. Outputs such as 16.0 will be judged as incorrect.\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(2) == 14\n\"\"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"14\"\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1) == 1\nassert solution(2) == 4\nassert solution(3) == 8\nassert solution(4) == 16\nassert solution(5) == 25\n\"\"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"14\"\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"14\"\n\"\"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '14'\n\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == '14'\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"14\"\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\nassert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n.\") == \"No\"\nassert solution(\"3 2\\n.#.\\n.#.\\n#.\\n#.\") == \"No\"\nassert solution(\"3 2\\n#.\\n#.\\n#.\\n.\") == \"Yes\"\nassert solution(\"3 2\\n#.\\n#.\\n#.\\n#.\") == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('.#.#\\n.#.#\\n#.##\\n#.##') == 'Yes'\n\n\"\"\"\n\nfrom __future__ import annotations\n\nclass Char:\n    def __init__(self, char: str):\n        self.char = char\n\n    def __eq__(self, other: Char) -> bool:\n        return self.char == other.char\n\n    def __repr__(self) -> str:\n        return self.char\n\n\nclass Pixel:\n    def __init__(self, char: Char):\n        self.char = char\n\n    def __repr__(self) -> str:\n        return self.char.__repr__()\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.\") == \"Yes\"\nassert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.#\\n.\") == \"No\"\n\"\"\"\n\n\"\"\"\nIn this problem, you have to compute the number of ways to fill a grid of size n x m with rectangles.\n\nThere are many ways to solve this problem. You can use dynamic programming to solve this problem. \n\nThe state of the grid is represented by a 2D array of boolean values, where true values correspond to rectangles. \n\nA rectangle of size s x t is represented by a 2D array of size s + 1 x t + 1, where the first and last rows and columns are filled with False values. \n\nThe rectangle of size s x t is filled with a rectangle if all of its cells are filled with rectangles. \n\nThe result is the number of ways to fill the grid.\n\nWrite a function:"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\") == \"Yes\"\nassert solution(\"3 2\\n#.#\\n.#.\") == \"Yes\"\nassert solution(\"3 2\\n#.#\\n.#.\") == \"Yes\"\n\nassert solution(\"2 3\\n..#\\n#.#\\n....\\n#..\\n#..\") == \"Yes\"\nassert solution(\"2 3\\n..#\\n#.#\\n....\\n#..\\n#..\") == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\n\"\"\"\nComplexity: O(M + N)\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.') == 'Yes'\nassert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.') == 'No'\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.#\") == \"Yes\"\nassert solution(\"4 3\\n#.#\\n.#.\\n#.#\\n#.#\\n#.#\") == \"No\"\nassert solution(\"4 4\\n....\\n...#\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\") == \"Yes\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\") == \"No\"\nassert solution(\"4 4\\n.#..\\n.#..\\n.#..\\n#...\\n.#..\\n.#..\\n.#..\\n.#..\\n#...\\n.#..\") == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 2\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3 2\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\nassert solution(\"3 2\\n.##\\n.#.\\n#.#\\n#.\") == \"No\"\nassert solution(\"3 2\\n#.#\\n#.\\n#.#\\n#.\") == \"No\"\nassert solution(\"3 2\\n#.\\n#.\\n#.\\n#.\") == \"Yes\"\nassert solution(\"3 2\\n#.\\n#.\\n#.\\n#.\") == \"No\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 5 2') == '53'\n\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n\na, b, c = map(int, stdin.read().split())\n\nprint(a * b * c)\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nprint(solution(\"1 5 2\"))\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nassert solution(\"3 3 4\") == \"16\"\nassert solution(\"2 3 2\") == \"3\"\n\"\"\"\nimport sys\n\nA, B, C = [int(x) for x in sys.stdin.readline().split()]\n\nprint(A + B + C - min(A, B, C))\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('. 1 2 3\\n4 5 6\\n7 8 9\\n+') == '27'\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 5 2') == '53'\n\"\"\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nassert solution(\"5 6 1\") == \"41\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"9 9 9\") == \"81\"\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\nassert solution(\"1\\n5980\\n6880\\n6980\") == \"4870\"\nassert solution(\"3\\n6980\\n7980\\n4980\") == \"15950\"\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\":\\n7\\n200\\n400\\n800\\n1600\\n3200\\n6400\") == \"16800\"\nassert solution(\":\\n1\\n20\\n200\") == \"80\"\nassert solution(\":\\n1\\n50\\n100\") == \"100\"\nassert solution(\":\\n1\\n100\\n1\") == \"101\"\nassert solution(\":\\n2\\n100\\n200\") == \"200\"\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\\n\") == \"15950\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2\\n10\\n100') == '200'\nassert solution('3\\n4980\\n7980\\n6980') == '15950'\n\n'''\n\nn = int(input())"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n4980\\n7980\\n6980') == '15950'\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"3\\n4980\\n7980\\n6980\"\n) == \"15950\"\nprint(\"Test finished.\")\n\n------OUTPUT-----\n> python -m unittest test_1.py\nTest finished.\n----------------------------------------------------------------------\nRan 1 test in 0.003s\n\nOK\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n4980\n7980\n6980''') == '15950'\nassert solution('''2\n100\n40\n''') == '200'\nassert solution('''1\n100\n''') == '100'\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1,2') == '2'\nassert solution('1,2,3') == '6'\nassert solution('1,2,3,4,5') == '15'\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n') == '14\\n'\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n4980\\n7980\\n6980') == '15950'\n\"\"\"\n\n\"\"\"\nSubmitted solution:"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('29\\n20\\n7\\n35\\n120') == '215'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\narr = []\nfor i in range(0, N):\n    arr.append(int(sys.stdin.readline()))\n\narr.sort()\nidx = N - 1\nwhile idx > 0:\n    if arr[idx] % 10!= 0:\n        print(arr[idx - 1] + (arr[idx] - arr[idx - 1]) * 10)\n        break\n    idx -= 1\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\"\"\"\n\nimport math\nimport typing"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n'''29\n20\n7\n35\n120''') == '215'\n\nassert solution(\n'''21\n1\n1\n1\n1''') == '0'\n\nassert solution(\n'''1\n1\n1\n1\n1''') == '0'\n\nassert solution(\n'''4\n4\n2\n2\n1''') == '7'\n\nassert solution(\n'''1\n2\n2\n2\n1''') == '0'"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\n\"\"\"\n\nimport math\nfrom typing import Iterable\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\n\nA, B, C, D, E = [int(i) for i in stdin.split()]"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('29\\n20\\n7\\n35\\n120') == '215'\n\"\"\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('29 20 7 35 120') == '215'\n\"\"\"\n\na, b, c, d, e = map(int, stdin.split())\n\nprint(min(max(0, a), max(0, b), max(0, c), max(0, d), max(0, e)))\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 30\") == \"7.5\"\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\n\"\"\"\n\nfrom math import gcd\nimport sys"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\n\"\"\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 30\") == \"7.5\"\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 30\\n\") == \"7.5\"\nassert solution(\"1\\n10\\n\") == \"0.1\"\n\"\"\"\nimport math"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 30\\n') == '7.5'\nassert solution('10 30\\n') == '7.5'\nassert solution('100 30\\n') == '7.5'\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n10 30\") == '7.5'\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 30\") == \"7.5\"\nassert solution(\"4 4\") == \"0.25\"\nassert solution(\"8 28\") == \"2.5\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 30\") == \"7.5\"\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n10 15 11 14 12\") == 2\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n5 3\n10\n15\n11\n14\n12\n''') == '2'\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12') == '2'\n\"\"\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\n\"\"\"\nimport math"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\nassert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n9\") == \"4\"\nassert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n13\") == \"3\"\nassert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n13\\n2\") == \"1\"\nassert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n13\\n4\") == \"0\"\n\n\"\"\"\n\nN, K = map(int, stdin.readline().split())\n\ntree = []\nfor i in range(K):\n    tree.append(int(stdin.readline()))\ntree.sort()\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\nprint(solution(\"5 3\\n10\\n15\\n11\\n14\\n12\"))\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12\\n') == '2'\nprint(solution('5 3\\n10\\n15\\n11\\n14\\n12\\n'))\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n\") == \"2\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12') == '2'\n\"\"\"\n\nn, k = [int(num) for num in input().split(' ')]\n\ndata = []\nfor _ in range(n):\n    data.append(int(input()))\n\ndata.sort()\n\nmax_h = data[-1]\nmin_h = data[0]\n\nprint(max_h - min_h)"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"b\") == \"A\"\n\"\"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('A') == 'a'\nassert solution('B') == 'A'\nassert solution('C') == 'c'\nassert solution('D') == 'd'\nassert solution('E') == 'e'\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"B\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"Bb\") == \"A\"\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"B\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"A\") == \"A\"\n\"\"\"\n\nimport sys\nimport re\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('B') == 'A'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(A) == \"A\"\nassert solution(B) == \"a\"\n\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a') == 'a'\nassert solution('A') == 'A'\nassert solution('B') == 'A'\n\"\"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a') == 'a'\nassert solution('b') == 'A'\n\"\"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin='B') == 'A'\n\"\"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"B\") == \"A\"\nassert solution(\"b\") == \"a\"\nassert solution(\"C\") == \"C\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '3'\nassert solution('2 2') == '1'\nassert solution('2 1') == '2'\nassert solution('3 1') == '3'\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(sys.stdin.read())) == str(sys.stdin.read())\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"6\"\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"6\"\n\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n') == '6'\nassert solution('2 1\\n') == '0'\nassert solution('1 1\\n') == '0'\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"6\"\nprint(solution(input()))\n\n----"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n') == '6'\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2 2\n''') == \"6\"\nassert solution('''\n2 3\n''') == \"0\"\nassert solution('''\n3 1\n''') == \"0\"\nassert solution('''\n3 2\n''') == \"1\"\nassert solution('''\n3 3\n''') == \"1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('0619') == 'MMYY'\nassert solution('061906') == 'AMBIGUOUS'\nassert solution('051906') == 'YYMM'\nassert solution('190619') == 'YYMM'\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1905') == 'YYMM'\n\n---\n\nMy Solution:\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1803\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\nassert solution(\"1803\") == \"YYMM\"\nassert solution(\"1903\") == \"YYMM\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905XX\") == \"AMBIGUOUS\"\nassert solution(\"1905XX\") == \"AMBIGUOUS\"\nassert solution(\"1905XXXX\") == \"NA\"\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('190520') == 'AMBIGUOUS'\nassert solution('190521') == 'MMYY'\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1905XX') == 'AMBIGUOUS'\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\")!= \"YYMM\"\nassert solution(\"1905\")!= \"MMYY\"\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1906') == 'MMYY'\nassert solution('190619') == 'AMBIGUOUS'\nassert solution('190519') == 'NA'\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n') == '2'\nassert solution('3\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n\") == \"2\\n\", \"Test 1 Failed\"\nassert solution(\"5\\n\") == \"4\\n\", \"Test 2 Failed\"\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '3'\nassert solution('3') == '2'\nassert solution('2') == '1'\nprint('Test pass.')\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n\") == 2\nprint(solution(\"3\\n\"))\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '2'\nassert solution('4') == '6'\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == 2\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 12\") == \"21\"\n\n\"\"\"\n\nfrom utils.exceptions import TimeLimitException\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"9 12\") == \"21\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nA, B = map(int, input().split())\n\nhour = (24 + B) % 24\n\nprint(hour)\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 12') == '21'\n\"\"\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9 12') == '21'\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9 12') == '21'\n\n---\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n\nimport sys\n\nt, a, b = map(int, sys.stdin.readline().rstrip().split())"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9 12\\n') == '21'\n\n-------Solution---------\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9 12\\n') == '21'\nassert solution('9 0\\n') == '9'\n\"\"\"\n\nimport sys\n\nfrom typing import Tuple\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom typing import Optional\n\n\n@dataclass\nclass Time:\n    hour: int\n    minute: int\n    second: int\n\n    def to_seconds(self) -> int:\n        return 3600 * self.hour + 60 * self.minute + self.second\n\n    def __add__(self, other):\n        if isinstance(other, Time):\n            return Time(\n                self.hour + other.hour,\n                self.minute + other.minute,\n                self.second + other.second,\n            )\n        raise TypeError(\"Not a Time object\")\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2919\") == \"3719\"\nassert solution(\"1 100\") == \"100\"\nassert solution(\"3 10\") == \"90\"\nassert solution(\"3 100\") == \"90\"\nassert solution(\"10 3\") == \"90\"\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n2 2919\n''') == '3719'\nassert solution('''\n10 5494\n''') == '5494'\nassert solution('''\n10 4087\n''') == '4087'\nassert solution('''\n10 9371\n''') == '9371'\nassert solution('''\n10 10592\n''') == '10592'\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"\n\nN, R = map(int, input().split())"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2919\") == \"3719\"\nprint(solution(\"2 2919\"))\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2919') == '3719'\nassert solution('2 2919') == '3719'\nassert solution('1 2919') == '3719'\nassert solution('0 2919') == '3719'\nassert solution('100 0') == '0'\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 7\") == \"12\"\nassert solution(\"7 6\") == \"28\"\n\"\"\"\n\nN, R = stdin.split(\" \")\nN, R = int(N), int(R)"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2919\\n\") == \"3719\"\n\"\"\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 2\") == 4\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 2') == '4'\n\n-------\n11: 1011\n3: [1, 0, 1]\n2: [0, 1, 1]\n1: [0, 0, 1]\n0: [0, 0, 0]\n\n'''"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 2') == 4\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 2\") == 4\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 2\") == 4\n\"\"\"\n\nfrom unittest import TestCase\n\n\nclass Solution:\n    def base_k(self, n, k):\n        assert k > 1\n        res = 0\n        for i in str(n):\n            res += int(i)\n        return res\n\n\nclass TestSolution(TestCase):\n    def test_solution(self):\n        assert Solution().base_k(11, 2) == 4\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(11, 2) == 4\n\n---\n\nWrite 5 lines of code to test the correctness of solution:\nGiven is an integer N. Find the number of digits that N has in base K.\n\n-----Notes-----\nFor information on base-K representation, see Positional notation - Wikipedia.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^9\n - 2 \\leq K \\leq 10\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\n\n-----Output-----\nPrint the number of digits that N has in base K.\n\n-----Sample Input-----\n11 2\n\n-----Sample Output-----\n4\n\nIn binary, 11 is represented as 1011."
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11 2') == '4'\nprint(solution(stdin))\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 2\") == \"4\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == '3'\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == '3'\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"\n\nN = input()\nprint(int(N)//2)\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(5) == 3\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n\") == '3'\nassert solution(\"2\\n\") == '1'\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4') == 'Yay!'\nassert solution('5 4') == 'Yay!'\nassert solution('3 10') == 'Yay!'\nassert solution('5 10') == 'Yay!'\nassert solution('1 1') == 'Yay!'\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n-----Notes-----\n - 1 <= A, B <= 16\n\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\nassert solution(\"8 3\") == \"Yay!\"\nassert solution(\"1 1\") == \"Yay!\"\nassert solution(\"4 7\") == \"Yay!\"\nassert solution(\"3 10\") == \"Yay!\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1\\n') == 'Yay!'\nassert solution('4 16\\n') == 'Yay!'\nassert solution('3 2\\n') == ':(\nassert solution('10 10\\n') == ':(\n\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\") == \"Yay!\"\nassert solution(\"3 5\") == \"Yay!\"\nassert solution(\"5 4\") == \"Yay!\"\nassert solution(\"5 7\") == \"Yay!\"\nassert solution(\"3 7\") == \"Yay!\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 4\\n') == 'Yay!'\n\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4\\n') == 'Yay!'\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\") == \"Yay!\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1234567876') == '34'\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str) == str\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1234567876') == '34'\nassert solution('1234') == '0'\nassert solution('12121212') == '0'\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1234567876') == '34'\n\"\"\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1234567876') == '34'\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n\ns = input()\nd = []\nfor i in range(len(s)-3):\n    if s[i]!= s[i+1] and s[i]!= s[i+2] and s[i]!= s[i+3]:\n        d.append(s[i+1])\n        d.append(s[i+2])\n        d.append(s[i+3])\n        break\n\nprint(int(d[0])*100+int(d[1])*10+int(d[2]))\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1234567876\") == \"34\"\nassert solution(\"1234567876\") == \"34\"\nassert solution(\"1234567876\") == \"34\"\nassert solution(\"1234567876\") == \"34\"\nassert solution(\"1234567876\") == \"34\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1234567876) == 34\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 9\") == \"1 7\"\n\nassert solution(\"3 12 6\") == \"5 3\"\n\nassert solution(\"7 2 1000000000 4 6 8 4 2\") == \"2999999987 2\"\n\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 52 0 13 26 52\") == \"12 13\"\n\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n3 12 6''') == '5 3'\nassert solution('''2\n2 9''') == '1 7'\nassert solution('''7\n13 52 0 13 26 52''') == '12 13'\nassert solution('''6\n13 52 0 13 26 52''') == '2999999987 2'\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\n\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 12 6\\n\") == \"5 3\"\n\nassert solution(\"2 9\\n\") == \"1 7\"\n\nassert solution(\"7 13 52 0 13 26 52\\n\") == \"12 13\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 52 0 13 26 52') == '12 13'\nassert solution('6 13 52 0 13 26 52') == '12 13'\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 9\\n2 9\") == \"1 7\"\nassert solution(\"6\\n13 52 0 13 26 52\") == \"12 13\"\nassert solution(\"7\\n13 52 0 13 26 52\") == \"2999999987 2\"\n\n\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 12 6\\n\") == \"5 3\"\nassert solution(\"2 9\\n\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\\n\") == \"12 13\"\n\n\"\"\"\n\nimport sys\nimport os\nimport time\n\nstdin = sys.stdin\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 1 4 1\\n\") == 3\n\"\"\""
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n3 1 4 1\n''') == '3'\n\nassert solution('''3\n1 1 1\n''') == '1'\n\nassert solution('''5\n1 1 1 2 2\n''') == '2'\n\nassert solution('''5\n2 1 1 2 2\n''') == '4'\n\nassert solution('''5\n1 1 1 2 2\n''') == '4'"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 4 1\\n\") == 3\n\"\"\""
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '0'\nassert solution('4\\n1 1 4 1\\n') == '3'\nassert solution('3\\n1 1 1\\n') == '1'\nassert solution('5\\n1 1 1 2 2\\n') == '2'\nassert solution('2\\n1 1\\n') == '1'\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 4 1\\n') == '3'\nassert solution('3\\n1 1 1\\n') == '1'\nassert solution('5\\n1 1 1 2 2\\n') == '2'\nassert solution('4\\n1 1 4 1\\n') == '3'\nassert solution('3\\n1 1 1\\n') == '1'\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1 4 1') == '3'\nassert solution('3\\n1 1 1') == '1'\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 4 1\\n\") == \"3\"\nassert solution(\"3 1 4 1\\n\") == \"2\"\nassert solution(\"5 1 1 2 2\\n\") == \"1\""
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 1 4 1') == '3'\nassert solution('3\\n1 1 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"4\\n3 1 4 1\"\n) == \"3\"\nassert solution(\n    \"5\\n1 1 1 2 2\"\n) == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 1 2\\n') == '2'\n\"\"\""
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n1 2') == '2\\n1 2'\n\"\"\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == 2\nassert solution(\"3 2\\n1 3\\n2 3\") == 2\nassert solution(\"3 2\\n1 3\\n2 3\\n3 4\") == 2\nassert solution(\"3 2\\n1 3\\n2 3\\n3 4\\n4 5\") == 2\nassert solution(\"3 2\\n1 3\\n2 3\\n3 4\\n4 5\\n5 6\") == 3\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n2 3') == '2'\nassert solution('3 2\\n1 3') == '2'\nassert solution('4 2\\n1 3') == '2'\nassert solution('1 3\\n2 4') == '2'\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 2\n1 2\n2 3''') == \"2\"\nassert solution('''4 2\n1 2\n3 4''') == \"2\"\nassert solution('''3 2\n1 3\n2 3''') == \"2\"\nassert solution('''3 2\n1 3\n2 3\n1 2''') == \"1\"\nassert solution('''5 1\n3 4''') == \"2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('2 0\\n') == '1'\nassert solution('3 2\\n1 3\\n2 3') == '2'\n\nimport collections"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n\nimport sys\nimport queue\nfrom collections import defaultdict\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2\\n4 2\\n'\nassert solution('2 0') == '1\\n1 2\\n'\nassert solution('3 2\\n1 3\\n2 3') == '2\\n'\nassert solution('3 2\\n1 3\\n2 3\\n') == '2\\n'\nassert solution('4 2\\n1 3\\n2 4') == '2\\n4 2\\n'\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 2\\n2 3\") == \"2\"\n\nassert solution(\"1 2\\n2 3\") == \"1\"\nassert solution(\"2 2\\n1 2\") == \"1\"\n\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"3 2\\n1 3\\n3 2\") == \"2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '1'\nassert solution('1\\n') == '1'\nassert solution('2\\n1 2\\n') == '2'\nassert solution('2\\n1 2\\n2 3\\n') == '2'\nassert solution('2\\n1 2\\n2 3\\n2 4\\n') == '3'\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\\n\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n\n\nimport sys"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\n\"\"\"\nfrom collections import deque, defaultdict\nfrom typing import DefaultDict\n\n\nclass TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.children = []\n        self.parent = None\n\n    def add_child(self, child):\n        child.parent = self\n        self.children.append(child)\n\n    def __str__(self):\n        return str(self.data)\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\nassert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n') == '4'"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5') == '11'\n\n\"\"\"\n\nn, k = map(int, input().split())\n\nweights = list(map(int, input().split()))\n\nedges = []\n\nfor i in range(n - 1):\n    edges.append(list(map(int, input().split())))\n\nmax_weight = 0\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        if weights[i] == weights[j]:\n            continue\n        if abs(i - j) <= k:\n            continue\n        \n        edge = [i, j]\n        weight = weights[i] + weights[j]\n        \n        edges_left = [k for k in range(n) if k not in edge]\n        \n        for left in edges_left:\n            edge_l = [i, left]\n            edge_r = [j, left]\n            \n            edge_l_weight = weights[i] + weights[left]\n            edge_r_weight = weights[j] + weights[left]\n            \n            if edge_l_weight == weight or edge_r_weight == weight:\n                continue\n            if abs(i - left) <= k and abs(j - left) <= k:\n                continue\n            \n            if edge_l_weight > weight and edge_r_weight > weight:\n                weight = edge_l_weight\n                edge = edge_l\n            if edge_l_weight < weight and edge_r_weight < weight:\n                weight = edge_r_weight\n                edge = edge_r\n            \n        edges.append(edge)\n        \n        if weight > max_weight:\n            max_weight = weight\n\nprint(max_weight)\n\n\"\"\"\n5 1\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5\n\n5 1\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5\n\n\"\"\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\nassert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n') == '4'"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5') == '11'\nassert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4') == '4'\n\nprint('The local tests are done. Click on \"Check\" for more cases.')\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.read()"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 1\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5''') == '11'\n\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n\") == \"11\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a) == b\nprint(solution(input))\n\n------\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5\n\n11\n3 1 2 5 4\n\n\n\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5\n\n6 4\n1 5\n3 1\n2 3\n7 5\n7 4\n\n4\n\n\n\n3 1 2 5 4\n1 2\n2 3\n3 4\n3 5\n\n11\n\"\"\"\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 2 1 2 1 1\") == 11\n\"\"\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == 11\n\n\"\"\""
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 6\n10 15 12\n1 9 12 23 26 37\n''') == \"\"\"1 1\n1 9\n2 2\n2 13\n3 1\n3 12\"\"\"\n\nassert solution('''2 3\n5 10000000000\n5 6 9999999999\n''') == \"\"\"1 5\n2 1\n2 9999999994\"\"\"\n\"\"\"\n\nimport unittest\nimport unittest.mock\nimport io\nimport sys\n\n\nclass TestAbs(unittest.TestCase):\n    def test_case_1(self):\n        with unittest.mock.patch('builtins.input', side_effect=[\"3 6\", \"10 15 12\", \"1 9 12 23 26 37\"]):\n            with unittest.mock.patch('sys.stdout', new=io.StringIO()) as fake_out:\n                solution()\n                sys.stdout = sys.__stdout__\n                out = fake_out.getvalue()\n                expected = \"1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12\\n\"\n                self.assertEqual(out, expected)\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\nassert solution('2 3\\n5 10000000000\\n5 6 9999999999') == '1 5\\n2 1\\n2 9999999994'\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\n\"\"\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 6\n10 15 12\n1 9 12 23 26 37''') == '''1 1\n1 9\n2 2\n2 13\n3 1\n3 12'''\n\nassert solution('''2 3\n5 10000000000\n5 6 9999999999''') == '''1 5\n2 1\n2 9999999994'''\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\nassert solution('2 3\\n5 10000000000\\n5 6 9999999999') == '1 5\\n2 1\\n2 9999999994'"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == '1 1'\nassert solution('1 2\\n') == '1 2'\nassert solution('2 3\\n') == '2 3'\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\n\"\"\""
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n\"\"\"\n\n\nimport sys\nimport math\n\na, b, c, d = [int(n) for n in sys.stdin.readline().split()]\n\nmin_a, max_a = min(a, b), max(a, b)\nmin_b, max_b = min(c, d), max(c, d)\nmin_c, max_c = min(a+c, b+d), max(a+c, b+d)"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\n\"\"\""
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\n\"\"\"\n\nfrom collections import Counter\nimport re\n\nNUMBERS_REGEX = r\"(?P<a>\\d+) (?P<b>\\d+) (?P<c>\\d+) (?P<d>\\d+)\"\nINPUT_REGEX = re.compile(NUMBERS_REGEX)\n\ntest_cases = [\n    '3 6 5 4',\n    '40 40 40 60',\n    '201 101 101 200',\n]"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9\\nRBGRRBRGG') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRBRBGBGBGRG'"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    9\n    RBGRRBRGG\n    \"\"\"\n) == \"2\"\n\nassert solution(\n    \"\"\"\n    8\n    BBBGBRRR\n    \"\"\"\n) == \"2\"\n\nassert solution(\n    \"\"\"\n    13\n    BBRRRRGGGGGRR\n    \"\"\"\n) == \"6\"\n\nprint('Success')\n\"\"\"\nSuccess\n\"\"\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\nRBGRRBRGG') == '2\\nRBGRGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRRRRGGGGRR'\nassert solution('9\\nRRGBGGRRBR') == '1\\nRRGBGGRRR'\n\"\"\""
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9\\nRRRRRRRRR') == '2\\nRRRRRRRRR'\nassert solution('8\\nBBBGBRRR') == '2\\nRRBGBRRR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRRRRGBGRRRR'\n\"\"\"\n\nn = int(input())\ns = list(input())\n\nR = 0\nG = 0\nB = 0\n\nl = ['R', 'G', 'B']\n\nfor i in s:\n    if i == 'R':\n        R += 1\n    elif i == 'G':\n        G += 1\n    else:\n        B += 1\n\nl1 = [R, G, B]\ncount = 0\nfor i in range(len(l1)):\n    for j in range(i + 1, len(l1)):\n        if l1[i] == l1[j]:\n            count += 1\n\nprint(min(count, len(s) - len(set(s))))\n\nfor i in range(len(s)):\n    if s[i] == 'R':\n        s[i] = 'B'\n    elif s[i] == 'G':\n        s[i] = 'R'\n    else:\n        s[i] = 'G'\n\nprint(''.join(s))"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''9\nRBGRRBRGG\n''') == '2\nRBGRGBRGR'\nassert solution('''8\nBBBGBRRR\n''') == '2\nBRBGBRGR'\nassert solution('''13\nBBRRRRGGGGGRR\n''') == '6\nBGRRRRBGBBGBGRR'\nassert solution('''2\nGG\n''') == '0\nG'\nassert solution('''5\nBBBBB\n''') == '4\nB'\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRRGGG\") == \"RGRGRG\"\nassert solution(\"RBRRGGGG\") == \"RGRGRG\"\nassert solution(\"RRRGGG\") == \"RGRGRG\"\nassert solution(\"RBRRRGGG\") == \"RGRGRG\"\nassert solution(\"RBRGGGGR\") == \"RGRGRG\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9\\nRBGRRBRGG\\n') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGRRRRR\\n') == '2\\nBBRBGBRRR'\nassert solution('13\\nBBRRRRRGGGGGRR\\n') == '6\\nBGRRRBGBGBGRG'\n\n\n\"\"\""
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('RR') == 'RR'\nassert solution('RGR') == 'RR'\nassert solution('RRR') == 'RR'"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9RBBBGBRRR') == '2RRBGRRRBGB'\nassert solution('BBRRRRGGGGGRR') == '6RRRBGRRRBGB'\nassert solution('BBBGBRRR') == '2RRBGRRRBGB'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nRRR\") == \"1\\nRRR\"\nassert solution(\"5\\nGGGB\") == \"1\\nGGGB\"\nassert solution(\"5\\nBBBB\") == \"0\\nBBBB\"\nassert solution(\"3\\nGGR\") == \"0\\nGGR\"\nassert solution(\"1\\nG\") == \"0\\nG\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 3 4 7 5\") == '4\\n2 3 5 6'\n\"\"\""
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 4 7 5 6 8\") == \"4\"\nassert solution(\"1 3 5 2 4 6\") == \"2\"\nassert solution(\"10 9 8 7\") == \"1\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"\n\nassert solution(\"1 3 5 2 4 6\") == \"2\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10 9 8 7\") == \"2\\n1 4\"\nassert solution(\"7\\n3 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\"\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n\n\"\"\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 4 7 5 6\") == 4\nassert solution(\"1 3 5 2 4 6\") == 2\nassert solution(\"6 7 8 3 4 5 9 10 11\") == 6\nassert solution(\"10 9 8 7\") == 1\nassert solution(\"1 3 5 2 4 6\") == 2\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n3 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\"\nassert solution(\"4\\n10 9 8 7\") == \"1\\n1\"\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n\"\"\""
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 4 7 5 6 8') == '4'\nassert solution('1 3 5 2 4 6') == '2'\nassert solution('6 7 8 3 4 5 9 10 11') == '6'\nassert solution('6 7 8 3 4 5 9 10 11') == '6'\nassert solution('1 2 3 4 5 6') == '1'\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\nassert solution(\"4 10 9 8 7\") == \"1\\n1\"\nassert solution(\"9 10 8 7 6\") == \"2\\n1 4\"\nassert solution(\"3 3 4 7 5 6\") == \"4\\n2 3 5 6\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 4 7 5 6 8\") == \"4\"\nassert solution(\"1 3 5 2 4 6\") == \"2\"\nassert solution(\"1 3 5 2 4 6\") == \"1 4\"\nassert solution(\"1 3 5 2 4 6\") == \"1 4\"\nassert solution(\"1 3 5 2 4 6\") == \"1 4\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\"\nassert solution(\"6 3 4 7 5 6 8\") == \"2\"\nassert solution(\"4 10 9 8 7\") == \"1\"\nassert solution(\"9 6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"1 3 5 2 4 6\") == \"2\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"4 10 9 8 7\") == \"1\"\nassert solution(\"9 6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"1 3 5 2 4 6\") == \"2\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == \"No\"\nassert solution('1 2') == \"No\"\nassert solution('3 1') == \"Yes\"\nassert solution('3 3') == \"Yes\"\nassert solution('1 3') == \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1') == 'Yes'\n\nassert solution('3 3') == 'No'\nassert solution('1 2') == 'No'\nassert solution('2 3') == 'No'\nassert solution('1 1') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"2 1\") == \"No\"\nassert solution(\"2 2\") == \"No\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\nimport sys"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == \"Yes\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('1 1') == 'No'\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1') == 'Yes'\nprint(solution('3 1'))\n\n---\n\n3 1\n\nassert solution('1 2') == 'No'\nprint(solution('1 2'))\n\n---\n\n3 1\n\nassert solution('1 3') == 'No'\nprint(solution('1 3'))\n\n---\n\n3 1\n\nassert solution('3 1') == 'Yes'\nprint(solution('3 1'))\n\n---\n\n3 1\n\nassert solution('3 2') == 'No'\nprint(solution('3 2'))\n\n---\n\n3 1"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\n---Problem---\nThe Goldbach Conjecture is the following statement: \nAny even number greater than 2 can be written as the sum of two prime numbers.\nFor instance, 2 can be written as 2 = 2 + 1 = 3 + 2, and 3 can be written as 3 = 3 + 1 = 2 + 3.\nThere is no odd number greater than 2 that can be expressed as the sum of two prime numbers.\nWrite a program that takes an even number input n and checks if there exists two prime numbers p and q such that p + q = n.\n\n-----Solution-----\nIf we can write n = p + q, then\np = n - q\nq = n - p\n\nThe number of prime numbers between 1 and n is n/2, so\nn = 1 + 2 + 4 + 8 + 16 + 32 + 64 +... = (1 + 2 + 4 + 8 + 16 + 32 + 64 +...) / 2 = (1 + 2 + 4 + 8 +...) * 0.5 = n/2\n\nTo check if a number is prime, we can use the Sieve of Eratosthenes:\n1. Create a list of all the numbers between 1 and n\n2. Remove all the multiples of every prime number in the list\n3. Return the length of the list\n\n---Tests---\nTest 1\nInput:\n10\nOutput:\nNo\nExplanation:\nThere is no prime number between 1 and 10.\n\nTest 2\nInput:\n2\nOutput:\nYes\nExplanation:\nThe prime numbers between 1 and 2 are 1 and 2.\n\nTest 3\nInput:\n12\nOutput:\nNo\nExplanation:\nThere is no prime number between 1 and 12.\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n') == 'Yes'\n\n---Problem---\n\nLet A be a positive integer, and let B be a positive integer such that A < B.\nGiven the numbers A and B, write a program that determines if there is an odd number C such that A \\times B \\times C is divisible by A.\n\n---Example---\nLet A = 3 and B = 5.\nThe possible values for C are 1, 2, 4, 5 and 6.\nLet C = 4.\nTherefore, A \\times B \\times C = 3 \\times 5 \\times 4 = 120, which is divisible by 3.\nThe correct answer is Yes, because 4 is the only value for C such that this condition is true.\n\n---Solution---"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"81 58\") == \"110\"\nassert solution(\"88 99\") == \"152\"\nassert solution(\"10 10\") == \"20\"\n\n\"\"\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"81 58\"\n) == \"110\"\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('81 58') == '110'"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n\nX, Y = input().split()\nX = int(X)\nY = int(Y)"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('81 58') == '110'\n\n\"\"\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n\nimport unittest\n\n\nclass TestTest(unittest.TestCase):\n    def test(self):\n        pass\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('81 58') == '110'\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"81 58\") == \"110\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '8'\nprint(solution('2'))\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '8'\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2') == '8'"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2') == '8'\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == 8\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"8\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"8\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(2) == 8\nprint(solution(2))\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == 8\n\"\"\"\n\n\"\"\"\nBEST SOLUTION:\n\nn = int(input())\n\nprint((9**n-9**(n-1))%10007)\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 5\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == 'YES'\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n') == 'YES'\nassert solution('6\\n') == 'NO'\nassert solution('7\\n') == 'YES'\n\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n') == 'YES'\nassert solution('10\\n') == 'NO'\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n') == \"YES\"\nassert solution('2\\n') == \"NO\"\nassert solution('1\\n') == \"YES\"\nassert solution('0\\n') == \"NO\"\nassert solution('9\\n') == \"YES\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n') == 'YES'\nassert solution('2\\n') == 'NO'\nassert solution('4\\n') == 'YES'\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"7\") == \"YES\"\nassert solution(\"8\") == \"YES\"\nassert solution(\"9\") == \"NO\"\n\nprint('all tests passed.')\n\"\"\"\nimport math"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"YES\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n\") == \"YES\"\nprint(\"Exercise 1 solved!\")\n\n'''"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('999') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('999') == 'ABC'\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('999') == 'ABC'\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(ABC999) == \"ABC\"\n\"\"\"\nimport sys\nn = int(sys.stdin.readline())"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''999''') == 'ABC'\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == 'ABC'\nassert solution('2') == 'ABD'\nassert solution('3') == 'ABC'\nassert solution('999') == 'ABC'\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('999') == 'ABC'\n\"\"\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n1\n2\n4\n8\n9\n15\n''') == 'Yay!'\nassert solution('''\n1\n2\n4\n8\n9\n15\n''') ==':(\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n\") == 'Yay!'\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n\") == 'Yay!'\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n\") == 'Yay!'\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n\") == \"Yay!\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n\") == \" :( \"\n\n\"\"\"\n\na, b, c, d, e, k = [int(i) for i in input().split()]\n\nfor i in range(1, k + 1):\n    if a + i <= k and b + i <= k and c + i <= k and d + i <= k and e + i <= k:\n        print(\"Yay!\")\n        exit()\n\nprint(\" :( \")\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\nassert solution('1\\n3\\n4\\n8\\n9\\n15') == ':(\n\n-----\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n15\") == \":(\\n\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'Yay!'\nassert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n8\\n9\\n15') == ':(\\n\\tYay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n8\\n9\\n15') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n7\\n8\\n9\\n15') == ':(\\n\\tYay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 9 15\") == \"Yay!\"\nassert solution(\"7 5 1 3 5 3\") == \"Yay!\"\nassert solution(\"1 2 3 4 5\") == \"Yay!\"\nassert solution(\"1 1 1 1 1 1\") == \"Yay!\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n6\") == \":(\"\n\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('pink') == 'pink'\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('pink') == 'pink'\nassert solution('red') =='red'\nassert solution('green')!= 'green'\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3200) == \"pink\"\n\nprint(solution(3200))\n'''\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"pink\") == \"pink\"\nassert solution(\"red\") == \"red\"\nassert solution(\"pink\")!= \"red\"\nassert solution(\"red\")!= \"pink\"\n\nprint(\"Passed!\")\n\"\"\"\n\na = int(input())\ns = input()"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3200, \"pink\"') == 'pink'\n\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"pink\") == \"pink\"\nassert solution(\"blue\") == \"red\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(a='3200') == 'pink'\nassert solution(a='2800') =='red'\nassert solution(a='400') =='red'\n\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('pink') == 'pink'\nassert solution('red') =='red'\nassert solution('orange') =='red'\nassert solution('blue') =='red'\nassert solution('purple') == 'purple'\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('pink') == 'pink'\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('pink') == 'pink'\nassert solution('red') =='red'\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\"\nimport sys"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1199\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1199\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\"\n\nR = int(input())"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1140') == 'ABC'\nassert solution('1200') == 'ABC'\nassert solution('2800') == 'ARC'\nassert solution('4208') == 'AGC'\n\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(123) == '123'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(101) == 'ABC'\nassert solution(1240) == 'ARC'\nassert solution(2843) == 'AGC'\nassert solution(4208) == 'ABC'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 'A'\nassert solution('1\\n2') == 'B'\nassert solution('1\\n2\\n') == 'C'\nassert solution('1\\n2\\n3\\n') == 'D'\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\"\n\nrating = int(stdin.readline())\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11') == '99'\nassert solution('19') == '91'\nassert solution('111') == '999'\n\nprint('All tests passed.')"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"119\") == \"991\"\n\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('123') == '321'\nassert solution('912') == '811'\nassert solution('112') == '211'\nassert solution('999') == '1111'\nassert solution('122') == '222'\n\"\"\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == '99'\nassert solution('109') == '101'\nassert solution('101') == '11'\nassert solution('1011') == '1111'\n\"\"\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('119') == '991'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"119\") == \"991\"\n\"\"\"\n\nn = int(input())\nout = \"\"\nfor i in str(n):\n    if i == \"1\":\n        out += \"9\"\n    elif i == \"9\":\n        out += \"1\"\n    else:\n        out += i\n\nprint(int(out))\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"119\") == \"991\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nn = input()\n\nprint(int(n.replace(\"1\", \"9\"))\n     .replace(\"9\", \"1\")\n     .replace(\"1\", \"9\")\n     .replace(\"9\", \"1\"))\n\n\"\"\"\nSolution 2\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"123\") == \"931\"\nassert solution(\"99\") == \"999\"\nassert solution(\"999\") == \"999\"\n\"\"\"\n\n\"\"\"\nProblem Name: Sum of Digits\n\nProblem URL: https://www.hackerrank.com/challenges/list-comprehensions/problem\n\nProblem Section: Lists\n\nProblem Statement:\nWe want to create a list that contains the squares of all numbers from 1 to 10.\nWe can do this in one line of code.\n\nLets use list comprehension.\n\nlist comprehension is a python feature, that allows us to create a list from another iterable in one line.\nIt works with iterables like tuples, sets, and lists.\n\nExample:\n\nletters = ['a', 'b', 'c']\noutput = ['a', 'b', 'c']\n\nlist = [i for i in letters]\n\"\"\"\n\n\"\"\"\nProblem Statement:\nGiven a tuple list, find the 3rd largest element in the list.\n\nExample:\nInput: [39, 5, 78, 2, 1, 100]\nOutput: 78\n\nInput: [39, 5, 78, 2, 1, 100, 10]\nOutput: 100\n\nAssumptions:\n - The list has at least 3 elements.\n - The 3rd largest element is always the 3rd largest.\n\"\"\"\n\n\"\"\"\nSolution:"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123\") == \"132\"\nassert solution(\"1119\") == \"1319\"\nassert solution(\"1\") == \"9\"\nassert solution(\"11\") == \"19\"\nassert solution(\"19\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1111') == '9999'\nassert solution('9090') == '01010'\nassert solution('9909') == '10101'\nassert solution('9900') == '10100'\nassert solution('9090') == '01010'\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\nassert solution(\"ab\") == \"ab\"\n\"\"\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == b\n\"\"\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abbaac') == 'abac'\nassert solution('ac') == 'ac'\nassert solution('bccddaaf') == 'bcdaf'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin))\n\n\"\"\"\nimport sys\n\nsys.stdin = open('input.txt')"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abbaac') == 'abac'\nassert solution('ac') == 'ac'\nassert solution('bccddaaf') == 'bcdaf'\nassert solution('zzzzzzzzzz') == 'zzzzzz'\n\n\"\"\"\n\nimport sys\nimport collections\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\""
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 4') == '2'\nassert solution('13 9') == '5'\nassert solution('100 13') == '4'\nassert solution('123 456') == '333'\nassert solution('92 46') == '0'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 4\\n13 9\\n100 13\\n123 456\\n92 46') == '2\\n5\\n4\\n333\\n0'\n\"\"\"\n\nfrom __future__ import annotations\n\n__author__ = \"Alexander Zhuk\"\n\nfrom typing import Callable, List\nfrom math import gcd\n\nfrom solutions.runner import run_solution\n\nfrom copy import deepcopy\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 2\\n') == '2'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 4\") == \"2\"\nassert solution(\"13 9\") == \"5\"\nassert solution(\"100 13\") == \"4\"\nassert solution(\"123 456\") == \"333\"\nassert solution(\"92 46\") == \"0\"\n\"\"\""
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 4\\n13 9') == '2'\nassert solution('100 13\\n123 456') == '4'\nassert solution('92 46') == '0'\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n10 4\n13 9\n100 13\n123 456\n92 46\n''') == '''\n2\n5\n4\n333\n0\n'''\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5\n10 4\n13 9\n100 13\n123 456\n92 46\"\"\") == \"2\\n5\\n4\\n333\\n0\"\n\n\"\"\"\nDescription\n\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\nP1\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n1\\n1\") == \"0\"\nassert solution(\"2\\n1\\n1\") == \"1\"\nassert solution(\"3\\n1\\n1\") == \"2\"\nassert solution(\"4\\n1\\n1\") == \"3\"\nassert solution(\"5\\n1\\n1\") == \"4\"\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == 2.666666666666667"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n'''\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 3\n3 4 1 2''') == 2.666666666666667\n'''\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == '2.666666666666667'\n\"\"\"\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n\"\"\"\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\nassert solution('4 3\\n4 3 1 2') == 2.0\nassert solution('4 3\\n5 5 1 2') == 4.0\nassert solution('4 3\\n5 5 4 3') == 2.666666666666667\nassert solution('4 3\\n5 5 5 1 2') == 4.0\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n\"\"\""
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == 2.666666666666667\n\"\"\"\n\nn, k = map(int, input().split())\nl = list(map(int, input().split()))\n\narr = []\narr_len = len(l)\nfor i in range(0, arr_len-n+1):\n    arr.append(sum(l[i:i+n])/n)\n\nprint(max(arr))"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1''') == 'YES'\nassert solution('''3 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1''') == 'NO'\nassert solution('''3 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1''') == 'NO'\nassert solution('''4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1''') == 'NO'\n\nassert solution('''6 4\n4 2\n1 2 3 4 5\n3 2\n5 1\n1 2 3 4 5\n4 2\n4 1 2 3\n1 3\n5 2\n2 1 2 3 3\n1 4\n''') == 'YES'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == 'YES'\n\"\"\""
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    3 2\n    3 2 1\n    1 2\n    4 2\n    4 1 2 3\n    3 2\n    5 1\n    1 2 3 4 5\n    1\n    4 2\n    2 1 4 3\n    1 3\n    4 2\n    4 3 2 1\n    1 3\n    5 2\n    2 1 2 3 3\n    1 4\n    \"\"\"\n) == \"\"\"\nYES\nNO\nYES\nYES\nNO\nYES\nYES\nNO\nYES\nNO\nYES\nYES\nNO\nYES\nNO\nYES\nYES\nNO\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 2\\n4 1 2 3\\n3 2') == 'YES'\nassert solution('5 2\\n2 1 4 3\\n1 2 3 4 5') == 'NO'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5') == 'YES'\nassert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5') == 'NO'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2\\n3 4\\n2 1 4 3\") == \"YES\"\nassert solution(\"5 1\\n3 2 1 2 3\") == \"NO\"\nassert solution(\"4 2\\n3 2\\n4 1 2 3\") == \"NO\"\nassert solution(\"4 2\\n3 2\\n4 3\\n1 2 4 3\") == \"NO\"\nassert solution(\"4 2\\n3 2\\n4 3\\n1 3\\n2 1 4 3\") == \"YES\"\n\n-----Problem-----\n\nThe Knights Game\nA k-element set of integers is called a \"Knight's tour\" if:\n\nit is a permutation of the integers $1, 2, \\dots, k$;\neach element appears in the set exactly once; and\nno element appears in the set after it.\n\nFor example, $(3, 1, 4, 2)$ is a Knight's tour, but $(1, 4, 3, 2)$ is not.\n\nGiven a set of k integers $(p_1, p_2, \\dots, p_k)$, check whether it is a Knight's tour.\n\n-----Solution-----\n\n1. Use the fact that the Knights tour is a permutation and that it is always possible to add one more number to the permutation of the integers $1, 2, \\dots, k$;\n2. Compute the sum of the first and the last element of the permutation;\n3. Check whether the sum is even or odd. If the sum is even, then the solution is impossible. If the sum is odd, then the solution is possible.\n\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5\") == \"YES\"\nassert solution(\"3 2 1\") == \"NO\"\nassert solution(\"4 2 1 3\") == \"YES\"\nassert solution(\"4 1 2 3\") == \"YES\"\nassert solution(\"5 1 2 3 4\") == \"NO\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"NO\"\nassert solution(\"4 2\\n4 1 2 3\\n1 2\\n3 2\\n3 1 2\\n2 1 2 3\\n1 4\\n\") == \"NO\"\nassert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"NO\"\nassert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\") == \"YES\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n\"\"\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\n\nprint(solution(\"baabbb\"))\nprint(solution(\"ooopppssss\"))\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('baabbb') == 'bab'\nassert solution('ooopppssss') == 'oops'\n\"\"\"\n\nimport sys\n\nfrom collections import deque\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"bab\") == \"baabbb\"\nassert solution(\"baabbb\") == \"bab\"\nassert solution(\"z\") == \"z\"\nassert solution(\"ooopppssss\") == \"oops\"\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == t\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"bab\") == \"baabbb\"\nassert solution(\"oopppssss\") == \"oops\"\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"baabbb\") == \"bab\"\n\"\"\"\n\nn = int(input())\ns = input()\n\ni = 0\n\nwhile i < n:\n    print(s[i] * n, end=\"\")\n    i += 1\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"baabbb\") == \"bab\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"bab\") == \"baa\"\nassert solution(\"baabbb\") == \"bab\"\nassert solution(\"o\" * 10) == \"o\" * 10\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bab\") == \"baabbb\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4') == '1'\nassert solution('4 3\\n2 1 3\\n4 3 4\\n2 4 1') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3') == '0'\nassert solution('1 0\\n') == '0'\n\n-----Explanation-----\n\nThere are no edges with negative weights in the first graph, so the answer is 0.\n\n\"\"\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 4\\n2 1 3\\n4 3 4\\n2 4 1\\n1 4 2\\n1 5 3') == '2'\n\nassert solution('5 6\\n2 1 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3') == '2'\nassert solution('5 6\\n1 2 2\\n2 3 3\\n1 3 3\\n2 4 2\\n1 4 2\\n1 5 3') == '0'\n\nassert solution('1 1\\n1 1') == '0'\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"1\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n1 4 2\\n1 5 3\\n') == '1'\nassert solution('4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n1 4 2\\n1 5 3\\n') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n') == '1'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n') == '0'\n\n\"\"\"\n\nimport heapq\nfrom collections import Counter\nfrom typing import List\n\nfrom sys import stdin\n\nn, m = [int(x) for x in stdin.readline().split()]\nG = [[] for _ in range(n + 1)]\nfor _ in range(m):\n    u, v, w = [int(x) for x in stdin.readline().split()]\n    G[u].append([v, w])\n    G[v].append([u, w])\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '1'\nassert solution(\"8 9\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '0'\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '1'\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '2'\n\n\"\"\"\n\n\"\"\"\nimport sys\nimport heapq"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4') == '1'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n2 4 4') == '1'\nassert solution('5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3') == '2'"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\nassert solution(test_input_4) == test_output_4\n\"\"\"\nimport sys\nimport random"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == \"2\"\n\"\"\"\n\n\nclass UnionFind(object):\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n        self.ranks = [0] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.ranks[x] > self.ranks[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n        if self.ranks[x] == self.ranks[y]:\n            self.ranks[x] += 1\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        group_members = defaultdict(list)\n        for member in range(self.n):\n            group_members[self.find(member)].append(member)\n        return group_members\n\n    def __str__(self):\n        return '\\n'.join(\n            f'{r}: {m}' for r, m in self.all_group_members().items())\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"0\"\nassert solution(\"8 10\\n1 2 1\\n2 3 3\\n1 3 3\\n2 4 2\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"2\"\nassert solution(\"8 10\\n1 2 1\\n2 3 3\\n1 3 3\\n2 4 2\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"8 10\\n1 2 1\\n2 3 3\\n1 3 3\\n2 4 2\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"0\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 3\\n1 2 2\\n2 3 3\\n1 3 3\\n2 4 2\\n1 4 2\\n1 5 3\\n1 6 3\\n2 5 1\\n2 6 1\\n2 7 1\\n2 8 1\\n3 4 1\\n3 5 1\\n4 5 1\\n4 6 1\\n5 6 1\\n5 7 1\\n6 7 1\\n6 8 1\\n7 8 1\\n\") == '2'\n\n\"\"\"\n\nimport sys\nimport queue\n\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RGBGRBB') == '3'\nassert solution('GRB') == '1'\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RGBGRBB\") == 'RGBRGBR'\nassert solution(\"RG\") == \"RR\"\nassert solution(\"RGRGRG\") == \"GG\"\nassert solution(\"RGRGRGB\") == 'GRGB'\n\"\"\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('RR') == 'RR'\nassert solution('RGBG') == 'RGBG'\nassert solution('RGBRGBRG') == 'RGBRGBR'\nassert solution('RGBRGBRG') == 'RGBRGBR'\nassert solution('RGBGRGBB') == 'RGBGRBG'\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RGRGBBBR\") == \"RGGRBB\"\nassert solution(\"GRGBG\") == \"RG\"\n\n\"\"\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RGBGRBB') == 'RGBRGBR'\nassert solution('RGGBGRRRR') == 'GRGBRGR'\nassert solution('BBBRRRGGG') == 'B'\nassert solution('RRRGGGGGG') == 'G'\nassert solution('GGGGGGRRR') == 'R'\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('RGBGRBB') == 'RGBRGBR'\nassert solution('RRRRR') == 'R'\nassert solution('RGGGG') == 'R'\nassert solution('GRRRRRRRRRRGGGGGG') == 'G'\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RGBGRBB\") == \"GRB\"\nassert solution(\"RGBGRBBR\") == \"RR\"\nassert solution(\"RGBGRBBRB\") == \"RR\"\nassert solution(\"RGBGRBBRRB\") == \"RR\"\nassert solution(\"RGBGRBBRRBR\") == \"RR\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('R') == 'G'\nassert solution('GB') == 'G'\nassert solution('GBGBGBB') == 'GBGBGBB'\nassert solution('RRRR') == 'RRRR'\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RGBGRBB\") == \"GRRB\"\nassert solution(\"RGBGRRBB\") == \"RGBRRR\"\n\"\"\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nprint(solution(\"RGBGRBB\"), \"RGBRGBR\")\nassert solution(\"BBRGBR\") == \"R\"\nprint(solution(\"BBRGBR\"), \"R\")\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\":\\n\") == \"Error: Input is not formatted correctly.\"\nassert solution(\": 10000 JPY\\n0.10000000 BTC\\n\") == \"Error: Input is not formatted correctly.\"\n\n-----Runtime Measurement-----\nn = int(stdin.readline())\na = stdin.readline().strip().split(' ')\nb = stdin.readline().strip().split(' ')\n\nassert 2 <= n <= 10\nassert a[0] == b[0]\nassert a[1] in {'JPY', 'BTC'}\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\nprint(\"PASS\")\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\nassert solution(\"2\\n10000 JPY\\n0.100000 BTC\") == \"48000.1\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\nassert solution(\"10000 JPY\\n10.10000000 BTC\") == \"48000.1\"\nassert solution(\"10000 JPY\\n10.10000000 BTC\\n100 JPY\\n1.0 BTC\") == \"48001.1\"\nassert solution(\"10000 JPY\\n10.10000000 BTC\\n100 JPY\\n1.0 BTC\\n10.10000000 BTC\") == \"48011.1\"\nassert solution(\"10000 JPY\\n10.10000000 BTC\\n100 JPY\\n1.0 BTC\\n10.10000000 BTC\\n100 JPY\\n1.0 BTC\") == \"48011.1\"\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\ndic = {}\nfor i in range(N):\n    if sys.stdin.readline().split()[1] == \"JPY\":\n        x = int(sys.stdin.readline())\n        dic[x] = x\n    else:\n        x = float(sys.stdin.readline())\n        dic[x] = x\n\nres = 0\nfor k, v in dic.items():\n    res += v * k\n\nprint(res)"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\nprint(\"PASS\")\n\"\"\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n2\n10000 JPY\n0.10000000 BTC\n''') == '48000.0'\n\"\"\"\n\nfrom typing import List, Any\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n10000 JPY\") == \"10000.0\"\nassert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\n10000 JPY\n0.10000000 BTC\n''') == '48000.0'\nassert solution('''3\n10000 JPY\n0.10000000 BTC\n100 JPY\n''') == '48000.0'\nassert solution('''4\n10000 JPY\n0.10000000 BTC\n100 JPY\n1000 JPY\n''') == '48000.0'\nassert solution('''5\n10000 JPY\n0.10000000 BTC\n100 JPY\n1000 JPY\n100 JPY\n''') == '48000.0'\nassert solution('''7\n10000 JPY\n0.10000000 BTC\n100 JPY\n1000 JPY\n100 JPY\n10 JPY\n1.10000000 BTC\n''') == '48000.0'\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '4 2'\n) == '3'"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"3\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2') == '3'"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"3\"\nassert solution(\"6 3\") == \"1\"\nassert solution(\"1 1\") == \"0\"\n\"\"\"\nimport math"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2') == '3'\n\"\"\"\n\nn, i = map(int, stdin.split())\nprint(n-i+1)\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '1'\nassert solution('2 1 3 4') == '3'\nassert solution('3 2 1 4') == '2'\nassert solution('4 3 2 1') == '3'\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2') == '3'\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2\nip cc''') == 'icpc'\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ip cc') == 'icpc'\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('S') == 'S'\nassert solution('a') == 'a'\nassert solution('a b') == 'ba'\nassert solution('aa bb') == 'baa'\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 ab\") == \"baa\"\nassert solution(\"2 abc\") == \"bacb\"\nassert solution(\"3 abc\") == \"caba\"\nassert solution(\"4 abc\") == \"cbcac\"\nassert solution(\"5 abc\") == \"cbcacb\"\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 abc') == 'ab abc abc'\nassert solution('1 ab') == 'a ab ab'\n\"\"\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == '1'\nassert solution('3') == '11'\nassert solution('4') == '12'\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('12') == '12'\nassert solution('23') == '13'\nassert solution('123') == '132'\nassert solution('4567') == '4567'\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ip cc') == 'icpc'\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ip cc') == 'icpc'\nassert solution('a') == 'a'\nassert solution('a b') == 'a b'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('ab') == 'ba'\nassert solution('aba') == 'baba'\nassert solution('abab') == 'bbab'\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABB\") == \"Yes\"\nassert solution(\"ABC\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABA') == 'Yes'\nassert solution('ABB') == 'No'\nassert solution('BBA') == 'Yes'\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABA') == 'Yes'\n\"\"\"\n\nS = input()\nprint('Yes' if len({S[i] for i in range(len(S)) if i % 2 == 0}) == 2 else 'No')\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    'ABA'\n) == 'Yes'\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BAB\") == \"Yes\"\nassert solution(\"AAA\") == \"No\"\nassert solution(\"BBA\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AAA\") == \"Yes\"\nassert solution(\"ABB\") == \"Yes\"\nassert solution(\"ABA\") == \"Yes\"\nassert solution(\"ABAB\") == \"No\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"ABB\") == \"No\"\nassert solution(\"BBA\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AAB\") == \"Yes\"\nassert solution(\"BAA\") == \"Yes\"\nassert solution(\"ABB\") == \"No\"\nassert solution(\"BBA\") == \"No\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BBA\") == \"Yes\"\nassert solution(\"BAB\") == \"Yes\"\nassert solution(\"ABA\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BBA\") == \"Yes\"\nassert solution(\"BBAB\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RRS') == 2\n\"\"\"\n\n\"\"\"\nSolution:\nS[0] -> \"R\"\nS[1] -> \"S\"\nS[2] -> \"R\"\n\n1) S[0] == \"S\"\n2) S[1] == \"S\"\n3) S[2] == \"R\"\n\nmax(0, 1, 2) == 2\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RRS') == 2\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('RRS') == 2\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RRS\") == 2\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RRR\") == 3\nassert solution(\"RRS\") == 2\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRR\") == 3\nassert solution(\"SRR\") == 2\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RRS\") == \"2\"\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('RRR') == '3'\nassert solution('SRR') == '2'\nassert solution('RSS') == '2'\nassert solution('SRS') == '1'\nassert solution('SRR') == '2'\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('RRS') == 2\nassert solution('SRSRS') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RRS') == 2\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '3 1 2'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(expected_output)"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '3 1 2'\n\"\"\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"1 2 3 4\") == \"3 4 1 2\"\nassert solution(\"100 200 300\") == \"300 200 100\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '3 1 2'\nassert solution('5 5 5') == '5 5 5'\nassert solution('2 2 3') == '2 2 3'\nassert solution('1 10 1') == '10 1 1'\nassert solution('1 1 1') == '1 1 1'\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '3 1 2'\n\"\"\"\n\nimport sys\n\nlines = iter(sys.stdin)\n\nnumbers = list(map(int, next(lines).split()))\n\nfor number in numbers:\n    print(number, end=' ')"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"1 2 1\") == \"1 2 1\"\nassert solution(\"2 2 2\") == \"2 2 2\"\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"1 1 2\") == \"2 1 1\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"10 4 5\") == \"5 4 10\"\n\"\"\"\n\nX, Y, Z = [int(n) for n in stdin.split()]\nprint(Z, X, Y)\nprint(Y, Z, X)\nprint(X, Y, Z)\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"30 100\") == '100'\nprint(solution(input()))\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('30 100') == '100'\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"30 100\") == \"100\"\nprint(solution(\"30 100\"))\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('30 100') == '100'\n\"\"\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('30 100') == '100'"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"30 100\") == \"100\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('30 100') == '100'\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''30 100''') == '''100'''\n\nassert solution('''3 13''') == '''0'''\n\nassert solution('''6 2''') == '''50'''\n\nassert solution('''10 100''') == '''200'''\n\nassert solution('''10 100''') == '''200'''"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('30 100') == '100'\nassert solution('10 500') == '250'\n\"\"\"\n\nimport sys\n\nA = int(sys.stdin.readline().strip())\nB = int(sys.stdin.readline().strip())"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n100\\n') == '50\\n'\nassert solution('10\\n250\\n') == '200\\n'\nassert solution('12\\n500\\n') == '200\\n'\n\n----------------------\nimport math"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('+-') == '2'\n\"\"\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\"\n\n\"\"\"\nSolution:"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('+-') == '2'\nassert solution('--') == '0'\nassert solution('+') == '1'\nassert solution('-') == '0'\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"--\") == \"0\"\nassert solution(\"-\") == \"0\"\nassert solution(\"+\") == \"1\"\nassert solution(\"--\") == \"0\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('+-') == 2\n\"\"\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"+-++\") == \"3\"\nassert solution(\"-+++-+++\") == \"0\"\nassert solution(\"-\") == \"0\"\nassert solution(\"\") == \"0\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"-+-+\") == \"0\"\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/31\") == \"TBD\"\n\n\"\"\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2018/04/30\") == \"TBD\"\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(s) == Heisei\n\"\"\"\nimport datetime\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2020/02/29\") == \"TBD\"\nassert solution(\"2019/04/29\") == \"TBD\"\n\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/04/29') == 'TBD'\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/10/30') == 'TBD'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == expected_result"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2012/12/31\") == \"TBD\"\n\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"2019/04/30\"\n) == \"Heisei\"\n\nassert solution(\n    \"2019/11/25\"\n) == \"TBD\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\n\"\"\"\n\nimport sys\n\nsys.stdin = open('input.txt', 'r')\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2\n1 2\n''') == '2'\nassert solution('''3\n1 2 3\n''') == '3'\nassert solution('''10\n5 2 4 3 4 5 1 2 4 1\n''') == '9'\nassert solution('''4\n1 1 1 1\n''') == '4'\nassert solution('''1\n6\n''') == '1'\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == expected_result"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == out\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\nassert solution(\"3\\n1337 1337 1337\") == \"3\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\na = [int(x) for x in sys.stdin.readline().rstrip().split(' ')]\n\na.sort()\nans = 0\nfor i in range(0, n, 2):\n    ans += a[i]\n\nprint(ans)\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1337 1337 1337') == '3'\nassert solution('6\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\n\"\"\"\n\nimport sys\nimport math\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\n\npre_sum = [0] * (n+1)\nfor i in range(n):\n    pre_sum[i+1] = pre_sum[i] + arr[i]\n\nfor i in range(n):\n    for j in range(i+1, n):\n        if pre_sum[j+1] - pre_sum[i] == 2 * pre_sum[i+1]:\n            print(j-i)\n            exit(0)\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\nassert solution(\"3\\n1337 1337 1337\") == \"3\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == 14\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == 9\n\"\"\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 1 2 10 2 10') == '14'\nassert solution('5\\n2 1 2 10 2 10') == '14'\nassert solution('1\\n2') == '2'\nassert solution('2\\n2') == '2'\nassert solution('1\\n1') == '1'\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == 14\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == 9\nassert solution(\"3\\n1337 1337 1337\") == 3\n\n\"\"\"\n\n\"\"\"\nn = int(stdin.readline())\narr = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2\", \"1 2 3 4 5 6\") == \"3 4 5\"\nassert solution(\"10 4\", \"2 3 3 1 1 2 1 2 3 3\") == \"3 1 2\"\nassert solution(\"3 1\", \"1 2 3\") == \"2 1 3\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2\\n') == '2\\n2 1'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3\\n') == '3\\n1 3 2'"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '7 2\\n'\n    '1 2 3 2 1 3 2\\n'\n) == '2\\n'\nassert solution(\n    '10 4\\n'\n    '2 3 3 1 1 2 1 2 3 3\\n'\n) == '3\\n'\nassert solution(\n    '10 2\\n'\n    '2 3 3 1 1 2 1 2 3 3\\n'\n) == '3\\n'\nassert solution(\n    '10 3\\n'\n    '2 3 3 1 1 2 1 2 3 3\\n'\n) == '2\\n'\nassert solution(\n    '10 1\\n'\n    '2 3 3 1 1 2 1 2 3 3\\n'\n) == '1\\n'\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n\"\"\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7 2\n1 2 3 2 1 3 2\n''') == '2\n2 1'\n\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3\n''') == '3\n1 3 2'\n'''\n\nfor i in range(len(l1)):\n    if l1[i] == l2[i]:\n        k -= 1\n    else:\n        l1.insert(i, l2[i])\n        break\nprint(l1)\n\nassert solution('''7 2\n1 2 3 2 1 3 2\n''') == '2\n2 1'\n\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3\n''') == '3\n1 3 2'\n\n\nk=int(stdin.readline())\nn=int(stdin.readline())\nl1=list(map(int,stdin.readline().split()))\nl2=list(map(int,stdin.readline().split()))\nm=0\nl=[0]*k\nfor i in range(n):\n    if l2[l1[i]-1] not in l:\n        m+=1\n        l[m-1]=l2[l1[i]-1]\n    else:\n        l.remove(l2[l1[i]-1])\n        l.append(l2[l1[i]-1])\nprint(m)\nfor i in l:\n    print(i,end=' ')"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\") == \"2\"\nassert solution(\"10 4\") == \"3\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input_example1) == 2\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == '2\\n2 1'\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == '3\\n1 3 2'\n\"\"\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\""
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5\\n8\\n1\\n2\\n3\\n4\\n5\") == \"2 1 4 3 5\"\nassert solution(\"5 2\\n1\\n3\\n5\\n7\") == \"1 -1 -1 2 3\"\nassert solution(\"9 5\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\") == \"1 1 1 -1 2 3\"\nassert solution(\"3 3\\n5\\n9\\n11\") == \"1 -1 2 3\"\nassert solution(\"2 4\\n3\\n4\") == \"1 2\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"1 -1 3 2 2\"\n\"\"\"\n\nfrom sys import stdin\nfrom collections import deque"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 1\") == \"1\\n1\\n2\\n2\\n1\\n1\\n2\\n0\"\nassert solution(\"2 1 4\") == \"1\\n0\"\nassert solution(\"3 1 2\") == \"2\\n2\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5\") == \"2 2\"\n\"\"\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n8\\n2\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n4"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('ab') == 'ab'\nassert solution('aab') == 'aba'\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"1 -1 3 2 2\"\n\"\"\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6\\n2 2 2 2\\n3 2\") == \"4 -1 2 2 2 2\\n3 2\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2\\n1 2 3 4 6\\n2\\n3\\n1 3\\n2 3\\n4\") == \"3\\n-1\\n4\\n-1\"\nassert solution(\"5 1\\n1 3 4 5\\n3\\n2 3\\n4\") == \"4\\n-1\\n3\\n-1\"\n\"\"\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == '21'\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\") == '21'\n\n---\nInput\n1 2\n3\n2\n3\n3\n4\n5\n6\n7\n8\n\nOutput\n3"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2') == '21'\nassert solution('3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == '21'\n\"\"\""
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\") == \"21\"\n\"\"\"\nfrom collections import deque, Counter\nfrom functools import reduce\nfrom operator import add\nimport numpy as np\nfrom typing import List, Dict\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\") == \"0\""
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"\n\nprint(\"Successfully solved!\")\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\nassert solution('4 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '21'\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List, Set, Tuple, Dict\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == \"21\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_data) == answer\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == \"2\\n1 2 3\\n1 1 2\\n\"\nassert solution(\"3\\n2 8 10\") == \"2\\n2 2 1\\n2 3 2\\n\"\n\"\"\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 4 6 6 6') == '2'\nassert solution('3\\n2 8 10') == '2'\nassert solution('4\\n1 1 1 1') == '0'\nassert solution('7\\n1 2 2 3 4 5 6 7') == '5'\nassert solution('2\\n1 2') == '2'\n\n\"\"\"\n\n\"\"\"\n\na = list(map(int, stdin.split()))\n\nk = 0"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 6 6 6\") == 2\nassert solution(\"1 1 1 1\") == 0\nassert solution(\"1 2 3 4 5\") == 1\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11\") == 2\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\") == 2\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 4 6 6 6') == '2'\nassert solution('3\\n2 8 10') == '2'\nassert solution('4\\n1 1 1 1') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4 6 6 6') == '2'\nassert solution('3 8 10') == '2'\nassert solution('1 1 1 1') == '0'\n\nprint(solution(input()))\n\n----------------------------------------------------\n\nclass Solution:\n    def minOperations(self, s: str) -> int:\n        a = [int(n) for n in s.split()]\n        m = 10 ** 18 + 1\n        res = []\n        for i in range(len(a)):\n            if a[i]!= m:\n                cnt = 0\n                if i - 1 >= 0 and a[i - 1] + 1 == a[i]:\n                    a[i] = a[i] + 1\n                    a[i - 1] = a[i - 1] + 1\n                    cnt = 1\n                if i + 1 < len(a) and a[i] + 1 == a[i + 1]:\n                    a[i] = a[i] + 1\n                    a[i + 1] = a[i + 1] + 1\n                    cnt = 1\n                if cnt == 1:\n                    res.append([1, i, i + 1])\n        return len(res)\n\n----------------------------------------------------\n\nclass Solution:\n    def minOperations(self, a: str) -> int:\n        a = [int(n) for n in a.split()]\n        m = 10 ** 18 + 1\n        res = 0\n        for i in range(len(a)):\n            if a[i]!= m:\n                if i - 1 >= 0 and a[i - 1] + 1 == a[i]:\n                    a[i] = a[i] + 1\n                    a[i - 1] = a[i - 1] + 1\n                    res += 1\n                if i + 1 < len(a) and a[i] + 1 == a[i + 1]:\n                    a[i] = a[i] + 1\n                    a[i + 1] = a[i + 1] + 1\n                    res += 1\n        return res\n\n----------------------------------------------------\n\nclass Solution:\n    def minOperations(self, a: str) -> int:\n        a = [int(n) for n in a.split()]\n        m = 10 ** 18 + 1\n        res = 0\n        for i in range(len(a)):\n            if a[i]!= m:\n                res += 1\n                a[i] = a[i] + 1\n                if i - 1 >= 0 and a[i - 1] + 1 == a[i]:\n                    a[i] = a[i] + 1\n                    a[i - 1] = a[i - 1] + 1\n                    res += 1\n                if i + 1 < len(a) and a[i] + 1 == a[i + 1]:\n                    a[i] = a[i] + 1\n                    a[i + 1] = a[i + 1] + 1\n                    res += 1\n        return res\n\n----------------------------------------------------\n\nclass Solution:\n    def minOperations(self, a: str) -> int:\n        a = [int(n) for n in a.split()]\n        m = 10 ** 18 + 1\n        res = 0\n        for i in range(len(a)):\n            if a[i]!= m:\n                res += 1\n                a[i] = a[i] + 1\n                if i - 1 >= 0 and a[i - 1] + 1 == a[i]:\n                    a[i] = a[i] + 1\n                    a[i - 1] = a[i - 1] + 1\n                    res += 1\n                if i + 1 < len(a) and a[i] + 1 == a[i + 1]:\n                    a[i] = a[i] + 1\n                    a[i + 1] = a[i + 1] + 1\n                    res += 1\n        return res\n\n----------------------------------------------------\n\nclass Solution:\n    def minOperations(self, a: str) -> int:\n        a = [int(n) for n in a.split()]\n        m = 10 ** 18 + 1\n        res = 0\n        for i in range(len(a)):\n            if a[i]!= m:\n                res += 1\n                a[i] = a[i] + 1\n                if i - 1 >= 0 and a[i - 1] + 1 == a[i]:\n                    a[i] = a[i] + 1\n                    a[i - 1] = a[i - 1] + 1\n                    res += 1\n                if i + 1 < len(a) and a[i] + 1 == a[i + 1]:\n                    a[i] = a[i] + 1\n                    a[i + 1] = a[i + 1] + 1\n                    res += 1\n        return res\n\n\n        # res = 0\n        # m = 10 ** 18 + 1\n        # a = [int(n) for n in a.split()]\n        # for i in range(len(a)):\n        #     if a[i]!= m:\n        #         res += 1\n        #         a[i] = a[i] + 1\n        #         if i - 1 >= 0 and a[i - 1] + 1 == a[i]:\n        #             a[i] = a[i] + 1\n        #             a[i - 1] = a[i - 1] + 1\n        #             res += 1\n        #         if i + 1 < len(a) and a[i] + 1 == a[i + 1]:\n        #             a[i] = a[i] + 1\n        #             a[i + 1] = a[i + 1] + 1\n        #             res += 1\n        # return res\n\n\n        # m ="
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == \"2\\n1 2 3\\n1 1 2\\n\"\nassert solution(\"3\\n2 8 10\") == \"2\\n2 2 1\\n2 3 2\\n\"\nassert solution(\"4\\n1 1 1 1\") == \"0\\n\"\n\nprint('Success')\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 4 6 6 6') == '2\\n1 2 3\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10101\") == 2\nassert solution(\"1110111\") == 0\nassert solution(\"11101110\") == 1\nassert solution(\"1110111110\") == 2\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100010') == 1\nassert solution('10100100') == 2\nassert solution('11111111') == 0\nassert solution('10101010') == 1\nassert solution('11110100') == 0\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"100101\") == 2\nassert solution(\"10010001\") == 0\nassert solution(\"10000010\") == 1\nassert solution(\"10100100\") == 0\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10010001\") == 1\nassert solution(\"10100100\") == 0\n\"\"\""
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\nassert solution(\"11111111\") == 0\nassert solution(\"101\") == 1\nassert solution(\"11101110\") == 2\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\nassert solution(\"11111111\") == 0\nassert solution(\"100110\") == 0\nassert solution(\"11101110\") == 1\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10101\") == 2\nassert solution(\"10000010\") == 0\nassert solution(\"11111111\") == 0\nassert solution(\"00100010\") == 1\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10101\") == \"0\"\nassert solution(\"11110\") == \"1\"\nassert solution(\"100010\") == \"2\"\nassert solution(\"111111\") == \"0\"\n\"\"\"\nimport math\nimport sys\nfrom dataclasses import dataclass\n\nsys.setrecursionlimit(10 ** 5)\n\n\n@dataclass\nclass Solution:\n    res: int\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100010') == 1\nassert solution('11111111') == 0\nassert solution('10010001') == 1\nassert solution('10100100') == 1\nassert solution('10011001') == 2\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\nassert solution(\"11111111\") == 0\nassert solution
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 4 5\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\""
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\nassert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\""
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == ''\nassert solution('1\\n2\\n3') == '1\\n2\\n3'\nassert solution('3\\n2\\n3\\n3\\n4\\n5\\n6') == '3\\n2\\n3\\n4\\n5\\n6'\nassert solution('1\\n5\\n3\\n3\\n7\\n8\\n9\\n9\\n3\\n7\\n5\\n9\\n10\\n9\\n4\\n1\\n2\\n3\\n4\\n5') == '1\\n2\\n3\\n4\\n5'"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n2\\n') == '1'\nassert solution('1\\n2\\n3\\n') == '2'\nassert solution('1\\n2\\n3\\n4\\n') == '2'\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n4 6 7 \"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 4 5 \"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6 \"\n\n-----Problem-----\n\nOn the International Space Station the astronauts are placed in the following configuration:\n\nThe first row is the first column.\nThe first column is the last row.\nThe last column is the last row.\n\nYou should determine the number of astronauts who are on the last row.\n\n-----Solution-----\n\nFor the detailed solution please check the solution tab.\n\"\"\""
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 4 5\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\nprint('test passed')\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 4 5\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n4 6 7'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == '3\\n1 4 5'\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3') == '4\\n1 3 5 6'\nprint('Success')\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n4 6 7'\n\n\"\"\"\n\nn,k = input().split()\nn,k = int(n), int(k)\n\ns = [0]\n\nfor i in range(n):\n    s.append(int(input()))\n\nprint(s)\n\ncount = 0\nwhile True:\n    print(s)\n    l = len(s)\n    print(l)\n    if l > 1:\n        for i in range(1,l):\n            print(i)\n            if i == l -1:\n                break\n            if s[i-1] <= s[i] and s[i] >= s[i+1]:\n                count += 1\n                s.pop(i)\n    else:\n        count = 0\n        break\n    if count == k:\n        break\n\n\nprint(count)\nprint(s)\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(print(...))"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6') == '30\\n31\\n10'\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n') == '30\\n31\\n10'\n\"\"\"\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x, y, z = a[0], a[1], a[2]\n    if x % y == 0 or y % x == 0 or y % z == 0 or z % y == 0:\n        if x % z == 0 or z % x == 0 or z % y == 0 or y % z == 0:\n            print(max(x, y, z))\n        else:\n            print(x)\n    elif x % z == 0 or z % x == 0 or z % y == 0 or y % z == 0:\n        print(z)\n    else:\n        print(y)"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\") == \"30\\n31\\n10\"\n\"\"\"\n\nq = int(stdin.readline())\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\nb = list(map(int, stdin.readline().split()))\nc = list(map(int, stdin.readline().split()))\n\na.sort()\nb.sort()\nc.sort()\n\nj = 0\nk = 0\np = 0\n\nfor i in range(q):\n    if a[i] % b[i] == 0:\n        p = a[i] / b[i]\n    else:\n        p = a[i] / b[i] + 1\n    if a[i] % c[i] == 0:\n        q = a[i] / c[i]\n    else:\n        q = a[i] / c[i] + 1\n    if p >= q:\n        p = p + 1\n    else:\n        p = p + q\n    if p >= k:\n        k = p\n    else:\n        k = k\n\nprint(int(k))\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5 6 15 30\") == \"30\"\nassert solution(\"4\\n10 6 30 15\") == \"31\"\nassert solution(\"3\\n3 4 6\") == \"10\"\nassert solution(\"1\\n2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('1 1') == '1'\nassert solution('1 2 3') == '1'\nassert solution('1 2 3 4') == '1'\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5 6 15 30\") == 30\n\"\"\""
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n5 6 15 30') == '30'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\np = [0]*n\nfor i in range(n):\n    p[i] = max(a[i]-1, 0)\n    p[i] += sum(p[:i])\n\nprint(max(p))"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5\\n5 6 15 30') == '30'\nassert solution('5\\n4 10 6 30 15') == '31'\nassert solution('3\\n3 4 6') == '10'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\na = list(map(int, sys.stdin.readline().split()))\n\ns = sum(a)\n\nc = 3\n\nwhile c <= n:\n    a.sort()\n    for i in range(n - c + 1):\n        if a[i] % a[i + c - 1] == 0:\n            s += a[i + c - 1]\n        else:\n            break\n    c += 1\n\nprint(s)\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15') == '30'\nassert solution('3\\n3 4 6\\n') == '10'\n\"\"\"\n\n\"\"\"\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\n\n\"\"\""
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == \"2\\n1\\n2\\n1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == \"2\\n1\\n2\\n1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == \"2\\n1\\n2\\n1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == \"2\\n1\\n2\\n1\"\n\n\n\"\"\""
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\n\"\"\"\n\nfrom typing import List, Dict"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42''') == '2\\n1\\n2\\n1'\n'''\n\n\n\n-----\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043b\u0430\u0441\u044c \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043e\u0439 \u043d\u0438\u0436\u0435.\n\n\u0417\u0430\u0434\u0430\u0447\u0430\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043b\u0430\u0441\u044c \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043e\u0439 \u043d\u0438\u0436\u0435.\n\n\u041f\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0432\u044b\u0431\u0440\u0430\u043d\u0430 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0430 \u0438\u0437 \u043f\u0430\u0440.\n\n\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u044b \u0441\u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u043b\u044e\u0434\u0438, \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u043e\u0431\u0449\u0438\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043b\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044f.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u0443\u0440\u043e\u0432\u043d\u044f\u0445 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u044b\u0431\u0440\u0430\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0438\u0437 \u043d\u0438\u0445. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c, \u043e\u0431\u0430 \u043b\u044e\u0434\u044f\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432\u044b\u0431\u0440\u0430\u043d\u044b \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0430 \u0438\u0437 \u043f\u0430\u0440:\n\n- \u0434\u0432\u0443\u0445 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u0440\u0430\u0437\u043d\u044b\u0435 \u043e\u0431\u0449\u0438\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f;\n- \u043e\u0434\u0438\u043d \u0441\u0442\u0443\u0434\u0435\u043d\u0442, \u0438\u043c\u0435\u044e\u0449\u0438\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044f \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u0443\u044e \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0432 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438.\n\n\u0417\u0430\u0434\u0430\u0447\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u043e\u043c\u043e\u0447\u044c \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u044b \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0442\u044c\u0441\u044f \u043b\u044e\u0434\u0438 \u0432 \u043e\u0434\u043d\u043e\u043c \u0438 \u0442\u043e\u043c \u0436\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438.\n\n\u0412 \u043e\u0442\u0432\u0435\u0442\u0435 \u044d\u0442\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0432\u044b\u0431\u043e\u0440\u0430 \u043f\u0430\u0440 \u043b\u044e\u0434\u0435\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432, \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0437\u0430\u0434\u0430\u043d\u0438\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n2\n3\n3 10 11 1 20 4\n1\n4\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n\u041f\u0443\u043d\u043a\u0442 A: 2\n\u041f\u0443\u043d\u043a\u0442 B: 1\n\u041f\u0443\u043d\u043a\u0442 A: 1\n\u041f\u0443\u043d\u043a\u0442 B: 1\n\n\u041f\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044e \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u044b\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f, \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u0440\u0430\u0437\u043d\u044b\u0435 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044f.\n\u041f\u0443\u043d\u043a\u0442 A: 3\n\u041f\u0443\u043d\u043a\u0442 B: 2\n\u041f\u0443\u043d\u043a\u0442 A: 1\n\u041f\u0443\u043d\u043a\u0442 B: 1\n\n\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0432 \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043d\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0439, \u043d\u043e \u043e\u0434\u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0430\u044f \u043f\u0430\u0440\u0430 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == \"2\\n1\\n2\\n1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == \"2\\n1\\n2\\n1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\n\"\"\""
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == '2\\n1\\n2\\n1'\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == '2\\n1\\n2\\n1'\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\\n1 2 3 6\") == \"YES\"\nassert solution(\"5 2 6 27\\n3 3 5 18\") == \"NO\"\nassert solution(\"3 3 5 18\\n3 3 5 18\") == \"YES\"\nassert solution(\"5 2 6 27\\n3 3 5 1\") == \"NO\"\nassert solution(\"1 2 3 4\\n1 2 3 7\") == \"NO\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\\n1 2 3 6\") == \"NO\"\nassert solution(\"5 2 6 27\\n3 3 5 18\") == \"YES\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 4\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18\\n') == 'YES\\nNO\\nNO\\nYES'\n\"\"\"\nimport sys"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == 'YES'\nassert solution('1 2 3 6') == 'NO'\nassert solution('5 2 6 27') == 'YES'\nassert solution('3 3 5 18') == 'NO'"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n1 2 3 4\n1 2 3 6\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"\n1 2 3 4\n1 2 3 6\n\"\"\") == \"NO\"\nassert solution(\n\"\"\"\n5 2 6 27\n3 3 5 18\n\"\"\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 6\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"NO\"\nassert solution(\"3 3 5 18\") == \"YES\"\n\"\"\"\n\nq = int(input())\nfor i in range(q):\n    a, b, n, s = map(int, input().split())\n    if n % a == 0 and n % b == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18\") == \"YES\\nNO\\nNO\\nYES\"\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 3 6\") == 'YES'\nassert solution(\"1 2 3 6\") == 'NO'\nassert solution(\"5 2 6 27\") == 'NO'\nassert solution(\"3 3 5 18\") == 'YES'"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 4\\n1 2 3 6') == 'NO'\nassert solution('5\\n1 2 3 4\\n1 2 3 6') == 'YES'\nassert solution('5\\n1 2 3 4\\n5 2 6 27') == 'YES'\nassert solution('5\\n3 3 5 18') == 'NO'\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline())\n\nfor i in range(t):\n    a, b, n, s = list(map(int, sys.stdin.readline().split()))\n    if n * b >= s:\n        print('YES')\n    else:\n        print('NO')"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == 'YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n'\nassert solution(\"5 4 3 2 1 0\") == 'YES\\n1\\n3\\n4\\n5 4 3 1\\n'\nassert solution(\"5 3 2 1 0\") == 'YES\\n1\\n3\\n4\\n5 3 2 1\\n'\nassert solution(\"5 2 1 4 3\") == 'YES\\n1\\n3\\n5\\n5 2 1 4 3\\n'\nassert solution(\"5 1 4 3 2\") == 'YES\\n1\\n3\\n5\\n5 1 4 3 2\\n'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"5 1 1 2 1 2\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\"\nassert solution(\"5 0 1 2 3 4\") == \"YES\\n0\\n3\\n4\\n5 4 3 1\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 1 5 3\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"5 4 3 2 1 0\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 1 5 3') == 'YES\\n1\\n3\\n4\\n5 4 3 1'\nassert solution('5 3 1 5 3') == 'YES\\n1\\n3\\n4\\n5 4 3 1'\nassert solution('5 2 3 1 5 3') == 'YES\\n1\\n3\\n5\\n5 4 3 1'\nassert solution('7 2 7 3 3 1 4') == 'YES\\n2\\n3\\n7\\n7 4 3 1'\nassert solution('7 4 3 2 1 5 3') == 'YES\\n2\\n3\\n7\\n7 4 3 1'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == 'YES\\n2\\n3 7\\n5\\n7 4 3 2 1'\nassert solution(\"5 4 3 2 1 0\") == 'YES\\n1\\n3\\n4\\n5 4 3 1'\nassert solution(\"5 0 1 2 3 4\") == 'YES\\n0\\n'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\nassert solution(\"5 4 3 2 1 0\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\nassert solution(\"5 1 2 3 4\") == \"NO\\n\"\nassert solution(\"1 1 2 1 2\") == \"NO\\n\"\nassert solution(\"0 1 2 3 4\") == \"YES\\n0\\n\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 2 4 3 1 7\") == \"YES\"\nassert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 2 4 3 1 7\") == \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"5\\n4 3 1 5 3\\n\"\n) == \"YES\\n1\\n3\\n5\\n4 4 3 1\\n\"\n\nassert solution(\n    \"7\\n7 2 7 3 3 1 4\\n\"\n) == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 4 3 2 1 0\") == \"YES\"\nassert solution(\"4 3 1 5 3\") == \"YES\"\nassert solution(\"5 4 3 2 1\") == \"YES\"\nassert solution(\"1 1 2 1 2\") == \"NO\"\n\nprint(solution(\"5 4 3 2 1 0\"))\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"5 4 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 5 4 3 1\"\nassert solution(\"5 4 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 5 4 3 1\"\nassert solution(\"5 4 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 5 4 3 1\"\nassert solution(\"5 4 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 5 4 3 1\"\n\n\"\"\""
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 0 1\\n3 0 1\") == \"18\"\n\"\"\""
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n') == '18'\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == \"18\"\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1\") == \"8\"\nassert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\") == \"-1\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == \"18\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == 18\n\"\"\"\n\nn, k = map(int, input().split())\n\nbooks = [tuple(map(int, input().split())) for _ in range(n)]\n\nbooks = sorted(books, key=lambda x: (x[1], x[2]), reverse=True)\n\nt = 0\ncnt = 0\nfor book in books:\n    if book[0] <= k:\n        t += book[0]\n        cnt += 1\n        k -= book[0]\n    if cnt == k:\n        break\n\nprint(t if cnt == k else -1)\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\") == \"18\"\nassert solution(\"7 2\\n3 0 0\\n2 1 0\\n5 0 1\\n3 0 1\") == \"8\"\n\"\"\"\n\nimport collections\nimport sys\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == \"18\"\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1\") == \"8\"\nassert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\") == \"-1\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom typing import List, Deque, Tuple, Dict\n\nclass Books:\n    def __init__(self, n: int, k: int, books: List[Tuple[int, int, int]]) -> None:\n        self.n = n\n        self.k = k\n        self.books = books\n        self.likes: List[int] = [0] * n\n        self.total_time = 0\n\n    def read_books(self) -> None:\n        likes = self.likes\n        books = self.books\n\n        queue = deque(books)\n        total_time = 0\n        while queue and total_time < self.k:\n            total_time += queue.popleft()[0]\n            if likes[queue[0][1]] == 0:\n                total_time += queue.popleft()[0]\n            likes[queue[0][1]] = 1\n\n        self.total_time = total_time\n\n    def calculate_total_time(self) -> None:\n        self.read_books()\n\n    def __str__(self) -> str:\n        return f\"{self.total_time}\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1\") == \"8\"\n\"\"\"\n\nfrom collections import deque\n\nn, k = map(int, input().split())\n\na = deque(list(map(int, input().split())))\nb = deque(list(map(int, input().split())))\n\nbooks = {i: deque([a[i], b[i]]) for i in range(n)}\n\nk_books = k\nstdin_a = 0\nstdin_b = 0\nstdout = -1\n\nfor _ in range(k):\n    stdin_a, stdin_b = max(stdin_a, stdin_b), min(stdin_a, stdin_b)\n    stdin_a, stdin_b = books[stdin_a][0], books[stdin_b][1]\n    stdin_a, stdin_b = books[stdin_a][0], books[stdin_b][1]\n    stdin_a, stdin_b = books[stdin_a][1], books[stdin_b][0]\n    stdin_a, stdin_b = books[stdin_a][1], books[stdin_b][0]\n    stdin_a = books[stdin_a][0]\n    stdin_b = books[stdin_b][1]\n\n    stdout = max(stdout, stdin_a + stdin_b)\n\nprint(stdout)\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n1 0 1\\n1 1 1\\n1 0 1\") == \"6\""
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\") == '8'\nassert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == '18'\n\"\"\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"1 1\\n2 3\\n2 2\") == \"2\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"3 2\\n1 2 1\\n1 1 2\") == \"2\\n-1\\n1\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"6\"\nassert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\") == \"2\"\nassert solution(\"4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n3 2\\n1 3 4\\n2\\n1 3 5\\n1 4 6\\n1 5 7\\n1 6 8\\n1 7 9\\n1 8 10\\n1 9 11\\n1 10 12\\n1 11 13\\n1 12 14\\n1 13 15\\n1 14 16\\n1 15 17\\n1 16 18\\n1 17 19\\n1 18 20\\n1 19 21\\n1 20 22\\n1 21 23\\n1 22 24\\n1 23 25\\n1 24 26\\n1 25 27\\n1 26 28\\n1 27 29\\n1 28 30\\n1 29 31\\n1 30 32\\n1 31 33\\n1 32 34\\n1 33 35\\n1 34 36\\n1 35 37\\n1 36 38\\n1 37 39\\n1 38 40\\n1 39 41\\n1 40 42\\n1 41 43\\n1 42 44\\n1 43 45\\n1 44 46\\n1 45 47\\n1 46 48\\n1 47 49\\n1 48 50\\n1 49 51\\n1 50 52\\n1 51 53\\n1 52 54\\n1 53 55\\n1 54 56\\n1 55 57\\n1 56 58\\n1 57 59\\n1 58 60\\n1 59 61\\n1 60 62\\n1 61 63\\n1 62 64\\n1 63 65\\n1 64 66\\n1 65 67\\n1 66 68\\n1 67 69\\n1 68 70\\n1 69 71\\n1 70 72\\n1 71 73\\n1 72 74\\n1 73 75\\n1 74 76\\n1 75 77\\n1 76 78\\n1 77 79\\n1 78 80\\n1 79 81\\n1 80 82\\n1 81 83\\n1 82 84\\n1 83 85\\n1 84 86\\n1 85 87\\n1 86 88\\n1 87 89\\n1 88 90\\n1 89 91\\n1 90 92\\n1 91 93\\n1 92 94\\n1 93 95\\n1 94 96\\n1 95 97\\n1 96 98\\n1 97 99\\n1 98 100\\n1 99 101\\n1 100 102\\n1 101 103\\n1 102 104\\n1 103 105\\n1 104 106\\n1 105 107\\n1 106 108\\n1 107 109\\n1 108 110\\n1 109 111\\n1 110 112\\n1 111 113\\n1 112 114\\n1 113 115\\n1 114 116\\n1 115 117\\n1 116 118\\n1 117 119\\n1 118 120\\n1 119 121\\n1 120 122\\n1 121 123\\n1 122 124\\n1 123 125\\n1 124 126\\n1 125 127\\n1 126 128\\n1 127 129\\n1 128 130\\n1 129 131\\n1 130 132\\n1 131 133\\n1 132 134\\n1 133 135\\n1 134 136\\n1 135 137\\n1 136 138\\n1 137 139\\n1 138 140\\n1 139 141\\n1 140 142\\n1 141 143\\n1 142 144\\n1 143 145\\n1 144 146\\n1 145 147\\n1 146 148\\n1 147 149\\n1 148 150\\n1 149 151\\n1 150 152\\n1 151 153\\n1 152 154\\n1 153 155\\n1 154 156\\n1 155 157\\n1 156 158\\n1 157 159\\n1 158 160\\n1 159 161\\n1 160 162\\n1 161 163\\n1 162 164\\n1 163 165\\n1 164 166\\n1 165 167\\n1 166 168\\n1 167 169\\n1 168 170\\n1 169 171\\n1 170 172\\n1 171 173\\n1 172 174\\n1 173 175\\n1 174 176\\n1 175 177\\n1 176 178\\n1 177 179\\n1 178 180\\n1 179 181\\n1 180 182\\n1 181 183\\n1 182 184\\n1 183 185\\n1 184 186\\n1 185 187\\n1 186 188\\n1 187 189\\n1 188 190\\n1 189 191\\n1 190 192\\n1 191 193\\n1 192 194\\n1 193 195\\n1 194 196\\n1 195 197\\n1 196 198\\n1 197 199\\n1 198 200\\n1 199 201\\n1 200 202\\n1 201 203\\n1 202 204\\n1 203 205\\n1 204 206\\n1 205 207\\n1 206 208\\n1 207 209\\n1 208 210\\n1 209 211\\n1 210 212\\n1 211 213\\n1 212 214\\n1 213 215\\n1 214 216\\n1 215 217\\n1 216 218\\n1 217 219\\n1 218 220\\n1 219 221\\n1 220 222\\n1 221 223\\n1 222 224\\n1 223 225\\n1 224 226\\n1 225 227\\n1 226 228\\n1 227 229\\n1 228 230\\n1 229 231\\n1 230 232\\n1 231 233\\n1 232 234\\n1 233 235\\n1 234 236\\n1 235 237\\n1 236 238\\n1 237 239\\n1 238"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\n\"\"\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n') == '2\\n6\\n-1\\n7'\n\"\"\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"6\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"-1\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5') == '2\\n6\\n-1\\n7'\n\"\"\"\n\nimport sys\nimport numpy as np\nfrom collections import Counter"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"6\\n6\\n-1\\n7\"\nassert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"6\\n6\\n-1\\n7\"\nassert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"6\\n6\\n-1\\n7\"\nassert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"6\\n6\\n-1\\n7\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\"\"\") == \"2\"\nassert solution(\"\"\"5 2\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\"\"\") == \"6\"\nassert solution(\"\"\"5 2\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\"\"\") == \"-1\"\n\n\"\"\"\nn, k = map(int, stdin.readline().split())\nprice = list(map(int, stdin.readline().split()))\nprice.sort()\n\nd = set()\n\nfor i in range(n):\n    for j in range(i+1, n):\n        if price[i] - price[j] <= k:\n            d.add(price[i] - price[j])"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42 4\") == \"3\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42 4 8 15 16 8 16 23 15 16 42 23 42 4\") == \"3\"\n\nprint('The code ran Correctly')\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8 15 16 23') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 8 15 16 23') == 5\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == 0\n\"\"\""
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42 4 4 8 15 16 23\") == \"6\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42 4 4 8 15 16 23 16 16 8 16 23 15 16 42 23 42\") == \"12\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42') == '0'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '3'\nassert solution('4 8 4 8 15 16 16 23 15 16 42 23 42') == '3'\nassert solution('4 8 4 8 8 15 16 16 23 15 16 42 23 42') == '3'\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('4 8 15 16 23') == 5\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"3\""
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42') == '0'\nassert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '3'\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n5\n4 8 15 16 23\n''') == '5'\n\nassert solution('''\n12\n4 8 4 8 15 16 8 16 23 15 16 42 23 42\n''') == '3'\n\nassert solution('''\n15\n4 8 4 8 15 16 8 16 23 15 16 42 23 42\n''') == '0'\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5') == '0'\nassert solution('13 42') == '3'\nassert solution('18 4') == '2'\nassert solution('1337 420') == '2'\nassert solution('123456789 1000000000') == '9150'\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13 42') == '0'\nassert solution('5 5') == '0'\nassert solution('1337 420') == '2'\nassert solution('123456789 1000000000') == '9150'\nassert solution('100500 9000') == '87654322'\n\"\"\""
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5\\n13 42') == '0'\nassert solution('13 37\\n18 4') == '3'\n\"\"\""
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\\n3\"\nassert solution(\"13 37\\n100 500\") == \"2\\n92\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"87654322\\n9150\"\n\"\"\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5\\n13 42') == '0'\nassert solution('13 37\\n42 100') == '3'\nassert solution('123456789 1000000000\\n100500 9000') == '92'\nassert solution('100500 9000') == '87654322'\n\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10000000)\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\") == \"0\"\nassert solution(\"13 42\") == \"3\"\nassert solution(\"18 4\") == \"2\"\nassert solution(\"1337 420\") == \"92\"\nassert solution(\"123456789 1000000000\") == \"87654322\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\") == \"0\"\nassert solution(\"13 42\") == \"3\"\nassert solution(\"18 4\") == \"2\"\nassert solution(\"1337 420\") == \"92\"\nassert solution(\"123456789 1000000000\") == \"87654322\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\"\nassert solution(\"13 37\\n19 4\") == \"3\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"92\"\nassert solution(\"100500 9000\\n1 1\") == \"87654322\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\\n3\"\nassert solution(\"13 37\\n100500 9000\") == \"2\\n92\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"8\\n87654322\"\nassert solution(\"1337 420\\n123456789 1000000000\") == \"2\\n9150\"\n\n\"\"\""
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000''') == '0\\n3\\n2\\n92\\n87654322\\n9150'\nprint('Test success!')\n\n\"\"\""
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n\n\n---"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\nassert solution(\"6 2 1\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\nassert solution(\"5 2 1\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\nassert solution(\"7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\n7 3 1\\"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\\n\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n\n\"\"\"\nfrom functools import reduce\nimport operator"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\\n\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\\n\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\nassert solution(\"6 14 195238461872\\n3 10 991542\\n2 0 329295212\\n\") == \"8\\n0\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 12345\") == '12339'\nassert solution(\"5 0 4\") == '0'\nassert solution(\"10 5 15\") == '15'\nassert solution(\"17 8 54321\") == '54306'\nassert solution(\"499999993 9 1000000000\") == '999999954'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 12345\") == \"12339\"\nassert solution(\"5 0 4\") == \"0\"\nassert solution(\"10 5 15\") == \"15\"\nassert solution(\"17 8 54321\") == \"54306\"\nassert solution(\"499999993 9 1000000000\") == \"999999995\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '7 2\\n' + '1 2 2 3 2 4 10\\n'\n    ) == '6'\n\nassert solution(\n    '8 2\\n' + '1 2 2 3 2 4 6 10\\n'\n    ) == '8'\n\nassert solution(\n    '7 3\\n' + '1 2 2 3 2 4 5\\n'\n    ) == '4'\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == '6'\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == '8'\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == '4'\n\n\"\"\""
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\n\nassert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n7 2\n1 2 2 3 2 4 10\n\"\"\") == '6'\nassert solution(\n\"\"\"\n8 2\n1 2 2 3 2 4 6 10\n\"\"\") == '8'\nassert solution(\n\"\"\"\n7 3\n1 2 2 3 2 4 5\n\"\"\") == '4'\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3\") == \"2\"\nassert solution(\"7 2\") == \"6\"\nassert solution(\"8 2\") == \"8\"\nassert solution(\"7 3\") == \"4\""
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"6 2\\n1 2 2 3 2 4 10\"\n) == \"6\"\nassert solution(\n    \"8 2\\n1 2 2 3 2 4 6 10\"\n) == \"8\"\nassert solution(\n    \"7 3\\n1 2 2 3 2 4 5\"\n) == \"4\"\nprint(\"You are awesome!\")"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == 6\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == 8\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == 4\n\nprint(\"PASSED\")\n\n\"\"\""
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == '6'\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == '8'\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == '4'\nassert solution(\"7 4\\n1 2 2 3 2 4 5\") == '4'\nassert solution(\"8 5\\n1 2 2 3 2 4 5\") == '5'\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABC\") == \"abc\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abc') == 'abc'\nassert solution('abBc') == 'Abbc'\nassert solution('aBbc') == 'Abbc'\nassert solution('aBbcE') == 'AbbcE'\nassert solution('aBbcEf') == 'AbbcEf'\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC\") == \"abc\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"abcABC\") == \"abcabc\"\nassert solution(\"abcABC123\") == \"abcabc123\"\nassert solution(\"ABC123\") == \"abc123\"\n\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('AB') == 'aB'\nassert solution('ABC') == 'aBC'\nassert solution('ABCD') == 'aBCD'\n\"\"\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abc') == 'aBC'\nassert solution('ABC') == 'AbC'"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC\", 1) == \"aBC\"\nassert solution(\"ABc\", 1) == \"Abc\"\nassert solution(\"abC\", 1) == \"abC\"\nassert solution(\"ABc\", 2) == \"AbC\"\nassert solution(\"ABc\", 3) == \"Abc\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('ABK') == 'abk'\n\"\"\"\nimport sys"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABC') == 'abc'\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC\", 1) == \"aBC\"\nassert solution(\"ABC\", 2) == \"AbC\"\nassert solution(\"ABC\", 3) == \"AbC\"\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 1\nABC''') == 'abc'\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\n\"\"\"\n) == \"3\\n4\\n6\\n1\\n5\\n2\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40') == '3\\n4\\n6\\n1\\n5\\n2'\nassert solution('moscow 10\\nkazan 50\\nkhabarovsk 20\\nkazan 35\\nmoscow 60\\nkhabarovsk 40') == '4\\n6\\n3\\n1\\n5\\n2'\nassert solution('moscow 10\\nkazan 35\\nkhabarovsk 20\\nkazan 50\\nmoscow 60\\nkhabarovsk 40') == '4\\n6\\n1\\n5\\n3\\n2'\nassert solution('moscow 10\\nkazan 35\\nkhabarovsk 20\\nkazan 50\\nmoscow 40\\nkhabarovsk 20') == '4\\n6\\n1\\n3\\n5\\n2'\nassert solution('moscow 20\\nkazan 40\\nkhabarovsk 50\\nkazan 35\\nmoscow 40\\nkhabarovsk 20') == '3\\n4\\n6\\n1\\n5\\n2'\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == '3\\n4\\n6\\n1\\n5\\n2'\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\n\"\"\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\""
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40''') == '3\\n4\\n6\\n1\\n5\\n2'\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == '3\\n4\\n6\\n1\\n5\\n2'\nprint(\"PASSED\")\n\n----\n\nSample Input\n\n8\nwarsaw 80\nwarsaw 90\nwarsaw 90\nkrakow 95\nkrakow 65\nkrakow 95\nkrakow 85\nkrakow 75\n\nSample Output\n\n4\n5\n6\n3\n2\n1\n\"\"\""
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\nassert solution(\"moscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"1\\n2\\n3\\n4\\n5\"\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\") == \"2\\n3\\n1\\n4\\n5\"\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\nkazan 35\\nmoscow 20\\nkhabarovsk 40\\nkazan 35\\nmoscow 10\\nkazan 20\\nkhabarovsk 20\\nmoscow 60\") == \"6\\n4\\n3\\n2\\n5\\n1\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 900\\n\") == \"Yes\"\n\"\"\"\n\nimport sys\nimport re\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 900') == 'Yes'\n\"\"\"\n\nK, X = input().split()\nK = int(K)\nX = int(X)\n\ncoins = list(map(int, input().split()))\n\nfor i in range(len(coins)):\n    for j in range(i + 1, len(coins)):\n        if coins[i] + coins[j] == X:\n            print('Yes')\n            break\n    else:\n        continue\n    break\nelse:\n    print('No')\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 900\\n\") == 'No'\n\"\"\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 300\") == \"Yes\"\nassert solution(\"2 1000\") == \"No\"\nassert solution(\"3 100\") == \"No\"\nassert solution(\"1 1\") == \"Yes\"\nassert solution(\"2 500\") == \"No\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 900') == 'Yes'\nprint(solution('2 900'))\nassert solution('2 10') == 'No'\nprint(solution('2 10'))\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 900\") == 'Yes'\n\n\"\"\"\n\nK, X = [int(x) for x in stdin.split()]\nprint('Yes' if K * 500 >= X else 'No')\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"\nK, X = input().split()\nK, X = int(K), int(X)"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 10') == '0.145833333333'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10\") == '0.145833333333'\n\"\"\""
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\nprint(solution(\"3 10\"))\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\"\n\nfrom math import factorial, pow\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 10') == '0.145833333333'\nassert solution('1 1') == '1'\nassert solution('3 9') == '0.122222222222'\nassert solution('2 8') == '0.111111111111'\nassert solution('4 7') == '0.10101010101'\n\n------\n0.145833333333"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0'\n\nassert solution('5 10') == '0.145833333333'\nassert solution('3 5') == '0.145833333333'\nassert solution('3 10') == '0.145833333333'\nassert solution('3 50') == '0.145833333333'\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 10\") == '0.145833333333'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\") == '0.145833333333'\n\"\"\"\nimport math"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10\") == '0.145833333333'\n\"\"\"\n\n\nfrom collections import Counter\nimport numpy as np"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 10') == '0.145833333333'\n\"\"\"\n\nimport random\nimport math"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"SAT\") == 1\nassert solution(\"MON\") == 2\n\n\"\"\"\n\nS = input()\n\ncount = 0"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"SAT\") == \"1\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"SAT\") == 1\n\"\"\""
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"SAT\") == \"1\"\nassert solution(\"MON\") == \"2\"\nassert solution(\"WED\") == \"3\"\nassert solution(\"THU\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"SAT\") == \"1\"\n\"\"\""
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"SAT\") == 1\nassert solution(\"MON\") == 0\nassert solution(\"FRI\") == 4\nassert solution(\"THU\") == 3\n\"\"\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"SAT\") == 1\n\"\"\"\n\nS = input()\n\ntotal_days = 0\nfor days in range(7):\n    if S == \"SUN\":\n        break\n    if S == \"SAT\":\n        total_days += 1\n    S = \"MON\" if S == \"SUN\" else \"TUE\"\n    S = \"SUN\" if S == \"SAT\" else S\n\nprint(total_days)\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"SAT\") == \"1\"\n\"\"\""
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"SAT\") == \"1\"\nassert solution(\"SUN\") == \"1\"\nassert solution(\"TUE\") == \"0\"\nassert solution(\"WED\") == \"0\"\nassert solution(\"THU\") == \"0\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\nprint(\"Passed!\")\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\nprint(solution(\"2 10 20\"))"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10 20\\n') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\nprint(solution(input()))\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\nprint(solution(\"2 10 20\"))\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\n'''"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n1 3 2''') == '0'\nassert solution('''5\n1 3 1 1 4''') == '5'\nassert solution('''5\n1 3 2 1 4''') == '4'\nassert solution('''5\n1 3 2 1 4''') == '4'\nassert solution('''5\n1 3 2 1 4''') == '4'\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == 5\nassert solution(\"5\\n1 3 2 1 4\") == 4\nassert solution(\"3\\n4 1 2\") == 0\n\"\"\"\n\nn = int(input().strip())\narr = [int(input().strip()) for _ in range(n)]\n\narr.sort()\n\nprint(sum(arr[:n // 3]))\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == 5\nassert solution(\"5\\n1 3 2 1 4\") == 4\nassert solution(\"3\\n4 1 2\") == 0\nassert solution(\"1\\n1\") == 1\n\nassert solution(\"1\\n1\\n1\") == 1\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 2') == 0\nassert solution('1 3 1 1 4') == 5\n\"\"\"\n\n\"\"\"\nhttps://app.codility.com/demo/results/trainingKZMTHS-YV9/\nYou are given an array $d_1, d_2, \\dots, d_n$ consisting of $n$ integer numbers.\n\nYour task is to split this array into three parts (some of which may be empty) in such a way that each element of the array belongs to exactly one of the three parts, and each of the parts forms a consecutive contiguous subsegment (possibly, empty) of the original array.\n\nLet the sum of elements of the first part be $sum_1$, the sum of elements of the second part be $sum_2$ and the sum of elements of the third part be $sum_3$. Among all possible ways to split the array you have to choose a way such that $sum_1 = sum_3$ and $sum_1$ is maximum possible.\n\nMore formally, if the first part of the array contains $a$ elements, the second part of the array contains $b$ elements and the third part contains $c$ elements, then:\n\n$$sum_1 = \\sum\\limits_{1 \\le i \\le a}d_i,$$ $$sum_2 = \\sum\\limits_{a + 1 \\le i \\le a + b}d_i,$$ $$sum_3 = \\sum\\limits_{a + b + 1 \\le i \\le a + b + c}d_i.$$\n\nThe sum of an empty array is $0$.\n\nYour task is to find a way to split the array such that $sum_1 = sum_3$ and $sum_1$ is maximum possible.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in the array $d$.\n\nThe second line of the input contains $n$ integers $d_1, d_2, \\dots, d_n$ ($1 \\le d_i \\le 10^9$) \u2014 the elements of the array $d$.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum possible value of $sum_1$, considering that the condition $sum_1 = sum_3$ must be met.\n\nObviously, at least one valid way to split the array exists (use $a=c=0$ and $b=n$).\n\nInput\n5\n1 3 1 1 4\n\nOutput\n5\n\nInput\n5\n1 3 2 1 4\n\nOutput\n4\n\nInput\n3\n4 1 2\n\nOutput\n0\n\"\"\"\n\nn = int(input())\nd = list(map(int, input().split()))\na, b, c = 0, 0, 0\nma = -1\nfor i in range(n):\n    if i == 0:\n        a = d[0]\n    else:\n        a += d[i]\n    if i == 0 or i == n - 1:\n        b = a\n    else:\n        b += d[i]\n    if i == 0 or i == n - 1 or i == n - 2:\n        c = b\n    else:\n        c += d[i]\n    if i >= 1:\n        ma = max(ma, a)\n\nprint(ma)\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\\n\"\n\nassert solution(\"5\\n1 3 2 1 4\") == \"4\\n\"\n\nassert solution(\"3\\n4 1 2\") == \"0\\n\""
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 3 1 1 4\\n\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\\n\") == \"4\"\nassert solution(\"3\\n4 1 2\\n\") == \"0\"\nassert solution(\"5\\n1 3 2 1 4\\n\") == \"4\""
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\\n\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\\n\"\nassert solution(\"3\\n4 1 2\") == \"0\\n\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\\n\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\\n\"\nassert solution(\"3\\n4 1 2\") == \"0\\n\"\nassert solution(\"3\\n1 1 2\") == \"0\\n\"\n\n------ Solution ------\n\n\n\n-------\n\n\n\n------\n\n----\n\n------\n\n----\n\n\n\n------\n\n----\n\n------\n\n----\n\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 3 1 1 4\") == \"5\"\nassert solution(\"5 1 3 2 1 4\") == \"4\"\nassert solution(\"3 4 1 2\") == \"0\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '4'\nassert solution('3\\n4 1 2') == '0'\nassert solution('1\\n1') == '0'\nassert solution('2\\n4 1 2') == '0'\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000''') == '''YES\n3 2 1\nYES\n100 100 100\nNO\nNO\nYES\n1 1 1000000000'''\nprint(solution(stdin), end='')"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 3\") == \"YES\"\nassert solution(\"100 100 100\") == \"NO\"\nassert solution(\"50 49 49\") == \"YES\"\nassert solution(\"10 30 20\") == \"YES\"\nassert solution(\"1 1000000000 1000000000\") == \"YES\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\\n') == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000'\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 3\") == \"YES\"\nassert solution(\"100 100 100\") == \"YES\"\nassert solution(\"50 49 49\") == \"NO\"\nassert solution(\"10 30 20\") == \"YES\"\nassert solution(\"1 1000000000 1000000000\") == \"YES\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\"\"\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2 3') == 'YES'\nassert solution('100 100 100') == 'NO'\n\"\"\""
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\nprint(solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\"))\n\"\"\"\n\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\nassert solution(\"5\\n7 5 9\\n19 15 19\\n20 16 21\\n8 7 15\\n14 11 13\") == \"NO\\nNO\\nNO\\nNO\\nNO\"\nassert solution(\"5\\n7 5 9\\n19 15 19\\n20 16 21\\n8 7 15\\n14 11 13\") == \"NO\\nNO\\nNO\\nNO\\nNO\"\nassert solution(\"5\\n7 5 9\\n19 15 19\\n20 16 21\\n8 7 15\\n14 11 13\") == \"NO\\nNO\\nNO\\nNO\\nNO\"\nassert solution(\"5\\n7 5 9\\n19 15 19\\n20 16 21\\n8 7 15\\n14 11 13\") == \"NO\\nNO\\nNO\\nNO\\nNO\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 6\") == \"NO\"\nassert solution(\"2 2 2\") == \"YES\"\nassert solution(\"1 1 1\") == \"YES\"\nassert solution(\"3 2 3\") == \"NO\"\nassert solution(\"3 5 7\") == \"NO\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n\"\"\"\n\n\"\"\"\nn, m, k = map(int, input().split())\nobjects = list(map(int, input().split()))\n\nboxes = [k for _ in range(m)]\n\nfor i in range(n):\n    left = boxes.index(max(boxes))\n    boxes[left] -= objects[i]\n\nprint(len(boxes))\n\"\"\"\n\n\"\"\"\nn, m, k = map(int, input().split())\nobjects = list(map(int, input().split()))\n\nboxes = [k for _ in range(m)]\n\nfor i in range(n):\n    left = boxes.index(max(boxes))\n    boxes[left] -= objects[i]\n\nprint(len(boxes))\n\"\"\""
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == '4'\nassert solution(\"5 1 4\\n4 2 3 4 1\") == '1'\nassert solution(\"5 3 3\\n1 2 3 1 1\") == '5'\n\n\"\"\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\n\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\n\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\""
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(len(input().split()))\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 2 6\n5 2 1 4 2''') == '4'\nassert solution('''5 1 4\n4 2 3 4 1''') == '1'\nassert solution('''5 3 3\n1 2 3 1 1''') == '5'\n\"\"\"\n\nfrom collections import deque, defaultdict\nfrom itertools import permutations\nfrom sys import stdin\n\nn, m, k = map(int, stdin.readline().split())\nobj_sizes = list(map(int, stdin.readline().split()))\n\npossible_positions = defaultdict(list)\n\nfor i, obj_size in enumerate(obj_sizes):\n    for box_size in range(1, k + 1):\n        if obj_size <= box_size:\n            possible_positions[box_size].append(i + 1)\n\nans = 0\n\nfor perm in permutations(possible_positions[k]):\n    in_box = deque()\n    boxes = deque([k])\n    max_size = 0\n\n    for box in perm:\n        in_box.append(box)\n        max_size += obj_sizes[box - 1]\n        boxes.append(boxes[-1] - obj_sizes[box - 1])\n\n    while in_box:\n        box = in_box.popleft()\n        boxes.popleft()\n        max_size += boxes[-1]\n\n    ans = max(ans, max_size)\n\nprint(ans)\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\nassert solution('5 5 4\\n4 2 1 2 4') == '5'\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 21\n\"\"\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacaba') == 12\nassert solution('aaaaaaa') == 0\nassert solution('abcdefghijklmnopqrstuvwxyz') == 26 ** 2\n\"\"\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abba\") == \"2\"\nassert solution(\"abacaba\") == \"3\"\nassert solution(\"abac\") == \"0\"\nassert solution(\"abacabaabacaba\") == \"7\"\nassert solution(\"a\") == \"1\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abacaba') == 12\nassert solution('aaaaaaa') == 0\nassert solution('sadfaasdda') == 21\nassert solution('f a d') == 0\nassert solution('sadf a sdda') == 21\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 2\nabacaba\na b''') == 12\nassert solution('''10 3\nsadfaasdda\nf a d''') == 21\n\n'''"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(solution('aaaaaaa')) == 21\nassert solution(solution('sadfaasdda')) == 0\nassert solution(solution('abc')) == 3\nassert solution(solution('abcd')) == 7\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == \"12\"\nassert solution(\"aaaaaaa\") == \"0\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n5\\n1 2 3 -1 -2') == '2'\nassert solution('4\\n4\\n1 2 3 -1 -2') == '-1'\nassert solution('4\\n6\\n-1 -2 -1 -3') == '-1'\nassert solution('4\\n7\\n-1 -1000000000 1 -1000000000 1 -1000000000') == '-1000000000'\nassert solution('4\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '-2999999997'\n\n\"\"\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == \"2\"\nassert solution(\"4\\n4\\n1 2 3 -1 -2\") == \"1\"\nassert solution(\"4\\n4\\n-1 -2 -1 -3\") == \"-1\"\nassert solution(\"10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\") == \"2\"\nassert solution(\"4\\n4\\n1 2 3 -1 -2\") == \"0\"\nassert solution(\"4\\n4\\n-1 -2 -1 -3\") == \"-2999999997\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\\n\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\\n\") == \"2\\n-1\\n6\\n-2999999997\"\n\n\"\"\"\n\nimport sys\nimport os\nimport time\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == \"2\\n-1\"\nassert solution(\"4\\n4\\n-1 -2 -1 -3\") == \"-1\"\nassert solution(\"10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"6\\n-2999999997\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\n\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10**6)\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 -1 -2') == '2'\nassert solution('4\\n-1 -2 -1 -3') == '-1'\nassert solution('10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '-2999999997'\nassert solution('6\\n1 -1000000000 1 -1000000000 1 -1000000000') == '-1'\n\n-----Problem-----\n\n* easy\n\nTags:\n\nCompany\nAmazon\nFacebook\nMicrosoft\nGoogle\nBloomberg\n\n\"\"\""
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 -1 -2\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"1 -2 -1 -3\") == \"-1\"\nassert solution(\"10\") == \"5\""
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\n\"\"\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 2\\n3 2\") == \"1 2\\n2 3\\n3 2\"\nassert solution(\"3 4\\n1 2\\n2 3\\n3 4\") == \"1 2\\n2 3\\n3 4\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"1 2\\n2 3\\n3 4\\n4 5\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"1 2\\n2 3\\n2 5\\n3 4\\n4 5\\n6 1\\n1 6\\n2 7\\n5 8\"\n\n\"\"\"\n\n\nclass graph:\n    def __init__(self, adj, n):\n        self.adj = adj\n        self.n = n\n        self.parents = [None]*n\n        self.path = []\n\n    def dfs(self, start):\n        self.visited[start] = True\n        self.path.append(start)\n        for node in self.adj[start]:\n            if not self.visited[node]:\n                self.dfs(node)\n        return self.path\n\n\nclass Solution:\n    def solve(self, n, m, edges):\n        def build_graph(edges):\n            adj = {}\n            for edge in edges:\n                if edge[0] in adj:\n                    adj[edge[0]].append(edge[1])\n                else:\n                    adj[edge[0]] = [edge[1]]\n                if edge[1] in adj:\n                    adj[edge[1]].append(edge[0])\n                else:\n                    adj[edge[1]] = [edge[0]]\n            return adj\n\n        g = graph(build_graph(edges), n)\n        visited = [False]*n\n        path = g.dfs(0)\n        return path\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 5\n1 2\n2 3\n3 5\n4 3\n1 5''') == '''3 5\n2 1\n3 2\n3 4'''\nassert solution('''4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4''') == '''4 1\n1 2\n1 3'''\nassert solution('''8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n''') == '''3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4'''"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n1 2\\n2 3\\n3 4\") == \"3 5\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\"\nassert solution(\"3 2\\n2 1\\n2 3\") == \"2 5\"\nassert solution(\"3 2\\n2 1\\n2 3\\n3 2\") == \"2 1\""
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n3 4\\n\") == \"3 2\\n2 1\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\""
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n\"\"\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"\"\"4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\"\"\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"\"\"8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n\"\"\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\n\n\n\n-----\n\nfrom collections import defaultdict"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\nprint('tests passed')"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5 5\n1 2\n2 3\n3 5\n4 3\n1 5\"\"\") == \"\"\"3 5\n2 1\n3 2\n3 4\"\"\"\n\nassert solution(\"\"\"4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\"\"\") == \"\"\"4 1\n1 2\n1 3\"\"\"\n\nassert solution(\"\"\"8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n\"\"\") == \"\"\"3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4\"\"\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\n\n\"\"\""
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == '3 5\\n2 1\\n3 2\\n3 4'\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == '4 1\\n1 2\\n1 3'\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == '3 2\\n2 5\\n8 5\\n6 1\\n2 7'\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == '4 1\\n1 2\\n1 3'\n\nassert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == '3 5\\n2 1\\n3 2\\n3 4'\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\n\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\\n2 3\"\n\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n\n\"\"\"\n\n\nfrom typing import Tuple, List, Dict\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n3\") == \"5\"\nassert solution(\"3\\n5\") == \"0\"\nassert solution(\"6\\n2\") == \"8\"\nassert solution(\"9\\n5\") == \"13\"\n\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n5\") == \"4\"\nassert solution(\"2\\n5\") == \"8\"\nassert solution(\"3\\n5\") == \"12\"\nassert solution(\"4\\n5\") == \"16\"\n\n\"\"\"\n\nfrom collections import Counter\nimport itertools\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('499993') == '40'\n\"\"\"\n\nimport sys\n\nfrom itertools import combinations"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n499993') == '41664916690999888'\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"499993\\n\") == \"40\"\n\"\"\"\n\nimport sys\n\nfrom typing import List\n\nDEBUG = False\ndata = sys.stdin.read().split(\"\\n\")\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"499993\") == \"41664916690999888\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('499993') == 41664916690999888\n\"\"\"\n\nimport math\nimport unittest"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('499993') == '41664916690999888'\n\"\"\""
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n5\\n499993\") == \"0\\n40\\n41664916690999888\"\nprint(solution(\"3\\n1\\n5\\n499993\"))\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"499993\") == \"41664916690999888\"\n\"\"\"\nfrom math import factorial"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\nassert solution('8 7 9 1 3 5 8 4 6 2') == '1 1 1 2 3 3 -1 1 1 4 1 1'\nassert solution('3 8 9 8 8 4 6 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4\\n') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\n\n-----Problem-----\n\n*In a country popular for train travel, you have planned some train travelling one year in advance.  The days of the year that you will travel is given as an array days.  Each day is an integer from 1 to 365.\n\nTrain tickets are sold in 3 different ways:\n\na 1-day pass is sold for costs[0] dollars;\na 7-day pass is sold for costs[1] dollars;\na 30-day pass is sold for costs[2] dollars.\nThe passes allow that many days of consecutive travel.  For example, if we get a 7-day pass on day 2, then we can travel for 7 days: day 2, 3, 4, 5, 6, 7, and 8.\n\nReturn the minimum number of dollars you need to travel every day in the given list of days.\n\n\n-----Solution-----\n\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n'''"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\nassert solution(\"10\\n2 1 3 4 2 4 3 1 2 3\") == \"2 1 1 3 3 1 -1\"\n\nassert solution(\"6\\n5 4 2 3 6 4 5\") == \"1 2 2 1 2 2 1 1\"\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\n4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\n-----TODO-----\n- replace the for loop in the solution with a one-liner\n- make the solution more efficient\n\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\n\"\"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\n\n\"\"\"\n\n\nfrom functools import reduce"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''64\n32\n97\n2\n12345''') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\nprint('Test pass.')"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"64 32 97 2 12345\") == \"YES\\n2 4 8\"\nassert solution(\"64 32 97\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('64\\n32\\n97\\n2\\n12345') == 'YES\\n2 4 8'\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('64\\n32\\n97\\n2\\n12345') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\nprint(solution('64\\n32\\n97\\n2\\n12345'))\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"64 32 97\") == \"YES 2 4 8\"\nassert solution(\"2 12345\") == \"NO\"\nassert solution(\"12345\") == \"NO\"\nassert solution(\"1\") == \"YES 1\"\n\"\"\""
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\\n\") == \"YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823\"\n\"\"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5 4 3 2 1\") == \"YES\\n2 3 5 \"\nassert solution(\"2 4 6 8\") == \"NO\"\nassert solution(\"2 4 8\") == \"YES\\n2 4 8 \"\nassert solution(\"5 7 6 2 3\") == \"NO\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\\n\") == \"YES\\n2 4 8\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"64 32 97 2 12345\") == \"YES 2 4 8\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(s=\"abba\") == 2\nassert solution(s=\"bb\") == 0\n\"\"\"\n\n\"\"\"\nCompulsory Task 3\n\nYou are given a string $s$ of even length $n$. The string consists of lowercase Latin letters only. The position of string $s$ is that the position of the last letter in the string.\n\nYou should check that the string is valid. The string is valid if and only if it contains at least three distinct letters. The third distinct letter should be 'a'.\n\nFor example, the string $s=ba$ contains only two distinct letters, so it is not valid. On the other hand, the string $s=abacaba$ contains three distinct letters, and the third one is 'a'.\n\nIn the first line of the output you should print YES if the string is valid, and NO otherwise. In the second line you should print the number of distinct letters.\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ (2\u2264n\u22642\u22c510\u200b5) \u2014 the length of the string.\n\nThe second line of the input contains a string $s$ of length $n$, which consists of lowercase Latin letters only.\n\n-----Output-----\n\nIn the first line you should print YES if the string is valid, and NO otherwise.\n\nIn the second line you should print the number of distinct letters.\n\n-----Examples-----\nInput\n4\nabacaba\n\nOutput\nNO\n3\n\nInput\n4\naa\n\nOutput\nYES\n2\n\nInput\n6\nba\n\nOutput\nYES\n2\n\"\"\"\n\n\"\"\"\nCompulsory Task 4\n\nYou are given a string $s$ of even length $n$. The string consists of lowercase Latin letters only. The position of string $s$ is that the position of the last letter in the string.\n\nYou should check that the string is valid. The string is valid if and only if it contains at least three distinct letters. The third distinct letter should be 'a'.\n\nFor example, the string $s=ba$ contains only two distinct letters, so it is not valid. On the other hand, the string $s=abacaba$ contains three distinct letters, and the third one is 'a'.\n\nIn the first line of the output you should print YES if the string is valid, and NO otherwise. In the second line you should print the number of distinct letters.\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ (2\u2264n\u22642\u22c510\u200b5) \u2014 the length of the string.\n\nThe second line of the input contains a string $s$ of length $n$, which consists of lowercase Latin letters only.\n\n-----Output-----\n\nIn the first line you should print YES if the string is valid, and NO otherwise.\n\nIn the second line you should print the number of distinct letters.\n\n-----Examples-----\nInput\n4\nabacaba\n\nOutput\nNO\n3\n\nInput\n4\naa\n\nOutput\nYES\n2\n\nInput\n6\nba\n\nOutput\nYES\n2\n\"\"\"\n\n\"\"\"\nCompulsory Task 5\n\nYou are given a string $s$ of even length $n$. The string consists of lowercase Latin letters only. The position of string $s$ is that the position of the last letter in the string.\n\nYou should check that the string is valid. The string is valid if and only if it contains at least three distinct letters. The third distinct letter should be 'a'.\n\nFor example, the string $s=ba$ contains only two distinct letters, so it is not valid. On the other hand, the string $s=abacaba$ contains three distinct letters, and the third one is 'a'.\n\nIn the first line of the output you should print YES if the string is valid, and NO otherwise. In the second line you should print the number of distinct letters.\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ (2\u2264n\u22642\u22c510\u200b5) \u2014 the length of the string.\n\nThe second line of the input contains a string $s$ of length $n$, which consists of lowercase Latin letters only.\n\n-----Output-----\n\nIn the first line you should print YES if the string is valid, and NO otherwise.\n\nIn the second line you should print the number of distinct letters.\n\n-----Examples-----\nInput\n4\nabacaba\n\nOutput\nNO\n3\n\nInput\n4\naa\n\nOutput\nYES\n2\n\nInput\n6\nba\n\nOutput\nYES\n2\n\"\"\"\n\n\"\"\"\nCompulsory Task 6\n\nYou are given a string $s$ of even length $n$. The string consists of lowercase Latin letters only. The position of string $s$ is that the position of the last letter in the string.\n\nYou should check that the string is valid. The string is valid if and only if it contains at least three distinct letters. The third distinct letter should be 'a'.\n\nFor example, the string $s=ba$ contains only two distinct letters, so it is not valid. On the other hand, the string $s=abacaba$ contains three distinct letters, and the third one is 'a'.\n\nIn the first line of the output you should print YES if the string is valid, and NO otherwise. In the second line you should print the number of distinct letters.\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ (2\u2264n\u22642\u22c510\u200b5) \u2014 the length of the string.\n\nThe second line of the input contains a string $s$ of length $n$, which consists of lowercase Latin letters only.\n\n-----Output-----\n\nIn the first line you should print YES if the string is valid, and NO otherwise.\n\nIn the second line you should print the number of distinct letters.\n\n-----Examples-----\nInput\n4\nabacaba\n\nOutput\nNO\n3\n\nInput\n4\naa\n\nOutput\nYES\n2\n\nInput\n6\nba\n\nOutput\nYES\n2\n\"\"\"\n\n\"\"\"\nCompulsory Task 7\n\nYou are given a string $s$ of even length $n$. The string consists of lowercase Latin letters only. The position of string $s$ is that the position of the last letter in the string.\n\nYou should"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abba') == 2\nassert solution('ababab') == 0\nassert solution('aa') == 1\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bbbb\") == 2\nassert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\n\n\"\"\""
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abb\") == 1\nassert solution(\"abba\") == 0\nassert solution(\"ba\") == 1\nassert solution(\"abbaabbaabb\") == 0\nassert solution(\"ababb\") == 2\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abba\") == 2, \"WA\"\nassert solution(\"ababab\") == 0, \"WA\"\nassert solution(\"aa\") == 1, \"WA\"\nassert solution(\"aaa\") == 0, \"WA\"\nassert solution(\"abaa\") == 2, \"WA\"\n\n\"\"\"\n\nn = int(input())\nstring = input()\n\ncount = 0\nfor i in range(0, n, 2):\n    if string[i] == 'a':\n        count += 1\n    if string[i+1] == 'a':\n        count -= 1\n\nprint(count)\nprint(string[0:n:2])\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"bbbb\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"babababababababababab\") == 5\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"bbbb\") == 2\nassert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abba') == 2\nassert solution('ababab') == 0\nassert solution('aa') == 1\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abbbaabbbb\") == \"2 abbabba\"\nassert solution(\"abb\") == \"0 abb\"\nassert solution(\"ababab\") == \"0 ababab\"\nassert solution(\"abbbbbb\") == \"2 abbabba\"\nassert solution(\"abbba\") == \"2 abbabba\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bbbb\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"ba\") == 0\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nn = int(input())\ns = input()"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n\"\"\""
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n0') == '1'\nassert solution('2\\n3\\n3\\n3') == '6'\nassert solution('2\\n3\\n1\\n2\\n3\\n3\\n1\\n2') == '9'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n\"\"\"\nimport sys\nimport itertools\nfrom typing import List, Tuple\n\nsys.setrecursionlimit(10 ** 5)\n\n\"\"\"\n3 4\n1 3\n2 1\n1 4\n\n2\n\n2 2\n1 4\n2 3\n\n1\n\n\"\"\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"7\\n1 0\\n2 0\\n3 2\\n0 3\\n4 3\\n1 1\\n\") == \"7\"\nassert solution(\"9\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n\") == \"15\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n\"\"\"\n\nfrom sys import stdin\nfrom itertools import combinations"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 1\\n2 1\\n3 2\\n4 2\\n3 2\\n1 3\") == \"4\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\") == \"9\"\nassert solution(\"5\\n1 1\\n2 1\\n3 2\\n4 2\\n3 2\\n1 3\") == \"15\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\nassert solution(\"6\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"4\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\nassert solution(\"2\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 2 3 4\") == \"2\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"2 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"3 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2') == '2'\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == '2'\nassert solution('3 2') == '1'\nassert solution('3 3') == '2'\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1') == '2'\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1') == '2'"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0.8 1 1.2\") == \"1.000000000000\"\nassert solution(\"6\\n2 1 3 4 5 6\") == \"24.000000000000\"\nassert solution(\"9\\n0.4 1 1.2 1.6\") == \"5.260000000000\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3) == 1\nassert solution(8) == 1.55\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '1.000000000000'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1\\n1\\n1') == '1.000000000000'\n\"\"\""
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '1.000000000000'\nassert solution('4') == '2.000000000000'\nassert solution('5') == '3.000000000000'\n\"\"\""
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n\") == '1.000000000000'\nassert solution(\"6\\n\") == '6.000000000000'\nassert solution(\"5\\n\") == '6.0000000'\nassert solution(\"7\\n\") == '7.00000000'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\nassert solution(\"0\") == \"1.000000000000\"\nassert solution(\"1.2\") == \"1.000000000000\"\nassert solution(\"0.7\") == \"1.000000000000\"\nassert solution(\"1.5\") == \"1.000000000000\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\n\"\"\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n\") == \"Hello World\\n\"\nassert solution(\"2\\n4\\n1\\n2\\n\") == \"7\\n\"\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n\") == \"Hello World\"\nassert solution(\"2\\n1\\n2\\n3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"8\"\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3\n5\n2\n\n-----Sample Output-----\n8\n\"\"\"\n\n\"\"\"\nWrite a program that takes two integers as input, A and B, and prints the sum of the two integers.\n\n-----Input-----\nGiven on a single line, the two integers A and B.\n\n-----Output-----\nPrint the sum of the two integers.\n\n-----Sample Input-----\n3"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == 'Hello World'\nassert solution('2\\n3\\n4\\n5\\n') == '9'\nassert solution('2\\n5\\n7\\n9\\n') == '16'\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 'Hello World\\n'\nassert solution('2\\nA\\nB') == '3\\n'\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'Hello World'\n\nprint(solution('1'))\n\nassert solution('1') == 'Hello World'\n\nassert solution('2') == '3'\n\nassert solution('A') == '10'\n\nassert solution('B') == '11'"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 'Hello World\\n'\nassert solution('2\\na\\nb') == '3\\n'\n\"\"\"\n\nn = input()"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\n\nassert solution(\"1\\n1\") == \"Hello World\\nHello World\"\nassert solution(\"2\\n3\\n3\\n9\") == \"12\\n6\\n9\\n18\"\n\"\"\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123\") == \"123\"\nassert solution(\"334\") == \"334\"\nassert solution(\"4321\") == \"4321\"\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3') == '3333'\nassert solution('5 4') == '4444'\n\na, b = map(int, stdin.split())\n\na = int(a)\nb = int(b)\n\nprint(str(a) * b)\n\n\"\"\"\n\n\"\"\"\nProblem\n\nYou are given two strings s and t. You can perform the following operations:\n\nInsert a character c into s at position i.\nDelete the character at position i in s.\nReplace the character at position i in s with another character d.\nCount the number of distinct operations you must perform on s to transform it into t.\n\nFor example, transforming s = \"abc\" into t using the following operations:\n\nInsert a, delete a, replace c with d, insert d, delete d.\nWill take 3 operations.\n\n---Problem---\nFind the minimum number of operations required to transform string s into string t.\n\nConstraints\n- 1 \\leq s.length \\leq 100\n- 1 \\leq t.length \\leq 100\n- 1 \\leq s[i].length \\leq 1\n- 1 \\leq t[i].length \\leq 1\n- All characters in s and t are lowercase English letters.\n\nInput\n- The first line of input contains a single integer n (1 \\leq n \\leq 100) \u2014 the number of strings.\n- The next n lines contain two strings, s and t.\n\nOutput\n- Print a single integer \u2014 the minimum number of operations to transform s into t.\n\nSample Input\n2\na\nb\na\nc\n\nSample Output\n2\n\nInput\n2\na\nb\n\nOutput\n0\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"3333\"\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3') == '3333'\n\"\"\"\n\na, b = input().split()\n\na = int(a)\nb = int(b)"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"3333\"\n\"\"\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3') == '3333'\n\n\"\"\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n4 3\n\"\"\") == \"3333\"\n\n----\na b\n\na x\nb y\n\na x + b x = a * b\na y + b y = a * b\na x + b y = a * b\na y + b x = a * b\n\n1 2 3 4\n\n1 x x x\n2 y y y\n3 z z z\n4 t t t\n\n1 x x x + 1 x x x = 1 * 1 + 2 * 1 = 3\n1 x x x + 2 y y y = 1 * 2 + 2 * 2 = 4\n1 x x x + 3 z z z = 1 * 3 + 2 * 3 = 5\n1 x x x + 4 t t t = 1 * 4 + 2 * 4 = 8\n\n2 3 4\n\n2 x x x\n3 y y y\n4 z z z\n5 t t t\n\n2 x x x + 2 x x x = 2 * 2 + 3 * 2 = 6\n2 x x x + 3 y y y = 2 * 3 + 3 * 3 = 9\n2 x x x + 4 z z z = 2 * 4 + 3 * 4 = 12\n2 x x x + 5 t t t = 2 * 5 + 3 * 5 = 15\n\n3 4\n\n3 x x x\n4 y y y\n5 z z z\n6 t t t\n\n3 x x x + 3 x x x = 3 * 3 + 4 * 3 = 12\n3 x x x + 4 y y y = 3 * 4 + 4 * 4 = 16\n3 x x x + 5 z z z = 3 * 5 + 4 * 5 = 20\n3 x x x + 6 t t t = 3 * 6 + 4 * 6 = 24\n\n4 5\n\n4 x x x\n5 y y y\n6 z z z\n7 t t t\n\n4 x x x + 4 x x x = 4 * 4 + 5 * 4 = 20\n4 x x x + 5 y y y = 4 * 5 + 5 * 5 = 25\n4 x x x + 6 z z z = 4 * 6 + 5 * 6 = 30\n4 x x x + 7 t t t = 4 * 7 + 5 * 7 = 35\n\n5 6\n\n5 x x x\n6 y y y\n7 z z z\n8 t t t\n\n5 x x x + 5 x x x = 5 * 5 + 6 * 5 = 30\n5 x x x + 6 y y y = 5 * 6 + 6 * 6 = 36\n5 x x x + 7 z z z = 5 * 7 + 6 * 7 = 42\n5 x x x + 8 t t t = 5 * 8 + 6 * 8 = 48\n\n6 7\n\n6 x x x\n7 y y y\n8 z z z\n9 t t t\n\n6 x x x + 6 x x x = 6 * 6 + 7 * 6 = 42\n6 x x x + 7 y y y = 6 * 7 + 7 * 7 = 49\n6 x x x + 8 z z z = 6 * 8 + 7 * 8 = 56\n6 x x x + 9 t t t = 6 * 9 + 7 * 9 = 63\n\n7 8\n\n7 x x x\n8 y y y\n9 z z z\n10 t t t\n\n7 x x x + 7 x x x = 7 * 7 + 8 * 7 = 56\n7 x x x + 8 y y y = 7 * 8 + 8 * 8 = 64\n7 x x x + 9 z z z = 7 * 9 + 8 * 9 = 72\n7 x x x + 10 t t t = 7 * 10 + 8 * 10 = 80\n\n8 9\n\n8 x x x\n9 y y y\n10 z z z\n11 t t t\n\n8 x x x + 8 x x x = 8 * 8 + 9 * 8 = 72\n8 x x x + 9 y y y = 8 * 9 + 9 * 9 = 81\n8 x x x + 10 z z z = 8 * 10 + 9 * 10 = 90\n8 x x x + 11 t t t = 8 * 11 + 9 * 11 = 99\n\n9 10\n\n9 x x x\n10 y y y\n11 z z z\n12 t t t\n\n9 x x x + 9 x x x = 9 * 9 + 10 * 9 = 90\n9 x x x + 10 y y y = 9 * 10 + 10 * 10 = 100\n9 x x x + 11 z z z = 9 * 11 + 10 * 11 = 110\n9 x x x + 12 t t t = 9 * 12 + 10 * 12 = 120\n\n10 11\n\n10 x x x\n11 y y y\n12 z z z\n13 t t t\n\n10 x x x + 10 x x x = 10 * 10 + 11 * 10 = 110\n10 x x x + 11 y y y = 10 * 11 + 11 * 11 = 121\n10 x x x + 12 z z z = 10 * 12 + 11 * 12 = 132\n10 x x x + 13 t t t = 10 * 13 + 11 * 13 = 143\n\n11 12\n\n11 x x x\n12 y y y\n13 z z z\n14 t t t\n\n11 x x x + 11 x x x = 11 * 11 + 12 * 11 = 121\n11 x x x + 12 y y y = 11 * 12 + 12 * 12 = 132\n11 x x x + 13 z z z = 11 * 13 + 12 * 13 = 143\n11 x x x + 14 t t t = 11 * 14 + 12 * 14 = 152\n\n12 13\n\n12 x x x\n13 y y y\n14 z z z\n15 t t t\n\n12 x x x + 12 x x x = 12 * 12 + 13 * 12 = 132\n12 x x x + 13 y y y = 12 * 13 + 13 * 13 = 143\n12 x x x + 14 z z z = 12 * 14 + 13 * 14 = 152\n12 x x x + 15 t t t = 12 * 15 + 13 * 15 = 163\n\n13 14\n\n13 x x x\n14 y y y\n15 z z z\n16 t t t\n\n13 x x x + 13 x x x = 13 * 13 + 14 * 13 = 143\n13 x x x + 14 y y y = 13 * 14 + 14 * 14 = 152\n13 x x x + 15 z z z = 13 * 15 + 14 * 15 = 163\n13 x x x + 16 t t t = 13 * 16 + 14 * 16 = 176\n\n14 15\n\n14 x x x\n15 y y y\n16 z z z\n17 t t t\n\n14 x x x + 14 x x x = 14 * 14 + 15 * 14 = 152\n14 x x x + 15 y y y = 14 * 15 + 15 * 15 = 165\n14 x x x + 16 z z z = 14 * 16 + 15 * 16 = 176\n14 x x x + 17 t t t = 14 * 17 + 15 * 17 = 187\n\n15 16\n\n15 x x x\n16 y y y\n17 z z z\n18 t t t\n\n15 x x x + 15 x x x = 15 * 15 + 16 * 15 = 165\n15 x x x + 16 y y y = 15 * 16 + 16 * 16 = 192\n15 x x x + 17 z z z = 15 * 17 + 16 * 17 = 217\n15 x x x + 18 t t t = 15 * 18 + 16 * 18 = 256\n\n16 17\n\n16 x x x\n17 y y y\n18 z z z\n19 t t t\n\n16 x x x + 16 x x x = 16 * 16 + 17 * 16 = 192\n16 x x x + 17 y y y = 16 * 17 + 17 * 17 = 193\n16 x x x + 18 z z z = 16 * 18 + 17 * 18 = 218\n16 x x x + 19 t t t = 16 * 19 + 17 * 19 = 259\n\n17 18\n\n17 x x x\n18 y y y\n19 z z z\n20 t t t\n\n17 x x x + 17 x x x = 17 * 17 + 18 * 17 = 193\n17 x x x + 18 y y y = 17 * 18 + 18 * 18 = 218\n17 x x x + 19"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == '3333'\nassert solution('8 2') == '88'\nassert solution('2 1') == '21'\nassert solution('9 9') == '9999'\nassert solution('1 1') == '11'\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3') == '3333'\nassert solution('1 2') == '12'\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"3333\"\nassert solution(\"4 4\") == \"4444\"\nassert solution(\"1 2\") == \"1212\"\nassert solution(\"4 4\") == \"4444\"\nassert solution(\"1 2\") == \"1212\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a') == 'b'\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"c\") == \"d\"\nassert solution(\"z\") == \"a\"\nassert solution(\"b\") == \"c\"\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('a') == 'b'\nassert solution('c') == 'd'\nassert solution('z') == 'a'\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"b\"\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"b\") == \"c\"\nassert solution(\"c\") == \"d\"\nassert solution(\"d\") == \"e\"\nassert solution(\"e\") == \"f\"\n\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('a') == 'b'\nassert solution('c') == 'd'\nassert solution('z') == 'a'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"c\") == \"d\"\nassert solution(\"b\") == \"c\"\nassert solution(\"d\") == \"e\"\nassert solution(\"z\") == \"a\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a') == 'b'\nassert solution('z') == 'a'\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a\") == \"b\"\n\nassert solution(\"b\") == \"c\"\n\nassert solution(\"c\") == \"d\"\n\nassert solution(\"d\") == \"e\"\n\nassert solution(\"e\") == \"f\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('order', 'atc') == 'atcoder'\n\"\"\"\n\nS = stdin.split('\\n')[0]\nT = stdin.split('\\n')[1]\nprint(T + S)\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('oder','atc') == 'atcoder'\nprint(solution('oder','atc'))\n\n----End----"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"oer atc\") == \"atcoder\"\n\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(S=stdin) == stdout\n\"\"\"\n\nimport sys\nfrom typing import List\n\nS: str = sys.stdin.readline().rstrip()\nT: str = sys.stdin.readline().rstrip()"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\nassert solution(\"indivisibilities\") == \"indivisibilities\"\nassert solution(\"happiness\") == \"happiness\"\n\"\"\"\n\nS, T = map(str, stdin.readlines())\nprint(T + S)\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('oder', 'atc') == 'atcoder'\n\"\"\"\n\nS = input()\nT = input()\nprint(T + S)\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('oder atc') == 'atcoder'\n\n\"\"\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 5 7 8 2') == '0'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nb = [a[0]]\nfor i in range(1, n):\n    if a[i] % 2 == b[-1] % 2:\n        b.append(a[i])\n    else:\n        b.append(a[i])\n        b.append(a[i])\n\nprint(sum(b))\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 2 4 6 3\") == \"0\"\nassert solution(\"6 5 1 2 4 6 3\") == \"0\"\nassert solution(\"1000000 1000000\") == \"1000000\"\n\"\"\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 5 7 8 2\\n\") == \"0\"\nassert solution(\"6\\n5 1 2 4 6 3\\n\") == \"0\"\nassert solution(\"2\\n1000000 1000000\\n\") == \"1000000\"\n\nprint(\"Success\")\n\n\"\"\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5\n1 5 7 8 2\n\"\"\") == \"0\"\nassert solution(\"\"\"6\n5 1 2 4 6 3\n\"\"\") == \"0\"\nassert solution(\"\"\"2\n1000000 1000000\n\"\"\") == \"1000000\"\n\"\"\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 2 4 6 3') == '0'\nassert solution('6 5 4 3 2 1') == '0'\nassert solution('1000000 1000000') == '1000000'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 2 4 6 3\") == \"0\"\nassert solution(\"1 5 7 8 2\") == \"0\"\nassert solution(\"5 1 2 4 6\") == \"0\"\nassert solution(\"100 200 -500 200 -500\") == \"100\"\nassert solution(\"100 200 -500 200 -500 -500 200 200 -500 200 -500\") == \"0\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 5 7 8 2') == '0'\nassert solution('6\\n5 1 2 4 6 3') == '0'\nassert solution('2\\n1000000 1000000') == '1000000'\n\"\"\"\n\nfrom itertools import accumulate"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == '0'\nassert solution(\"6\\n5 1 2 4 6 3\") == '0'\nassert solution(\"2\\n1000000 1000000\") == '1000000'\nassert solution(\"5\\n1 2 4 8 5\") == '0'\nassert solution(\"5\\n5 3 3 3 3\") == '0'\n\"\"\"\n\nn = int(stdin.readline())\narr = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 2 4 6 3\") == '0'\nassert solution(\"1 2 3 5 7 8\") == '0'\nassert solution(\"1 1 1 1 1 1\") == '0'\nassert solution(\"1 1 1 1 1 1 1 1\") == '1'\nassert solution(\"1 2 3 5 6\") == '0'\n\nfrom sys import stdin"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n1 5 7 8 2''') == '0'\nassert solution('''6\n5 1 2 4 6 3''') == '0'\nassert solution('''2\n1000000 1000000''') == '1000000'\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4 2 1\\n1 3 5 4 2 7 6\") == 6\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1') == '1'\nassert solution('1 1 1') == '0'\nassert solution('1 1 2') == '0'\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1 100 99') == '1'\nassert solution('1 3 5 4 2 7 6') == '6'\n\"\"\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\") == \"5\"\nassert solution(\"1 1 100 99\\n100\") == \"1\"\nassert solution(\"7 4 2 1\\n1 3 5 4 2 7 6\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3 1\\n1 3 5 4 2 7 6\") == '6'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 1\\n1 3 5 4 2 7 6') == '6'\nassert solution('6 2 3 3\\n7 10 50 12 1 8') == '5'\nassert solution('7 2 1\\n1 3 5 4 2 7 6') == '1'\nassert solution('6 2 3 3\\n7 10 50 12 1 8') == '5'\nassert solution('5 2 1\\n1 3 5 4 2 7 6') == '1'\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 2 3 3\\n7 10 50 12 1 8\\n') == '5'\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 100 99\") == \"1\"\nassert solution(\"7 10 50 12 1 8\") == \"5\"\n\"\"\"\n\nn, a, b, k = [int(i) for i in input().split()]\nh = [int(i) for i in input().split()]\n\ns, p = 0, 0\n\nfor i in range(n):\n    hp = h[i]\n    if hp >= a:\n        p += 1\n    elif hp <= 0:\n        continue\n    else:\n        s += hp * (b - hp)\n        p += 1\n    k -= 1\n    if k < 0:\n        s += p\n        break\n\nprint(s)"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(len(str(input())))"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\"\nassert solution(\"4 2\\n0 1 2 3\") == \"0\"\nassert solution(\"8 3\\n0 1 2 3 4 5 6 7\") == \"0\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('1 2') == '0 1'\nassert solution('1 2 3') == '0 1 2'\nassert solution('1 2 3 4') == '0 1 2 3'\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n0 1 2 3\\n\") == \"3\\n0 1 2 3\\n\"\n\"\"\""
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 3 2 4\\n\") == '1 2 3 4'\nassert solution(\"4 3\\n1 3 4 5\\n\") == '1 3 4 5'\nassert solution(\"4 2\\n1 4 3\\n\") == '1 4 3'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n0 1 2 3') == '0\\n0 1 2 3'\nassert solution('6 3\\n3 2 0 6 10 12') == '3\\n3 2 0 7 10 14'\n\"\"\"\n\n\"\"\"\nSOLUTION 1\n\nclass Solution:\n    def min_moves(self, arr: list, n: int, m: int) -> int:\n        arr_dict = dict()\n        ans = 0\n        for num in arr:\n            ans += num % m\n            if num % m in arr_dict:\n                arr_dict[num % m] += 1\n            else:\n                arr_dict[num % m] = 1\n        for val in arr_dict.values():\n            ans += n // m * val\n        return ans\n\nassert Solution().min_moves('6 3\\n3 2 0 6 10 12', 6, 3) == 3\nassert Solution().min_moves('4 2\\n0 1 2 3', 4, 2) == 0\n\"\"\"\n\nclass Solution:\n    def min_moves(self, arr: list, n: int, m: int) -> int:\n        ans = 0\n        count = n // m\n        for num in arr:\n            ans += num % m\n            count += num % m\n        return ans + (count - n) * count // 2\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n0 1 2 3') == '0\\n0 1 2 3'\nassert solution('4 2\\n0 1 2 3') == '0\\n0 1 2 3'\nassert solution('4 1\\n0 1 2 3') == '0\\n0 1 2 3'\nassert solution('4 1\\n0 1 2 3\\n0 1 2 3') == '0\\n0 1 2 3'\nassert solution('4 0\\n0 1 2 3') == '0\\n0 1 2 3'\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\nc = [0 for _ in range(m)]\n\nfor i in range(n):\n    c[a[i] % m] += 1\n\nfor i in range(m - 1):\n    c[i + 1] += c[i]\n\nans = n\nfor i in range(m):\n    ans = min(ans, c[i] * (n // m))\n\nprint(ans)\nprint(*[a[i] + ans - 1 for i in range(n)])\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 3 5 7 9\\n\") == '3'\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n0 1 2 3\") == \"0\\n0 1 2 4\"\nassert solution(\"5 3\\n0 1 2 3 4\") == \"0\\n1 2 4 6\"\nassert solution(\"6 3\\n0 1 2 3 4 5\") == \"1\\n2 4 7 10\"\nassert solution(\"7 3\\n0 1 2 3 4 5 6\") == \"2\\n3 5 8 13\"\nassert solution(\"8 3\\n0 1 2 3 4 5 6 7\") == \"3\\n4 7 11 16\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 3\\n3 2 0 6 10 12') == '3'\nassert solution('4 2\\n0 1 2 3') == '0'"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3''') == '8'\nassert solution('''5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n''') == '20'"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n\"\"\""
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n\"\"\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n1\\n2\\n2\\n3\\n1\\n2\\n1\\n4\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n3\\n1\\n4\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n1\\n2\\n1\\n5\\n1\\n3\\n1\\n4\\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 0 2 0') == '8'\n'''"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'''5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n'''\n) == '8'\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n3 5\\n4 2\\n2 5\\n\") == \"20\""
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(example1) == 8\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\") == \"YES\"\nassert solution(\"4\\n1 1 1 1 1\\n2\\n10 5 1 10 5 1 1 1\") == \"NO\"\n\"\"\"\n\nfrom collections import defaultdict, deque\nimport itertools"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 1 1 1\\n1\") == 'YES'\nassert solution(\"2\\n1 1 1 1\\n10000 10000 10000 10000\") == 'NO'\nassert solution(\"5\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\") == 'YES'\nassert solution(\"5\\n1 1 10 10\\n2\\n1 1 1 1 1 1 1 1\\n1\") == 'YES'\nassert solution(\"5\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n10000 10000 10000 10000\") == 'NO'\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2\\n1 1 1 1 1\\n1\\n1\\n1 1 1 1 1\") == \"NO\"\nassert solution(\"4\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\") == \"YES\"\nassert solution(\"4\\n1\\n1 1 1 1 1\") == \"YES\"\nassert solution(\"4\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n10000 10000 10000 10000\") == \"NO\"\nassert solution(\"4\\n2\\n1 1 1 1 1\\n1\\n1 1 1 1 1\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\nprint(solution(\"5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\"))\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\"\n) == \"YES\\nYES\\nNO\\nYES\\nYES\\n\"\n\n-----Test Case-----\nTest 1\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\nNO\n\nTest 2\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\nNO\n\nTest 3\n\nInput\n1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 4\n\nInput\n2\n1\n10000 10000 10000 10000\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\nYES\n\nTest 5\n\nInput\n3\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nNO\nYES\nYES\n\nTest 6\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\nNO\n\nTest 7\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\nNO\n\nTest 8\n\nInput\n1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 9\n\nInput\n1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 10\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\nYES\n\nTest 11\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\nNO\n\nTest 12\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\nNO\n\nTest 13\n\nInput\n1\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 14\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 15\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 16\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 17\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\nYES\n\nTest 18\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 19\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 20\n\nInput\n1\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\n\nTest 21\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 22\n\nInput\n1\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 23\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 24\n\nInput\n1\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nYES\n\nTest 25\n\nInput\n1\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 26\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\nOutput\nNO\n\nTest 27\n\nInput\n2\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'YES'\nassert solution('1 1 1 1 1 1 1 1') == 'NO'\nassert solution('2 10 5 2 10 1 1 2 5') == 'YES'\nassert solution('1 1 1 1 1 1 1 1') == 'NO'\nassert solution('2 10 5 1 10 5 1 1 1') == 'YES'\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1''') == '''YES\nYES\nNO\nYES\nYES'''\n\"\"\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\\n') == 'YES\\nYES\\nNO\\nYES\\nYES'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n''') == 'YES\\nYES\\nNO\\nYES\\nYES\\n'\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6 5\") == \"3\"\n\"\"\"\n\n\nfrom heapq import heappop, heappush\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 0\") == \"3\"\nassert solution(\"4 4 1\") == \"3\"\nassert solution(\"4 4 2\") == \"4\"\nassert solution(\"4 4 3\") == \"4\"\nassert solution(\"4 4 4\") == \"0\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5') == '3'\nassert solution('7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1') == '9'\nprint(solution(input()))\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 10 4') == '1'\nassert solution('7 15 18') == '8'\n\n\"\"\""
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1\\n2 3 1\\n1 3 1\\n1 2 1\\n2 1 1\\n3 1 1\\n1 3 1\\n1 2 1\\n3 1 1\\n1 1 1\\n\") == \"3\"\nassert solution(\"4 3 1\\n3 2 1\\n2 3 1\\n3 1 1\\n1 3 1\\n2 1 1\\n3 1 1\\n1 1 1\\n2 1 1\\n3 2 1\\n1 3 1\\n2 2 1\\n\") == \"7\"\nassert solution(\"5 6 1\\n3 4 1\\n2 5 1\\n3 5 1\\n4 5 1\\n2 3 1\\n1 4 1\\n1 3 1\\n1 2 1\\n4 1 1\\n1 5 1\\n3 2 1\\n5 4 1\\n3 1 1\\n\") == \"3\"\nassert solution(\"5 5 1\\n2 4 1\\n3 4 1\\n4 5 1\\n5 2 1\\n1 2 1\\n2 5 1\\n2 3 1\\n3 4 1\\n4 1 1\\n1 5 1\\n1 3 1\\n3 2 1\\n3 5 1\\n2 1 1\\n\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 10\\n1 2 1\\n1 3 1\\n2 3 1\\n2 4 1\") == \"3\"\nassert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == \"9\"\nprint('Test pass.')"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4 2\\n1 3 1\\n3 2 1') == 2\nassert solution('5 2 3\\n1 2 1\\n2 5 1\\n1 4 1\\n3 5 1') == 4\nassert solution('3 4 4\\n1 2 1\\n3 2 1') == 4\nassert solution('4 4 2\\n1 2 1\\n3 2 1\\n3 1 3') == 3\nassert solution('5 2 5\\n1 2 1\\n2 3 1\\n1 4 1\\n3 4 1') == 3\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n\") == \"9\\n\", \"Actual: %s\" % solution(\"5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n\")\nprint('Test finished.')\n\n\"\"\"\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self, n, m):\n        self.n = n\n        self.m = m\n        self.graph = defaultdict(list)\n\n    def addEdge(self, u, v, w):\n        self.graph[u].append([v, w])\n        self.graph[v].append([u, w])\n\nclass Solution:\n    def kthSmallestShortestPath(self, graph: Graph, k: int) -> int:\n\n        visited = set()\n        queue = [(0, 0)]\n\n        count = 0\n        while queue:\n            node = queue.pop(0)\n            if node[1] in visited:\n                continue\n            else:\n                visited.add(node[1])\n                count += 1\n                if count == k:\n                    return node[0]\n\n                for neighbor in graph.graph[node[1]]:\n                    if neighbor[0] not in visited:\n                        queue.append((node[0] + neighbor[1], neighbor[0]))\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5') == '3'\nassert solution('7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1') == '9'\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 1 3 4 2') == '3 1'\n\nassert solution('6\\n1 5 12 13 2 15') == '7 2'\n\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\n\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\n\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\nassert solution(\"1\\n1\") == \"1 1\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1\"\nassert solution(\"6\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\nassert solution(\"5\\n1 5 2 6 3\") == \"4 2\\n1 2 1 2\""
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n\nprint(\"Hoho, you're doing pretty good. Time to check it!\")\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\", \"case1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\", \"case2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\", \"case3\""
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == '3 1\\n1 1 1 1 1'\nassert solution(\"6\\n1 5 12 13 2 15\") == '7 2\\n2 2 1 1 2 1'\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == '7486 3\\n3 3 3 2 2 2 2 1 1 1'\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 1 3 4 2') == '3 1'\nassert solution('6\\n1 5 12 13 2 15') == '7 2'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3'"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '4'\nassert solution('4999') == '4 9 9 9'\nassert solution('7') == '7'\nassert solution('7999') == '4 9 9 9 9 9'\nassert solution('10000') == '1 9 9 9 9 9 9 9 9 9 9 9 9'\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2\\n1\") == \"2 1\"\nassert solution(\"4\\n7\\n9\\n9\\n9\") == \"3 1\"\nassert solution(\"5\\n10\\n10\\n10\\n10\") == \"1 2\"\nassert solution(\"5\\n8\\n9\\n9\\n9\") == \"1 4\"\nassert solution(\"5\\n7\\n9\\n9\\n9\") == \"1 2\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n9876\") == \"9\"\nassert solution(\"5009\") == \"5 9\"\n\"\"\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5\n5009\n7\n9876\n10000\n10\n\"\"\") == '5 9'\nassert solution(\"\"\"5\n7\n9876\n10000\n10\n\"\"\") == '1'\n\n\"\"\"\n\uc591\uc218 n\uc744 10\uc9c4\uc218\ub85c \ubcc0\ud658\ud558\uace0 \ubc14\ub85c round\ub41c \uac83\uc744 \ubcf4\ub294 \ubb38\uc81c.\n\uadf8\ub7f0\ub370 round\ub418\ub294 \uac12\uc774 \uc911\ubcf5\ub418\uc5b4 \ucd9c\ub825\ub418\ub294 \uac83\uc744 \uc5fc\ub450\ud588\ub2e4.\n\uadf8\ub798\uc11c round \ub418\ub294 \uac12\uc744 \uc774\uc6a9\ud574\uc11c \uc8fc\uc5b4\uc9c4 \ub9ac\uc2a4\ud2b8\ub97c \uc790\ub974\uace0 \uba87 \ubc88 \ucd9c\ub825\ub418\ub294\uc9c0 \uad6c\ud558\uace0,\n\uadf8 \uac12\uc744 \ucd9c\ub825\ud55c\ub2e4.\n\"\"\""
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n5009') == '2 5000 9'\nassert solution('7\\n9876') == '1'\nassert solution('10\\n10000') == '1'\nassert solution('10\\n10') == '1'"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1\\n'\nassert solution('10\\n') == '1\\n'\nassert solution('100\\n') == '1\\n'\nassert solution('100100\\n') == '1\\n'\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('12345') == '5'\nassert solution('9') == '1'\nassert solution('92') == '1'\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n5009') == '2\\n5000 9'\nassert solution('5\\n5009') == '2\\n5000 9'\nassert solution('3\\n1000') == '1\\n1000'\nassert solution('3\\n9876') == '1\\n9 876'\nassert solution('3\\n1') == '1\\n1'\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5\n5009\n7\n9876\n10000\n10\n\"\"\") == \"\"\"2\n5000 9\n1\n7 \n4\n800 70 6 9000 \n1\n10000 \n1\n10\"\"\"\nprint(\"Cool!\")"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"\nassert solution(\"1\\n5\") == \"1\\n1\"\n\nimport re"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3 2 1\\n6\\n4 6 2 1 5 3') == '1 1 1 1 1'\nassert solution('4\\n3 2 1\\n6\\n4 6 2 1 5 3') == '3 3 3'\nassert solution('4\\n3 2 1\\n6\\n4 6 2 1 5 3') == '2 3 3 2 1 3'\n\"\"\""
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 3 2 1 2 3 1 3 2 1 2 1 3 3 2\") == \"1 1 1 1 1 3 3 3 3 3 2 2 2 2 2\"\n\"\"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_01) == test_output_01\nassert solution(test_input_02) == test_output_02\nassert solution(test_input_03) == test_output_03\n\n\"\"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n') == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\\n'\n\n\"\"\"\n\nfrom collections import Counter\nimport sys"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '1 1 1 1 1'\n\"\"\"\n\nq = int(input())\nfor i in range(q):\n    n = int(input())\n    book = list(map(int, input().split()))\n    ans = [1] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            if book[j] == book[i]:\n                ans[i] = j - i\n                break\n    print(*ans)\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 4 1 2\\n') == '1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n'\n\n\"\"\""
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 5 1 3 2\\n3\\n2 3 1\") == '1 1 1 1 1'\nassert solution(\"6\\n4 6 1 3 5 2\\n1\\n1\\n4\\n3 4 1 2\") == '3 3 3'\nassert solution(\"6\\n4 6 1 3 5 2\\n1\\n1\\n4\\n3 4 1 2\") == '2 3 3 2 1 3'\n\"\"\""
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 1 2') == '1 1 1 1'\nassert solution('4 5 3 2') == '3 3 3'\nassert solution('5 2 1 4 3') == '2 2 2 2'\nassert solution('7 3 1 2 4 5 6 7') == '1 1 1 1 2 2 2'\nassert solution('9 3 4 5 6 7 8 9 1 2') == '3 3 3 3 3 3 1 1 1'\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(s) == result\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5') == '1 2 3 4'\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\"\"\") == \"3\\n2\\n1\"\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3\\n1 2 3 4\\n3\\n1 2 2\") == '2'\n\"\"\"\nimport sys"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_data) == test_result\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 2\\n') == '2'\nassert solution('4\\n3 3\\n') == '2'\nassert solution('4\\n3 2\\n') == '2'\nassert solution('4\\n2 2\\n') == '2'\nassert solution('5\\n1 2 3 4 5\\n') == '3'\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n5\\n1 2 3 4 5') == '3'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\"\"\") == \"3\\n2\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 1 1 1\\n1\\n4\\n1 1 1 1\\n1\\n2\\n1 1 1 1\\n1\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 3 1 2\\n2 3\\n1 1 1') == '2'\n\"\"\""
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"1\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n10 4 10 15\\n1 2\\n4 3') == '0 0 1 2'\nassert solution('10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\n\n\"\"\"\nfrom typing import List\nimport sys\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == '0 0 1 2'\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == '5 4 0 5 3 3 9 0 2 5'\n\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == '0 0 1 2'\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == '5 4 0 5 3 3 9 0 2 5'"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == '0 0 1 2'\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n10 4 10 15\\n1 2\\n4 3') == '0 0 1 2'\nassert solution('10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\n\n\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 4 2 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\nassert solution('4 2\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\nassert solution('4 2\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\nassert solution('4 2\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\nassert solution('4 2\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 4 2\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n') == '5 4 0 5 3 3 9 0 2 5'\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == '0 0 1 2'\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n') == '5 4 0 5 3 3 9 0 2 5'"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\nassert solution(\"3 2\\n1 3 2\\n2 1 3\") == \"YES\\nacc\"\n\n\"\"\"\n\nimport sys\n\nn, k = list(map(int, sys.stdin.readline().strip().split()))\np, q = list(map(int, sys.stdin.readline().strip().split()))\n\ns = list(range(n))"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open('./problem12_test.txt')) == 'abb'\nassert solution(open('./problem12_test.txt')) == 'abb'\n\n\"\"\""
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"abb\"\n\n\"\"\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\"\"\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"abb\"\n\n\"\"\""
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\"\"\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n1 2 3\\n1 3 2') == 'abb'\n\n\"\"\"\n\nimport sys\n\nMAX_NUMBER_STR_LEN = 10 ** 5\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\"\"\"\n\nimport sys\nimport math\nfrom collections import defaultdict\nfrom copy import deepcopy\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\"\"\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\"\"\""
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n20 10 20') == '43'\nassert solution('4\\n10 10 10 10') == '64'\nassert solution('6\\n5 4 5 4 4 5') == '69'\nassert solution('2\\n1 4') == '3'\n\n\n\n-----Explanation-----\n\n* In the first example the cans are $1$, $2$, $3$.\n* If Vasya has already knocked down $1$ can and now he starts shooting $2$-th can, he will need $20\\cdot2 + 1 = 21$ shots to knock it down.\n* After that he will knock it down with the last shot. So the total number of shots is $1 + 21 + 21 = 43$.\n* In the second example the cans are $1$, $2$, $3$.\n* If Vasya has already knocked down $1$ can and now he starts shooting $2$-th can, he will need $10\\cdot2 + 1 = 21$ shots to knock it down.\n* After that he will knock it down with the last shot. So the total number of shots is $1 + 21 + 21 = 43$.\n* In the third example the cans are $1$, $2$, $3$.\n* If Vasya has already knocked down $1$ can and now he starts shooting $2$-th can, he will need $5\\cdot2 + 1 = 17$ shots to knock it down.\n* After that he will knock it down with the last shot. So the total number of shots is $1 + 21 + 21 = 43$.\n\n-----Theory-----\n\nThe problem can be solved as follows:\n\n1. Create a matrix $M$ of size $(n+1) \\times (n+1)$ and for $i$-th can $M_{i,j}$ is the number of shots needed to knock down $i$-th can if you start from $j$-th can. If $i=j$ then $M_{i,j}=1$.\n\n2. $i$-th can will knock down by $M_{i,j}$ shots if $j$ is the only can which has not yet been knocked down.\n\n3. $M_{i,j}$ is equal to the minimum number of shots needed to knock down all $j$-th cans starting from $i$-th can.\n\n4. $M_{i,j}$ is equal to the minimum number of shots needed to knock down all $j$-th cans starting from $i$-th can if $i<j$.\n\n5. $M_{i,j}$ is equal to 0 if $i>j$.\n\n6. The bottom-right corner of $M$ is equal to $1$, so the number of shots needed to knock down all cans is the minimum of the shots needed to knock down the first can and the shots needed to knock down the remaining cans.\n\n7. The number of shots is equal to the number of cans (denoted by $n$) times the minimum of shots needed to knock down all the cans and shots needed to knock down the remaining cans starting from the can with the maximum durability.\n\n8. This number is equal to the minimum of shots needed to knock down all the cans starting from the can with the maximum durability and shots needed to knock down all the remaining cans.\n\n9. The minimum of shots needed to knock down all the cans starting from the can with the maximum durability is equal to the minimum number of shots needed to knock down the remaining cans starting from the can with the maximum durability.\n\n10. The minimum number of shots needed to knock down the remaining cans is equal to the minimum number of shots needed to knock down the remaining cans starting from the can with the minimum durability.\n\n11. If $n=2$ and cans with the maximum durability and the remaining cans have the minimum durability, then the total number of shots is equal to the minimum of the number of shots needed to knock down the first can and the number of shots needed to knock down the remaining cans.\n\n12. The number of shots needed to knock down the remaining cans is equal to the minimum number of shots needed to knock down all the cans starting from the can with the maximum durability and shots needed to knock down the remaining cans.\n\n13. The minimum number of shots needed to knock down all the cans is equal to the minimum of the number of shots needed to knock down the first can and the number of shots needed to knock down all the remaining cans.\n\n\n-----From the paper-----\n\nThe paper is written by the Russian mathematician Aleksandr Shevelevich Shevchenko. It is often cited in the literature, and in the following pages you can find the Russian version:\n\nhttps://www.youtube.com/watch?v=XpkzNw2xlKU\n\nhttps://www.youtube.com/watch?v=k-Ezg7U79Gc\n\nhttps://www.youtube.com/watch?v=gVXSj1vw4dA\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n\nhttps://habr.com/ru/post/414546/\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n20 10 20') == '43'\nassert solution('4\\n10 10 10 10') == '69'\nassert solution('6\\n5 4 5 4 4 5') == '69'\nassert solution('2\\n1 4') == '3'\n\n----"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\""
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 20\") == '43'\n\n\"\"\"\n\nimport math\nimport time\nfrom typing import List, Tuple, Dict"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n20 10 20') == '43'\nassert solution('4\\n10 10 10 10') == '64'\nassert solution('6\\n5 4 5 4 4 5') == '69'\nassert solution('2\\n1 4') == '3'\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(input()).strip('[]')"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n20 10 20\") == '43'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\narr.sort()"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\") == \"0\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n4 2 5 1 3') == '3'\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 5 1 3\") == 3\nassert solution(\"5 1 4 2 3\") == 3\nassert solution(\"6 1 5 2 3\") == 3\nassert solution(\"1 2 3 4 5 6\") == 0\nassert solution(\"1 2 2 3 3\") == 3\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\nassert solution(\"5 4 3 2 1\") == \"1\"\nassert solution(\"7 4 3 2 1\") == \"4\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 5 1 3\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n4 2 5 1 3') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 5 1 3') == '3'\n\"\"\"\nimport sys\nimport unittest\n\nsys.setrecursionlimit(100010)\n\n\nclass Solution:\n    def solution(self, inp):\n        n = int(inp.split('\\n')[0])\n        p = list(map(int, inp.split('\\n')[1].split()))\n        p_dict = {i: p[i] for i in range(n)}\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if p_dict[j] < p_dict[i]:\n                    count += 1\n        return count\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution()\n\n    def test_solution(self):\n        self.assertEqual(self.solution('5\\n4 2 5 1 3'), '3')\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 3 3 3\") == '1'\n\"\"\"\n\n\"\"\"\nMy solution: O(N)\n\na = list(map(int, stdin.split('\\n')[1:]))\n\na_dict = {}\nfor i in a:\n    if i not in a_dict:\n        a_dict[i] = 0\n    a_dict[i] += 1\n\nc = 0\nfor k in a_dict.keys():\n    if a_dict[k] > k:\n        c += a_dict[k] - k\nprint(c)\n\"\"\"\n\n\"\"\"\nBest solution: O(N)\n\na = list(map(int, stdin.split('\\n')[1:]))\ncount = 0\nfor num in a:\n    while a.count(num) > 1:\n        count += 1\n        a.remove(num)\nprint(count)\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n3 3 3 3''') == '1'\nassert solution('''4\n3 3 3 3''') == '0'\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1''') == '0'\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1''') == '8'\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1''') == '9'\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 3 3\") == '1'\n\n\"\"\"\n\nfrom collections import Counter\nimport heapq"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nfor i in range(n):\n    count = a.count(a[i])\n    if count == 1:\n        print(0)\n        exit(0)\n\nprint(n - a.count(max(a)))\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n3 3 3 3''') == '1'\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1''') == '0'\nassert solution('''5\n1 1 2 1 3''') == '0'\n\n'''\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 3 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"4\n3 3 3 3\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"4\n3 3 1 3\"\"\"\n) == \"0\"\nassert solution(\n\"\"\"10\n5 5 5 5 5 5 5 5 5 5\"\"\"\n) == \"0\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3 3 3 3') == 1\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\n\"\"\"\n\nx_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 0 2 3 4 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nN = int(sys.stdin.readline())\ncounter = Counter(map(int, sys.stdin.readline().split()))\nprint(f\"{list(counter.keys())[list(counter.values()).index(1)]}\")\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 2 3 4 5') == '1'\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\n-----\n'''\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\nassert solution(\"0 1 2 3 4\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 2 3 4 5') == '1'\nassert solution('0 2 3 4 0') == '2'\nassert solution('0 2 3 4 5 6') == '0'\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\") == \"0\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5') == '0'\nassert solution('3 5') == '0'\nassert solution('2 5') == '1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5') == 0\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5\\n') == '0'\n\"\"\"\nimport sys"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5\\n') == '0'\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 5\n''') == '0'\nassert solution('''2 4\n''') == '0'\nassert solution('''6 10\n''') == '1'\nassert solution('''6 10\n''') == '1'\nassert solution('''5 10\n''') == '0'\n\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5') == '0'\n\"\"\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'Yes'\nassert solution('0') == 'Yes'\nassert solution('1') == 'Yes'\nassert solution('2') == 'Yes'\nassert solution('3') == 'Yes'\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 10 100\") == \"Yes\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 10 100') == 'Yes'\nassert solution('2\\n1 10 100') == 'No'\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(50000)\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"3\n1 10 100\n\"\"\") == \"Yes\"\n\nassert solution(\n\"\"\"4\n1 10 100\n\"\"\") == \"No\"\n\nassert solution(\n\"\"\"6\n1 5 6 10 2 6\n\"\"\"\n) == \"No\"\n\nassert solution(\n\"\"\"5\n1 10 100 10 100\n\"\"\"\n) == \"Yes\"\n\n\"\"\"\n2021.10.19\n\u5047\u8bbe\u6709\u4e00\u4e2a\u73af\u5f62\u7684\u8def\u5f84\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8def\u5f84\u70b9\u53ef\u4ee5\u7ecf\u8fc70\u4e2a\u6216\u80051\u4e2a\u73af\uff0c\u6bcf\u4e2a\u73af\u53ef\u4ee5\u7ecf\u8fc70\u4e2a\u6216\u80051\u4e2a\u73af\u3002\n\n\u73af\u4e0a\u7684\u70b9\u53ef\u4ee5\u7ecf\u8fc70\u4e2a\u73af\u6216\u80051\u4e2a\u73af\uff0c\u6bcf\u4e2a\u73af\u53ef\u4ee5\u7ecf\u8fc70\u4e2a\u6216\u80051\u4e2a\u73af\uff0c\u56e0\u6b64\u53ef\u4ee5\u7ecf\u8fc70\u4e2a\u6216\u80052\u4e2a\u73af\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u8def\u5f84\uff0c\u627e\u5230\u5176\u4e2d\u7684\u4e00\u4e2a\u73af\uff0c\u4ece\u5176\u4e2d\u62bd\u51fa\u4e00\u4e2a\u70b9\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u8be5\u73af\u4e0a\u7684\u6240\u6709\u70b9\uff0c\u90fd\u80fd\u7ecf\u8fc7\u8def\u5f84\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u7ecf\u8fc7\u4e86\u8be5\u70b9\u540e\uff0c\u4ecd\u7136\u6709\u8def\u5f84\u80fd\u7ecf\u8fc7\u70b9\u3002\n\n\u6c42\u8def\u5f84\u7684\u957f\u5ea6\u3002\n\n-----Constraints-----\n - 1 \u2264 N \u2264 10^5\n - 1 \u2264 C \u2264 10^9\n - 1 \u2264 A_i \u2264 10^9\n\n-----Input-----\n\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570N\uff0c\u8868\u793a\u73af\u7684\u6570\u91cf\u3002\n\n\u7b2c\u4e8c\u884c\u5305\u542bN\u4e2a\u6b63\u6574\u6570\uff0c\u4e3a\u6bcf\u4e2a\u73af\u7684\u8d77\u70b9\u3002\n\n\u7b2c\u4e09\u884c\u5305\u542bN\u4e2a\u6b63\u6574\u6570\uff0c\u4e3a\u6bcf\u4e2a\u73af\u7684\u7ec8\u70b9\u3002\n\n\u7b2c\u56db\u884c\u5305\u542b1\u4e2a\u6b63\u6574\u6570C\uff0c\u8868\u793a\u8def\u5f84\u7684\u8d77\u70b9\u3002\n\n\u7b2c\u4e94\u884c\u5305\u542bC\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u6bcf\u4e2a\u70b9\u7684\u7ec8\u70b9\u3002\n\n-----Output-----\n\u8f93\u51fa\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u3002\n\n\u6837\u4f8b\u89e3\u91ca\n\u5bf9\u4e8e\u73af\u5f62\u8def\u5f84 1->5->6->1\uff0c\u4ece\u70b9 1 \u62bd\u51fa\u4e00\u4e2a\u70b9\uff0c\u5f97\u5230\u73af\u5f62\u8def\u5f84 1->6->5->1\uff0c\u4ece\u70b9 6 \u62bd\u51fa\u4e00\u4e2a\u70b9\uff0c\u5f97\u5230\u73af\u5f62\u8def\u5f84 1->5->1\u3002\n\n\u5bf9\u4e8e\u73af\u5f62\u8def\u5f84 1->2->3->1\uff0c\u4ece\u70b9 1 \u62bd\u51fa\u4e00\u4e2a\u70b9\uff0c\u5f97\u5230\u73af\u5f62\u8def\u5f84 1->3->2->1\uff0c\u4ece\u70b9 3 \u62bd\u51fa\u4e00\u4e2a\u70b9\uff0c\u5f97\u5230\u73af\u5f62\u8def\u5f84 1->2->1\u3002\n\n\u6700\u77ed\u8def\u5f84\u4e3a 3\uff0c\u5373 1->3->1\u3002\n\n\"\"\"\n\"\"\"\n\u5982\u679c\u6709\u56db\u4e2a\u70b9\uff0c\u53ef\u4ee5\u6709\u56db\u79cd\u8def\u5f84\uff0c1\u79cd\u662f1->2->3->4->1\uff0c\u4e00\u79cd\u662f1->3->2->4->1\uff0c\u8fd8\u6709\u4e00\u79cd\u662f1->2->3->1->4\uff0c\u4e00\u79cd\u662f1->2->4->3->1\uff0c\n\u867d\u7136\u4e09\u79cd\u8def\u5f84\u7684\u957f\u5ea6\u90fd\u662f1\uff0c\u4f46\u662f\u6211\u4eec\u5e0c\u671b\u627e\u5230\u7684\u73af\u8def\u5f84\u53ea\u6709\u4e00\u4e2a\uff0c\u56e0\u6b64\u53ea\u80fd\u627e\u5230\u6700\u77ed\u8def\u5f84\u3002\n\n\u90a3\u4e48\u5047\u8bbe\u5f53\u524d\u8def\u5f84\u4e3a1->2->3->4\uff0c\u4e14\u4ee51,3,2,4\u4e3a\u8d77\u70b9\u7684\u73af\u5f62\u8def\u5f84\u4e3a1->3->2->4->1\uff0c\u5219\u6211\u4eec\u5e0c\u671b\u7ecf\u8fc7\u70b91,3,2,4\uff0c\n\u4ecd\u7136\u80fd\u5728\u8be5\u70b9\u540e\uff0c\u7ecf\u8fc7\u8def\u5f84\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u5f97\u5230\u8def\u5f841->3->2->1->4\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8be5\u70b93\u62ff\u51fa\u6765\uff0c\u5f97\u5230\u8def\u5f841->2->1\u3002\n\n\u56e0\u6b64\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u8def\u5f84\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u5176\u4e2d\u7684\u4e00\u4e2a\u73af\uff0c\u4ece\u5176\u4e2d\u62bd\u51fa\u4e00\u4e2a\u70b9\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u8be5\u73af\u4e0a\u7684\u6240\u6709\u70b9\uff0c\u90fd\u80fd\u7ecf\u8fc7\u8def\u5f84\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u7ecf\u8fc7\u4e86\u8be5\u70b9\u540e\uff0c\u4ecd\u7136\u6709\u8def\u5f84\u80fd\u7ecf\u8fc7\u70b9\u3002\n\n\u6c42\u8def\u5f84\u7684\u957f\u5ea6\u3002\n\n-----Constraints-----\n - 1 \u2264 N \u2264 10^5\n - 1 \u2264 C \u2264 10^9\n - 1 \u2264 A_i \u2264 10^9\n\n-----Input-----\n\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570N\uff0c\u8868\u793a\u73af\u7684\u6570\u91cf\u3002\n\n\u7b2c\u4e8c\u884c\u5305\u542bN\u4e2a\u6b63\u6574\u6570\uff0c\u4e3a\u6bcf\u4e2a\u73af\u7684\u8d77\u70b9\u3002\n\n\u7b2c\u4e09\u884c\u5305\u542bN\u4e2a\u6b63\u6574\u6570\uff0c\u4e3a\u6bcf\u4e2a\u73af\u7684\u7ec8\u70b9\u3002\n\n\u7b2c\u56db\u884c\u5305\u542b1\u4e2a\u6b63\u6574\u6570C\uff0c\u8868\u793a\u8def\u5f84\u7684\u8d77\ufffd"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"1 10 100\"\n) == \"Yes\"\nassert solution(\n    \"2 10 100\"\n) == \"No\"\nassert solution(\n    \"2 100 10\"\n) == \"Yes\"\nassert solution(\n    \"3 10 100\"\n) == \"No\"\nassert solution(\n    \"3 100 10\"\n) == \"Yes\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 10 100\") == \"Yes\"\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\nflag = 0\nfor i in range(0, len(arr)):\n    if flag == 1:\n        print(\"No\")\n        exit()\n    for j in range(0, len(arr)):\n        if i == j:\n            continue\n        if arr[i]*arr[j] % 4!= 0:\n            flag = 1\n            break\nprint(\"Yes\")\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\\\n1 10 100\") == \"Yes\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 10 100') == 'Yes'\n\"\"\"\n\nn = int(input())\na = [int(x) for x in input().split()]"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 10 100\") == 'Yes'\nassert solution(\"4\\n1 10 100 4\") == 'No'\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"ab\") == \"No\"\nassert solution(\"yax\") == \"No\"\nassert solution(\"xxy\") == \"No\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"xyz\") == \"No\"\n\nprint(\"All test cases passed.\")\n\n-----Explanation-----\nThe reason why we need to find the lexicographic order is that if the length of string s is less than that of string t, it must hold that s < t in the lexicographic order.\n\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".xy\") == \"Yes\"\nassert solution(\"abcd\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"atcoder\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('yxa') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\n\n\"\"\"\n\nimport sys\nimport string"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '7 5 1'\n) == 'YES'\nassert solution(\n    '3 9 17'\n) == 'NO'\n\"\"\""
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5 1\") == \"YES\""
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(stdin)) == \"YES\""
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\nassert solution(\"7 5 9\") == \"NO\"\n\"\"\"\n\nfrom sys import stdin\n\na = stdin.readline().split()\nA = int(a[0])\nB = int(a[1])\nC = int(a[2])\n\nfor x in range(1, B // A + 1):\n    if (B * x - C * x % B) % A == 0:\n        print(\"YES\")\n        exit(0)\nprint(\"NO\")\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n'''\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 5 1') == \"YES\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 5 1') == 'YES'\n\"\"\"\n\n\"\"\"\nAlgorithm:\n\n1. Get input\n2. Split into numbers\n3. Find number with sum m, and check if m % A == 0\n4. Check if m % B == 0\n5. Check if m % C == 0\n6. Check if m % C == 0\n7. If all conditions are met, print YES, else print NO\n\n\"\"\""
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 5 1') == 'YES'\nassert solution('1 1 1') == 'NO'\n\"\"\""
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\nassert solution(\"7 5 10\") == \"NO\"\nassert solution(\"4 2 1\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"1\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())\n\nprint(max(a, b) - min(a, b))\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2 2) == 1\n\"\"\"\n\na, b = map(int, stdin.readline().split())\nc = a*b - 2*(a-1)*(b-1)\nprint(c)\n\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2') == 1\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2') == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output\n\"\"\"\n\nimport math"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"1\"\n\n-----Explanation-----\n2 * 1 = 2, 2 * 2 = 4.\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n') == '1'\n\nassert solution('3 3\\n') == '9'\n\nassert solution('1 1\\n') == '0'\n\nassert solution('99 99\\n
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == 1\nassert solution(\"100 100\") == 10000\n\"\"\"\n\nimport ast"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(2, 2) == 1\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n13 3 1\n''') == '3'\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 1') == '3'\n\n-----Problem-----\n\nWrite a program to find the maximum number of people who can be seated at the table according to the given conditions.\n\nInput\nThe first line contains integers X, Y and Z separated by a space.\n\nOutput\nPrint the maximum number of people that can be seated on the table.\n\n-----Test 1-----\nX = 5, Y = 3, Z = 1\n\n-----Test 2-----\nX = 13, Y = 3, Z = 1\n\n-----Test 3-----\nX = 14, Y = 3, Z = 1\n\n-----Test 4-----\nX = 1, Y = 3, Z = 1\n\n-----Test 5-----\nX = 1, Y = 1, Z = 1\n\n-----Test 6-----\nX = 10, Y = 3, Z = 3\n\n-----Test 7-----\nX = 10, Y = 5, Z = 3\n\n-----Test 8-----\nX = 10, Y = 5, Z = 5\n\n-----Test 9-----\nX = 10, Y = 8, Z = 3\n\n-----Test 10-----\nX = 10, Y = 8, Z = 5\n\n-----Test 11-----\nX = 10, Y = 8, Z = 5\n\n-----Test 12-----\nX = 100, Y = 40, Z = 80\n\n-----Test 13-----\nX = 100, Y = 60, Z = 50\n\n-----Test 14-----\nX = 100, Y = 50, Z = 100\n\n-----Test 15-----\nX = 100, Y = 80, Z = 80\n\n-----Test 16-----\nX = 100, Y = 100, Z = 20\n\n-----Test 17-----\nX = 100, Y = 20, Z = 100\n\n-----Test 18-----\nX = 100, Y = 20, Z = 200\n\n-----Test 19-----\nX = 100, Y = 50, Z = 150\n\n-----Test 20-----\nX = 100, Y = 60, Z = 140\n\n-----Test 21-----\nX = 100, Y = 80, Z = 80\n\n-----Test 22-----\nX = 100, Y = 100, Z = 100\n\n-----Test 23-----\nX = 100, Y = 140, Z = 20\n\n-----Test 24-----\nX = 100, Y = 200, Z = 80\n\n-----Test 25-----\nX = 100, Y = 80, Z = 100\n\n-----Test 26-----\nX = 100, Y = 80, Z = 100\n\n-----Test 27-----\nX = 100, Y = 100, Z = 100\n\n-----Test 28-----\nX = 100, Y = 200, Z = 200\n\n-----Test 29-----\nX = 100, Y = 20, Z = 200\n\n-----Test 30-----\nX = 100, Y = 20, Z = 100\n\n-----Test 31-----\nX = 100, Y = 20, Z = 200\n\n-----Test 32-----\nX = 100, Y = 50, Z = 150\n\n-----Test 33-----\nX = 100, Y = 60, Z = 140\n\n-----Test 34-----\nX = 100, Y = 80, Z = 80\n\n-----Test 35-----\nX = 100, Y = 100, Z = 100\n\n-----Test 36-----\nX = 100, Y = 100, Z = 200\n\n-----Test 37-----\nX = 100, Y = 20, Z = 200\n\n-----Test 38-----\nX = 100, Y = 20, Z = 100\n\n-----Test 39-----\nX = 100, Y = 20, Z = 200\n\n-----Test 40-----\nX = 100, Y = 20, Z = 200\n\n-----Test 41-----\nX = 100, Y = 50, Z = 150\n\n-----Test 42-----\nX = 100, Y = 60, Z = 140\n\n-----Test 43-----\nX = 100, Y = 80, Z = 80\n\n-----Test 44-----\nX = 100, Y = 100, Z = 200\n\n-----Test 45-----\nX = 100, Y = 100, Z = 200\n\n-----Test 46-----\nX = 100, Y = 100, Z = 200\n\n-----Test 47-----\nX = 100, Y = 20, Z = 200\n\n-----Test 48-----\nX = 100, Y = 20, Z = 100\n\n-----Test 49-----\nX = 100, Y = 20, Z = 200\n\n-----Test 50-----\nX = 100, Y = 20, Z = 100\n\n-----Test 51-----\nX = 100, Y = 20, Z = 100\n\n-----Test 52-----\nX = 100, Y = 20, Z = 200\n\n-----Test 53-----\nX = 100, Y = 20, Z = 100\n\n-----Test 54-----\nX = 100, Y = 20, Z = 200\n\n-----Test 55-----\nX = 100, Y = 20, Z = 100\n\n-----Test 56-----\nX = 100, Y = 20, Z = 200\n\n-----Test 57-----\nX = 100, Y = 50, Z = 150\n\n-----Test 58-----\nX = 100, Y = 60, Z = 140\n\n-----Test 59-----\nX = 100, Y = 80, Z = 80\n\n-----Test 60-----\nX = 100, Y = 100, Z = 100\n\n-----Test 61-----\nX = 100, Y = 100, Z = 200\n\n-----Test 62-----\nX = 100, Y = 20, Z = 200\n\n-----Test 63-----\nX = 100, Y = 20, Z = 100\n\n-----Test 64-----\nX = 100, Y = 20, Z = 200\n\n-----Test 65-----\nX = 100, Y = 20, Z = 100\n\n-----Test 66-----\nX = 100, Y = 20, Z = 200\n\n-----Test 67-----\nX = 100, Y = 20, Z = 100\n\n-----Test 68-----\nX = 100, Y = 20, Z = 200\n\n-----Test 69-----\nX = 100, Y = 50, Z = 150\n\n-----Test 70-----\nX = 100, Y = 60, Z = 140\n\n-----Test 71-----\nX = 100, Y = 80, Z = 80\n\n-----Test 72-----\nX = 100, Y = 100, Z = 200\n\n-----Test 73-----\nX = 100, Y = 100, Z = 200\n\n-----Test 74-----\nX = 100, Y = 100, Z = 200\n\n-----Test 75-----\nX = 100, Y = 20, Z = 200\n\n-----Test 76-----\nX = 100, Y = 20, Z = 100\n\n-----Test 77-----\nX = 100, Y = 20, Z = 200\n\n-----Test 78-----\nX = 100, Y = 20, Z = 100\n\n-----Test 79-----\nX = 100, Y = 20, Z = 100\n\n-----Test 80-----\nX = 100, Y = 20, Z = 200\n\n-----Test 81-----\nX = 100, Y = 20, Z = 100\n\n-----Test 82-----\nX = 100, Y = 20, Z = 100\n\n-----Test 83-----\nX = 100, Y = 20, Z = 100\n\n-----Test 84-----\nX = 100, Y = 20, Z = 100\n\n-----Test 85-----\nX = 100, Y = 50, Z = 150\n\n-----Test 86-----\nX = 100, Y = 60, Z = 140\n\n-----Test 87-----\nX = 100, Y = 80, Z = 80\n\n-----Test 88-----\nX = 100, Y = 100, Z = 200\n\n-----Test 89-----\nX = 100, Y = 100, Z = 200\n\n-----Test 90-----\nX = 100, Y = 100, Z = 200\n\n-----Test 91-----\nX = 100, Y = 20, Z = 200\n\n-----Test 92-----\nX = 100, Y = 20, Z = 100\n\n-----Test 93-----\nX = 100, Y = 20, Z = 100\n\n-----Test 94-----\nX = 100, Y = 20, Z = 100\n\n-----Test 95-----\nX = 100, Y = 20, Z = 100\n\n-----Test 96-----\nX = 100, Y = 20, Z = 100\n\n-----Test 97-----\nX = 100"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1 1') == '3'\nassert solution('10 5 1') == '2'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('13 3 1') == '3'\nassert solution('14 3 1') == '2'\nassert solution('10 10 10') == '10'\nassert solution('1 1 1') == '1'\nassert solution('13 10 1') == '10'\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3\") == \"4\"\nassert solution(\"4 2 1\") == \"2\"\nassert solution(\"7 7 7\") == \"7\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 0\") == \"0\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1\") == \"3\"\nassert solution(\"3 2 1\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 3 2\") == \"1\"\nassert solution(\"1 3 1\") == \"2\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 6\") == \"3\"\nassert solution(\"5 6 1\") == \"3\"\nassert solution(\"8 9 2\") == \"4\"\nassert solution(\"7 9 1\") == \"4\"\nassert solution(\"10 10 3\") == \"1\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 1\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 1\") == \"3\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4') == '2'\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 0\\n3 1\\n1 3\") == \"2\"\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == 2\n\"\"\""
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4') == '2'\nassert solution('1\\n2 1\\n2 1\\n2 1') == '0'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == 2\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\") == 2\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 0\\n3 1\\n1 3\") == 2\n\"\"\""
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 4\\n1 1\\n2 2\\n3 3\") == \"2\"\n\"\"\"\n\n\"\"\"\nAnother solution\n\"\"\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3\\n') == '5'\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"> 0\\n1\\n2\\n3\") == \"6\"\nassert solution(\"> -1\\n1\\n2\\n3\") == \"4\"\nassert solution(\"> 0\\n0\\n0\\n0\") == \"0\"\nassert solution(\"> 10\\n1\\n2\\n3\") == \"10\"\nassert solution(\"> 10\\n10\\n10\\n10\") == \"10\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4\\n0 3') == '7'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4\\n0 3') == '7'\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3\\n0 2\\n\") == \"7\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n\ntest_input = \"\"\"\n8 20\n0 3\n1 7\n2 3\n3 7\n4 2\n5 5\n6 6\n7 1\n8 10\n\"\"\"\n\ntest_output = \"\"\"\n25\n\"\"\"\n\nprint(solution(test_input))\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n0 3\\n\") == \"7\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4\\n0 3') == '7'\n\"\"\"\nimport sys"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n0 2\\n3 4\\n4 6\\n\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1\\n3 1\\n2 2\\n3 2\\n1 1\\n2 3\\n3 1\\n2 3\\n1 2\\n2 2\\n3 2\\n1 3\\n2 3\\n3 3\\n1 2\\n1 2\\n3 2\\n2 2\\n3 2\\n1 3\\n2 3\\n3 3\\n1 3\\n1 3\\n3 2\\n2 2\\n3 2\\n1 1\\n1 1\\n2 1\\n3 2\\n2 1\\n3 2\\n1 2\\n2 1\\n1 3\\n3 2\\n2 1\\n3 2\\n3 2\\n1 1\\n2 1\\n3 2\\n3 2\\n1 3\\n2 3\\n3 2\\n1 1\\n2 1\\n3 2\\n1 1\\n2 1\\n3 2\\n2 1\\n1 3\\n3 2\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\\n3 2\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n') == '1'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n') == '0'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1''') == '1'\n\nassert solution('''10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n''') == '0'\n\nassert solution('''8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1''') == '1'\n\nassert solution('''10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115''') == '2'\n\nassert solution('''10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115''') == '1'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n') == '1\\n1\\n2'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n') == '0\\n2\\n1'\n\n\n\n-----Test_1-----\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n\") == \"1\\n1\\n2\\n\"\n\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == \"0\\n2\\n1\\n\"\n\"\"\"\n\n\"\"\"\nThe first line of the input contains one integer $q$ (1\u2264q\u22642\u00d710\n\u200b5\n\u200b ) \u2014 the number of queries.\n\nThen $q$ lines follow. The $i$-th line contains the $i$-th query in format as in the problem statement. It is guaranteed that queries are always valid (for query type $3$, it is guaranteed that the book in each such query is already placed, and for other types, it is guaranteed that the book was not placed before).\n\nIt is guaranteed that there is at least one query of type $3$ in the input.\n\nIn each query the constraint $1\u2264id\u22642\u00d710\n\u200b5\n\u200b  is met.\n\nYou are Python programmer, consider using PyPy instead of Python when you submit your code.\n\nOutput\nFor each query of type $3$, print the minimum number of books you need to pop from the left or from the right in such a way that the book with index $id$ will be leftmost or rightmost.\n\nThe first line contains the integer $q$ representing the number of queries of type $3$ (it is guaranteed that there is at least one query of type $3$ in the input).\n\nThen $q$ lines follow. The $i$-th line contains the $i$-th query in format as in the problem statement.\n\nIt is guaranteed that each query of type $3$ is valid.\n\nIt is guaranteed that there is at least one query of type $3$ in the input.\n\nIt is guaranteed that the answer is a correct value for each query of type $3$ (the book with index $id$ is already on the shelf to the left or right from the leftmost or rightmost existing book).\n\nIt is guaranteed that each answer is a non-negative integer.\n\nThe first line of the output contains the integer $q$ representing the number of queries of type $3$ (it is guaranteed that there is at least one query of type $3$ in the input).\n\nThen $q$ lines follow. The $i$-th line contains the $i$-th query in format as in the problem statement.\n\nIt is guaranteed that each query of type $3$ is valid.\n\nIt is guaranteed that each answer is a correct value for each query of type $3$ (the book with index $id$ is already on the shelf to the left or right from the leftmost or rightmost existing book).\n\nIt is guaranteed that each answer is a non-negative integer.\n\"\"\"\n\nfrom itertools import chain"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"\n\n\"\"\"\n\n\"\"\"\nclass Query:\n    def __init__(self, op: str, id: int) -> None:\n        self.op = op\n        self.id = id\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.left = []\n        self.right = []\n        self.left_min = []\n        self.right_min = []\n        self.is_left_min = []\n        self.left_size = 0\n        self.right_size = 0\n        self.right_max = -1\n        self.left_max = -1\n        self.prev = -1\n        self.is_right_min = False\n        self.is_left_min = False\n        \n        \n    def add(self, q: Query):\n        if q.op == 'L':\n            self.left.append(q.id)\n            self.left_min.append(q.id)\n            self.is_left_min.append(True)\n            self.left_size += 1\n            self.is_right_min = True\n            self.right_min = self.right_max + 1\n        elif q.op == 'R':\n            self.right.append(q.id)\n            self.right_min.append(q.id)\n            self.is_right_min = False\n            self.right_size += 1\n            self.left_min = self.right_max + 1\n        \n        \n    def process_query(self, q: Query):\n        if self.left_size == 0:\n            return -1\n        elif self.right_size == 0:\n            return self.left_min[-1]\n        elif q.op == 'L':\n            return self.left[-1]\n        elif q.op == 'R':\n            if self.is_right_min:\n                return self.right_min[-1]\n            else:\n                return self.right[-1]\n        \n        \n    def process_query2(self, q: Query):\n        if self.left_size == 0:\n            return -1\n        elif self.right_size == 0:\n            return self.left_min[-1]\n        elif self.is_right_min:\n            if q.op == 'L':\n                return self.right_min[-1]\n            elif q.op == 'R':\n                if self.prev >= self.left_max:\n                    return -1\n                else:\n                    self.prev = self.left_min[-1]\n                    return self.prev\n        else:\n            if q.op == 'L':\n                return self.left[-1]\n            elif q.op == 'R':\n                if self.prev >= self.left_max:\n                    return -1\n                else:\n                    self.prev = self.left_min[-1]\n                    return self.prev\n\n    \n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"\nassert solution(\"5\\nL 4\\nR 1\\nR 2\\n? 2\\nL 3\\n? 1\") == \"1\\n1\\n2\"\n\n\"\"\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1') == '1\\n1\\n2'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n') == '0\\n2\\n1'\n\n\n---"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"\nassert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '0'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '1'\nassert solution('1\\n10\\n100\\n1000\\n10000\\n100000\\n1000000\\n10000000\\n100000000\\n1000000000\\n10000000000\\n100000000000\\n1000000000000\\n10000000000000\\n100000000000000\\n1000000000000000\\n10000000000000000\\n100000000000000000\\n1000000000000000000\\n10000000000000000000\\n100000000000000000000\\n1000000000000000000000\\n100000000000000000000000\\n10000000000000000000000000\\n100000000000000000000000000\\n1000000000000000000000000000\\n10000000000000000000000000000\\n100000000000000000000000000000\\n1000000000000000000000000000000\\n10000000000000000000000000000000\\n1000000000000000000000000000000000\\n10000000000000000000000000000000000\\n100000000000000000000000000000000000\\n1000000000000000000000000000000000000\\n10000000000000000000000000000000000000\\n100000000000000000000000000000000000000\\n1000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000000000000000000000000000000000000000"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000') == '0\\n4\\n6\\n6\\n-1\\n6\\n72'\n\"\"\""
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\\n\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n7200\\n\")\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n'7\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000'\n) == '0\\n4\\n6\\n6\\n-1\\n6\\n72'\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1\") == \"0\"\nassert solution(\"4\\n2\") == \"2\"\nassert solution(\"4\\n3\") == \"3\"\nassert solution(\"4\\n4\") == \"4\"\n\n-----Explanation-----\n\nIn the first case, you can replace $1$ with $0$ using no operation.\n\nIn the second case, you can replace $1$ with $2$ using a single operation.\n\nIn the third case, you can replace $1$ with $2$ using a single operation.\n\nIn the fourth case, you can replace $1$ with $2$ using a single operation.\n\nIn the fifth case, you can replace $1$ with $3$ using a single operation.\n\nIn the sixth case, you can replace $1$ with $4$ using a single operation.\n\nIn the seventh case, it is impossible to obtain $1$ from $n$ since it is already equal to $1$.\n\n\"\"\"\n\nimport sys\nfrom typing import List, Set, Tuple, Dict\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n5\\n2\\n9\\n10\\n1\\n7\\n1\\n1\\n\") == \"6\"\nassert solution(\"1\\n10\\n12\\n14\\n16\\n2\\n3\\n4\\n6\\n2\\n4\\n8\\n5\\n10\\n1\\n7\\n1\\n1\\n\") == \"6\"\nassert solution(\"1\\n10\\n12\\n14\\n16\\n2\\n3\\n4\\n6\\n2\\n4\\n8\\n5\\n10\\n1\\n7\\n1\\n1\\n\") == \"6\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2') == '2'\nassert solution('1\\n20') == '15'\nassert solution('1\\n10') == '5'\nassert solution('1\\n30') == '14'\nassert solution('1\\n15') == '14'\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7\n1\n10\n25\n30\n14\n27\n1000000000000000000''') == '''0\n4\n6\n6\n-1\n6\n72'''\n\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '7\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\\n') == '0\\n4\\n6\\n6\\n-1\\n6\\n72\\n'\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n72\"\n\"\"\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == 'YES'\nassert solution(\"5\\n1 1 2 1\\n3\\n1 1 2 1\") == 'NO'\nassert solution(\"3\\n1 1 3\\n2\\n11 11\") == 'YES'\nassert solution(\"3\\n1 1 3\\n2\\n11 11\") == 'YES'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n1\n3\n1 1 3\n2\n11 11\n1\n100\n''') == 'YES'\nassert solution('''\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\n''') == 'YES'\nassert solution('''\n1\n3\n1 1 3\n2\n11 11\n1\n100\n''') == 'NO'\nassert solution('''\n1\n3\n1 1 3\n2\n11 11\n1\n100\n''') == 'NO'\nassert solution('''\n1\n3\n1 1 3\n2\n11 11\n1\n100\n''') == 'NO'\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\nassert solution(\"1\\n100\") == \"YES\"\nassert solution(\"2\\n11 11\\n1\\n100\") == \"NO\"\nprint('The local tests are done. Try Solution().')\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"2\\n11 11\\n1\\n100\") == \"NO\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1 3\") == 'YES'\nassert solution(\"4\\n1 1 2 1\") == 'NO'\nassert solution(\"2\\n11 11\") == 'YES'\nassert solution(\"1\\n100\") == 'NO'\n\"\"\"\nimport sys\nsys.setrecursionlimit(10 ** 6)"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2\\n3\\n1\\n1\\n2\\n3\\n4\") == \"YES\"\nassert solution(\"3\\n2\\n3\\n2\\n1\\n2\\n3\\n4\") == \"NO\"\nassert solution(\"3\\n3\\n3\\n3\\n1\\n2\\n3\\n4\") == \"NO\"\nassert solution(\"3\\n3\\n3\\n3\\n2\\n2\\n3\\n4\") == \"NO\"\nassert solution(\"3\\n3\\n3\\n3\\n2\\n2\\n2\\n4\") == \"YES\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\\n\") == \"YES\"\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\\n\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"3 3\") == \"NO\"\nassert solution(\"11 11\") == \"YES\"\nassert solution(\"1 1 3\") == \"YES\"\nassert solution(\"4 1 1 1\") == \"YES\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1 3') == 'YES'\nassert solution('2\\n2 2') == 'NO'\nassert solution('2\\n1 1 2 1') == 'YES'\nassert solution('2\\n1 1 2') == 'YES'\nassert solution('1\\n100') == 'YES'\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"bacabaa\") == 0\n\n-----Test_1-----\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nThe following sequence of changes can be made:\na_1 = b\na_3 = c\na_4 = a\na_5 = b\n\nAfter the changes the strings a and b are equal.\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nThere are no preprocess moves to make strings equal.\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\n-----Test_2-----\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nThe following sequence of changes can be made:\na_1 = z\na_2 = c\na_3 = b\na_4 = d\n\nAfter the changes the strings a and b are equal.\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nThe following sequence of changes can be made:\na_1 = b\na_2 = a\na_3 = c\na_4 = b\n\nAfter the changes the strings a and b are equal.\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\n-----Test_3-----\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nThe following sequence of changes can be made:\na_1 = z\na_2 = c\na_3 = b\na_4 = d\n\nAfter the changes the strings a and b are equal.\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nThe following sequence of changes can be made:\na_1 = b\na_2 = a\na_3 = c\na_4 = b\n\nAfter the changes the strings a and b are equal.\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nThe following sequence of changes can be made:\na_1 = z\na_2 = c\na_3 = b\na_4 = d\n\nAfter the changes the strings a and b are equal.\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bacabaa\"\n\nn = 5\na = \"zcabd\"\nb = \"dbacz\"\n\nn = 7\na = \"abacaba\"\nb = \"bac"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacaba') == 4\nassert solution('zcabd') == 0\nassert solution('dbacz') == 0\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == \"4\"\nassert solution(\"zcabd\") == \"0\"\nassert solution(\"dbacz\") == \"0\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"zcabd\") == 0\nassert solution(\"dbacz\") == 0\nassert solution(\"abacaba\") == 4\n\nassert solution(\"zbacab\") == 0\nassert solution(\"bacabz\") == 4\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == \"4\"\n\nassert solution(\"zcabd\") == \"0\"\n\nassert solution(\"bacabaa\") == \"4\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == \"4\"\nassert solution(\"zcabd\") == \"0\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"bacabaa\") == 0\nassert solution(\"zcabd\") == 0\nassert solution(\"dbacz\") == 0\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(s1) == s2\n\nassert solution(s1) == s2\n\n\"\"\"\n\n\n\nimport sys"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abacaba') == 4\nassert solution('zcabd') == 0\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\", \"bacabaa\") == 4\nassert solution(\"zcabd\", \"dbacz\") == 0\n\"\"\""
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\n2 4 5\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n\"\"\") == \"\"\"\n2\n198\n-17\n2999999997\n0\n1\"\"\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\nprint('Success')"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == '8 198 -17 2999999997 0 1'\nassert solution(\"1 1 1000000000\\n1 1 999999999\") == '0 0'\n\n\"\"\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999') == \\\n    '8\\n198\\n-17\\n2999999997\\n0\\n1'\nprint('OK')\n\"\"\"\n\nt = int(input())\n\nfor _ in range(t):\n    a, b, k = [int(i) for i in input().split()]\n    if k % 2 == 0:\n        print(a * k + b)\n    else:\n        print(a * (k-1) + b)\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8198-17299999999701\"\n\n\"\"\"\n\nfrom typing import List, Dict, Set"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8198-1729999999901\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n6 4 3\\n1 1 1000000000\\n1 1000000000 10\\n1 1 1\\n1 1 1\\n1 1 1\") == \"198\\n-17\\n2999999997\\n0\\n1\"\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 1\") == \"7\"\nassert solution(\"5 2 3\") == \"8\"\nassert solution(\"5 2 1\") == \"8\"\nassert solution(\"1 1 1000000000\") == \"0\"\nassert solution(\"1 1 999999999\") == \"1\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == '8\\n198\\n-17\\n2999999997\\n0\\n1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \\\n\"8\\n198\\n-17\\n2999999997\\n0\\n1\"\nprint('Success')\n\n----------------------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2\\n3\") == \"1\\n2\\n3\"\nassert solution(\"2\\n1\\n2\") == \"1\\n2\\n1\"\nassert solution(\"2\\n1\\n3\") == \"2\\n2\\n2\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1\") == \"1\"\nassert solution(\"4\\n2\") == \"3\"\nassert solution(\"4\\n3\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3\\n5\\n2\\n1\\n\") == \"3\\n4\\n4\\n3\\n3\\n2\\n\"\nassert solution(\"6\\n1\\n1\\n1\\n1\\n1\\n\") == \"1\\n2\\n2\\n2\\n2\\n2\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\\n') == '9\\n27\\n6561\\n19683\\n1350851717672992089'\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n30\\n3\\n4\\n20\\n2\\n18\\n1\\n9\\n') == '29'\n\"\"\"\n\nimport sys\nfrom math import log10\nfrom math import ceil"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\\n\") == \"9\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089\"\nprint(solution(\"2\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\\n\"))\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1') == '4'\nassert solution('4\\n2') == '5'\nassert solution('4\\n6') == '6'\nassert solution('4\\n13') == '7'\nassert solution('4\\n14') == '9'\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1\") == \"1\"\nassert solution(\"4\\n2\") == \"3\"\nassert solution(\"5\\n1\") == \"1\"\nassert solution(\"5\\n2\") == \"3\"\nassert solution(\"5\\n3\") == \"4\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"1\\n3\\n9\\n15\\n\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 10 8 5 3\") == 70\nassert solution(\"12 8 8 7 2\") == 77\nassert solution(\"12343 43 4543 39 123212\") == 177177\nassert solution(\"1000000000 1000000000 1 1 1\") == 999999999\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == 999999999\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n    7\n    10 10 8 5 3\n    12 8 8 7 2\n    12343 43 4543 39 123212\n    1000000000 1000000000 1 1 1\n    1000000000 1000000000 1 1 1000000000\n    10 11 2 1 5\n    10 11 9 1 10\n    \"\"\"\n) == \"\"\"\n    70\n    77\n    177177\n    999999999000000000\n    999999999\n    55\n    10\n    \"\"\"\n\n\"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b, x, y, n = map(int, stdin.readline().strip().split())\n        print(a * b if a * b <= (x * y) else x * y)\n\"\"\""
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70771771779999999990000\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"9999999999999999999999999\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"5510\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == '707717717779999999'\nassert solution(\"1\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == '999999999000000000'\nassert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == '5510'\nassert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == '10'\nassert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == '10'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 10 8 5 3') == '70'\nassert solution('12 8 8 7 2') == '77'\nassert solution('12343 43 4543 39 123212') == '177177'\nassert solution('1000000000 1000000000 1 1 1') == '999999999000000000'\nassert solution('1000000000 1000000000 1 1 1000000000') == '999999999'\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2, 3) == \"1\"\nassert solution(10, 10) == \"0\"\nassert solution(2, 4) == \"2\"\nassert solution(7, 4) == \"2\"\nassert solution(9, 3) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\"\nassert solution(\"2 4\\n7 4\") == \"0\"\nassert solution(\"2 4\\n7 4\") == \"0\"\nassert solution(\"2 4\\n7 4\") == \"0\"\nassert solution(\"2 4\\n7 4\") == \"0\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\"\nassert solution(\"2 4\\n7 4\") == \"0\"\nassert solution(\"2 4\\n7 4\") == \"2\"\nassert solution(\"2 4\\n7 4\") == \"2\"\nassert solution(\"2 4\\n7 4\") == \"2\""
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n10 10') == '1\\n0\\n2\\n2\\n1'\nassert solution('5\\n8 9') == '2\\n1\\n3\\n2\\n1'\nassert solution('6\\n15 36') == '3\\n1\\n5\\n4\\n3\\n3\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n1'\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"1\\n0\\n2\\n2\\n1\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n\") == '1\\n0\\n2\\n2\\n1'\nassert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n\") == '1\\n0\\n2\\n2\\n1'\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\"\nassert solution(\"2 4\\n7 4\") == \"2\"\nassert solution(\"9 3\") == \"2\"\n\n\nhttps://app.codility.com/demo/results/trainingB2QLMB-KQN/"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\\n0\\n2\\n2\\n1\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"7 4\") == \"2\"\nassert solution(\"9 3\") == \"1\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_0) == test_0_result\nassert solution(test_1) == test_1_result\nassert solution(test_2) == test_2_result\nassert solution(test_3) == test_3_result\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(example) == example_result"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n22\n9999\n1\n777''') == '13\\n90\\n1\\n66'\nprint(solution(stdin.strip()))\n\n\"\"\"\nfrom math import log10\nfrom itertools import chain"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\n\"\"\"\nfrom sys import stdin, stdout"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\\n\") == \"13\\n90\\n1\\n66\"\nprint(solution(\"22\\n9999\\n1\\n777\\n\"))\n\"\"\"\n\n\nfrom typing import List, Set\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n\nprint(solution(input()))\n\n---"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(solution('')) == ''\n\"\"\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\n\"\"\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('11') == '1'\nassert solution('11a') == '1a'\nassert solution('111') == '11'\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n3\n2 2 2\n5\n2 2 2 2 2\n4\n2 2 2\n5\n2 2 2 2 2\n\"\"\") == \"YES\\n2 6\\n1 2\\n\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1') == 'YES\\n2 6\\n1 2'\nassert solution('3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3') == 'NO'\nassert solution('4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2') == 'YES\\n2 2\\n4 1'\n\"\"\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n\"\"\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"\"\"\n4\n2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n\"\"\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"\"\"\n3\n1\n5\n1 1 1 1 1\n2\n2 3\n\"\"\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"4\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\n\n\"\"\"\n\nimport sys\nimport itertools\nimport copy"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\") == \"NO\"\n\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\\n\") == \"NO\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\\n5\\n2 2 2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"2\\n1\\n5\\n5\\n1 1 1 1 1\") == \"NO\"\nassert solution(\"1\\n5\\n5\\n1 1 1 1 1\") == \"YES\\n1 4\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 2 2\\n5\\n2 2 2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"4\\n6\\n2 2 2 2 2\\n5\\n2 2 2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"5\\n2 3 1 3 2\\n6\\n2 2 2 2 2\") == \"YES\\n2 6\\n1 3\"\nassert solution(\"3\\n1\\n5\\n1 1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\\n\"\nassert solution(\"4\\n6\\n2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\") == \"NO\"\nassert solution(\"1\\n5\\n5\\n1 1 1 1 1\") == \"NO\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('[4,2,3]') == 5\nassert solution('[3,-1,0,2]') == 6\nassert solution('[2,-3,-1,5,-4]') == 13\n\n\"\"\"\nfrom typing import List\nimport collections\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"[1,-1,0,2]\") == 6\nassert solution(\"[4,2,3]\") == 5\nassert solution(\"[3,-1,0,2]\") == 6\nassert solution(\"[2,-3,-1,5,-4]\") == 13\n\n\n\n\n\n\n\n\n\n\u628a\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a\u6570\u5b57\u3002\n>>> a = '7'\n>>> b = int(a)\n>>> c = float(a)\n>>> print(b,c)\n7.0\n\n>>> a = '123.456'\n>>> b = int(float(a))\n>>> print(b)\n123\n\n>>> a = '-123'\n>>> b = int(a)\n>>> print(b)\n-123\n\n>>> b = float(a)\n>>> print(b)\n-123.0\n\n>>> b = float(a)\n>>> print(b)\n-123.0\n\n>>> a = '-123.456'\n>>> b = float(a)\n>>> print(b)\n-123.456\n\n>>> a = '123.456'\n>>> b = int(float(a))\n>>> print(b)\n123\n\n>>> a = '123.456'\n>>> b = int(float(a))\n>>> print(b)\n123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = float(a)\n>>> print(b)\n-123.456\n\n>>> a = '123.456'\n>>> b = int(float(a))\n>>> print(b)\n123\n\n>>> a = '123.456'\n>>> b = int(float(a))\n>>> print(b)\n123\n\n>>> a = '-123.456'\n>>> b = float(a)\n>>> print(b)\n-123.456\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = float(a)\n>>> print(b)\n-123.456\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = float(a)\n>>> print(b)\n-123.456\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a))\n>>> print(b)\n-123\n\n>>> a = '-123.456'\n>>> b = int(float(a"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A=[4,2,3], K=1\") == 5\nassert solution(\"A=[3,-1,0,2], K=3\") == 6\nassert solution(\"A=[2,-3,-1,5,-4], K=2\") == 13\n\n\"\"\"\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        # for i in range(K):\n        #     A.sort()\n        #     A[i] = -A[i]\n        # A.sort()\n        # A[0] = -A[0]\n        # return sum(A)\n\n        A.sort()\n        for i in range(K):\n            if A[i] >= 0:\n                A[i] = -A[i]\n            else:\n                break\n        return sum(A)\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A=[4,2,3], K=1\") == \"5\"\nassert solution(\"A=[3,-1,0,2], K=3\") == \"6\"\nassert solution(\"A=[2,-3,-1,5,-4], K=2\") == \"13\"\n\"\"\"\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str([4, 2, 3])) == str([5])\nassert solution(str([3, -1, 0, 2])) == str([6])\nassert solution(str([2, -3, -1, 5, -4])) == str([13])\nassert solution(str([1,-1,1,1])) == str([0])\n\n\"\"\"\n\nimport unittest\nfrom typing import List\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        # if sum of values of array is negative, simply return the value\n        if sum(A) < 0:\n            return sum(A)\n\n        # if K > len(A), simply return the largest value\n        if K > len(A):\n            return max(A)\n\n        # return max of the array after K number of negations\n        return max(A) - min(A)\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def testLargestSumAfterKNegations(self):\n        self.assertEqual(self.solution.largestSumAfterKNegations([3, -1, 0, 2], 1), 3)\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 3') == '5'\nassert solution('3 -1 0 2') == '6'\nassert solution('2 -3 -1 5 -4') == '13'\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"[4,2,3]\") == 5\nassert solution(\"[3,-1,0,2]\") == 6\nassert solution(\"[2,-3,-1,5,-4]\") == 13\n\"\"\"\nimport heapq\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"[4,2,3]\\n1\") == 5\nassert solution(\"[3,-1,0,2]\\n3\") == 6\nassert solution(\"[2,-3,-1,5,-4]\\n2\") == 13\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"[4,2,3]\\n1\") == 5\nassert solution(\"[3,-1,0,2]\\n3\") == 6\nassert solution(\"[2,-3,-1,5,-4]\\n2\") == 13\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 3', 1) == '5'\nassert solution('3 -1 0 2', 3) == '6'\nassert solution('2 -3 -1 5 -4', 2) == '13'\n\n\"\"\"\n\n\nimport collections"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == True\nassert solution(\"0 2 1 -6 6 7 9 -1 2 0 1\") == False\nassert solution(\"3 3 6 5 -2 2 5 1 -9 4\") == True\nassert solution(\"0 0 0 0 0 0 0 0 0\") == False\n\n'''\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        curr_sum = 0\n        sum_before = sum(A)\n        if sum_before % 3!= 0:\n            return False\n        curr_sum = sum_before // 3\n        sum_before = 0\n        for i in range(0, len(A)):\n            sum_before += A[i]\n            if sum_before == curr_sum:\n                curr_sum = 0\n                sum_before = 0\n            elif sum_before < curr_sum:\n                sum_before = 0\n            else:\n                curr_sum = curr_sum - sum_before\n                sum_before = 0\n        if curr_sum == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0,2,1,-6,6,-7,9,1,2,0,1\") == True\nassert solution(\"0,2,1,-6,6,7,9,-1,2,0,1\") == False\nassert solution(\"3,3,6,5,-2,2,5,1,-9,4\") == True\nassert solution(\"3,3,6,5,-2,2,5,1,-9,4\") == True\nassert solution(\"0,0,0,0\") == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\n\"\"\"\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        sum_A = sum(A)\n        if sum_A % 3!= 0:\n            return False\n        target = sum_A // 3\n        cur = 0\n        i = 0\n        while i < len(A) and cur < target:\n            cur += A[i]\n            i += 1\n        if cur!= target:\n            return False\n        cur = 0\n        while i < len(A) and cur < target:\n            cur += A[i]\n            i += 1\n        if cur!= target:\n            return False\n        return True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 2 1 -6 6 -7 9 1 2 0 1') == True\nassert solution('0 2 1 -6 6 7 9 -1 2 0 1') == False\nassert solution('3 3 6 5 -2 2 5 1 -9 4') == True\nassert solution('3 3 6 5 -2 2 5 1 -9 4') == False\nassert solution('1') == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == True\nassert solution(\"0 2 1 -6 6 7 9 -1 2 0 1\") == False\nassert solution(\"3 3 6 5 -2 2 5 1 -9 4\") == True\n\"\"\"\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: list[int]) -> bool:\n        sumA = sum(A)\n        if sumA % 3!= 0:\n            return False\n        else:\n            sumA /= 3\n            cnt = 0\n            for a in A:\n                if a == sumA:\n                    cnt += 1\n                    if cnt == 3:\n                        break\n        return True if cnt == 3 else False\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 2 1 -6 6 -7 9 1 2 0 1') == True\nassert solution('0 2 1 -6 6 7 9 -1 2 0 1') == False\nassert solution('3 3 6 5 -2 2 5 1 -9 4') == True"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"[0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]\") == \"true\"\nassert solution(\"[0, 2, 1, -6, 6, 7, 9, 1, 2, 0, 1]\") == \"false\"\nassert solution(\"[3, 3, 6, 5, -2, 2, 5, 1, -9, 4]\") == \"true\"\nassert solution(\"[0, 2, 1, -6, 6, 7, 9, 1, 2, 0, 1]\") == \"true\"\nassert solution(\"[0, 2, 1, -6, 6, 7, 9, 1, 2, 0, 1]\") == \"true\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 6 5 -2 2 5 1 -9 4') == True\nassert solution('0 2 1 -6 6 -7 9 1 2 0 1') == True\nassert solution('0 2 1 -6 6 -7 9 1 2 0 1') == True\nassert solution('0 2 1 -6 6 -7 9 1 2 0 1') == True\nassert solution('0 2 1 -6 6 -7 9 1 2 0 1') == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0,2,1,-6,6,-7,9,1,2,0,1') == True\nassert solution('0,2,1,-6,6,7,9,-1,2,0,1') == False\nassert solution('3,3,6,5,-2,2,5,1,-9,4') == True\n\n\"\"\"\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        if sum(A)%3!=0:return False\n        s = sum(A) // 3\n        i,j, k = 0,0,0\n        s1,s2 = 0,0\n        for n in A:\n            s1 += n\n            if s1==s:\n                j+=1\n                s2=0\n                s1=0\n            if s1==s*2:\n                k+=1\n                s1=0\n                s2=0\n            if j==2 and k==2:\n                return True\n        return False\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\na:b\\nx:y\\nz:a') == 'a:a\\nx:y\\nz:z'\n\"\"\"\n\n\"\"\"\n-----------SOLUTION------------\nfrom itertools import groupby\nimport re"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\nbeat') == 'beat'\nassert solution('7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet') == 'beet vet'\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"7\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet\n\"\"\") == 'beet\\nvet'\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet''') == 'beet\\nvet\\n'\n\nassert solution('''8\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet''') == 'beet\\nvet\\n'\n\nassert solution('''9\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet''') == 'beet\\nvet\\n'\n\nassert solution('''10\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet''') =='vet\\nbeet\\n'\n\nassert solution('''5\nabcd\nacbd\nbacd\ndabc\ndbac''') == 'abcd\\nacbd\\n'\n'''\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\nabcd\\nabcd\\nbcde\\nbcde\\nbcde\\n') == 'abcd'\n\"\"\"\n\n\"\"\"\nSolution 1\n\nSolution 2\n\nimport collections"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == ['beet','vet']\n\"\"\""
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nab\\nbc\\nca\\n\") == \"ab\\nc\\na\\n\"\n\"\"\""
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\\n\") == \"beet\\nvet\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nbee\\nf\\nbd\\n\") == 'bee'\n\"\"\"\nfrom typing import List\nfrom collections import defaultdict"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\nab\") == 'ab'\nassert solution(\"5\\nab\\nbc\\ncd\\nab\\nab\\n\") == 'ab\\nab'\nassert solution(\"5\\nab\\nbc\\nab\\n\") == 'ab\\nab'\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n4 8\") == \"8\"\n\"\"\""
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n4 8') == '8'\n\"\"\"\nimport sys\nimport os\n\nprint(sys.argv)"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8\\n\") == \"8\"\n\"\"\"\n\nimport sys\nfrom itertools import combinations"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 8\\n') == '8'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n4 8') == '8'\n\nfrom sys import stdin\nprint(solution(stdin.read()))"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8\") == \"8\"\nassert solution(\"2 3\") == \"5\"\n\"\"\"\n\nn = int(input())\na = [int(n) for n in input().split(\" \")]\nb = [0] * len(a)\nfor i in range(len(a)):\n    b[i] = (a[i] + i) ** 2\nprint(sum(b))\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2\n4 8\n\"\"\") == \"8\"\n\"\"\""
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"4 8\") == \"4 8\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\narr.sort()"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8\") == \"8\"\nprint(solution(\"4 8\"))\n\n\"\"\"\n\nimport ast"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8\\n') == '8'\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 1 5\") == \"84\"\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(123) == \"72\"\nassert solution(10) == \"5\"\nassert solution(1234) == \"84\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\nprint(\"Test finished.\")\n\"\"\""
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1234 150 100') == '84'\n\n-----\n\"\"\"\n\nX, A, B = [int(i) for i in stdin.split()]\nleft = X - A - B\nprint(X - A - B)\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n50\\n150\") == \"84\"\n\"\"\""
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\""
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1234 150 100') == '84'\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\""
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\nassert solution(\"1234 150 200\") == \"20\"\nassert solution(\"1234 150 300\") == \"0\"\nassert solution(\"1234 150 10000\") == \"0\"\nassert solution(\"1234 150 10001\") == \"0\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2') == '8'\n\"\"\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"8\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2') == 8\n\n----------------------\n\nimport itertools\nimport math\nimport sys\n\nN, M = [int(i) for i in sys.stdin.readline().split()]\ncomb = list(itertools.product('AB', repeat=N))\nres = 0\nfor i in comb:\n    if 'A' not in i and 'B' not in i:\n        res += 1\n    if 'A' in i and 'B' in i:\n        res += 1\nprint(math.factorial(N)//(math.factorial(N-2)*(math.factorial(2))))\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == 8\n\"\"\"\n\nN, M = map(int, input().split())\n\nans = 1\nfor i in range(N):\n    ans *= M\n    ans = ans // (i + 1)\n    ans = ans % (10 ** 9 + 7)\nprint(ans)\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(TEST_INPUT) == TEST_OUTPUT\n\"\"\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"8\"\n\n------------------------------\nPython 3.7.3\n------------------------------\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == 8\n\n\"\"\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n2 3\") == \"POSSIBLE\"\nassert solution(\"1 3\\n2 3\") == \"IMPOSSIBLE\"\nassert solution(\"1 2\\n1 3\") == \"IMPOSSIBLE\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 2\n1 2\n2 3''') == \"POSSIBLE\"\n\n\"\"\"\nfrom typing import List\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 2\\n\") == \"POSSIBLE\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 2\n1 2\n2 3''') == 'POSSIBLE'\n\nimport sys"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 2\\n2 3\\n') == 'POSSIBLE'\nassert solution('3 2\\n2 3\\n1 2\\n') == 'IMPOSSIBLE'\n\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N, M = stdin.split('\\n')\n        N, M = int(N), int(M)\n        boat_services = []\n        for i in range(M):\n            boat_services.append(tuple(stdin.split('\\n')[i].split()))\n        for i in range(M):\n            a, b = boat_services[i]\n            a, b = int(a), int(b)\n            for j in range(M):\n                if i!= j and boat_services[j][0] == a and boat_services[j][1] == b:\n                    return \"IMPOSSIBLE\"\n        return \"POSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\n\n---\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\"\"\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n\"\"\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\n\"\"\"\n\n\"\"\"\n3 2\n1 2\n2 3\n\"\"\"\n\n\"\"\"\n3 2\n1 2\n2 3\n\nPOSSIBLE\n\"\"\"\n\nimport sys\n\nclass Solution:\n    # Write your code here\n    def __init__(self):\n        self.N = int(input())\n        self.M = int(input())\n        self.adj = dict()\n        self.rev_adj = dict()\n        for i in range(1, self.N+1):\n            self.adj[i] = set()\n            self.rev_adj[i] = set()\n        for _ in range(self.M):\n            a, b = map(int, input().strip().split())\n            self.adj[a].add(b)\n            self.rev_adj[b].add(a)\n    \n    def dfs(self, s):\n        if s in self.visited:\n            return self.visited[s]\n        self.visited[s] = False\n        for v in self.rev_adj[s]:\n            if self.dfs(v) == True:\n                self.visited[s] = True\n                return True\n        self.visited[s] = False\n        return False\n    \n    def solve(self):\n        self.visited = dict()\n        self.visited[1] = True\n        if self.dfs(1) == False:\n            print(\"IMPOSSIBLE\")\n            return\n        self.visited = dict()\n        self.visited[self.N] = True\n        if self.dfs(self.N) == True:\n            print(\"POSSIBLE\")\n            return\n        print(\"IMPOSSIBLE\")"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('N M\\na_1 b_1\\na_2 b_2\\n:') == 'IMPOSSIBLE'\nassert solution('N M\\na_1 b_1\\na_2 b_2\\n1 2') == 'POSSIBLE'\nassert solution('N M\\na_1 b_1\\na_2 b_2\\n3 4') == 'POSSIBLE'\nassert solution('N M\\na_1 b_1\\na_2 b_2\\n1 3') == 'POSSIBLE'\n\n'''\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nprint(\"AC\")\n\nassert solution(\"abc\") == \"abc\"\nprint(\"AC\")\n\nassert solution(\"abcd\") == \"acd\"\nprint(\"AC\")\n\nassert solution(\"abcd\") == \"acd\"\nprint(\"AC\")\n\nassert solution(\"abcd\") == \"acd\"\nprint(\"AC\")"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('atcoder') == 'acdr'\nassert solution('a') == 'a'\nassert solution('a\\nb\\nc\\nd\\ne') == 'abce'"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('atcoder') == 'acdr'\nprint('test passed')"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\"\n\ns = stdin\ns = s[::2]\nprint(s)"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nprint(solution(\"atcoder\"))\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == result\nprint(result, file=sys.stderr, flush=True)\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\n\n\"\"\"\n\n---SOLUTION---\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('rng gorilla apple') == 'YES'\nassert solution('a b c') == 'NO'\nassert solution('a b a') == 'YES'\nassert solution('rng') == 'YES'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('rng gorilla apple') == 'YES'\nassert solution('rng gorilla apple') == 'YES'\nassert solution('rng gorilla apple') == 'YES'\nassert solution('rng gorilla apple') == 'YES'\nassert solution('rng gorilla apple') == 'YES'\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(expected_output)\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\nprint(solution(\"36 24\"))\n\"\"\"\n\nimport sys\nimport re\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\n\n\"\"\"\nSample Input 1:\n36\n24\n\nSample Output 1:\nGREATER\n\nSample Input 2:\n24\n24\n\nSample Output 2:\nEQUAL\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"\n\nA, B = input().split()\nA = int(A)\nB = int(B)\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"\n\na, b = input().split()"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\nprint(\"PASSED\")"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"apple\\norange\\napple\\n1\\ngrape\\n\") == \"2\"\n\"\"\"\n\nimport ast\n\nN = int(input())\ns = []\nfor _ in range(N):\n    s.append(input())\n\nM = int(input())\nt = []\nfor _ in range(M):\n    t.append(input())\n\nn = int(input())\nfor _ in range(n):\n    if s[int(input()) - 1] in t:\n        print(1)\n    else:\n        print(0)\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 apple\\n1 apple\\n: 2 apple\") == \"2\"\n\"\"\"\n\nN = int(stdin.readline())\nS = []\nfor _ in range(N):\n    S.append(stdin.readline())\nM = int(stdin.readline())\nT = []\nfor _ in range(M):\n    T.append(stdin.readline())"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\n\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nn = int(sys.stdin.readline())\ns = Counter(sys.stdin.readline().strip() for _ in range(n))\nm = int(sys.stdin.readline())\nt = Counter(sys.stdin.readline().strip() for _ in range(m))\nx = 0\nfor i in s.keys():\n    if i in t.keys() and s[i] <= t[i]:\n        x += s[i]\nprint(x)\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3\napple\norange\napple\n1\ngrape\n''') == '2'\nprint(\"Test 1 PASSED\")\nassert solution('''\n3\napple\napple\napple\n1\ngrape\n''') == '0'\nprint(\"Test 2 PASSED\")\nassert solution('''\n3\napple\norange\napple\n1\ngrape\n''') == '0'\nprint(\"Test 3 PASSED\")\nassert solution('''\n3\napple\napple\norange\n1\ngrape\n''') == '0'\nprint(\"Test 4 PASSED\")\nassert solution('''\n3\napple\norange\napple\n1\ngrape\n''') == '2'\nprint(\"Test 5 PASSED\")\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\nassert solution(\"3\\naaaa\\naaaa\\n1\\ngrape\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\napple\\norange\\napple\\n1\\ngrape') == '2'\n\"\"\"\n\nN, *s, M, *t = [*map(str, open(0).read().split())]\nN, M = int(N), int(M)\ncnt = 0\nfor i in range(1, N+1):\n    cnt += s[i-1] == t[i-1]\nprint(cnt)\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\napple\norange\napple\n1\ngrape''') == '2'\nassert solution('''4\napple\norange\napple\n1\ngrape''') == '1'\n\"\"\""
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\\n\") == 2\n\"\"\"\n\nimport re"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n'''\n\nimport sys"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'C'\nassert solution('T') == 'A'\n\nprint('Test finished.')"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(A) == T\nassert solution(C) == G\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\n---------------------------------------------"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\""
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3 2 2 4 1\\n1 2 2 2 1') == '14'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == 14\n\"\"\""
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2 2 4 1') == '14'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3, 2, 2, 4, 1) == 14\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n3 2 2 4 1\n1 2 2 2 1''') == '14'\n\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('4') == '4'\nassert solution('10') == '10'\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == \"14\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 2 4 1\\n1 2 2 2 1\") == '14'\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 2 4 1\\n1 2 2 2 1\") == \"14\"\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == \"14\""
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n2 2 2') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n2 2 2\\n\") == \"1\"\n\n'''"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n2 2 2\\n') == '1'\n\nprint(solution(stdin.read()))"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n2 2 2\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2\\n3 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n2 2 2') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1\") == \"2\"\nassert solution(\"5 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n2 2 2') == '1'\n\n-----\n1 2 3 4\n----\n\n5 1\n2 2 2 2 2\n\n-----\n3\n5\n1 2 3 4 5\n\n2 1\n2 2\n\n-----\n3\n4\n1 2 3 4\n\n1 2 3\n2 3\n3 4\n\n0\n\"\"\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\nassert solution('0 0 0\\n1 0 1\\n1 0 1') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\nassert solution('1 0 1\\n2 1 2\\n1 0 1') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\nassert solution('3 0 1\\n2 1 2\\n1 0 1') == 'No'"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"1 0 1\\n2 2 1\\n1 0 1\") == \"No\"\n\n'''"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'No'\nassert solution('a') == 'No'\nassert solution('0 0 0') == 'Yes'\nassert solution('1 0 1') == 'Yes'\nassert solution('2 1 2') == 'Yes'\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\"\"\"\n\nimport ast\n\nclass Solution:\n    def __init__(self, c1, c2, c3):\n        self.c1 = ast.literal_eval(c1)\n        self.c2 = ast.literal_eval(c2)\n        self.c3 = ast.literal_eval(c3)\n\n    def solution(self) -> str:\n        a = [self.c1, self.c2, self.c3]\n        b = []\n\n        for i in range(3):\n            l = []\n            for j in range(3):\n                l.append(a[i][j] + a[i][j+1] + a[i][j+2] + a[i+1][j] + a[i+1][j+1] + a[i+1][j+2] + a[i+2][j] + a[i+2][j+1] + a[i+2][j+2])\n            b.append(l)\n\n        if b[0][0] == b[0][1] == b[0][2] == b[1][0] == b[1][1] == b[1][2] == b[2][0] == b[2][1] == b[2][2]:\n            return \"Yes\"\n        if b[0][0] == b[0][1] == b[0][2] == b[1][0] == b[1][1] == b[1][2] == b[2][0] == b[2][1] == b[2][2]:\n            return \"Yes\"\n        if b[0][0] == b[1][0] == b[2][0] == b[0][1] == b[1][1] == b[2][1] == b[0][2] == b[1][2] == b[2][2]:\n            return \"Yes\"\n        if b[0][0] == b[1][0] == b[2][0] == b[0][1] == b[1][1] == b[2][1] == b[0][2] == b[1][2] == b[2][2]:\n            return \"Yes\"\n        if b[0][0] == b[1][1] == b[2][2] == b[0][2] == b[1][2] == b[2][2] == b[0][1] == b[1][1] == b[2][0]:\n            return \"Yes\"\n        else:\n            return \"No\""
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\nassert solution('1 0 1\\n2 1 2\\n1 0 1') == 'No'\n\"\"\"\n\nfrom collections import namedtuple\nfrom itertools import chain\nfrom operator import add, sub\n\nGrid = namedtuple(\"Grid\", [\"row_one\", \"row_two\", \"row_three\"])"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\"\nimport sys"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ARC\") == \"ABC\"\nassert solution(\"ABC\") == \"ARC\"\n\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin=\"ABC\") == \"ARC\"\n\n------Problem------\nAtCoder Inc. holds a contest every Saturday.\nThere are two types of contests called ABC and ARC, and just one of them is held at a time.\nThe company holds these two types of contests alternately: an ARC follows an ABC and vice versa.\nGiven a string S representing the type of the contest held last week, print the string representing the type of the contest held this week.\n\n-----Constraints-----\n - S is ABC or ARC.\n\n-----Input-----\nABC\n\n-----Output-----\nARC\n\nThey held an ABC last week, so they will hold an ARC this week.\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\nprint(\"PASS\")\n\n\"\"\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ARC') == 'ABC'\nassert solution('ABC') == 'ARC'\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n\na, b, x = map(int, stdin.readline().strip().split())\ncount = 0\nfor num in range(a, b + 1):\n    if num % x == 0:\n        count += 1\nprint(count)\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n\na, b, x = (int(i) for i in stdin.split())\nprint(sum(((i >= a and i <= b) and (i % x == 0)) for i in range(a, b + 1)))\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 8 2') == '3'\n\"\"\"\n\na, b, x = list(map(int, input().split(' ')))\nprint(sum([1 for i in range(a, b + 1) if i % x == 0]))\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 8 2') == '3'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a\\n') == ''\nassert solution('1\\n') == ''\nassert solution('a\\nb\\n') == ''\nassert solution('1\\n1\\n') == ''\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8 2') == '3'\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8 2') == '3'\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 2\") == \"3\"\nassert solution(\"1 1 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8 2') == '3'\n\"\"\"\n\na, b, x = [int(i) for i in stdin.split()]\nprint(sum([i for i in range(a, b + 1) if i % x == 0]))\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n\na, b, x = input().split()\na, b, x = int(a), int(b), int(x)\n\ncount = 0\nfor i in range(a, b + 1):\n    if i % x == 0:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('25') == \"Christmas\"\nassert solution('24') == \"Christmas Eve\"\nassert solution('23') == \"Christmas Eve Eve\"\nassert solution('22') == \"Christmas Eve Eve Eve\"\n\n'''\n\nD = int(input())"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"25\") == \"Christmas\"\n\"\"\"\n\nD = input()"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('25') == 'Christmas'\n\"\"\"\n\nD = int(input())\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"25\") == \"Christmas\"\nassert solution(\"24\") == \"Christmas Eve\"\nassert solution(\"23\") == \"Christmas Eve Eve\"\nassert solution(\"22\") == \"Christmas Eve Eve Eve\"\n\n### How do we test if something is an integer? ###"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('0') == ''\nassert solution('1') == ''\nassert solution('12') == ''\nassert solution('25') == 'Christmas'\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('test') == 'test'\n\nprint(solution(''))\nprint(solution('test'))\n'''\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n\n-----\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\") == \"4\"\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n7') == '5\\n7'\n\nprint(solution('4\\n2\\n1\\n5\\n6'))\n\n---"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"8\") == \"4\"\nassert solution(\"1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\nassert solution('7') == '4'\n\"\"\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"7\") == \"4\"\nassert solution(\"8\") == \"4\"\nassert solution(\"9\") == \"5\"\nassert solution(\"10\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input) == output\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == '2'\nassert solution(\"1\") == '1'\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\") == \"4\"\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\"\nimport math\nimport sys\nfrom itertools import permutations"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(True) or str(False)\n\"\"\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 7 9 3') == 'Yes'\nassert solution('4 7 9 1') == 'No'\nassert solution('1 1 1 1') == 'Yes'\nassert solution('100 100 100 100') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\n-----TESTED WITH 0 ERRORS-----\n\n-----TESTING TOOL-----\nhttps://www.codewars.com/kata/54edbc7b10a2a7be50d0000c1/train/python\n\n'''"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''atcoder beginner contest''') == 'ABC'\nassert solution('''aTcoder bEnerC oNtEcHoR sEtCoRt''') == 'ABC'\nassert solution('''aTcoder bEnerC oNtEcHoR sEtCoRt''') == 'ABC'\nassert solution('''aTcoder bEnerC oNtEcHoR sEtCoRt''') == 'ABC'\nassert solution('''aTcoder bEnerC oNtEcHoR sEtCoRt''') == 'ABC'\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''atcoder beginner contest''') == 'ABC'\n'''\n\n\n'''\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\nprint(\"Correct!\")\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == 'Yes'\nassert solution('50 100 120') == 'No'\nassert solution('50 100 400') == 'Yes'\nassert solution('50 100 100') == 'No'\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\"\"\"\n\na, b, c = input().split()\n\na = int(a)\nb = int(b)\nc = int(c)\n\na = a*c\nb = b*c"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"110 230 50\") == \"No\"\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('50 100 120') == 'Yes'\nassert solution('50 100 130') == 'No'\n\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('50 100 120') == 'Yes'\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100 50 120') == 'Yes'\nassert solution('100 50 100') == 'No'\nassert solution('1 2 3') == 'No'\nassert solution('1 10 100') == 'No'\nassert solution('1 10 10') == 'No'\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\u201850 100 120\\\u2019) == \u2018Yes\\\u2019\nassert solution(\u201850 100 70\\\u2019) == \u2018No\\\u2019\n\"\"\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('50 100 120') == 'Yes'\nassert solution('200 200 200') == 'No'\nassert solution('100 200 200') == 'No'\nassert solution('0 100 200') == 'No'\nassert solution('200 100 200') == 'No'\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\n\"\"\"\n\nimport ast"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"50 100 10\") == \"No\"\n\"\"\"\n\nimport sys\n\nA, B, C = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\nprint(solution(\"4 8\\n7 9 8 9\"))\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\n\\n') == ''\nassert solution('5\\n1\\n3\\n7\\n9\\n') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == '5'\nassert solution(\"3 9\\n1 2 3\") == '0'\nassert solution(\"6 14\\n1 1 1 1 1 1 1\") == '1'\nassert solution(\"5 9\\n1 2 3 4 5\") == '0'\nassert solution(\"2 10\\n1 1\") == '1'\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\n----\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(    \"4 8\\n7 9 8 9\") == \"5\"\n\"\"\"\n\nimport math\n\nn, a = [int(n) for n in input().split()]\narr = [int(x) for x in input().split()]\n\nl = 0\nr = 0\nsum_ = 0\ncount = 0\nwhile True:\n    if l == n:\n        break\n    sum_ = sum(arr[l:r])\n    count += math.ceil(sum_ / a)\n    r += 1\n    if r == n:\n        l += 1\n        r = l\n\nprint(count)\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\nprint('PASSED')\n\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\nassert solution(\"6 6\\n3 3 3 3 3 3 3 3\") == \"11\"\nassert solution(\"5 6\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == '5'\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n4\n1 2 3 4\n\"\"\") == \"4 2 1 3\"\n\nassert solution(\n\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"5 4 3 2 1\"\n\nassert solution(\n\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"10 9 8 7 6 5 4 3 2 1\"\n\nassert solution(\n\"\"\"\n2\n1 2\n\"\"\") == \"2 1\"\n\nassert solution(\n\"\"\"\n0\n\"\"\") == \"0\""
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 2 3') == '4 2 1 3'\n\"\"\"\nimport sys\nimport unittest\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\nassert solution(\"3\\n1 2 3\") == \"1 2 3\"\n\nassert solution(\"3\\n1 2\") == \"1 2\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\") == '4 2 1 3'\n\"\"\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2 3\") == '4 2 1 3'\nassert solution(\"3 4 5 2\") == '3 4 2 5'\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"4 2 1 3\"\n\n---"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\nassert solution('5\\n0 1 0 1 0') == '0 0 0 1 0 1'\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5 4 2 1 3\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"6 5 4 2 1 3\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\n\"\"\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10 3\n4 5 6''') == 'Yes'\nassert solution('''10 3\n4 5 6\n''') == 'No'\n'''"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 3\\n4 5 6') == 'Yes'\nassert solution('1 100\\n1 1') == 'Yes'\nassert solution('10 3\\n3 3 2') == 'No'\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 3\\n4 5 6\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 3\\n4 5 6') == 'Yes'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 3\\n4 5 6') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n5 6 7 8\") == \"Yes\"\nassert solution(\"4 2\\n1 2 3 4\\n5 6 7 8\") == \"No\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\n\nimport sys\n\nH, N = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''10 3\n4 5 6''') == 'Yes'\nassert solution('''10 4\n3 2 1''') == 'Yes'\nassert solution('''10 5\n3 3 2 2''') == 'No'\nassert solution('''10 5\n1 1 1 1 1''') == 'No'\nassert solution('''10 3\n4 5 6''') == 'No'\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"baaaa\") == 2\nassert solution(\"ababab\") == 3\n\"\"\"\n\nS = str(input())\ns_len = len(S)\n\nlongest_even_string = ''\nlongest_even_string_len = 0\n\nfor i in range(s_len):\n    for j in range(i+1, s_len+1):\n        if j == s_len+1:\n            break\n        curr = S[i:j]\n        if len(curr) % 2 == 0:\n            if len(curr) > longest_even_string_len:\n                longest_even_string = curr\n                longest_even_string_len = len(curr)\n\nprint(longest_even_string_len)"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 0\nassert solution('aaaaaaa') == 7\nassert solution('aababab') == 4\nassert solution('ababab') == 3\nassert solution('aaaa') == 7\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abaababaab') == 6\nassert solution('abbbbaabb') == 9\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abaababaab') == 6\n\"\"\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abaababaab') == 6\nassert solution('aaaaa') == 5\nassert solution('aabbcc') == 3\n\"\"\"\nimport sys"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abaababaab\") == 6\n\n\"\"\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abaababaab') == 6\nassert solution('abaababaaba') == 6\nassert solution('baab') == 2\n\n---Problem 6 (Hard)---\nFind the longest palindrome\nYou are given a string S.\nYour task is to find the longest palindromic substring in S.\n\n-----Input Format-----\nThe first and only line of input contains a string, S.\n\n-----Output Format-----\nPrint the longest palindromic substring in S.\n\n-----Sample Input-----\nracecar\n\n-----Sample Output-----\nracecar"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abaababaab') == 6\nassert solution('aaaaa') == 5\n\"\"\""
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abaababaab') == 6\nassert solution('aaaaa') == 5\nassert solution('abbbbbb') == 4\nassert solution('bb') == 1"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input) == output\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"bac\") == \"Yes\"\nassert solution(\"bca\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"abca\") == \"Yes\"\nassert solution(\"bcab\") == \"Yes\"\nassert solution(\"abcba\") == \"No\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abc') == 'Yes'\nassert solution('bac') == 'Yes'\nassert solution('abb') == 'No'\nassert solution('bca') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'No'\nassert solution('ab') == 'No'\nassert solution('abc') == 'Yes'\nassert solution('bac') == 'Yes'\nassert solution('acb') == 'Yes'\n\nimport itertools"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bac\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('abc') == 'No'"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"aba\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"acb\") == \"Yes\"\nassert solution(\"baa\") == \"No\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abc') == 'cba'\nassert solution('bac') == 'cba'\nassert solution('bca') == 'cba'\nassert solution('cab') == 'cba'\n\"\"\"\n\n\"\"\"\nHands On 1\nThe included code stub will read an integer,, from STDIN.\n\nWithout using any string methods, try to print the following:\n123...n\n\nNote that \"\" represents the consecutive values in between.\n\nExample\nn = 5\n\nPrint the string 12345.\n\nInput Format\n\nThe first line contains an integer.\n\nConstraints\n\nOutput Format\n\nPrint the list of integers from  through  as a string, without spaces.\n\nSample Input 0\n\n3\nSample Output 0\n\n123\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(s) == \"Yes\"\n\"\"\"\nimport itertools"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\\n\") == \"646\"\nassert solution(\"1\\n1000000\\n1000000\\n\") == \"757402647\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 3\\n4 2\") == \"20\"\nassert solution(\"1\\n1\\n1\") == \"0\"\nassert solution(\"3\\n1 1 1\") == \"0\"\nassert solution(\"4\\n1 1 2 3\") == \"18\"\nassert solution(\"1\\n10000000\\n10000000\") == \"0\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n\nassert solution(\"1\\n1000000\\n1000000\") == \"757402647\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 5 7 2 9 4') == '20'\nassert solution('1 2 3 4 5 6 7 8 9') == '20'\nassert solution('1 4 2 3 5 6 7 8 9') == '20'\nassert solution('1 3 5 2 9 4 7 8 6') == '20'\nassert solution('1 3 5 7 2 9 4 6') == '20'\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nans = 10 ** 7\n\nfor i in range(n):\n    cur = 0\n    l = i\n    r = i\n    while l >= 0 and b[l] * b[i] < a[i] * b[r]:\n        cur += a[i] * b[l]\n        l -= 1\n        r += 1\n    l = i\n    r = i\n    while l >= 0 and b[l] * b[i] < a[i] * b[r]:\n        cur += a[i] * b[l]\n        l -= 1\n        r += 1\n    ans = min(ans, cur)\n\nprint(ans % 998244353)\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == 646\n\n\"\"\""
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n\n\"\"\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n\nassert solution(\"1000000\\n1000000\") == \"757402647\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '654321'\nassert solution('1 2 3 4 5 6') == '65432145'\nassert solution('1 2 3 4 5 6 7') == '6543211234567'\nassert solution('1 2 3 4 5 6 7 8') == '6543214512345678'\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5\") == \"12345\"\nassert solution(\"7 4 5 3 4\") == \"74324\"\nassert solution(\"2 7 9\") == \"217\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"12345\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\") == \"17\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 4 5\\n2 5 4 2 6 3 1\\n2 1') == '7'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7') == '17'\n\"\"\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\n\n\"\"\"\nimport sys\nimport functools"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n') == '7'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n') == '17'\n\"\"\""
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\n\n\"\"\""
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1\"\"\") == '17'\nassert solution(\"\"\"9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\n\"\"\") == '17'\nassert solution(\"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == '17'\n\n\"\"\"\nimport sys\nfrom collections import Counter\n\nsys.stdin = open(\"input.txt\")\nsys.stdout = open(\"output.txt\", \"w\")"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\n\n-----Explanation-----\n\nWe can make two purchases:\n\nIn the first purchase we buy shovels on positions $1$ and $4$ (both with costs $2$) and get one of them for free using the first or the third special offer.\nIn the second purchase we buy shovels on positions $3$ and $6$ (with costs $4$ and $3$) and get the second one for free using the first or the third special offer.\nIn the third purchase we buy shovels on positions $7$ (costs $1$) and so on.\n\nSo the total cost is $4 + 2 + 1 = 7$.\n\nIn the fourth purchase we buy four cheapest shovels without using any special offers and so the total cost is $17$.\n\"\"\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1') == '7'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7') == '17'\nassert solution('5 1 4\\n2 5 7 4 6\\n5 4\\n') == '17'\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 7\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == \"1\"\nassert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\") == \"0\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 7\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"1\"\n\n\"\"\"\n\n\nclass Edge:\n    def __init__(self, u, v):\n        self.u = u\n        self.v = v\n\n    def __repr__(self):\n        return \"Edge({}, {})\".format(self.u, self.v)\n\n\nclass Graph:\n    def __init__(self, n):\n        self.n = n\n        self.edges = []\n\n    def add_edge(self, u, v):\n        self.edges.append(Edge(u, v))\n        self.edges.append(Edge(v, u))\n\n    def remove_edge(self, u, v):\n        for edge in self.edges:\n            if edge.u == u and edge.v == v:\n                self.edges.remove(edge)\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n') == '2'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n') == '0'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n') == '1'\n\nprint(solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n'))"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 7\\n6 7\\n') == '2'\nassert solution('5\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n') == '0'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n') == '1'\nprint('The local tests are done. Click on \"Check\" for more details about input/output formats.')\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == \"1\"\n\nprint(solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\"))\n\"\"\"\n\n\nimport unittest\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n') == '2'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n') == '0'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n') == '1'\n\n----\n\n\"\"\"\nimport sys\nimport math\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')\nfrom collections import deque\n\n\"\"\"\n1. Use graph theory (BFS), \n2. Calculate min edge count\n3. Calculate max degree\n\n1. BFS\n2. Use max degree to get min edge count\n3. Use max degree to get min edge count\n\n\n1. Use graph theory,\n2. Use max degree to get min edge count\n3. Use max degree to get min edge count\n\"\"\""
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n1 3\") == '0'\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == '1'\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n2 4\\n3 5\\n4 6\\n5 7\\n6 7\\n7 7\\n\") == '2'\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == '0'\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == '1'\n\n\n\"\"\"\n\nfrom math import inf\nfrom collections import defaultdict\n\nclass Node:\n    def __init__(self, name):\n        self.name = name\n        self.left = None\n        self.right = None\n\n\nclass Tree:\n    def __init__(self, root):\n        self.root = root\n\n    def add_node(self, left, right):\n        node = Node(len(self.nodes))\n        self.nodes.append(node)\n        self.node_to_node[left].right = node\n        self.node_to_node[right].left = node\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"1\""
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n2 3\\n2 4\") == 2\nassert solution(\"1 2\\n2 3\\n2 4\\n3 5\\n3 6\") == 1\nassert solution(\"1 2\\n2 3\\n2 4\\n2 5\\n3 6\\n1 7\") == 0\nassert solution(\"1 2\\n2 3\\n2 4\\n2 5\\n2 6\\n3 7\\n1 7\") == 1\nassert solution(\"1 2\\n2 3\\n2 4\\n3 5\\n3 6\\n2 7\\n1 7\") == 1\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"3\"\nassert solution(\"3 7\") == \"10\"\nassert solution(\"4 12\") == \"15\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\n\"\"\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5 2\\n1 10') == '11'\nassert solution('2 1\\n1 10') == '2'\nassert solution('5 4\\n1 10') == '5'\nassert solution('5 4\\n3 7') == '10'\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\nprint(solution(stdin))\n\n=====\nprint(2 % 3)\nprint(3 % 3)\n\n=====\na = 10\nb = 20\nprint(a + b)\nprint(a - b)\nprint(a * b)\nprint(a / b)\nprint(a // b)\nprint(a % b)\nprint(a ** b)\n\n=====\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7\") == \"10\"\nassert solution(\"3 7\") == \"10\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\nassert solution(\"1 1000000000 1000000000\") == \"1000000001\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 7\\n2 1000000000') == '5'\nassert solution('2 1000000000') == '3'\nassert solution('7 97\\n1000000000 1000000000') == '2'\nassert solution('1000000000 1000000000') == '1'\nassert solution('2 1') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1\\n\") == \"1\"\nassert solution(\"3\\n7\\n\") == \"10\"\nassert solution(\"3\\n8\\n\") == \"12\"\nassert solution(\"2\\n1000000000\\n\") == \"999999999\"\nassert solution(\"3\\n97\\n\") == \"113\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 7') == '10'\nassert solution('4 12') == '15'\nassert solution('2 1000000000') == '1999999999'\nassert solution('7 97') == '113'\nassert solution('1000000000 1000000000') == '1000000001'\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 7\") == \"10\"\nassert solution(\"4 12\") == \"15\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\nassert solution(\"1000000000 1000000000\") == \"1000000001\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''10 2\n1 2 3 2 1 3 2''') == '2 1 3 2'\nassert solution('''7 2\n1 2 3 2 1 3 2''') == '2 1 3 2'\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3''') == '3 1 3 2'\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2') == '2'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3') == '3'\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2\\n') == '2\\n2 1'\n\"\"\"\nimport sys\nimport collections\n\n_, k = map(int, sys.stdin.readline().split())\nids = list(map(int, sys.stdin.readline().split()))\n\nqueue = collections.deque()\nfor id in ids:\n    while queue and queue[-1] < id:\n        queue.pop()\n    queue.append(id)\n    if len(queue) > k:\n        queue.popleft()\nprint(len(queue))\nprint(*queue)\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\n\"\"\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2') == '2\\n2 1'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3') == '3\\n1 3 2'\n\n\"\"\"\n\nimport sys\n\n_stdin = sys.stdin\n\nsys.stdin = open(\"SWEA/inputs/4013_input.txt\")\n\nN, K = [int(i) for i in sys.stdin.readline().rstrip().split(' ')]\n\nconversations = []\n\nfor n in range(N):\n    conversations.append([int(i) for i in sys.stdin.readline().rstrip().split(' ')])\n\nfor n in range(N):\n    for m in range(K):\n        if conversations[n][m] not in conversations[:m]:\n            conversations[m] = conversations[n]\n            break\n    else:\n        conversations.pop()\n\nprint(len(conversations))\nfor conversation in conversations:\n    print(' '.join([str(i) for i in conversation]))\n\n\nsys.stdin = _stdin\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2\\n') == '2\\n2 1'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3\\n') == '3\\n1 3 2'\n\n\"\"\"\n\nfrom collections import deque\nimport string"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\") == \"263\"\n\"\"\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\""
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == e\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n') == '263'\nassert solution('3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n') == '200'\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n\"\"\"\n\nfrom math import floor\nfrom itertools import product"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100\n\"\"\"\n) == \"263\"\n\"\"\"\n\n\"\"\"\n\nn = int(stdin)\ncards = [\n    [int(stdin), 0, 0] for _ in range(n)\n]\ndp = [\n    [0 for _ in range(3)] for _ in range(n + 1)\n]\nfor i in range(1, n + 1):\n    k = cards[i - 1][0]\n    for j in range(1, 3):\n        for p in range(1, 3):\n            dp[i][j] = max(\n                dp[i][j],\n                dp[i - 1][p]\n                if i > 1\n                else 0\n            )\n        dp[i][j] += (cards[i - 1][1] + cards[i - 1][2]) * k\n\nprint(dp[n][2])"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == '263'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"abacaba\"\n) == \"3\"\nassert solution(\n    \"dfcbbcfeeedbaea\"\n) == \"5\"\n\"\"\"\n\n\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacaba') == '3'\nassert solution('dfcbbcfeeedbaea') == '5'\n\n\"\"\"\nimport unittest\nfrom collections import Counter, defaultdict\nimport itertools\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"5\"\n\"\"\"\n\n\n\ns = stdin\nq = int(stdin.readline())\n\nstring_length = len(s)\n\nfor i in range(q):\n    command = stdin.readline().split()\n\n    if command[0] == \"1\":\n        s = s[:int(command[1])] + command[2] + s[int(command[1]) + 1:]\n    else:\n        substring_length = int(command[1]) - int(command[2]) + 1\n        num_distinct_chars = {}\n\n        for i in range(substring_length):\n            char = s[int(command[1]) + i]\n            if char in num_distinct_chars:\n                num_distinct_chars[char] += 1\n            else:\n                num_distinct_chars[char] = 1\n\n        print(len(num_distinct_chars))\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abacaba') == '3'\nassert solution('dfcbbcfeeedbaea') == '5'\n\n\"\"\"\n\nimport sys\nimport os\nfrom io import StringIO\n\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"5\"\nassert solution(\"abc\") == \"3\"\nassert solution(\"ab\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List, Tuple, DefaultDict, Dict\n\nclass Solution:\n    def __init__(self, s: str):\n        self.s = s\n        self.res = defaultdict(int)\n        self.cache = {}\n        self.populate_cache()\n        self.max_length = 0\n\n    def populate_cache(self) -> None:\n        for i, c in enumerate(self.s):\n            self.cache[c] = i\n\n    def get_max_length(self) -> int:\n        max_length = 0\n        for key in self.cache:\n            if self.cache[key] > max_length:\n                max_length = self.cache[key]\n        self.max_length = max_length\n        return max_length\n\n    def is_valid_position(self, pos: int) -> bool:\n        return 0 <= pos < self.max_length\n\n    def is_valid_length(self, l: int, r: int) -> bool:\n        return 1 <= l <= r <= self.max_length\n\n    def replace(self, pos: int, c: str) -> None:\n        if self.is_valid_position(pos):\n            # print(\"replace\", pos, c)\n            self.s = self.s[:pos] + c + self.s[pos + 1:]\n            self.res[c] = 1\n            return\n\n    def count_distinct(self, l: int, r: int) -> int:\n        # print(\"count\", l, r)\n        res = 0\n        for key in self.cache:\n            if self.is_valid_length(l, r) and self.cache[key] >= l and self.cache[key] <= r:\n                res += 1\n        return res"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('codeforces') == 'cocdfeo'\nassert solution('abcdefg') == 'aabbccddeeffgg'\nassert solution('abacaba') == 'abacab'\n\"\"\""
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"coder\"\nassert solution(\"abacaba\") == \"b\"\nassert solution(\"dfcbbcfeeedbaea\") == \"d\"\n\n\"\"\"\n\n\"\"\"\ns = stdin\nn = len(s)\nq = int(stdin)\nl = []\nfor _ in range(q):\n    l.append(stdin.split())\n\nfor i in range(q):\n    if l[i][0] == '1':\n        s = s[:int(l[i][1])-1] + l[i][2] + s[int(l[i][1]):]\n    else:\n        print(len(set(s[int(l[i][1])-1:int(l[i][2])])))\n\"\"\"\n\ns = \"codeforces\"\nn = len(s)\nq = int(input())\nl = []\nfor _ in range(q):\n    l.append(input().split())\n\nfor i in range(q):\n    if l[i][0] == '1':\n        s = s[:int(l[i][1])-1] + l[i][2] + s[int(l[i][1]):]\n    else:\n        print(len(set(s[int(l[i][1])-1:int(l[i][2])])))\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('codeforces') == 'cosefc', 'codeforces'\nassert solution('abacaba') == 'bacab', 'abacaba'\n\"\"\""
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"coder\"\nassert solution(\"abacaba\") == \"a\"\nassert solution(\"dfcbbcfeeedbaea\") == \"1f2\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacaba') == '3'\nassert solution('dfcbbcfeeedbaea') == '5'\nassert solution('codeforces') == '5'\nassert solution('abc') == '3'\nassert solution('aaaaa') == '5'\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\\n\"\nprint(solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n\"))\nassert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\\n\"\nprint(solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n\"))\nassert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\\n\"\nassert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\\n\"\n\nInput\n2\n867345123\n775859272\n344675674\n874615754\n895387870\n912387064\n212765986\n547692981\n\nOutput\n867345123\n777585927\n34467567\n874615754\n895538782\n912387064\n212765986\n547692981\n\"\"\""
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563''') == '''154873396\n336592714\n729645835\n863725145\n979314628\n412958357\n631457992\n998236471\n247789563'''\n\n'''\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563''') == '''154873396\n336592714\n729645835\n863725145\n979314628\n412958357\n631457992\n998236471\n247789563'''\n\nassert solution('''412968357\n631457982\n598236471\n247189563\n863725149\n975314628\n412968357\n729641835\n386592714\n154873396''') == '''412968357\n631457982\n598236471\n247789563\n863725145\n975314628\n412958357\n729641835\n336592714\n154873396'''\n\n'''\n957329\n82473\n64515\n93846\n93533\n57314\n27990\n117843\n127908\n42022\n\n489730\n98625\n29918\n73438\n7567\n584629\n86931\n84938\n3988\n73438\n'''\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563') == '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\nassert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\\n9') == '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\n\n-----Test 1-----\n\nInput\n2\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n5\n135836704\n173373160\n224729392\n609342385\n253571295\n596585710\n487380609\n67942567\n865178718\n9\n3\n7\n8\n1\n4\n6\n2\n5\n\nOutput\n386592714\n729641835\n865178718\n9\n3\n7\n6\n1\n4\n5\n2\n5\n6\n8\n7\n\n-----Test 2-----\n\nInput\n3\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n1\n135836704\n173373160\n224729392\n609342385\n253571295\n596585710\n487380609\n67942567\n865178718\n9\n3\n7\n8\n1\n4\n6\n2\n5\n\nOutput\n154873296\n386592714\n865178718\n9\n3\n7\n6\n1\n4\n5\n2\n5\n6\n8\n7\n\n-----Test 3-----\n\nInput\n1\n1234\n5678\n9012\n3456\n7890\n12345\n6789\n12345\n5678\n1234\n\nOutput\n1234\n5678\n3456\n7890\n12345\n6789\n12345\n5678\n1234\n\n-----Test 4-----\n\nInput\n3\n4\n2\n5\n1\n3\n6\n4\n7\n\nOutput\n4\n2\n5\n1\n3\n6\n4\n7\n\n-----Test 5-----\n\nInput\n4\n9\n8\n1\n6\n3\n7\n2\n4\n5\n\nOutput\n9\n8\n1\n6\n3\n7\n2\n4\n5\n\n-----Test 6-----\n\nInput\n1\n4\n2\n5\n1\n3\n6\n7\n9\n\nOutput\n4\n2\n5\n1\n3\n6\n7\n9\n\n-----Test 7-----\n\nInput\n4\n6\n8\n9\n1\n5\n3\n2\n7\n\nOutput\n6\n8\n9\n1\n5\n3\n2\n7\n\n-----Test 8-----\n\nInput\n7\n3\n9\n4\n8\n2\n6\n1\n5\n\nOutput\n3\n9\n4\n8\n2\n6\n1\n5\n\n-----Test 9-----\n\nInput\n2\n9\n5\n7\n4\n3\n8\n1\n2\n6\n\nOutput\n9\n5\n7\n4\n3\n8\n1\n2\n6\n\n-----Test 10-----\n\nInput\n8\n9\n7\n3\n1\n6\n5\n4\n2\n\nOutput\n9\n7\n3\n1\n6\n5\n4\n2\n\n-----Test 11-----\n\nInput\n2\n6\n1\n3\n8\n9\n5\n2\n4\n\nOutput\n6\n1\n3\n8\n9\n5\n2\n4\n\n-----Test 12-----\n\nInput\n5\n1\n9\n6\n7\n3\n2\n8\n4\n5\n\nOutput\n1\n9\n6\n7\n3\n2\n8\n4\n5\n\n-----Test 13-----\n\nInput\n1\n7\n3\n9\n2\n8\n4\n6\n5\n\nOutput\n7\n3\n9\n2\n8\n4\n6\n5\n\n-----Test 14-----\n\nInput\n4\n6\n3\n2\n1\n5\n7\n9\n8\n\nOutput\n6\n3\n2\n1\n5\n7\n9\n8\n\n-----Test 15-----\n\nInput\n7\n8\n2\n1\n3\n6\n5\n4\n9\n\nOutput\n8\n2\n1\n3\n6\n5\n4\n9\n\n-----Test 16-----\n\nInput\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\nOutput\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n-----Test 17-----\n\nInput\n5\n8\n6\n3\n7\n9\n4\n2\n1\n\nOutput\n8\n6\n3\n7\n9\n4\n2\n1\n\n-----Test 18-----\n\nInput\n9\n3\n7\n5\n1\n6\n2\n8\n4\n0\n\nOutput\n9\n3\n7\n5\n1\n6\n2\n8\n4\n0\n\n-----Test 19-----\n\nInput\n6\n2\n8\n1\n9\n5\n4\n3\n7\n\nOutput\n2\n8\n1\n9\n5\n4\n3\n7\n\n-----Test 20-----\n\nInput\n4\n6\n3\n5\n7\n8\n9\n2\n1\n\nOutput\n6\n3\n5\n7\n8\n9\n2\n1\n\n-----Test 21-----\n\nInput\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\nOutput\n8\n7\n6\n5\n4\n3\n2\n1\n\n-----Test 22-----\n\nInput\n2\n9\n5\n7\n3\n8\n1\n6\n4\n\nOutput\n9\n5\n7\n3\n8\n1\n6\n4\n\n-----Test"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(0).read()) == open(1).read()\nprint('Ok!')\n\n\"\"\""
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '154873296\\n'\n    '386592714\\n'\n    '729641835\\n'\n    '863725149\\n'\n    '975314628\\n'\n    '412968357\\n'\n    '631457982\\n'\n    '598236471\\n'\n    '247189563\\n') == '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\\n'\n\nprint('The local tests are done. Click on \"Check\" for more details.')\n\"\"\"\n\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"154873296\") == \"154873396\"\nassert solution(\"386592714\") == \"336592714\"\nassert solution(\"729641835\") == \"729645835\"\nassert solution(\"863725149\") == \"863725145\"\nassert solution(\"975314628\") == \"979314628\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == correct_output_1\n\n-----Constraints-----\n\n1 <= t <= 10^4\n\nIt is guaranteed that the answer exists.\n\nEach test case consists of at most 9 lines, each line consists of 9 characters from 1 to 9 without any whitespaces.\n\n-----Solution-----\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563') == \\\n    '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\nassert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563') == \\\n    '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\nassert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563') == \\\n    '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\nassert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563') == \\\n    '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\nassert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563') == \\\n    '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n2 4\") == \"5\"\nassert solution(\"6 3\\n1 2\\n2 3\\n2 4\\n5 6\") == \"8\"\n\"\"\"\n\nfrom collections import defaultdict\nimport unittest"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 2\\n1 3\\n2 4') == '3'\n\n\"\"\"\n\nn, q = (int(x) for x in stdin.split())\nd = {1: 1}\nc = {1: 1}\n\nfor _ in range(n - 1):\n    d[int(stdin.split()[1])] = int(stdin.split()[2])\n    c[int(stdin.split()[2])] = c.get(int(stdin.split()[2]), 0) + 1\n    for i in c:\n        c[i] = min(c[i], d[i])\n\nfor _ in range(q):\n    print(c[int(stdin.split()[1])])\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 6\\\\n1 1 1 3 5 3 5 7\\\\n3 1\\\\n1 5\\\\n3 4\\\\n7 3\\\\n1 8\\\\n1 9\\\\n\") == \"3\\\\n6\\\\n8\\\\n-1\\\\n9\\\\n4\\\\n\"\n\"\"\""
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9') == '3\\n6\\n8\\n-1\\n9\\n4'\nassert solution('9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9') == '3\\n6\\n8\\n-1\\n9\\n4'"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 3\\n2 4\") == \"3\\n2\\n1\"\nassert solution(\"6 5\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n2\\n1\\n6\\n3\\n1\"\nassert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n2\\n1\\n6\\n3\\n1\\n9\\n5\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 3\\n1 2\\n2 3\") == \"2\"\nassert solution(\"4 2\\n1 3\\n1 2\\n2 3\") == \"2\"\nassert solution(\"3 2\\n1 3\\n1 2\\n2 3\") == \"2\"\nassert solution(\"3 2\\n1 3\\n1 2\\n2 3\") == \"2\"\nassert solution(\"3 2\\n1 3\\n1 2\\n2 3\") == \"2\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9') == '3\\n6\\n8\\n-1\\n9\\n4'\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 1\\n1 3\\n1 2\\n3 1\\n3 3\\n3 4\\n4 2\\n5 1\\n5 2\\n5 4\\n\") == \"5\\n3\\n5\\n4\\n4\\n\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 3 5 3 5 7\") == \"3\"\n\"\"\"\n\nimport sys\nimport math\n\nINPUT_LINES = sys.stdin.read().splitlines()\nn, q = map(int, INPUT_LINES[0].split())\n\nparents = list(map(int, INPUT_LINES[1].split()))"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n1 5 3\\n2 5\\n3\\n4\\n3\\n4\\n5\\n6') == '2\\n-1\\n3\\n5\\n6\\n6\\n6'\nassert solution('5 2\\n1 5 3\\n2 5\\n3\\n4\\n3\\n4\\n5\\n6') == '2\\n-1\\n3\\n5\\n6\\n6\\n6'\nassert solution('5 2\\n1 5 3\\n2 5\\n3\\n4\\n3\\n4\\n5\\n6') == '2\\n-1\\n3\\n5\\n6\\n6\\n6'\nassert solution('5 3\\n1 5 3\\n2 5\\n3\\n4\\n3\\n4\\n5\\n6') == '2\\n-1\\n3\\n5\\n6\\n6\\n6'\nassert solution('5 3\\n1 5 3\\n2 5\\n3\\n4\\n3\\n4\\n5\\n6') == '2\\n-1\\n3\\n5\\n6\\n6\\n6'\n\nprint(solution('5 2\\n1 5 3\\n2 5\\n3\\n4\\n3\\n4\\n5\\n6'))\nprint(solution('5 2\\n1 5 3\\n2 5\\n3\\n4\\n3\\n4\\n5\\n6'))\nprint(solution('5 2\\n1 5 3\\n2 5\\n3\\n4\\n3\\n4\\n5\\n6'))\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n3 2 1 8''') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == \"YES\\nYES\\nNO\\nNO\\nYES\\n\"\nassert solution(test_input_2) == \"NO\\nYES\\n\"\nassert solution(test_input_3) == \"YES\\nYES\\nYES\\n\"\nassert solution(test_input_4) == \"YES\\nYES\\nYES\\n\"\nassert solution(test_input_5) == \"YES\\nYES\\nYES\\n\"\n\"\"\""
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\\nYES\\nNO\\nNO\\nYES\"\n\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2 1\") == \"YES\"\nassert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"YES\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"YES\"\nassert solution(\"101 101 101 3\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\\n\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2 8\") == 'YES'\nassert solution(\"100 101 102 105\") == 'YES'\nassert solution(\"3 2 1 100000000\") == 'NO'\nassert solution(\"10 20 15 14\") == 'YES'\nassert solution(\"101 101 101 3\") == 'NO'\nprint(solution(input()))\n\"\"\"\nimport sys\n\nfor _ in range(int(sys.stdin.readline().strip())):\n    a, b, c, n = map(int, sys.stdin.readline().strip().split())\n    if (a + b + c) - n == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n1 2 3 4') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\n\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def solution(self, stdin):\n        n, m = [int(i) for i in stdin.readline().split()]\n        x = [int(i) for i in stdin.readline().split()]\n\n        pos = {}\n        def pos_of_val(val, p):\n            return pos[p][val] if val in pos[p] else pos[p][val] = p.index(val)\n\n        for i, v in enumerate(x):\n            if v in pos:\n                continue\n            pos[v] = {v:i}\n            pos[v][1] = i+1\n            for j in range(i+2, n+1):\n                pos[v][j] = j\n            pos[v][j+1] = i\n\n        def f(p):\n            res = 0\n            for i in range(1, m):\n                res += abs(pos_of_val(x[i], p) - pos_of_val(x[i + 1], p))\n            return res\n        print(*map(f, [p1, p2, p3, p4]), sep='\\n')\n\n    def solution_wrong(self, stdin):\n        n, m = [int(i) for i in stdin.readline().split()]\n        x = [int(i) for i in stdin.readline().split()]\n        perm = {i: x[i] for i in range(n)}\n        first = {i: i for i in range(n)}\n\n        for i in range(n):\n            perm[i] = i + 1\n\n        def f(p):\n            res = 0\n            for i in range(1, m):\n                res += abs(p[x[i]] - p[x[i + 1]])\n            return res\n        print(*map(f, [perm, p1, p2, p3, p4]), sep='\\n')\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"3 4 6 5\"\nassert solution(\"5 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\") == \"3 3\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == [3, 4, 6, 5]\nassert solution(\"5 5\\n2 1 5 3 5\") == [9, 8, 12, 6, 8]\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == [3, 3]\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n1 2 3 4') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\n\"\"\"\n\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"3 4 6 5\"\nassert solution(\"5 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\") == \"3 3\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"3 4 6 5\"\nassert solution(\"5 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\") == \"3 3\"\n\n\n\n'''\nfrom collections import deque\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(output())\n\n\n\n-----Interviewer's test cases-----\n\nInput:\n3 3\n1 2\n1 3\n2 3\nOutput:\nNO\nYES\nYES\n\nInput:\n3 3\n1 2\n2 3\n3 3\nOutput:\nYES\nYES\nNO\n\nInput:\n4 4\n1 2\n1 3\n2 3\n2 4\nOutput:\nNO\nYES\nNO\nNO\n\nInput:\n4 4\n1 2\n1 3\n3 4\n2 3\nOutput:\nYES\nYES\nNO\nYES\n\nInput:\n5 5\n1 2\n1 3\n1 4\n2 5\n2 4\nOutput:\nYES\nYES\nNO\nNO\nNO\n\nInput:\n6 6\n1 2\n2 3\n3 4\n4 5\n5 6\n1 2\n3 4\n4 5\n5 6\nOutput:\nYES\nYES\nYES\nYES\nYES\nNO\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7''') == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open('data/07_test_1.txt').read()) == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nprint('Test 1 is OK\\n')\n\nassert solution(open('data/07_test_2.txt').read()) == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nprint('Test 2 is OK\\n')\n\nassert solution(open('data/07_test_3.txt').read()) == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nprint('Test 3 is OK\\n')\n\nassert solution(open('data/07_test_4.txt').read()) == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nprint('Test 4 is OK\\n')\n\nassert solution(open('data/07_test_5.txt').read()) == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nprint('Test 5 is OK\\n')"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2''') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n\"\"\"\nfrom collections import defaultdict\n\n\nclass Graph(object):\n    def __init__(self, n):\n        self.n = n\n        self.graph = defaultdict(list)\n\n    def addEdge(self, u, v):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n\n    def DFSUtil(self, v, visited):\n        visited.add(v)\n        print(v, end=\" \")\n\n        for i in self.graph[v]:\n            if i not in visited:\n                self.DFSUtil(i, visited)\n\n    def DFS(self, v):\n        visited = set()\n        self.DFSUtil(v, visited)\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n1 2\") == \"YES\\nYES\\nYES\\nYES\\nNO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 6\\n1 2\\n2 3\\n3 4\\n4 1\\n3 1\\n2 3\\n3 2\\n1 2\\n1 3\\n2 3\\n3 4\\n2 4\\n3 4\\n2 1\\n3 4\\n2 4\\n2 2\\n1 2\\n2 1\\n2 3\\n3 2\\n4 4\\n1 3\\n2 4\\n1 3\\n2 4\\n2 2\\n2 3\\n3 4\\n1 3\\n2 4\\n1 3\\n2 4\\n2 2\\n2 3\\n3 4\\n1 3\\n2 4\\n1 3\\n2 4\\n1 3\\n2 4\\n1 4\\n1 3\\n1 4\\n1 3\\n1 4\\n1 3\\n1 4\\n1 4') == 'NO'\nassert solution('4 6\\n1 2\\n2 3\\n3 4\\n4 1\\n3 1\\n2 3\\n3 2\\n1 2\\n1 3\\n2 3\\n3 4\\n2 4\\n3 4\\n2 1\\n3 4\\n2 4\\n2 2\\n1 2\\n2 1\\n2 3\\n3 2\\n4 4\\n1 3\\n2 4\\n1 3\\n2 4\\n2 2\\n2 3\\n3 4\\n1 3\\n2 4\\n1 3\\n2 4\\n1 3\\n2 4\\n1 3\\n1 4\\n1 3\\n1 4\\n1 3\\n1 4\\n1 4') == 'YES'\nassert solution('4 6\\n1 2\\n2 3\\n3 4\\n4 1\\n3 1\\n2 3\\n3 2\\n1 2\\n1 3\\n2 3\\n3 4\\n2 4\\n3 4\\n2 1\\n3 4\\n2 4\\n2 2\\n1 2\\n2 1\\n2 3\\n3 2\\n4 4\\n1 3\\n2 4\\n1 3\\n2 4\\n2 2\\n2 3\\n3 4\\n1 3\\n2 4\\n1 3\\n2 4\\n1 3\\n1 4\\n1 3\\n1 4\\n1 3\\n1 4\\n1 4') == 'YES'\nassert solution('4 6\\n1 2\\n2 3\\n3 4\\n4 1\\n3 1\\n2 3\\n3 2\\n1 2\\n1 3\\n2 3\\n3 4\\n2 4\\n3 4\\n2 1\\n3 4\\n2 4\\n2 2\\n1 2\\n2 1\\n2 3\\n3 2\\n4 4\\n1 3\\n2 4\\n1 3\\n2 4\\n2 2\\n2 3\\n3 4\\n1 3\\n2 4\\n1 3\\n2 4\\n1 3\\n1 4\\n1 3\\n1 4\\n1 3\\n1 4\\n1 4') == 'NO'\nassert solution('4 6\\n1 2\\n2 3\\n3 4\\n4 1\\n3 1\\n2 3\\n3 2\\n1 2\\n1 3\\n2 3\\n3 4\\n2 4\\n3 4\\n2 1\\n3 4\\n2 4\\n2 2\\n1 2\\n2 1\\n2 3\\n3 2\\n4 4\\n1 3\\n2 4\\n1 3\\n2 4\\n2 2\\n2 3\\n3 4\\n1 3\\n2 4\\n1 3\\n2 4\\n1 3\\n1 4\\n1 3\\n1 4\\n1 4') == 'NO'\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"YES\"\nassert solution(\"7 7\") == \"YES\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"2 3 4 5 6\") == \"YES\"\nassert solution(\"1 2 3 4 5 6\") == \"NO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2') == ''\nassert solution('1 2\\n1 3') == ''\nassert solution('1 2\\n1 3\\n1 4') == ''\nassert solution('2 5\\n2 6') == ''\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input) == expected_output\n\n\n-----Problem Description-----\n\nFor each test case, print:\n\n  NO on the only line if it is impossible to connect all districts satisfying the conditions from the problem statement.  YES on the first line and $n-1$ roads on the next $n-1$ lines. Each road should be presented as a pair of integers $x_i$ and $y_i$ ($1 \\le x_i, y_i \\le n; x_i \\ne y_i$), where $x_i$ and $y_i$ are two districts the $i$-th road connects. \n\nFor each road $i$, the condition $a[x_i] \\ne a[y_i]$ should be satisfied. Also, all districts should be reachable from each other (possibly, using intermediate districts).\n\nYou have to build $n-1$ two-way roads to connect all districts (two districts can be connected directly or through other connected districts).\n\nIt is guaranteed that there is at least one possible way to build $n-1$ roads to satisfy all the conditions.\n\nNote: It is also guaranteed that at least one valid road can be built, so the output is not \"NO\" unless there is no valid road at all.\n\n-----Constraints-----\n\n1 <= t <= 500\n2 <= n <= 5000\n1 <= a_i <= 10^9\n\n\"\"\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2'\nassert solution('1\\n1') == 'YES\\n1 1'"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == 'YES\\n1 3\\n3 5\\n5 4\\n1 2'\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == 'NO'\nassert solution(\"2\\n2\\n1 1\\n1 1\\n1 1\") == 'YES'\nassert solution(\"2\\n2\\n1 1\\n2 2\\n1 1\") == 'NO'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\\nYES\\n1 2\\n1 3\\n1 4\\n\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n5\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n''') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\n\nassert solution('''\n3\n3\n1 1 1\n3\n1 1 1\n3\n1 1000 101 1000\n3\n1 1000 101 1000\n1 2\n''') == 'YES\\n1 2\\n1 3\\nYES'\n\nassert solution('''\n4\n2\n1 2\n3 4\n4\n1 2\n2 3\n3 4\n''') == 'NO'\n\nassert solution('''\n3\n4\n1 1000 101 1000\n4\n1 2 3 4\n''') == 'NO'\n\nassert solution('''\n2\n4\n1 2\n1 3\n1 4\n4\n1 1000 101 1000\n4\n1 2 3 4\n''') == 'YES\\n1 2\\n1 3\\n1 4\\nYES'"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n3\\n1 2 2 1 3\\n4\\n1 1000 101 1000') == 'YES\\n1 3\\n3 5\\n5 4'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\"\nprint(solution(\"3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\"))\nassert solution(\"2\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\nNO\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\"\n\"\"\"\n\nimport sys\n\n_, t = map(int, sys.stdin.readline().split())\nfor _ in range(t):\n    n, *a = map(int, sys.stdin.readline().split())\n    r = [set() for _ in range(n)]\n    for i in range(n-1):\n        if a[i] == a[i+1]:\n            r[i].add(a[i+1])\n        else:\n            r[i].add(a[i])\n            r[i+1].add(a[i+1])\n    bad = True\n    for rr in r:\n        if len(rr)!= n - 1:\n            bad = False\n            break\n    if bad:\n        print(\"YES\")\n        for i, rr in enumerate(r):\n            if len(rr)!= 1:\n                print(i+1, i+2)\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\n\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 2\\n1 3\\n1 4\\n\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 2\\n1 3\\n1 4\\n\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"NO\\n\"\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 'YES\\n1\\n'\nassert solution('2\\n') == 'YES\\n1 2\\n'\nassert solution('3\\n') == 'YES\\n1 3\\n2 3\\n'\nassert solution('4\\n') == 'NO\\n'\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11101010\") == \"01111010\"\nassert solution(\"11111010\") == \"01111100\"\n\"\"\""
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11101110') == '0111111'\nassert solution('11101110') == '0111111'\nassert solution('11101110') == '0111111'\n\"\"\""
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11101010') == '010'\nassert solution('11111111') == '11111111'\nassert solution('11100110') == '11100110'\n\"\"\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11011010') == '01111010'\nassert solution('7 9') == '1110111'\nassert solution('1111100') == '11100111'\nassert solution('7 11') == '11100110'\n\n'''\n\nn, k = map(int, input().split())\ns = input()"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(11101110) == \"0111111\"\n\n\"\"\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11101010\") == \"01111010\"\n\"\"\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input)) == str(output)\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11011010') == '011110'\nassert solution('7 9') == '11111'\nassert solution('1111100') == '0011111'\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected_output"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11011010\") == \"011110\"\nassert solution(\"11101010\") == \"011110\"\nassert solution(\"11111010\") == \"011111\"\nassert solution(\"111101010\") == \"0\"\nassert solution(\"11110111010\") == \"1\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9''') == '3\nassert solution('''5 1\n29 30\n30 30\n29 29\n28 30\n30 30''') == '3\nassert solution('''6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3''') == '4\n\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\n\nsegments = [[int(x) for x in input().split()] for _ in range(n)]\n\nm = 0\n\nsegments.sort(key=lambda x: x[0])\n\nqueue = [segments[0]]\n\nfor i in range(1, n):\n    if queue[-1][1] >= segments[i][0]:\n        queue.append(segments[i])\n    else:\n        queue.pop()\n        queue.append(segments[i])\n        m += 1\n\nprint(m)\nprint(\" \".join([str(x) for x in range(m)]))\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n1 4 7\\n\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 2 4\\n\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6\\n\"\n\nprint('Success')"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\"\"\") == '3\n1 4 7'\n\nassert solution(\"\"\"5 1\n29 30\n30 30\n29 29\n28 30\n30 30\"\"\") == '3\n1 2 4'\n\"\"\""
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n1 4 7'\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\nassert solution('10\\n1 1\\n1 1\\n1 1') == '0'\n\nassert solution('10\\n1 1\\n1 1\\n1 1') == '1'\n\nassert solution('10\\n1 1\\n1 1\\n1 1') == '2'\n\nassert solution('10\\n1 1\\n1 1\\n1 1') == '0'"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(example_input) == example_output\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n1 4 7\"\n\nassert solution(\"29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 2 4\"\n\nassert solution(\"2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 2 4\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == \"3\\n1 4 7\"\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == \"3\\n1 2 4\"\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3') == \"4\\n1 3 5 6\"\n\n\"\"\""
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == '3\\n1 2 4'\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == '4\\n1 3 5 6'\nassert solution(\"7 1\\n8 9\\n7 8\\n9 11\\n7 8\\n9 11\\n7 9\") == '3\\n1 2 4'\nassert solution(\"7 5\\n1 1\\n2 2\\n3 3\\n4 5\\n5 5\") == '1\\n2 4'\nassert solution(\"7 5\\n1 1\\n2 2\\n3 3\\n4 5\\n5 5\") == '1\\n2 4'\n\"\"\"\n\n\nfrom collections import Counter\nimport sys"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == 3\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == 19\n\"\"\"\n\nn = int(input())\npoints = list(map(int, input().split()))\nspeeds = list(map(int, input().split()))\n\ndiff = [abs(points[i] - points[i - 1]) / speeds[i] for i in range(1, n)]\n\nprint(sum(diff))"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == 3\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == 19\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 1 4 3 5\\n2 2 2 3 4') == '19'\n\nassert solution('3\\n1 3 2\\n-100 2 3') == '3'\n\nassert solution('2\\n2 1\\n-3 0') == '0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == 3\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == 19\nassert solution(\"2\\n2 1\\n-3 0\") == 0\n\nprint(solution(input()))\n\n\"\"\"\n\nimport sys\n\nsys.stdin.readline()\n\nx = [int(n) for n in sys.stdin.readline().split()]\n\nsys.stdin.readline()\n\nv = [int(n) for n in sys.stdin.readline().split()]\n\nn = len(x)\n\nfrom functools import lru_cache\n\n@lru_cache(None)\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3\\n') == 3\nassert solution('5\\n2 1 4 3 5\\n2 2 2 3 4\\n') == 19\nassert solution('2\\n2 1\\n-3 0\\n') == 0\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 4 3 5\\n2 2 2 3 4') == '19'\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n1 1') == '0'\nassert solution('2 1\\n1 1') == '2'\nassert solution('2 2\\n1 1') == '0'\nassert solution('2 2\\n1 1') == '0'\nassert solution('2 2\\n1 1') == '0'\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3\\n') == '3'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3') == 3\n\"\"\""
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2 1\\n2 3 2\\n1 3 2\\n3 4 2\\n1 3 2\\n3 4 2\\n1 2 3\\n2 3 4\") == \"1 3 3\"\nassert solution(\"4 3\\n1 2 1\\n2 3 2\\n1 3 2\\n3 4 2\\n1 3 2\\n3 4 2\\n1 2 3\\n2 3 4\") == \"1 3 3\"\nassert solution(\"6 6\\n1 2 3\\n2 3 4\\n3 4 5\\n4 5 6\\n1 2 3\\n2 3 4\\n3 4 5\\n4 5 6\\n1 2 3\\n2 3 4\\n3 4 5\\n4 5 6\\n1 2 3\\n2 3 4\\n3 4 5\\n4 5 6\\n1 2 3\\n2 3 4\\n3 4 5\\n4 5 6\") == \"0 0\"\nassert solution(\"2 2\\n1 2 1\\n1 2 1\") == \"0 0\""
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1') == '21 7 15 21 3 '\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == '21 7 15 21 3'\nprint('Test pass.')"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == '21 7 15 21 3'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\\n\") == \"21 7 15 21 3\"\nassert solution(\"1 2\\n1 2\\n\") == \"0 0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 2\\n\") == \"1 3 3\"\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 4\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 6 4\n3 6 2\n5 2 3 4 1\n3\n1 2\n3 2\n1 3\n\"\"\") == \"21 7 15 21 3\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\nassert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\nassert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\nassert solution(\"1 2\\n2 3\") == \"0 0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 2\") == \"1 3 3\"\n\n\n-----Solution-----\n\nimport sys"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3 \"\nassert solution(\"1 2\\n1 2\\n\") == \"0 0 \"\n\n\n-----Problem-----\n\u041c\u0438\u043d\u0438\u043c\u0443\u043c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e nn. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 nn-e \u0447\u0438\u0441\u0435\u043b \u0424\u0438\u0431\u043e\u043d\u0430\u0447\u0447\u0438.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nn.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\nSample Input 1:\n\n7\n\nSample Output 1:\n\n1\n1\n2\n3\n5\n8\n13\n\nSample Input 2:\n\n10\n\nSample Output 2:\n\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n\nSample Input 3:\n\n1\n\nSample Output 3:\n\n1\n\nSample Input 4:\n\n2\n\nSample Output 4:\n\n1\n1\n\nSample Input 5:\n\n10\n\nSample Output 5:\n\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n\n-----Problem-----\n\u041c\u0438\u043d\u0438\u043c\u0443\u043c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0434\u0432\u0443\u0445\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e n. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 nn-e \u0447\u0438\u0441\u0435\u043b \u0424\u0438\u0431\u043e\u043d\u0430\u0447\u0447\u0438.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nn.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\nSample Input 1:\n\n10\n\nSample Output 1:\n\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n89\n\nSample Input 2:\n\n8\n\nSample Output 2:\n\n1\n1\n2\n3\n5\n8\n13\n21\n34\n\nSample Input 3:\n\n5\n\nSample Output 3:\n\n1\n1\n2\n3\n5\n\n\n-----Problem-----\n\u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u041b\u0435\u0432\u0435\u043d\u0448\u0442\u0435\u0439\u043d\u0430\n\n\u0414\u0430\u043d\u044b \u0434\u0432\u0430 \u0441\u043b\u043e\u0432\u0430. \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0432\u044b\u044f\u0441\u043d\u0438\u0442\u044c, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u0434\u043d\u043e \u0438\u0437 \u043d\u0438\u0445 \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043f\u043e \u0434\u043b\u0438\u043d\u0435. \u0421\u043b\u043e\u0432\u0430 \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u0432 \u043d\u0438\u0436\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 YES, \u0435\u0441\u043b\u0438 \u0441\u043b\u043e\u0432\u043e \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 \u0441\u0442\u0440\u043e\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0441\u043b\u043e\u0432\u043e \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0438\u043b\u0438 NO \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0438\u0437 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\nSample Input 1:\n\nabcd\nabc\n\nSample Output 1:\n\nNO\n\nSample Input 2:\n\naaabbb\naaabb"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n\"\"\""
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3\\n1 2 2\\n4\\n5 5 5 5\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 2\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"1\\n100\") == \"YES\"\nassert solution(\"1\\n100\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n1 2 2\\n4\\n5 5 5 5\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 2\\n4\\n5 5 5 5\") == \"NO\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 4\\n5 5 5 5\") == \"YES\"\nassert solution(\"3\\n1 2 2\\n4\\n1 3 4 4\") == \"NO\"\nassert solution(\"3\\n1 2 4\\n4\\n1 3 4 4\") == \"YES\"\nassert solution(\"5\\n100\\n1 2 4 5 5\\n5\\n1 3 4 4 5\") == \"YES\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\") == \"YES\"\nassert solution(\"1\\n2 2\") == \"YES\"\nassert solution(\"1\\n2 2 2\") == \"NO\"\nassert solution(\"1\\n2 2 2 2\") == \"NO\"\nassert solution(\"1\\n2 2 2 2 2\") == \"NO\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 2\\n4\\n5 5 5 5\") == \"YES\"\nassert solution(\"1 2 2\\n4\\n1 2 4\") == \"YES\"\nassert solution(\"100\\n1 2 4\") == \"NO\"\nassert solution(\"1\\n100\") == \"NO\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(example1) == \"YES\"\nassert solution(example2) == \"YES\"\nassert solution(example3) == \"NO\"\nassert solution(example4) == \"NO\"\nassert solution(example5) == \"YES\"\n\"\"\"\n\n\n\n\"\"\"\n[\ubb38\uc81c \uc124\uba85]\n\n\uc9d1\ud569 A\uac00 \uc8fc\uc5b4\uc84c\uc744 \ub54c, \uc790\uc2e0\uc774 \uc18d\ud55c \uc9d1\ud569\uc744 \ud3ec\ud568\ud558\ub294 \uc9d1\ud569\uc774 \ub418\ub294 \uc9d1\ud569 \uc911\uc5d0\uc11c \uc11c\ub85c \uc5f0\uacb0\ub418\uc9c0 \uc54a\uc740 \uc9d1\ud569\uc758 \ucd5c\ub300 \uac1c\uc218\ub97c \uad6c\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc2dc\uc624. \n\nA\ub294 \ub2e8\uc21c\ud788 \uc790\uc2e0\uc744 \ud3ec\ud568\ud558\ub294 \ud2b8\ub9ac\uc774\uba70, \uac01 \uc9d1\ud569\uc758 \uc6d0\uc18c\ub294 \ud574\ub2f9 \uc9d1\ud569\uc758 \uc6d0\uc18c\uc758 \uac1c\uc218\ub97c \uc758\ubbf8\ud558\uba70, \uc6d0\uc18c\uc758 \uac1c\uc218\ub294 1\uc774\uc0c1 100,000 \uc774\ud558\uc774\ub2e4.\n\n[\uc785\ub825]\n\n\uccab \uc904\uc5d0 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc758 \uac1c\uc218 T (1 \u2264 T \u2264 100)\uc774 \uc8fc\uc5b4\uc9c4\ub2e4. \uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub294 \ud55c \uc904\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uace0, \uc9d1\ud569\uc758 \uc6d0\uc18c\uc758 \uac1c\uc218 N (1 \u2264 N \u2264 100)\uc774 \uc8fc\uc5b4\uc9c4\ub2e4. \uadf8 \ub2e4\uc74c \uc904\uc5d0\ub294 \uc9d1\ud569 A\uc758 \uc6d0\uc18c\ub4e4\uc774 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub418\uc5b4 \uc8fc\uc5b4\uc9c4\ub2e4. \n\uc9d1\ud569\uc758 \uc6d0\uc18c\ub294 \ubaa8\ub450 \uc11c\ub85c \ub2e4\ub978 \uc790\uc5f0\uc218\ub85c \uc8fc\uc5b4\uc9c0\uba70, 1 \uc774\uc0c1 100,000 \uc774\ud558\uc774\ub2e4.\n\n[\ucd9c\ub825]\n\n\uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub9c8\ub2e4 \uc785\ub825\uc73c\ub85c \uc8fc\uc5b4\uc9c4 \uc9d1\ud569 A\uc758 \ucd5c\ub300 \uc5f0\uacb0\ub418\uc9c0 \uc54a\uc740 \uc9d1\ud569\uc758 \ucd5c\ub300 \uac1c\uc218\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\"\"\"\n\n\n\"\"\"\n\ucc38\uace0 \nhttps://www.acmicpc.net/problem/1987\n\"\"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'NO'\nassert solution('4\\n1 2 3 4') == 'YES'\nassert solution('3\\n1 2 4') == 'NO'\nassert solution('4\\n1 2 2') == 'YES'\n\nassert solution('4\\n100 100 100 100') == 'YES'\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'YES'\nassert solution('2 2 2') == 'NO'\nassert solution('4 5 4 4') == 'NO'\nassert solution('1 2 4') == 'YES'\nassert solution('1 3 4 4') == 'NO'\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"NO\"\nassert solution(\"3\\n1\\n2\\n4\\n\") == \"YES\"\nassert solution(\"4\\n1\\n2\\n2\\n\") == \"NO\"\nassert solution(\"1\\n2\\n2\\n\") == \"YES\"\nassert solution(\"2\\n2\\n\") == \"NO\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n1\\n100\") == \"YES\"\nassert solution(\"5\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n1\\n100\") == \"YES\"\nassert solution(\"5\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n1\\n100\") == \"NO\"\nassert solution(\"5\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n1\\n100\") == \"NO\"\n\n'''\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1101') == '12'\nassert solution('1001') == '11'\nassert solution('10101') == '1'\nassert solution('10111') == '0'\n\nprint(solution('10101'))\n\"\"\""
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"4 5\") == \"11\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"100 101\") == \"1_2\"\nassert solution(\"100 1000\") == \"8_10\"\n\"\"\""
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'\n\n\"\"\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\""
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == '12'\nassert solution(\"4 5\\n1001\\n10101\") == '11'\n\"\"\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4 10110') == '12'\nassert solution('4 5 101010') == '11'\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\""
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n4\\n6\\n8\\n10') == 'NO\\nYES\\n2 4 1 5'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n4\") == \"NO\"\nassert solution(\"6\\n8\") == \"2 4 1 5\"\nassert solution(\"10\\n18\") == \"NO\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nimport math\nimport heapq\n\nsys.setrecursionlimit(1000000)\nINF = float(\"inf\")\nmod = 10 ** 9 + 7\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n6') == 'NO'\nassert solution('6\\n8') == '2 4 1 5'\nassert solution('8\\n10') == 'NO'\nassert solution('10\\n12') == 'NO'\nassert solution('8\\n10') == '2 4 6 8 1 3 5 11'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"YES\"\nassert solution(\"10\") == \"NO\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n6') == 'YES\\n2 4 1 5'\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n4\\n6\\n8\\n10') == 'NO'\nassert solution('3\\n4\\n6\\n8\\n10') == 'NO'\nassert solution('2\\n4\\n6\\n8\\n10') == 'NO'\nassert solution('2\\n4\\n6\\n8\\n10') == 'NO'\nassert solution('1\\n2\\n3\\n4\\n5') == 'NO'\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n8\\n12\\n14\\n16\\n18\\n20\\n22') == '2 4 1 5'\nassert solution('8\\n10\\n12\\n14\\n16\\n18\\n20\\n22') == 'NO'\nassert solution('8\\n12\\n16\\n20') == 'YES'\nassert solution('8\\n16\\n20') == 'NO'\nassert solution('12\\n24\\n30') == 'YES'\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n6') == 'NO'\nassert solution('2\\n4') == 'YES\\n2 4 1 5'\nassert solution('5\\n8') == 'NO'\nassert solution('8\\n10') == 'YES\\n2 4 6 8 1 3 5 11'\n\"\"\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n6') == 'NO'\nassert solution('8\\n10') == 'YES\\n2 4 6 8 1 3 5 11'\n\n\"\"\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2\\n4\\n6\\n8\\n10\\n\") == \"NO\"\nassert solution(\"5\\n2\\n4\\n6\\n8\\n10\\n\") == \"NO\"\nassert solution(\"5\\n6\\n8\\n10\\n\") == \"NO\"\nassert solution(\"5\\n8\\n10\\n\") == \"NO\"\nassert solution(\"5\\n6\\n8\\n10\\n\") == \"NO\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\") == \"5\\n1\\n0\\n4\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 1 4 1 5 9 2 6 5\\n\") == \"5\"\nassert solution(\"8\\n8 7 6 5 4 3 2 1\\n\") == \"0\"\nassert solution(\"1\\n1\\n1\") == \"1\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"0\"\nassert solution(\"2\\n1 1\\n1\") == \"1\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 1 1') == '1'\nassert solution('6\\n1 1 1 1 1 1') == '6'\nassert solution('9\\n3 1 4 1 5 9 2 6 5') == '5'\n\"\"\"\n\nfrom collections import defaultdict\nimport sys\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1 2\\n5\\n1 1 1 1 1\") == \"5\"\nassert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\nassert solution(\"9\\n9 9 9 9 9 9 9 9 9\") == \"0\"\nassert solution(\"9\\n1 1 1 1 1\") == \"1\"\nassert solution(\"9\\n8 7 6 5 4 3 2 1\") == \"0\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n4 3 2 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\\n8\\n8 7 6 5 4 3 2 1\") == \"5\\n1\\n0\\n4\\n0\"\n\"\"\""
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1 2\\n5\\n1 1 1 1 1\") == \"0\"\n\"\"\"\n\n\"\"\"\n- \uc77c\ubc18\uc801\uc778 \ubc29\ubc95\n\"\"\"\n\nt = int(stdin.readline().strip())\n\nfor _ in range(t):\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] == a[i]:\n                res += 1\n    print(res)\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '3'\nassert solution('3\\n1 5\\n2 4\\n2 3\\n3 4\\n7\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '4'\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List, Tuple\nfrom math import ceil"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\") == \"3\"\nassert solution(\"4\\n2 2\\n3\") == \"2\"\nassert solution(\"5\\n1 5\\n2 3\\n2 5\") == \"2\"\nassert solution(\"4\\n1 5\\n2 3\\n2 5\") == \"2\"\n\nassert solution(\"4\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == \"3\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"7\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"4\"\n\n\"\"\"\n\n\nfrom typing import List, Set, Tuple\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\\n4\\n2\\n7\"\nassert solution(\"4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\\n4\\n2\\n7\"\nassert solution(\"3\\n1 3\\n2 4\\n2 3\\n7\") == \"4\\n2\\n7\"\nassert solution(\"4\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\\n4\\n2\\n7\"\nassert solution(\"4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\\n4\\n2\\n7\"\n\n\"\"\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_data) == solution.__annotations__"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '3'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '4'\n\"\"\""
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"3\\n4\\n2\\n7\"\n\n\"\"\"\n\nimport sys\nimport math\n\nsys.setrecursionlimit(10**6)\n\ninp = sys.stdin"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '7'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '7'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '7'\n\n\"\"\""
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n''') == '''\n3\n4\n2\n7\n'''\nassert solution('''\n3\n3\n1 5\n2 4\n2 3\n''') == '''\n2\n3\n2\n'''\nassert solution('''\n2\n3\n1 5\n2 4\n2 3\n''') == '''\n3\n2\n3\n'''\n\nprint(solution(input()))"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\\n4\\n2\\n7\"\nassert solution(\"4\\n5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"4\\n4\\n2\\n7\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\\n4\\n2\\n7\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\\n4\\n2\\n7\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('0') == ''\nassert solution('1 1') == '0'\nassert solution('1 0') == '1'\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('23 55\\n23 0\\n0 1\\n4 20\\n23 59') == '5\\n60\\n1439\\n1180\\n1'\n\"\"\"\n\nimport sys\nimport math\nimport os\nimport time\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\\n\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('23 55\\n23 0\\n0 1\\n4 20\\n23 59') == '5\\n60\\n1439\\n1180\\n1'\nprint(solution(input()))\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\nprint(\"The local tests are done.\")\n\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"LRUD\") == \"LR\"\nassert solution(\"LURD\") == \"UR\"\nassert solution(\"RRUDU\") == \"RRU\"\nassert solution(\"LLDDR\") == \"LLDR\"\n\nassert solution(\"LLDDR\") == \"LLDR\""
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"LRUD\") == \"LURD\"\nassert solution(\"LURD\") == \"LURD\"\nassert solution(\"RRUDU\") == \"RRUDR\"\nassert solution(\"LLDDR\") == \"LLDRD\"\n\"\"\"\n\nfrom __future__ import annotations\nfrom collections import deque\nfrom typing import Deque, Deque, Deque, List, List, Set, Tuple, TypeVar"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('LRUD') == '1 2'\nassert solution('URLD') == '1 4'\nassert solution('RRDD') == '3 4'\nassert solution('LLUDR') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"LURDRU\") == \"1 2\"\nassert solution(\"LURDRURDU\") == \"1 4\"\nassert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LUD\") == \"1 2\"\nassert solution(\"RLD\") == \"1 2\""
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"LURLLR\") == (\"LU\", \"LR\", \"LURLLR\", \"URL\", \"LURLLR\")\nassert solution(\"LRRR\") == (\"L\", \"L\", \"LRRR\")\nassert solution(\"LURD\") == (\"LU\", \"UR\", \"LURD\")\n\n\"\"\"\n\nfrom collections import deque\nfrom typing import Deque, List, Optional\n\nN: int\nstdin: Deque[str]\nanswers: List[int]\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('LRUD') == 'LRU'\nassert solution('LURD') == 'LDR'\nassert solution('RRUDU') == 'RRDU'\nassert solution('LLDDR') == 'LLDR'"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('LR') == ''\nassert solution('L') == ''\nassert solution('LU') == ''\nassert solution('UU') == ''\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LURD\") == \"1 4\"\nassert solution(\"RRUDU\") == \"3 4\"\nassert solution(\"LLDDR\") == \"-1\"\n\"\"\""
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LLDDR\") == \"3 4\"\n\"\"\"\nfrom typing import List\n\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('L') == 'U'\nassert solution('R') == 'D'\nassert solution('U') == 'L'\nassert solution('D') == 'R'\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n\"\"\") == '3\\n1\\n0\\n2'\n\n\n\"\"\"\n\ubb38\uc81c \uc124\uba85\n\uccab \uc904\uc5d0 \ud14c\uc2a4\ud2b8\ucf00\uc774\uc2a4\uc758 \uc218 T\uac00 \uc8fc\uc5b4\uc9c4\ub2e4. \uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub294 \ud55c \uc904\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\ub2e4.\n\uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub294 \uc22b\uc790 n\uc774 \uc8fc\uc5b4\uc9c4\ub2e4. \ub2e4\uc74c n \uc904\uc5d0\ub294 n \uac1c\uc758 \uc815\uc218 a_i (i = 1, 2,..., n)\uac00 \uc8fc\uc5b4\uc9c4\ub2e4.\n\ub2e4\uc74c n \uc904\uc5d0\ub294 n \uac1c\uc758 \uc815\uc218 a_i (i = 1, 2,..., n)\uac00 \uc8fc\uc5b4\uc9c4\ub2e4. \uac01 \uc815\uc218\ub294 \ub2e4\ub978 \uc815\uc218\uc758 \uac12\uc744 \ud3ec\ud568\ud558\uc9c0 \uc54a\ub294\ub2e4.\n\n\uc8fc\uc5b4\uc9c4 n\uac1c\uc758 \uc218\ub4e4\uc744 \ubaa8\ub450 \uace0\ub974\uace0, \uac01 \uc218\ub294 \ub2e4\ub978 \uc218\ub4e4\uc758 \uc77c\ubd80\uc774\uc5b4\uc57c \ud55c\ub2e4. \ud56d\uc0c1 \ucd5c\uc18c\ud55c\uc758 \uc218\ub85c \uc774\ub8e8\uc5b4\uc9c4 \uc218\uc5f4\uc744 \uc774\ub8e8\ub294 \uc30d\uc774 \uc874\uc7ac\ud55c\ub2e4.\n\n\uc8fc\uc5b4\uc9c4 \uc218\ub4e4\uc744 \ubaa8\ub450 \ud3ec\ud568\ud558\ub294 \uc30d\uc758 \ucd5c\ub300 \ud06c\uae30\ub97c \ucc3e\uc544\uc57c \ud55c\ub2e4. \uac01 \uc218\ub294 \ub2e4\ub978 \uc218\ub4e4\uc758 \uc77c\ubd80\uc774\uc5b4\uc57c \ud55c\ub2e4.\n\n\uac00\ub2a5\ud55c \uacbd\uc6b0 \uc30d\uc758 \ucd5c\ub300 \ud06c\uae30\ub97c \uad6c\ud558\ub77c.\n\n\uac00\ub2a5\ud55c \uacbd\uc6b0 \uc30d\uc758 \ucd5c\ub300 \ud06c\uae30\ub97c \uad6c\ud558\ub77c. \n\n\uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub9c8\ub2e4 \ucd5c\ub300 \ud06c\uae30\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n-----Input-----\n\n3\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n\n-----Output-----\n\n3\n1\n0\n2\n\n\n\n\ubb38\uc81c \ud480\uc774 \uc544\uc774\ub514\uc5b4\n\n\uc54c\uace0\ub9ac\uc998\uc740 \uac00\ub2a5\ud55c \uacbd\uc6b0\uc758 \uc218\ub97c \uad6c\ud558\uba74 \ub41c\ub2e4.\n\n\uba3c\uc800 \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\ub0b4\uace0 \ucd5c\ub300\uac12\uc744 \ucc3e\uc544\ub0b4\ub294 \uac83\uc740 \uacbd\uc6b0\uc758 \uc218\ub97c \ub2e4 \uad6c\ud558\uace0 \uc804\ubd80 \uad6c\ud55c \ub2e4\uc74c \ucd5c\uc18c \uac12\uc744 \ub2e4\uc2dc \uad6c\ud558\ub294 \ubc29\uc2dd\uc774\ub2e4.\n\n\uc774\ub54c \ucd5c\ub300\uac12\uc740 \ucd5c\uc18c\uac12\uc744 \ucc3e\uae30 \uc704\ud574\uc11c \ucd5c\ub300\uac12\uc774 \ucd5c\uc18c\uac12\ubcf4\ub2e4 \ud06c\uba74 \ubb34\uc870\uac74 \ucd5c\ub300\uac12\uc774 \ucd5c\uc18c\uac12\ubcf4\ub2e4 \ucee4\uc57c\ud55c\ub2e4.\n\n\uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \ucd5c\uc18c\uac12\uc774 \ucd5c\ub300\uac12\ubcf4\ub2e4 \ud06c\uba74 \uacbd\uc6b0\uc758 \ufffd"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == \"3\\n1\\n0\\n2\"\n\"\"\""
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n5\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3') == '3\\n1\\n0\\n2'\nassert solution('4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3') == '3\\n1\\n0\\n2'\n\"\"\"\n\n\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3') == '3\\n1\\n0\\n2'\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n7\\n4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5\\n2 1 5 4 3\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"4\\n1 1 1 3\") == \"2\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n7\\n4 2 4 1 4 3 4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\") == \"3\\n1\\n0\\n2\"\n\"\"\"\n\n\nfrom typing import List\nimport unittest\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        pass\n\n    def tearDown(self) -> None:\n        pass\n\n    def test_solution(self) -> None:\n        sol = Solution()\n        for stdin, solution in (\n            [\"4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\", \"3\\n1\\n0\\n2\"],\n            [\"1\\n1\", \"1\"],\n            [\"1\\n2\", \"0\"],\n            [\"1\\n5\", \"2\"],\n            [\"4\\n5\", \"2\"],\n        ):\n            self.assertEqual(solution, sol.solution(stdin))\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == \"3\\n1\\n0\\n2\"\nassert solution(\"4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == \"3\\n1\\n0\\n2\"\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n7\\n4 2 4 1 4 3 4') == '3\\n1\\n0\\n2'\n\nprint(solution(input()))"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(expected_result)\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n1 3\") == \"3\"\nassert solution(\"3\\n1 2\\n2 3\") == \"0\"\nassert solution(\"8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\nassert solution(\"8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\n\"\"\""
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\n\n\"\"\""
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2\\n2 3\\n1 4') == '2'\nassert solution('4\\n1 2\\n2 3\\n1 4\\n1 5') == '1'\nassert solution('3\\n1 2\\n1 3') == '1'\nassert solution('10\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10') == '0'\nassert solution('8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8') == '121'\n\n\"\"\"\n\n\nimport sys\nimport numpy as np\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 2\\n1 3\\n2 4\\n2 5\\n5 6\\n5 7\\n3 8\\n3 9\\n4 10\\n4 11\\n6 12\\n6 13\\n7 14\\n7 15\\n9 16\\n9 17\\n8 18\\n8 19\\n10 20\\n10 21\\n11 22\\n11 23\\n12 24\\n12 25\\n13 26\\n13 27\\n14 28\\n14 29\\n15 30\\n15 31\\n16 32\\n16 33\\n17 34\\n17 35\\n18 36\\n18 37\\n19 38\\n19 39\\n20 40\\n20 41\\n21 42\\n21 43\\n22 44\\n22 45\\n23 46\\n23 47\\n24 48\\n24 49\\n25 50\\n25 51\\n26 52\\n26 53\\n27 54\\n27 55\\n28 56\\n28 57\\n29 58\\n29 59\\n30 60\\n30 61\\n31 62\\n31 63\\n32 64\\n32 65\\n33 66\\n33 67\\n34 68\\n34 69\\n35 70\\n35 71\\n36 72\\n36 73\\n37 74\\n37 75\\n38 76\\n38 77\\n39 78\\n39 79\\n40 80\\n40 81\\n41 82\\n41 83\\n42 84\\n42 85\\n43 86\\n43 87\\n44 88\\n44 89\\n45 90\\n45 91\\n46 92\\n46 93\\n47 94\\n47 95\\n48 96\\n48 97\\n49 98\\n49 99\") == \"121\"\nassert solution(\"6\\n1 2\\n1 3\\n2 4\\n2 5\\n5 6\\n5 7\\n3 8\\n3 9\\n4 10\\n4 11\\n6 12\\n6 13\\n7 14\\n7 15\\n9 16\\n9 17\\n8 18\\n8 19\\n10 20\\n10 21\\n11 22\\n11 23\\n12 24\\n12 25\\n13 26\\n13 27\\n14 28\\n14 29\\n15 30\\n15 31\\n16 32\\n16 33\\n17 34\\n17 35\\n18 36\\n18 37\\n19 38\\n19 39\\n20 40\\n20 41\\n21 42\\n21 43\\n22 44\\n22 45\\n23 46\\n23 47\\n24 48\\n24 49\\n25 50\\n25 51\\n26 52\\n26 53\\n27 54\\n27 55\\n28 56\\n28 57\\n29 58\\n29 59\\n30 60\\n30 61\\n31 62\\n31 63\\n32 64\\n32 65\\n33 66\\n33 67\\n34 68\\n34 69\\n35 70\\n35 71\\n36 72\\n36 73\\n37 74\\n37 75\\n38 76\\n38 77\\n39 78\\n39 79\\n40 80\\n40 81\\n41 82\\n41 83\\n42 84\\n42 85\\n43 86\\n43 87\\n44 88\\n44 89\\n45 90\\n45 91\\n46 92\\n46 93\\n47 94\\n47 95\\n48 96\\n48 97\\n49 98\\n49 99\") == \"0\"\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n2 5\\n5 6\\n5 7\\n3 8\\n3 9\\n4 10\\n4 11\\n6 12\\n6 13\\n7 14\\n7 15\\n9 16\\n9 17\\n8 18\\n8 19\\n10 20\\n10 21\\n11 22\\n11 23\\n12 24\\n12 25\\n13 26\\n13 27\\n14 28\\n14 29\\n15 30\\n15 31\\n16 32\\n16 33\\n17 34\\n17 35\\n18 36\\n18 37\\n19 38\\n19 39\\n20 40\\n20 41\\n21 42\\n21 43\\n22 44\\n22 45\\n23 46\\n23 47\\n24 48\\n24 49\\n25 50\\n25 51\\n26 52\\n26 53\\n27 54\\n27 55\\n28 56\\n28 57\\n29 58\\n29 59\\n30 60\\n30 61\\n31 62\\n31 63\\n32 64\\n32 65\\n33 66\\n33 67\\n34 68\\n34 69\\n35 70\\n35 71\\n36 72\\n36 73\\n37 74\\n37 75\\n38 76\\n38 77\\n39 78\\n39 79\\n40 80\\n40 81\\n41 82\\n41 83\\n42 84\\n42 85\\n43 86\\n43 87\\n44 88\\n44 89\\n45 90\\n45 91\\n46 92\\n46 93\\n47 94\\n47 95\\n48 96\\n48 97\\n49 98\\n49 99\") == \"0\"\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n2 5\\n5 6\\n5 7\\n3 8\\n3 9\\n4 10\\n4 11\\n6 12\\n6 13\\n7 14\\n7 15\\n9 16\\n9 17\\n8 18\\n8 19\\n10 20\\n10 21\\n11 22\\n11 23\\n12 24\\n12 25\\n13 26\\n13 27\\n14 28\\n14 29\\n15 30\\n15 31\\n16 32\\n16 33\\n17 34\\n17 35\\n18 36\\n18 37\\n19 38\\n19 39\\n20 40\\n20 41\\n21 42\\n21 43\\n22 44\\n22 45\\n23 46\\n23 47\\n24 48\\n24 49\\n25 50\\n25 51\\n26 52\\n26 53\\n27 54\\n27 55\\n28 56\\n28 57\\n29 58\\"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 2\\n1 4') == '0'\nassert solution('1\\n1') == '0'\nassert solution('3\\n1 2\\n1 3') == '0'\nassert solution('4\\n1 2\\n1 3') == '3'\nassert solution('8\\n9 4 1 7 10 1 6 5') == '121'\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\nassert solution(\"4\\n1337\") == \"0\"\nassert solution(\"6\\n2 1 4 6 5 3 5\\n4 3 6\\n1 2\\n2 3\\n4 5\\n1 5\\n5 1\") == \"26\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2\\n2 3') == '3'\nassert solution('4\\n1 3\\n3 2') == '1'\nassert solution('4\\n1 3\\n2 4') == '4'\nassert solution('4\\n1 3\\n4 2') == '1'\nassert solution('4\\n1 3\\n4 2') == '1'\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\n\n\"\"\"\n\nfrom collections import defaultdict\n\nn = int(stdin.readline())\nvalues = [int(x) for x in stdin.readline().split()]\nedges = defaultdict(list)\nfor line in stdin.readlines()[:n-1]:\n    u, v = map(int, line.split())\n    edges[u].append(v)\n    edges[v].append(u)\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6 8 9 1 2 1 3 4\") == \"90\"\nassert solution(\"7 1 1 7 1 8 1 9 1\") == \"72\"\nassert solution(\"6 1 1 2 3 4 4 6\") == \"35\"\nassert solution(\"5 2 1 3 2 4 5\") == \"32\"\nassert solution(\"10 2 1 3 5 4 7 8 9 10\") == \"420\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"6\\n18\\n0\\n227\\n8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\") == \"6\"\nassert solution(\"5 10\\n20 100 50 20 100500\") == \"0\"\nassert solution(\"5 10\\n24 24 24 24 24 24 24 24 24 24\") == \"8\"\n\"\"\""
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\") == \"6\\n18\\n0\\n227\\n8\"\nassert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\") == \"6\\n18\\n0\\n227\\n8\"\n\n-----'''"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2 1 3') == '6'\nassert solution('10 6\\n8 7 1 8 3 7 5 10 8 9') == '18'\nassert solution('5 10\\n20 100 50 20 100500') == '0'\nassert solution('10 25\\n24 24 24 24 24 24 24 24 24 24') == '8'\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9''') == '6\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n''') == '18'\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n''') == '0'\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n''') == '227'\nassert solution('''5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n''') == '8'\n\n\n\n\"\"\"\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n\"\"\"\n\n\"\"\"\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of the test case contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5; 1 \\le k \\le 10^9$) \u2014 the length of $a$ and the required divisior. The second line of the test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the $i$-th element of $a$.\n\nIt is guaranteed that the sum of $n$ does not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$).\n\"\"\"\n\n\"\"\"\n1\n5 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n\nOutput:\n6\n18\n0\n227\n8\n\"\"\"\n\n\n\n\"\"\"\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of the test case contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5; 1 \\le k \\le 10^9$) \u2014 the length of $a$ and the required divisior. The second line of the test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the $i$-th element of $a$.\n\nIt is guaranteed that the sum of $n$ does not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$).\n\nOutput:\n6\n18\n0\n227\n8\n\"\"\"\n\n\n\"\"\"\n2\n5 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n\nOutput:\n6\n18\n0\n227\n8\n\"\"\"\n\n\n\"\"\"\n5 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n\"\"\"\n\n\n\"\"\"\n5 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n\"\"\"\n\n\n\"\"\"\n5 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n\"\"\"\n\n\n\"\"\"\n5 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n\"\"\"\n\n\n\"\"\"\n5 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\") == \"6\"\nassert solution(\"5 10\\n20 100 50 20 100500\") == \"0\"\nassert solution(\"5 10\\n24 24 24 24 24 24 24 24 24 24\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 2\") == \"2\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"5\\n2 2\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 1 3\") == \"6\"\nassert solution(\"10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"18\"\nassert solution(\"5 10\\n20 100 50 20 100500\") == \"0\"\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"8\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 2 1 3\\n10 6') == '6'\nassert solution('5 10\\n20 100 50 20 100500') == '0'\nassert solution('10 25\\n24 24 24 24 24 24 24 24 24 24') == '8'\nassert solution('8 8\\n1 2 3 4 5 6 7 8') == '0'\n\"\"\""
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"6\"\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\\n8 8\") == \"0\"\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\\n8 8\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('1 1') == '1'\nassert solution('1 2') == '2'"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"5 5\") == \"2\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3\\n1 1') == 1\nassert solution('1 2\\n1 1 2 3') == 2\n\n\"\"\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('[1,2,3]\\n[1,1]') == '1'\nassert solution('[1,2]\\n[1,2,3]') == '2'\nassert solution('[1,2,3]\\n[1,1]') == '1'\nassert solution('[1,2,3,4,5]\\n[3,3,3,3,3]') == '0'\nassert solution('[1,2,3,4,5]\\n[3,3,3,3,3]') == '0'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"[1,2,3], [1,1]\") == 1\nassert solution(\"[1,2], [1,2,3]\") == 2\n\"\"\"\n\n\"\"\"\n\u516c\u53f8\u8cb7C\u9846\u7cd6\uff0c\u82e5\u5c07\u5176\u4e2dA\u9846\u7cd6\u7d66\u5b69\u5b501\uff0c\u5269\u4e0b\u7684\u81f3\u5c11B\u9846\uff0c\u5b69\u5b501\u6700\u591a\u53ef\u4ee5\u8cb7\u4e0b\u81f3\u591aF\u9846\u7cd6\uff0c\u800c\u5b69\u5b502\u6700\u591a\u53ef\u4ee5\u8cb7\u4e0b\u81f3\u591aG\u9846\u7cd6\uff0c\u4ee5\u7372\u5f97\u6700\u5927\u7684\u6536\u76ca\u662f\u591a\u5c11\uff1f\n\nF, G \u5fc5\u9808\u70ba\u6b63\u6574\u6578\n\n\u82e5\u6709\u5e7e\u7a2e\u53ef\u80fd\u7684\u89e3\uff0c\u56de\u50b3\u4efb\u610f\u4e00\u500b\u90fd\u53ef\u4ee5\n\n\u89e3\u984c\u601d\u8def\uff1a\n\n\u53d6\u6700\u5927\u503c\n\"\"\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3\") == \"2\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n2 3') == '1'\nassert solution('1 1\\n2 2') == '1'\nassert solution('1 1\\n2 3') == '1'\nassert solution('2 2\\n2 2') == '1'\nassert solution('2 2\\n3 3') == '2'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n2 3') == '1'\nassert solution('1 2\\n1 1') == '1'\nassert solution('1 2\\n1 1') == '1'\nassert solution('1 2\\n2 3') == '2'\nassert solution('1 2\\n2 3') == '2'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == 1\nassert solution('1 1') == 1\nassert solution('1 2') == 2\n\nassert solution('1 2 3') == 1\nassert solution('1 1') == 1\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\"\"\"\n\n\"\"\"\nPrefix sum \n\"\"\"\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == [1, 3, 3, 1]\n\"\"\"\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\"\"\""
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\"\"\"\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0: return [1]\n        if rowIndex == 1: return [1,1]\n        temp = [1, 1]\n        for i in range(rowIndex - 1):\n            temp = [1] + [temp[j] + temp[j + 1] for j in range(len(temp) - 1)] + [1]\n        return temp"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n'''\n\n\nclass Solution:\n    def getRow(self, n: int) -> List[int]:\n        if n == 0:\n            return [1]\n        if n == 1:\n            return [1, 1]\n        if n == 2:\n            return [1, 2, 1]\n        a = [1, 1]\n        b = [1, 2, 1]\n        for i in range(2, n):\n            a = [1] + [(a[j] + b[j]) for j in range(len(a))] + [1]\n            b = [1] + [(b[j] + a[j]) for j in range(len(b))] + [1]\n        return a\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\"\"\""
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == [1, 3, 3, 1]\n\"\"\"\n\nclass Solution:\n    def pascalTriangle(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        return self.pascal_triangle_recursion(n, [])\n\n    def pascal_triangle_recursion(self, n, result):\n        if n == 1:\n            return [1]\n        elif n == 0:\n            return []\n        else:\n            row = [1]\n            previous_row = self.pascal_triangle_recursion(n-1, result)\n            for i in range(1, len(previous_row)):\n                row.append(previous_row[i] + previous_row[i-1])\n            row.append(1)\n            result.append(row)\n            return row\n\n    def pascal_triangle_dp(self, n):\n        dp = [[0 for j in range(i+1)] for i in range(n)]\n        dp[0][0] = 1\n\n        for i in range(n):\n            for j in range(i+1):\n                if j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        return dp"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3) == [1,3,3,1]\nassert solution(1) == [1]\n\"\"\""
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == [1,3,3,1]\nassert solution('5') == [1,5,10,10,5,1]\n\"\"\"\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\n\"\"\"\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\"\"\"\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\nassert solution('101') == 3\n\"\"\"\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count(\"1\")\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('00000000000000000000000010000000') == 1\nassert solution('00000000000000000000000010111101') == 4\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n\"\"\"\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        c = 0\n        for i in range(32):\n            if n & (1 << i):\n                c += 1\n        return c\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('00000000000000000000000000001011') == 3\n\"\"\"\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return str(n).count('1')"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n\"\"\""
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n\"\"\"\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"01110\") == 3\nassert solution(\"11101\") == 3\nassert solution(\"100100\") == 2\nassert solution(\"111111101\") == 31\nassert solution(\"101101\") == 3\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11') == 2\nassert solution('10') == 1\nassert solution('11111111111111111111111111111101') == 30\n\"\"\"\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')\n\nassert Solution().hammingWeight(3) == 2\nassert Solution().hammingWeight(10) == 2\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1111') == '1112'\nassert solution('999') == '1000'\nassert solution('10') == '11'\nassert solution('0') == '1'\nassert solution('0') == '1'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"42\") == \"43\"\nassert solution(\"100\") == \"101\"\nassert solution(\"1\") == \"2\"\nassert solution(\"5\") == \"6\"\n\nprint(\"Passed all tests...\")\n\n\"\"\""
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1111') == '1110'\nassert solution('1562') == '1563'\nassert solution('1') == '10'\nassert solution('5') == '5'\nassert solution('0') == '1'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"[1,2,3]\") == \"[1,2,4]\"\nassert solution(\"[4,3,2,1]\") == \"[4,3,2,2]\"\nassert solution(\"[1]\") == \"[2]\"\nassert solution(\"[9]\") == \"[1,0]\"\nassert solution(\"[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('123') == '124'\nassert solution('432') == '433'\nassert solution('40') == '41'\nassert solution('99') == '100'\nassert solution('1000') == '1001'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1234\") == \"1235\"\nassert solution(\"9\") == \"9\"\nassert solution(\"123400\") == \"123401\"\nassert solution(\"123401\") == \"123401\"\nassert solution(\"9012\") == \"90123\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123\") == \"124\"\nassert solution(\"12345\") == \"12346\"\nassert solution(\"9\") == \"10\"\nassert solution(\"900\") == \"901\"\nassert solution(\"123456789\") == \"1234567890\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '1 2 4'\nassert solution('4 3 2 1') == '4 3 2 2'\nassert solution('4 4 4') == '4 4 4'\nassert solution('1 2 9') == '2 0 0'\n\nassert solution('9 2 9 3 9') == '9 2 2 0 0'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13\") == \"14\"\nassert solution(\"4\") == \"5\"\nassert solution(\"12\") == \"13\"\nassert solution(\"1\") == \"2\"\n\nassert solution(\"132223\") == \"1322324\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4,3,2,1\") == \"4,3,2,2\"\nassert solution(\"1,2,3\") == \"1,2,4\"\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        num = self.to_num(digits)\n        num = num + 1\n        return self.to_digits(num)\n\n    def to_num(self, digits: List[int]) -> int:\n        num = 0\n        for i in range(len(digits)):\n            num += digits[i] * 10 ** (len(digits) - 1 - i)\n        return num\n\n    def to_digits(self, num: int) -> List[int]:\n        digits = []\n        while num!= 0:\n            digits.append(num % 10)\n            num //= 10\n        return digits[::-1]\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1\\n') == '4'\n\n'''\nimport sys\n\nN = int(input())\na = int(sys.stdin.readline())\nb = int(sys.stdin.readline())\n\nprint(max(a+b, a-b, a*b))\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1') == '4'\nassert solution('2 6') == '10'\nassert solution('2 2') == '2'\nassert solution('-2 -8') == '2'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1') == 4\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"4\"\nassert solution(\"-1 2\") == \"2\"\nassert solution(\"-1 -2\") == \"0\"\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n3 4\") == \"5\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1\\n') == '4'\nassert solution('5 2\\n') == '5'\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3, 1) == 4\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1\\n') == '4'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1\\n') == '4'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1') == '4'\nassert solution('5 2') == '9'\n\"\"\""
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\nassert solution(\n    '6 9\\n0 4\\n-1 1\\n-3 9\\n1 1\\n2 2\\n4 8\\n3 9') == '5'\nassert solution(\n    '2 5\\n0 5\\n0 0') == '1'\n\"\"\"\n\nfrom math import sqrt\n\nimport numpy as np\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\") == \"3\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\"\nimport math"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\") == '3'\nassert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == '3'\n\"\"\"\nimport math"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('5\\n0 5\\n-2 4\\n3 4') == '3'\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\"\n\n\n\"\"\"\nThe gist of the solution is to go through all of the points and if they're more than D away from the origin,\nincrement a counter by one.\n\"\"\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport math\n\n\"\"\"\n    \"lines\" from stdin will be read as string type.\n    We need to convert them to integer firstly.\n\"\"\"\ntest_input = \"\"\"3 10\n1 1\n0 1\n2 2\"\"\"\ntest_output = 3\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\n\"\"\"\n\nimport sys\nfrom math import sqrt"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(12) == 'Yes'\nassert solution(17) == 'No'"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12') == 'Yes'\nassert solution('21') == 'No'\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(12) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\") == \"Yes\"\nprint(solution(\"12\"))"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"21\") == \"No\"\nassert solution(\"132\") == \"No\"\n\nprint(\"All tests passed.\")\n\n-----\n1. The original solution has many issues.\n\n2. The solution can be improved by a good use of the strings format method.\n\"\"\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12\\n\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n12') == 'Yes'\nassert solution('2\\n42') == 'Yes'\nassert solution('3\\n9') == 'Yes'\nassert solution('4\\n16') == 'No'\nassert solution('5\\n25') == 'No'\n\"\"\""
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 4 -1') == '12 12 8 10'\nassert solution('3 5 -1') == '12 8 10'\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n3 5 -1') == '12\\n8\\n10'\n\"\"\"\n\n\"\"\"\nINPUT:\n5\n10 20 -30 -60 -80\nOUTPUT:\n-40\n\"\"\"\n\n\"\"\"\nINPUT:\n4\n3 10 -5 1\nOUTPUT:\n6\n\"\"\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline())\ncoordinates = list(map(int, sys.stdin.readline().split()))\n\nresult = []\nfor i in range(N):\n    first = 0\n    last = 0\n    cur = coordinates[i]\n    for j in range(len(coordinates)):\n        if j == i:\n            continue\n        elif cur > first:\n            first = cur\n        elif cur < last:\n            last = cur\n        cur = cur + coordinates[j]\n    result.append(first * last)\n\nprint(\"\\n\".join(map(str, result)))"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 -1\\n\") == \"12\\n8\\n10\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\n\ndp = [[0, 0] for _ in range(n)]\ndp[0][0] = arr[0]\ndp[0][1] = -arr[0]\ndp[1][0] = arr[1]\ndp[1][1] = -arr[1]\n\nfor i in range(2, n):\n    dp[i][0] = max(dp[i-1][0], dp[i-1][1] + arr[i])\n    dp[i][1] = max(dp[i-2][0], dp[i-2][1] + arr[i])\n\nprint(max(dp[n-1]))\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n3 5 -1') == '12\\n8\\n10'\nprint('Test Successful')"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5 -1') == '12 8 10'\n\n---\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"b\") == \"consonant\"\n\n-----\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"i\") == \"vowel\"\nassert solution(\"u\") == \"vowel\"\nassert solution(\"e\") == \"vowel\"\nassert solution(\"o\") == \"vowel\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('a') == 'vowel'\nassert solution('u') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('i') == 'vowel'\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"vowel\"\n\"\"\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"b\") == \"consonant\"\nassert solution(\"c\") == \"vowel\"\nassert solution(\"d\") == \"consonant\"\n\"\"\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"i\") == \"vowel\"\nassert solution(\"e\") == \"vowel\"\nassert solution(\"o\") == \"vowel\"\nassert solution(\"u\") == \"vowel\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a\") == \"vowel\"\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"WWBWB\") == \"1\"\nassert solution(\"WWBWW\") == \"0\"\nassert solution(\"BBBWWBWWBWBWWB\") == \"4\"\nassert solution(\"BBBWWBWWBWBWBBB\") == \"3\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('BBBWW') == 1\nassert solution('WWBBB') == 1\nassert solution('BBBBB') == 0\nassert solution('BWBWB') == 0\n\nprint(solution(stdin))\n\n------\n------\n\nInput:\nWWWBWBW\n\nOutput:\n4\n\nExplanation:\nThe current state of the board is\nWWWBWBW\nIn the beginning of the game, there are two white stones and four black stones.\nJiro places a new white stone to the right end of the row of stones, all black stones will become white.\nAfter that, the current state of the board is\nWWWBBWB\nThen Jiro places another white stone to the left end of the row of stones, all black stones will become white.\nAfter that, the current state of the board is\nWWBBWBB\nThen Jiro places a new white stone to the left end of the row of stones, all black stones will become white.\nAfter that, the current state of the board is\nWBBBWBW\nThen Jiro places a new white stone to the right end of the row of stones, all black stones will become white.\nAfter that, the current state of the board is\nWBBBWBW\nFinally, Jiro places a new white stone to the left end of the row of stones, all black stones will become white.\nThe final state of the board is\nWBBBWBW\nIn this case, Jiro needs to place four new white stones.\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('WWWWBWWW') == '1'\nassert solution('WWWBBWBBWW') == '3'\nassert solution('BWBWBWBW') == '1'\nassert solution('WBWBWBWB') == '0'\nassert solution('WWWWBWBWWW') == '2'\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"BWBWBWBW\") == \"0\"\nassert solution(\"WWBWBWWB\") == \"3\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"BBBWW\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('BBBWW') == 1\nassert solution('BWBBW') == 2\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BBBWW\") == 1\nassert solution(\"BWBW\") == 0\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '1'\nassert solution('B') == '1'\nassert solution('BWBW') == '0'\nassert solution('BBBWW') == '1'\n\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"WWBWBWWBBBWW\") == \"1\"\nassert solution(\"BWBWBWBWBWWBWBWBWBWB\") == \"0\"\nassert solution(\"BWBWBWBWBWWBWBWBWBWW\") == \"1\"\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('BBWBBW') == '1'\nassert solution('WWWBBWBWW') == '2'\n\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"Yes\"\nassert solution(\"1 21\") == \"Yes\"\nassert solution(\"1 21\\n2 3\") == \"No\"\nassert solution(\"1 2\\n2 3\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 21''') == 'Yes'\n'''\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a, b) in [\n    'Yes',\n    'No',\n]"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\"\nimport sys\n\n\"\"\"\nInput:\na b\n\nOutput:\nYes\n\nRules:\n    a + b = x^2\n    a + b + a = x^2 + x\n    a + b + b + a = x^2 + x + x\n\"\"\"\n\na, b = map(int, sys.stdin.readline().split())\n\nfor x in range(1, 1000):\n    if (a + b) % x == 0 and (a + b + a) % x == 0 and (a + b + b + a) % x == 0:\n        print(\"Yes\")\n        exit()\nprint(\"No\")\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\nassert solution(\"0 21\") == \"No\"\nassert solution(\"5 22\") == \"No\"\n\nassert solution(\"9 32\") == \"Yes\"\nassert solution(\"49 123\") == \"No\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'1 21'\n) == 'Yes'\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 21') == 'Yes'\nassert solution('0 9') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 21\") == \"Yes\"\nassert solution(\"3 29\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1 4 1 5 9 2') == '4'\n\"\"\"\n\n\nfrom typing import List\nfrom collections import deque"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\"\"\"\n\nimport sys\n\nseq = sys.stdin.read().splitlines()[1]\nseq = [int(i) for i in seq.split()]\n\nmaximum = -1\n\nfor i in range(len(seq)):\n    count = 0\n    for j in range(i + 1, len(seq)):\n        if seq[i] == seq[j]:\n            count += 1\n    if count > maximum:\n        maximum = count\n\nprint(maximum)\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == '4'\n\"\"\"\n\nimport sys\n\nn = int(input())\narr = list(map(int, input().split()))\narr.sort()\nx = 0\ncount = 0\nfor i in arr:\n    if x < i:\n        x = i\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == '4'\nprint('test passed')\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 4 1 5 9 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == '4'\n\"\"\"\n\n\"\"\"\n3\n1\n3\n2\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 4 1 5 9 2\") == 4\n\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''7\n3 1 4 1 5 9 2''') == '4'\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == test_output_1\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\na = int(sys.stdin.readline().rstrip())"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4\") == \"5\"\nassert solution(\"5\\n8\") == \"13\"\nassert solution(\"1\\n0\") == \"1\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n4') == '5'\nprint(solution('3\\n4'))\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n4') == '5'\n\"\"\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4\") == '5'\n\n\"\"\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n4') == '5'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4\") == \"5\"\nassert solution(\"1\\n1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == \"YES\"\nprint(solution(str(input())))\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2,4,6) == \"YES\"\nassert solution(1,2,5) == \"NO\"\n\"\"\"\n\na, b, c = map(int, input().split())"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"2 3 5\") == \"NO\"\nassert solution(\"2 4 6\") == \"YES\"\nassert solution(\"2 3 5\") == \"NO\"\nassert solution(\"2 3 5\") == \"YES\"\n\n\"\"\"\n\na, b, c = [int(x) for x in stdin.split()]\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2 4 6) == \"YES\"\nassert solution(3 4 5) == \"NO\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 6') == \"YES\"\n\"\"\"\n\nfrom sys import stdin\n\na, b, c = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '2 4 6'\n) == 'YES'\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('5 2 6') == 'NO'\nassert solution('2 5 6') == 'NO'\nassert solution('1 3 2') == 'NO'\nassert solution('6 3 4') == 'YES'\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 6\") == 'YES'\nassert solution(\"2 4 6\") == 'NO'\nassert solution(\"4 5 6\") == 'NO'\nassert solution(\"4 4 6\") == 'YES'\nassert solution(\"1 2 3\") == 'NO'\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('1 2 3') == 'NO'\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('29') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('29') == 'Yes'"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('29') == 'Yes'\n\n---\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('29') == 'Yes'\nassert solution('10') == 'No'\nassert solution('25') == 'No'\nassert solution('58') == 'No'\nassert solution('32') == 'Yes'\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"29\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('29') == 'Yes'\nassert solution('90') == 'No'\nassert solution('98') == 'No'\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('29') == 'Yes'\nassert solution('98') == 'Yes'\nassert solution('12') == 'No'\nassert solution('1') == 'No'\nassert solution('123') == 'No'\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"29\") == \"Yes\"\nassert solution(\"98\") == \"No\"\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('29') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('29') == 'Yes'\nassert solution('13') == 'No'\n\"\"\"\n\nN = input()\n\nprint(\"Yes\" if int(N[0]) % 2 == 1 else \"No\")\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 3\\n1 2 4') == '1'\nassert solution('5 5 1\\n1 2 3 4 5') == '6'\nassert solution('5 10 1\\n1 2 3 4 5') == '14'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 3\\n1 2 4') == '1'\n\"\"\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 3\\n1 2 4') == '1'\n\n-------\n3.34. The Coin Change Problem\n\nYou are given a set of N coins and you want to change a value V into coins.\nEach coin has a value which is an integer that is in the range [1, 100] inclusive.\nChange the given value V into coins in such a way that the total value of the coins used is as minimum as possible.\nThe total value used should be as large as possible.\nPrint the minimum total value as an integer.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq V \\leq 100\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn v\nv_1 v_2... v_n\n\n-----Output-----\nPrint the minimum total value as an integer.\n\n-----Sample Input-----\n5 100\n50 25 10 1\n\n-----Sample Output-----\n100\n\nThe optimal solution is as follows:\n - First, change the value V into coins of value 10.\n - Then, change the value V into coins of value 5.\n - Last, change the value V into coins of value 1.\nIn this case, the total value used is 100.\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import permutations\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 3\\n1 2 4') == '1'\n\"\"\"\n\nN, M, X = [int(x) for x in stdin.split()]\nA = [int(x) for x in stdin.split()[1:]]"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n.#\\n###\\n.#\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n.#\\n..') == 'Yes'\nassert solution('2 2\\n..\\n..') == 'No'\nassert solution('2 3\\n..\\n..') == 'No'\nassert solution('2 2\\n..\\n.#') == 'No'\nassert solution('2 3\\n#.#\\n.#.') == 'Yes'\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n.#\\n###\\n.#\\n\") == \"Yes\"\n\"\"\"\n\nimport collections\n\nH, W = [int(x) for x in input().split()]\nsquare = collections.deque()\n\nfor row in range(H):\n    for col in range(W):\n        square.append(input())\n\nanswer = 'Yes'\nfor i in range(H):\n    for j in range(W):\n        if i!= 0:\n            if square[i - 1][j]!= square[i][j]:\n                answer = 'No'\n        if j!= 0:\n            if square[i][j - 1]!= square[i][j]:\n                answer = 'No'\n\nprint(answer)"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n.#.\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n#.#\\n###\\n.#.\") == \"Yes\"\n\nWhat is the worst-case complexity of your solution?\n\n'''\nimport sys\n\n'''\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n.#\\n###\\n.#\") == 'Yes'\nassert solution(\"3 3\\n.#\\n###\\n..\") == 'No'\nassert solution(\"3 3\\n..\\n#.\") == 'No'\nassert solution(\"3 3\\n.##\\n#.#\\n#.\") == 'Yes'\nassert solution(\"3 3\\n.##\\n#.#\\n###\\n#.\") == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('.#.\\n###\\n.#.') == 'Yes'\nassert solution('...\\n...\\n...') == 'No'\nassert solution('...\\n##.\\n...') == 'Yes'\nassert solution('...\\n###\\n...') == 'No'\nassert solution('##.\\n##.\\n##.') == 'Yes'\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 3\n.#.\n###\n.#.''') == 'Yes'\n\nassert solution('''3 3\n.#.\n###\n.#.''') == 'Yes'\n\nassert solution('''3 3\n.#.\n###\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('.#.') == 'Yes'\nassert solution('#.#') == 'No'\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n#.\\n###\\n#.\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"100 100 100\") == \"No\"\nassert solution(\"1 1 10\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 30 20\") == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"30 10 20\") == \"Yes\"\nassert solution(\"20 30 10\") == \"No\"\nassert solution(\"20 30 30\") == \"No\"\nassert solution(\"30 10 30\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"5 5 5\") == \"No\"\nassert solution(\"30 20 10\") == \"No\"\nassert solution(\"5 5 5\") == \"Yes\"\n\n\"\"\"\nimport sys\nfrom typing import List"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n10 30 20\n\"\"\") == \"Yes\"\n\nassert solution(\n\"\"\"\n10 30 40\n\"\"\") == \"No\"\n\nassert solution(\n\"\"\"\n10 30 20\n\"\"\") == \"Yes\"\n\n\"\"\"\nhttps://atcoder.jp/contests/arc098/tasks/arc098_b\n\u5165\u529b\n5 3 2\n2 3 1\n\n\u51fa\u529b\nYes\n\"\"\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin=\"10 30 20\") == \"Yes\"\nassert solution(stdin=\"10 30 20\") == \"Yes\"\nassert solution(stdin=\"20 30 10\") == \"Yes\"\nassert solution(stdin=\"20 30 10\") == \"Yes\"\nassert solution(stdin=\"30 20 10\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 8 7 1') == 'Left'\n\nsolution('3 8 7 1')\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 8 7 1') == 'Left'\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 8 7 1') == 'Left'\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nassert solution(\"1 1 1 1\") == \"Balanced\"\nassert solution(\"3 8 1 1\") == \"Right\"\nassert solution(\"1 1 1 1\") == \"Balanced\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"Left\"\nassert solution(\"3 3 3 3\") == \"Balanced\"\nassert solution(\"3 3 3 4\") == \"Right\"\nassert solution(\"5 1 1 1\") == \"Right\"\nassert solution(\"5 4 4 6\") == \"Left\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n\na, b, c, d = [int(n) for n in input().split()]\n\nprint(\"Left\" if a + b > c + d else \"Right\" if a + b < c + d else \"Balanced\")\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nassert solution(\"3 5 7 1\") == \"Balanced\"\nassert solution(\"3 5 5 1\") == \"Right\"\n\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 0 1 0 0 0 1 0 1') == '8'\nassert solution('3 4 5 6 7 8 9 -2 -3 4 -2') == '8'\n\"\"\"\n\nN, *f = map(int, input().split())\nc = 0\nfor j in range(5):\n    for k in range(5):\n        for i in range(1, N + 1):\n            if f[i - 1] == 1 and j!= k:\n                c += 1\nprint(c)\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2''') == '8'\nassert solution('''3\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n''') == '8'\n\n-----Time Complexity-----\nO(N)\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\") == \"8\"\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n\") == \"8\"\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n\") == 8\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 6 7 8 9 2 -2 -3 4 -2\") == 8\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 0 1 0 0 0 1 0 1\\n1 1 1 1 1 1 1 1 1 1\") == \"7\"\nassert solution(\"5 1 1 1 1 1 1 1 0 0\\n0 1 1 1 1 1 1 1 1 1\") == \"15\"\nassert solution(\"4 1 1 1 1 1 1 1 0 0\\n1 1 1 1 1 1 1 1 1 1\") == \"8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 5 6 7 8 9 -2 -3 4 -2') == '8'\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n') == '8'\n\"\"\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\") == \"8\"\nassert solution(\"3 4 5 6 7 8 9 -2 -3 4 -2\") == \"8\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n269-6650\") == \"Yes\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"Yes\"\nassert solution(\"3 3\") == \"No\"\n\n\"\"\"\n\nimport unittest\nfrom io import StringIO\n\nclass TestStringMethods(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution(\"3 4\"), \"Yes\")\n    def test_2(self):\n        self.assertEqual(solution(\"3 3\"), \"No\")"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('269-6650') == \"Yes\"\n\"\"\"\n\n\"\"\"\n\u6700\u521d\u306e\u554f\u984c\u3067\u306f\u30d2\u30f3\u30c8\u3092\u5f15\u304d\u7d9a\u3051\u3066\u554f\u984c\u3092\u89e3\u3044\u305f\u3002\n\u305d\u3053\u3067\u7d44\u307f\u5408\u308f\u305b\u3066\u89e3\u3044\u305f\u3002\n\"\"\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"846-7390\") == \"No\"\nassert solution(\"111-1110\") == \"Yes\"\n\"\"\"\n\na, b = map(int, input().split())\ns = input()\nprint(\"Yes\" if a == int(s[len(s) - 1 - b]) and s[len(s) - 1 - b] == \"-\" and s.isdigit() else \"No\")\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"395-8165\") == \"No\"\nassert solution(\"123-4567\") == \"Yes\"\nassert solution(\"900-999\") == \"No\"\nassert solution(\"800-4\") == \"No\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3, 4) == \"Yes\"\nassert solution(2, 3) == \"No\"\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('269-6650') == 'Yes'\nassert solution('258-6501') == 'No'\nassert solution('8-1000') == 'Yes'\nassert solution('A-1000') == 'No'\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('269-6650') == 'Yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"269-56650\") == \"No\"\nassert solution(\"27-6650\") == \"No\"\nassert solution(\"26-6650\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('269-6650') == 'Yes'\nassert solution('92-89932') == 'No'\nassert solution('-7777') == 'No'\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 6\") == 1\n\"\"\"\n\nfrom typing import List\nimport sys"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 6\") == \"1\"\nassert solution(\"2 4 8\") == \"4\"\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 6\") == '1'\n\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nCreate a function dp which stores the minimum distance the second rectangle needs to be moved to to cover the first rectangle.\n\ndp[i][j] - minimum distance the second rectangle needs to be moved to cover the first rectangle\n\nAtCoDeer the deer found two rectangles lying on the table, each with height 1 and width W.\n\nIf we consider the surface of the desk as a two-dimensional plane, the first rectangle covers the vertical range of [0,1] and the horizontal range of [a,a+W], and the second rectangle covers the vertical range of [1,2] and the horizontal range of [b,b+W], as shown in the following figure:\n\nAtCoDeer will move the second rectangle horizontally so that it connects with the first rectangle.\n\nDefine the following functions:\n\n    The first rectangle is represented by a list of two integers: [a, a + w].\n    The second rectangle is represented by a list of two integers: [b, b + w].\n    The minimum distance is represented by an integer: d.\n\n\ndp[i][j] = min{dp[i][k] + abs(i - k)} for k in range(j)\n\nTime Complexity: O(n^2) where n is the number of lines in the input.\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 6\") == '1'\n\"\"\"\nimport sys\n\nn = list(map(int, input().split(' ')))\nw = n[0]\na = n[1]\nb = n[2]"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"3 2 6\"\"\"\n) == \"1\"\n\"\"\"\nW a b\n3 2 6\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2 6') == '1'\n\n------\nW, a, b = input().split()\nW = int(W)\na = int(a)\nb = int(b)\nprint(min(W - b, a))\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 8 2') == '3 4 7 8'\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 8 2\\n') == '3\\n4\\n7\\n8\\n'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\n\"\"\""
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 8 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n\"\"\"\n\nimport math\n\na, b, k = [int(s) for s in input().split(' ')]\n\nnums = list(range(a, b + 1))\n\nkth_smallest = math.ceil(k / 2)\nkth_largest = math.ceil((b - a + 1 - k) / 2)"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n\n-----------------------------\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''3 8 2\n'''\n) == '''3\n4\n7\n8\n'''\nprint('PASSED')"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8 2\") == \"3 4 7 8\"\n\"\"\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8 2\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n'''\n\nA, B, K = map(int, stdin.readline().split())"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\n\"\"\"\n\ns = input()\n\nprint(s[0]+s[1:].lower())"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(AtCoder s Contest) == \"ABC\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 5 4''') == 'YES'\nassert solution('''1 4 2''') == 'NO'\n\"\"\"\n\nfrom itertools import product\n\nn_a, n_b, n_cats = [int(n) for n in stdin.split()]\n\ncomb = [n_b * [n_a], n_b * [n_b]]\ncomb = product(*comb)\ncomb = [i for i in comb if sum(i) == n_cats]"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 4\") == \"YES\"\nassert solution(\"4 5 5\") == \"NO\"\nassert solution(\"4 5 6\") == \"NO\"\nassert solution(\"4 5 8\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\nassert solution(\"3 4 4\") == \"NO\"\n\"\"\"\n\nA, B, X = map(int, input().split())"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a) == output\n\n-----Explanation-----\nThe only possible answer is YES, since there are exactly 4 cats in total.\n\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 4') == 'YES'\nassert solution('2 2 2') == 'NO'\n\nimport sys\nfrom math import ceil\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5 4') == 'YES'\nassert solution('5 5 6') == 'NO'\nassert solution('1 1 1') == 'YES'\nassert solution('3 3 3') == 'NO'\nassert solution('4 2 1') == 'YES'\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 5 4\\n') == 'YES'\nassert solution('3 5 4\\n') == 'NO'\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\n\"\"\"\n\nA, B, X = map(int, stdin.readline().split())\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4 3\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\""
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\"\nimport math"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100 17') == '83'\nassert solution('1 0') == '1'\nassert solution('2 6') == '8'\n\"\"\"\n\nX, t = [int(num) for num in stdin.split()]\nresult = X\nfor _ in range(t):\n    result = (result * 3) // 2\nprint(result)\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100 17') == '83'\nassert solution('5 10') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 17\") == \"83\"\nprint(solution(\"100 17\"))\n\n----\n3\n-2\n1\n0\n----\n5\n-5\n0\n0\n----\n1\n1\n0\n----\n5\n-5\n0\n0\n----\n3\n3\n0\n0\n----\n3\n-3\n0\n0\n----\n\n\"\"\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100 17') == '83'\n\"\"\"\nfrom sys import stdin\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100 17') == '83'\n\n\"\"\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\""
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\"\"\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == 6\n\"\"\"\nimport sys"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 2 3 4\n''') == '-1'\nassert solution('''\n2\n1 2\n''') == '-1'\nassert solution('''\n5\n5 5 5 5 5\n''') == '0'\nassert solution('''\n2\n10 10\n''') == '1'\nassert solution('''\n2\n10 1\n''') == '10'\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5\") == '12345'\n\"\"\"\nimport sys"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\") == \"120\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"40320\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10\\n1 2 3\\n4 5 6\") == \"45\\n\"\nprint(solution(\"10 10\\n1 2 3\\n4 5 6\"))"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100 200\\n') == '100000000000000000000'\nassert solution('10 7\\n') == '10\\n'\nassert solution('10 9\\n') == '-1'\n\n-------\nn, *nums = map(int, input().split(' '))\nres = 1\nfor num in nums:\n    if res * num >= 10 ** 18:\n        print(-1)\n    else:\n        res *= num\nprint(res)\n\nassert solution('100 200\\n') == '100000000000000000000'\nassert solution('10 7\\n') == '10\\n'\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 100\") == 1000000000000000000\n\"\"\"\n\nimport math\n\nn = int(input())\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2') == '2'\nassert solution('1\\n0') == '0'\nassert solution('2\\n2\\n0\\n0') == '0'\nassert solution('2\\n5\\n5\\n0\\n0') == '0'\n\n\"\"\"\n\nfrom math import pow\n\nfrom sys import stdin\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 1 8\\n\") == \"16\\n\"\nassert solution(\"5\\n5 5 5 5 5\\n\") == \"25\\n\"\nassert solution(\"10\\n7 6 5 4 3 2 1\\n\") == \"-1\\n\"\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2018\\n218') == \"Yes\"\nprint(solution(stdin))\n\"\"\"\n\"\"\"\nThe total number of coins is of the order of 10^6. The algorithm is simple:\n\n1. Divide the total amount of money into A1 + A2 +... + AN amount of coins.\n2. Convert the number of coins into their respective denominations.\n3. Add the total number of coins to the total number of coins in step 1.\n4. Divide the number of coins in step 3 by the total number of coins in step 1.\n5. Use the recurrence relation above to complete the steps 3 and 4.\n6. Assume the result of step 4 is N. Then we need to know if this N is divisible by A1 + A2 +... + AN.\n7. If N is divisible by A1 + A2 +... + AN, then N can be divided into N1 + N2 +... + Nm coins such that\n   N1 + N2 +... + Nm = A1 + A2 +... + AN.\n8. Then we just need to compare the result of step 6 with N, if they are equal, we print Yes, otherwise, we print No.\n\n\"\"\"\n\nn = int(input())\na = int(input())\n\nm = int(n / a)\ns = 0\ni = 1\nwhile i <= m:\n    s += i\n    i *= 2"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2018\\n218\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\n\"\"\"\n\nimport sys\n\nTEST_CASE_SOLUTIONS = [\n    \"Yes\",\n    \"No\"\n]"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2018\\n218\") == 'Yes'\n\"\"\"\n\nimport sys\nimport time\n\n_, A = sys.stdin.readline().rstrip().split()\nA = int(A)\n\nN = int(sys.stdin.readline())\n\nstart = time.time()\n\nfor n in range(N // A + 1):\n    if A * n == N:\n        print('Yes')\n        exit()\n\nprint('No')\nprint(time.time() - start)\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'No'\nassert solution('1') == 'Yes'\nassert solution('2') == 'No'\nassert solution('3') == 'Yes'\nassert solution('4') == 'No'\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\nprint(solution(\"2018\\n218\"))\n'''"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2018\\n218') == 'Yes'\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Yes'\nassert solution('2018\\n218') == 'Yes'\nassert solution('2018\\n17') == 'No'\nassert solution('2018\\n0') == 'No'\nassert solution('2018\\n0\\n5') == 'No'\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 6') =='safe'\nassert solution('4 1 6') == 'dangerous'\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 6') =='safe'\n\"\"\"\n\nx, a, b = map(int, input().split())"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 6\\n') =='safe'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\nassert solution(\"3 2 5\") == \"dangerous\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\nassert solution(\"4 1 6\") == \"dangerous\"\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 6\\n') =='safe'\nassert solution('4 3 5\\n') == 'dangerous'\nassert solution('3 3 6\\n') == 'dangerous'\nassert solution('1 1 1\\n') == 'delicious'\nassert solution('4 5 5\\n') == 'dangerous'\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 6\\n\") == \"safe\"\n\"\"\"\n\nimport sys\n\nx, a, b = map(int, sys.stdin.read().split())\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 6\\n') =='safe'\n\"\"\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == '9'\nassert solution('15') == '16'\nassert solution('19') == '16'\n\nassert solution('1') == '1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '9'\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"9\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(10) == 9\nassert solution(10) == 9\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(10) == 9\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(10) == 9\nprint(solution(10))"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '9'\n\"\"\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(10) == 9\nassert solution(7) == 7\nassert solution(13) == 13\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '9'\nassert solution('15') == '16'\nassert solution('11') == '10'\n\nprint(solution('10'))\nprint(solution('15'))\nprint(solution('11'))\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n2 3\n1 1\n3 2\n\"\"\") == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 3\\n1 1\") == 10\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 1\\n3 2\") == \"10\"\nassert solution(\"4 4\\n1 1\\n2 2\\n3 3\\n4 4\") == \"10\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == 10\n\"\"\"\nimport math\n\nn = int(input().strip())"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 3\\n1 1\\n3 2') == '10'\n\"\"\"\nfrom fractions import gcd"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\n\"\"\"\n\nfrom math import gcd\nfrom collections import Counter\nfrom itertools import combinations"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\nassert solution(\"abcde\") == \"no\"\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\nassert solution(\"conspiracy\") == \"no\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('uncopyrightable') == 'yes'\nassert solution('uncopyrightable') == 'yes'\nassert solution('uncopyrightable') == 'yes'\nassert solution('uncopyrightable') == 'yes'\nassert solution('uncopyrightable') == 'yes'\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\nassert solution(\"abc\") == \"no\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"yes\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('WEEWW') == '1'\nassert solution('WWWWE') == '0'\nassert solution('WE') == '1'\nassert solution('W') == '1'\nassert solution('E') == '0'\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('WEEWW') == 1\n\n\"\"\"\n\nimport unittest\n\n\nclass Test_Approach1(unittest.TestCase):\n\n    def test_solution(self):\n        pass\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 EEWW\") == \"1\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\nWEEWW') == '1'\nassert solution('5\\nWEEWW\\nE') == '2'\nassert solution('5\\nWEEWW\\nW') == '2'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5, \"WEEWW\") == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"WEEWW\") == 1\n\"\"\"\nimport sys"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"WEEWW\") == \"1\"\nassert solution(\"WEWWE\") == \"2\"\nassert solution(\"WWWEEEW\") == \"0\"\n\nassert solution(\"W\") == \"1\"\nassert solution(\"WEWW\") == \"1\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5WEEWW') == 1\n\"\"\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5WEEWW') == 1\nassert solution('2WEWE') == 0\nassert solution('2EWWEW') == 2\nassert solution('3WWWEW') == 1\nassert solution('5WWWEW') == 1\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\nWEEWW') == 1\n\"\"\"\n\n\"\"\"\n2.5\n10^3\nBinary Search\n\n10^3\n\nYou are given a sorted array of n distinct integers and a value.\nFind if value is in the array.\nDo it in O(log(n)) time.\n\n-----Constraints-----\n - n == A.length\n - 1 \\leq n \\leq 10^3\n - 1 \\leq A[i] \\leq 10^3\n\n-----Input-----\nThe first line of input contains T denoting the number of testcases.\nThe first line of each testcase contains two integers n and k.\nThe second line of each testcase contains n space separated integers denoting the array A.\nThe third line of each testcase contains a single integer denoting value.\n\n-----Output-----\nPrint \"Yes\" if value is present in the array A.\nPrint \"No\" if value is not present in the array A.\n\n-----Sample Input-----\n2\n4 2\n1 2 3 4\n2\n2 1\n2 3\n\n-----Sample Output-----\nYes\nNo\n\n\"\"\"\n\n\"\"\"\n2.5\n10^3\nBinary Search\n\n10^3\n\nYou are given a sorted array of n distinct integers and a value.\nFind if value is in the array.\nDo it in O(log(n)) time.\n\n-----Constraints-----\n - n == A.length\n - 1 \\leq n \\leq 10^3\n - 1 \\leq A[i] \\leq 10^3\n\n-----Input-----\nThe first line of input contains T denoting the number of testcases.\nThe first line of each testcase contains two integers n and k.\nThe second line of each testcase contains n space separated integers denoting the array A.\nThe third line of each testcase contains a single integer denoting value.\n\n-----Output-----\nPrint \"Yes\" if value is present in the array A.\nPrint \"No\" if value is not present in the array A.\n\n-----Sample Input-----\n2\n4 2\n1 2 3 4\n2\n2 1\n2 3\n\n-----Sample Output-----\nYes\nNo\n\"\"\"\n\n\"\"\"\n2.6\n10^3\nBinary Search\n\n10^3\n\nYou are given an array A of size n that contains non-negative integers.\nYou need to count the number of ways in which array A can be arranged such that there are no three numbers A[i], A[j] and A[k] such that A[i] + A[j] + A[k] is equal to 0.\n\n-----Constraints-----\n - n == A.length\n - 0 \\leq A[i] \\leq 10^3\n\n-----Input-----\nThe first line of input contains T denoting the number of testcases.\nThe first line of each testcase contains a single integer n denoting the size of the array.\nThe second line of each testcase contains n space separated integers denoting the elements of the array.\n\n-----Output-----\nPrint the number of ways in which array A can be arranged such that there are no three numbers A[i], A[j] and A[k] such that A[i] + A[j] + A[k] is equal to 0.\n\n-----Sample Input-----\n3\n2\n2 1 -1\n1\n2\n\n-----Sample Output-----\n1\n2\n0\n\n\"\"\"\n\n\"\"\"\n2.7\n10^3\nMatrix Chain Multiplication\n\n10^3\n\nYou are given a chain of matrices M1, M2,..., Mn.\nYou are required to multiply the chain from left to right.\nMatrix Ai has dimension pi x qi, where p is the number of rows and q is the number of columns.\nYou are required to complete the function MatrixChainOrder(), which should return the minimum number of multiplications needed to multiply the chain.\nYou cannot use a temporary variable.\nThe order of the chain must be from left to right.\n\n-----Constraints-----\n - 2 \\leq N \\leq 10^3\n - 1 \\leq Ni, qi \\leq 10^5\n\n-----Input-----\nThe first line of input contains T, the number of testcases.\nThe first line of each testcase contains one integer N, the number of matrices in the chain.\nThe next N lines contain one space separated integer Ni and Qi for each matrix.\n\n-----Output-----\nPrint the minimum number of multiplications needed to multiply the chain from left to right.\n\n-----Sample Input-----\n1\n4\n2 2\n2 3\n3 4\n\n-----Sample Output-----\n3\n\n\"\"\"\n\n\"\"\"\n2.8\n10^3\nMinimum Flips to Make String Palindrome\n\n10^3\n\nGiven a string s. You are allowed to convert it to a palindrome by adding characters in front of it.\nFind and return the minimum number of characters that are needed to be added.\n\n-----Constraints-----\n - n == s.length\n - 1 \\leq n \\leq 10^3\n - s contains only lowercase English letters.\n\n-----Input-----\nThe first and only line of input contains a string s.\n\n-----Output-----\nPrint the minimum number of characters that are needed to be added to make the string palindrome.\n\n-----Sample Input-----\nabdbca\n\n-----Sample Output-----\n1\n\nExplanation\nWe can add 'b' in front of s, so that s becomes \"bdbca\".\nWe can't add 'd' because it will make the string non-palindrome.\nWe can add 'c' at the end so that the string becomes \"bbdbcac\".\nAdding 'b' in front and 'c' at the end adds 1 character so the answer is 1.\n\n\"\"\"\n\n\"\"\"\n2.9\n10^3\nMinimum Distance Between BST Nodes\n\n10^3\n\nGiven a Binary Search Tree (BST), find the minimum absolute difference between the values of any two different nodes in the tree.\n\n-----Constraints-----\n - 10^5 \\leq N \\leq 10^5\n\n-----Input-----\nFirst and only line of input contains an integer N, the number of nodes in the BST.\nNext line contains N space-separated integers describing the values of the nodes.\n\n-----Output-----\nPrint the minimum absolute difference between the values of any two different nodes in the BST.\n\n-----Sample Input-----\n7\n4 2 1 3 6 7\n\n-----Sample Output-----\n1\n\nExplanation\nThe minimum absolute difference between the values of any two different nodes in the BST is 1.\n\n\"\"\"\n\n\"\"\"\n2.10\n10^3\nMinimum Swaps to Make String a Palindrome\n\n10^3\n\nGiven a string s. You are allowed to swap any two characters in the string.\nFind the minimum number of swaps required to make the string a palindrome string.\n\n-----Constraints-----\n - n == s.length\n - 1 \\leq n \\leq 10^3\n - s contains only lowercase English letters.\n\n-----Input-----\nThe first and only line of input contains a string s.\n\n-----Output-----\nPrint the minimum number of swaps required to make the string a palindrome string.\n\n-----Sample Input-----\naab\n\n-----Sample Output-----\n1\n\nExplanation\nWe can swap the first and"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4') == '2\\n2\\n1\\n1'\n\"\"\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4') == '2 2 1 1'\nassert solution('1 2\\n2 3') == '2 2'\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\n--------\n\n2\n8\n2 3\n1 6\n1 6\n3 5\n4 7\n5 4\n6 8\n7 1\n1 2\n3 4\n5 6\n7 8\n3 4\n7 6\n8 5\n4 1\n3 5\n1 4\n2 6\n5 8\n4 8\n6 7\n7 3\n6 5\n3 2\n8 7\n1 4\n2 6\n1 5\n2 3\n1 2\n8 7\n7 3\n6 4\n4 5\n7 6\n3 5\n6 4\n5 8\n2 6\n8 4\n1 3\n4 7\n4 5\n7 6\n5 3\n3 6\n6 2\n5 6\n7 4\n8 3\n6 2\n3 7\n4 6\n5 4\n2 8\n7 8\n5 3\n4 1\n2 6\n4 6\n5 2\n8 3\n1 7\n3 8\n6 2\n3 4\n4 8\n6 7\n3 2\n7 4\n2 4\n3 2\n4 8\n7 3\n5 7\n6 1\n3 8\n8 4\n4 7\n5 6\n7 8\n3 6\n6 1\n8 3\n4 4\n8 3\n3 7\n5 2\n6 3\n6 7\n8 1\n7 4\n8 3\n3 5\n8 2\n3 4\n6 2\n2 7\n4 7\n6 1\n3 7\n4 6\n5 1\n8 4\n7 7\n8 5\n2 1\n1 5\n6 1\n2 1\n2 6\n8 2\n4 5\n7 1\n5 6\n5 3\n3 5\n3 7\n1 1\n5 2\n8 6\n4 8\n7 6\n4 4\n7 7\n4 6\n2 8\n3 7\n5 1\n5 3\n8 7\n1 3\n4 4\n5 1\n5 6\n2 3\n4 7\n3 6\n7 2\n6 3\n8 5\n7 1\n4 2\n1 3\n6 1\n7 4\n8 2\n7 7\n7 3\n6 3\n7 4\n6 5\n8 5\n5 4\n6 5\n5 5\n5 7\n7 1\n7 2\n6 8\n4 1\n6 2\n4 2\n1 6\n8 2\n6 2\n3 2\n8 3\n4 4\n1 7\n5 6\n5 4\n7 5\n3 8\n6 2\n7 3\n4 7\n6 3\n4 1\n7 1\n3 8\n6 3\n3 3\n4 4\n5 3\n7 5\n6 8\n6 2\n4 5\n2 1\n2 1\n3 3\n2 3\n3 4\n6 6\n3 5\n5 7\n4 5\n3 1\n4 4\n2 2\n3 6\n4 5\n3 5\n2 5\n1 4\n4 4\n6 7\n5 4\n7 6\n6 4\n2 3\n4 1\n5 4\n5 1\n8 1\n6 1\n5 6\n7 5\n4 4\n5 7\n5 5\n6 5\n5 1\n1 2\n4 8\n7 1\n2 5\n7 7\n7 7\n3 6\n6 2\n5 8\n5 5\n5 1\n6 7\n2 7\n3 7\n3 4\n6 5\n8 4\n6 6\n7 4\n6 6\n1 1\n4 7\n2 3\n6 6\n8 4\n6 5\n7 6\n4 7\n5 3\n6 7\n6 3\n4 7\n3 2\n6 6\n5 5\n7 4\n5 7\n3 6\n7 3\n8 3\n1 4\n3 5\n5 6\n5 4\n3 7\n7 5\n5 6\n6 2\n8 4\n5 7\n2 2\n8 6\n4 3\n5 6\n2 5\n7 7\n6 1\n6 6\n5 4\n4 5\n6 7\n6 7\n4 1\n2 6\n3 8\n7 7\n5 1\n5 7\n5 1\n4 4\n3 6\n8 7\n5 6\n7 3\n3 4\n5 1\n6 6\n8 7\n4 1\n5 4\n5 4\n6 6\n3 5\n7 5\n5 6\n4 5\n5 5\n3 3\n5 1\n3 5\n5 4\n3 6\n7 2\n5 1\n2 6\n8 5\n5 5\n8 5\n2 7\n3 6\n8 2\n1 6\n5 7\n8 7\n4 6\n3 4\n7 2\n8 1\n5 6\n7 6\n8 5\n8 7\n3 1\n3 4\n1 1\n4 1\n4 1\n2 1\n5 2\n4 2\n7 3\n5 5\n8 3\n7 4\n5 1\n6 2\n4 7\n5 7\n7 6\n5 5\n2 1\n6 4\n1 6\n1 4\n5 7\n7 3\n7 4\n6 4\n3 2\n4 7\n5 1\n5 7\n3 6\n8 4\n7 2\n4 6\n3 7\n7 6\n3 7\n4 1\n2 4\n7 4\n6 6\n4 6\n2 6\n5 1\n2 1\n3 2\n5 1\n7 6\n2 4\n3 4\n5 7\n6 4\n5 6\n5 6\n5 2\n1 5\n1 1\n8 7\n4 7\n7 2\n5 7\n8 3\n4 4\n5 3\n4 1\n5 5\n5 6\n5 5\n2 4\n3 6\n4 7\n3 6\n2 5\n6 2\n2 3\n3 1\n5 4\n7 5\n5 6\n4 6\n1 1\n1 1\n5 4\n6 4\n5 1\n5 6\n2 6\n3 5\n3 4\n5 1\n3 7\n5 7\n5 6\n8 1\n4 1\n6 4\n3 3\n4 6\n4 5\n4 4\n3 1\n4 6\n6 3\n5 5\n8 5\n4 2\n3 7\n1 6\n5 6\n3 5\n6 5\n6 6\n2 1\n5 1\n4 7\n4 4\n3 3\n3 5\n5 6\n5 5\n5 5\n2 5\n7 2\n6 2\n3 3\n5 6\n8 4\n5 4\n5 7\n7 1\n2 5\n4 6\n5 1\n6 6\n6 5\n4 6\n4 4\n8 2\n4 2\n7 6\n7 2\n7 7\n8 5\n1 1\n6 6\n3 2\n4 5\n5 2\n3 3\n4 7\n6 1\n7 3\n5 7\n5 7\n5 2\n6 3\n7 4\n6 2\n7 4\n5 5\n8 3\n4 7\n2 7\n3 4\n1 4\n5 2\n2 4\n7 3\n5 7\n6 1\n6 1\n4 7\n1 3\n5 3\n3 4\n2 7\n7 3\n3 4\n5 2\n2 6\n7 7\n3 3\n7 7\n4 7\n7 6\n3 4\n6 1\n8 6\n1 4\n2 2\n5 7\n8 2\n4 5\n4 1\n3 1\n6 2\n5 7\n3 2\n1 3\n5 3\n6 6\n7 1\n3 3\n5 6\n5 1\n5 7\n8 6\n3 7\n1 4\n4 7\n6 1\n3 3\n5 1\n5 4\n5 1\n5 1\n4 3\n3 2\n5 6\n3 1\n4 6\n7"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4') == '2\\n2\\n1\\n1'\n\n\"\"\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\"\"\""
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == '2 2 1 1'"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4') == '2\\n2\\n1\\n1'\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\"\"\""
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == '2\\n2\\n1\\n1'\nassert solution(\"6 3\\n1 2\\n2 3\\n3 4\\n1 5\\n2 5\") == '4\\n2\\n1\\n3\\n2\\n1'\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\") == '2\\n1\\n2\\n1\\n1'\nassert solution(\"3 4\\n1 2\\n2 3\\n3 1\") == '2\\n1\\n1\\n1'\nassert solution(\"6 2\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == '2\\n2\\n1\\n1\\n1\\n1'\n\nimport io\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdin = io.StringIO(input)\n        stdout = io.StringIO()\n        try:\n            sys.stdin = stdin\n            sys.stdout = stdout\n            solution()\n            sys.stdin = sys.__stdin__\n            sys.stdout = sys.__stdout__\n        except:\n            sys.stdin = sys.__stdin__\n            sys.stdout = sys.__stdout__\n            raise\n        self."
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n5\\n10\\n15') == '25'\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '3\\n5\\n10\\n15'\n) == '25'\n\nassert solution(\n    '3\\n10\\n5\\n15'\n) == '30'\n\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5\\n10\\n15\\n\") == \"25\\n\"\nassert solution(\"4\\n20\\n15\\n10\\n\") == \"30\\n\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5\\n10\\n15\\n\") == \"25\"\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n5\\n10\\n15\\n\") == \"25\"\nassert solution(\"1\\n5\\n10\\n15\\n\") == \"30\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n5\\n10\\n15\\n') == '25'\nassert solution('3\\n5\\n10\\n') == '30'\n\nimport sys; input = sys.stdin.readline\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"3\\n5\\n10\") == \"30\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5\\n10\\n15\\n\") == \"25\"\nassert solution(\"3\\n3\\n3\\n3\\n\") == \"30\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"3\\n0\\n10\\n15\") == \"30\"\n\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('10 10 5') == '30'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aabbca') == 2\n\"\"\"\n\n\"\"\"\nimport math\n\nN = int(stdin.readline())\nS = stdin.readline().strip()"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aabbca\") == 2\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aabbca\") == 2\n\"\"\"\n\nimport math"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aabbca') == 2\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abbca') == 2\nassert solution('aabbca') == 2\nassert solution('aabbcb') == 3\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aabbca') == 2\n\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aabbca') == 2\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aabbca') == 2\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ab') == '1'\nassert solution('aabbc') == '2'\nassert solution('aabcc') == '2'\nassert solution('aaaaa') == '1'\nassert solution('aaaab') == '2'\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aabbca\") == 2\n\"\"\"\n\n\"\"\"\nSolution:\n\nfor each of the string split by a space, we count the unique letters of the two strings.\nWe add the larger count of the two strings to the result.\n\"\"\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Rainy\"\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\n\n\"\"\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('Sunny') == 'Cloudy'\n\"\"\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\n\nassert solution(\"Cloudy\") == \"Rainy\"\n\nassert solution(\"Rainy\") == \"Sunny\"\n\nassert solution(\"Rainy\") == \"Rainy\"\n\nassert solution(\"Rainy\") == \"Rainy\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\n\nassert solution(\"Cloudy\") == \"Rainy\"\n\nassert solution(\"Rainy\") == \"Sunny\"\n\nassert solution(\"Rainy\") == \"Cloudy\"\n\nassert solution(\"Cloudy\") == \"Rainy\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"Sunny\"\n) == \"Cloudy\"\nassert solution(\n    \"Cloudy\"\n) == \"Rainy\"\n\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Rainy'\nassert solution('Rainy') == 'Sunny'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Sunny'\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Rainy'\nassert solution('Rainy') == 'Sunny'\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 17 120') == '119'\n\"\"\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 17 120\") == '119'\nassert solution(\"6 20 200\") == '184'\nassert solution(\"1 10 200\") == '204'\nassert solution(\"10 200 200\") == '200'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 17 120') == '119'\n\"\"\""
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\"\"\"\n\nimport math\n\nn, a, b = map(int, input().split())"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 17 120\\n') == '119'\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 17 120') == '119'\n\"\"\"\n\nN, A, B = map(int, input().split())"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 17 120') == '119'\nassert solution('6 23 210') == '211'\nassert solution('4 23 210') == '211'\nassert solution('6 23 210') == '211'\nassert solution('7 17 120') == '119'\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 17 120') == '119'\nprint(solution(input()))\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\"\"\""
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 17 120') == \"119\"\nassert solution('6 19 600') == \"2376\"\nassert solution('1 1 2') == \"0\"\nassert solution('6 19 1') == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n') == '3800'\nassert solution('2 2\\n') == '10200'\nassert solution('3 3\\n') == '100800'\nassert solution('4 4\\n') == '1280000'\nassert solution('5 5\\n') == '1475000'\n\n\"\"\""
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == '3800'\n\"\"\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\""
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '2875'\nassert solution('1\\n1\\n') == '100'\nassert solution('1\\n1\\n') == '2875'\nassert solution('1\\n1\\n') == '2875'\nassert solution('1\\n1\\n') == '2875'\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == '3800'\n\"\"\""
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n') == '3800'\n\"\"\"\n\nimport math\nimport sys\n\ninput = lambda: sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\n\nprint(math.ceil(M * 2 + N * 3))\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '0'\nassert solution('N M\\n5 1') == '3800'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n\") == \"3800\"\n\"\"\""
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n') == '3800'\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == None\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a') == 'b'\nassert solution('aac') == 'b'\nassert solution('abac') == 'b'\nassert solution('abaca') == 'c'\nassert solution('abc') == None\n\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoderregularcontest\") == 'b'\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == None\nassert solution('a') == 'b'\nassert solution('aa') == 'b'\nassert solution('abc') == 'c'\nassert solution('aab') == 'b'\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('atcoderregularcontest') == 'b'\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n\n\nimport sys\n\nstdin = sys.stdin.readlines()\nS = stdin[0][0:-1]\n\n\nalphabet = [chr(i) for i in range(ord('a'), ord('z')+1)]\nletters = set(S)\nalphabet.sort()\n\nfor letter in alphabet:\n    if letter not in letters:\n        print(letter)\n        break"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\nprint(solution(\"atcoderregularcontest\"))\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\n\"\"\"\n\ns = stdin\n\ncheck = set()\n\nfor i in s:\n    if i not in check:\n        check.add(i)\n    else:\n        print(i)\n        break\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 4 4 3\") == '4\\n3\\n3\\n4'\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\"\"\"\n\n\"\"\"\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438:\n\u0414\u0430\u043d\u044b 5 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b: X_1, X_2, X_3, X_4, X_5.\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 5 \u0431\u0435\u0437 \u043e\u0441\u0442\u0430\u0442\u043a\u0430 \u043f\u0440\u0438 \u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u043d\u0430 5 \u0438 \u043d\u0430 10.\n\n-----Constraints-----\n - 1 \\leq X_i \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n-----Output-----\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n-----Sample Input-----\n8\n9 10\n4 5\n6 7\n\n-----Sample Output-----\n7\n\n\"\"\"\n\n\"\"\"\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438:\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u0432\u0441\u0435 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0435 \u043e\u0442\u0440\u0435\u0437\u043a\u0443 [\u2212100, 100], \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 3 \u0438 5 \u0431\u0435\u0437 \u043e\u0441\u0442\u0430\u0442\u043a\u0430.\n\n-----Constraints-----\n - 100 \\leq A_i \\leq 100\n - All values in input are integers.\n\n-----Input-----\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n-----Output-----\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n-----Sample Input-----\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n\n-----Sample Output-----\n-5 -3 -1\n\n\"\"\"\n\n\"\"\"\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438:\n\u0414\u0430\u043d\u044b \u0434\u0432\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 A \u0438 B (A \\leq B).\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u0438\u0445 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0431\u0449\u0438\u0439 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c, \u043e\u0431\u0449\u0438\u0439 \u043a\u0440\u0430\u0442\u043d\u043e\u0439 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u0437 \u044d\u0442\u0438\u0445 \u0447\u0438\u0441\u0435\u043b, \u0438 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043e\u043d \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043d\u0438\u0445.\n\n-----Constraints-----\n - A \\leq B\n - All values in input are integers.\n\n-----Input-----\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u0432\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 A \u0438 B, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n-----Output-----\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n-----Sample Input-----\n5 8\n\n-----Sample Output-----\n1\n\n\"\"\"\n\n\"\"\"\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438:\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nn.\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0441 \u0432\u044b\u0441\u043e\u0442\u043e\u0439 \u0440\u0430\u0432\u043d\u043e\u0439 nn, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u043c:\n\n1\n22\n333\n4444\n55555\n\n-----Constraints-----\n - n \\leq 100000\n - n is integer\n\n-----Input-----\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n-----Output-----\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c.\n\n-----Sample Input-----\n5\n\n-----Sample Output-----\n1\n22\n333\n4444\n55555\n\n\"\"\"\n\n\"\"\"\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438:\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nn.\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0441 \u0432\u044b\u0441\u043e\u0442\u043e\u0439 \u0440\u0430\u0432\u043d\u043e\u0439 nn, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u043c:\n\n1\n22\n333\n4444\n55555\n\n-----Constraints-----\n - n \\leq 100000\n - n is integer\n\n-----Input-----"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\""
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\n-----------------------------------------------------\n\n-----------------------------------------------------"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 4 3\") == '4\\n3\\n3\\n4'\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\n\nn = int(stdin.readline())\nA = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 4 3\") == \"4\"\nassert solution(\"4 2 4 3\") == \"4\"\n\"\"\"\n\nimport heapq\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 4 3\") == \"4\\n3\\n3\\n4\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 4 4 3\") == '4\\n3\\n3\\n4'\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\n\nfrom typing import List, Callable, Union, Iterator\n\nIntList = List[int]"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2 4 2 1\") == 2\n\"\"\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input_string) == output_string\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2 4 2 1\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 2\") == '0\\n'\nassert solution(\"7\\n1 1 1 1 1 1 1\") == '1\\n'\nassert solution(\"6\\n1 1 1 1 1 1\") == '0\\n'\nassert solution(\"4\\n4 4 4 4\") == '1\\n'\nassert solution(\"2\\n2 2\") == '0\\n'\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n3 4 5 6') == '0'\nassert solution('6\\n3 4 5 6 2 1') == '5'\n\"\"\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1\\n1 2') == 1\nassert solution('1 1\\n1 2\\n2 1') == 2\nassert solution('1 1\\n1 2\\n2 2') == 0\nassert solution('1 1\\n1 2\\n2 2\\n1 1') == 1\n\nassert solution('4\\n2 4\\n1 1\\n3 2\\n2 2\\n2 3') == 5\n\nprint('All tests passed.')\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4') == '2'\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 2 4 2 1') == 2\n\n\"\"\"\n\nimport math\nimport sys\n\nimport pytest\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2 3 4\") == \"6\"\n\"\"\""
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n3 1 2 4 2 1') == 2\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n7 1\\n2\\n5\\n10\") == \"8\"\nassert solution(\"4\\n3 7\\n2\\n10\") == \"16\"\nassert solution(\"2\\n7 1\\n2\\n5\\n10\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 7 1 2 5 10\") == \"8\"\nassert solution(\"4 10 1 1\") == \"9\"\nassert solution(\"100 2 100\") == \"200\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"4 5 2 1\") == \"10\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1\\n2\\n5\\n10\\n') == '8'\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 7 1 2 5 10') == '8'\n\"\"\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7 1 2 5\") == 8\n\"\"\"\n\nimport math"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n7 1\\n2\\n5\\n10\\n') == '8'\n\nassert solution('3\\n7 2\\n2\\n5\\n10\\n') == '10'\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n7 1\\n2\\n5\\n10') == '8'\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n2\\n10\\n4\") == \"18\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n7 1\\n2\\n5\\n10\") == \"8\""
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n2\\n2\\n100') == '2'\nassert solution('1\\n1\\n1\\n50') == '0'\nassert solution('1\\n0\\n0\\n50') == '0'\nassert solution('0\\n0\\n0\\n50') == '0'\nassert solution('0\\n0\\n0\\n1') == '1'\n\"\"\"\nfrom functools import lru_cache"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\n\"\"\""
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2\n2\n2\n100''') == '2'\nassert solution('''2\n2\n1\n100''') == '2'\nassert solution('''2\n2\n1\n100''') == '0'\nassert solution('''2\n1\n1\n100''') == '0'\nassert solution('''2\n1\n0\n100''') == '0'\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\n2\n2\n100''') == '2'\n\n'''\nUsing the formula, x = a + b + c.\nWe want to solve the equation:\n500 + 100 + 50 = x\n\nWe know that 500 + 100 + 50 = x\n500 = a\n100 = b\n50 = c\n\n500 = a + b\n100 = b + c\n50 = c + a\n\nTherefore,\na + b + c = x\na = x - b - c\nb = x - 2a - c\nc = x - 2a - b\n\na = (x - b - c) / 2\nb = (x - 2a - c) / 2\nc = (x - 2a - b) / 2\n'''\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\\n100\") == \"1\"\nassert solution(\"2\\n2\\n2\\n100\") == \"2\"\nassert solution(\"2\\n2\\n2\\n3\") == \"0\"\n\n-----"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == 2\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\nassert solution(\"0\\n0\\n0\\n100\") == \"1\"\nassert solution(\"1\\n1\\n1\\n100\") == \"1\"\nassert solution(\"0\\n0\\n0\\n1\") == \"1\"\nassert solution(\"2\\n1\\n2\\n100\") == \"0\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\nassert solution(\"2\\n2\\n1\\n100\") == \"2\"\nassert solution(\"2\\n2\\n1\\n1\") == \"0\"\nassert solution(\"2\\n2\\n2\\n100\") == \"1\"\nassert solution(\"1\\n2\\n3\\n100\") == \"0\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 1 100') == '2'\nassert solution('6 0 1 1') == '1'\nassert solution('6 0 0 1') == '0'\nassert solution('1 1 1 1') == '1'\nassert solution('1 1 0 1') == '1'\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 2\") == 'Yes'\nassert solution(\"3 1 3\") == 'No'\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3 2') == 'Yes'\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 2\\n') == 'Yes'\nassert solution('1 2 1\\n') == 'Yes'\nassert solution('0 2 1\\n') == 'No'\nassert solution('1 1 1\\n') == 'Yes'\nassert solution('0 0 1\\n') == 'No'\n\nprint(\"All test cases passed.\")\n\n-----\n\nJava Code:\n\npublic class Solution {\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        String a, b, c;\n        Scanner sc = new Scanner(System.in);\n        a = sc.next();\n        b = sc.next();\n        c = sc.next();\n        if (Integer.parseInt(a) >= Integer.parseInt(b) && Integer.parseInt(a) <= Integer.parseInt(c))\n        {\n            System.out.println(\"Yes\");\n        }\n        else\n        {\n            System.out.println(\"No\");\n        }\n    }\n}\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3 2\\n') == 'Yes\\n'\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3 2') == 'Yes'\nassert solution('2 3 1') == 'No'\n\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1, 3, 2) == \"Yes\"\nassert solution(3, 1, 2) == \"No\"\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"1 3 1\") == \"No\"\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 1000\n120\n100\n140''') == '9'\n\nassert solution('''3 1000\n120\n100\n140''') == '9'\n\nassert solution('''2 100\n110\n100''') == '1'\n\nassert solution('''2 100\n110\n200''') == '0'\n\nassert solution('''2 100\n110\n200''') == '0'\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1000\\n120\\n100\\n140\\n') == '9'\n\nimport codewars_test as test\n\ntest.assert_equals(solution('3 1000\\n120\\n100\\n140\\n'), '9')\n\n---Problem---\n\nYou have a hot dog recipe and you know the current capacity of a pot. You are able to put the hot dog in the pot without causing it to overflow. You can set the hot dog's base capacity to a certain value, but you cannot change it. This value is called the base capacity of the hot dog.\nThere are different toppings that can be added to the hot dog. Each of them will increase the base capacity of the hot dog by a certain amount. The base capacity of each topping is called its capacity multiplier.\nYou have built a function called hotDogCapacity() which will return the capacity of a hot dog with the specified base capacity and topping multiplier.\nThe base capacity of the hot dog is 1.\nThe maximum capacity of the hot dog is 5.\nIf the base capacity is greater than the maximum capacity, return the maximum capacity.\n\n-----Constraints-----\n - 2 \u2264 N \u2264 100\n - 1 \u2264 m_i \u2264 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nBaseCapacity\nToppingMultiplier\n:\nBaseCapacity\nToppingMultiplier\n\n-----Output-----\nPrint the maximum number of toppings that can be added to the hot dog without causing it to overflow.\n\n-----Sample Input-----\n1\n1\n3\n1\n3\n5\n2\n4\n\n-----Sample Output-----\n2\n\nHere are some cases of the base capacity and the topping multiplier that will be tested:\n\nCase 1. The base capacity is 1, the topping multiplier is 1.\nThe maximum number of toppings that can be added to the hot dog without causing it to overflow is 2.\nCase 2. The base capacity is 5, the topping multiplier is 2.\nThe maximum number of toppings that can be added to the hot dog without causing it to overflow is 2.\nCase 3. The base capacity is 5, the topping multiplier is 4.\nThe maximum number of toppings that can be added to the hot dog without causing it to overflow is 2.\nCase 4. The base capacity is 10, the topping multiplier is 3.\nThe maximum number of toppings that can be added to the hot dog without causing it to overflow is 2.\nCase 5. The base capacity is 10, the topping multiplier is 5.\nThe maximum number of toppings that can be added to the hot dog without causing it to overflow is 3."
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n3 1000\n120\n100\n140\n\"\"\"\n) == \"9\"\n\nassert solution(\n\"\"\"\n4 100\n300\n300\n300\n300\n\"\"\"\n) == \"3\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1000\\n120\\n100\\n140\\n') == '9'\n\"\"\"\nfrom itertools import accumulate\nfrom operator import add"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1000\\n120\\n100\\n140\\n') == '9'\n\n----"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1000\\n120\\n100\\n140\\n') == '9'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '0'\nassert solution('3 1000\\n120\\n100\\n140') == '9'\nassert solution('3 1000\\n100\\n140\\n100\\n120') == '9'\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n\"\"\"\n\nN, X = map(int, stdin.readline().split())\n\nimport math"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\napple\\n: \\napple\\n') == '2\\n'\nassert solution('1\\napple\\n: \\napple\\n') == '1\\n'\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nPrint the number of kinds of items you got.\n\n-----Sample Input-----\n3\napple\norange\napple\n\n-----Sample Output-----\n2\n\nYou got two kinds of items: apple and orange.\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nPrint the number of kinds of items you got.\n\n-----Sample Input-----\n3\napple\norange\napple\n\n-----Sample Output-----\n2\n\nYou got two kinds of items: apple and orange.\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nPrint the number of kinds of items you got.\n\n-----Sample Input-----\n3\napple\norange\napple\n\n-----Sample Output-----\n2\n\nYou got two kinds of items: apple and orange.\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nPrint the number of kinds of items you got.\n\n-----Sample Input-----\n3\napple\norange\napple\n\n-----Sample Output-----\n2\n\nYou got two kinds of items: apple and orange.\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nPrint the number of kinds of items you got.\n\n-----Sample Input-----\n3\napple\norange\napple\n\n-----Sample Output-----\n2\n\nYou got two kinds of items: apple and orange.\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nPrint the number of kinds of items you got.\n\n-----Sample Input-----\n3\napple\norange\napple\n\n-----Sample Output-----\n2\n\nYou got two kinds of items: apple and orange.\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nPrint the number of kinds of items you got.\n\n-----Sample Input-----\n3\napple\norange\napple\n\n-----Sample Output-----\n2\n\nYou got two kinds of items: apple and orange.\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nPrint the number of kinds of items you got.\n\n-----Sample Input-----\n3\napple\norange\napple\n\n-----Sample Output-----\n2\n\nYou got two kinds of items: apple and orange.\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nPrint the number of kinds of items you got.\n\n-----Sample Input-----\n3\napple\norange\napple\n\n-----Sample Output-----\n2\n\nYou got two kinds of items: apple and orange.\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nPrint the number of kinds of items you got.\n\n-----Sample Input-----\n3\napple\norange\napple\n\n-----Sample Output-----\n2\n\nYou got two kinds of items: apple and orange.\n\"\"\"\n\n\"\"\"\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"apple\\norange\\napple\") == 2\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"apple\") == 1\nassert solution(\"orange\") == 1\n\"\"\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(sample_input) == sample_output\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\napple\\norange\\napple\") == 2\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"apple\") == \"apple\"\nassert solution(\"orange\") == \"orange\"\n\n\"\"\"\n\nimport re\n\nstdin = stdin.split('\\n')\nlength = int(stdin[0])\nitems = []\nfor item in stdin[1:]:\n    items.append(item)"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\nprint('All test cases passed.')\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('apple') == 'apple'\nassert solution('orange') == 'orange'\nassert solution('kotleta') == 'kotleta'\nassert solution('makara') =='makara'\n\n'''\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"3\\n\"\n\"apple\\n\"\n\"orange\\n\"\n\"apple\"\n) == \"2\"\n\nassert solution(\n\"3\\n\"\n\"apple\\n\"\n\"orange\\n\"\n\"apple\"\n) == \"2\"\n\nassert solution(\n\"5\\n\"\n\"orange\\n\"\n\"banana\\n\"\n\"apple\\n\"\n\"pineapple\"\n) == \"3\"\n\nassert solution(\n\"10\\n\"\n\"pineapple\\n\"\n\"orange\\n\"\n\"apple\\n\"\n\"banana\\n\"\n\"grapefruit\\n\"\n\"kiwi\\n\"\n\"pear\\n\"\n\"grapes\\n\"\n\"pomegranate\"\n) == \"6\"\n\nassert solution(\n\"2\\n\"\n\"a\\n\"\n\"a\"\n) == \"1\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"apple\\norange\") == 2\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"4\n2100 2500 2700 2700\"\"\") == \"2 2\"\n\nassert solution(\"\"\"4\n2100 2500 2700 2700\"\"\") == \"2 2\"\n\nassert solution(\"\"\"4\n3200 3250 3800 3800\"\"\") == \"3 3\"\n\n\"\"\"\nThe user with rating 2100 is \"yellow\", and the others are \"orange\". There are three different colors.\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"\n\"\"\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2 3\") == \"2 2\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2100 2500 2700 2700\") == \"2 2\"\nassert solution(\"5 1200 1200 2000 1200\") == \"1 1\"\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2100 2500 2700 2700\\n') == '2 2'\n\"\"\"\n\nn = int(stdin.readline().strip())\na = list(map(int, stdin.readline().strip().split()))\n\nr = {\n    'gray': list(range(1, 400)),\n    'brown': list(range(400, 800)),\n    'green': list(range(800, 1200)),\n    'cyan': list(range(1200, 1600)),\n    'blue': list(range(1600, 2000)),\n    'yellow': list(range(2000, 2400)),\n    'orange': list(range(2400, 2800)),\n    'red': list(range(2800, 3200)),\n}\n\nfor _ in range(n):\n    for rk, rv in r.items():\n        if a[_] in rv:\n            r[rk].remove(a[_])\n\nprint(len(r.keys()), len(r.keys()) - 1)\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2100 2500 2700 2700') == '2 2'\n\"\"\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2100 2500 2700 2700\") == \"2 2\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3') == '0 1 1'\nassert solution('5\\n1 2 3 4 5') == '2 3'\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2100 2500 2700 2700') == '2 2'\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\"\n\nramen = {\n    \"o\": 700,\n    \"x\": 0\n}\n\nin_ = input()\ntotal = ramen[\"x\"]\nfor s in in_:\n    if s == \"o\":\n        total += ramen[\"o\"]\n    else:\n        total += ramen[\"x\"]\nprint(total)\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"oxo\") == 900\nprint('PASSED')\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('oxo') == 900\nprint(solution(stdin), end=\"\")"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('oxo') == 900\nassert solution('xo') == 700\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"oxo\") == 900\nassert solution(\"xxx\") == 700\n\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('oxo') == 900"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('o') == 'boiled egg'\nassert solution('xo') == ''\nassert solution('xox') == 'boiled egg'\n\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('oxo') == '900'\nassert solution('xo') == '0'\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('HH') == 'H'\nassert solution('HHH') == 'H'\nassert solution('HHD') == 'D'\nassert solution('DHD') == 'D'\n\"\"\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"DH\") == \"D\"\n\n------------------------------------------------------------------------------------------------------------------------\nYou have an array of integers. Each element in the array can be manipulated by executing a command.\nThe commands are:\n\n1.  Increment: Increment the current element by 1.\n2.  Decrement: Decrement the current element by 1.\n3.  If the current element is equal to 0, execute Delete command.\n4.  If the current element is not equal to 0, execute NoOp command.\n\nThis array is given as an input. You must return the elements of the array after each command.\n\nNote: Executing a NoOp command does not change the array.\n\nInput Format\n\nThe input contains several lines. The first line contains the commands of the array. The next line contains the size of the array. The next line contains the elements of the array, each separated by a space.\n\nConstraints\n\n1 <= N <= 10000\n\n0 <= A[i] <= 1000\n\nOutput Format\n\nReturn the elements of the array after performing all the commands.\n\nSample Input 0\n\n1 4 2 0 3\n3\n2 3 -2 0\nSample Output 0\n\n2 3\n\nExplanation 0\n\nAll the commands are executed in the order provided.\n\nSample Input 1\n\n-2 -1 3 0 1\n3\n2 3 -2 0\nSample Output 1\n\n3\n\nExplanation 1\n\nThe array changes as follows:\nArray   Command   Result\n1       1        2\n2       2        1\n3       3        0\n4       1        1\n\n'''"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"D D\") == \"D\"\n\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"DH\") == \"D\"\n\n---\n\nimport sys\nimport typing\n\nSTDIN_SIO = typing.TextIO"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"DH\") == \"D\"\n\"\"\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'H'\nassert solution('D D') == 'D'\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    'H H'\n) == 'H'\nassert solution(\n    'D D'\n) == 'D'\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"DH\") == \"D\"\n\nprint(solution(\"HH\"))\nprint(solution(\"DH\"))"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"H D\") == \"D\"\nassert solution(\"D H\") == \"H\"\nassert solution(\"D D\") == \"D\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'H'\nassert solution('D D') == 'D'\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1222') == '1+2+2+2=7'\nassert solution('1345') == '1+3-5=7'\n\n\"\"\"\n\nstdin = input()\nstdout = ''\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\nIf you are given an incorrect input, print\n\n>>> INCORRECT INPUT!\n\"\"\""
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1222) == \"1+2+2+2=7\"\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin=\"1222\") == \"1+2+2+2=7\"\nprint(solution(stdin=\"1222\"))\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\n\"\"\"\n\n\n\nimport re\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\nassert solution('1223') == '1+2-2+2=7'\n\nassert solution('1230') == '1+2-2+0=7'\n\nassert solution('1234') == '1+2-2+4=7'\n\nassert solution('1235') == '1+2-2+5=7'"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\"\"\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\nassert solution(\"5\\n2 2 3 1\") == \"2\\n1\\n0\\n0\\n0\"\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def solution(self, stdin):\n        N = int(stdin.readline())\n        A = [int(i) for i in stdin.readline().split()]\n\n        A = [0] + A + [N+1]\n\n        stack = [0]\n        res = []\n\n        for i in range(1, N+2):\n            if A[i] > stack[-1]:\n                while stack and A[i] > A[stack[-1]]:\n                    res.append(stack.pop())\n                stack.append(i)\n\n            elif A[i] < stack[-1]:\n                stack.append(i)\n\n        return \"\\n\".join(map(str, res))\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_solution(self):\n        # self.assertEqual(self.solution.solution(\"5\\n1 1 2 2\"), \"2\\n2\\n0\\n0\\n0\")\n        self.assertEqual(self.solution.solution(\"5\\n2 2 3 1\"), \"2\\n1\\n0\\n0\\n0\")"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0'\nassert solution('5\\n1 1 3 2') == '2\\n2\\n0\\n0\\n0'\nassert solution('5\\n1 2 1 3 2') == '2\\n2\\n0\\n0\\n0'\n\"\"\""
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2 2 0 0 0\"\n\"\"\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\"\nassert solution(\"5\\n1 1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n------Solution (Python)------\n\n------Solution (JavaScript)------\n\"\"\"\nfrom typing import List\n\nclass Solution {\n    public static void main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n        var n = parseInt(stdin.readLine().split(\" \")[0]);\n        var a = stdin.readLine().split(\" \");\n        var sub = 0;\n        for(var i=0; i<n; i++) {\n            if(a[i]!= i+1) {\n                sub++;\n            }\n        }\n        console.log(sub);\n        for(var i=0; i<n; i++) {\n            console.log(sub, a[i]);\n        }\n    }\n}\n\"\"\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(5, 1, 2, 2) == 2\nassert solution(5, 1, 2, 3) == 0\nassert solution(5, 1, 2, 4) == 0\nassert solution(5, 1, 3, 2) == 1\nassert solution(5, 1, 3, 3) == 0\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\"\n\"\"\"\n\nn = int(input())\n\ninfo = [input().split() for _ in range(n)]\n\nadj = [[] for _ in range(n)]\n\nfor i in range(n):\n    for j in range(n):\n        if int(info[i][j]) - 1 == i:\n            adj[i].append(j)"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n1 1 2 2''') == '2\\n2\\n0\\n0\\n0'\nassert solution('''5\n2 2 4 1''') == '0\\n0\\n2\\n2\\n0'\nassert solution('''5\n3 4 2 1''') == '2\\n0\\n0\\n0\\n2'\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1 3 2\") == \"2\\n0\\n0\\n0\"\n\n'''\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('5 1 1 1') == '0'\nassert solution('3 1 2') == '2'\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"6\") == \"4\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6') == '3'\n\"\"\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '1'\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6') == '3'\nassert solution('5') == '4'\n\"\"\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6') == '3'\n\"\"\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n\") == \"3\"\n\"\"\"\nimport sys\n\nassert solution(sys.stdin.read()) == \"3\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n\") == \"3\"\n\"\"\"\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nimport sys"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6') == '3'\nassert solution('7') == '4'\nassert solution('8') == '6'\n\"\"\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('6') == '3'\n\"\"\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3\"\n\n-----\nIt's impossible to reach 6 from 0, so the first solution is incorrect. The kangaroo's nest is at coordinate 3, and he wants to reach it from the left, so the earliest possible time is 3."
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1118') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    stdin=\n    '1118') ==\n    'Yes'\nassert solution(\n    stdin=\n    '1234') ==\n    'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1120') == 'No'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1234') == 'No'\nassert solution('2345') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1234') == 'No'\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1118') == 'Yes'\n\"\"\"\n\n\"\"\"\nAnother solution is to count all the numbers of same digits. For example, if the input is 1118, then there are three 1 and three 8, so count = 3. Then we compare the count of all the numbers with the number of digits in the input."
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1118') == \"Yes\"\nassert solution('101') == \"No\"\nassert solution('1010') == \"Yes\"\nassert solution('111') == \"No\"\nassert solution('1112') == \"Yes\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1118\") == \"Yes\"\n\nprint(solution(\"1118\"))\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1111) == \"Yes\"\nassert solution(1234) == \"No\"\nassert solution(2134) == \"Yes\"\nassert solution(2222) == \"No\"\nassert solution(1235) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1118\") == \"Yes\"\nassert solution(\"1111\") == \"No\"\nassert solution(\"1121\") == \"Yes\"\n\"\"\"\n\nimport unittest\n"
    }
]