[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"5 1\\n2 4\\n3 5\\n4 6\\n3 7\") == \"5\\n1 8 6\"\nassert solution(\"1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"7 1\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\") == \"5\\n1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n4\\n1 3\\n3\\n3\") == \"4\\n1 3\\n3\\n3\"\nassert solution(\"3\\n1 2\\n2 3\\n3\\n1 3\\n3\\n3\") == \"1 3\\n3\\n3\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n4\\n1 3\\n3\\n3\") == \"4\\n1 3\\n3\\n3\""
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2 2\\n1 2') == '1 2'\nassert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5 1 8 6'\n\"\"\"\nimport sys\nfrom typing import List, Tuple\n\nsys.setrecursionlimit(1_000_000)\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2\\n2 3\\n2 5') == '5'\nassert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n') == '5 1 8 6'\n\"\"\"\nfrom functools import reduce\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n') == '5\\n1 8 6'\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n\") == \"5\\n1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\nimport heapq"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 3 8 1 2 4 1 20 4 5') == '20 8'\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 4 6 8 10\") == \"2 10\"\n\"\"\"\nfrom collections import Counter\n\nn = int(input())\nc = Counter(list(map(int, input().split())))\nx = c[1]\ny = c[2]\nprint(c[1] * c[2] if x * y > 0 else -(c[1] * c[2]))\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\nprint(solution(\"10 2 8 1 2 4 1 20 4 5\"))\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 10 2 8 1 2 4 1 20 4 5') == '20 8'\n\"\"\"\n\nimport sys\nimport math\nimport itertools"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\nassert solution(\"10\\n11 1 2 3 4 5 6 7 8 9 10\") == \"10 10\"\n\nassert solution(\"10\\n3 1 2 4 1 20 4 5\") == \"20 10\"\n\nassert solution(\"10\\n3 1 2 4 5 1 20 4 5\") == \"20 10\"\n\nassert solution(\"10\\n3 1 2 4 5 6 1 20 4 5\") == \"20 10\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n10\\n2 8 1 2 4 1 20 4 5\\n\") == \"20 8\"\n\n-------------\n\nfrom collections import Counter\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n\n\"\"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nprint(\"Test Completed\")\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_data) == test_result\n\"\"\"\nimport collections"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n\n\n\n-----\n\nInput:\n3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4\n\nOutput:\n24\n\n-----\n\nInput:\n3 5 3\n1 2 3 4 5\n5 2 2 2 3\n7 1 1 4 7\n8 7 1 2 4\n7 1 2 3 4\n\nOutput:\n56\n\n-----\n\nInput:\n2 4 4\n2 2 3 4\n5 4 3 4\n4 5 2 3\n7 4 3 5\n\nOutput:\n13\n\n-----\n\nInput:\n4 3 4\n3 3 4 2\n7 3 2 6\n1 5 8 7\n3 4 2 1\n5 6 7 8\n6 2 9 8\n1 6 9 7\n\nOutput:\n72\n\n-----\n\nInput:\n5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\n\nOutput:\n56\n\n-----\n\nInput:\n6 7 2\n1 2 3 4 5 6\n7 3 4 5 6 2\n2 4 6 3 1 5\n8 7 1 6 2 3\n5 2 3 1 8 4\n6 4 8 5 3 2\n6 1 4 3 5 2\n\nOutput:\n55\n\n-----\n\nInput:\n3 3 4\n4 3 2 1\n2 3 1 4\n3 2 1 3\n\nOutput:\n24\n\n-----\n\nInput:\n5 5 4\n3 4 4 2 1\n4 3 2 1 3\n1 3 2 1 4\n2 1 4 3 5\n7 4 3 5 6\n\nOutput:\n32\n\n-----\n\nInput:\n4 3 4\n3 3 2 1\n2 2 1 2\n1 2 2 1\n1 2 2 1\n\nOutput:\n24\n\n-----\n\nInput:\n2 2 2\n1 2 2\n1 1 1\n\nOutput:\n2\n\n-----\n\nInput:\n3 3 4\n1 1 4 2\n1 3 4 1\n2 3 1 3\n2 3 4 2\n\nOutput:\n32\n\n-----\n\nInput:\n1 2 3\n1 1 1\n\nOutput:\n0\n\n-----\n\nInput:\n2 2 3\n1 1 1\n1 1 1\n\nOutput:\n0\n\n-----\n\nInput:\n2 2 3\n1 1 1\n1 1 1\n\nOutput:\n0\n\n-----\n\nInput:\n1 2 3\n1 1 1\n\nOutput:\n0\n\n-----\n\nInput:\n1 1 1\n\nOutput:\n0\n\n-----\n\nInput:\n1 1 1\n\nOutput:\n0\n\n-----\n\nInput:\n1 2 3\n2 1 3\n1 2 3\n\nOutput:\n6\n\n-----\n\nInput:\n1 2 3\n2 1 3\n1 2 3\n\nOutput:\n6\n\n-----\n\nInput:\n1 1 1\n\nOutput:\n0\n\n-----\n\nInput:\n4 2 1\n1 2 1\n1 2 1\n1 2 1\n1 1 1\n\nOutput:\n8\n\n-----\n\nInput:\n4 2 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\nOutput:\n8\n\n-----\n\nInput:\n1 1 1\n1 2 3\n\nOutput:\n0\n\n-----\n\nInput:\n2 1 3\n1 2 1\n1 1 1\n\nOutput:\n2\n\n-----\n\nInput:\n4 3 4\n3 4 3 2\n3 2 3 4\n3 4 3 2\n4 3 4 3\n\nOutput:\n20\n\n-----\n\nInput:\n3 3 4\n1 1 4 1\n1 3 4 1\n2 3 1 3\n2 3 4 2\n\nOutput:\n16\n\n-----\n\nInput:\n4 3 4\n1 1 2 2\n1 3 2 1\n2 2 1 1\n2 3 1 2\n\nOutput:\n10\n\n-----\n\nInput:\n4 3 4\n1 1 1 2\n1 3 2 1\n2 2 1 1\n2 3 1 2\n\nOutput:\n10\n\n-----\n\nInput:\n4 3 4\n1 1 1 1\n1 3 2 1\n2 2 1 1\n2 3 1 2\n\nOutput:\n8\n\n-----\n\nInput:\n4 4 3\n1 1 1 1\n1 3 2 1\n2 2 1 1\n2 3 1 2\n\nOutput:\n6\n\n-----\n\nInput:\n4 4 3\n1 1 1 1\n1 3 2 1\n2 2 1 1\n2 3 1 2\n\nOutput:\n8\n\n-----\n\nInput:\n4 3 4\n1 1 1 1\n1 3 2 1\n2 2 1 1\n2 3 1 2\n\nOutput:\n6\n\n-----\n\nInput:\n4 4 3\n1 1 1 1\n1 3 2 1\n2 2 1 1\n2 3 1 2\n\nOutput:\n8\n\n-----\n\nInput:\n1 1 1\n1 1 1\n\nOutput:\n0\n\n-----\n\nInput:\n4 4 3\n1 1 1 1\n1 3 2 1\n2 2 1 1\n2 3 1 2\n\nOutput:\n6\n\n-----\n\nInput:\n3 3 4\n3 4 3 2\n3 2 3 4\n3 4 3 2\n4 3 4 3\n\nOutput:\n24\n\n-----\n\nInput:\n3 3 4\n4 3 3 2\n3 2 3 4\n3 4 3 2\n4 3 4 3\n\nOutput:\n24\n\n-----\n\nInput:\n1 1 1\n1 1 1\n\nOutput:\n0\n\n-----\n\nInput:\n1 2 3\n1 2 3\n1 2 3\n\nOutput:\n6\n\n-----\n\nInput:\n2 2 3\n1 1 1\n1 1 1\n\nOutput:\n0\n\n-----\n\nInput:\n3 3 4\n3 2 1 2\n2 3 1 2\n1 3 1 2\n2 1 3 2\n\nOutput:\n12\n\n-----\n\nInput:\n3 3 4\n2 1 1 2\n1 2 1 2\n1 1 1 2\n\nOutput:\n12\n\n-----\n\nInput:\n1 1 1\n\nOutput:\n0\n\n-----\n\nInput:\n4 3 4\n1 1 1 1\n1 3 2 1\n2 2 1 1\n2 3 1 2\n\nOutput:\n12\n\n-----\n\nInput:\n3 3 4\n1 1 1 1\n1 3 2 1\n2 2 1 1\n2 3 1 2\n\nOutput:\n0\n\n-----\n\nInput:\n1 1 1\n1 1 1\n\nOutput:\n0\n\n-----\n\nInput:\n3 3 4\n1 1 1 1\n1 3 2 1\n2 2 1 1\n2 3 1 2\n\nOutput:"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == 24\n\"\"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\\n') == '56'\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 4 3 2') == '4'\nassert solution('1 3 5 6 5 4 2') == '6'\nassert solution('1 2 3 2') == '1'\nassert solution('1 2 2') == '1'\nassert solution('1 2 4 3') == 'LRR'\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nLRRR'\nassert solution('7\\n1 3 5 6 5 4 2') == '6\\nLRLRRR'\nassert solution('3\\n2 2 2') == '1\\nR'\nassert solution('4\\n1 2 4 3') == '4\\nLLRR'\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nR R\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nR R R\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nL L L\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nL L L\"\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\n\" + \"LRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\n\" + \"LRLRRR\"\nassert solution(\"3\\n2 2 2\") == \"1\\n\" + \"R\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\n\" + \"LLRR\"\n\n\"\"\"\n\nimport sys\nimport collections\n\ninp_file = open('test_files/Y14R5P1/A.in')\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    arr = list(map(int, sys.stdin.readline().split()))\n\n    # add current array to the hash table\n    c_map = collections.Counter(arr)\n\n    prev_diff = 0\n    total_cnt = 0\n    for k, v in c_map.items():\n        diff = v - prev_diff\n        total_cnt += diff\n        prev_diff = v\n\n    # remove excess elements from the end\n    total_cnt -= max(0, prev_diff)\n\n    diff_map = collections.defaultdict(int)\n    diff_map[0] = 1\n\n    prev_diff = 0\n    for k, v in c_map.items():\n        diff = v - prev_diff\n        total_cnt += diff\n        prev_diff = v\n        diff_map[diff] += 1\n\n    print(max(diff_map.keys()), total_cnt)\n    for d in sorted(diff_map.keys(), reverse=True):\n        if total_cnt == 0:\n            break\n        print(d, diff_map[d])\n        total_cnt -= diff_map[d]\n\n    print()\n\ninp_file.close()\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nLRRR'\nassert solution('7\\n1 3 5 6 5 4 2') == '6\\nLRLRRR'\nassert solution('3\\n2 2 2') == '1\\nR'\nassert solution('4\\n1 2 4 3') == '4\\nLLRR'\n\n\"\"\"\n\nfrom math import inf\n\na = [int(i) for i in input().split()]\nn = len(a)\n\ndp = [[-inf for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = 1\n\nfor d in range(1, n):\n    for i in range(n - d):\n        j = i + d\n        dp[i][j] = max(dp[i][j], dp[i][k] + dp[k + 1][j] + 1 for k in range(i, j))\n\nprint(max(dp[0][n - 1] for _ in range(n)))\nprint(''.join('L' if dp[i][j] == dp[i][j - 1] else 'R' for i in range(n) for j in range(n)))\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 4 3 2\\n') == '4\\nLRRR'\nassert solution('7\\n1 3 5 6 5 4 2\\n') == '6\\nLRLRRR'\nassert solution('3\\n2 2 2\\n') == '1\\nR'\nassert solution('4\\n1 2 4 3\\n') == '4\\nLLRR'\n\nSolution\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input_string) == output_string\n\n\"\"\"\n\nn = int(input())\nseq = [int(x) for x in input().split()]\n\ncnt = 0\nl, r = 0, n - 1\nprev = 0\nres = []\n\nwhile l < r:\n    if seq[l] > seq[r]:\n        cnt += 1\n        res.append('L')\n        r -= 1\n        prev = seq[r]\n    elif seq[l] < seq[r]:\n        cnt += 1\n        res.append('R')\n        l += 1\n        prev = seq[l]\n    else:\n        cnt += 1\n        res.append('L')\n        l += 1\n        prev = seq[l]"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 2 4 3 2') == '4'\nassert solution('7\\n1 3 5 6 5 4 2') == '6'\nassert solution('3\\n2 2 2') == '1'\nassert solution('4\\n1 2 4 3') == '4'\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRR\"\n\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 4 3\\n') == '4', 'Your solution is incorrect'\nassert solution('6\\n1 2 4 3 2\\n') == '4', 'Your solution is incorrect'\nassert solution('7\\n1 3 5 6 5 4 2\\n') == '6', 'Your solution is incorrect'\nassert solution('4\\n1 2 4 3\\n') == '1', 'Your solution is incorrect'\nassert solution('6\\n1 2 2 2 2 2\\n') == '1', 'Your solution is incorrect'\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 7 4 1\") == \"3\"\nassert solution(\"1 3 3 7\") == \"-1\"\nassert solution(\"2 2 5 2 5\") == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\\n\") == \"3\"\nassert solution(\"5\\n1 3 3 7\\n\") == \"3\"\nassert solution(\"4\\n1 3 3 7\\n\") == \"-1\"\nassert solution(\"2\\n2 2 5 2 5\\n\") == \"3\""
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 5 1\") == \"3\"\nassert solution(\"2 8\") == \"3\"\nassert solution(\"1 4 4 7 4 1\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"-1\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 4 7\") == \"3\"\nassert solution(\"1 4 4 7 4 1\") == \"3\"\nassert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"3\"\n\nassert solution(\"6 6 4 4 6\") == \"1\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 2 5 2 5\") == 3\n\"\"\"\n\nn = int(input())\na = [int(num) for num in input().split(' ')]\na_max = max(a)\nsumm = 0\nfor i in range(n):\n    summ += a_max - a[i]\n    if summ > 0:\n        a_max = max(a[i+1:])\n    elif summ < 0:\n        a_max = min(a[i+1:])\n    else:\n        print(0)\n        break\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n1 4 4 7 4 1') == '3'\nassert solution('5\\n2 2 5 2 5') == '3'\nassert solution('4\\n1 3 3 7') == '-1'\nassert solution('2\\n2 8') == '3'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8 1 4 6\\n') == 3\n\n\"\"\"\n\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 4 7 4 1\") == 3\nassert solution(\"2 2 5 2 5\") == 3\nassert solution(\"1 3 3 7\") == -1\nassert solution(\"2 8\") == 3\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4 1 4 3\") == \"3\"\nassert solution(\"5\\n2 2 5 2 5\") == \"3\"\nassert solution(\"5\\n1 4 7 4 1\") == \"3\"\nassert solution(\"5\\n2 2 5 2 5\") == \"3\"\nassert solution(\"5\\n1 4 7 4 1\") == \"3\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 4 6\\n0 0 7 4\") == \"NO\"\nassert solution(\"3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"5 2 10 5\\n3 1 7 6\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"1 1 3 5\") == \"NO\"\nassert solution(\"3 1 5 5\") == \"YES\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 4 4\\n1 1 3 5\\n3 1 5 5') == 'NO'\nassert solution('3 3 7 5\\n0 0 4 6\\n0 0 7 4') == 'YES'\nassert solution('5 2 10 5\\n3 1 7 6\\n8 1 11 7') == 'YES'\nassert solution('0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 3 7 5\n0 0 4 6\n0 0 7 4''') == 'YES'\nassert solution('''5 2 10 5\n3 1 7 6\n8 1 11 7''') == 'YES'\nassert solution('''0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000''') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\") == \"YES\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 3 5\") == \"NO\"\nassert solution(\"2 2 4 4\") == \"YES\"\nassert solution(\"3 1 5 5\") == \"YES\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\") == \"YES\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\") == \"YES\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\n\"\"\""
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1098\") == 20\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u0435\u0448 \"\\\".\n\nSample Input:\n\n\\w denotes word character\nNo \\s denotes whitespace\n\nSample Output:\n\n\\\\w denotes word character\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10098') == 20\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\n\"\"\""
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\n\n\"\"\"\n\n\nfrom typing import List\n\nimport sys\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\n\"\"\"\n\nimport sys\nimport sys"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(1098) == 20\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1098\") == 20\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10098\") == 21\nassert solution(\"10\") == 19\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n5\\n0\\n2\\n4\") == \"5\\n3\\n1\\n2\\n4\"\nassert solution(\"7\\n7\\n0\\n0\\n1\\n4\\n0\\n6\") == \"7\\n3\\n1\\n2\\n4\\n5\\n6\"\nassert solution(\"7\\n7\\n0\\n0\\n1\\n4\\n0\\n6\") == \"7\\n3\\n1\\n2\\n4\\n5\\n6\"\n\"\"\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n2 1 0 0 0\") == \"2 1 4 5 3\"\n\nprint(\"Passed.\")\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 0 0 2 4\\n\") == '5 3 1 2 4'\nassert solution(\"7 0 0 1 4 0 6\\n\") == '7 3 2 1 4 5 6'\nassert solution(\"7 4 0 3 0 5 1\\n\") == '7 4 2 3 6 5 1'"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 1 0 0\") == \"4 3 1 2\"\nassert solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 0 0 2 4') == '5 3 1 2 4'\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n0 0 2 4\") == \"5 3 1 2 4\"\n\"\"\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n0 0 2 4\") == \"5 3 1 2 4\"\n\n\"\"\""
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\n\"\"\""
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 3') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n\n-----Pseudo code-----\n\nput all the elements into a set.\nGo through each element, and if it is in the set, then its color is the one it is in.\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 3') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\nassert solution('5 3\\n2 1 1 2 1') == 'NO'\n\"\"\"\n\nimport unittest\nfrom collections import Counter"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 1 1 2 1\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2 1 1 2 1\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2 1 1 1 2\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n\n\n-----\n\n'''\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n\"\"\"\n\nimport sys\n\nclass Graph:\n    def __init__(self, adjacency_matrix):\n        self.adjacency_matrix = adjacency_matrix\n\n    def dfs(self, vertices, starting_point):\n        if len(vertices) == 0:\n            return\n        if starting_point not in vertices:\n            return\n        for i in range(len(vertices)):\n            if self.adjacency_matrix[vertices[i]][starting_point] == 1:\n                return True\n            else:\n                if self.dfs(vertices[:i] + vertices[i+1:], starting_point):\n                    return True\n        return False\n\n    def find_path(self, starting_point):\n        for i in range(len(self.adjacency_matrix)):\n            if self.dfs(list(range(len(self.adjacency_matrix))), i):\n                return True\n        return False"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\n\n\"\"\""
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 5 2\") == '1'\nassert solution(\"11 5 1\") == '3'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 5 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\"\"\"\n\nn, x, y = [int(x) for x in stdin.split(\"\\n\")[0].split()]\na = int(\"\".join([str(int(x)) for x in stdin.split(\"\\n\")[1]]))\n\ncount = 0\n\nwhile x > 0:\n    if y <= 0:\n        a = a % (10 ** x)\n        break\n    else:\n        if a % (10 ** x) == 0:\n            break\n        else:\n            a = a % (10 ** x)\n            count += 1\n    x -= 1\n\nprint(count)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''11 5 2\n11010100101''') == '1'\nassert solution('''11 5 1\n11010100101''') == '3'\nassert solution('''4 0 1\n11101''') == '3'\nassert solution('''4 0 0\n1011''') == '1'\nassert solution('''2 3 2\n11101''') == '0'\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\n\"\"\"\n\nfrom typing import List, Tuple\nfrom collections import defaultdict"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11 5 2\\n11010100101') == '1'\nassert solution('11 5 1\\n11010100101') == '3'\n\"\"\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('1') == '0'\nassert solution('11') == '1'\nassert solution('11') == '1'\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"NO\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1') == 'YES'\nassert solution('5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1') == 'NO'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2') == 'YES'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2') == 'YES'\nassert solution('5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1') == 'YES'\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1 2\\n2\\n3\") == \"YES\"\nassert solution(\"4\\n1 1 2 2\\n2\\n3\") == \"NO\"\nassert solution(\"5\\n1 1 2 2 3\\n5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"5\\n3\\n1 2 3\\n4\\n1 2 2 3\\n1 3 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 1 3\\n4\\n1 2 2 1\\n1 3 3 2\") == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"NO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"NO\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 1\") == \"YES\"\nassert solution(\"3\\n1 2 2 3\") == \"NO\"\nassert solution(\"2\\n2 1 2\") == \"YES\"\nassert solution(\"2\\n1 2 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 1 2\") == \"YES\"\nassert solution(\"5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 1 2\") == \"NO\"\nassert solution(\"5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"3\\n1 1 2\") == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 1 2 2 1\\n5\\n1 2 2 1 2 2 1\") == \"YES\"\nassert solution(\"4\\n1 1 2 2 1\\n5\\n1 2 2 1 2 3\\n3\\n1 2 2 1\") == \"NO\"\nassert solution(\"4\\n1 1 2 2 1\\n5\\n1 2 2 1 2 4\\n3\\n1 2 2 1\") == \"NO\"\nassert solution(\"4\\n1 1 2 2 1\\n5\\n1 2 2 1 2 5\\n3\\n1 2 2 1\") == \"YES\"\nassert solution(\"4\\n1 1 2 2 1\\n5\\n1 2 2 1 2 4\\n3\\n1 2 2 1 3\\n4\\n1 2 2 1\") == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 1\") == \"YES\"\nassert solution(\"5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 1 2\") == \"NO\"\nassert solution(\"4\\n1 2 2 1\") == \"YES\"\nassert solution(\"10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\"\n\"\"\"\nimport sys\n\nsys.stdin = open(\"input.txt\")\nsys.stdout = open(\"output.txt\", \"w\")"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n1337\n1 2 5 4 6 6 3 1 9\n''') == '1557'\n\nassert solution('''5\n11111\n9 8 7 6 5 4 3 2 1\n''') == '99999'\n\nassert solution('''2\n33\n1 1 1 1 1 1 1 1 1\n''') == '33'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1337') == '1557'\nprint(solution('4\\n1337'))\nassert solution('5\\n11111') == '99999'\nprint(solution('5\\n11111'))"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1337') == '1553'\nassert solution('11111') == '99999'\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1337') == '1553'\n\n\"\"\""
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1337') == '1557'\nprint('Test pass.')"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\nprint(f'Input: {stdin}\\nOutput: {solution(stdin)}')\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1337\") == \"1557\"\nprint('OK')\nassert solution(\"5\\n11111\") == \"99999\"\nprint('OK')\nassert solution(\"2\\n33\") == \"33\"\nprint('OK')\n\n---------------------------------------------------"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(solution) == expected\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 2 1\") == \"931\"\nassert solution(\"33\") == \"33\"\nassert solution(\"11111\") == \"99999\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123 321 456\") == \"1\\n1 1 3\"\n\"\"\""
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\"\n\"\"\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a b c') == 'a b c'\n\nimport re"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46') == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'\nprint('The local tests are done.')\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a\\nb') == 'ab'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3\\n123 321 456\") == \"1\\n1 1 3\"\nassert solution(\"5\\n1 2 3\\n123 321 456\") == \"1\\n1 1 3\"\nassert solution(\"8\\n1 2 3\\n123 321 456\") == \"1\\n1 1 3\"\nassert solution(\"8\\n1 2 3\\n456 345 678\") == \"1\\n1 1 3\"\nassert solution(\"8\\n1 2 3\\n456 345 678\") == \"1\\n1 1 3\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\\n\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\"\nprint(solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\\n\"))"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \\\n    \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\"\nprint(\"Passed!\")"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123 321 456\") == \"1\\n1 1 3\"\nassert solution(\"5 10 15\") == \"2\\n4 8 16\"\nassert solution(\"15 18 21\") == \"3\\n7 14 21\"\nassert solution(\"100 100 101\") == \"4\\n4 8 16\"\nassert solution(\"1 22 29\") == \"2\\n1 19 38\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\\n') == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\\n'\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 3 7\") == 2\nassert solution(\"2\\n1 100000\") == 0\nassert solution(\"5\\n1 1000 1000 1000 1000\") == 0\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == 0\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3 3 7\") == 2\nassert solution(\"1 100000\") == 0\nassert solution(\"2 1 100000\") == 0\nassert solution(\"2 100000\") == 0\nassert solution(\"3 100000\") == 0\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\nimport heapq\n\nn = int(stdin.readline())\n\na = list(map(int, stdin.readline().split()))\n\nheapq.heapify(a)\n\nwhile len(a) > 1:\n    print(heapq.heappop(a) - heapq.heappop(a))\n\"\"\"\n\n\"\"\"\nSolution 2\n\nn = int(stdin.readline())\n\na = list(map(int, stdin.readline().split()))\n\nl = len(a)\n\nmin_a = min(a)\nmax_a = max(a)\n\nans = 0\n\nfor i in range(min_a, max_a):\n    count = 0\n    for j in a:\n        if j == i:\n            count += 1\n    if count % 2!= 0:\n        ans += i\n\nprint(ans)\n\"\"\"\n\n\n\"\"\"\nSolution 3\n\nn = int(input())\na = list(map(int, input().split()))\n\nl = len(a)\n\na.sort()"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 3 7\") == '2'\n\nassert solution(\"2\\n1 100000\") == '0'\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 3 4 5\") == \"1\"\nassert solution(\"2 3 3 4 5\") == \"0\"\nassert solution(\"2 3 3 4 5 5\") == \"1\"\nassert solution(\"4 2 3 1 4 1 4 2 3\") == \"0\"\nassert solution(\"4 2 3 1 4 1 4 2 3 1\") == \"2\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3 1\\n1 5 1\\n\") == \"1 2 3 0 3\"\nassert solution(\"4 7 2\\n1 10 3\\n8 9 1\\n\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"2 5 1\\n5 8 1\\n\") == \"-1\"\nassert solution(\"2 5 1\\n5 8 1\\n3 5 1\\n\") == \"2 2 2 1 1 0 3\"\nassert solution(\"4 7 2\\n1 10 3\\n8 9 1\\n2 5 1\\n\") == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 1\") == \"2 2 2 1 1 0\"\nassert solution(\"7 5 1\") == \"0 1 0 1 2 0\"\nassert solution(\"10 3 2\") == \"2 2 2 1 1 0 4 3 4 4\"\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"1 1 1 0 1 1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"1 1 2 0 1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1\\n1 5 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == output()\n\n\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"1 0 1 0\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"120 51840\") == 7\nassert solution(\"42 42\") == 0\nassert solution(\"48 72\") == -1\nassert solution(\"120 51840\") == 7\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n\"\"\""
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('120 51840') == 7\nassert solution('42 42') == 0\nassert solution('48 72') == -1\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\nprint('The code ran Correctly')\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n\n\"\"\""
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('catcat') == 'catcat'\nassert solution('cat') == 'cat'\nassert solution('aaaa') == 'aaaa'\nassert solution('aaaaa') == 'aaaa'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"catcat\") == \"catcat\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"ababababa\"\n\nassert solution(\"cat\") == \"catcat\"\n\"\"\""
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aba') == 'ababababa'\nassert solution('cat') == 'catcat'\nassert solution('tattarrattat') == 'tattarrattat'"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') == 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\nassert solution('abacaba') == 'abacabacaba'\nassert solution('abacabaabacaba') == 'abacabacabaabacabacaba'\nassert solution('abcde') == 'abcdeabcde'\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\", 2) == \"ababababa\"\nassert solution(\"cat\", 2) == \"catcat\"\n\"\"\""
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"abababa\"\nassert solution(\"cat\") == \"catcat\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba\") == \"ababababa\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aba\") == \"abababa\"\n\"\"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_data) == expected_result\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3 5 2\") == \"2 1 4\"\nassert solution(\"2 1 2 4 3\") == \"0\"\nassert solution(\"1 1 1 1 1\") == \"0\"\nassert solution(\"2 1 2 4 3\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 5 1 2 2\\n\") == \"3\\n4 1 5\\n\"\nassert solution(\"4\\n8 3 5 2\\n\") == \"2\\n1 4\\n\"\nassert solution(\"5\\n2 1 2 4 3\\n\") == \"0\\n\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = [int(x) for x in sys.stdin.readline().split()]\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2 1\") == \"0\"\nassert solution(\"5 1 2 3 4\") == \"3\"\nassert solution(\"4 1 1 4 4\") == \"2\"\nassert solution(\"2 1 1 2 1\") == \"1\"\nassert solution(\"5 2 3 4 1\") == \"4\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 2 4 3\") == \"0\"\nassert solution(\"5\\n2 1 2 2\") == \"3\\n1 4\"\nassert solution(\"4\\n8 3 5 2\") == \"2\\n1 4\"\n\n\"\"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n2 5 1 2 2''') == '3\nassert solution('''4\n8 3 5 2''') == '2\nassert solution('''5\n2 1 2 4 3''') == '0''') == '''2\n1 4 \n'''\n\n'''\n5\n2 5 1 2 2\n\n8 3 5 2\n\n5\n2 1 2 4 3\n'''"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 4 4 4 4\") == \"2\"\nassert solution(\"4 3 1 2 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5 1 2 2\\n') == 3\nassert solution('8 3 5 2\\n') == 2\nassert solution('5 2 1 2 4 3\\n') == 0\n\n\n\"\"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 5 1 2 2') == '3'\nassert solution('4\\n8 3 5 2') == '2'\nassert solution('5\\n2 1 2 4 3') == '0'"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 1 2 2\") == \"3 1 4\"\nassert solution(\"4 3 5 2\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 2 4 3') == '0'\nassert solution('8 3 5 2') == '2'\nassert solution('8 3 5 2 3 5 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\", \"asdf\") == \"4\"\nassert solution(\"5 6\", \"aaaaa\") == \"15\"\nassert solution(\"5 7\", \"aaaaa\") == \"-1\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('aaa') == 'aaa'\nassert solution('aaaa') == 'aaaa'\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aaaaa\") == 233\nassert solution(\"ajihiushda\") == 233\n\n'''\nimport sys\n\nsys.setrecursionlimit(100000)\n\nn, k = [int(i) for i in sys.stdin.readline().strip().split(' ')]\ns = sys.stdin.readline().strip()"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\nasdf\") == 4\nassert solution(\"5 6\\naaaaa\") == 15\nassert solution(\"5 7\\naaaaa\") == -1\nassert solution(\"10 100\\najihiushda\") == 233"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abaca') == '4'\nassert solution('asdf') == '0'\nassert solution('aaaaa') == '15'\nassert solution('ajihiushda') == '233'"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aaaaa') == 15\nassert solution('ajihiushda') == 233\n\"\"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ajihiushda\") == 233\n\"\"\"\n\nimport sys\nimport re\n\nn, k = [int(x) for x in input().split()]\ns = sys.stdin.read().splitlines()[0]\n\nd = {}\n\nfor c in s:\n    d[c] = d.get(c, 0) + 1\n\nmin_cost = float('inf')\nfor i in range(1, len(s) + 1):\n    for j in range(i + 1, len(s) + 1):\n        sub = s[i:j]\n        sub_d = d.copy()\n        for c in sub:\n            sub_d[c] -= 1\n            if sub_d[c] == 0:\n                sub_d.pop(c)\n\n        if len(sub_d) == 0:\n            min_cost = min(min_cost, len(sub) * (j - i))\n        elif len(sub_d) <= k:\n            min_cost = min(min_cost, len(sub) * (j - i) + len(sub_d) * (k - len(sub_d)))\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n asdf\") == \"4\"\nassert solution(\"5 6\\n aaaaa\") == \"15\"\nassert solution(\"5 7\\n aaaaa\") == \"-1\"\nassert solution(\"10 100\\n ajihiushda\") == \"233\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('asdf') == '4'\nassert solution('aaaaa') == '15'\nassert solution('ajihiushda') == '233'\nassert solution('aaaaa') == '15'\nassert solution('aaaaaa') == '15'\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\nasdf') == 4\n\"\"\"\n\n\"\"\"\nEXPLANATION:\n\nGiven the string, and the length of the set, you want to find the minimum total cost of getting the set of that length. You can take any subsequence of the string and add it to the set S.\n\nThere are two things that you need to consider:\n\nthe cost of adding each subsequence to the set is $n-|t|$ (i.e. the price of the removed characters),\neach of the subsequences can be added only once to the set.\n\nIf you don't understand it, try to write down all the moves in the following way:\n\nLet's say we want to add \"a\", so we make an addition with cost $0$.\nNow we have a set $S = {\"a\"}$.\n\nNow we want to add \"a\" again, but this time we have to remove it.\nSo we make a deletion with cost $0$.\nNow we have a set $S = {\"a\"}$.\n\nNow we want to add \"d\" to the set, but again we have to remove it.\nSo we make a deletion with cost $1$.\nNow we have a set $S = {\"a\", \"d\"}$.\n\nNow we want to add \"a\" again, but this time we have to remove it.\nSo we make a deletion with cost $1$.\nNow we have a set $S = {\"ad\"}$.\n\nNow we want to add \"i\" to the set, but again we have to remove it.\nSo we make a deletion with cost $1$.\nNow we have a set $S = {\"ad\"}$.\n\nNow we want to add \"h\" to the set, but again we have to remove it.\nSo we make a deletion with cost $1$.\nNow we have a set $S = {\"adh\"}$.\n\nNow we want to add \"i\" again, but this time we have to remove it.\nSo we make a deletion with cost $1$.\nNow we have a set $S = {\"adh\"}$.\n\nNow we want to add \"u\" to the set, but again we have to remove it.\nSo we make a deletion with cost $1$.\nNow we have a set $S = {\"adhu\"}$.\n\nNow we want to add \"h\" again, but this time we have to remove it.\nSo we make a deletion with cost $1$.\nNow we have a set $S = {\"adhuh\"}$.\n\nNow we want to add \"a\" again, but this time we have to remove it.\nSo we make a deletion with cost $1$.\nNow we have a set $S = {\"adhuha\"}$.\n\nNow we want to add \"s\" to the set, but again we have to remove it.\nSo we make a deletion with cost $1$.\nNow we have a set $S = {\"adhuhas\"}$.\n\nFinally, we want to add \"d\" again, but this time we have to remove it.\nSo we make a deletion with cost $1$.\nNow we have a set $S = {\"adhuhasd\"}$.\n\nSo we have created a set of size 6. The cost of this set is $15$.\n\nThe minimum total cost of getting the set of size 6 is $15$.\n\"\"\""
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\n\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n2 3\\n3 4\"\n\nassert solution(\"4 4 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'YES\\n2 1\\n2 3\\n3 4'\n\nassert solution('''4 5 3\n1 2\n1 4\n2 3\n3 4''') == 'YES\\n1 2\\n1 4\\n4 1\\n'''\n\nassert solution('''4 4 3\n1 2\n1 4\n2 3\n3 4''') == 'NO'\n\nassert solution('''4 5 2\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'NO'\n\nassert solution('''3 4 3\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'YES\\n1 2\\n1 3\\n1 4\\n'''"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution('4 5 3\\n1 2\\n1 4\\n2 3\\n3 4') == 'YES\\n1 2\\n1 4\\n4 1'\nassert solution('4 4 3\\n1 2\\n1 4\\n2 3\\n3 4') == 'NO'\n\n\"\"\"\n\n\nimport sys\nimport itertools\nfrom collections import defaultdict\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n2 3\\n3 4\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"4 5 1\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"1 4\\n\"\n    \"2 3\\n\"\n    \"3 4\\n\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\n    \"4 5 1\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"1 4\\n\"\n    \"2 3\\n\"\n    \"3 4\\n\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\n    \"4 5 3\\n\"\n    \"1 2\\n\"\n    \"1 4\\n\"\n    \"2 3\\n\"\n    \"3 4\\n\") == \"YES\\n1 2\\n1 4\\n4 1\\n\"\nassert solution(\n    \"4 4 3\\n\"\n    \"1 2\\n\"\n    \"1 4\\n\"\n    \"2 3\\n\"\n    \"3 4\\n\") == \"NO\"\n\n\n-----"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == \"NO\"\nassert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n3 1\\n4 3\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n3 1\\n4 3\"\n\n'''\n\nfrom typing import List\nimport collections\n\nclass DisjointSetUnion:\n    def __init__(self, n):\n        self.n = n\n        self.father = [i for i in range(n)]\n        self.count = n\n        self.size = [1] * n\n        self.rank = [1] * n\n\n    def union(self, a, b):\n        root_a = self.find(a)\n        root_b = self.find(b)\n        if root_a == root_b:\n            return\n        if self.rank[root_a] < self.rank[root_b]:\n            self.father[root_a] = root_b\n            self.size[root_b] += self.size[root_a]\n        else:\n            self.father[root_b] = root_a\n            self.size[root_a] += self.size[root_b]\n            if self.rank[root_a] == self.rank[root_b]:\n                self.rank[root_a] += 1\n        self.count -= 1\n\n    def find(self, a):\n        while a!= self.father[a]:\n            self.father[a] = self.father[self.father[a]]\n            a = self.father[a]\n        return a\n\n\nclass Solution:\n    def solve(self, n: int, m: int, D: int) -> str:\n        # count = 0\n        # for i in range(m):\n        #     if self.get_degree(i) == D:\n        #         count += 1\n        # if count!= 1:\n        #     return \"NO\"\n        # for i in range(m):\n        #     if self.get_degree(i) == D:\n        #         self.add_edge(i)\n        #         break\n        # if self.is_cycle():\n        #     return \"NO\"\n        # return \"YES\"\n\n        # count = 0\n        # for i in range(m):\n        #     if self.get_degree(i) == D:\n        #         count += 1\n        # if count!= 1:\n        #     return \"NO\"\n        # for i in range(m):\n        #     if self.get_degree(i) == D:\n        #         self.add_edge(i)\n        #         break\n        # return \"YES\"\n\n        self.n = n\n        self.m = m\n        self.D = D\n        disjoint_set = DisjointSetUnion(self.n)\n        for i in range(m):\n            if self.get_degree(i) == D:\n                disjoint_set.union(i, self.find_set(i))\n        return \"YES\" if disjoint_set.count == 1 else \"NO\"\n\n    def get_degree(self, i):\n        return self.edges[i]\n\n    def add_edge(self, i):\n        self.edges[i] += 1\n\n    def find_set(self, i):\n        while self.edges[i]!= i:\n            i = self.edges[i]\n        return i\n\n    def is_cycle(self):\n        visited = set()\n        for i in range(self.m):\n            if i in visited:\n                continue\n            if not self.dfs(i, visited):\n                return True\n        return False\n\n    def dfs(self, i, visited):\n        visited.add(i)\n        for j in range(self.n):\n            if self.edges[i] == j:\n                continue\n            if j in visited:\n                return True\n            if not self.dfs(j, visited):\n                return True\n        return False\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4\n''') == 'YES\\n2 1\\n2 3\\n3 4'\n\nassert solution('''\n4 5 3\n1 2\n1 4\n2 3\n3 4\n''') == 'YES\\n1 2\\n1 3\\n4 1\\n4 3'\n\nassert solution('''\n4 4 3\n1 2\n1 4\n2 3\n3 4\n''') == 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n2 1\\n2 3\\n3 4\\n\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n1 2\\n1 4\\n4 1\\n\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n1 2\\n1 3\\n1 4\\n\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\") == \"NO\\n\"\n\n\"\"\"\n\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\n\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n\"\n\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"NO\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30 11:00\"\nassert solution(\"11:10 11:12\") == \"11:11 11:12\"\nassert solution(\"01:02 03:02\") == \"02:02 03:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:11\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\nassert solution(\"03:02\") == \"03:02\"\n\"\"\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10:00\\n11:00\") == \"10:30\"\nassert solution(\"11:10\\n11:12\") == \"11:11\"\nassert solution(\"01:02\\n03:02\") == \"02:02\"\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10:00\\n11:00') == '10:30'\nassert solution('11:10\\n11:12') == '11:11'\nassert solution('01:02\\n03:02') == '02:02'\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\nprint(\"Passed\")\n\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"11:12\") == \"11:13\"\nassert solution(\"01:02\") == \"02:02\"\n\"\"\"\n\na = input()\nb = input()\n\naa = a.split(\":\")\nbb = b.split(\":\")\n\nhour = int(aa[0]) + int(bb[0])\nminute = int(aa[1]) + int(bb[1])\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\nassert solution(\"03:02\") == \"03:02\"\n\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1:2') == '01:02'\nassert solution('11:12') == '11:11'\nassert solution('0:0') == '00:00'\nassert solution('21:12') == '21:12'\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\nSolution:\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:00') == '11:00'\nassert solution('11:10') == '11:11'\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == '5'\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 1\nassert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\nprint('Test pass.')"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == 2\nassert solution(\"27\") == 5\nassert solution(\"42\") == 6\nprint(\"Test finished.\")\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\nassert solution('1') == 1\n\"\"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 2\nassert solution(\"27\") == 5\nassert solution(\"42\") == 6\n\"\"\"\n\na = int(input())"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('27') == '5'\nassert solution('42') == '6'\nprint('Success')\n\"\"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 2\nassert solution(\"27\") == 5\nassert solution(\"42\") == 6\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\nassert solution('67') == 7\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3\\n2 6\\n0 4\\n3 3') == '1'\nassert solution('5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4') == '2'\nassert solution('3\\n4 5\\n1 2\\n9 20') == '0'\nassert solution('2\\n3 10\\n1 5') == '7'\n\n\n\n-----Test 1-----\nInput\n4\n1 3\n2 6\n0 4\n3 3\n\nOutput\n1\n\n-----Test 2-----\nInput\n5\n2 6\n1 3\n0 4\n1 20\n0 4\n\nOutput\n2\n\n-----Test 3-----\nInput\n3\n4 5\n1 2\n9 20\n\nOutput\n0\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\", \"Actual: {0}\".format(solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\"))\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\", \"Actual: {0}\".format(solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\"))\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\", \"Actual: {0}\".format(solution(\"3\\n4 5\\n1 2\\n9 20\"))\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\\n\", \"Actual: {0}\".format(solution(\"2\\n3 10\\n1 5\\n\"))\nassert solution(\"2\\n3 10\\n1 5\") == \"0\\n\", \"Actual: {0}\".format(solution(\"2\\n3 10\\n1 5\"))\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\\n\") == \"2\"\nassert solution(\"5\\n1 3\\n0 4\\n1 20\\n0 4\\n\") == \"1\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\\n\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\"\n\n-----\n\nCorner case:\n\nstdin:\n4\n1 3\n2 6\n0 4\n3 3\n\nOutput:\n1\n\nstdin:\n5\n2 6\n1 3\n0 4\n1 20\n0 4\n\nOutput:\n2\n\nstdin:\n3\n4 5\n1 2\n9 20\n\nOutput:\n0\n\nstdin:\n2\n3 10\n1 5\n\nOutput:\n7\n\n-----\n\nCorner case:\n\nstdin:\n1\n2 3\n\nOutput:\n0\n\nstdin:\n1\n2 3\n\nOutput:\n0\n\nstdin:\n2\n1 2\n3 3\n\nOutput:\n0\n\nstdin:\n1\n1 2\n3 3\n\nOutput:\n0\n\nstdin:\n2\n1 2\n3 3\n\nOutput:\n0\n\nstdin:\n2\n1 2\n3 3\n\nOutput:\n0\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n4\n1 3\n2 6\n0 4\n3 3\n\"\"\") == \"1\"\n\nassert solution(\n\"\"\"\n5\n2 6\n1 3\n0 4\n1 20\n0 4\n\"\"\") == \"2\"\n\nassert solution(\n\"\"\"\n3\n4 5\n1 2\n9 20\n\"\"\") == \"0\"\n\nassert solution(\n\"\"\"\n2\n3 10\n1 5\n\"\"\") == \"7\"\n\nassert solution(\n\"\"\"\n3\n4 5\n1 2\n9 20\n\"\"\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 10\") == \"7\"\nassert solution(\"3 10\") == \"0\"\nassert solution(\"4 10\") == \"7\"\nassert solution(\"5 10\") == \"0\"\n\nassert solution(\"3 4\") == \"4\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\\n\"\n\n------\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_data) == expected_result\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 3\\n\") == 'YES'\nassert solution(\"2 1 1 2 5\\n\") == 'YES'\nassert solution(\"1 1 1 1 1\\n\") == 'NO'\nassert solution(\"2 10 1 2 5\\n\") == 'NO'\nassert solution(\"3 2 1 1 2 5\\n\") == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 1 1 2 5') == 'YES'\nassert solution('3 5 3') == 'NO'\nassert solution('2 10') == 'YES'"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 1 2 5') == 'YES'\nassert solution('3 1 1 2 5') == 'NO'\nassert solution('3 2 1 2 5') == 'YES'\nassert solution('3 2 1 2 5') == 'YES'\n\nassert solution('3 2 1 2 5') == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"3 5 3\") == \"NO\"\nassert solution(\"2 10 10\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(5) == \"YES\"\nassert solution(3) == \"NO\"\nassert solution(2) == \"YES\"\nassert solution(10) == \"YES\"\nassert solution(5) == \"YES\"\n\"\"\"\n\nimport sys\n\nsys.stdin = open('input.txt')\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\n------INPUT-----\n5\n2 1 1 2 5\n\n------OUTPUT-----\nYES\n\n------INPUT-----\n3\n4 5 3\n\n------OUTPUT-----\nNO\n\n------INPUT-----\n2\n10 10\n\n------OUTPUT-----\nYES\n\n\"\"\""
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == 'YES'\nassert solution(\"3\\n4 5 3\") == 'NO'\nassert solution(\"2\\n10 10\") == 'YES'\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == -1\nassert solution('aaaaa') == 15\nassert solution('ajihiushda') == 233\n\"\"\""
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == 233\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\najihiushda\") == \"233\"\nassert solution(\"10 100\\najihiushda\") == \"233\"\nassert solution(\"5 7\\najihiushda\") == \"4\"\n\n\nimport heapq\nimport sys"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == 233\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a\") == 1\nassert solution(\"aa\") == 2\nassert solution(\"aaa\") == 3\nassert solution(\"aaaa\") == 5\nassert solution(\"aabb\") == 4\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"aaaaa\") == \"15\"\nassert solution(\"ajihiushda\") == \"233\"\n\"\"\"\n\n\"\"\"\n\u0421\u0442\u0440\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a\n\n\u0412\u0430\u0448\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 s \u0438 t, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0438\u0437 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0445 \u0431\u0443\u043a\u0432.\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2013 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 t \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 s.\n\u041f\u0440\u0438\u043c\u0435\u0440:\ns = \"abababa\"\nt = \"aba\"\n\u0412\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a\u0438 t \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 s:\nabababa\nabababa\nabababa\n\nSample Input 1:\n\nabababa\naba\nSample Output 1:\n\n3\nSample Input 2:\n\nabababa\nabc\nSample Output 2:\n\n0\nSample Input 3:\n\nabc\nabc\nSample Output 3:\n\n1\nSample Input 4:\n\naaaaa\na\nSample Output 4:\n\n5\n\"\"\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n asdf') == '4'\nassert solution('5 6\\n aaaa') == '15'\nassert solution('5 7\\n aaaa') == '-1'\nassert solution('10 100\\n ajihiushda') == '233'\n\"\"\""
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"asdf\") == \"4\"\n\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\ns = input()\n\nd = {}\nfor i in range(n):\n    if s[i] in d:\n        d[s[i]] += 1\n    else:\n        d[s[i]] = 1\n\ncost = 0\nfor i in d:\n    cost += d[i] * (n - d[i])"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abaca') == '4'\nassert solution('aaaaa') == '15'\nassert solution('aaaa') == '-1'\nassert solution('ab') == '2'\nassert solution('a') == '1'\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n\n\"\"\"\n\n\"\"\"\nThe way to solve this problem is to maintain a cache of the current maximum\nnumber of days that the cat can eat, and to go through all possible days of\nthe week and to check that each day has enough food for the cat and update\nthe cache.\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        a, b, c = [int(i) for i in stdin.split(' ')]\n        dp = [0] * 7\n        dp[0] = a\n        dp[1] = b\n        dp[2] = c\n        for day in range(3, 7):\n            dp[day] = min(dp[day - 3], dp[day - 2], dp[day - 1]) + 1\n        return''.join([str(i) for i in dp])\n\n\n\"\"\"\ndp[day] = min(dp[day - 3], dp[day - 2], dp[day - 1]) + 1\n\ndp[0] = a + (b + c) * (a + b + c) / 6\ndp[1] = b + (a + c) * (a + b + c) / 6\ndp[2] = c + (a + b) * (a + b + c) / 6\n\n\"\"\""
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1\") == '4'\nassert solution(\"3 2 2\") == '7'\nassert solution(\"1 100 1\") == '3'\nassert solution(\"30 20 10\") == '39'\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1\") == \"4\"\n\nassert solution(\"3 2 2\") == \"7\"\n\nassert solution(\"1 100 1\") == \"3\"\n\nassert solution(\"30 20 10\") == \"39\"\n\n\"\"\"\n\n\"\"\"\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044f\n\n\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043d\u0430\u0447\u0430\u0442\u044c \u0440\u0435\u0448\u0430\u0442\u044c \u043d\u0430\u0434\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u043d\u044f\u0442\u044c \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0440\u0435\u0448\u0438\u0442\u044c \u0431\u0435\u0437 \u0443\u0441\u043b\u043e\u0432\u0438\u0439, \u0438 \u043a\u0430\u043a\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u0439 \u0438 \u043a\u0430\u043a \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u0435\u0433\u043e \u0432 \u0440\u0435\u0448\u0435\u043d\u0438\u0438:\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u043f\u0440\u0430\u0432\u043e\u0433\u043e \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u0443\u0433\u043b\u0430 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043b\u0438 \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043f\u043e\u043b\u044f, \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0446\u0438\u043a\u043b for \u0438 \u0432\u0441\u0435 \u0438\u0437 \u043f\u044f\u0442\u0438 \u043f\u043e\u043b\u0435\u0439. \u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u0432\u0441\u0435 \u043f\u043e\u043b\u044f \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u044b, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c True. \u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043f\u043e\u043b\u044f \u043d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u044b, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c False.\n\n\n-----Input-----\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u043f\u0440\u0430\u0432\u043e\u0433\u043e \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u0443\u0433\u043b\u0430 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0435\u0433\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043e\u0441\u0442\u044c.\n\n\n-----Output-----\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c True \u0438\u043b\u0438 False \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u043e\u0433\u043e, \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043b\u0438 \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043f\u043e\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430, \u0438\u043b\u0438 \u043d\u0435\u0442.\n\n\n-----Examples-----\nInput\n2\n\nOutput\nFalse\n\nInput\n2\n\nOutput\nTrue\n\nInput\n3\n\nOutput\nFalse\n\nInput\n4\n\nOutput\nFalse\n\nInput\n5\n\nOutput\nFalse\n\nInput\n6\n\nOutput\nFalse\n\nInput\n7\n\nOutput\nTrue\n\"\"\""
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n\n\"\"\""
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 1\") == '7'\nassert solution(\"30 20 10\") == '39'"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2 1') == '4'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n\"\"\"\n\na, b, c = map(int, input().split())\n\nfish_food = a\nrabbit_stew = b\nchicken_stakes = c\n\ndays = 1\n\nwhile fish_food + rabbit_stew + chicken_stakes > 0:\n    if days % 7 == 0 or days % 7 == 1 or days % 7 == 2:\n        fish_food -= 1\n        fish_food = max(fish_food, 0)\n    elif days % 7 == 3 or days % 7 == 4 or days % 7 == 5:\n        rabbit_stew -= 1\n        rabbit_stew = max(rabbit_stew, 0)\n    else:\n        chicken_stakes -= 1\n        chicken_stakes = max(chicken_stakes, 0)\n    days += 1\n\nprint(days - 1)\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(a) == b\nassert solution(a) == b\nassert solution(a) == b\n\n-----Test-----\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(example_input) == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"NO\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"1 1\\n1 1\") == \"YES\"\nassert solution(\"1 1\\n1 1\\n1 1\") == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"1 100\") == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 2\\n3 4\") == \"NO\"\nassert solution(\"4 5\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n7 6\\n9 8\\n7 10\\n9 10\") == \"NO\"\nassert solution(\"4 5\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n8 6\\n9 10\\n7 8\\n9 10\") == \"NO\"\nassert solution(\"4 5\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n8 6\\n10 9\\n7 8\\n9 10\") == \"NO\"\nassert solution(\"4 5\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n6 8\\n7 10\\n9 8\\n10 5\") == \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3') == 'NO'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"YES\"\nassert solution(\"4 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\") == \"NO\"\nassert solution(\"4 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\") == \"YES\"\nassert solution(\"4 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\") == \"NO\""
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2\\n5 6\") == \"YES\"\nassert solution(\"3\\n1 2\\n5 7\") == \"NO\"\nassert solution(\"3\\n5 7\\n1 2\\n5 6\") == \"YES\"\nassert solution(\"3\\n5 7\\n5 6\\n1 2\\n1 2\") == \"NO\"\nassert solution(\"3\\n5 7\\n5 6\\n1 1\\n1 1\") == \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"NO\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"1 1\") == \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n7\\n8\\n9\\n\\n4\\n9\\n8\\n\\n5\\n7\\n9\\n8\\n\") == \"YES\"\nassert solution(\"5\\n7\\n8\\n9\\n\\n4\\n9\\n8\\n\\n5\\n7\\n9\\n8\\n\") == \"NO\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == '0'\nassert solution(\"5\") == '1'\nassert solution(\"6\") == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n\n'''\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0'\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == '0'\nassert solution(\"5\") == '1'\nassert solution(\"6\") == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n\") == '0'\nassert solution(\"5\\n\") == '1'\nassert solution(\"6\\n\") == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n\") == \"0\"\nassert solution(\"5\\n\") == \"1\"\nassert solution(\"6\\n\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(((()))())\") == 4\nassert solution(\"((()))()\") == 4\nassert solution(\"(()(()))()\") == 1\nassert solution(\"((((((((()))))))((())))\") == 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()()))()\") == 4\nassert solution(\"(()))()\") == 4\nassert solution(\"(((()))()\") == 1\nassert solution(\"(((()))())\") == 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"(((()))())\") == 4\nassert solution(\"(()(()))()\") == 2\nassert solution(\"(()(()))()\") == 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()))()\") == 4\nassert solution(\"((((()))()()())())()\") == 0\n\"\"\""
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"()))()\") == \"5\"\nassert solution(\"(()))()\") == \"4\"\nassert solution(\"(((()))())\") == \"0\"\nassert solution(\"()((()))()\") == \"4\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"(((((()))))()())((()(()(()((()(())))(((((((((((((((((())))))))))))))))((((((()(())()(()()(()()(())(()()(()((()()(()(((((()))(())((())(((((()()()(((((((((((((((((((()))))))(((((()((()((())(((((()((((()))))()()((()(()(()(()((()(())())(((()(((((((()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()))))))))))))))))))(()(()()()((((()(()()(()((((()()))))((((()(()(()((()(()(()(()(()(()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"()((((()())()))()()(()))\") == 5\nassert solution(\"((()()((((()(())())))((())))(())()()()((()((())(((())))(()))())(())))((()((()(()()(((((()(()(()((((()(()(((()(()(()()()(()()(((()(()()(((()(()(()((((()(()(((((()(()()((()(()(()((()(()(((((((((()(()(((()(())()(()(((()(((((()(()(()(((()(((((((()(()(((((()(()(((()(())()((()(()(((((((()(((((()((()((()(()(((()(((((((((((((((((((((((()(((((()(())()(((()(()(((((((()(((((((((((((((((((((((((((((((()(()((()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()))()\") == 4\nassert solution(\"((()))\") == 4\nassert solution(\"(()(()))\") == 0\nassert solution(\"(((())))\") == 4\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('()))()') == 5\nassert solution('(((()))())') == 4\nassert solution('(()(()))()') == 4\nassert solution('(()((()))())') == 4\nassert solution('(((((((())))))())())') == 4\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"()))()\") == \"5\"\nassert solution(\"(((())))\" ) == \"4\"\nassert solution(\"((())\" ) == \"4\"\nassert solution(\"((((())))\" ) == \"0\"\nassert solution(\"((((())))\" ) == \"0\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5071\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n\nimport itertools\nimport math\nfrom typing import List"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(5071) == 4\nassert solution(705) == 1\nassert solution(1241367) == -1\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"705\") == \"1\"\nassert solution(\"5071\") == \"4\"\nassert solution(\"1241367\") == \"-1\"\n\n-----\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('abcd') == '1 1 2 1 2 1'\nassert solution('abcde') == '1 2 1 2 1 2 1'\nassert solution('abcdef') == '1 1 2 1 2 1 2 1'\nassert solution('abcdefg') == '1 2 1 2 1 2 1 2 1'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcde\") == \"1 1 1 1 1\"\nassert solution(\"abcd\") == \"1 1 1 1 1\"\nassert solution(\"abc\") == \"1 1 1 1 1\"\nassert solution(\"ab\") == \"1 1 1 1 1\"\nassert solution(\"a\") == \"1 1 1 1 1\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacbecfd\") == \"2\"\nassert solution(\"aaabbcbb\") == \"2 1 1 2 1 2 1 2 1\"\nassert solution(\"abcdedc\") == \"3 1 1 1 1 2 3\"\nassert solution(\"abcde\") == \"1 1 1 1 1\"\nassert solution(\"aabbccd\") == \"2 1 1 1 2 1 1 2\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacbecfd\") == 2\nassert solution(\"aaabbcbb\") == 2\nassert solution(\"abcdedc\") == 3\nassert solution(\"abcde\") == 1\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacbecfd\") == 2\nassert solution(\"aaabbcbb\") == 2\nassert solution(\"abcdedc\") == 3\nassert solution(\"abcde\") == 1\nassert solution(\"bcbde\") == 2\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcd\") == \"1 2 3 1 2 1\"\nassert solution(\"bacd\") == \"1 1 1 2 3 1 2 1\"\nassert solution(\"abccd\") == \"1 1 1 2 3 1 2 1\"\n\n\"\"\"\n\n\n\n\"\"\"\n\nIdea:\n- For each letter, if it is already assigned to one color, assign it to a new color\n- Create a list of colors, new_colors that has one color per letter\n- Go through the letters, and assign them to the colors in new_colors\n- Keep track of the colors of the letters, and go through new_colors to find the minimum\n- Create a color_dict to record the color of each letter\n- Iterate over the letters, and for each letter, if it is already colored with a color, move to the next letter,\n  if it is not colored, then check if the letter should be colored with the smallest color in color_dict\n- go through the new_colors and assign a color to every letter\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacbecfd\") == 2, \"WA\"\nassert solution(\"aaabbcbb\") == 2, \"WA\"\nassert solution(\"abcde\") == 1, \"WA\"\n\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == 26, \"WA\""
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcd') == '1 1 1 1 1'\nassert solution('abab') == '1 1 1 1 2 2'\nassert solution('abbc') == '1 1 1 2 2 2 2'\nassert solution('abcde') == '1 1 1 1 1 1 1 1'\nassert solution('abcdef') == '1 1 1 1 1 1 1 1 1'\n\n'''\n\nn = int(input())\ns = input()\ns = list(s)\ncolor = [0] * n\n\nfor i in range(n):\n    color[i] = 1\n\nfor i in range(n):\n    for j in range(i):\n        if s[i] < s[j] and color[i] <= color[j]:\n            color[i] = color[j] + 1\n\nres = color[0]\nfor i in range(1, n):\n    res = max(res, color[i])\n\nprint(res)\n\nfor i in range(n):\n    if color[i] == res:\n        print(i + 1, end=\" \")"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abacaba') == 'YES', 'WA'\nassert solution('qwerty') == 'YES', 'WA'\nassert solution('aba') == 'YES', 'WA'\nassert solution('qwertyqwertyqwerty') == 'NO', 'WA'\nassert solution('qwerty') == 'YES', 'WA'\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == 'YES'\nassert solution(\"abacaba\") == 'YES'\nassert solution(\"ab\") == 'NO'\nassert solution(\"qwerty\") == 'YES'\nassert solution(\"qwerty\") == 'YES'\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\nassert solution(\"a\\nabacaba\\nba\\naba\\nabab\") == \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abba') == 'YES'\nassert solution('abcd') == 'NO'\nassert solution('abca') == 'YES'\nassert solution('abc') == 'NO'\nassert solution('abac') == 'YES'\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"a\") == \"YES\"\nassert solution(\"aab\") == \"YES\"\nassert solution(\"aa\") == \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"aba\") == \"YES\"\nassert solution(\"for\") == \"NO\"\nassert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwertyqwertyqwerty\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwertyqwerty\") == \"YES\"\nassert solution(\"qwertyqwertyqwerty\") == \"NO\"\nassert solution(\"aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a) == \"YES\"\nassert solution(b) == \"NO\"\nassert solution(c) == \"NO\"\nassert solution(d) == \"YES\"\nassert solution(e) == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"ab\") == \"NO\"\nassert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwertyqwertyqwertyqwerty\") == \"YES\"\nassert solution(\"qwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyqwertyq"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == 5\n\"\"\"\n\n\"\"\"\nn, k = list(map(int, input().split()))\narr = list(map(int, input().split()))\n\nl, r = 0, n - 1\nans = 0\nwhile l < r:\n    if arr[l] > k:\n        ans += 1\n        l += 1\n    elif arr[r] > k:\n        ans += 1\n        r -= 1\n    elif arr[l] < k and arr[r] < k:\n        break\n    else:\n        l += 1\n        r -= 1\n        ans += 1\nprint(ans)\n\"\"\"\n\n\"\"\"\nn, k = list(map(int, input().split()))\narr = list(map(int, input().split()))\n\nl, r = 0, n - 1\nans = 0\nwhile l < r:\n    if arr[l] > k:\n        l += 1\n    elif arr[r] > k:\n        r -= 1\n    elif arr[l] < k and arr[r] < k:\n        break\n    else:\n        l += 1\n        r -= 1\n        ans += 1\nprint(ans)\n\"\"\"\n\nn, k = list(map(int, input().split()))\narr = list(map(int, input().split()))\n\nl, r = 0, n - 1\nans = 0\nwhile l < r:\n    if arr[l] > k:\n        l += 1\n    elif arr[r] > k:\n        r -= 1\n    elif arr[l] < k and arr[r] < k:\n        break\n    else:\n        ans += 1\n        r -= 1\n        l += 1\nprint(ans)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n\n-----End-----\n\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\n\ncnt = 0\nwhile len(a) > 1:\n    a = a[1:] if a[0] <= k else a[:-1]\n    cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n\n\n\"\"\""
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 3 1 5 1 6 4') == 5\n\"\"\"\n\nfrom typing import List\nimport collections\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\n\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2 3 1 2 1 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n3 1 2 1 3') == '0'\nassert solution('5 100\\n12 34 55 43 21') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 100\\n12 34 55 43 21') == 5\n\"\"\""
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n\nprint('The code ran Correctly')"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\") == '12'\nassert solution(\"3 9\") == '14'\nassert solution(\"9 3\") == '14'\nassert solution(\"3 6\") == '12'\nassert solution(\"506 2708\") == '3218'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 9') == '14'\nassert solution('4 4') == '12'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n\nprint('PASSED')\n\n----\n\nMy solution:"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n\n\"\"\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4') == 12\nassert solution('3 9') == 14\nassert solution('9 3') == 14\nassert solution('3 6') == 12\nassert solution('506 2708') == 3218\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\"\nassert solution(\"abcde\") == \"NO\\n00000\"\nassert solution(\"aba\") == \"YES\\n101010\"\nassert solution(\"abab\") == \"NO\\n11100\"\n\nprint(\"Successfully solved the first problem!\")\n\n\n\"\"\"\n\"\"\"\nimport string\nimport collections\n\nS = input()\n\nprint(string.ascii_lowercase.index(S[0]) * 100 + int(S[1:]))\n\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n\nclass BST:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, value):\n        if self.root is None:\n            self.root = Node(value)\n            return\n\n        current = self.root\n        while True:\n            if value < current.value:\n                if current.left is None:\n                    current.left = Node(value)\n                    return\n                current = current.left\n            else:\n                if current.right is None:\n                    current.right = Node(value)\n                    return\n                current = current.right\n\n    def count(self, node, left, right):\n        if node is None:\n            return 0\n\n        count = 0\n        if left <= node.value <= right:\n            count = 1\n\n        count += self.count(node.left, left, right)\n        count += self.count(node.right, left, right)\n        return count\n\n\nclass Solution:\n    def solve(self, node):\n        counts = []\n        for i in range(10):\n            counts.append(self.count(node, i, i))\n        print(counts)\n        if sum(counts) == 0:\n            return True\n        return False\n\n    def count(self, node, left, right):\n        if node is None:\n            return 0\n\n        count = 0\n        if left <= node.value <= right:\n            count = 1\n\n        count += self.count(node.left, left, right)\n        count += self.count(node.right, left, right)\n        return count\n\n\nbst = BST()\nfor i in \"abacbecfd\":\n    bst.insert(i)\n\nsolution = Solution()\nprint(solution.solve(bst.root))\n\n\"\"\"\nimport string\nimport collections\n\nS = input()\n\nprint(string.ascii_lowercase.index(S[0]) * 100 + int(S[1:]))\n\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n\nclass BST:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, value):\n        if self.root is None:\n            self.root = Node(value)\n            return\n\n        current = self.root\n        while True:\n            if value < current.value:\n                if current.left is None:\n                    current.left = Node(value)\n                    return\n                current = current.left\n            else:\n                if current.right is None:\n                    current.right = Node(value)\n                    return\n                current = current.right\n\n    def count(self, node, left, right):\n        if node is None:\n            return 0\n\n        count = 0\n        if left <= node.value <= right:\n            count = 1\n\n        count += self.count(node.left, left, right)\n        count += self.count(node.right, left, right)\n        return count\n\n\nclass Solution:\n    def solve(self, node):\n        counts = []\n        for i in range(10):\n            counts.append(self.count(node, i, i))\n        print(counts)\n        if sum(counts) == 0:\n            return True\n        return False\n\n    def count(self, node, left, right):\n        if node is None:\n            return 0\n\n        count = 0\n        if left <= node.value <= right:\n            count = 1\n\n        count += self.count(node.left, left, right)\n        count += self.count(node.right, left, right)\n        return count\n\n\nbst = BST()\nfor i in \"abacbecfd\":\n    bst.insert(i)\n\nsolution = Solution()\nprint(solution.solve(bst.root))\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacbecfd\") == \"YES\"\nassert solution(\"abcdedc\") == \"YES\"\nassert solution(\"abcde\") == \"NO\"\nassert solution(\"abcdeeef\") == \"NO\"\nassert solution(\"aabbccdd\") == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abacbecfd') == 'YES\\n001010101'\nassert solution('aaabbcbb') == 'YES\\n01011011'\nassert solution('abcde') == 'YES\\n00000'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcde\") == \"YES\\n00000\"\nprint(solution(\"abacbecfd\"))\nprint(solution(\"aaabbcbb\"))\nprint(solution(\"abcdedc\"))\nprint(solution(\"abcde\"))\n\"\"\"\n\n\"\"\"\nPuzzle Input\n3\naaabbcbb\naba\nab\na\n2\naaabbb\nabb\naba\n\nPuzzle Output\nYES\n0111110\nYES\n110\nNO\n0\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacbecfd\") == \"YES\"\nassert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcde\") == \"YES\"\nassert solution(\"abcd\") == \"NO\"\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abacbecfd') == 'NO'\nassert solution('aaabbcbb') == 'YES'\nassert solution('abcdedc') == 'NO'\nassert solution('abcdef') == 'NO'\nassert solution('abdef') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\", 'Wrong answer'\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\", 'Wrong answer'\nassert solution(\"abcdedc\") == \"NO\", 'Wrong answer'\nassert solution(\"abcde\") == \"YES\\n00000\", 'Wrong answer'\n\nprint('All tests passed.')\n\n-----\nSolution:"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\"\nassert solution(\"abcdedc\") == \"NO\\n\"\nassert solution(\"abcde\") == \"YES\\n00000\"\nassert solution(\"abcd\") == \"YES\\n01010\"\n\"\"\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcd\") == \"0 0 0 0 0\"\nassert solution(\"abc\") == \"0 0 0 0\"\nassert solution(\"abce\") == \"0 0 0 1\"\nassert solution(\"abcde\") == \"0 0 0 0 0\"\nassert solution(\"abcc\") == \"0 0 1 0 0\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"100 200\") == \"-1\"\nassert solution(\"20 30\") == \"25\"\nassert solution(\"20 100\") == \"25\"\nassert solution(\"100 200 1\") == \"25\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2, 2) == 25\n\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2') == '25'\nassert solution('2 3') == '-1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n\") == \"25\"\n\"\"\"\n\na, b = map(int, input().split())\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n3 2\") == \"6\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == '25'\nassert solution(\"1 2\") == '1'\nassert solution(\"6 11\") == '-1'\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3.14) == \"3.14\"\nassert solution(3.1415926) == \"3.14\"\nassert solution(3.14159265) == \"3.14\"\nassert solution(3.141592653) == \"3.14\"\nassert solution(3.1415926535) == \"3.14\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"25\"\n\n\"\"\"\n\na, b = [int(i) for i in stdin.split()]\n\nfor p in range(1, 100):\n    if a * 0.08 >= b:\n        print(p)\n        break\n    elif a * 0.1 >= b:\n        print(p)\n        break\nelse:\n    print(-1)\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == 25\n\"\"\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == '25'\nassert solution('1 1') == '-1'\nassert solution('3 5') == '-1'\nassert solution('2 1') == '-1'\nassert solution('7 10') == '-1'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 6\\n1 2 3 4 5 6 7\") == \"YES\\n1 2 5 6\"\nassert solution(\"3 6\\n1 2 3 4 5 6 7 8\") == \"NO\"\nassert solution(\"7 10\\n1 2 3 4 5 6 7 8 9 10\") == \"YES\\n1 2 3 5 6 7 8 9 10\"\nassert solution(\"2 6\\n1 2 3 4 5 6 7\") == \"NO\"\nassert solution(\"4 6\\n1 2 3 4 5 6 7\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"26 6\") == \"YES\"\nassert solution(\"8 3\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"9 4\") == \"NO\"\n\nprint(solution([str(i) for i in open(0).readlines()][0]))\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6\") == \"YES\"\nassert solution(\"10 4\") == \"NO\"\nassert solution(\"8 3\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"2 2\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\") == \"YES\\n1 2 4 5\"\nassert solution(\"4 5\") == \"NO\"\nassert solution(\"2 2\") == \"NO\"\nassert solution(\"3 3\") == \"YES\\n1 2 3\"\nassert solution(\"10 2\") == \"YES\\n3 9\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 3') == 'NO'\nassert solution('1 1') == 'YES'\nassert solution('4 7') == 'YES'\nassert solution('9 4') == 'NO'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12 34\") == \"YES\"\nassert solution(\"10 6\") == \"NO\"\nassert solution(\"11 10\") == \"NO\"\nassert solution(\"11 11\") == \"NO\"\nassert solution(\"12 30\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3\\n') == 'NO'\nassert solution('1 1\\n') == 'YES'\nassert solution('26 6\\n') == 'YES'\nassert solution('9 4\\n') == 'NO'\nassert solution('10 5\\n') == 'NO'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"26 6\") == \"YES\"\nassert solution(\"8 3\") == \"NO\"\n\"\"\"\n\nfrom collections import deque\n\nn, k = map(int, stdin.readline().strip().split())\ndp = [0] * (k + 1)\ndp[0] = n\nfor i in range(1, k + 1):\n    dp[i] = dp[i - 1] // 2\n    if dp[i] < 1:\n        break\ndp = deque(dp)\ndp.pop()\ndp.popleft()\ndp.appendleft(1)\n\nans = \"YES\"\nfor i in range(1, k):\n    if dp[i] < dp[i - 1]:\n        ans = \"NO\"\n        break\n\nprint(ans)\nprint(*dp)\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('26 6') == 'YES\\n1 2 4 5 6 8'\nassert solution('8 3') == 'NO\\n'\nassert solution('1 1') == 'YES\\n1'\nassert solution('9 4') == 'NO\\n'\nprint('The local tests are done. Try to solve the problem!')\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"26 6\") == 'YES\\n1 2 4 5 6 8'\nassert solution(\"8 3\") == 'NO'\nassert solution(\"1 1\") == 'YES\\n1'\nassert solution(\"9 4\") == 'NO'"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == 3"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3 4\n4 6\n10 -2\n8 -1\n''') == '3'\n\nassert solution('''\n5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45\n''') == '5'\n\nassert solution('''\n3 2\n300 -300\n1 299\n1 123\n''') == '3'\n\nassert solution('''\n3 4\n4 6\n10 -2\n8 -1\n''') == '3'\n\nassert solution('''\n3 4\n4 6\n10 -2\n8 -1\n''') == '3'"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 6\\n10 -2\\n8 -1') == '3'\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3, 4, ['4 6', '10 -2', '8 -1']) == '3'\n\"\"\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == '3'\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == '5'\n\"\"\""
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1\\n') == 3\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\\n') == 5\n\"\"\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == \"NO\"\nassert solution('1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\"\n\n'''\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('1\\n10') == 'YES\\n10'\n\"\"\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\\n'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3\\n1 3 1\\n'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO\\n'\nassert solution('1\\n10') == 'YES\\n10\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\n\n\n\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == 'YES\\n1 3 1\\n3 1 3'\nassert solution(\"1\\n10\") == 'YES\\n10'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\n\"\"\"\n\nn = int(input())\nlst = [int(i) for i in input().split()]\nlst_2 = []\n\nfor i in range(n ** 2):\n    lst_2.append(lst[i] % n)\n    lst[i] = lst[i] // n\n\nfor i in range(n):\n    for j in range(n - 1):\n        if lst_2[i + j * n] == lst_2[i + (j + 1) * n]:\n            continue\n        else:\n            print(\"NO\")\n            exit()\nfor i in range(n):\n    for j in range(n - 1):\n        if lst_2[i + j * n] == lst_2[i + (j + 1) * n]:\n            continue\n        else:\n            print(\"NO\")\n            exit()\n\nprint(\"YES\")\nfor i in range(n):\n    for j in range(n):\n        print(lst_2[i * n + j], end=' ')\n    print('')\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\n\"\"\"\n\nn = int(input())\ns = [int(item) for item in input().split(' ')]\narr = []\nfor i in range(n):\n    row = []\n    for j in range(n):\n        row.append(s[n*i+j])\n    arr.append(row)\n    \n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\n\n-----Test 3-----\n\nInput\n4\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\n\nOutput\nYES\n1 2 2 1\n8 2 2 8\n8 2 2 8\n1 2 2 1\n\n-----Test 4-----\n\nInput\n4\n1 1 1 1 1 3 3 3 3\n\nOutput\nYES\n1 3 1\n3 1 3\n1 3 1\n\n-----Test 5-----\n\nInput\n1\n10\n\nOutput\nYES\n10 \n\n\n-----Test 6-----\n\nInput\n1\n3\n\nOutput\nYES\n1 3 1\n3 1 3\n\n\n-----Test 7-----\n\nInput\n1\n2\n\nOutput\nYES\n2 1\n\n\n-----Test 8-----\n\nInput\n3\n1 1 1 1 1 3 3 3 3\n\nOutput\nYES\n1 3 1\n3 1 3\n1 3 1\n\n\n-----Test 9-----\n\nInput\n3\n1 1 1 1 1 3 3 3 3\n\nOutput\nYES\n1 3 1\n3 1 3\n1 3 1\n\n\n-----Test 10-----\n\nInput\n2\n1 9\n1 9\n\nOutput\nYES\n9 1\n9 1\n\n\n-----Test 11-----\n\nInput\n2\n1 8\n1 8\n\nOutput\nNO\n\"\"\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"YES\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\nassert solution(\"4 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == 'YES'\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == 'YES'\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == 'YES'\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == 'NO'\nassert solution(\"4 5\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == 'YES'"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\nassert solution(\"4 10\\n10 0\\n10 -10\\n30 0\") == \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 10\n10 0\n10 -10\n30 0''') == 'YES'\n\nassert solution('''3 4\n4 6\n10 -2\n8 -1''') == 'YES'\n\nassert solution('''4 4\n5 2\n5 -3\n2 1\n4 -2''') == 'YES'\n\nassert solution('''3 10\n10 0\n10 -10\n30 0''') == 'NO'\n\nassert solution('''4 4\n5 2\n5 -3\n2 1\n4 -2''') == 'NO'"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\nassert solution(\"4 10\\n10 -5\\n10 -2\\n1 3\\n\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(    \"3 4\" + \n                \"4 6\" + \n                \"10 -2\" +\n                \"8 -1\"\n                ) == \"YES\"\n\nassert solution(    \"3 5\" + \n                \"4 -5\" +\n                \"4 -2\" +\n                \"1 3\"\n                ) == \"YES\"\n\nassert solution(    \"3 10\" + \n                \"10 0\" +\n                \"10 -10\" +\n                \"30 0\"\n                ) == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"2 4\") == \"NO\"\n\"\"\"\n\n\nimport sys\nimport math\nfrom collections import namedtuple\n\nsys.stdin = open('./test/0.txt', 'r')\ninput = sys.stdin.readline\nPoint = namedtuple(\"Point\", \"x y\")\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3 \"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1 \"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 \"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0'"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3 2\\n1 2 1\\n\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3 2\\n1 2 1\\n') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1\\n') == 'YES\\n0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2\\n') == 'YES\\n0 0 0 0 1 1 0 0 0 0'\n\nprint('Successfully passed!')\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 2\\n1 2 1\\n\") == \"YES\\n0 1 0 2 2 0 3\\n\"\nassert solution(\"10 1 11\\n1\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\\n\"\nassert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\\n\"\nassert solution(\"10 1 3\\n3\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\\n\"\nassert solution(\"10 1 1\\n4\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"7 3 2\\n1 2 1\"\n) == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\n\"10 1 11\\n1\"\n) == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\n\"10 1 5\\n2\"\n) == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == 'YES\\n0 1 0 2 2 0 3'\nassert solution(\"10 1 11\\n1\") == 'YES\\n0 0 0 0 0 0 0 0 0 0 1'\nassert solution(\"10 1 5\\n2\") == 'YES\\n0 0 0 0 1 1 0 0 0 0 0'"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n7 3 2\n1 2 1\n\"\"\"\n) == 'YES\\n0 1 0 2 2 0 3 '\nassert solution(\n\"\"\"\n10 1 11\n1\n\"\"\"\n) == 'YES\\n0 0 0 0 0 0 0 0 0 1 '\nassert solution(\n\"\"\"\n10 1 5\n2\n\"\"\"\n) == 'YES\\n0 0 0 0 1 1 0 0 0 0 '\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\"\nassert solution(\"10 1 11\\n1\") == \"YES\"\nassert solution(\"10 1 5\\n2\") == \"YES\"\nassert solution(\"10 1 5\\n3\") == \"NO\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"tst\") == 1\nassert solution(\"tt\") == 0\nassert solution(\"et\") == 0\nassert solution(\"\") == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 3\nassert solution('ab') == 1\nassert solution('aa') == 2\nassert solution('e') == 1\n\n\"\"\""
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bbaba\") == 3\n\nassert solution(\"bb\") == 1\n\nassert solution(\"a\") == 0\n\nassert solution(\"\") == 0\nassert solution(\"a bbba\") == 0"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaa\") == 0\nassert solution(\"abcde\") == 0\nassert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 1\nassert solution(\"aaaa\") == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"test\") == \"tst\"\nassert solution(\"ab\") == \"a\"\nassert solution(\"b\") == \"b\"\n\nassert solution(\"abab\") == \"a\"\nassert solution(\"ab\") == \"b\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('asdfasdf') == 3"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abcd') == 0\nassert solution('abcde') == 3\nassert solution('abcdef') == 3\n\"\"\"\n\ns = stdin[0]\nt = stdin[1]\ns_len = len(s)\nt_len = len(t)"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 0\nassert solution(\"a\") == 0\nassert solution(\"\") == 0\nassert solution(\"ab\") == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"test\") == \"test\"\nassert solution(\"\") == \"test\"\nassert solution(\"aaa\") == \"test\"\nassert solution(\"bb\") == \"bb\"\nassert solution(\"bbb\") == \"bb\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('test') == 3\nassert solution('bbaba') == 3\nassert solution('bb') == 0\nassert solution('aaaaa') == 0\nassert solution('aaaab') == 2\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.200000\") == '3 2'\nassert solution(\"2.572479\") == '10 3'\nassert solution(\"4.024922\") == '9 9'\n\"\"\""
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\n\n\"\"\"\nInput\n0.4375\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n1.543474\n\nOutput\n2 2\n\"\"\"\n\n\"\"\"\nInput\n0.6\n\nOutput\n1 1\n\"\"\"\n\n\"\"\"\nInput\n0.25\n\nOutput\n1 1\n\"\"\"\n\n\"\"\"\nInput\n0.5\n\nOutput\n2 2\n\"\"\"\n\n\"\"\"\nInput\n0.3125\n\nOutput\n2 2\n\"\"\"\n\n\"\"\"\nInput\n0.375\n\nOutput\n1 1\n\"\"\"\n\n\"\"\"\nInput\n0.46875\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput\n1 2\n\"\"\"\n\n\"\"\"\nInput\n0.35625\n\nOutput"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2.572479') == '10 3'\nassert solution('1.200000') == '3 2'\nassert solution('4.024922') == '9 9'\n\nprint('The local tests are done. Click on \"Check\" for more details.')\n\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1.200000') == '3 2'\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\n\nx = input()\n\nx = float(x)\n\nx_str = str(x)\n\nx_before_point = x_str[:x_str.find('.')]\nx_after_point = x_str[x_str.find('.') + 1:]\n\nx_before_point_int = int(x_before_point)\nx_after_point_int = int(x_after_point)"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\nassert solution(\"5.012345\") == \"8 9\"\n\"\"\"\n\n\nfrom decimal import Decimal\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\n\nx = float(input())\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\""
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 3 3\\n') == 'YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\\n'\nassert solution('6 2 3\\n') == 'NO\\n'\nassert solution('10 4 3\\n') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n'\nassert solution('8 5 3\\n') == 'YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\\n'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 3\") == \"YES\"\nassert solution(\"6 3 3\") == \"NO\"\nassert solution(\"8 5 3\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 3 3') == 'YES'\nassert solution('6 2 3') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('8 5 3') == 'YES'"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n'10 4 3'\n) == 'YES'\nassert solution(\n'6 2 3'\n) == 'NO'\nassert solution(\n'8 5 3'\n) == 'YES'\n\"\"\""
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3 3\\n\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\nassert solution(\"6 2 3\\n\") == \"NO\"\nassert solution(\"8 5 3\\n\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\n\"\"\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 3 3') == 'YES'\nassert solution('6 2 3') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('8 5 3') == 'YES'\nassert solution('8 10 3') == 'NO'\n\n-------\n\nn, d, k = map(int, stdin.readline().split())"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 3\\n') == 'YES'\nassert solution('6 2 3\\n') == 'NO'\nassert solution('8 5 3\\n') == 'YES'\nassert solution('10 4 3\\n') == 'NO'\nassert solution('6 7 3\\n') == 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 3\") == 'YES'\nassert solution(\"6 2 3\") == 'NO'\nassert solution(\"10 4 3\") == 'YES'\nassert solution(\"8 5 3\") == 'YES'\nassert solution(\"8 5 3\") == 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 3\") == \"YES\"\nassert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"8 10 3\") == \"YES\"\n\n\"\"\"\n\nn, d, k = map(int, input().split())"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1100\") == \"11\"\nassert solution(\"110100\") == \"101100\"\nassert solution(\"101100\") == \"110010\"\n\"\"\""
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1100\") == \"1100\"\nassert solution(\"110100\") == \"110100\"\n\n\"\"\""
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('01010') == '1100'\nassert solution('111001') == '101100'\nassert solution('100101') == '110010'\nassert solution('101011') == '100110'\nassert solution('110110') == '011001'\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1011\") == \"10110\"\nassert solution(\"11010\") == \"111010\"\nassert solution(\"10101010\") == \"10110110\"\nassert solution(\"111011101010\") == \"111011110110\"\nassert solution(\"1110111101010\") == \"1011011110110\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"101100\"\nassert solution(\"3 3 2\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\nassert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\""
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101010\") == \"011010\"\nassert solution(\"111001\") == \"101101\"\nassert solution(\"111011\") == \"101111\"\nassert solution(\"11101\") == \"101110\"\nassert solution(\"11010\") == \"101010\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11101 100010\") == \"100010\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"01010\") == \"1100\"\nassert solution(\"111001\") == \"101100\"\nassert solution(\"10011101\") == \"101101\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"01010\") == \"1100\"\nassert solution(\"111001\") == \"101100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 1') == '1100'\nassert solution('2 2 1') == '1110'\nassert solution('3 2 1') == '1101'\nassert solution('4 2 1') == '1110'\nassert solution('5 2 1') == '1111'\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ab\") == \"acb\"\n\"\"\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bb\"\nassert solution(\"bb\") == \"cc\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"cbac\"\nassert solution(\"bb\") == \"acb\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ab') == 'ac'\nassert solution('ac') == 'ac'\nassert solution('bc') == 'ac'\n\nprint(solution(\"aabb\"))\nprint(solution(\"bcc\"))\nprint(solution(\"bac\"))\nprint(solution(\"bca\"))\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ab\") == \"acb\"\nassert solution(\"cb\") == \"cbc\"\nassert solution(\"ca\") == \"cbac\"\nassert solution(\"bb\") == \"bcb\"\nassert solution(\"ac\") == \"cac\"\n\"\"\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"cb\"\nassert solution(\"bb\") == \"bc\"\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"cb\") == \"acb\"\nassert solution(\"cb\") == \"cacb\"\nassert solution(\"ca\") == \"ac\"\nassert solution(\"cc\") == \"acb\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"bc\") == \"cb\"\nassert solution(\"cc\") == \"ac\"\n\"\"\"\n\n\nfrom itertools import product"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ab\") == \"c\"\nassert solution(\"ac\") == \"cc\"\nassert solution(\"bb\") == \"b\"\nassert solution(\"ca\") == \"cac\"\nassert solution(\"abc\") == \"acb\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bb\"\nassert solution(\"bb\") == \"ac\"\n\"\"\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1') == '3 1 2'\nassert solution('4 3') == '1 2 3 4'\nassert solution('5 4') == '1 2 3 4 5'\nassert solution('5 5') == '1 2 3 4 5'\nassert solution('5 5') == '1 2 3 4 5'\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 2') == '3 1 2'\nassert solution('3 1 2') == '3 1 2'\nassert solution('1 1 1 1') == '1 2 3 4 5'\nassert solution('5 1 1 1') == '5 1 2 3 4'\nassert solution('6 1 2 1') == '6 1 2 3 4 5'\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n\") == \"3 1 2\"\n\"\"\"\n\n\"\"\"\nn = int(stdin.readline())\n\narr = [int(x) for x in stdin.readline().split()]\nq = [int(x) for x in stdin.readline().split()]\n\nfor i in range(1,n):\n    p = q[i-1] - q[i]\n    arr.insert(p,q[i])"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4 1 2\") == \"-1\"\nassert solution(\"5 2 1 1\") == \"-1\"\nassert solution(\"5 1 2 2\") == \"2 3 1 4 5\""
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4 1 1 1\") == \"1 2 3 4\"\nassert solution(\"5 1 -1 2\") == \"1 2 3 4 5\"\nassert solution(\"5 2 1 2\") == \"2 1 3 4 5\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 2') == '3 1 2'\nassert solution('5 1 1 1') == '1 2 3 4 5'\nassert solution('4 1 2') == '1 2 3 4'\nassert solution('3 1 1') == '1 2 3'\nassert solution('4 0 2') == '1 2 3'\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\n\nassert solution(\"5 1 2\") == \"5 2 1 3 4\"\n\nassert solution(\"3 4 2\") == \"3 4 1 2\"\n\nassert solution(\"1 1 1 1\") == \"-1\"\n\nassert solution
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 -1 2 2') == '3 1 2 4'\nassert solution('4 -1 -2 1') == '3 1 2 4'\nassert solution('5 1 1 1') == '1 2 3 4 5'\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == '3 1 2'\nassert solution(\"5 1 1 1\") == '5 1 2 3 4'\nassert solution(\"4 1 1 1\") == '4 1 2 3'\nassert solution(\"6 1 1 1\") == '6 1 2 3 5'\nassert solution(\"7 1 1 1\") == '7 1 2 3 6'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == '1'\nassert solution(\"5\\n2 2 2 3 3\") == '2'\nassert solution(\"5\\n2 2 2 3 3\") == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 2 2 3 3') == '2'\nassert solution('3\\n1 2 3') == '1'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3\\n') == '1'\nassert solution('5\\n2 2 2 3 3\\n') == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2 2 3\\n') == 1\nassert solution('5\\n2 2 2 3 3\\n') == 2\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2 3 3\") == \"2\"\nassert solution(\"5 2 2 3 3\") == \"2\"\nassert solution(\"100 2 2 3 3\") == \"2\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\""
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"10 1\") == \"5\"\nassert solution(\"10 10\") == \"1\"\nassert solution(\"10 100\") == \"5\"\nassert solution(\"1 100\") == \"5\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"100\") == \"25\"\n\"\"\"\n\nimport math\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == '5'\n\"\"\"\nimport sys\nimport collections\nimport math"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '5'\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n\nn = input()\ncount = 0\n\nwhile n[0]!= '0':\n    count += 1\n    n = n[1:]\n\nprint(count)\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5) == 2\nassert solution(7) == 4\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '5'\n\"\"\"\n\nimport sys\nfrom math import sqrt"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"10\") == \"5\"\nassert solution(\"100\") == \"50\"\nassert solution(\"1000\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"2\") == \"5\"\n\"\"\"\n\nn = int(input())\ncount = 0\nwhile n!= 1:\n    if n % 2 == 0:\n        n = n/2\n    else:\n        n = n*3 + 1\n    count += 1\nprint(count)"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"1 1 0\\n1 1 0\") == \"0 1\"\nassert solution(\"15 5 5\\n5 5 5\") == \"0 15\"\nassert solution(\"0 0 3\\n3 0 0\") == \"0 3\"\nassert solution(\"3 0 0\\n0 0 3\") == \"3 3\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('15\\n5 5 5\\n5 5 5') == '0 15'\nassert solution('686\\n479 178 29\\n11 145 530') == '3 231'\nassert solution('319\\n10 53 256\\n182 103 34') == '3 244'\n\"\"\"\n\n\"\"\"\nFor a = 10**9, b = 10**9, it takes O(10^12) to calculate a_sum and b_sum.\nFor a = 10**9, b = 10**9, it takes O(10^12) to calculate a_min and a_max.\nFor a = 10**9, b = 10**9, it takes O(10^12) to calculate b_min and b_max.\n\"\"\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"3 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 2') == '2 3 1'\nassert solution('15 5 5') == '0 15'\nassert solution('686 479 178 29') == '22 334'\nassert solution('319 10 53 256') == '119 226'\n\"\"\"\n\n\"\"\"\nIn the first example, Alice will not win any rounds if she shows scissors and then paper and Bob shows rock and then scissors. In the best outcome, Alice will win one round if she shows paper and then scissors, and Bob shows rock and then scissors.\n\nIn the second example, Alice will not win any rounds if Bob shows the same things as Alice each round.\n\nIn the third example, Alice always shows paper and Bob always shows rock so Alice will win all three rounds anyway.\n\"\"\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"15\\n5 5 5\\n5 5 5\") == \"0 15\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"3 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\nimport numpy"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('3\\n0 0 3\\n3 0 0') == '0 3'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\n\"\"\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('15\\n5 5 5\\n5 5 5') == '0 15'\nassert solution('3\\n0 0 3\\n3 0 0') == '3 3'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\n\"\"\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == '0 1'\nassert solution(\"15\\n5 5 5\\n5 5 5\") == '0 15'\nassert solution(\"3\\n0 0 3\\n3 0 0\") == '3 3'\nassert solution(\"686\\n479 178 29\\n11 145 530\") == '22 334'\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('15\\n5 5 5\\n5 5 5') == '0 15'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\nassert solution('319\\n10 53 256\\n182 103 34') == '119 226'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"15 6 5\") == \"3 15\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == '3\\n7 7'\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == '2\\n3 4'\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == '3'\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == '2'\nassert solution(\"4 1 2 2 1 5 3\") == '3'\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"7 4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3\\n') == '3\\n7 7\\n2 3\\n4 5'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n') == '2\\n3 4\\n1 1\\n2 2'\nassert solution('4\\n1 1 1 1\\n') == '4\\n4 4\\n1 1\\n2 2'\n\"\"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\n\n\"\"\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('4\\n1 1 1 1') == '4'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\nresult = [[0, 0] for _ in range(n)]\n\nfor i in range(n):\n    left, right = 0, 0\n    for j in range(n):\n        right += a[j]\n        if i < j:\n            right -= a[i]\n            if left < right:\n                left, right = right, left\n        if left > right:\n            result[i][0], result[i][1] = j, j\n            break\nprint(len(set([(i[0], i[1]) for i in result])))\nprint(*[(i[0], i[1]) for i in result])\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"1 2 3\") == \"YES\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 3 1') == 'YES'\nassert solution('5 2 4 1 3') == 'NO'\nassert solution('2 1 3 4') == 'YES'\nassert solution('1 2 3') == 'YES'\nassert solution('3 1 2') == 'NO'\n\"\"\"\n\nimport sys\n\nimport collections\n\nclass Counter:\n    def __init__(self):\n        self.counter = collections.Counter()\n\n    def add(self, value):\n        self.counter[value] += 1\n\n    def is_all_zeros(self):\n        return self.counter.most_common()[-1][1] == 0\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 1 2\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"1 2 3\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 2 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 1 2\") == \"YES\"\nassert solution(\"2 1 3\") == \"YES\"\nassert solution(\"2 1 2\") == \"NO\"\nassert solution(\"3 3 2 2 1\") == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\nassert solution(\"2\\n1 2\") == \"YES\"\nassert solution(\"5\\n3 4 3 2 1\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\") == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3') == 'YES'\nassert solution('3\\n3 1 2') == 'NO'\n\n----\n\n2\n1\n\nYES"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"1 2 3\") == \"YES\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\nprint(solution(\"5\\n6 7 8 9 1\"))\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcd\") == \"0\"\nassert solution(\"abdfec\") == \"3 5 4 5\"\nassert solution(\"abdcef\") == \"-1\"\n\n\n\"\"\"\n\n\nfrom collections import Counter\n\nn = int(input())\ns, t = map(str, input().split())\n\nc = Counter(s)\n\nans = 10 ** 4\n\nfor i, (key, value) in enumerate(c.items()):\n    if key == t[i]:\n        continue\n    ans -= 1"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''6\nabdef\nabdfec''') == '4'\nassert solution('''4\nabcd\naccd''') == '-1'\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcd') == 'abcd'\nassert solution('abcde') == 'abcd'\nassert solution('abcdef') == 'abcd'\nassert solution('abcdefg') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s1) == s2\nassert solution(s3) == s4\nassert solution(s5) == s6\nassert solution(s7) == s8\n\"\"\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcd\") == \"0\"\nassert solution(\"accd\") == \"-1\"\nassert solution(\"ddad\") == \"3\"\nassert solution(\"gfvnuytbvjbmbfctp\") == \"5\"\nassert solution(\"hfnlqyyjtyfbmpctxn\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcdef\", \"abdcef\") == \"4\"\nassert solution(\"abcde\", \"acdbe\") == \"-1\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcd') == '0'\nassert solution('accd') == '-1'\nassert solution('cd') == '2'\nassert solution('c') == '0'\nassert solution('abcde') == '3'\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(s_test) == t_test\n\"\"\"\n\nn = int(input())\ns = input()\nt = input()\n\ns_list = list(s)\nt_list = list(t)\n\nmoves = 0\nwhile len(s_list)!= len(t_list):\n    moves += 1\n    for i in range(n-1):\n        if s_list[i]!= t_list[i]:\n            temp = s_list[i]\n            s_list[i] = t_list[i]\n            t_list[i] = temp\n            break\n    if s_list == t_list:\n        break\n    if s_list == t_list and s_list[0]!= t_list[0]:\n        temp = s_list[0]\n        s_list[0] = t_list[0]\n        t_list[0] = temp\n        break"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"abdcfec\") == \"abdcef\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aba') == 'PS'\nassert solution('a') == 'P'\nassert solution('aa') == 'PS'\nassert solution('b') == 'P'\nassert solution('bab') == 'PSPS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abcde') == 'SSPPPSSPPSSP'\nassert solution('abce') == 'SSPPSSP'\nassert solution('abcd') == 'PSPPS'\nassert solution('abc') == 'SP'\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abab\") == \"PSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"baba\") == \"SPPSPS\"\nassert solution(\"aba\") == \"PPS\"\nassert solution(\"aab\") == \"PPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    'ba'\n) == 'SPPSPSPS'\n\nassert solution(\n    'a'\n) == 'PPSS'\n\nassert solution(\n    'abab'\n) == 'PSPSPSPS'\n\nassert solution(\n    'a'\n) == 'PS'\n\nassert solution(\n    'aba'\n) == 'PS'"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ba\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"abab\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"aba\") == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba') == 'SPPSPSPS'\nassert solution('3\\na\\naa\\naa\\na') == 'PPSS'\nassert solution('2\\na\\nc') == 'PS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ba\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PPSS\"\nassert solution(\"abab\") == \"PSPS\"\nassert solution(\"a\") == \"PS\"\n\"\"\"\n\nimport sys\nimport string\n\nn = int(sys.stdin.readline())\nstr_list = []\nfor i in range(2*n-2):\n    str_list.append(sys.stdin.readline())\n\npre_set = set()\nsuf_set = set()\n\nfor i in range(len(str_list)):\n    for j in range(1, len(str_list[i])):\n        if str_list[i][0:j] not in pre_set:\n            pre_set.add(str_list[i][0:j])\n        if str_list[i][-j:] not in suf_set:\n            suf_set.add(str_list[i][-j:])\n    if len(pre_set) > len(suf_set):\n        print('S', end='')\n    else:\n        print('P', end='')\n    pre_set = set()\n    suf_set = set()\n\nprint()\n\nfor i in range(len(str_list)):\n    for j in range(1, len(str_list[i])):\n        if str_list[i][0:j] not in pre_set:\n            pre_set.add(str_list[i][0:j])\n        if str_list[i][-j:] not in suf_set:\n            suf_set.add(str_list[i][-j:])\n    if len(pre_set) == len(suf_set):\n        print('S', end='')\n    else:\n        print('P', end='')\n    pre_set = set()\n    suf_set = set()\nprint()\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ababa\") == \"PS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"aa\") == \"PS\"\nassert solution(\"aaa\") == \"PPS\"\nassert solution(\"aaaabbb\") == \"PPSPPS\"\n\"\"\"\n\nfrom typing import Tuple, List\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"PS\"\nassert solution(\"abab\") == \"SPPS\"\nassert solution(\"aaaa\") == \"SPPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"aaaaa\") == \"SPPS\"\n\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 6 8 10') == 1\n\nassert solution('1 2 3 4 5') == 1\n\nassert solution('1 1 1 1 1') == 0\n\"\"\"\n\n\"\"\"\n1. \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u0441\u0435 \u043d\u0430\u0431\u0438\u0440\u0430\u0435\u043c \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432\n2. \u0417\u0430\u0442\u0435\u043c \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u0441 \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u043c\u0441\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n3. \u041f\u0440\u0438 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0438 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c, \u0447\u0442\u043e \u0432\u0441\u0435 \u0432\u043c\u0435\u0441\u0442\u0435 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0434\u0432\u0430 \u043e\u0442\u0432\u0435\u0442\u0430, \u0435\u0441\u043b\u0438 \u043f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0438 \u0435\u0441\u0442\u044c \u043e\u0434\u0438\u043d \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u043c\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u043c\u0443, \u0442\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u043e\u0442\u0432\u0435\u0442 \u043d\u0435 \u043d\u0443\u0436\u0435\u043d, \u0435\u0441\u043b\u0438 \u043d\u0435\u0442, \u0442\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u043e\u0442\u0432\u0435\u0442 \u043d\u0435 \u043d\u0443\u0436\u0435\u043d, \u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u043d\u0443\u0436\u0435\u043d.\n4. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043c\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043b\u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0442\u044c \u043e\u0431\u0445\u043e\u0434 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0438 \u0435\u0441\u043b\u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0442\u044c \u043e\u0431\u0445\u043e\u0434 \u0442\u043e \u043c\u044b \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0432\u0442\u043e\u0440\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\n5. \u0415\u0441\u043b\u0438 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0435\u0442, \u0442\u043e \u0447\u0442\u043e-\u0442\u043e \u043f\u043e\u0448\u043b\u043e \u043d\u0435 \u0442\u0430\u043a, \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e \u0442\u043e\u043c \u0447\u0442\u043e \u043c\u044b \u043d\u0435 \u043d\u0430\u0448\u043b\u0438 \u043e\u0442\u0432\u0435\u0442\u0430\n6. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043e\u0442\u0432\u0435\u0442\u044b \u043e\u0431\u0445\u043e\u0434\u0438\u043c \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043f\u0435\u0440\u0432\u044b\u0439 \u043e\u0442\u0432\u0435\u0442\n\"\"\"\n\nnum_list = input().split(' ')\n\nunique_list = []\nfor i in range(len(num_list)):\n    if num_list[i] not in unique_list:\n        unique_list.append(num_list[i])"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 4 6 8 10') == '1'\nassert solution('2 4 6 8 10 2') == '2'\n\"\"\"\nimport sys"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\n\na = \"2 4 6 8 10\"\nprint(a[0])\na = a.split()\nprint(a)\nprint(type(a[0]))\nprint(int(a[0]))\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"4\""
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"2 4 6 8 10\"\n) == \"1\"\n\"\"\"\n\nstdin = input()\nstdin = [int(i) for i in stdin.split(\" \")]\nstdin = [0 if i < 1 else i for i in stdin]\nprint(stdin.index(max(stdin)) + 1)\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(1)\n\"\"\"\n\nn = [int(i) for i in input().split()]\n\nn.sort()\n\nprint(n[0]-n[1]-n[2])\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4 6 8 10') == 1\n\n-----Question 2-----\n\nYou are given an array of integers. Write a function that finds the smallest number and its index.\n\nSample input:\n\n3 5 4 1 2\n\nSample output:\n\n1 0"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"3 6 5 5\") == \"3\"\nassert solution(\"10 10 10 10 10\") == \"1\"\nassert solution(\"10 2 9 10 10\") == \"3\"\nassert solution(\"10 4 2 10 10\") == \"3\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 6 8 10') == 1\nassert solution('4') == 1\nassert solution('5 5') == 0\nassert solution('3 4 5') == 0\nassert solution('1 1') == 0\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 1 0 1 1 0 1 0 1 0') == '2'\nassert solution('5 1 1 0 0 0') == '0'\nassert solution('4 1 1 1') == '0'\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\\n\") == \"2\"\n\nassert solution(\"5\\n1 1 0 0 0\\n\") == \"0\"\n\nassert solution(\"4\\n1 1 1 1\\n\") == \"0\"\n\"\"\"\n\nimport sys\nimport timeit\nimport numpy\n\nsys.stdin = open(\"problem_5_6.txt\")\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 1 1 1\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\""
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\n1 1 0 1 1 0 1 0 1 0') == '2'\n\nassert solution('5\\n1 1 0 0 0') == '0'\n\nassert solution('4\\n1 1 1 1') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1 1 1') == '0'\nassert solution('7\\n1 1 1 1 1 0 1 0') == '0'\nassert solution('10\\n1 1 0 1 1 0 1 0 1 0') == '2'\n\nprint('The local tests are done. Click on \"Check\" for more details.')"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1 1 1 0 0') == '0'\nassert solution('4 1 1 1') == '0'\nassert solution('10 1 1 1 1 0 1 0 1 0') == '2'\n\"\"\""
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 1 1 0 1 1 0 1 0 1 0') == '2'\nassert solution('5 1 1 0 0 0') == '0'\nassert solution('4 1 1 1') == '0'\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\nans = 0\ncount = 1\nfor i in range(1, n):\n    if a[i] == 1 and a[i - 1] == 1 and a[i + 1] == 1:\n        count += 1\n        ans = max(ans, count)\n    else:\n        count = 1\nprint(ans)\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5 1 1 0 0 0\") == \"0\"\nassert solution(\"4 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 0 1 1 0 1 0 1 0') == '2'\nassert solution('1 1 1 1') == '0'\nassert solution('1 1 0 0 0') == '0'\nassert solution('1 1 1 1') == '0'\n\nstdin = '''3\n1 1 0 1 1 0 1 0 1 0\n'''\nprint(solution(stdin))\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 7') == '1'\nassert solution('4 5 7 10 10') == '1'\nassert solution('4 5 7 10 1 1') == '3'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nres = 1\n\nfor x in a:\n    res *= x\n    res //= x\n\nprint(res)\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5\") == '1'\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\n\nassert solution(\"3\\n1 2 3\") == \"1\"\n\nassert solution(\"4\\n1 2 3 4\") == \"1\"\n\nassert solution(\"5\\n1 2 3 4 5\") == \"1\"\n\nassert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n1 2 3 4 5\n''') == '1'\n\nassert solution('''6\n6 90 12 18 30 18\n''') == '4'\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\n\"\"\"\n\n\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435.\n\n\u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0435\u0442, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 None.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u0435\u043b. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0422\u0435\u0441\u0442 1\n>>> 1 2 3 4 5\n1\n\n\u0422\u0435\u0441\u0442 2\n>>> 1 1 1 1 1\n1\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 90 12 18 30 18\") == \"4\""
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"4\\n6 90 12 18 30 18\") == \"4\"\nassert solution(\"7\\n6 90 12 18 30 18 7\") == \"4\"\nassert solution(\"6\\n6 90 12 18 30 18 7\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 4 5') == '1'\nassert solution('6\\n6 90 12 18 30 18') == '4'\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 4 5') == '2'\nassert solution('6 90 12 18 30 18') == '4'\n\"\"\"\nimport sys"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2 3\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 4 3 3 2\") == \"2\"\nassert solution(\"100\") == \"1\"\n\"\"\""
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 2 4 3 3 2\") == 2\nassert solution(\"1\\n100\") == 1\nassert solution(\"7\\n7 7 7 7 7 7\") == 1\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == 3\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 4 3 3 2\\n\") == \"2\"\n\n\"\"\"\nimport sys\n\na = input()\na = a.split()\na = list(map(int, a))"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n1 2 4 3 3 2') == 2\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\\n2 3 4\") == '2'\nassert solution(\"1 2 3\\n2 2 3\") == '1'\nassert solution(\"1 2 3\\n2 3 3\") == '1'\nassert solution(\"1 2 3\\n3 3 3\") == '2'\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 2 1 1') == '3'\nassert solution('6\\n1 2 4 3 3 2') == '2'\n\nprint(solution('6\\n1 2 4 3 3 2'))\n\"\"\"\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nd = {x: a.count(x) for x in set(a)}\n\nprint(len(d) - max(d.values()))\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n1 2 4 3 3 2') == '2'\nassert solution('1\\n100') == '1'\nassert solution('1\\n100') == '1'\nassert solution('1\\n100') == '1'\nassert solution('1\\n100') == '1'\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n100') == 1\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\npockets = set()\n\nfor i in a:\n    if i in pockets:\n        pockets.remove(i)\n    else:\n        pockets.add(i)\n\nprint(len(pockets))\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1\\n2\\n3\\n4\\n5\\n6\") == \"2\"\nassert solution(\"1\\n2\\n3\\n3\\n4\\n5\\n6\") == \"3\"\nassert solution(\"1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"5\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"5\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '2'\nassert solution('2 1 1') == '3'\nassert solution('1 1 2') == '1'\nassert solution('1 2 2') == '2'\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\\n\") == \"3\"\nassert solution(\"5 3\\n0 0 0 0 1\\n\") == \"2\"\nassert solution(\"5 10\\n0 0 0 0 0\\n\") == \"-1\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\\n\") == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1\\n') == '3'\nassert solution('5 3\\n0 0 0 0 1\\n') == '2'\nassert solution('5 10\\n0 0 0 0 0\\n') == '-1'\nassert solution('10 3\\n0 0 0 0 0\\n') == '3'\nassert solution('15 10\\n0 0 1 1 0 1 0 0 0 0 1\\n') == '2'"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == \"3\"\nassert solution(\"5 3\\n0 0 0 0 1\") == \"2\"\nassert solution(\"5 10\\n0 0 0 0 0\") == \"-1\"\nassert solution(\"10 3\\n0 0 0 0 0\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == 3\nassert solution(\"5 3\\n0 0 0 0 1\") == 2\nassert solution(\"5 10\\n0 0 0 0 0\") == -1\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == 3\n\n\"\"\""
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1') == '3'\nassert solution('5 3\\n1 0 0 0 1') == '2'\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1') == '-1'\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"10 3\") == \"3\"\nassert solution(\"5 10\") == \"3\"\nassert solution(\"1 0 0 0 1\") == \"1\"\nassert solution(\"10 3\") == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == '3'\nassert solution(\"5 3\\n0 0 0 0 1\") == '2'\nassert solution(\"5 10\\n0 0 0 0 0\") == '-1'\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == '3'\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''6 2\n0 1 1 0 0 1\n''') == '3'\nassert solution('''5 3\n1 0 0 0 1\n''') == '2'\nassert solution('''5 10\n0 0 0 0 0\n''') == '-1'\nassert solution('''10 3\n0 0 1 1 0 1 0 0 0 1\n''') == '3'\n\n\"\"\"\n\nfrom typing import List, Tuple, Dict, Set, Union, Optional, Any, IO\nimport collections\nimport queue\n\nfrom collections import namedtuple\n\nInput = namedtuple(\"Input\", [\"n\", \"r\", \"heaters\"])\nOutput = namedtuple(\"Output\", [\"switches\", \"dist\"])\n\n\nclass Solution:\n    def solve(self, stdin: IO, **kwargs) -> Union[int, str]:\n        \"\"\"\n        >>> solution = Solution()\n        >>> solution.solve(open('data/test_1.txt', 'r'),\n       ... type_input='data/test_1.txt',\n       ... type_output='data/test_1.txt')\n        2\n        \"\"\"\n        n, r = [int(i) for i in stdin.readline().split()]\n        heaters = [int(i) for i in stdin.readline().split()]\n        # n, r = [int(i) for i in stdin.readline().split()]\n        # heaters = [int(i) for i in stdin.readline().split()]\n        heaters_on = collections.defaultdict(lambda: False)\n        heaters_on_count = 0\n\n        # Get heaters on\n        for i in range(n):\n            if heaters[i] == 1:\n                heaters_on[i] = True\n                heaters_on_count += 1\n\n        # Get possible switches\n        possible_switches = set()\n        for i in range(n):\n            possible_switches.add(i - r + 1)\n            possible_switches.add(i + r - 1)\n\n        # Get possible switches which turn on heaters\n        possible_switches_with_heaters = set()\n        for i in range(n):\n            if heaters_on[i]:\n                possible_switches_with_heaters.add(i)\n        possible_switches_with_heaters = list(possible_switches_with_heaters)\n\n        # Get all possible switches\n        possible_switches_all = set()\n        for i in range(n):\n            possible_switches_all.add(i)\n\n        # Turn on all possible switches\n        possible_switches_with_heaters_on = possible_switches_all - possible_switches_with_heaters\n\n        # Turn off all possible switches\n        possible_switches_with_heaters_off = possible_switches_all - possible_switches_with_heaters_on\n\n        # Get min number of switches\n        min_switches = len(possible_switches_with_heaters_on)\n        for i in range(n):\n            if i in possible_switches_with_heaters_on:\n                possible_switches_with_heaters_off.remove(i)\n                if len(possible_switches_with_heaters_off) < min_switches:\n                    min_switches = len(possible_switches_with_heaters_off)\n                possible_switches_with_heaters_off.add(i)\n        if min_switches < len(possible_switches_with_heaters_off):\n            return -1\n        return min_switches\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == 3\nassert solution(\"5 3\\n0 0 0 0 1\") == 2\nassert solution(\"5 10\\n0 0 0 0 0\") == -1\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == 3\n\nprint(\"The code ran Correctly\")"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == answer\nprint(solution(stdin))\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\nassert solution('11') == '4'\nassert solution('8') == '3'\nassert solution('12') == '5'\nassert solution('13') == '6'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == 3\nassert solution(4) == 2\nassert solution(5) == 3\nassert solution(6) == 1\nassert solution(7) == 3\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '3'\nprint(solution('3'))\n\n-------------Solution------------"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == 3\n\"\"\"\n\n\"\"\"\nIn the previous problem, we calculated the number of ways to pick 3 integers from N.\n\nNow, let's calculate the number of ways to pick 4 integers from N.\n\"\"\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == 3\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nprint(solution('3'))\n\n'''"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == '3'\nassert solution('3') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == 1\nassert solution('1') == 0\nassert solution('3') == 2\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('1') == '2'\nassert solution('8') == '1'\nassert solution('4') == '0'\nassert solution('4') == '0'\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '3'\n\n------Notes-----\nThis was one of the first questions that I had ever seen on Leetcode,\nI am very happy that I solved it on time, even though it was not the best\nsolution possible.\n\"\"\""
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"(())\") == 1\n\nassert solution(\"((()\")) == 2\n\nassert solution(\"()(()(()))\") == 2\n\nassert solution(\"())(\") == 0\n\nassert solution(\"(())(()\") == 0"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('(((())') == 3\nassert solution('())') == 0\nassert solution('))(') == 0\nassert solution('))((') == 2\nassert solution('(()())') == 2\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"(())(()())\") == 1\nassert solution(\"(((()())))(((()())))\") == 2\nassert solution(\"(()(()))\") == 0\nassert solution(\"())(()(()(()(()()))(())()))(()())()()(())(()())((()))(((())))(\") == 10\nassert solution(\"()()(())\") == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()()\") == 0\nassert solution(\"()(())\") == 0\nassert solution(\"(()()))\") == 3\nassert solution(\"))()(()\") == 0\nassert solution(\"(())((())()))\") == 4\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"()()()\") == 0\nassert solution(\"))(((((\") == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"((()))\") == 3\nassert solution(\"((()))(\") == 2\nassert solution(\"((((((()())()())())())())())\") == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"()()\") == 0\nassert solution(\"()((((((()()((()())(()()))()(()())))))))(((((((())))))))(((())))(((()())))(((())()))(()()())\") == 10\n\nprint('Success')"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"(((())\") == 3\n\nassert solution(\"))(((((\") == 3\n\nassert solution(\"(((((((((((((((((\") == 11\n\nassert solution(\"))))))))))))))))))))))(((((((\") == 2\n\nassert solution(\"()())\") == 3"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"()()())\") == 0\nassert solution(\"((())())\") == 6\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"()\") == 1\nassert solution(\")(\") == 0\nassert solution(\"()()\") == 2\nassert solution(\"(()())\") == 2\nassert solution(\"((()))\") == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"test\") == 4\nassert solution(\"tset\") == 0\nassert solution(\"test\") == 4\nassert solution(\"tst\") == 0\nassert solution(\"tt\") == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"test\") == 0\nassert solution(\"tst\") == 1\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 1\nassert solution(\"asdfasdf\") == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"test\") == 3\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"test\") == 0\nassert solution(\"\") == 0\nassert solution(\"a\") == 0\nassert solution(\"t\") == 0\nassert solution(\"at\") == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 1\nassert solution(\"\") == 0\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('baaba') == 3\nassert solution('bb') == 1\nassert solution('ab') == 0\nassert solution('abcde') == 0\nassert solution('abcde') == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"test\") == \"tt\"\nassert solution(\"test\")!= \"ts\"\nassert solution(\"test\") == \"tt\"\nassert solution(\"test\") == \"tt\"\nassert solution(\"test\")!= \"se\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaabbbbaaa\") == 4\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('bbaba') == 3\nassert solution('ab') == 0\nassert solution('bba') == 2\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"test\") == \"t\"\nassert solution(\"tst\") == \"tt\"\nassert solution(\"tt\") == \"t\"\nassert solution(\"et\") == \"e\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1 2 1 1''') == '2'\nassert solution('''1 1 2 1''') == '2'\nassert solution('''1 1 1 2''') == '1'\nassert solution('''1 1 1 1''') == '0'\n\na, b, c, d = map(int, stdin.split(' '))\n\nx = int(min(a, c) * min(b, d))\ny = int(max(a, c) * max(b, d))\n\nprint(x)"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a, b, c, d) == '2'\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 1 1') == '2'\nassert solution('2 1 1 1') == '2'\nassert solution('2 2 2 2') == '8'\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 1 1') == '2'\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 1 1') == '2'\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\"\n\n\n\"\"\"\nWrite a program that reads two integers and calculates their sum.\n\n-----Input-----\nThe first line contains the first integer, a, and the second line contains the second integer, b.\n\n-----Output-----\nPrint the sum, a + b.\n\n-----Sample Input-----\n3\n2\n\n-----Sample Output-----\n5\n\"\"\"\n\n\n\"\"\"\nWrite a program that reads two integers and calculates the product of these two integers.\n\n-----Input-----\nThe first line contains the first integer, a, and the second line contains the second integer, b.\n\n-----Output-----\nPrint the product, a * b.\n\n-----Sample Input-----\n3\n2\n\n-----Sample Output-----\n6\n\"\"\"\n\n\n\"\"\"\nWrite a program that reads two integers and calculates the quotient of these two integers.\n\n-----Input-----\nThe first line contains the first integer, a, and the second line contains the second integer, b.\n\n-----Output-----\nPrint the quotient, a // b.\n\n-----Sample Input-----\n3\n2\n\n-----Sample Output-----\n1\n\"\"\"\n\n\n\"\"\"\nWrite a program that reads two integers and calculates the remainder of these two integers.\n\n-----Input-----\nThe first line contains the first integer, a, and the second line contains the second integer, b.\n\n-----Output-----\nPrint the remainder, a % b.\n\n-----Sample Input-----\n3\n2\n\n-----Sample Output-----\n1\n\"\"\"\n\n\n\"\"\"\nWrite a program that reads two integers and calculates the greatest common divisor of these two integers.\n\n-----Input-----\nThe first line contains the first integer, a, and the second line contains the second integer, b.\n\n-----Output-----\nPrint the greatest common divisor, gcd(a,b).\n\n-----Sample Input-----\n24\n15\n\n-----Sample Output-----\n3\n\"\"\"\n\n\n\"\"\"\nWrite a program that reads two integers and calculates the least common multiple of these two integers.\n\n-----Input-----\nThe first line contains the first integer, a, and the second line contains the second integer, b.\n\n-----Output-----\nPrint the least common multiple, lcm(a,b).\n\n-----Sample Input-----\n2\n3\n\n-----Sample Output-----\n6\n\"\"\"\n\n\n\"\"\"\nWrite a program that reads an integer and prints the sum of all odd and even digits of this integer.\n\n-----Input-----\nInput consists of a single integer.\n\n-----Output-----\nPrint the sum of odd and even digits.\n\n-----Sample Input-----\n32\n\n-----Sample Output-----\n12\n\"\"\"\n\n\n\"\"\"\nWrite a program that reads a number and prints its reverse number.\n\n-----Input-----\nInput consists of a single integer.\n\n-----Output-----\nPrint the reverse number.\n\n-----Sample Input-----\n123\n\n-----Sample Output-----\n321\n\"\"\"\n\n\n\"\"\"\nWrite a program that reads an integer number and prints the sum of its digits.\n\n-----Input-----\nInput consists of a single integer.\n\n-----Output-----\nPrint the sum of digits.\n\n-----Sample Input-----\n123\n\n-----Sample Output-----\n6\n\"\"\"\n\n\n\"\"\"\nWrite a program that reads a number and prints the difference between the maximum and minimum numbers that can be formed using its digits.\n\n-----Input-----\nInput consists of a single integer.\n\n-----Output-----\nPrint the difference.\n\n-----Sample Input-----\n123\n\n-----Sample Output-----\n12\n\"\"\"\n\n\n\"\"\"\nWrite a program that reads the number of hours worked and the hourly wage and prints the gross pay.\n\n-----Input-----\nInput consists of two integers. The first integer represents the number of hours worked, and the second integer represents the hourly wage.\n\n-----Output-----\nPrint the gross pay.\n\n-----Sample Input-----\n10\n10\n\n-----Sample Output-----\n100\n\"\"\"\n\n\n\"\"\"\nWrite a program that reads the length of the base and the height of a right-angled triangle and prints its area.\n\n-----Input-----\nInput consists of two integers. The first integer represents the length of the base, and the second integer represents the height of the triangle.\n\n-----Output-----\nPrint the area.\n\n-----Sample Input-----\n10\n10\n\n-----Sample Output-----\n50.0\n\"\"\"\n\n\n\"\"\"\nWrite a program that reads the radius of a circle and prints the diameter, circumference, and area.\n\n-----Input-----\nInput consists of a single integer that represents the radius of the circle.\n\n-----Output-----\nPrint the diameter, circumference, and area.\n\n-----Sample Input-----\n7\n\n-----Sample Output-----\nDiameter: 14\nCircumference: 42\nArea: 98.89\n\"\"\"\n\n\n\"\"\"\nWrite a program that reads the length of the sides of a triangle and prints the perimeter and area.\n\n-----Input-----\nInput consists of three integers that represent the lengths of the sides of a triangle.\n\n-----Output-----\nPrint the perimeter and area.\n\n-----Sample Input-----\n10\n10\n10\n\n-----Sample Output-----\nPerimeter: 30\nArea: 62.83\n\"\"\"\n\n\n\"\"\"\nWrite a program that reads the length of the sides of a triangle and prints whether or not the triangle is a right triangle.\n\n-----Input-----\nInput consists of three integers that represent the lengths of the sides of a triangle.\n\n-----Output-----\nPrint whether or not the triangle is a right triangle.\n\n-----Sample Input-----\n10\n10\n10\n\n-----Sample Output-----\nIt is a right triangle.\n\"\"\"\n\n\n\"\"\"\nWrite a program that reads the length of the sides of a triangle and prints whether or not it is an equilateral triangle.\n\n-----Input-----\nInput consists of three integers that represent the lengths of the sides of a triangle.\n\n-----Output-----\nPrint whether or not the triangle is an equilateral triangle.\n\n-----Sample Input-----\n10\n10\n10\n\n-----Sample Output-----\nIt is an equilateral triangle.\n\"\"\"\n\n\n\"\"\"\nWrite a program that reads the length of the sides of a triangle and prints whether or not it is a right triangle, equilateral triangle, or scalene triangle.\n\n-----Input-----\nInput consists of three integers that represent the lengths of the sides of a triangle.\n\n-----Output-----\nPrint whether or not the triangle is a right triangle, equilateral triangle, or scalene triangle.\n\n-----Sample Input-----\n10\n10\n10\n\n-----Sample Output-----\nIt is a right triangle.\n\"\"\"\n\n\n\"\"\"\nWrite a program that reads the length of the sides of a triangle and prints whether or not it is an isosceles triangle.\n\n-----Input-----\nInput consists of three integers that represent the lengths of the sides of a triangle.\n\n-----Output-----\nPrint whether or not the triangle is an isosceles triangle.\n\n-----Sample Input-----\n10\n10\n10\n\n-----Sample Output-----\nIt is an isosceles triangle.\n\"\"\"\n\n\n\"\"\"\nWrite a program that reads the length of the sides of a triangle and prints whether or not it is a triangle.\n\n-----Input-----\nInput consists of three integers that represent the lengths of the sides of a triangle.\n\n-----Output-----\nPrint whether or not the triangle is a triangle.\n\n-----Sample Input-----\n10\n10\n10\n\n-----Sample Output-----\nIt is a triangle.\n\"\"\"\n\n\n\"\"\"\nWrite a program that reads the side of a square and prints whether or not it is a right square.\n\n-----Input-----\nInput consists of one integer that represents the length of a side of a square.\n\n-----Output-----\nPrint whether or not the square is a right square.\n\n-----Sample Input-----\n10\n\n-----Sample Output-----\nIt is a right square.\n\"\"\"\n\n\n\"\"\"\nWrite a program that reads the side of a square and prints whether or not it is a square.\n\n-----Input-----\nInput consists of one integer that represents the length of a side of a square.\n\n-----Output-----\nPrint whether or not the square is a square.\n\n-----Sample Input-----\n10\n\n-----Sample Output-----\nIt is a square.\n\"\"\"\n\n\n\"\"\"\nWrite a program that"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 1 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(expected)\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 1 1') == '2'\nassert solution('1 2 1 2') == '2'\nassert solution('1 2 2 3') == '6'\n\nprint('Passed all tests')\n\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9 1 4 4 6 7\\n') == '2'\nassert solution('8 1 3 4 4 6 7\\n') == '2'\nassert solution('8 1 3 4 4 6\\n') == '2'\nassert solution('8 1 3 4 4 5\\n') == '1'"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n9 1 4 4 6 7\") == \"2\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3 1 3 3 3 5') == 2\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1 2\\n') == ''\nassert solution('1 1\\n') == ''\nassert solution('2\\n') == '1'\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9 1 4 4 6 7') == '2'\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n9 1 4 4 6 7\\n\") == \"2\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(solution_input_string) == solution_expected_output_string\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4 4 6 7') == 2\n\n-------INPUT-------\n6\n9 1 4 4 6 7\n\n-------OUTPUT-------\n2\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str([9, 1, 4, 4, 6, 7])) == \"2\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 4 6 7\") == \"2\""
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\nassert solution(\"7 24 21 22\") == \"3\"\nassert solution(\"7 24 21 21\") == \"2\"\nassert solution(\"7 24 21 20\") == \"2\"\nassert solution(\"7 24 21 19\") == \"1\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 24 21 23\") == 3\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 24 21 23\") == 3\n\"\"\"\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ngood = 0\nfor t in range(n):\n    good += (r - l + 1) - (a[t] - t)\nprint(good)"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 16 11 13 21\") == \"3\"\n\"\"\"\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ngood = 0\nfor i in range(n):\n    if a[i] >= l and a[i] < r:\n        good += 1\nprint(good)"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == 3\nassert solution(\"7 21 24 15 23\\n14 21 10 10 22 11 16\\n21 10 20 10 12 8 11\") == 4\nassert solution(\"7 21 24 15 23\\n14 21 10 10 22 11 16\\n21 10 20 10 12 8 11\\n21 10 20 10 12 8 11\") == 3\n\"\"\"\n\nimport sys\n\nn, h, l, r = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ndp = [[0] * (r + 1) for _ in range(h + 1)]\n\nfor i in range(n):\n    for j in range(h):\n        if j >= a[i]:\n            dp[j + 1][min(a[i] + j, r)] = max(dp[j + 1][min(a[i] + j, r)],\n                                              dp[j][min(a[i] + j - 1, r)] + 1)\n        else:\n            dp[j + 1][min(a[i] + j, r)] = dp[j][min(a[i] + j - 1, r)] + 1\nprint(max(dp[h]))"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 24 21 23\") == 3\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\nassert solution(\"16 17 14 20 20 11 22\") == \"3\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 1 1 0\") == \"1\"\nassert solution(\"1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 6 5 3\") == 2\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == '3'\n\"\"\"\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ns = 0\nc = 0\nfor i in range(n):\n    if a[i] > s + h:\n        c += 1\n        s += h\n    else:\n        s = a[i]\n        c += 1\nprint(c)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == 4"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == '4'\nassert solution('5\\n2 10 50 110 250') == '1'\nassert solution('6\\n4 7 12 100 150 199') == '3'\n\n\nimport heapq\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == '4'\nassert solution('5\\n2 10 50 110 250') == '1'\nassert solution('6\\n4 7 12 100 150 199') == '3'\n\"\"\""
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49\\n') == '4'\n\nassert solution('5\\n2 10 50 110 250\\n') == '1'\n\nassert solution('6\\n4 7 12 100 150 199\\n') == '3'\n\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split()))\n\nd = dict(zip(l, range(1, n + 1)))\nd = {k: v for k, v in sorted(d.items(), key=lambda x: x[0])}\nprint(d)\n\ncount = 0\nfor k, v in d.items():\n    if v == 1:\n        count += 1\n    else:\n        break\nprint(count)\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == '4'\nassert solution(\"5\\n2 10 50 110 250\") == '1'\nassert solution(\"6\\n4 7 12 100 150 199\") == '3'\n\n\"\"\""
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n\"\"\"\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == '1 2'\n\"\"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == '1 2'\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n2 4 8 3 6''') == '1 2'\n\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\nassert solution(\"6\\n5 2 11 3 7\") == \"1 4\"\nassert solution(\"6\\n2 5 10 1 10 2\") == \"1 4\""
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n2 5 10 1 10 2\") == \"1 4\"\n\"\"\""
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n2\n5\n2\n11\n3\n7\n''') == '''\n1 2\n'''\nassert solution('''\n5\n5\n11\n3\n7\n''') == '''\n1 4\n'''\nassert solution('''\n7\n2\n11\n3\n7\n''') == '''\n1 4\n'''\nassert solution('''\n6\n2\n11\n3\n7\n''') == '''\n1 4\n'''\n\nimport io\nimport os\nfrom collections import defaultdict"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\n\"\"\"\n\nimport sys\nfrom math import gcd"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 8 3 6\") == '1 2'\nassert solution(\"5 2 11 3 7\") == '2 4'\nassert solution(\"6 2 11 3 7\") == '1 4'\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 11 3 7\") == \"2 4\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 11 3 7') == '1 2'\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"111\") == \"012\"\nassert solution(\"11101\") == \"11010\"\nassert solution(\"11101\") == \"11010\"\nassert solution(\"11101\") == \"11010\"\nassert solution(\"11101\") == \"11010\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"1101\") == \"11010\"\nassert solution(\"111\") == \"1110\"\nassert solution(\"1111\") == \"11110\"\nassert solution(\"11100\") == \"11120\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"000000\") == \"001122\"\nassert solution(\"211200\") == \"211220\"\n\"\"\""
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"211200\") == \"211220\"\nassert solution(\"120110\") == \"120120\"\n\"\"\"\nimport sys\nsys.path.append('../')\nimport bin_to_ternary"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(121) == \"021\"\nassert solution(211200) == \"211200\"\n\na = input()\nb = input()\n\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n\na = input()\nb = input()\nsolution(a)\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"1111111\") == \"1111112\"\nassert solution(\"1001011\") == \"10011010\"\nassert solution(\"10110111\") == \"10111010\"\nassert solution
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('121') == '021'\nassert solution('1100') == '1211'\nassert solution('1101') == '1211'\nassert solution('1110') == '12212'\nassert solution('1111') == '12122'\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('111') == '110'\nassert solution('011') == '010'\nassert solution('1101') == '100'\n\n\"\"\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"111\") == \"010\"\nassert solution(\"101\") == \"010\"\nassert solution(\"011\") == \"011\"\nassert solution(\"110\") == \"010\"\nassert solution(\"1110\") == \"1010\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '10'\nassert solution('101') == '11'\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n3\\n\") == \"4\"\nassert solution(\"4 1\\n4\\n\") == \"0\"\nassert solution(\"6 1\\n1\\n3\\n\") == \"0\"\nassert solution(\"4 1\\n4\\n\") == \"4\"\nassert solution(\"3 1\\n3\\n\") == \"4\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\\n2\\n4\\n\") == \"4\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n3\") == \"6\"\nassert solution(\"6 3\\n2\\n3\\n4\\n5\\n6\") == \"4\"\n\"\"\"\n\nimport sys\nimport math\nimport functools\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 3\\n1\\n2\\n3\\n4\\n5\\n6\\n7') == '8'\nassert solution('4 2\\n1\\n1\\n2\\n3') == '4'\nassert solution('4 2\\n1\\n3\\n2\\n3') == '4'\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 1\\n3\\n\") == \"4\"\nassert solution(\"6 2\\n3\\n\") == \"1\\n\"\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"6 1\\n3\\n\"\n) == \"4\\n\"\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n3\\n\") == \"4\"\nassert solution(\"6 1\\n4\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n2\\n1\") == '4\\n4\\n4\\n0'\nassert solution(\"6 3\\n1\\n2\\n3\\n4\\n5\\n6\") == '6\\n6\\n6\\n0'\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3\\n4\\n2\\n1\") == 4\n\"\"\"\n\nimport collections\nimport sys\n\nfrom typing import Dict\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \"\"\"\n        \uc810\ud654\uc2dd: dp[i][j] = dp[i - j][j] + dp[i][j - 1]\n\n        \uc544\ub798\ubd80\ud130 \uc62c\ub77c\uac00\ub294 \uacbd\uc6b0\uc5d0 \uc0dd\uae30\ub294 \uc218\ub97c \uad6c\ud55c\ub2e4\n        \uc774 \uc218\ub294 1\ubd80\ud130 \uacc4\uc18d \uc99d\uac00\ud55c\ub2e4\n        \"\"\"\n        stdin = stdin.split()\n        N = int(stdin[0])\n        M = int(stdin[1])\n        dp = [[0 for _ in range(N + 1)] for _ in range(N + 1)]\n        dp[0][0] = 1\n\n        for i in range(N + 1):\n            for j in range(1, min(i + 1, M + 1)):\n                dp[i][j] = (\n                    dp[i - j][j] + dp[i][j - 1]\n                ) % 1000000007\n\n        return dp[-1][M]\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == output\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 2 4') == 2\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 1\\n') == '0'\nassert solution('6 2 4\\n') == '2'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\nimport sys\n\nsys.path.append(\"../\")\nfrom modules.utils import read_input\n\nx, k, d = read_input().split(\" \")\nx = int(x)\nk = int(k)\nd = int(d)\n\nmin_abs = d * (k - 1)"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 2 4\\n') == 2\n\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2 4\\n\") == '2'\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 10\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 10\nassert solution('571576') == 3\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11\") == 2\nassert solution(\"14\") == 0\nassert solution(\"61441\") == 3\nassert solution(\"571576\") == 10\nassert solution(\"2128506\") == 3\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"61441\") == 2\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\") == 2\n\"\"\"\n\nimport math\nfrom itertools import product\n\nn = input()\n\nprint(math.ceil(len(n) / 2))\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == '2'\nassert solution('14') == '0'\nassert solution('61441') == '3'\nassert solution('571576') == '10'"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\") == 2\nassert solution(\"14\") == 0\nassert solution(\"61441\") == 10\nassert solution(\"2128506\") == 3\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == \"2\"\nassert solution(\"14\") == \"0\"\nassert solution(\"61441\") == \"2\"\nassert solution(\"571576\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"571576\") == 10\n\n\"\"\""
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11') == '2'\nassert solution('14') == '0'\nassert solution('61441') == '2'\nassert solution('2128506') == '3'\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == 27\n\"\"\"\nimport math\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == 27\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == 125\n\"\"\"\n\na = int(input())\na = a * (a + 1) // 2\nprint(a)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == 27\n'''\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == 27\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == 27\n\"\"\"\n\nimport sys\n\na = int(input())\n\nprint((a*(a+1))/2)"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == 27\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == 27\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '27'\n\"\"\"\n\nimport math\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\nprint((math.factorial(n + 1) // (math.factorial(n - 1) * math.factorial(2))) % (10 ** 9 + 7))\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == 27\n\"\"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('48') == 0\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('927') == '1'\n\nassert solution('48') == '0'\n\nassert solution('13') == '1'\n\nprint('All tests passed.')\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13') == 1\nassert solution('927') == 1\nassert solution('48') == 0\n\nprint(solution('13'))\nprint(solution('927'))\nprint(solution('48'))\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('13') == 1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\n\nprint(\"You are awesome!\")\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"927\") == '1'\nprint(solution('927'))\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(13) == 1\nassert solution(927) == 1\nassert solution(48) == 0\n\"\"\"\n\na = int(input())"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n\"\"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13') == 1\nassert solution('927') == 1\nassert solution('48') == 0\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 5 3 1') == 4\n\"\"\"\n\n\"\"\"\n\u041d\u0430 \u0441\u0442\u0430\u0434\u0438\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0431\u0440\u0430\u0437\u0446\u0430\u043c\u0438 \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u0435\u0439.\n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044f \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d \u0441\u0432\u043e\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.\n\u0421\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043e\u0431\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0443, \u043f\u0440\u0438\u0447\u0451\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430\n\u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u043e\u0433\u043e \u043f\u043e\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0435\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u043c.\n\u0415\u0441\u043b\u0438 \u0434\u0430, \u0442\u043e \u043f\u043e\u043b\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u0435\u0439.\n\u0415\u0441\u043b\u0438 \u043d\u0435\u0442, \u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u044d\u0442\u043e \u0438\u043c\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044f. \u0415\u0441\u043b\u0438 \u044d\u0442\u043e \u0442\u0430\u043a, \u0442\u043e \u043d\u0430\u0434\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c\n\u043e\u0431\u0440\u0430\u0437\u0446\u043e\u043c \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0442\u0435\u043a\u0443\u0449\u0438\u0445 \u043f\u043e\u043b\u0435\u0439.\n\u0421\u0442\u0430\u0440\u0442\u043e\u0432\u044b\u0435 \u043f\u043e\u043b\u044f \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044f \u043e\u0431\u0440\u0430\u0437\u0446\u0430. \u0415\u0441\u043b\u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u043c, \u0442\u043e \u0432\u0441\u0435 \u0442\u0435\u043a\u0443\u0449\u0438\u0435 \u043f\u043e\u043b\u044f\n\u043f\u043e\u043c\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u043a\u0430\u043a \u043d\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f.\n\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u0435\u0439, \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044f, \u0437\u0430\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u0435\u0439, \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044c\n\u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044f.\n\u0412\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u044b\u0435 \u043f\u043e\u043b\u044f \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u0432 \u043f\u043e\u043c\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0442\u0435\u043a\u0443\u0449\u0438\u0445 \u043f\u043e\u043b\u0435\u0439.\n\u0415\u0441\u043b\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0430, \u043e\u043d\u0438 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u043c\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u043a\u0430\u043a \u043d\u0435\u0438\u043c\u0435\u043d\u0443\u0435\u043c\u044b\u0435.\n\u0415\u0441\u043b\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0430, \u0442\u043e \u0438\u043c\u0435\u043d\u0430 \u043f\u043e\u043b\u0435\u0439, \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f,\n\u043f\u043e\u043c\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u043a\u0430\u043a \u043d\u0435\u0438\u043c\u0435\u043d\u0443\u0435\u043c\u044b\u0435.\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0445 \u043f\u043e\u043b\u0435\u0439, \u0438 \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0440\u0430\u0432\u043d\u043e \u043d\u0443\u043b\u044e, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0435\u0439 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e.\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0445 \u043f\u043e\u043b\u0435\u0439, \u0438 \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u043d\u0435 \u043d\u0443\u043b\u0435\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f, \u043c\u043e\u0436\u043d\u043e \u043b\u0438 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043a\u0430\u043a\u043e\u0439-\u0442\u043e\n\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438\u043c\u0435\u043d \u043f\u043e\u043b\u0435\u0439, \u0447\u0442\u043e\u0431\u044b \u044d\u0442\u0438 \u043f\u043e\u043b\u044f \u0431\u044b\u043b\u0438 \u0441\u043f\u0438\u0441\u043a\u0430\u043c\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445\n\u043f\u043e\u043b\u0435\u0439.\n\u0415\u0441\u043b\u0438 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u043c \u0434\u043b\u044f \u043f\u043e\u043b\u0435\u0439, \u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u044d\u0442\u0438\u0445 \u043f\u043e\ufffd"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(st.rstrip()) == answer\n\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n2 5 3 1''') == '4'\n\ntry:\n    assert solution('''4\n2 5 3 1''') == '4'\nexcept:\n    print('nope')\n\nassert solution('''4\n2 5 3 1''') == '4'\n\ntry:\n    assert solution('''4\n2 5 3 1''') == '4'\nexcept:\n    print('nope')\n\nassert solution('''4\n2 5 3 1''') == '4'"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 5 3 1\") == 4\n\"\"\"\n\nn = int(input())\nl = [int(s) for s in input().split()]\n\nprint(n)\nprint(\" \".join([str(x) for x in l]))\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 3 1\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 3 1\") == 4\n\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '2 3 1 4'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '7 8 9 6 5 4 3 2 10 1'\nassert solution('1 2 3 4 5 6 7 8 9 10 11') == '9 8 7 6 5 4 3 2 11 10 1'\n\nassert solution('1 2 3 4 5 6 7 8 9 10') == '2 3 1 4'\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 5 3 1') == 4\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_0) == test_0_result\nprint(solution(input()))\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nn = int(input().strip())\narray = list(map(int, input().strip().split(' ')))\n\nprint(array[0] ** 2 + array[1] ** 2 + array[2] ** 2 + array[3] ** 2)\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999732') == '2\\n8\\n1\\n999999733\\n1'\n\nassert solution('8 7\\n8 1\\n6 10\\n999999733 999999733') == '2\\n8\\n1\\n999999733\\n1'\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999733\") == \"999999733\"\nassert solution(\"999999733 999999732\") == \"1\""
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733''') == '2'\nassert solution('''8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733''') == '2'\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 7') == '2'\nassert solution('8 1') == '8'\nassert solution('6 10') == '1'\nassert solution('999999733 999999732') == '999999733'\nassert solution('999999733 999999733') == '1'\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\nimport sys\n\nT = int(input())\n\nfor _ in range(T):\n    N, K = map(int, input().split())\n    s = Counter(map(int, sys.stdin.read().split()))\n    s = sorted(s.keys(), reverse=True)\n    p = 0\n    for i in s:\n        if N <= p + s[i]:\n            print(i)\n            break\n        else:\n            p += s[i]\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"5\\n8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\"\n    ) == \"2\\n8\\n1\\n999999733\\n1\"\n\n\"\"\"\n\nfrom math import ceil, sqrt\nimport sys\n\nDEBUG = False\ndata = sys.stdin.read().splitlines()\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 7') == '2'\nassert solution('8 1') == '8'\nassert solution('6 10') == '1'\nassert solution('999999733 999999733') == '999999733'\nassert solution('999999733 999999733') == '1'\n\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999732') == '2\\n8\\n1\\n999999733\\n1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\\n999999733 999999732\") == \"2\\n8\\n1\\n999999733\\n1\"\nprint(\"Well done!\")\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 7\\n8 1\\n6 10') == '2\\n8\\n1\\n999999733\\n1'\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\nprint('Test PASSED!')\n\nsolution(stdin)\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1\\n') == 1\nassert solution('2 2\\n2 1 2\\n1 2\\n0 1\\n') == 2\nassert solution('2 2\\n2 1 2\\n1 2\\n1 0\\n') == 3\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\n\"\"\"\nimport itertools"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2 3\\n1 3\\n2 3\\n2 2\\n0 0\\n1 1\") == 1\n\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == 1\n\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == '1'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\"\n\nA, B, H, M = map(int, input().split())"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\nprint(solution(stdin))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '2.8284271247461903'\nassert solution('1 2 3 4 5') == '3.4641016151377544'\nassert solution('1 2 3 4 5 6') == '4.8284271247461903'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''3 4 9 0'''\n) == '''5.00000000000000000000'''\n\nassert float(solution(\n'''3 4 9 0'''\n)) == 5.0\n\nassert solution(\n'''3 4 9 0'''\n) == '''5.00000000000000000000'''\n\nassert float(solution(\n'''3 4 9 0'''\n)) == 5.0\n\nassert solution(\n'''3 4 9 0'''\n) == '''5.00000000000000000000'''"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 9 0') == '5'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\""
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '5 4\\n1 4 5 60 4'\n) == '8'\n\nassert solution(\n    '3 1\\n1 1 1'\n) == '6'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n\n\"\"\"\n\nfrom typing import Iterable"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\\n\") == \"8\"\nassert solution(\"3 1\\n1 1 1\\n\") == \"6\"\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\\n\") == \"97\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == 8\n\"\"\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 4\n1 4 5 60 4\n\"\"\") == \"8\"\nassert solution(\"\"\"\n3 1\n1 1 1\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n15 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n\"\"\") == \"97\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\n\nassert solution(\"3 1\\n1 1 1\") == \"6\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"1\"\nassert solution(\"15 2\") == \"97\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == 8\n\"\"\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == 8\nassert solution(\"3 1\\n1 1 1\") == 6\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == 97\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5\") == \"2\"\nassert solution(\"7 3\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"15 2\") == \"97\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\nprint('test passed')"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\n\nmax_diff = -1\n\nfor _ in range(m):\n    l, r = [int(x) for x in input().split()]\n    arr[l - 1:r] = [arr[l - 1] - 1] * (r - l + 1)\n    max_diff = max(max_diff, max(arr))\n\nprint(max_diff)\nprint(arr)\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_stdin) == test_solution\n\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 -2 3 1 2\\n1 3\\n4 5\\n2 5\") == \"6\\n2\\n1 4\"\nassert solution(\"2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1000000\\n\") == \"0\\n0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n''') == '6\\n2\\n1 4'\nassert solution('''1 0\n1000000\n''') == '0\\n0'\nassert solution('''5 4\n2 -2 3 1 2\n3 5\n3 4\n2 4\n2 5\n''') == '7\\n2\\n3 2'\nassert solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n''') == '6\\n2\\n1 4'\nassert solution('''5 4\n1 -1 0 2 3\n4 5\n2 5\n1 3\n''') == '6\\n2\\n1 4'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\n\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\n\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '0\\n0'\nassert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n1 4'\n\"\"\""
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5') == '7\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"fced\\nxyz\\nr\\nadbcef\\nz\\naa\\nbad\\nbabcef\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\nadbcef\\nz\\naz\\naa\\nbad\\nbabcef\") == \"Yes\\nYes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\nadbcef\\nz\\nz\\naz\\naa\\nbad\\nbabcef\") == \"Yes\\nYes\\nYes\\nYes\\nYes\\nYes\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\nadbcef\\nz\\nz\\naz\\naa\\nbad\\nbabcef\") == \"Yes\\nYes\\nYes\\nYes\\nYes\\nYes\\nNo\\nNo\"\nassert solution(\"fced\\nxyz\\nr\\nadbcef\\nz\\nz\\naz\\naa\\nbad\\nbabcef\") == \"Yes\\nYes\\nYes\\nYes\\nYes\\nYes\\nNo\\nNo\"\n\n\"\"\"\n\nimport sys\nimport re\nfrom collections import Counter"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"fced\\nxyz\\nr\\ndabcef\\nz\\naa\\nbad\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\"\n\nassert solution(\"fced\\nxyz\\nr\\ndabcef\\nz\\naa\\nbad\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\"\n\nassert solution(\"fced\\nxyz\\nr\\ndabcef\\nz\\naa\\nbad\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\"\n\nassert solution(\"fced\\nxyz\\nr\\ndabcef\\nz\\naa\\nbad\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\"\n\nassert solution(\"fced\\nxyz\\nr\\ndabcef\\nz\\naa\\nbad\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\""
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"fced\\nxyz\\nr\\ndabcef\\naz\\n\\naa\\nbad\\n\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\"\nprint(solution(\"8\\nfced\\nxyz\\nr\\ndabcef\\nzaz\\n\\n\\naa\\nbad\\n\\nbabc\"))\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"fced\\nxyz\\nr\") == 'Yes\\nYes'\nassert solution(\"az\\naa\\nbad\\nbabc\") == 'No\\nNo\\nNo'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"fced\\n\"\n\"xyz\\n\"\n\"r\\n\"\n\"dabcef\\n\"\n\"az\\n\"\n\"aa\\n\"\n\"bad\\n\"\n\"babc\\n\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\n\"\"\""
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abababa\") == \"No\"\nassert solution(\"a\") == \"Yes\"\nassert solution(\"ababa\") == \"No\"\nassert solution(\"aa\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"fced\"\n) == \"Yes\"\nassert solution(\n    \"xyz\"\n) == \"Yes\"\nassert solution(\n    \"r\"\n) == \"Yes\"\nassert solution(\n    \"dabcef\"\n) == \"Yes\"\nassert solution(\n    \"az\"\n) == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\n\"\"\""
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"7\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\"\nassert solution(\"1 0\\n1000000\") == \"0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 10\\n1 20\\n3 15') == '2\\n2\\n0'\nassert solution('3 10\\n1 10\\n2 10') == '0\\n0\\n0'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n\"\"\""
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n3 1 4 5\\n2 3\\n2 3\") == '7\\n0\\n0\\n0'\nassert solution(\"1 0\\n100000\") == '0\\n0'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\""
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6\\n3 1\\n1 2\\n3 4\") == \"2\\n2 3\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n3 2\\n1 1\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\nb = []\nfor i in range(m):\n    l, r = map(int, stdin.readline().split())\n    b.append([l, r])\n\na = a[::-1]\n\nq = []\nfor i in range(m):\n    if a[b[i][0]-1] == 1:\n        a[b[i][0]-1] = 0\n    else:\n        a[b[i][0]-1] = 1\n    if a[b[i][1]-1] == 1:\n        a[b[i][1]-1] = 0\n    else:\n        a[b[i][1]-1] = 1\n    q.append(i+1)\n\nprint(n - len(a))\nprint(' '.join([str(e) for e in q]))\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 2\\n4 5\") == \"6\"\nassert solution(\"2 3\\n1 2\\n4 5\\n2 5\") == \"7\"\nassert solution(\"1 0\\n1000000\") == \"0\"\n\"\"\"\n\nfrom itertools import combinations, product"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n2 3\\n2 4\") == \"7\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\") == \"6\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\"\nassert solution(\"1 0\\n1000000\") == \"0\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\"\n) == '6\\n2\\n4 1'\nassert solution(\n    \"2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\"\n) == '7\\n2\\n3 2'\n\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_one) == test_output_one\n\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 5 4 3') == 4, solution('2 1 5 4 3')\n\n'''"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4\\nLRRR'\n\nassert solution('7\\n1 3 5 6 7 4 2') == '7\\nLRLRLLL'\n\nassert solution('3\\n1 2 3') == '3\\nLLL'\n\nassert solution('4\\n1 2 4 3') == '4\\nLLRL'\n\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == '4'\nassert solution(\"7\\n1 3 5 6 7 4 2\") == '7'\nassert solution(\"3\\n1 2 3\") == '3'\nassert solution(\"4\\n1 2 4 3\") == '4'\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nl = list(map(int, sys.stdin.readline().split()))\n\nl.sort()\n\ncounter = 1\nmax_counter = 1\n\nfor i in range(1, len(l)):\n    if l[i] > l[i-1]:\n        counter += 1\n    else:\n        max_counter = max(max_counter, counter)\n        counter = 1\n\nmax_counter = max(max_counter, counter)"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\"\nassert solution(\"3\\n1 2 3\") == \"3\"\nassert solution(\"4\\n1 2 4 3\") == \"4\"\n\n\n\n-----"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 5 4 3') == '4'\nassert solution('1 3 5 6 7 4') == '7'\nassert solution('1 2 3') == '3'\nassert solution('1 2 4 3') == '4'\n\nassert solution('3 1 5 2 4') == '7'\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\nassert solution('7\\n1 3 5 6 7 4 2') == '7'\nassert solution('3\\n1 2 3') == '3'\nassert solution('4\\n1 2 4 3') == '4'\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\nassert solution('7\\n1 3 5 6 7 4 2') == '7'\nassert solution('3\\n1 2 3') == '3'\nassert solution('4\\n1 2 4 3') == '4'\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1 5 4 3') == '4'\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\", \"First\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\", \"Second\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\", \"Third\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\", \"Fourth\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == 4\n\"\"\"\nimport os\nfrom typing import List, Any\nfrom collections import Counter\nfrom collections import OrderedDict\nfrom math import gcd\nimport time\nimport queue\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 5 3 4\") == 4\nassert solution(\"1 2 5 3 4\") == 4\nassert solution(\"1 2 5 3 4\") == 4\nassert solution(\"1 2 5 3 4\") == 4\nassert solution(\"1 2 5 3 4\") == 4\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\n\n\n-----Explanation-----\n\"\"\"\n\n\"\"\"\na = [1, 2, 5, 3, 4]\n\nl = 1\nr = 0\nwhile r < len(a)-1 and a[r] <= a[r+1]:\n    r += 1\n\nprint(r)\n\"\"\""
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\n\n\n\n\nimport collections\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 5 3 4') == '4'\nassert solution('7\\n6 5 4 3 2 4 3') == '2'"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 5 3 4') == '4'\nassert solution('1 2') == '2'\nassert solution('1 2 3 4') == '3'\nassert solution('1 2 2 3 4') == '3'\nassert solution('1 2 2 2 3 4') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\nassert solution(\"1\\n2\") == \"2\"\n\nprint(\"Passed\")\n\n-----\n\nWrite a function:"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 5 3 4\") == 4\nassert solution(\"6 5 4 3 2 4 3\") == 2\n\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == expected_result"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == '2'\nassert solution(\"5 3\\n1 2 3 3 3\") == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 2 4 5\") == 1\nassert solution(\"1 2 2 4 5\") == 1\nassert solution(\"1 2 3 4 5\") == 2\nassert solution(\"1 2 3 3 3\") == 0\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 3\n1 2 3 4''') == '2'\nassert solution('''5 3\n1 2 2 4 5''') == '2'\nassert solution('''5 3\n1 2 3 4 5''') == '2'\n\n'''\n\n'''"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 3\n1 2 2 4 5''') == '1'\nassert solution('''5 3\n1 2 3 4 5''') == '2'\nassert solution('''5 3\n1 2 3 3 3''') == '0'\nassert solution('''5 3\n1 1 1 1 1''') == '5'\n\nprint('Hooray!')\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 2 4 5\") == 1\nassert solution(\"1 2 3 4 5\") == 2\nassert solution(\"1 2 3 3 3\") == 0\n\n\"\"\""
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 3 3 3') == '0'"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 5\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '0'\nassert solution('1 0 1') == '0'\nassert solution('3 1 2') == '0'\nassert solution('8 2 2') == '2'\nassert solution('8 3 4') == '4'\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 3 4') == '4'\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 3 4') == 4\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3 4\\n') == '4'\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '8 3 4'\n) == '4'\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3 4') == '4'\nassert solution('2 1 2') == '0'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n2\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == '48'\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n8\\n8 2 12 6 4 24 16 3') == '48'\n\"\"\"\n\n\nfrom math import sqrt\nfrom sys import stdin\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n8\\n2\\n1\") == \"48\"\n\nassert solution(\"4\\n8\\n2\\n12\") == \"4\"\n\nassert solution(\"4\\n8\\n2\\n6\") == \"-1\"\n\nassert solution(\"4\\n8\\n2\\n24\") == \"4\"\n\nassert solution(\"4\\n8\\n2\\n16\") == \"-1\""
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1\\n2\") == \"48\\n4\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"48\""
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('4\\n') == '4'\nassert solution('1\\n1\\n') == '1'\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1\") == \"48\"\n\"\"\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1\n8\n2 4 5 9 3 6 7 10''') == '48'\nassert solution('''2\n8\n1 2 4 8 16 32 64 128''') == '4'\nassert solution('''1\n8\n2 4 6 8 10 12 14 16''') == '-1'\nassert solution('''1\n3\n1 2 3''') == '-1'\nassert solution('''2\n3\n1 2 3''') == '-1'\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n8\") == \"48\"\nassert solution(\"4\\n8\\n1\\n2\") == \"4\"\nassert solution(\"4\\n8\\n1\\n2\\n1\\n3\") == \"-1\"\n\"\"\"\nimport sys\nfrom typing import List, Union, Tuple\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n8 2 12 6 4 24 16 3') == '48'\n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\n\n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"6\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"4\\n4 4 4\") == \"1\\n4\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 6 6 6 6') == '1\\n6'\nassert solution('5 6 6 6 6') == '2\\n6'\nassert solution('5 2 2 4 4') == '2\\n2 4'\nassert solution('5 2 2 4 4') == '2\\n2 4'"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n6 6 6 6 6') == '1\\n6'\nassert solution('5\\n2 4 2 4 4') == '2\\n2 4'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n2 4 2 4 4\") == \"3\\n5 6 1\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n6 6 6 6\") == \"1\\n6\"\n\n\"\"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 6 6 6 6\") == \"1 6\"\nassert solution(\"5 5 5 5 5\") == \"2\"\nassert solution(\"5 6 6 6 6\") == \"1 6\"\nassert solution(\"5 6 6 6 6\") == \"1 6\"\nassert solution(\"5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"4\\n5 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n6 6 6 6 6\\n\") == \"1\\n6\"\nassert solution(\"5\\n2 4 2 4 4\\n\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\\n\") == \"1\\n6\"\nassert solution(\"5\\n6 6 6 6\\n\") == \"1\\n6\"\nassert solution(\"5\\n2 4 2 4\\n\") == \"2\\n2 4\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 3 3 1\") == \"2\\n3 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\n\n\"\"\""
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n\"\"\""
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(432) == 435\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('432') == '435'\n\"\"\""
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n\"\"\""
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n\"\"\"\nimport math\nfrom operator import add, gt, lt\nfrom typing import List, Optional, Set, Union\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\""
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\n\nimport sys\nimport re\nfrom collections import defaultdict"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abac\") == 'aac'\nassert solution(\"abc\") == 'b'\nassert solution(\"abba\") == 'aba'\nassert solution(\"ecoosdcefr\") == 'codeforces'\nassert solution(\"aaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('abac') == 'aac'\nassert solution('abc') == 'b'\nassert solution('abba') == 'aba'\nassert solution('ecoosdcefr') == 'codeforces'\n\"\"\"\n\nimport numpy as np\n\ntest_cases = int(input())\n\nfor test_case in range(test_cases):\n    s = input()\n    t_length = int(input())\n    b = np.array([int(x) for x in input().split()])\n    t = ''\n    \n    for i, ch in enumerate(s):\n        t += ch\n        for j in range(t_length):\n            if b[j] > i:\n                t = t[:i] + t[j] + t[i:j] + t[i+1:]\n                break\n\n    print(t)"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aac\") == \"aac\"\nassert solution(\"aab\") == \"aac\"\nassert solution(\"abb\") == \"aac\"\nassert solution(\"a\") == \"a\"\nassert solution(\"ab\") == \"a\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    'abac'\n) == 'aac'\nassert solution(\n    'abc'\n) == 'b'\nassert solution(\n    'abba'\n) == 'aba'\nassert solution(\n    'ecoosdcefr'\n) == 'codeforces'"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == 'c'\nassert solution('1') == 'a'\nassert solution('2') == 'b'\n\nassert solution('1000000000000001') == 'z'\nassert solution('27') == 'aa'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == 'b'\n\n\"\"\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 'b'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 'b'\n\"\"\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"b\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == 'b'"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 'b'\n\"\"\"\n\nn = input()\nd = {}\ns = ''\nfor i in range(26):\n    d[chr(97 + i)] = chr(97 + (i + int(n)))\nfor i in range(27, 702):\n    d[chr(97 + i % 26)] = chr(97 + (i % 26 + int(n)))\nfor i in range(703, 18277):\n    d[chr(97 + i % 702)] = chr(97 + (i % 702 + int(n)))\nfor i in range(18279, 475255):\n    d[chr(97 + i % 18278)] = chr(97 + (i % 18278 + int(n)))\nfor i in range(475256, 9999999999):\n    d[chr(97 + i % 475254)] = chr(97 + (i % 475254 + int(n)))\n\nfor i in d:\n    s += i\nprint(s)\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"b\"\nassert solution(\"1\") == \"a\"\nassert solution(\"26\") == \"z\"\nassert solution(\"27\") == \"aa\"\nassert solution(\"701\") == \"zzz\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"b\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 'b'\n\"\"\"\n\nn = int(input())\n\nalphabet = 'abcdefghijklmnopqrstuvwxyz'"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"6\\nto be or not to be\"\n) == \"12\"\n\nassert solution(\n    \"10\\na ab a a b ab a a b c\"\n) == \"13\"\n\nassert solution(\n    \"6\\naa bb aa aa bb bb\"\n) == \"11\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\n\"\"\""
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('to be or not to be') == 'TB or not TB'\nassert solution('a ab a a b ab a a b c') == 'AAAB AABA'\nassert solution('aa bb aa aa bb bb') == 'AB AAAB AB'\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"aa bb aa aa bb bb\") == 11\nassert solution(\"aa bb aa aa bb bb\") == 11"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('to be or not to be') == 'TB or not TB'\nassert solution('a ab a a b ab a a b c') == 'a AAAB aa AB bb'\nassert solution('aa bb aa aa bb bb') == 'AAAB AA AB'\nassert solution('a b c') == 'ABC'\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\n\"\"\""
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\nassert solution(\"ab aa ab bb\") == 8\nassert solution(\"a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa a"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\n\"\"\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\nto be or not to be') == '12'\nassert solution('10\\na ab a a b ab a a b c') == '13'\nassert solution('6\\naa bb aa aa bb bb') == '11'"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('to be or not to be') == '12'\nassert solution('aa bb aa aa bb bb') == '11'\nassert solution('aa bb aa aa bb bb') == '11'"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\n\\n') == ''\nassert solution('\\n\\n1') == '\\n\\n1'\nassert solution('\\n1\\n') == '\\n1\\n'\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\n\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"\n\nassert solution(\"4 2\\n1 2000 2\") == \"4000\\n2 2\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2') == '20\\n3 2 3'\nassert solution('5 1\\n1 1 1 1 1') == '1\\n5'\n\n\"\"\""
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''8 3\n5 4 2 6 5 1 9 2''') == '20\nassert solution('''5 1\n1 1 1 1 1''') == '1\nassert solution('''4 2\n1 2000 2000 2''') == '4000\nassert solution('''8 2\n1 1 1 1 1 1 1 1''') == '2\nassert solution('''1 1\n1''') == '1\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2\\n') == '20'\nassert solution('5 1\\n1 1 1 1 1\\n') == '1'\nassert solution('4 2\\n1 2000 2000 2\\n') == '4000'\n\"\"\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''8 3\n5 4 2 6 5 1 9 2\n''') == \"20\n3 2 3\"\nassert solution('''5 1\n1 1 1 1 1\n''') == \"1\n5\"\nassert solution('''4 2\n1 2000 2000 2\n''') == \"4000\n2 2\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2\\n') == '20'\nassert solution('5 1\\n1 1 1 1 1\\n') == '1'\nassert solution('4 2\\n1 2000 2000 2\\n') == '4000'\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n\") == \"3 2\\n\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"1 5\\n\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 2000 2000 2') == '4000\\n2 2'\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2\\n') == \"20\\n3 2 3\"\nassert solution('5 1\\n1 1 1 1 1\\n') == \"1\\n5\"\nassert solution('4 2\\n1 2000 2000 2\\n') == \"4000\\n2 2\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 -5 3 2\") == \"1\"\nassert solution(\"5\\n4 -2 3 -9 2\") == \"0\"\nassert solution(\"9\\n-1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8\\n16 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 -3 2\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 -2 3 -9 2') == '0'\nassert solution('5 -2 3 -9 2') == '1'\nassert solution('9 -1 1 -1 1 -1 1 1 -1 -1') == '6'\nassert solution('8 -5 -11 -15 10 5 4 -4') == '3'"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"1\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\""
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -1 1 -1 1 -1 1 1 -1 -1\") == \"3\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 -2 3 -9 2') == '0'\nassert solution('5 -2 3 -9 2') == '1'\nassert solution('9 -1 1 -1 1 -1 1 1 -1 -1') == '6'\n\n-----\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n1 -5 3\n''') == '1'\nassert solution('''4\n1 -5 3 2\n''') == '0'\nassert solution('''5\n4 -2 3 -9 2\n''') == '0'\nassert solution('''8\n16 -5 -11 -15 10 5 4 -4\n''') == '3'\n\n\"\"\"\n\n\nfrom typing import List, Set, Dict"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 -5 3 2') == '1'\nassert solution('5\\n4 -2 3 -9 2') == '0'\nassert solution('9\\n-1 1 -1 1 -1 1 1 -1 -1') == '6'\n\"\"\""
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 -2 3 -9 2') == '0'\nassert solution('5 -1 1 -1 1 -1 1 1 -1 -1') == '3'\nassert solution('9 -1 1 -1 1 -1 1 1 -1 -1') == '6'\nassert solution('8 -1 1 -1 1 -1 1 1 -1 -1') == '3'\n\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nn = int(sys.argv[1])\na = [int(i) for i in sys.stdin.readline().strip().split()]\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 100\\n2 2\") == '0'\nassert solution(\"1 100\\n2 1000000000\") == '2000000000'\nassert solution(\"1 100\\n2 1000000000\") == '2000000000'\nassert solution(\"1 100\\n2 1000000000\") == '2000000000'\nassert solution(\"1 100\\n2 1000000000\") == '2000000000'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 100') == '0'\nassert solution('2 2') == '0'\nassert solution('5 5') == '0'\nassert solution('1 100') == '0'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\\n') == '0\\n2\\n10\\n1000000000\\n2000000000'\nassert solution('5\\n1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\\n') == '0\\n2\\n10\\n1000000000\\n2000000000'\n\n\"\"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 100\\n1 100\") == '0'\nassert solution(\"6 10\\n1 10\") == '1'\nassert solution(\"8 1000\\n3 1000\") == '8'\n\"\"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 100') == '0'\nassert solution('4 10') == '2'\nassert solution('4 10') == '2'\nassert solution('4 100') == '0'\nassert solution('4 10') == '2'\n\n\"\"\"\n\nimport os\nimport sys\nimport io"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 100\") == \"0\"\nassert solution(\"1 100\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"2 1000000000\") == \"2000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 10\") == \"0\"\nassert solution(\"5 100\") == \"2\"\nassert solution(\"4 1000000000\") == \"10000000000\"\nassert solution(\"1 1000000000\") == \"10000000000\"\nassert solution(\"1 1000000000 1000000000\") == \"2000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 100') == '0'\nassert solution('2 2') == '0'\nassert solution('5 5') == '0'\nassert solution('1 100') == '0'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 100\\n10 10\\n9 10\\n10 9\\n10 10\\n9 9\\n10 10\\n9 10\\n10 9\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n9 10\\n10 10\\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"101\") == \"4\"\nprint(solution(\"101\"))\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('101') == '4'\nprint(solution('101'))\n\"\"\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''101''') == '''4'''\nassert solution('''101''') == '''4'''\nassert solution('''101''') == '''4'''\nassert solution('''101''') == '''4'''\nassert solution('''101''') == '''4'''\n\n'''\nYou can solve this with array indexing!\n'''\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('101') == '4'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101\") == \"4\"\nassert solution(\"11\") == \"1\"\n\"\"\"\n\nfrom math import ceil\n\nk = int(stdin.readline().strip())\n\nnums = {str(i): False for i in range(k)}\n\nfor i in range(2, k):\n    if not nums[str(i)]:\n        for j in range(i*i, k, i):\n            nums[str(j)] = True\n\nnums[\"7\"] = False\nnums[\"77\"] = False\nnums[\"777\"] = True\n\nfor i in range(7, k):\n    if not nums[str(i)]:\n        print(i)\n        break\nelse:\n    print(-1)\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''101''') == '4'\nassert solution('''101''') == '-1'\nassert solution('''101''') == '-1'\nassert solution('''101''') == '-1'\nassert solution('''101''') == '-1'\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\"\n\nfrom math import ceil\n\nK = int(stdin.readline())\ni = 0\n\nwhile True:\n    i += 1\n    if i % K == 0:\n        print(i)\n        break\n    if i > 10 ** 6:\n        print(-1)\n        break\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\"\n\nK = int(stdin.readline().strip())"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_expected\n\"\"\""
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 4\n2 4 5 3 1\n''') == '4'\nassert solution('''5 5\n1 2 3 4 5\n''') == '1'\nassert solution('''15 8\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\n''') == '48'\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4') == '1'\nassert solution('5 5') == '1'\nassert solution('5 4') == '0'\nassert solution('1 2 3 4 5') == '0'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n2 4 5 3 1') == '4'\nassert solution('5 5\\n1 2 3 4 5') == '1'\nassert solution('15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9') == '48'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == '4'\nassert solution(\"5 5\\n1 2 3 4 5\") == '1'\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == '48'\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\") == \"4\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\") == \"4\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"15 8\") == \"48\"\n\"\"\""
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4\\n2 4 5 3 1') == '4'\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import permutations"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"5 4\n2 4 5 3 1\"\"\"\n) == '4'\n\nassert solution(\n\"\"\"5 5\n1 2 3 4 5\"\"\"\n) == '1'\n\nassert solution(\n\"\"\"15 8\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\"\"\"\n) == '48'\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\") == '4'\n\"\"\"\n\nfrom typing import List\n\nfrom modules.utils import read_as_int_list\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8\\n2 3 1 1 2\\n\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\\n\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"2\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\n\n\n-----Problem-----\n\n\u041f\u043e\u043c\u043e\u0433\u0438\u0442\u0435 \u0411\u043e\u0440\u0438\u0441\u0443 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u0442\u044c \u0441\u0435\u0431\u0435 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u0443\u044e \u0438\u0433\u0440\u0443 \u00ab\u041b\u0430\u043f\u043b\u0430\u0441\u00bb.\n\n\u0423 \u0438\u0433\u0440\u043e\u043a\u0430 \u0435\u0441\u0442\u044c $n$ \u043f\u0430\u043b\u043e\u0447\u0435\u043a \u0438\u0437 $n$ \u043a\u043e\u0441\u0442\u0435\u0439. \u0418\u0433\u0440\u043e\u043a \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u0441\u0442\u0438, \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u0441\u0442\u044c \u0438 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u0441\u0442\u0435\u0439 \u0443\u0436\u0435 \u0441\u043e\u0431\u0440\u0430\u043d\u043e. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0432\u044b\u0434\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u0441\u0442\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u0438\u0433\u0440\u043e\u043a.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u044f\n\n\u0418\u0433\u0440\u043e\u043a \u043c\u043e\u0436\u0435\u0442 \u043e\u0431\u043c\u0430\u043d\u0443\u0442\u044c \u0441\u043e\u0431\u043e\u0439, \u0435\u0441\u043b\u0438 \u043e\u043d \u043f\u043e\u043a\u0430\u0436\u0435\u0442 \u043a\u043e\u0441\u0442\u044c \u0438 \u043d\u0430\u0437\u0432\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u043e\u043d \u0435\u043c\u0443 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043b. \u0418\u0433\u0440\u043e\u043a \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438. \u041e\u0431\u0449\u0430\u044f \u0438\u0433\u0440\u0430 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u0430, \u0435\u0441\u043b\u0438 \u043e\u043d \u0432\u0441\u0435\u0433\u0434\u0430 \u043d\u0430\u0437\u0432\u0430\u043b \u043a\u043e\u0441\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u043f\u0430\u0434\u0430\u0435\u0442 \u0440\u0430\u043d\u044c\u0448\u0435 \u043a\u043e\u0441\u0442\u0435\u0439.\n\n\u0420\u0430\u0437\u043c\u0435\u0440 \u0432\u0432\u043e\u0434\u0430 \u043d\u0435 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d, \u043d\u043e \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u043e\u0434 \u043a\u043e\u043d\u0435\u0446 \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438. \u0414\u043b\u0438\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 1000 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0412\u044b\u0432\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0434\u0435\u0442 \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435:\n\n\u0427\u0438\u0441\u043b\u043e \u043a\u043e\u0441\u0442\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0431\u0440\u0430\u043b \u0438\u0433\u0440\u043e\u043a \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0431\u043e\u0439;\n\u0427\u0438\u0441\u043b\u043e \u043a\u043e\u0441\u0442\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0431\u0440\u0430\u043b \u0438\u0433\u0440\u043e\u043a \u043f\u043e\u0441"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"5 15\\n5 5 5 5 5\") == '2'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\n\n\"\"\"\n\nn, m = map(int, input().split())\narr = list(map(int, input().split()))\narr.sort()\ndays = 0\nfor i in range(1, len(arr)):\n    days += (arr[i] - arr[i-1])\n    if days > m:\n        print(-1)\n        exit()\nprint(days)\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple\nfrom collections import Counter\n\nMAX_COFFEE_DOSE = 100\nMAX_PAGES = 10000\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nc = [int(i) for i in sys.stdin.readline().split()]\n\nc.sort()\nc = c[::-1]\ncount = 0\n\nfor i in c:\n    count += i // m\n    if i % m == 0:\n        cnt = count\n        break\n    else:\n        cnt = count + 1"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == 4\nassert solution('7 10\\n5 5 5 5 5') == 1\nassert solution('5 15\\n5 5 5 5 5') == 2\nassert solution('5 26\\n5 5 5 5 5') == -1\nassert solution('5 31\\n5 5 5 5 5') == -1\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\\n\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\\n\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 10\\n5 5 5 5 5\\n\") == \"2\"\nassert solution(\"7 15\\n5 5 5 5 5\\n\") == \"-1\"\nassert solution(\"7 26\\n5 5 5 5 5\\n\") == \"1\"\n\nassert solution(\"8 9\\n1 2 3 4 5 6 7 8\\n\") == \"1\"\nassert solution(\"8 11\\n1 2 3 4 5 6 7 8 9 10\\n\") == \"2\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\nassert solution('5 16\\n5 5 5 5 5') == '2'"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 4 2\") == \"1\"\nassert solution(\"5 4 3 2\") == \"1\"\nassert solution(\"2 1 3 4\") == \"3\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"3 3 2 1\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"5 500 500\") == \"0\"\nassert solution(\"3 14 5 1\") == \"1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"5 1 3 6 9 12\") == \"1\""
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n24 21 14 10\") == \"3\"\nassert solution(\"2\\n500 500\") == \"0\"\nassert solution(\"3\\n14 5 1\") == \"-1\"\nassert solution(\"5\\n1 3 6 9 12\") == \"1\""
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 6 8\") == \"1\"\nassert solution(\"5 5 5\") == \"0\"\nassert solution(\"10 12 20 25\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"4 5 6 7\") == \"2\""
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"5 500\") == \"0\"\nassert solution(\"3 14 5 1\") == \"-1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n24 21 14 10\") == \"3\"\nassert solution(\"5\\n500 500\") == \"0\"\nassert solution(\"3\\n14 5 1\") == \"1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n14 5 1\\n') == '3'\nassert solution('2\\n500 500\\n') == '0'\nassert solution('5\\n1 3 6 9 12\\n') == '1'\n\"\"\""
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 21 14 10') == '3'\nassert solution('500 500') == '0'\nassert solution('5 1 3 6 9 12') == '-1'\nassert solution('1 3 6 9 12') == '1'\n\"\"\"\nimport itertools\n\nfrom collections import Counter\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"24 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"1 3 6 9 12\") == \"1\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"1 2 3\") == \"2\"\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 10 100 1000\") == \"4\"\nassert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n1 2 15 15 15\\n') == '5'\n\"\"\""
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 2 3\\n\") == \"5\"\nassert solution(\"4 3\\n2 3 4 4\\n\") == \"4\"\nassert solution(\"5 4\\n9 9 9 9 9\\n\") == \"6\"\nassert solution(\"7 3\\n1 2 3 4 5 6 7\\n\") == \"4\"\nassert solution(\"3 3\\n5 7 9\\n\") == \"3\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\nassert solution(\"4 4\\n1 10 100 1000\") == \"4\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\n\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\na.sort(reverse=True)\n\nwhile k > 1:\n    k -= 1\n    a[-1] -= 5\n    a.sort(reverse=True)\n\nprint(sum(a))"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 2\n1 10 100 1000\n''') == '4'\n\"\"\"\n\nimport heapq\n\nn, k = map(int, input().split())\na = [int(i) for i in input().split()]\npq = []\n\nfor x in a:\n    heapq.heappush(pq, -x)\n    if len(pq) > k:\n        heapq.heappop(pq)\n\nres = 0\nfor i in range(k):\n    res += -heapq.heappop(pq)\n\nprint(res)\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\\n\") == 5\nassert solution(\"6 1\\n36 4 1 25 9 16\\n\") == 2\n\"\"\"\n\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\n\nnums = []\nfor i in range(n):\n    nums.append([i, arr[i]])\n\nnums.sort(key = lambda x: x[1], reverse = True)\n\nsum_ = 0\nfor i in range(k):\n    sum_ += nums[i][1]\n\ni = 0\nwhile k > 1:\n    sum_ -= nums[i][1]\n    k -= 1\n    i += 1\n    sum_ += nums[i][1]\n\nprint(sum_)\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\nassert solution(\"4 4\\n1 10 100 1000\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n1 2 15 15 15\\n') == '5'\nassert solution('6 1\\n36 4 1 25 9 16\\n') == '2'\nassert solution('4 4\\n1 10 100 1000\\n') == '4'\n\"\"\"\nimport sys\nfrom collections import Counter, defaultdict\nfrom itertools import combinations, permutations\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 10 100 1000\") == \"4\"\n\nassert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\n\nassert solution(\"7 4\\n1 10 100 1000 1 100 1\") == \"7\"\n\nassert solution(\"1 1\\n1\") == \"1\"\n\nassert solution(\"4 5\\n1 2 3 4 5\") == \"5\"\n\nprint(\"Success\")"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 10 3 6\\n7 10 3 6\") == \"8\"\nassert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == '8'\n\"\"\"\n\nN, K, M = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\ns = 0\nfor i in range(N - 1):\n    s += A[i]"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 10 3 6\\n5 10 7\") == \"8\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == '8'\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 10 7\n8 10 3 6''') == '8'\nassert solution('''2 10 2\n2 10''') == '-1'\nassert solution('''4 10 5\n4 4 3''') == '-1'\nassert solution('''6 10 2\n6 6 6 6 6''') == '0'\nassert solution('''3 10 5\n1 2 3''') == '3'\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\"\"\"\n\nN, K, Q = map(int, stdin.readline().split())\nscores = []\nfor i in range(N):\n    scores.append(K)\n    K -= 1\n\nfor i in range(Q):\n    scores[int(stdin.readline()) - 1] -= 1\n\nprint(\"Yes\" if not any(scores) else \"No\")\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\"\nassert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\"\nassert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\"\nassert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\"\nassert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 3\\n2\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\n\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''6 3 4\n3\n1\n3\n2''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n\n-----"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == 'Yes'\nassert solution('2') == 'No'\nassert solution('3') == 'Yes'\nassert solution('5 3 1') == 'Yes'\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''6 3 4\n3\n1\n3\n2\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('''6 3 4\n3\n1\n3\n2\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n'''\nIn the beginning, the players' scores are (3, 3, 3, 3, 3, 3).\n - Player 3 correctly answers a question. The players' scores are now (2, 2, 3, 2, 2, 2).\n - Player 1 correctly answers a question. The players' scores are now (2, 1, 2, 1, 1, 1).\n - Player 3 correctly answers a question. The players' scores are now (1, 0, 2, 0, 0, 0).\n - Player 2 correctly answers a question. The players' scores are now (0, 0, 1, -1, -1, -1).\nPlayers 1, 2, 4, 5 and 6, who have 0 points or lower, are eliminated, and Player 3 survives this game.\n'''\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\n\"\"\""
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\n\n\"\"\""
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == 'YES\\n00\\n10'\n\"\"\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n0\\n1') == '10'\nassert solution('2\\n1\\n0\\n0') == '100'\nassert solution('1\\n0\\n1\\n0') == '010'\nassert solution('2\\n0\\n1\\n0\\n0') == '100'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\\n\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\\n\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\\n\") == \"NO\\n010\\n01010\""
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 4\n0 0 0 1\n0 0 0 0\n1 1 1 1''') == 'YES\\n010\\n0000'\nassert solution('''2 2\n1 1\n0 1''') == 'YES\\n10'\nassert solution('''2 2\n0 1\n1 0''') == 'YES\\n10'\nassert solution('''2 2\n1 0\n1 0''') == 'YES\\n010'\nassert solution('''1 1\n1''') == 'YES\\n010'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n10\\n1\\n1\\n1\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n010\\n101010\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\\n\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\\n\") == \"YES\\n010\\n0000\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n1 1\\n0 1') == 'YES\\n010'\nassert solution('3 4\\n0 0 0\\n0 0 0\\n1 1 1\\n') == 'YES\\n010\\n0000'\nassert solution('3 3\\n0 0 0\\n1 0 1\\n1 1 0\\n') == 'NO\\n010\\n010'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\n\"\"\""
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n1 1\\n0 1') == 'YES\\n00\\n10'\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"121\") == \"Yes\"\nassert solution(\"121\") == \"Yes\"\nassert solution(\"121\") == \"Yes\"\nassert solution(\"121\") == \"Yes\"\nassert solution(\"121\") == \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"423\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"311\") == \"Yes\"\nassert solution(\"121\") == \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('121') == 'No'\nassert solution('436') == 'Yes'\nassert solution('373') == 'Yes'\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"436\"\n) == \"Yes\"\n\nassert solution(\n\"121\"\n) == \"No\"\n\nassert solution(\n\"543\"\n) == \"Yes\"\n\nassert solution(\n\"857\"\n) == \"No\"\n\nassert solution(\n\"475\"\n) == \"Yes\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('123') == 'Yes'\nassert solution('345') == 'Yes'\nassert solution('978') == 'No'\nassert solution('22') == 'No'\nassert solution('7') == 'No'\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 2 1\n0 1 0 1 0''') == '5'\n\nassert solution('''6 2 1\n1 0 0 1 0 1''') == '3'\n\nassert solution('''1 2 3\n0 1 0''') == '0'\n\nassert solution('''4 2 3\n0 1 1 1''') == '2'\n\nassert solution('''6 1 3\n1 1 0 1 1 1''') == '2'"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\nassert solution(\"5 3 2\\n0 0 1 0 0\") == \"5\"\nassert solution(\"6 3 2\\n1 0 0 1 0 1\") == \"3\"\nassert solution(\"5 3 3\\n0 1 0 1 0\") == \"5\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == 5\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == 3\nassert solution(\"6 2 1\\n1 1 1 1 1\") == 1\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\nassert solution(\"4 2 1\\n1 0 0 1\") == \"2\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\nassert solution(\"5 1 1\\n1 0 0 1 0\") == \"3\"\nassert solution(\"6 1 1\\n0 1 0 1 0\") == \"2\"\nassert solution(\"7 1 1\\n0 1 0 1 0 1\") == \"2\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\n\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == '4'\nassert solution(\"2+2\") == '-46'\nassert solution(\"112-37\") == '375'"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"0\"\nassert solution(\"112-37\") == \"375\"\nassert solution(\"6+2*2\") == \"10\"\nassert solution(\"8+9-10+11-12*13/14\") == \"-10\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"8-7+6-5+4-3+2-1-0\"\n) == \"4\"\nassert solution(\n    \"2+2\"\n) == \"-46\"\nassert solution(\n    \"112-37\"\n) == \"375\"\n\n\"\"\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n\n-----Notes-----\n\nIf you're confused about the result, go back to the problem statement and check the description of the problem.\n\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\"\"\"\nimport re"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n\n\"\"\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\"\"\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == 4\nassert solution('2+2') == -46\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"YES\\n3 1\\n1 3\\n3 2\\n2 3\"\nassert solution(\"10 4\") == \"YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n3 2\"\nassert solution(\"13 4\") == \"NO\\n\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n') == 'YES'\nassert solution('10 4\\n') == 'YES'\nassert solution('13 4\\n') == 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3') == 'YES\\n3 1\\n1 3\\n3 2\\n2 3\\n'\nassert solution('10 4') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n'\nassert solution('13 4') == 'NO\\n'\n\"\"\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"4 3\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"4 3\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"4 3\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"4 3\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"4 3\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 3''') == 'YES\\n3 1\\n1 3\\n3 2'\nassert solution('''10 4''') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1'''\nassert solution('''13 4''') == 'NO\\n'''\nassert solution('''7 4''') == 'YES\\n1 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1'''\nprint(solution(input()))\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\nassert solution(\"100 4\") == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 3\n''') == 'YES\n3 1\n1 3\n3 2\n2 3\n2 1\n1 3\n3 1\n3 2\n2 3\n4 1\n1 4\n3 1\n2 4\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n2 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n\"\"\"\n\nn, k = map(int, input().split())"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('10 4') == 'YES'\nassert solution('13 4') == 'NO'\nassert solution('1 2') == 'NO'\n\nassert solution('1 1') == 'YES'\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == 18\n\"\"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 3\\n1 1 1 1') == -1\nassert solution('5 2 3\\n1 2 1 3 10 1') == 10\nassert solution('6 1 5\\n10 30 30 70 10 10') == 100\nassert solution('4 2 3\\n1 2 1 3') == 4\nassert solution('5 2 3\\n1 2 1 3 10 1') == 10\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 2 3\n5 1 3 10 1''') == '18'\nassert solution('''6 1 5\n10 30 30 70 10 10''') == '-1'\nassert solution('''4 3 1\n1 100 1 1''') == '100'\nassert solution('''5 3 2\n5 1 3 10 1''') == '-1'\nassert solution('''4 2 1\n1 100 1 1''') == '100'\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == '18'\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 1\\n1 100 1 1') == '100'\nassert solution('5 2 3\\n5 1 3 10 1') == '18'\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\"\n\"\"\"\n\nn, k, x = [int(x) for x in input().split()]\na = [int(a) for a in input().split()]\n\na_sum = 0"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1 3\\n5 1 3 10 1') == '18'\n\"\"\"\n\n\"\"\"\n4 6 4\n1 100 100 100 30 100\n\"\"\""
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == output()\nprint(\"Success!\")\n\n\"\"\"\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == '18'\n\"\"\""
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 3 10 1\\n5 1 3 10 1\") == 18\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0101\") == \"2\"\nassert solution(\"11101010\") == \"3\"\nassert solution(\"101\") == \"1\"\nassert solution
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100101\") == \"3\"\nassert solution(\"100010\") == \"3\"\nassert solution(\"100111\") == \"3\"\nassert solution(\"101111\") == \"5\"\nassert solution(\"101101\") == \"6\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('00100') == 3\nassert solution('01110') == 10\nassert solution('11110') == 9\n\nassert solution('11100') == 3\nassert solution('11010') == 7\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 4\") == \"0\"\nassert solution(\"10 5\") == \"2\"\nassert solution(\"10 6\") == \"3\"\n\"\"\"\n\nfrom itertools import chain"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"01110\") == 5\nassert solution(\"01110\") == 5\nassert solution(\"11010\") == 12\nassert solution(\"01110\") == 5\n\n\"\"\""
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11100110011100110011111111\") == \"15\"\nassert solution(\"10101110011101111111111101\") == \"21\"\nassert solution(\"10101110011101111111111101\") == \"21\"\nassert solution(\"10101110011101111111111101\") == \"21\"\nassert solution(\"10101110011101111111111101\") == \"21\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11001110') == 3\nassert solution('101101101') == 2\nassert solution('1010101010') == 6\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"11111\") == 1\nassert solution(\"111110\") == 2\nassert solution(\"101010\") == 7\nassert solution(\"01101010\") == 10\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100100') == '1010'\nassert solution('100010') == '101010'\nassert solution('101010') == '10101010'\nassert solution('10001') == '1010'\nassert solution('10011') == '1011'\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('00100') == '3'\nassert solution('10000') == '10'\nassert solution('10011') == '5'\nassert solution('01110') == '6'\nassert solution('11010') == '6'\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('azzel') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"azzel\") == \"Yes\"\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\n\n\"\"\"\nimport unittest\n\nclass SolutionTest(unittest.TestCase):\n    def test_solution(self):\n        assert solution(\"azzel\") == \"Yes\"\n        assert solution(\"apple\") == \"Yes\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('hello') == 'No'\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\n\n---\n\n\n\nWrite 5 lines of code to test the correctness of solution:\nYou are given strings S and T consisting of lowercase English letters.\nYou can perform the following operation on S any number of times:\nOperation: Choose two distinct lowercase English letters c_1 and c_2, then replace every occurrence of c_1 with c_2, and every occurrence of c_2 with c_1.\nDetermine if S and T can be made equal by performing the operation zero or more times.\n\n-----Constraints-----\n - 1 \\leq |S| \\leq 2 \\times 10^5\n - |S| = |T|\n - S and T consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\nT\n\n-----Output-----\nIf S and T can be made equal, print Yes; otherwise, print No.\n\n-----Sample Input-----\nazzel\napple\n\n-----Sample Output-----\nYes\n\n-----Sample Input-----\nazzel\napple\n\n-----Sample Output-----\nYes\n\nSolution is available in the other \"Implement Your Own\".\n\nBest Practices\n1. Your solution should be accepted by the other participants without any modifications.\n2. Do not use class, methods, or variables that are prefixed by '__'.\n3. Use triple single quotes to enclose your code and use a specific language to format it.\n\nIMPROVEMENT\n1. Find a way to improve your solution to make it more performant.\n2. Write test cases to test your solution and ensure it meets all the requirements.\n\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(A) == B\nprint(solution(A))\n\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'a'\nassert solution('abba') == 'a'\nassert solution('abb') == 'b'"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('azazel') == 'Yes'\nassert solution('apple') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 15 100 10 100\") == \"25 150\"\nassert solution(\"10 10 100 1 1\") == \"50\"\nassert solution(\"100 100 100 1 1\") == \"101\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5 4 20\") == \"20\"\nassert solution(\"3 5 2 20\") == \"16\"\nassert solution(\"2 2 1 10\") == \"10\"\n\"\"\"\n\nimport itertools\nimport sys\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 1 2\") == \"4\"\nassert solution(\"3 3 1 2\") == \"5\"\nassert solution(\"1 10\") == \"10\"\n\"\"\""
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 6 3 5 2') == '5'\nassert solution('6 3 5 2') == '5'\nassert solution('6 3 5 1') == '10'\nassert solution('1 1 1 1 1 1') == '0'\nassert solution('1 1 1 1 1') == '0'\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == \"Unsatisfiable\"\nassert solution(\"1 1 0 0 1 1\") == \"Satisfiable\"\nassert solution(\"1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 3 2\") == \"4\"\nassert solution(\"3 1 3 2\") == \"3\"\nassert solution(\"1 1 3 2\") == \"1\"\nassert solution(\"1 1 1 1\") == \"2\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 2\") == \"4\"\nassert solution(\"8 5 3\") == \"4\"\nassert solution(\"9 7 3\") == \"6\"\nassert solution(\"7 7 7\") == \"1\"\nassert solution(\"7 1 1\") == \"6\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 1 1\") == \"2\"\nassert solution(\"1 1 5\") == \"4\"\nassert solution(\"1 1 1 1 1 1\") == \"0\"\n\"\"\"\n\nimport sys\nfrom math import gcd"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 1 2 1 2\") == \"10\"\nassert solution(\"3 5 1 2 1 2\") == \"5\"\n\"\"\""
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''10\n4 1 5 2 3\n5 5 6 6 5\n3 9 2 3 3\n1 2 3 4 5\n6 7 4 8 3\n9 1 1 9 1\n9 1 1 1 9\n7 2 2 4 1\n3 2 1 1 1\n9 4 4 7 4\n9 4 4 4 4\n9 1 4 5 1\n7 1 2 3 4\n5 9 4 7 3\n5 5 5 6 6\n9 1 4 1 1\n9 4 4 1 4\n1 2 3 4 3\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n7 1 2 3 4\n5 1 2 3 1\n5 5 5 6 6\n5 1 2 1 1\n5 1 2 3 3\n5 1 2 1 2\n5 1 2 3 4\n3 1 2 4 1\n1 1 1 1 1\n1 2 2 1 2\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4 4\n5 2 1 3 4\n5 4 4 4 4\n9 1 4 1 1\n9 1 4 1 1\n1 1 1 1 1\n1 2 1 2 1\n9 1 4 1 1\n7 1 4 1 1\n7 4 4 4"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == '3'\n\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == 3\nprint(solution('2 700\\n3 500\\n5 800'))\n\n-----Explanation-----\nThe first line indicates that there are two problems, each with 100 points, and five problems, each with 200 points.\nThe second line indicates that Takahashi has an objective of 700 points or more.\nTo achieve this objective, he will need to solve three 200-point problems and earn a base score of 800 points.\nIf we solve three 100-point problems, we can earn the perfect bonus of 500 points in addition to the base score of 300 points, for a total score of 900 points, and we can achieve the objective with fewer problems.\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n2 700\n3 500\n5 800\n''') == '3'\nassert solution('''\n2 7\n3 5\n5 8\n''') == '3'\nassert solution('''\n3 7\n7 7\n7 7\n''') == '1'\nassert solution('''\n3 10\n1 5\n2 5\n3 4\n''') == '3'\nassert solution('''\n3 10\n1 2\n3 4\n''') == '1'\n\n-----Explanation-----\nIf Takahashi wants to have a total score of 700 or more points, he can solve three problems each with 100 points and one problem each with 200 points.\n'''\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == 3\n\"\"\"\n\n\nimport unittest\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 300\\n500 300\\n800 300\") == \"3\"\n\"\"\"\nimport sys\n\nfrom functools import reduce\n\nsys.stdin = open(\"in\", \"r\")\n\nD, G = map(int, input().split())\n\nsolves = list()\nfor i in range(D):\n    solves.append([100 * (i + 1), int(input().split()[1])])\n\nsolves.sort(key=lambda x: x[0], reverse=True)\n\nsolves = solves[::-1]"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 800\\n100 200\\n300 400\\n400 300\\n700 350\\n350 400\\n700 400\\n600 200\") == \"2\"\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 200\\n300 500\\n200 300\\n500 200\") == \"4\"\nassert solution(\"5 700\\n3 500\\n5 800\") == \"3\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3 2 2 3 2 2 4\") == 2\nassert solution(\"5 5 4 5 5 5 6\") == 2\nassert solution(\"2 3 4 2 2 3 2 2 4\") == 3\nassert solution(\"3 3 4 2 2 3 2 2 4\") == 3\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nlines = open(sys.argv[1]).readlines()\nn = int(lines[0])\nweights = [int(x) for x in lines[1].split(\" \")]\n\nodd = 0\neven = 0\n\nfor index, weight in enumerate(weights):\n    if index % 2 == 0:\n        even += weight\n    else:\n        odd += weight\n\nprint(odd, even)\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4') == '3'"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6') == 2\n\n\"\"\"\n\nimport io\nimport sys\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4') == '3'\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 1\\n1 100 1 1\\n') == '100'\nprint(solution(stdin.read()))\n\n\"\"\"\nimport heapq"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(    \"5 2 3\\n5 1 3 10 1\") == 18\nassert solution(    \"6 1 5\\n10 30 30 70 10 10\") == -1\nassert solution(    \"4 3 1\\n1 100 1 1\") == 100\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1 3\\n5 1 3 10 1\\n') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10\\n') == '-1'\n\"\"\"\n\nn, k, x = list(map(int, input().split()))\na = list(map(int, input().split()))"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\") == 100\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == -1\nassert solution(\"5 2 3\\n5 1 3 10 1\") == 18\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 3\") == '100'\nassert solution(\"5 1 3\") == '100'\nassert solution(\"5 2 3\") == '-1'\nassert solution(\"5 1 4\") == '-1'\nassert solution(\"5 2 5\") == '-1'\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3,1,5) == 10\nassert solution(5,1,3) == 18\nassert solution(4,1,1) == 10\nassert solution(2,1,2) == 10\nassert solution(3,2,1) == -1\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 5\\n10 30 30 70 10 10\") == \"18\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 5\") == '100'\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 1\\n1 100 1 1\\n') == '100'\nassert solution('4 3 2\\n1 100 1 1\\n') == '-1'\nassert solution('5 3 2\\n10 30 10 10\\n') == '110'\nassert solution('6 1 5\\n10 30 10 10\\n') == '10'\n\n-----Citations-----\n\n\"\"\"\n\n\"\"\"\nhttps://codeforces.com/blog/entry/62496\n\n\"\"\"\n\n\nn, k, x = map(int, input().split())\n\na = list(map(int, input().split()))\n\nres = 0\nm = 0\n\nfor i in range(k, n + 1):\n    if sum(a[i - k:i]) > m:\n        m = sum(a[i - k:i])\n    if m >= x:\n        print(m)\n        exit(0)\n    res += m\n\nprint(-1)\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 1\\n10 10 10\\n') == '10'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11\") == 'Yes'\n\n-----Tests-----\n\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11\") == \"Yes\"\nassert solution(\"5\") == \"No\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1) == \"Yes\"\nassert solution(2) == \"Yes\"\nassert solution(3) == \"Yes\"\nassert solution(4) == \"Yes\"\nassert solution(5) == \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11\\n') == 'Yes'\nassert solution('12\\n') == 'No'\nassert solution('20\\n') == 'No'\nassert solution('21\\n') == 'Yes'\nassert solution('25\\n') == 'Yes'\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11\\n') == 'Yes'\nassert solution('4\\n') == 'No'\nassert solution('13\\n') == 'No'\n\"\"\"\n\nimport unittest\nimport sys\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"Yes\"\nassert solution(\"11\") == \"Yes\"\nassert solution(\"1\") == \"No\"\nassert solution(\"0\") == \"No\"\nassert solution(\"2\") == \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\") == \"Yes\"\nassert solution(\"100\") == \"No\"\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\") == \"Yes\"\nassert solution(\"1\") == \"No\"\nassert solution(\"3\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 1 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\nassert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\nassert solution(\"4\\n5 6 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"5 2 6\"\nassert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\nassert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n\nN = int(input())\nx_list = [int(i) for i in input().split()]\ny_list = [int(i) for i in input().split()]\nh_list = [int(i) for i in input().split(\":\")]\n\nfor x, y, h in zip(x_list, y_list, h_list):\n    print(x, y, h)\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n\") == '2 2 6'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n\") == '2 2 6'\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == '2 2 6'\n\nimport unittest\nimport sys\nimport io\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdin, stdout = sys.stdin, sys.stdout\n        sys.stdin, sys.stdout = None, None\n        sys.stdin = io.StringIO(input)\n        sys.stdout = io.StringIO()\n        main()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdin, sys.stdout = stdin, stdout\n        self.assertEqual(out, output)\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"4\n2 3 5\n2 1 5\n1 2 5\n3 2 5\"\"\"\n        output = \"\"\"2 2 6\"\"\"\n        self.assertIO(input, output)\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"4\n2 1 5\n1 2 5\n3 2 5\"\"\"\n        output = \"\"\"2 1 6\"\"\"\n        self.assertIO(input, output)"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('redcoder') == '1'\n\nprint(solution('redcoder'))\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('redcoder') == '1'\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('coder') == '5'\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"redcoder\") == \"1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"redcoder\") == 1\nassert solution(\"ababab\") == 0\n\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('redcoder') == 1\nassert solution('aabbbaa') == 3\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == 'Yes'\nassert solution('11') == 'No'\nassert solution('100') == 'No'\nassert solution('111') == 'Yes'\nassert solution('999') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == 'Yes'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"100\") == \"No\"\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\n\n\"\"\"\n\nimport ast\nimport random\nimport sys"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == 'Yes'\nassert solution('123') == 'No'\nassert solution('5') == 'No'\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == 'Yes'\nassert solution('5') == 'Yes'\nassert solution('7') == 'No'\nassert solution('11') == 'No'\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''10\n''') == 'Yes'\nassert solution('''2\n''') == 'No'\nassert solution('''0\n''') == 'No'\nassert solution('''5\n''') == 'No'\nassert solution('''1\n''') == 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == 'Yes'\nassert solution('7') == 'No'\nassert solution('100') == 'No'\nassert solution('20') == 'Yes'\nassert solution('9') == 'Yes'\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Yes'\nassert solution('10') == 'Yes'\nassert solution('100') == 'No'\n'''\n\nfrom collections import Counter\n\nn = int(input())\n\ns = set()\n\nfor i in range(1, 10):\n    for j in range(1, 10):\n        s.add(i * j)\n\nc = Counter(s)\n\nfor x in range(1, n):\n    x *= 2\n    if x in s:\n        print('Yes')\n        break\nelse:\n    print('No')\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4 9 7 5') == '5'\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('10') == ''\nassert solution('20 20 1') == ''\nassert solution('20 20 2') == ''\nassert solution('1 2 3') == ''\n\n'''\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n4 4 9 7 5') == '5'\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n4 4 9 7 5\") == \"5\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 4 9 7 5\") == \"5\"\n\"\"\"\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4 9 7 5') == '5'\nprint(solution(stdin))\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n4 4 9 7 5''') == '5'\nassert solution('''1\n4 2 3''') == '0'\nassert solution('''2\n1 1 1''') == '1'\nassert solution('''4\n3 3 3''') == '1'\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '25'\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n4 4 9 7 5''') == '5'\nassert solution('''5\n1 1 1 1 1''') == '0'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5\\n') == '10'\n\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n2 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == 2\nassert solution(\"1 3\") == -1\nassert solution(\"2 4\") == 6\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 5''') == '10'\n\"\"\"\n\na, b = map(int, stdin.split())\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('10 11') == '-1'\n'''\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"10\"\nassert solution(\"2 4\") == -1\nassert solution(\"0 0\") == -1\nassert solution(\"1 1\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\") == \"10\"\nprint(solution(\"2 5\"))\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5') == '10'\n\"\"\"\n\na, b = map(int, stdin.split())"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\nassert solution(\"3 5\\n10 12 1 2 14\") == \"4\"\nassert solution(\"4 5\\n10 12 1 2 14\") == \"3\"\n\n-----Explanation-----\nWe can play this game by following the moves:\n - Initially, we place the two pieces at coordinates 1 and 10.\n - Move the piece at coordinate 1 to 2.\n - Move the piece at coordinate 10 to 11.\n - Move the piece at coordinate 11 to 12.\n - Move the piece at coordinate 12 to 13.\n - Move the piece at coordinate 13 to 14.\n\nIn the figure, all of the coordinates have been visited at least once.\n\nThe minimum number of moves required to achieve the objective is 5.\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n2 5\n10 12 1 2 14\n''') == '5'\nprint(solution(stdin))\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6\\n1 5 3 2 4\") == \"3\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('2 3') == '3'\nassert solution('7 3') == '6'\nassert solution('2 5') == '5'\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == 5\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('N M\\nX_1 X_2... X_M') == ''\n\"\"\"\nfrom __future__ import annotations\n\nfrom collections import deque\nfrom dataclasses import dataclass\nfrom typing import Dict, Deque, Tuple\n\nfrom utils import read_input_into_ints, run_tests\n\n\n@dataclass\nclass Stack:\n    value: int\n    visited: Dict[int, Tuple[int, int]]\n    position: Deque[int]\n\n\n@dataclass\nclass Grid:\n    grid: Dict[int, Tuple[int, int]]\n\n    @classmethod\n    def from_deque(cls, deque: Deque[int]) -> Grid:\n        grid = {deque.popleft(): (0, 0)}\n        for value in deque:\n            grid[value] = (grid[value][0] + 1, 0)\n            grid[value] = (grid[value][0], grid[value][1] + 1)\n        return Grid(grid)\n\n\n@dataclass\nclass Memory:\n    stack: Deque[Stack]\n    grid: Grid\n    stack_pos: Dict[int, Tuple[int, int]]\n    grid_pos: Dict[int, Tuple[int, int]]\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 12 1 2 14\\n') == '5'\nassert solution('3 2\\n2 1 3') == '0'\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\\n1011\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"1\\n101001\\n111010\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\\n1011\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 6 3\n1 2\n2 3\n1 4\n4 3''') == '1011'\nassert solution('''5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5''') == '111100'\nassert solution('''4 6 3\n1 2\n2 3\n1 4\n4 3\n2 4\n1 3''') == '1011'\nassert solution('''5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5''') == '111100'\nassert solution('''4 6 3\n1 2\n2 3\n1 4\n4 3\n2 4\n1 3\n''') == '1011'\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 6 3\n1 2\n2 3\n1 4\n4 3''') == '1011'\nassert solution('''4 6 3\n1 2\n2 3\n1 4\n4 3\n2 4\n1 3''') == '111100'\nassert solution('''5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5''') == '111010'\nassert solution('''5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5''') == '111110'\nassert solution('''1 2\n2 3''') == '11'\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\"\nassert solution(\"5 6 1\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n') == '1110\\n1011\\n'\nassert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n') == '101001\\n'\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 6 3\n1 2\n2 3\n1 4\n4 3''') == '2\nassert solution('''4 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5''') == '2\nassert solution('''5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5''') == '1\nassert solution('''5 6 1\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5''') == '1\nassert solution('''5 5 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5''') == '0\n'''\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == '2\\n1110\\n1011'\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == expected_result\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\\n1011\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\\n101001\\n\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'YES'\nassert solution('2\\n10 10') == 'YES'\nassert solution('3\\n1 2 3') == 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n2 1 1 2 5\n''') == 'YES'\n\nassert solution('''3\n1 2 3\n''') == 'YES'\n\nassert solution('''2\n10 10\n''') == 'YES'\n\nassert solution('''3\n1 2 3\n''') == 'NO'\n\nassert solution('''2\n10 10\n''') == 'YES'"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 1 2 5') == 'YES'\nassert solution('3 4 5') == 'YES'\nassert solution('2 10') == 'YES'\nassert solution('3 1 2') == 'NO'\n\n'''\n\nfrom math import sqrt\nfrom collections import Counter"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"5\\n2 1 1 2 5\"\n) == \"YES\"\nassert solution(\n    \"3\\n4 5 3\"\n) == \"YES\"\nassert solution(\n    \"2\\n10 10\"\n) == \"YES\"\nassert solution(\n    \"3\\n1 2 3\"\n) == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n1 2 3''') == 'YES'\nassert solution('''2\n10 10''') == 'YES'\nassert solution('''3\n1 2 3''') == 'YES'\nassert solution('''2\n1 1''') == 'NO'\nassert solution('''2\n3 4''') == 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'YES'\nassert solution('2\\n10 10') == 'YES'\nassert solution('3\\n1 2 3') == 'NO'\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\nassert solution(\"3\\n1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5) == \"YES\"\nassert solution(3) == \"YES\"\nassert solution(2) == \"YES\"\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n\n-----Input-----\n\n10 4\n-3 -6 5 4\n\n-----Output-----\n\n-1\n\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\n\"\"\"\n\nH, N = [int(x) for x in stdin.split()]\nd = [int(x) for x in stdin.split('\\n')[1:-1]]\n\nhp = H\ni = 0\nfor val in d:\n    hp += val\n    if hp <= 0:\n        i = 1\n        break\n\nprint(i) if i else print(-1)\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == '9'\n\"\"\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000 6', '-100 -200 -300 125 77 -4') == '9'\n\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\nassert solution(\"1 1\\n1\") == \"1\"\nassert solution(\"0 2\\n1\") == \"1\"\nassert solution(\"0 2\\n2\") == \"2\"\n\"\"\"\n\na,b=map(int,input().split())\nl=list(map(int,input().split()))\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\n\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == '9'\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == '4999999999996'\nassert solution(\"10 4\\n-3 -6 5 4\") == '-1'\n\"\"\""
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\nprint('The code ran Correctly')"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BBAABBBA\") == \"BB\"\nassert solution(\"ABABABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"BA\") == \"BA\"\n\nassert solution(\n\"ABACABA\") == \"AB\"\n\nassert solution(\n\"ZZZAA\") == \"ZZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC\") == \"ABC\"\nassert solution(\"ABCD\") == \"ABC\"\nassert solution(\"ABCDE\") == \"ABCD\"\nassert solution(\"ABCDEF\") == \"ABCD\"\nassert solution(\"ABCDEFG\") == \"ABCD\""
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\nassert solution(\"ABCD\") == \"AB\"\nassert solution(\"ABAC\") == \"AB\"\nassert solution(\"ZBC\") == \"ZB\"\n\n'''"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('AB') == 'AB'\nassert solution('ABA') == 'AB'\nassert solution('ABACABA') == 'AB'\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ZZZAA') == 'ZZ'\n\"\"\""
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\n\"\"\"\nfrom collections import Counter\n\n\"\"\"\n\u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u0431\u043e\u0440\u0435 \u0441\u043b\u043e\u0432 \u0432 \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435. \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0441\u043b\u043e\u0432\u043e \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0438 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441 \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u043e\u0439 \u043f\u0435\u0440\u0432\u043e\u0439 \u0431\u0443\u043a\u0432\u043e\u0439. \u0412\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0441 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0431\u0443\u043a\u0432\u044b. \u0412 \u043d\u0430\u0431\u043e\u0440\u0435 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0434\u0432\u0443\u0445 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0441\u043b\u043e\u0432.\n\nSample Input 1:\n\nwords = ['bat', 'tab', 'cat', 'otter', 'abacus']\nSample Output 1:\n\nbat\nSample Input 2:\n\nwords = ['ape', 'apple', 'april', 'apricot', 'apron', 'ashtray']\nSample Output 2:\n\napple\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'\n\nfor stdin in open(\"./tests.txt\"):\n    pass\n\"\"\""
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('codeforces') == '8'\nassert solution('yes') == '1'\nassert solution('test') == '7'\n\"\"\"\n\nimport sys\nimport queue"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"yes\"\nassert solution(\"test\") == \"est\"\nassert solution(\"b\") == \"ab\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"ab\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"w\"\nassert solution(\"codeforces\") == \"s\"\nassert solution(\"yes\") == \"est\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"where\") == \"here\"\nassert solution(\"a\") == ''\nassert solution(\"codeforces\") == 'es'\nassert solution(\"yes\") == 'es'\nassert solution(\"b\") == 'b'\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('where', 'here') == 2\nassert solution('a', '') == 0\nassert solution('b', 'ab') == 1\nassert solution('codeforces', 'yes') == 9\nassert solution('test', 'yes') == 7\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"b\"\n\"\"\""
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"b\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\ns = stdin\nt = stdin"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == 2\n\"\"\"\n\nn, x = [int(num) for num in stdin.split(\" \")]\nnumbers = sorted([int(num) for num in stdin.split(\"\\n\")[1].split(\" \")])\ndistances = set()\nfor i, num in enumerate(numbers):\n    if num > x:\n        break\n    if i > 0:\n        distances.add(num - numbers[i - 1])\n\nprint(max(distances))\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\nassert solution(\"4 1\\n3 7 11 13\") == \"1\"\nassert solution(\"3 5\\n4 2 3 1\") == \"2\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\n\nimport sys\n\nN, X = map(int, sys.stdin.readline().split())\nXs = list(map(int, sys.stdin.readline().split()))\n\nD = 1\n\nwhile True:\n    current = X + D\n    visited = set()\n\n    for i in range(1, N):\n        if Xs[i] - current > D:\n            break\n        else:\n            visited.add(Xs[i] - current)\n\n    if len(visited) == N:\n        print(D)\n        exit(0)\n\n    D += 1\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3 3\n1 7 11\n''') == '2'\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 7 11\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n1 7 11\\n') == '2'\n\"\"\""
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 7 11') == '2'\n\"\"\"\n\nfrom collections import defaultdict\n\n\nclass Solution:\n    def __init__(self):\n        self.d = defaultdict(lambda: 1)\n        self.x = 0\n\n    def solution(self, stdin):\n        n, x = map(int, stdin.readline().split())\n        self.x = x\n        for i in range(1, n + 1):\n            self.d[self.x + i] = max(self.d[self.x + i], self.d[self.x - i] + 1)\n        return self.d[n * n]\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 7 11') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('akasaka') == \"Yes\"\nassert solution('racecar') == \"Yes\"\nassert solution('noonnoon') == \"Yes\"\nassert solution('racecar') == \"Yes\"\nassert solution('noonnoon') == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a\") == \"Yes\"\nassert solution(\"aab\") == \"Yes\"\nassert solution(\"aaab\") == \"No\"\nassert solution(\"aabaa\") == \"Yes\"\n\n-----------------------------------------------------------------\n### 12.\u7d44\u307f\u5408\u308f\u305b\u7b97\u51fa\n\n- \u89e3\u8aac\nhttps://www.slideshare.net/chokudai/arc098\n\n- \u4e8b\u524d\u6e96\u5099\n1.\u6570\u5b66\u8a08\u7b97\n2.\u8caa\u6b32\u6cd5\n3.\u8a08\u7b97\u56de\u6570\u304c\u4e0a\u9650\u306b\u9054\u3057\u3066\u3082\u8a08\u7b97\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\n- \u30af\u30a8\u30ea\n\u3042\u308b\u7bc4\u56f2\u306b\u3042\u308b\u8907\u6570\u306e\u6570\u3092\u8db3\u3057\u305f\u3044\n\n- \u89e3\u6cd5\n1.\u8caa\u6b32\u6cd5\n\u6570\u306e\u8a08\u7b97\u3092\u4f7f\u3046\u3068\u4ed6\u306e\u8a08\u7b97\u3082\u5fc5\u8981\u3068\u306a\u308b\u305f\u3081\u3001\u8caa\u6b32\u6cd5\u304c\u4e0d\u53ef\u80fd\u3068\u306a\u308b\u3002\n\u56de\u6570\u3092\u4e0a\u9650\u3068\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u308c\u305e\u308c\u306e\u8a08\u7b97\u3092\u884c\u3046\u3002\n\u6570\u306e\u8a08\u7b97\u56de\u6570\u304c\u4e0a\u9650\u306b\u9054\u3059\u308b\u3068\u3001\u305d\u308c\u4ee5\u4e0a\u306e\u8a08\u7b97\u306f\u884c\u308f\u306a\u3044\u3002\n\n2.\u6570\u5b66\u8a08\u7b97\n\u554f\u984c\u3092\u89e3\u304f\u305f\u3081\u306b\u5fc5\u8981\u306a\u8a08\u7b97\u3092\u884c\u3046\n\u8907\u6570\u306e\u6570\u3092\u8db3\u3057\u305f\u3044\u5834\u5408\u306f\u8907\u6570\u306e\u6570\u3092\u4f7f\u3046\u3053\u3068\u3067\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n3.\u4f8b\u5916\n\u8caa\u6b32\u6cd5\u3067\u8a08\u7b97\u304c\u4e0d\u53ef\u80fd\u306b\u306a\u308b\u5834\u5408\u306f\u3001\u4f8b\u5916\u3068\u3059\u308b\u3002\n\u4f8b\u5916\u3068\u306f\u3001\u8a08\u7b97\u3067\u304d\u308b\u306e\u306b\u5fc5\u8981\u306a\u8a08\u7b97\u304c\u4ed8\u4e0e\u3055\u308c\u305f\u6570\u5b57\u3092\u3053\u306e\u9806\u5e8f\u306b\u3059\u308b\u3053\u3068\u3067\u3001\n\u8db3\u3057\u305f\u3044\u6570\u3068\u3057\u3066\u306e\u8a08\u7b97\u56de\u6570\u304c\u4e0a\u9650\u306b\u9054\u3057\u3066\u3082\u3001\u305d\u306e\u8a08\u7b97\u304c\u884c\u308f\u308c\u306a\u3044\u3088\u3046\u306a\u72b6\u614b\u3002\n\u4f8b)110+11+10+1+1=221\n\u3068\u3044\u3046\u8a08\u7b97\u304c\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308b\u3002\n\u305d\u3053\u3067\u3001\u8caa\u6b32\u6cd5\u3067\u306f\u3001\u8a08\u7b97\u56de\u6570\u3092\u4e0a\u9650\u3068\u3059\u308b\u3053\u3068\u3067\u3001\u8a08\u7b97\u304c\u884c\u308f\u308c\u306a\u3044\u3068\u3044\u3046\u4f8b\u5916\u3068\u3059\u308b\u3002\n\u4f8b)110+11+10+1+1=261\n\u3068\u3044\u3046\u8a08\u7b97\u304c\u3055\u308c\u308b\u3002\n\n\n- \u8a08\u7b97\u56de\u6570\n\n- \u8a08\u7b97\u9593\u306e\u6bd4\u8f03\n\n- \u51fa\u529b\n\n- \u611f\u60f3\n\n-----------------------------------------------------------------\n### 13.\u30ea\u30f3\u30af\u30d0\u30ea\u30e5\u30fc\u306e\u91cd\u8907\u9806\u5e8f\n\n- \u89e3\u8aac\nhttps://www.slideshare.net/chokudai/arc098\n\n- \u4e8b\u524d\u6e96\u5099\n1.\u30ea\u30b9\u30c8\u306e\u30bd\u30fc\u30c8\n2.\u8caa\u6b32\u6cd5\n3.\u8a08\u7b97\u56de\u6570\u304c\u4e0a\u9650\u306b\u9054\u3059\u308b\u3068\u304d\u306f\u3001\u4f8b\u5916\u3068\u3059\u308b\u3002\n\n\n- \u30af\u30a8\u30ea\n\u30ea\u30f3\u30af\u30d0\u30ea\u30e5\u30fc\u306e\u91cd\u8907\u9806\u5e8f\u3092\u51fa\u529b\u3057\u305f\u3044\n\n- \u89e3\u6cd5\n1.\u30ea\u30f3\u30af\u30d0\u30ea\u30e5\u30fc\u3092\u30bd\u30fc\u30c8\u3059\u308b\n2.\u8caa\u6b32\u6cd5\n\u30ea\u30f3\u30af\u30d0\u30ea\u30e5\u30fc\u306e\u30ea\u30b9\u30c8\u306e\u8a08\u7b97\u56de\u6570\u304c\u4e0a\u9650\u306b\u9054\u3059\u308b\u3068\u304d\u306f\u3001\u4f8b\u5916\u3068\u3059\u308b\u3002\n\u4f8b)3+2+2+2=7\n\u3068\u3044\u3046\u8a08\u7b97\u304c\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308b\u3002\n\u305d\u3053\u3067\u3001\u8a08\u7b97\u56de\u6570\u3092\u4e0a\u9650\u3068\u3059\u308b\u3053\u3068\u3067\u3001\u8a08\u7b97\u304c\u884c\u308f\u308c\u306a\u3044\u3068\u3044\u3046\u4f8b\u5916\u3068\u3059\u308b\u3002\n\u4f8b)3+2+2+2=9\n\u3068\u3044\u3046\u8a08\u7b97\u304c\u3055\u308c\u308b\u3002\n\n3.\u4f8b\u5916\n\u8caa\u6b32\u6cd5\u3067\u8a08\u7b97\u304c\u4e0d\u53ef\u80fd\u306b\u306a\u308b\u5834\u5408\u306f\u3001\u4f8b\u5916\u3068\u3059\u308b\u3002\n\u4f8b)3+2+2+2+2=15\n\u3068\u3044\u3046\u8a08\u7b97\u304c\u3055\u308c\u308b\u3002\n\u305d\u3053\u3067\u3001\u8caa\u6b32\u6cd5\u3067\u8a08\u7b97\u304c\u884c\u308f\u308c\u308b\u3002\n\n4.\u51fa\u529b\n\u30ea\u30f3\u30af\u30d0\u30ea\u30e5\u30fc\u306e\u91cd\u8907\u9806\u5e8f\u3092\u51fa\u529b\u3059\u308b\u3002\n\u30ea\u30f3\u30af\u30d0\u30ea\u30e5\u30fc\u306f\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u91cd\u8907\u9806\u5e8f\u306e\u30ea\u30b9\u30c8\u306f\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u3002\n\u91cd\u8907\u9806\u5e8f\u306e\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u6570\u304c0\u306a\u3089\u3070\u3001\u30ea\u30b9\u30c8\u306e\u9577\u3055\u304c1\u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3002\n\u305d\u308c\u4ee5\u5916\u306f\u3001\u30ea\u30f3\u30af\u30d0\u30ea\u30e5\u30fc\u306e\u91cd\u8907\u9806\u5e8f\u304c\u30ea\u30b9\u30c8\u306e\u9577\u3055\u3092\u4e0a\u9650\u3068\u3059\u308b\u3002\n\u4f8b)\u30ea\u30f3\u30af\u30d0\u30ea\u30e5\u30fc\u304c[1,2,3]\u306a\u3089\u3070\u3001[1,2,3]\u3068[1,3,2]\u3068[2,1,3]\u306e3\u7a2e\u985e\u304c\u51fa\u529b\u3055\u308c\u308b\u3002\n\n\n- \u611f\u60f3\n\n-----------------------------------------------------------------\n### 14.\u30a4\u30f3\u30c6\u30ea\u30b8\u30a7\u30f3\u30b9\u306e\u91cd\u8907\u9806\u5e8f\n\n- \u89e3\u8aac\nhttps://www.slideshare.net/chokudai/arc098\n\n- \u4e8b\u524d\u6e96\u5099\n1.\u30ea\u30b9\u30c8\u306e\u30bd\u30fc\u30c8\n2.\u8caa\u6b32\u6cd5\n3.\u8a08\u7b97\u56de\u6570\u304c\u4e0a\u9650\u306b\u9054\u3059\u308b\u3068\u304d\u306f\u3001\u4f8b\u5916\u3068\u3059\u308b\u3002\n\n\n- \u30af\u30a8\u30ea\n\u30a4\u30f3\u30c6\u30ea\u30b8\u30a7\u30f3\u30b9\u306e\u91cd\u8907\u9806\u5e8f\u3092\u51fa\u529b\u3057\u305f\u3044\n\n- \u89e3\u6cd5\n1.\u30ea\u30f3\u30af\u30d0\u30ea\u30e5\u30fc\u3092\u30bd\u30fc\u30c8\u3059\u308b\n2.\u8caa\u6b32\u6cd5\n\u30a4\u30f3\u30c6\u30ea\u30b8\u30a7\u30f3\u30b9\u306e\u30ea\u30f3\u30af\u30d0\u30ea\u30e5\u30fc\u306e\u30ea\u30b9\u30c8\u306e\u8a08\u7b97\u56de\u6570\u304c\u4e0a\u9650\u306b\u9054\u3059\u308b"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('mam') == 'No'\nassert solution('asasa') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"Yes\"\nassert solution(\"abca\") == \"Yes\"\nassert solution(\"abcb\") == \"No\"\nassert solution(\"aaba\") == \"Yes\"\nassert solution(\"abbba\") == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == \"Yes\"\nassert solution(\"aab\") == \"Yes\"\nassert solution(\"aabb\") == \"No\"\nassert solution(\"abbb\") == \"Yes\"\nassert solution(\"aaba\") == \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('akasaka') == 'Yes'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"kawakawakawaka\") == \"No\"\nassert solution(\"pwwkew\") == \"Yes\"\nassert solution(\"abccba\") == \"Yes\"\nassert solution(\"abcccba\") == \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('peter') == 'No'\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"198 1.10\") == \"217\"\nprint(solution(\"198 1.10\"))\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\n\"\"\"\n\nfrom typing import List\nimport re"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''198 1.10''') == '217'\nassert solution('''198 1.101''') == '218'\nassert solution('''198 1.10101''') == '2180'\nassert solution('''198 1.101010101010101''') == '2180'\n'''\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\nimport math\na = int(input())\nb = float(input())\nprint(int(math.floor(a * b)))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('198 1.10') == '217'\nprint('Test pass.')"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('198 1.10') == '217'\n\nassert solution('1 2.1') == '5'\n\nassert solution('-1 2.1') == '-5'\n\nassert solution('-1 -2.1') == '-5'\n\nassert solution('-1 -2.1') == '-5'"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n\nfrom typing import Dict, List, Tuple, Union\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\\n\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\\n\"\n\"\"\"\nimport math"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\\n\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\n\"\"\"\n\n\n\nimport sys\nimport numpy as np\n\nclass Solution(object):\n    def read_input(self):\n        t = int(sys.stdin.readline())\n        for _ in range(t):\n            n = int(sys.stdin.readline())\n            return n\n\n    def calculate(self,n):\n        pass\n\n    def solve(self):\n        n = self.read_input()\n        calculated_ans = self.calculate(n)\n        print(calculated_ans)\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n1\\n2\\n3\\n2000000000\\n763243547') == '3\\n0\\n0\\n1\\n999999999\\n381621773'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\n\n\"\"\"\nimport sys\nimport math\n\nsys.stdin = open(\"test_files/Y12R5P1/A.in\")\n\n\"\"\"\n\n\u0412\u0430\u0448\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 HTML \u0444\u0430\u0439\u043b.\n\u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b, \u0437\u0430\u0442\u0435\u043c \u043d\u0430\u0439\u0442\u0438 \u0432 \u043d\u0435\u043c \u0432\u0441\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u0432\u0438\u0434\u0430 <a... href=\"...\"... > \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0430\u0439\u0442\u043e\u0432, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0430.\n\n\u0421\u0430\u0439\u0442\u043e\u043c \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u0431\u0443\u0434\u0435\u043c \u043d\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u043c\u044f \u0434\u043e\u043c\u0435\u043d\u0430 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0438\u043c\u0435\u043d\u0430\u043c\u0438 \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432. \u0422\u043e \u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432 \u0432\u044b\u0432\u043e\u0434\u0435 \u043c\u044b \u043d\u0430\u0439\u0434\u0435\u043c \u0441\u0441\u044b\u043b\u043a\u0443 \n\u0432\u0438\u0434\u0430 <a... href=\"http://abc.com/foo/bar.html\"... >, \u0442\u043e \u0435\u0441\u0442\u044c \u0441\u0430\u0439\u0442 \u0438\u0437 \u0434\u043e\u043c\u0435\u043d\u0430 abc.com/foo/bar.html.\n\n\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u043d\u0435 \u0432\u0441\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u0432\u0438\u0434\u0430 <a... href=\"http://abc.com/foo/bar.html\"... > \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441\u0441\u044b\u043b\u043a\u0430\u043c\u0438, \u043e\u043d\u0438 \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0442 \u044d\u0442\u043e\u043c\u0443 \u0443\u0441\u043b\u043e\u0432\u0438\u044e, \n\u043d\u043e \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441\u0430\u0439\u0442\u0430\u043c\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u0441\u044b\u043b\u043a\u0430 http://ta.ru/abc \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0430\u0439\u0442\u043e\u043c, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u0430 \u043d\u0435 \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u0434\u043e\u043c\u0435\u043d ta.ru.\n\n\u0412 \u0432\u044b\u0432\u043e\u0434\u0435 \u0438\u0437 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0441\u0430\u0439\u0442\u0443 \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0430\u0439\u0442\u043e\u0432.\n\nSample Input 1:\n\nhttp://pastebin.com/raw/hf61dh58\n\nSample Output 1:\n\npastebin.com\npastebin.com\n\nSample Input 2:\n\nhttp://www.google.com/a/\n\nSample Output 2:\n\ngoogle.com\ngoogle.com\n\nSample Input 3:\n\nhttps://pastebin.com/raw/hf61dh58\n\n\nSample Output 3:\n\nhttps://pastebin.com\nhttps://pastebin.com\n\nSample Input 4:\n\nhttp://google.com\n\nSample Output 4:\n\ngoogle.com\n\n\"\"\"\n\nimport re\n\npattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'\n\nwith open('test_files/Y12R5P1/A.in') as f:\n    for line in f:\n        urls = re.findall(pattern, line)\n        print('\\n'.join(urls))\n\n\"\"\"\n\u0412\u0430\u0448\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 HTML \u0444\u0430\u0439\u043b.\n\u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b, \u0437\u0430\u0442\u0435\u043c \u043d\u0430\u0439\u0442\u0438 \u0432 \u043d\u0435\u043c \u0432\u0441\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u0432\u0438\u0434\u0430 <a... href=\"...\"... > \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0430\u0439\u0442\u043e\u0432, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0430.\n\n\u0421\u0430\u0439\u0442\u043e\u043c \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u0431\u0443\u0434\u0435\u043c \u043d\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u043c\u044f \u0434\u043e\u043c\u0435\u043d\u0430 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0438\u043c\u0435\u043d\u0430\u043c\u0438 \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432. \u0422\u043e \u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432 \u0432\u044b\u0432\u043e\u0434\u0435 \u043c\u044b \u043d\u0430\u0439\u0434\u0435\u043c \u0441\u0441\u044b\u043b\u043a\u0443 \n\u0432\u0438\u0434\u0430 <a... href=\"http://abc.com/foo/bar.html\"... >, \u0442\u043e \u0435\u0441\u0442\u044c \u0441\u0430\u0439\u0442 \u0438\u0437 \u0434\u043e\u043c\u0435\u043d\u0430 abc.com/foo/bar.html.\n\n\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u043d\u0435 \u0432\u0441\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u0432\u0438\u0434\u0430 <a... href=\"http://abc.com/foo/bar.html\"... > \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441\u0441\u044b\u043b\u043a\u0430\u043c\u0438, \u043e\u043d\u0438 \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0442 \u044d\u0442\u043e\u043c\u0443 \u0443\u0441\u043b\u043e\u0432\u0438\u044e"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\") == 1\nassert solution(\"2\\n1\") == 1\nassert solution(\"4\\n7\") == 1\nassert solution(\"3\\n2\") == 0\nassert solution(\"7\\n2000000000\") == 5\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2\") == \"1\"\n\n\"\"\"\n\nfrom collections import Counter\nfrom functools import reduce\n\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    count = Counter(reduce(lambda x, y: x + y, map(int, list(str(N)))))\n    if count[9] == 1:\n        print(1)\n    elif count[9] == 0:\n        print(0)\n    else:\n        print(count[9] * (count[9] - 1) // 2)\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3') == '1\\n0\\n0'\nassert solution('2\\n1') == '0\\n1'\nassert solution('1\\n1') == '1\\n0'\n\"\"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2000000000\") == \"999999999\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\\n\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(example) == 3\nassert solution(\"2 5 1 2 4 2\") == 1\n\"\"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\n\n\"\"\"\n\nimport unittest\nimport sys\nimport collections\n\nclass Node(collections.namedtuple('Node', ['value', 'left', 'right'])):\n    def __str__(self):\n        return f\"Node(value={self.value}, left={self.left}, right={self.right})\"\n\n    def __repr__(self):\n        return f\"Node(value={self.value}, left={self.left}, right={self.right})\"\n\n\nclass Tree:\n    def __init__(self, root_node):\n        self.root_node = root_node\n\n    def __str__(self):\n        return f\"Tree(root_node={self.root_node})\"\n\n    def __repr__(self):\n        return f\"Tree(root_node={self.root_node})\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 5\\n1 2\\n2 3\\n3 4\\n4 1\\n1 7\\n7 5\") == \"1\"\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 5\\n1 2\\n2 3\\n3 4\\n4 1') == '1'\nassert solution('5 4 5\\n1 2\\n2 3\\n3 4\\n4 1') == '0'\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1') == '3'\nassert solution('5 4 5\\n1 2\\n2 3\\n3 4\\n4 1') == '1'\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 9 3\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"1\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"0\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\n\"\"\"\n\n\n\nimport sys\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5 4\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\\n') == '1'\n\"\"\"\n\nfrom collections import defaultdict\nimport sys"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 2 1\") == \"4\""
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2 4 1') == '4'\nassert solution('1 1 1 4 4 4') == '5'\n\"\"\""
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\nassert solution(\"1\\n1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\nassert solution(\"4\\n3 2 4 1\") == \"4\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2 4 1') == '4'\nassert solution('6 1 1 4 4 4') == '5'\n\"\"\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'\n\"\"\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 1 4 4 4\") == \"5\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000001000001\\n000002000001\"\n\"\"\"\nimport sys\n\ninputs = sys.stdin.readlines()"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\\n\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom functools import reduce\n\n\"\"\"\n\uc8fc\uc5b4\uc9c4 \uc870\uac74\uc5d0 \ub530\ub77c \uc21c\uc11c\ub300\ub85c \ubc88\ud638 \ubc30\uc815\ud558\ub294 \uacfc\uc815\n1. \uc77c\ubc18\uc801\uc778 \ubc88\ud638\ub97c \ubc30\uc815\ud558\ub294 \uacbd\uc6b0\n2. \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \ubc88\ud638\ub85c \ubc88\ud638\ub97c \ubc30\uc815\ud558\ub294 \uacbd\uc6b0\n\"\"\"\n\n\nclass City:\n    def __init__(self, province: int, year: int):\n        self.province = province\n        self.year = year\n        self.id = 0\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\n\nimport re\n\nN, M = [int(x) for x in re.split(\"\\n\", stdin.strip())]\nprefectures = []\nfor _ in range(N):\n    prefectures.append(int(stdin.readline()))\n\nprefectures.sort()\nprefectures = [str(x) for x in prefectures]\n\nfor i in range(M):\n    prefecture = stdin.readline()\n    cities = [x for x in stdin.readline().split()]\n    cities = [int(x) for x in cities]\n    cities.sort()\n\n    cities = [str(x) for x in cities]\n    cities = [prefecture[0] + x for x in cities]\n\n    print(\"\".join(cities))\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 32\\n2 63') == '000001000002\\n000002000001\\n000001000001'\n\"\"\"\n\nimport math\nfrom typing import Dict, List, Set, Tuple\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n1 32\\n2 63') == '000001000002\\n000002000001\\n000001000001'\n\"\"\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\\n\") == \"000001000002\\n000002000001\\n000001000001\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 3\\n2 7\") == \"000001000002\\n000001000001\"\n\"\"\"\nimport re"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 3\\n1 32\\n2 63\\n1 12\"\n) == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\\n\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10 8 40') == '2'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 10 8 40\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 10 8 40\") == 2\n\"\"\"\n\n\"\"\"\nPROBLEM:\nYou are given a map of n locations with their respective distances from each other.\nYou have to find the shortest distance between two locations.\n\nCONSTRAINTS:\n1 <= n <= 10^4\n1 <= m[i][j] <= 10^9\n\nINPUT FORMAT:\nn\nm[0][0] m[0][1]... m[0][n-1]\nm[1][0] m[1][1]... m[1][n-1]\n...\nm[n-1][0] m[n-1][1]... m[n-1][n-1]\n\nSAMPLE INPUT:\n6\n2 6 3 6 7 4\n2 5 4 7 9 1\n7 1 2 3 6 4\n1 3 2 4 5 6\n5 4 3 1 2 6\n7 4 5 3 1 2\n\nSAMPLE OUTPUT:\n3\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline())\n\ndistances = [list(map(int, stdin.readline().split())) for _ in range(N)]\n\nprint(distances)"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n10 100 10 100\n''') == '90'\nassert solution('''4\n1 2 3 4\n''') == '1'\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\n\"\"\"\n\nimport sys\nimport random"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\n\"\"\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"?(__+___+__-___):-___>__.    \") == \"0250341\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"?(____+_____):-____>____,_____<_____.\\n?\") == \"0250341\"\nassert solution(\"?(_____-___):-_____<___,____<_____.\\n?\") == \"false\"\nassert solution(\"?(__+__-__):-__>__,___<___,____<_____.\\n?\") == \"0101\"\n\"\"\""
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"?(_-_/___*__):-___>__. \") == \"0010\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__. \") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______. \") == \"0250341\"\n\n\"\"\""
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"?(__+___+__-___):-___>__\") == \"0101\"\nassert solution
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"?(____):-____>__,____<__\") == \"0250341\"\nassert solution(\"?(___-__):-_____>__,__<_____\") == \"false\"\nassert solution(\"?(___+____+_____):-______>__,__<_____\") == \"0101\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('?(__+___+__-___):-___>__') == '0101'\nassert solution('?(__-__-___/___):-__>__,_____<__.___,-,__<_____.____<_____,_____<______,______<_______.___') == '0250341'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('?(__+___+__-___):-___>__') == '0101'\nassert solution('?(_-_-_):-_->__') == '0010'\nassert solution('?(_____+__-___):-__>__') == '0250341'\nassert solution('?(-_-):-_->__') == 'false'\nassert solution('?(-_--_+_):-_->__') == 'false'\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('?(____/____+____*____-____*_____/___):-____>_____<_____<____<_____,_____<______,______<_____') == '0250341'\nassert solution('?(____/____+____*____-____*____/___):-____>_____<_____<____<____,_____<______,______<_____') == '0250341'\nassert solution('?(____/____+____*____-____*____):-____>_____<_____<____<____,_____<______,______<_____') == '0250341'\nassert solution('?(____/____+____*____-____*____):-____>_____<_____<____<____,_____<______,______<_____') == '0250341'\nassert solution('?(____/____+____*____-____*____):-____>_____<_____<____<____,_____<______,______<_____') == '0250341'\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"?(____):-____>___\") == \"0\"\nassert solution(\"?(_____):-_____>___\") == \"01\"\nassert solution(\"?(_______):-_______>___\") == \"false\"\nassert solution(\"?(________):-________>___\") == \"false\"\nassert solution(\"?(_________):-_________>___\") == \"false\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('?(__+___+__-___):-___>__') == '0101'\n\n\"\"\"\n\nimport os\nimport sys\n\nfrom typing import List, NamedTuple, Optional, Tuple\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"3 3 11\n2 1 5\n7 10 0\n12 6 4\"\"\") == 3\nassert solution(\n\"\"\"3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\"\"\") == 5\nassert solution(\n\"\"\"3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\"\"\") == 0\nassert solution(\n\"\"\"1 3 3 3\n0 3 3 2\n3 0 1 1\n3 0 2 2\n3 3 4 4\n3 3 5 5\n3 3 6 6\n3 3 7 7\n3 3 8 8\n3 3 9 9\n3 3 10 10\n3 3 11 11\n3 3 12 12\n3 3 13 13\n3 3 14 14\n3 3 15 15\n3 3 16 16\n3 3 17 17\n3 3 18 18\n3 3 19 19\n3 3 20 20\n3 3 21 21\n3 3 22 22\n3 3 23 23\n3 3 24 24\n3 3 25 25\n3 3 26 26\n3 3 27 27\n3 3 28 28\n3 3 29 29\n3 3 30 30\n3 3 31 31\n3 3 32 32\n3 3 33 33\n3 3 34 34\n3 3 35 35\n3 3 36 36\n3 3 37 37\n3 3 38 38\n3 3 39 39\n3 3 40 40\n3 3 41 41\n3 3 42 42\n3 3 43 43\n3 3 44 44\n3 3 45 45\n3 3 46 46\n3 3 47 47\n3 3 48 48\n3 3 49 49\n3 3 50 50\n3 3 51 51\n3 3 52 52\n3 3 53 53\n3 3 54 54\n3 3 55 55\n3 3 56 56\n3 3 57 57\n3 3 58 58\n3 3 59 59\n3 3 60 60\n3 3 61 61\n3 3 62 62\n3 3 63 63\n3 3 64 64\n3 3 65 65\n3 3 66 66\n3 3 67 67\n3 3 68 68\n3 3 69 69\n3 3 70 70\n3 3 71 71\n3 3 72 72\n3 3 73 73\n3 3 74 74\n3 3 75 75\n3 3 76 76\n3 3 77 77\n3 3 78 78\n3 3 79 79\n3 3 80 80\n3 3 81 81\n3 3 82 82\n3 3 83 83\n3 3 84 84\n3 3 85 85\n3 3 86 86\n3 3 87 87\n3 3 88 88\n3 3 89 89\n3 3 90 90\n3 3 91 91\n3 3 92 92\n3 3 93 93\n3 3 94 94\n3 3 95 95\n3 3 96 96\n3 3 97 97\n3 3 98 98\n3 3 99 99\n3 3 100 100\n3 3 101 101\n3 3 102 102\n3 3 103 103\n3 3 104 104\n3 3 105 105\n3 3 106 106\n3 3 107 107\n3 3 108 108\n3 3 109 109\n3 3 110 110\n3 3 111 111\n3 3 112 112\n3 3 113 113\n3 3 114 114\n3 3 115 115\n3 3 116 116\n3 3 117 117\n3 3 118 118\n3 3 119 119\n3 3 120 120\n3 3 121 121\n3 3 122 122\n3 3 123 123\n3 3 124 124\n3 3 125 125\n3 3 126 126\n3 3 127 127\n3 3 128 128\n3 3 129 129\n3 3 130 130\n3 3 131 131\n3 3 132 132\n3 3 133 133\n3 3 134 134\n3 3 135 135\n3 3 136 136\n3 3 137 137\n3 3 138 138\n3 3 139 139\n3 3 140 140\n3 3 141 141\n3 3 142 142\n3 3 143 143\n3 3 144 144\n3 3 145 145\n3 3 146 146\n3 3 147 147\n3 3 148 148\n3 3 149 149\n3 3 150 150\n3 3 151 151\n3 3 152 152\n3 3 153 153\n3 3 154 154\n3 3 155 155\n3 3 156 156\n3 3 157 157\n3 3 158 158\n3 3 159 159\n3 3 160 160\n3 3 161 161\n3 3 162 162\n3 3 163 163\n3 3 164 164\n3 3 165 165\n3 3 166 166\n3 3 167 167\n3 3 168 168\n3 3 169 169\n3 3 170 170\n3 3 171 171\n3 3 172 172\n3 3 173 173\n3 3 174 174\n3 3 175 175\n3 3 176 176\n3 3 177 177\n3 3 178 178\n3 3 179 179\n3 3 180 180\n3 3 181 181\n3 3 182 182\n3 3 183 183\n3 3 184 184\n3 3 185 185\n3 3 186 186\n3 3 187 187\n3 3 188 188\n3 3 189 189\n3 3 190 190\n3 3 191 191\n3 3 192 192\n3 3 193 193\n3 3 194 194\n3 3 195 195\n3 3 196 196\n3 3 197 197\n3 3 198 198\n3 3 199 199\n3 3 200 200\n3 3 201 201\n3 3 202 202\n3 3 203 203\n3 3 204 204\n3 3 205 205\n3 3 206 206\n3 3 207 207\n3 3 208 208\n3 3 209 209\n3 3 210 210\n3 3 211 211\n3 3 212 212\n3 3 213 213\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 11\") == 3\n\n\"\"\"\n\nn, m, k = map(int, stdin.readline().split())\n\nmatrix = [[int(i) for i in stdin.readline().split()] for j in range(n)]"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\", \"3 0 1 1\") == \"0\"\nassert solution(\"3 4 2\", \"1 3 3 3\") == \"3\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\n\nprint('Success')"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3, 3, 11) == 3\n\"\"\""
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3 3 11) == 3\n\n\"\"\"\nimport time\nimport sys\nsys.setrecursionlimit(5000)"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 11') == '3'\nassert solution('3 4 2') == '5'\nassert solution('3 4 1000000000000000000') == '0'"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 11\") == 3\n\n\"\"\"\n\nn, m, k = map(int, stdin.readline().split())\n\na = []\n\nfor _ in range(n):\n    a.append(list(map(int, stdin.readline().split())))\n\ncnt = 0\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] ^ k == 0:\n            cnt += 1\n\nprint(cnt)"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('rocesfedoc') == 'codeforces'\nassert solution('plmaetwoxesisiht') == 'thisisexampletwo'\nassert solution('z') == 'z'\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"a\") == \"a\"\nassert solution(\"\") == \"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(s) == t\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\n\nn = int(input())\nt = input()\n\nd = n\nwhile d > 1:\n    if n % d == 0:\n        break\n    d -= 1\n\nfor i in range(0, d):\n    index = i + 1\n    s = list(t)\n    while index < n:\n        s[index] = t[n - index]\n        index += d\n    t = ''.join(s)\n\nprint(t)"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"orcesfedoc\") == \"rocesfedoc\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"xelhdpaosiwm\") == \"thisisexampletwo\"\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"rocesfedoc\") == \"codeforces\"\nassert solution(\"plmaetwoxesisiht\") == \"thisisexampletwo\"\nassert solution(\"z\") == \"z\"\n\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"plmaetwoxesisiht\") == \"thisisexampletwo\"\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 14\") == 19\nassert solution(\"381 492\") == 873\n\"\"\"\n\nimport sys\na, b = map(int, sys.stdin.readline().strip().split())\nprint(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 14\") == \"19\"\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 14') == 19\nassert solution('381 492') == 873"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2') == '3'\nassert solution('3 4') == '7'\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 14''') == '19'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 14\") == \"19\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 14\") == \"19\"\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\n\n\n\"\"\"\n\n\"\"\"\n\u601d\u8def\uff1a\n\u624b\u5199\u4e00\u4e2a\u89e3\u7801\u5668\n\u8f93\u5165\u4e00\u4e2a\u6587\u672c\n\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u662f+,-,.,<\n\u7b2c\u4e8c\u4e2a\u662f\u5bf9\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff0c\u5b58\u5728\u4e09\u79cd\u60c5\u51b5\n1\uff09+ \u5b58\u5728\u7b2c\u4e00\u4e2a\u6570\n2\uff09- \u5b58\u5728\u7b2c\u4e00\u4e2a\u6570\n3\uff09., \u5b58\u5728\u7b2c\u4e00\u4e2a\u6570\n\n\u5173\u952e\u8bcd\uff1a\u7b2c\u4e00\u4e2a\u6570\n\u8ba1\u7b97\u4e00\u6b21\uff1a\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2+3\") == \"+>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\", \"2+3\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\", \"9-7\"\n\n\"\"\""
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('++>') == '++++>'\nassert solution('+[>+>+]>') == '<[<+><+><+>]>'\nassert solution('>++[<+>>+>-]<') == '<[<+><++<+>>+>-]<'\nassert solution('+>-') == '<[<+><-]<'\nassert solution('<+>-') == '<[<+>-]<'\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '<>'\nassert solution('+') == '>'\nassert solution('-') == '<'\nassert solution('+') == '>'\nassert solution('-') == '<'\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2+3\") == \"++++>\\n>[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\n'''\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1+2') == '>'\nassert solution('2+3') == '>+<'\nassert solution('1+2+3') == '>+>+<<'\nassert solution('1-2-3') == '>+>+>+<<<'\n\n'''\n\n\nimport re"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"+3\") == \"+>\\n+>\\n+>\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2+3\") == '>++++++.>'\nassert solution(\"9-7\") == '+++++++++>'\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('+2+3') == '>+++>'\nassert solution('-9-7') == '+++++++++>'\n\"\"\"\n\nimport sys\n\nclass MyQueue:\n\n    def __init__(self):\n        self.queue = []\n        self.size = 0\n        self.index = 0\n\n    def is_empty(self):\n        return self.size == 0\n\n    def push(self, element):\n        self.queue.append(element)\n        self.size += 1\n\n    def pop(self):\n        if self.is_empty():\n            return None\n        return self.queue.pop(0)\n\n    def top(self):\n        if self.is_empty():\n            return None\n        return self.queue[0]\n\n    def size_of(self):\n        return self.size\n\n    def print_queue(self):\n        print(self.queue)\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2+3\") == \"+>\"\nassert solution(\"9-7\") == \"+++++++++>\"\n'''\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112233445\"\n\n\"\"\""
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"112123123412345$\\\\dots$\") == \"111122321132\"\nassert solution
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('12') == '0'\nassert solution('112') == '0'\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2132\\n506\\n999999999999999999\\n1000000000000000000\\n\") == \"8\\n2\\n4\\n1\"\n\"\"\""
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2132\\n506\\n999999999999999999\\n1000000000000000000\\n\") == \"8\\n2\\n4\\n1\"\nassert solution(\"123\\n456\\n789\\n101112\") == \"0\\n2\\n4\\n2\"\n\"\"\"\nfrom typing import List, Tuple"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('112123123412345$\\dots$') == '1'\nassert solution('11212312341234512345612345671234567812345678912345678910') == '0'\nassert solution('11212312341234512345612345671234567812345678912345678910') == '9'\nassert solution('11212312341234512345612345671234567812345678912345678910') == '8'\nassert solution('1121231234123451234561234567123456712345678912345678910') == '7'\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"56 3\") == \"2\"\nassert solution(\"56 10\") == \"1\"\n\"\"\""
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1\\n3\\n20\\n38\\n56\\n\") == \"1\\n2\\n5\\n2\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"112123123412345$\\dots$\") == '8'\nassert solution(\"112123123412345$\\dots$112123123412345$\\dots$11212312341234512345$\\dots$\") == '7'\nassert solution(\"112123123412345$\\dots$112123123412345$\\dots$11212312341234512345$\\dots$1121231234123451234512345$\\dots$\") == '0'\n\"\"\""
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11223344555$') == '2'\nassert solution('1111111111111111111111111$') == '9'\nassert solution('1111111111111111111111110$') == '9'\nassert solution('11111111111111111111111111$') == '0'\n\nassert solution('1112344555$') == '2'\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('575') == '4'\nassert solution('1') == '0'\n\"\"\"\n\nn = int(input())\nseven = 0\nfive = 0\nthree = 0\n\nwhile n >= 7:\n    seven += n // 7\n    n = n % 7\nwhile n >= 5:\n    five += n // 5\n    n = n % 5\nwhile n >= 3:\n    three += n // 3\n    n = n % 3\nprint((seven+five+three)*(seven+five+three+1)//2)\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('575') == 4\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"575\") == 4\nassert solution(\"7\") == 0\nassert solution(\"10\") == 0\nassert solution(\"16\") == 2\nassert solution(\"853\") == 5\n\n'''\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"575\") == \"4\"\nassert solution(\"10\") == \"1\"\nassert solution(\"100\") == \"7\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n5\\n3') == '4'\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('2') == '0'\nassert solution('9') == '1'\nassert solution('10') == '0'\nassert solution('21') == '2'\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('575') == 4\n\"\"\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('575') == 4\nassert solution('1') == 0\nassert solution('10') == 1\n\"\"\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('575') == 4\nprint('All tests have passed successfully')\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n') == '4\\n'\nassert solution('575\\n') == '4\\n'\nassert solution('7\\n') == '1\\n'\nassert solution('8\\n') == '0\\n'\n\"\"\"\n\nN = int(input())\n\nseven = N // 1000000000\nN %= 1000000000\nfive = N // 100000\nN %= 100000\nthree = N // 1000\nN %= 1000\n\ncount = 0\nfor i in range(1, N + 1):\n    if i % 1000000000 == seven and i % 100000 == five and i % 1000 == three:\n        count += 1\nprint(count)"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('111') == 1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0111') == '2'\nassert solution('1110') == '1'\nassert solution('1111') == '0'\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0111') == '1'\nassert solution('000') == '0'\nassert solution('1110') == '2'\nassert solution('1111') == '4'\nassert solution('0110') == '1'\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11100') == '2'\nassert solution('1010111') == '1'\nassert solution('11101') == '1'\nassert solution('11010') == '1'\nassert solution('111111') == '0'\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"001\") == 1\nassert solution(\"101\") == 0\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == 1\nassert solution('011110') == 2\nassert solution('11101110111') == 5\nassert solution('111011110111') == 6\nassert solution('1110111101110') == 7\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1110\") == 1\n\"\"\"\n\nS = input()\nprint(sum([S[i]!= S[i - 1] for i in range(1, len(S))]))\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"111\") == 1\n\"\"\"\n\nfrom sys import stdin\n\nS = stdin.readline()\nprint(len(S) - S[::-1].find('1'))"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11111') == 1\nassert solution('11110') == 2\nassert solution('11110') == 2\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"110\") == 2\nassert solution(\"1010\") == 1\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n6 7 9 10 31') == 'APPROVED'\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n6 7 9 10 31') == 'APPROVED'\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 7 9 10 31\") == \"APPROVED\"\n\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n\nn = int(input())\na = input().split()\nb = [int(i) for i in a]\na = [i for i in a if i.isdigit()]\n\nfor i in b:\n    if i%2 == 0:\n        if i%3 == 0 or i%5 == 0:\n            print(\"APPROVED\")\n        else:\n            print(\"DENIED\")\n    else:\n        print(\"DENIED\")"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\nassert solution(\"5\\n6 7 9 10\") == \"APPROVED\"\nassert solution(\"5\\n6 7 9 10 31 32\") == \"DENIED\"\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10 30 50 20\") == \"APPROVED\"\nassert solution(\"3 10 5 2\") == \"DENIED\"\n\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 2 3 4 5\") == \"APPROVED\"\nassert solution(\"5 1 2 3\") == \"DENIED\"\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 9 8 10 3\") == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RUDLUDR') == 'Yes'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RUDLUR') == 'No'\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RULDDR\") == \"No\"\nassert solution(\"RURDUULDDR\") == \"Yes\"\nassert solution(\"LUDLLRDR\") == \"No\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RUDLUDR') == 'Yes'\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('RUDLUDR') == 'Yes'\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RUDRLUD') == 'No'\nassert solution('LDRRUULRU') == 'Yes'\nassert solution('LRDRRUD') == 'No'\n\nprint(solution(stdin))\n\n\"\"\"\n\nimport re\nfrom typing import List, NamedTuple\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RDRLUDUULDR\") == \"Yes\"\nassert solution(\"UDRLLRUDRL\") == \"No\"\nassert solution(\"URDRLLRUDRL\") == \"No\"\n\"\"\"\nimport sys\nimport re"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(RUDLUDR) == 'Yes'\n\nassert solution('LRDRUDLRRUDLUULRDRDLDRLDRLDR') == 'Yes'\nassert solution('RLLR') == 'Yes'\nassert solution('DRDRDDUDRDRDRDR') == 'No'\n\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n5\n3\n2\n4\n3\n5\n''') == '7'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\nassert solution(\"1 5 5 1\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2\\n4\\n3\\n5\") == \"7\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na, b, c, d, e = [int(i) for i in sys.stdin.readline().split()]\n\nminutes = 0\npeople = 0\nwhile people < n:\n    people += min(a, b, c, d, e)\n    a = max(0, a - min(a, b, c, d, e))\n    b = max(0, b - min(a, b, c, d, e))\n    c = max(0, c - min(a, b, c, d, e))\n    d = max(0, d - min(a, b, c, d, e))\n    e = max(0, e - min(a, b, c, d, e))\n    minutes += 1\nprint(minutes)\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"\n\nn = int(input())\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\ne = int(input())\n\nt = 0\nwhile True:\n    t += 1\n    if a < n:\n        n -= a\n    else:\n        a = 0\n    if b < n:\n        n -= b\n    else:\n        b = 0\n    if c < n:\n        n -= c\n    else:\n        c = 0\n    if d < n:\n        n -= d\n    else:\n        d = 0\n    if e < n:\n        n -= e\n    else:\n        e = 0\n    if n <= 0:\n        break\n\nprint(t)\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\nassert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\n\nprint('Success')\n\"\"\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"\n\nimport math\n\nn, a, b, c, d, e = map(int, input().split())"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\n\"\"\"\n\nn = int(stdin.readline())\nA, B, C, D, E = map(int, stdin.readline().split())\nm = int(stdin.readline())\nM = []\nfor _ in range(m):\n    M.append(int(stdin.readline()))"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\nassert solution(\"8\\n6\\n5\\n7\\n6\\n8\\n7\\n9\\n8\") == \"13\"\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(stdout.write(str(sol)))\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"0\"\nassert solution(\"10\") == \"0\"\nassert solution(\"1023\") == \"0\"\nassert solution(\"1048\") == \"0\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\n\n'''\nhttps://www.codewars.com/kata/5f4bb2d61ea7b8a46f000c3d/train/python\n\n\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0432\u044b\u0448\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f\u043c:\n - 0 <= A_i <= 9\n - \u0415\u0441\u0442\u044c \u043b\u0438 \u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 A_i = 0\n - \u0415\u0441\u0442\u044c \u043b\u0438 \u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 A_i = 9\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0443\u0441\u0442\u044c N = 3, \u0442\u043e\u0433\u0434\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0442 \u0441\u043f\u0438\u0441\u043e\u043a:\n\n[1, 2, 3]\n\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f\u043c:\n - 0 <= A_i <= 9\n - \u0415\u0441\u0442\u044c \u043b\u0438 \u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 A_i = 0\n - \u0415\u0441\u0442\u044c \u043b\u0438 \u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 A_i = 9\n\u041e\u0442\u0432\u0435\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e \"2\".\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^6\n - N is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the answer modulo 10^9 + 7.\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\n2\n\n\u041f\u0443\u0441\u0442\u044c N = 3, \u0442\u043e\u0433\u0434\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0442 \u0441\u043f\u0438\u0441\u043e\u043a:\n\n[1, 2, 3]\n\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f\u043c:\n - 0 <= A_i <= 9\n - \u0415\u0441\u0442\u044c \u043b\u0438 \u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 A_i = 0\n - \u0415\u0441\u0442\u044c \u043b\u0438 \u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 A_i = 9\n\u041e\u0442\u0432\u0435\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e \"2\".\n\nhttps://www.codewars.com/kata/51b6249c4612257ac0000ec4\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n3') == 2\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == 2\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n0') == '0\\n0\\n9\\n'\n\"\"\"\n\nn = int(input())\n\nsolution = 0\n\nfor a in range(10):\n    for b in range(10):\n        for c in range(10):\n            for d in range(10):\n                for e in range(10):\n                    if a == 0 or b == 9 or c == 0 or d == 9 or e == 0 or e == 9:\n                        if a!= b and b!= c and c!= d and d!= e and e!= a:\n                            solution += 1\n\nprint(solution)\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 2\n\"\"\"\n\nN = int(stdin.readline())"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == 2\nassert solution('4') == 2\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == 0\nassert solution(\"10\") == 0\nassert solution(\"100\") == 0\nassert solution(\"1000\") == 0\nassert solution(\"10000\") == 0\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == 2\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == \"2\"\nassert solution(7) == \"3\"\nassert solution(17) == \"17\"\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"2,3\") == \"3\"\nassert solution(\"2,3,5\") == \"3\"\nassert solution(\"3,5,7\") == \"5\"\nassert solution(\"4,6\") == \"5\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(2)) == \"2\"\nassert solution(str(2)) == \"2\"\nassert solution(str(10)) == \"11\"\nassert solution(str(20)) == \"23\"\nassert solution(str(20)) == \"23\"\n\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20\") == \"23\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(20) == 23\n\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\") == \"7\"\nassert solution(\"4\") == \"7\"\nassert solution(\"3\") == \"7\"\nassert solution(\"2\") == \"7\"\nassert solution(\"1\") == \"7\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n') == '2'\nassert solution('3\\n') == '2'\nassert solution('4\\n') == '3'\nassert solution('5\\n') == '3'\nassert solution('6\\n') == '5'\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20\") == \"23\"\nassert solution(\"10\") == \"11\"\nassert solution(\"0\") == \"2\"\n\"\"\"\n\n\"\"\"\n9\n11\n19\n31\n41\n71\n89\n107\n113\n131\n131\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20') == '23'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20') == '23'\nassert solution('3') == '2'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\n---------------------\n\"\"\"\n\n\"\"\"\nYour input\nYour output\nYour solution link\nPlease post your solution as a comment on the relevant exercise.\n\n------\nInput\n\n4\n3 1 3 2\n\nOutput\n\n1\n\nExpected\n\n1\n\n(1, 3, 2) = (3, 1, 2)\n\n-------\nInput\n\n4\n2 2 1 1\n\nOutput\n\n0\n\nExpected\n\n2\n\n(2, 2, 1, 1) = (2, 2, 1, 1)\n\n-------\nInput\n\n4\n3 1 3 2\n\nOutput\n\n1\n\nExpected\n\n1\n\n(3, 1, 3, 2) = (3, 1, 2, 2)\n\n-------\nInput\n\n4\n2 1 2 1\n\nOutput\n\n0\n\nExpected\n\n2\n\n(2, 1, 2, 1) = (2, 1, 2, 1)\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nlast = a[0]\ncount = 0\nfor i in a[1:]:\n    if i == last:\n        count += 1\n    else:\n        count = 1\n    last = i\n\nprint(count // 2)\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\nassert solution(\"4\\n3 1 3 4\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 3 2\") == '1'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 3 2\") == \"1\"\n\"\"\"\nimport math\nfrom typing import List"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 3 2\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '4\\n3 1 3 2'\n) == '1'\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 2. \u0418\u0433\u0440\u0430 \u0432 \u043a\u0430\u043c\u0435\u043d\u044c, \u043d\u043e\u0436\u043d\u0438\u0446\u044b, \u0431\u0443\u043c\u0430\u0433\u0430\n\u0412 \u0448\u043a\u043e\u043b\u0435 \u0440\u0435\u0448\u0438\u043b\u0438 \u043d\u0430\u0431\u0440\u0430\u0442\u044c \u0442\u0440\u0438 \u043d\u043e\u0432\u044b\u0445 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u0430. \u0422\u0430\u043a \u043a\u0430\u043a \u0437\u0430\u043d\u044f\u0442\u0438\u044f \u043f\u043e \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0435 \u0443 \u043d\u0438\u0445 \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0442 \u0432 \u043e\u0434\u043d\u043e \u0438 \u0442\u043e \u0436\u0435 \u0432\u0440\u0435\u043c\u044f, \u0431\u044b\u043b\u043e \u0440\u0435\u0448\u0435\u043d\u043e \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043a\u0430\u0431\u0438\u043d\u0435\u0442 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0438 \u043a\u0443\u043f\u0438\u0442\u044c \u0432 \u043d\u0438\u0445 \u043d\u043e\u0432\u044b\u0435 \u043f\u0430\u0440\u0442\u044b. \u0417\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0430\u0440\u0442\u043e\u0439 \u043c\u043e\u0436\u0435\u0442 \u0441\u0438\u0434\u0435\u0442\u044c \u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0432\u0443\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432. \u0418\u0437\u0432\u0435\u0441\u0442\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0449\u0438\u0445\u0441\u044f \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u0442\u0440\u0451\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432. \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u043a\u0443\u043f\u0438\u0442\u044c \u043f\u0430\u0440\u0442 \u0447\u0442\u043e\u0431\u044b \u0438\u0445 \u0445\u0432\u0430\u0442\u0438\u043b\u043e \u043d\u0430 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432? \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0442\u0440\u0438 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0449\u0438\u0445\u0441\u044f \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u0442\u0440\u0435\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432.\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430: \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0449\u0438\u0445\u0441\u044f \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 1, \u0437\u0430\u0442\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0449\u0438\u0445\u0441\u044f \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 2 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0449\u0438\u0445\u0441\u044f \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 3.\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u0442\u0432\u0435\u0442\u043e\u0432, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\nassert solution(\"100 90 80\\n100\\n40\\n30\\n21\\n80\") == \"22\"\nassert solution(\"100 90 80\\n99\\n40\\n30\\n21\\n80\") == \"22\"\n\"\"\"\n\nfrom typing import List\n\nin_data = list(map(int, input().split()))\n\nN, A, B, C = in_data\n\nbamboo_list: List[int] = [0] * N\n\nfor i in range(N):\n    bamboo_list[i] = in_data[i + 1]\n\nmp_used = 0\n\nwhile len(bamboo_list) > 0:\n    bamboo_list.sort()\n\n    current_bamboo = bamboo_list.pop()\n\n    if mp_used + 2 >= 10:\n        mp_used = mp_used + 10 - current_bamboo\n        if mp_used + 2 >= 10:\n            continue\n\n    if current_bamboo >= C:\n        mp_used = mp_used + 2\n        if current_bamboo >= C:\n            continue\n\n    if current_bamboo >= B and mp_used + 1 >= 10:\n        mp_used = mp_used + 10 - current_bamboo\n        if current_bamboo >= B and mp_used + 1 >= 10:\n            continue\n\n    if current_bamboo >= B:\n        mp_used = mp_used + 1\n        if current_bamboo >= B:\n            continue\n\n    if current_bamboo >= A and mp_used >= 10:\n        mp_used = mp_used + 10\n        if current_bamboo >= A and mp_used >= 10:\n            continue\n\n    if current_bamboo >= A:\n        mp_used = mp_used + 1\n        if current_bamboo >= A:\n            continue\n\n    if mp_used >= 10:\n        continue\n\n    print(\"mp_used: \", mp_used)\n    print(current_bamboo)\n    print(bamboo_list)\n    break\n\n\nprint(\"ans: \", mp_used)\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\\n\") == \"23\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 100 90 80''') == '23'\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"1 1 1 1\") == \"0\"\n\"\"\"\n\nN, A, B, C = [int(num) for num in stdin.readline().split()]\nl = [int(num) for num in stdin.readline().split()]"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\"\nfrom __future__ import annotations\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        pass\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 100 90 80\") == '23'\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\"\n\nimport ast\nimport sys\nfrom collections import Counter\nfrom functools import reduce\n\nMAX_LEN = 1000\nMIN_LEN = 1"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\na, b, c = map(int, sys.stdin.readline().split())\ncount = 0\n\nwhile True:\n    if a >= c:\n        break\n    a += 1\n    count += 1\n\nwhile True:\n    if b >= c:\n        break\n    b += 1\n    count += 1\n\nprint(count)\n\n\"\"\"\nAlgorithm:\nUse the extension magic to decrease the length of all bamboos by 1.\nUse the extension magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1.\nUse the composition magic to combine two bamboos to get a third bamboo of length a + b.\nUse the shortening magic to decrease the length of all bamboos by 1.\nUse the shortening magic to increase the length of all bamboos by 1"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nassert solution(\"AB\") == \"BC\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A\") == \"B\"\nassert solution(\"ABC\") == \"BCD\"\nassert solution(\"ZYX\") == \"AB\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nassert solution(\"AZYXWVUTSRQPONMLKJIHGFEDCBA\") == \"AMBUERVOXPSZLHLJKGFDCTWA\"\nassert solution(\"LQCZONCRWUITMIPKGHBVFJE\") == \"PONMNGSBCJEKWRTXIUVHAD\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nprint(solution(\"ABCXYZ\"))\nassert solution(\"ABCXYZ\", 2) == \"CDEZAB\"\nprint(solution(\"ABCXYZ\", 2))\nassert solution(\"ABCXYZ\", 26) == \"ABCXYZ\"\nprint(solution(\"ABCXYZ\", 26))\nassert solution(\"ABCXYZ\", -2) == \"CDEZAB\"\nprint(solution(\"ABCXYZ\", -2))\nassert solution(\"ABCXYZ\", 0) == \"ABCXYZ\"\nprint(solution(\"ABCXYZ\", 0))\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\nassert solution('ZMNPQ') == 'ABCDEF'\nassert solution('ZABC') == 'ABCZ'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open('test.in').read()) == open('test.out').read()\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 2 3 2 4\\n') == '3 4 2'\n\"\"\"\n\n\"\"\"\n\u041d\u0435 \u043f\u043e\u043d\u044f\u043b \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438. \u041a\u0430\u043a \u0441\u0442\u0430\u043b\u043e \u043f\u043e\u043d\u044f\u0442\u043d\u043e, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434 \u043f\u0440\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0451\u043d\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438. \u041d\u043e \u0447\u0442\u043e \u0436\u0435 \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442? \u041a\u0430\u043a \u043d\u0430\u043c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434?\n\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432 \u0441 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0431\u0443\u043a\u0432\u044b \u0438 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f. \u041f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u0441 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0431\u0443\u043a\u0432\u044b \u2014 \u044d\u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0435\u0439 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0435\u0439 \u0441\u043a\u043e\u0431\u043a\u043e\u0439, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0445\u043e\u0434\u044f\u0442 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b. \u041f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0431\u0443\u043a\u0432\u044b \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0445 \u0441\u043b\u0435\u0448\u0435\u0439 (\\). \u0420\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043e\u0442 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432 \u0441 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0431\u0443\u043a\u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u044d\u0442\u0438\u0445 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432 \u0432 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u0445 \u0441 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u043e\u0439 \u0431\u0443\u043a\u0432\u044b.\n\n\u0421\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445 \u0438\u043c\u0435\u0435\u0442 \u043e\u0431\u0449\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043e\u0442 \u0432\u0441\u0435\u0445 \u043e\u0431\u0449\u0438\u0445 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432 \u0438 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u043e\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n\u0418 \u043d\u0430\u0432\u0435\u0440\u043d\u043e\u0435, \u0443 \u043c\u0435\u043d\u044f \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u044d\u0442\u043e\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0445\u0443\u0436\u0435.\n\u041d\u0430\u0434\u0435\u044e\u0441\u044c, \u043e\u043d \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u0442\u0430\u043a\u0438\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c.\n\u0412\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0438\u043c\u0435\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438, \u0447\u0435\u043c \u043e\u0431\u0449\u0438\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u0438 \u043d\u0430\u0434\u0435\u044e\u0441\u044c, \u0447\u0442\u043e \u0443 \u043c\u0435\u043d\u044f \u043e\u0441\u0442\u0430\u0451\u0442\u0441\u044f \u043a\u0430\u043a\u0430\u044f-\u0442\u043e \u0445\u043e\u0440\u043e\u0448\u0430\u044f \u0444\u043e\u0440\u043c\u0443\u043b\u0430.\n\n\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\n\u041d\u0430\u0447\u043d\u0438\u0442\u0435 \u0441 \u0432\u0432\u043e\u0434\u0430 \u0432\u0441\u0435\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432.\n\n\u041f\u043e\u043a\u0430 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u0432\u0441\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441 \u0438 \u043e\u0436\u0438\u0434\u0430\u0439\u0442\u0435, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u0442\u0435 \u043f\u0435\u0440\u0432\u044b\u0439 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u0441\u043a\u043e\u0431\u043a\u0430.\n\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u043e\u0442\u0432\u0435\u0442\u043e\u043c.\n\u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u0441\u043d\u043e\u0432\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0432\u0432\u043e\u0434\u0430, \u043f\u043e\u043a\u0430 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0441\u0442\u0440\u043e\u043a\u0443.\n\u0412\u0441\u0442\u0440\u0435\u0442\u0438\u0442\u0435 \u043f\u0435\u0440\u0432\u044b\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u0438\u0437 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0432\u044b\u0448\u0435 \u0438 \u0437\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0435\u0433\u043e \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e pattern.\n\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n5 2 3 2 4') == '3 4 2'\nassert solution('1\\n2750131 199999') == '199999'\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\nassert solution('1 2750131 199999') == '199999'\nassert solution('1 3') == '3'\nassert solution('1 1') == '1'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"1111\"\nassert solution(\"5 1\") == \"21122\"\nassert solution(\"7 1\") == \"1121122\"\n\nassert solution(\"5 2\") == \"1111\"\nassert solution(\"5 1\") == \"21122\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"5 3\") == \"22111\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"22111\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\nassert solution(\"5 1\\n2 4 5 3 1\") == \"21112\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 5 3 1\\n') == '11111'\nassert solution('5 1 2 3 4\\n') == '21112'\nassert solution('7 1 7 2 1 3 5 4 6\\n') == '1121122'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('\\n1\\n') == '1'\nassert solution('\\n2\\n') == '2'\nassert solution('\\n3\\n') == '21'\nassert solution('\\n3\\n2\\n1\\n') == '1112'\n\n----"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"5 1\") == \"21112\"\n\n'''\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"111111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"112122\"\nassert solution(\"5 5\") == \"11111\"\nassert solution(\"5 2\") == \"111111\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\nassert solution('7 2') == '221122'\n\n-----\n\n'''\n\nn, k = map(int, input().split())\nstudents = list(map(int, input().split()))"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"111111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\n\"\"\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 3 7') == '4'\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom math import gcd\nfrom typing import Dict, List, Tuple\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 1 2 3') == '2'\n\"\"\""
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == 2\nassert solution(\"2\\n100 1\") == 2\nassert solution(\"4\\n1 3 3 7\") == 4\nassert solution(\"2\\n100 1\") == 2\nassert solution(\"1\\n1\") == 1\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 1 2 3') == '2'\nassert solution('4\\n1 3 3 7') == '4'\n\nimport os, sys\nfrom io import StringIO\nimport unittest\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == 2\nassert solution(\"2\\n1 1\") == 1\nassert solution(\"4\\n1 3 3 7\") == 4\n\"\"\""
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 1 2 3\\n\") == 2\nassert solution(\"4\\n1 3 3 7\\n\") == 4\nassert solution(\"2\\n100 1\\n\") == 2\nassert solution(\"4\\n1 3 3 7\\n\") == 4\n\"\"\""
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 1 2 3') == '2'\nassert solution('2\\n1 2') == '2'\nassert solution('4\\n1 3 3 7') == '4'\nassert solution('1\\n1') == '1'\nassert solution('10\\n1 2 3') == '2'\n\"\"\"\nfrom collections import Counter\n\nclass Solution:\n    def countLines(self, n: int, a: list) -> int:\n        freq_dict = Counter(a)\n        count = 0\n        for key, value in freq_dict.items():\n            if value == 1:\n                count += 1\n            else:\n                count += 1 + (value - 1) // 2\n        return count\n\n\nsolution = Solution().countLines\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 1 2 3') == '2'\nassert solution('2\\n100 1') == '2'\nassert solution('4\\n1 3 3 7') == '4'\nassert solution('3\\n100 1') == '2'\n\nprint('The local tests are done. Click on \"Check\" for more cases.')\n\"\"\"\n\na = int(input())\nb = list(map(int, input().split()))\ncount = 0\nfor i in range(a):\n    if b[i] == b[i + 1]:\n        count += 1\n    for j in range(a - 1):\n        if b[j] == b[j + 1]:\n            if b[j] > b[j + 1]:\n                count += 1\n            if b[j] < b[j + 1]:\n                count -= 1\nprint(count % 998244353)\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n1 2 1 2 3\n''') == 2\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 7 1 5 4 9\") == '1'\nassert solution(\"1 2 3 4 5\") == '2'\nassert solution(\"16\") == '1'\nassert solution(\"1 1 1 1023\") == '0'\n\"\"\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 1 1 1023\") == \"0\"\nassert solution(\"16\") == \"1\"\nassert solution(\"4 7 1 5 4 9\") == \"1\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n4 7 1 5 4 9\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"1\\n16\") == \"1\"\nassert solution(\"4\\n1 1 1 1023\") == \"0\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\n\n\"\"\"\n\nn = int(input())\n\ns = input().split()\n\ngood = set()\nfor i in range(n):\n    for j in range(i+1, n):\n        if int(s[j]) % 2 == 0:\n            good.add(int(s[i]) + int(s[j]))\nprint(len(list(good)))"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 1 1 1023\") == \"0\"\nassert solution(\"16\") == \"1\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 1 1 1023') == '0'\nassert solution('1 1 1') == '0'\nassert solution('4 7 1 5 4 9') == '1'\nassert solution('1 1 1 1023') == '0'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 1 1 1023') == '0'\n\n-----Test 6-----\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101101') == '3'\nassert solution('10111010') == '10'\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"001100\") == 4\nassert solution(\"001111\") == 2\nassert solution
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0111\") == 3\n\"\"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0011\") == \"4\"\nassert solution(\"1110\") == \"2\"\nassert solution(\"110111111010\") == \"6\"\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"001100\") == \"4\"\nassert solution(\"100\") == \"0\"\nassert solution(\"110\") == \"2\"\nassert solution(\"1110\") == \"3\"\nassert solution(\"10110\") == \"4\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0011') == '4'\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('101010') == '10'\nassert solution('11110') == '3'\nassert solution('11010') == '2'\nassert solution('11101') == '1'\nassert solution('111111111111') == '0'\n\nimport sys\nprint(solution(sys.stdin.readline()))"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0111\") == \"2\"\nassert solution(\"10111\") == \"4\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11101') == '4'\nassert solution('11110') == '5'\nassert solution('11111') == '1'\nassert solution('111111') == '11'"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == solution_\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == '2'\n\"\"\"\n\nimport sys\n\nnum_id_cards, num_gates = map(int, sys.stdin.readline().strip().split())\n\nid_cards = set()\n\nfor _ in range(num_id_cards):\n    id_cards.add(tuple(map(int, sys.stdin.readline().strip().split())))\n\ngates = set()\n\nfor _ in range(num_gates):\n    l, r = map(int, sys.stdin.readline().strip().split())\n    gates.add((l, r))\n\nres = 0\n\nfor i in range(1, num_id_cards):\n    if i in id_cards:\n        for j in range(i, num_id_cards):\n            if j in id_cards:\n                if (i, j) not in gates and (j, i) not in gates:\n                    res += 1\n\nprint(res)\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n\nfrom functools import reduce\nfrom itertools import chain"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 2\n1 3\n2 4''') == '2'\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('4 2\\n1 3\\n2 4') == '2'\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n\nN, M = [int(i) for i in stdin.readline().split()]\ncards = []\nfor _ in range(N):\n    cards.append([int(i) for i in stdin.readline().split()])\ncards.sort(key=lambda x: x[0])\nmin = cards[0][1]\nmax = cards[-1][1]\nprint(min + max - M)\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == 2\n\"\"\"\n\n\"\"\"\nThe idea is to generate a list of length N, where each position is either 0 or 1.\nThe ith position shows if we have one of the i+1 ID cards.\nSince we have to pass all the gates, if we have all the ID cards, then all the gates should be passed.\nSo, if the position is 1, then we have to pass all the gates.\n\nSo, the problem is to count the number of 1s in the list.\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == 2\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\"\n\n\nfrom typing import List\nimport math\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\"\n\n\"\"\"\nThe idea is to perform the operation with (l,r)=(1,3) and (l,r)=(2,4) at the same time.\nThe result is 3*2=6\nThe result is (1*3+2*2+1*1) = (4+4+1) = 9\nThe result is 9 + 9 + 3 = 21\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline()"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\n\"\"\"\n\n\"\"\"\nTest Case\nN = 4\nh_1 h_2 h_3...... h_N\n\n(1, 3)\n(2, 4)\n\n3\n\nResult is 2\n\nIn the given example, we have to make (1, 3) before (2, 4)\nSo (1, 3) -> 2 -> 4\n\n1.\nh_1 h_2 h_3...... h_N\nh_1  2  h_3...... h_N\n\n(1, 3)\n(2, 3)\n\n2.\nh_1 h_2 h_3...... h_N\nh_1  h_2  3...... h_N\n\n(1, 3)\n(1, 2) -> 3\n(1, 3)\n\n3.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... 4\n\n(1, 3)\n(2, 3) -> 4\n(1, 3)\n\n4.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n5.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n6.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n7.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n8.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n9.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n10.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n11.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n12.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n13.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n14.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n15.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n16.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n17.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n18.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n19.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n20.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n21.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n22.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n23.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n24.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n25.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n26.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n27.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n28.\nh_1 h_2 h_3...... h_N\nh_1  h_2  h_3...... h_N\n\n(1, 3)\n(2, 3) -> h_4\n(1, 3)\n\n29.\nh_1 h_2 h_3...... h_N\nh_1  h_"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 2 1') == 2\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\"\n\nn = int(input().strip())\nheights = list(map(int, input().strip().split(' ')))\nprint(heights)\nwater_per_day = 0\nfor i in range(1, len(heights)):\n    if heights[i] > heights[i-1]:\n        water_per_day += heights[i] - heights[i-1]\n\nprint(water_per_day)"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 2 1\") == \"2\"\nassert solution(\"4 2 2 2\") == \"1\"\nassert solution(\"1 2 2 1\") == \"2\"\nassert solution(\"3 2 1 2 1\") == \"2\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 2 1\\n\") == 2\n\"\"\"\n\n\"\"\"\nYou are given N bags, the ith bag contains si many identical bags, and a bag costs xi dollars. There is a special bag, which is known as the \"deterministic bag\". For the deterministic bag, the cost is 0, and all other bags cost 1 dollar.\nYou want to purchase exactly K bags at the lowest price. Determine the lowest total price you have to pay if you purchase the deterministic bag.\n\nInput Format\nThe first line contains N, K and xi.\nThe next N lines each contains si and xi.\n\nConstraints\n1 \\leq N \\leq 10^5\n1 \\leq K \\leq 10^9\n1 \\leq si \\leq 10^9\n1 \\leq xi \\leq 10^9\n\nOutput Format\nOutput the lowest total price you have to pay.\n\nSample Input 0\n4 3 2\n1 1\n1 2\n2 3\n2 4\n\nSample Output 0\n3\n\"\"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == 3\nassert solution(\"2 4\\n-1 1\") == 4\nassert solution(\"4 10\\n2 4 1 2\") == 2\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n2 1 -3') == '3'\nassert solution('2 4\\n-1 1') == '4'\nassert solution('4 10\\n2 4 1 2') == '2'\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n2 1 -3\") == \"3\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\nassert solution(\"4 10\\n-1 1\") == \"4\"\nassert solution(\"1 10\\n-1 1\") == \"0\"\n\"\"\"\n\nimport collections\nimport sys\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == '3'\nassert solution(\"2 4\\n-1 1\") == '4'\nassert solution(\"4 10\\n2 4 1 2\") == '2'\n\"\"\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"5 3\") == \"1\"\nassert solution(\"4 10\") == \"2\"\nassert solution(\"3 5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5\\n2 1 -3') == '3'\nassert solution('2 4\\n-1 1') == '4'\nassert solution('4 10\\n2 4 1 2') == '2'\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 10') == '2'\nassert solution('3 5') == '3'\nassert solution('2 4') == '2'\n\"\"\"\n\nn, w = [int(x) for x in input().split()]\n\na = [int(x) for x in input().split()]\n\nans = 0\nfor i in range(n):\n    if a[i] % w == 0:\n        ans += 1\n    else:\n        break\n\nprint(ans)\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n2 1 -3\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5\\n2 1 -3') == '3'\nassert solution('2 4\\n-1 1') == '4'\nassert solution('4 10\\n2 4 1 2') == '2'\nassert solution('4 10\\n3 4 -1 2') == '0'\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 6 3 12 9\") == '9 3 6 12 4 8'\nassert solution(\"42 28 84 126\") == '126 42 84 28'\nassert solution(\"1000000000000000000 3000000000000000000\") == '3000000000000000000 1000000000000000000'\n\"\"\"\n\nfrom typing import List\n\nn = int(input())\nstdin = input().split()"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\""
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'6\\n4 8 6 3 12 9'\n) == '9 3 6 12 4 8'\nassert solution(\n'4\\n42 28 84 126'\n) == '126 42 84 28'\nassert solution(\n'2\\n1000000000000000000 3000000000000000000'\n) == '3000000000000000000 1000000000000000000'\n\n)"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_1) == \"9 3 6 12 4 8\"\n\"\"\"\n\nfrom typing import List\n\nn = int(input())\nseq = list(map(int, input().split()))"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('4 8 6 3 12 9') == '9 3 6 12 4 8'\nassert solution('42 28 84 126') == '126 42 84 28'\nassert solution('1000000000000000000 3000000000000000000') == '3000000000000000000 1000000000000000000'\n\n'''\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n4 8 6 3 12 9') == '9 3 6 12 4 8'\nassert solution('4\\n42 28 84 126') == '126 42 84 28'\nassert solution('2\\n1000000000000000000 3000000000000000000') == '3000000000000000000 1000000000000000000'\n\"\"\""
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\"\n\n\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 4 7 10 12\") == \"3\"\nassert solution(\"5 -1 2 5 8 11\") == \"1\"\nassert solution(\"1 2 2 2\") == \"0\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 4 7 10 12') == '3'\nassert solution('5 -1 2 5 8 11') == '1'"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n3 5 4 7 10 12') == '3\\n7 3 5'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"3\\n3 1 2\"\nassert solution(\"7\\n1 2 3 4 5 6 7\") == \"1\\n7\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"1\\n7\"\nassert solution(\"9\\n1 2 3 4 5 6 7 8 9\") == \"1\\n7\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 4 7 10 12\") == \"3\"\nassert solution(\"-1 2 5 8 11\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n3') == '3'\nassert solution('1\\n2\\n3\\n4') == '4'\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n3 5 4 7 10 12') == '3\\n7 3 5'\n\"\"\"\n\nimport math\nimport typing\nimport functools\nimport collections\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 4 7 10 12\") == '3'\n\"\"\"\n\nimport sys\nimport unittest\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\nassert solution(\"5 2 6\") == \"0 1\"\nassert solution(\"1 10 10\") == \"0 0\"\nassert solution(\"5 5 2\") == \"0 0\"\nassert solution(\"5 0 2\") == \"0 1\"\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\"\n\nA = int(input())\nB = int(input())\nK = int(input())"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 3\\n\") == \"0 2\"\nassert solution(\"10 5 10\\n\") == \"1 1\"\nassert solution(\"5 5 10\\n\") == \"0 0\"\n\"\"\"\nfrom collections import defaultdict\nfrom functools import lru_cache\n\nimport pytest\n\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 3\") == \"0 2\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 3') == '0 2'\n\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 3\\n') == '0 2'\n\"\"\"\n\n\"\"\"\nAoki has B cookies.\nAoki will do the following:\n - If Aoki has one or more cookies, eat one of Aoki's cookies.\n - Otherwise, if Takahashi has one or more cookies, eat one of Takahashi's cookies.\n - If they both have no cookies, do nothing.\nIn the end, how many cookies will Takahashi and Aoki have, respectively?\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 3\") == \"0 2\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"101\") == \"1\"\nassert solution(\"103\") == \"3\"\nassert solution(\"103\") == \"3\"\n\"\"\"\nimport math\n\nX = int(stdin.readline())\n\n\"\"\"\nThe formula of compound interest is as follows:\nA1 = P(1 + r/100)\nA2 = A1(1 + r/100)\nA3 = A2(1 + r/100)\nand so on.\n\nThe formula of compound interest is as follows:\nA1 = P(1 + r/100)\nA2 = A1(1 + r/100)\nA3 = A2(1 + r/100)\n...\n\"\"\"\n\nprint(math.ceil(math.log(X, (1 + 1/100))-1))\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100\") == \"3\"\nassert solution(\"1000\") == \"10\"\nassert solution(\"2000\") == \"20\"\nassert solution(\"8000\") == \"80\"\nassert solution(\"1300\") == \"8\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"103\") == \"3\"\nassert solution(\"100\") == \"1\"\nassert solution(\"101\") == \"0\"\nassert solution(\"110\") == \"1\"\nassert solution(\"100000000\") == \"21\"\n\"\"\"\n\nimport sys\n\nX = int(sys.stdin.readline().rstrip())\n\ncount = 0\n\nwhile True:\n    if X >= 100:\n        X = X - 100\n        count += 1\n    elif X < 100:\n        print(count)\n        break\n    if X == 0:\n        break\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('101') == '1'\nassert solution('102') == '2'\nassert solution('103') == '3'\nassert solution('104') == '4'\nassert solution('105') == '5'\n\n----\nYou're given a starting value X, an annual interest rate of 1%, and an investment period of n years.\n\nAfter n years, what will be the value of X?\n\nX = X * (1 + r)^n\n\nThe solution should return the value of X modulo 1,000,000,007.\n\n\"\"\"\n\nfrom itertools import count\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"103\") == \"3\"\n\"\"\"\n\nimport unittest\nimport sys"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101') == '1'\nassert solution('10') == '10'\nassert solution('20') == '2'\nassert solution('100') == '3'\nassert solution('200') == '4'\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('103') == '3'\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"103\") == \"3\"\nassert solution(\"101\") == \"1\"\nassert solution(\"102\") == \"2\"\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430.\n\n\u0423\u0434\u0430\u043b\u0438\u0442\u0435 \u0438\u0437 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432\u0441\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0431\u0443\u043a\u0432\u044b \u00abh\u00bb.\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043e\u0444\u043e\u0440\u043c\u0438\u0442\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 DeletH(str), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 str \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u043e\u0434\u0430:\n\nprint(DeletH(\"Hello, world!\"))\nprint(DeletH(\"Super-duper-awesome-routine!\"))"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('103') == '3'\nprint(solution(stdin))\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"9\"\nprint(solution(\"2\"))"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n3 2 1') == '1'\nassert solution('4\\n3 2 2') == '8'\nassert solution('4\\n3 2 3') == '13'\nassert solution('4\\n3 3 1') == '9'\nassert solution('4\\n3 3 3') == '16'\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n'''\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"9\"\n\nassert solution(\"3\") == \"21\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 1 5 2\\n4 1 6 2\\n6 2 5 3\\n2 1 2\\n4 1 6 2\\n6 2 5 3\\n2 1 2') == '9'\n\nassert solution('4\\n3 1 5 2\\n4 1 6 2\\n6 2 5 3\\n2 1 2\\n4 1 6 2\\n6 2 5 3\\n2 1 2') == '9'\n\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"9\"\nassert solution(\"3\") == \"18\"\nassert solution(\"4\") == \"36\"\nassert solution(\"5\") == \"84\"\n\n\"\"\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\") == \"6\"\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n3 4 6\\n') == 10\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3 4 6\") == 10\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 6\") == \"10\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4 6') == '10'\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 6\") == 10\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 6\") == 10\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n3 4 6') == 10\n\"\"\"\n\n\"\"\"\nn = int(stdin.readline())\nnums = list(map(int, stdin.readline().split()))\n\nmax_val = 0\n\nfor m in range(2 ** n):\n    val = 0\n    for i in range(n):\n        if ((m >> i) & 1):\n            val += nums[i]\n\n    max_val = max(max_val, val)\n\nprint(max_val)\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n3 4 6') == 10\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n4\\n6\\n') == 10\nassert solution('2\\n1\\n7\\n') == 8\n\"\"\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n1 2\n6 6\n4 4\n3 3\n3 2''') == 'Yes'\n\nassert solution('''5\n1 2\n6 6\n4 4\n3 3\n3 2''') == 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\n\"\"\"\n\nfrom collections import deque\nfrom itertools import zip_longest\nimport sys\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n4 4\\n4 4\\n5 5\\n3 3\\n\") == 'Yes'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2') == 'Yes'\n\nassert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2') == 'Yes'\n\nassert solution('3\\n1 1\\n1 1\\n1 1\\n1 1') == 'No'\n\nassert solution('10\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1') == 'Yes'\n\nassert solution('10\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2') == 'No'"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\nprint(solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\"))\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\nassert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\nassert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\nassert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\nassert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n') == '4'\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"4\"\n\n-------------\n\nGiven an integer n. Find the sum of its digits using recursion. For example, if n = 123, the sum of digits is 6.\n\n-----Constraints-----\n - 10^9 \\leq n \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\n\n-----Output-----\nPrint the sum of digits of n, as an integer.\n\n-----Sample Input-----\n12345\n\n-----Sample Output-----\n15\n\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(2) == 4\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2) == 4\n\"\"\"\n\n\nimport sys\nimport os\nimport numpy as np\n\nsys.path.insert(1, os.path.join(sys.path[0], \"..\"))"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '9'\nassert solution('2') == '4'\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 4\nassert solution('5') == 16\nassert solution('4') == 7\nassert solution('10') == 23\n\n\"\"\"\n\nfrom math import pi"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == '4'\nassert solution('1') == '1'\nassert solution('100') == '858'\nassert solution('0') == '0'\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '4'\nassert solution('3\\n') == '9'\nassert solution('4\\n') == '16'\n\"\"\"\nimport math"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 5 1\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 8 5 1\") == \"Yes\"\n\nassert solution(\"4 3 8 5 2\") == \"No\"\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 8 5 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\nassert solution('5\\n3 8 5 1') == 'Yes'\nassert solution('6\\n3 8 5 1') == 'Yes'\nassert solution('7\\n3 8 5 1') == 'Yes'\nassert solution('8\\n3 8 5 1') == 'Yes'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\nassert solution(\"5\\n3 7 4 5 10\") == \"No\"\nassert solution(\"5\\n6 9 7 2 3\") == \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nThere are a few important things to note in the problem. First, since the answer can only be Yes or No, we will only ever be concerned with the case where N is even. In this case, we can use a binary search to find the length of the longest side, then recurse over all the lengths that can be used to draw the polygon.\n\nFirst, we need to find the longest side of the polygon. We can do this by binary search. To do so, we can first sort the list of lengths, then apply binary search.\n\nWith binary search, we will be able to get the index of the length that we want to use for our longest side. We will search the list from the index of the largest side to the index of the shortest side.\n\nAs we go through the list of lengths, we will keep track of the longest side we've seen so far and the smallest side we've seen so far. As we go through the list, if we encounter a smaller length than our smallest seen so far, we will update the smallest seen so far. If we encounter a larger length than our longest seen so far, we will update the longest seen so far.\n\nOnce we've examined all the sides of the polygon, we can check if the length of the longest side is strictly shorter than the sum of the lengths of all the other sides. If it is, then we can say the polygon can be drawn. If not, then we can say the polygon cannot be drawn."
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 8 5 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 8 5 1\") == \"Yes\"\nassert solution(\"4 8 7 10 12\") == \"No\"\nassert solution(\"1 1 1 1\") == \"Yes\"\n\n---Problem 1---\nGiven a list of integers in increasing order, write a function that moves all zeros to the end of the array without changing the relative order of the non-zero elements.\nFor example, moveZeroes([0,1,0,3,12]) should return [1,3,12,0,0]."
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n1 7\\n3 2') == '702'\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n1 7\\n3 2') == '702'\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\") == 702\n\"\"\"\nimport sys\nfrom typing import Tuple, List\nfrom itertools import accumulate"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2') == 9\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n') == '9'"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3,2) == 9\n\"\"\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n\") == \"9\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3, 2) == 9\n\"\"\"\n\nfrom itertools import permutations\n\nn, k = [int(x) for x in stdin.split()]\ncount = 0\n\nfor i in permutations(range(1, n + 1)):\n    if all(x % k == 0 for x in map(lambda x: x[0] + x[1], zip(i, i[1:]))):\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"3 2\") == \"9\"\nassert solution(\"5 3\") == \"12\"\nassert solution(\"7 3\") == \"36\"\nassert solution(\"10 5\") == \"40\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2') == '9'\nprint(solution(input()))\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n') == '9'\n\"\"\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2') == '9'\nassert solution('7 1') == '0'\nassert solution('5 2') == '7'\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"9\"\nassert solution(\"10 3\") == \"0\"\n\"\"\"\n\nfrom __future__ import print_function\nfrom collections import Counter"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('-9') == '1011'\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('-9') == \"1011\"\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('100') == '1010'\nassert solution('1011') == '1011'\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('-9') == '1011'\nassert solution('9') == '1001'\nassert solution
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"-9\") == \"1011\"\nassert solution(\"-11\") == \"1101\"\n\nsolution(\"-11\")\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('-9') == '1011'\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1011') == '1011'\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('-9') == '1011'\nassert solution('-1') == '11111111'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('-1') == '1'\nassert solution('1011') == '-9'\nassert solution('-1011') == '9'\nassert solution('11101') == '-9'\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1011) == '1011'\nassert solution(5) == '101'\n\n\"\"\"\nimport math"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\nassert solution(\"2 5\\n2 4\") == \"10\"\n\nassert solution(\"3 5\\n2 4 8\") == \"14\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 5\n4 9\n2 4''') == '12'\nprint('Test: All tests passed!')\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\n\"\"\"\nGiven a list of integers, return the maximum product of two numbers from the array.\nFor example, given [9, 10, 3, 9, 2], return 90 (the result of 9 * 9).\n\n-----\nThe brute-force solution here is to consider all pairs of numbers in the list.\nThis is O(n^2) time, where n is the length of the list.\n\nA better solution is to maintain the list in sorted order.\nWe can compute the largest product in O(n) time by repeatedly computing the maximum product of pairs from the left and the right of the list.\n\nFor example, if the input list is [9, 10, 3, 9, 2], we can compute the maximum product of pairs from the left by iterating over the list twice.\nThe first iteration will consider the pairs [9, 10] and [9, 2], and the second iteration will consider the pairs [10, 9] and [2, 9].\nAt each iteration, we either multiply the current pair by the minimum of the two values in the pair, or we ignore the current pair if the minimum value is equal to 0.\nWe keep track of the maximum product of all pairs, which is given by the last element of the list.\n\nO(n) time, O(1) space\n\"\"\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '2'\nassert solution('1 2\\n2 3') == '4'\nassert solution('1 2\\n2 3\\n3 4') == '5'\n'''\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"2 5\\n\"\n    \"4 9\\n\"\n    \"2 4\"\n) == \"12\"\n\n---------------------------------------------"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\\n3 4\\n\") == \"15\"\nassert solution(\"4 2\\n1 5\\n2 5\\n3 5\\n\") == \"22\"\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 5\\n4 9\\n2 4') == '12'\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\"\"\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n2 4\\n3 6\") == '12'\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n10 4 8 7 3''') == 2\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n10 4 8 7 3') == 2\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3\\n5\\n4\\n6') == 2\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == '2'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nH = list(map(int, sys.stdin.readline().split()))\ndp = [0 for _ in range(N)]\ndp[0] = 1\nfor i in range(N):\n    for j in range(i):\n        if H[i] > H[j]:\n            dp[i] = max(dp[i], dp[j] + 1)\n\nprint(max(dp))"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == 2\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n10 4 8 7 3') == '2'\n\n\"\"\"\n\n\"\"\"\n\u601d\u8def:\n\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n10 4 8 7 3') == '2'\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n4 1\\n3 2\") == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == '1'\nassert solution(\"5 3\\n1 2 3 3 3\") == '0'\nassert solution(\"5 3\\n1 2 3 4 5\") == '2'\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n1 2 2 4 5\\n') == '1'\n\nassert solution('5 3\\n1 2 3 4 5\\n') == '2'\n\nassert solution('5 3\\n1 2 3 3 3\\n') == '0'\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 3\") == \"0\\n\"\n\nassert solution(\"4 5 3\\n3 3 3\") == \"1\\n\"\n\nassert solution(\"4 5 3\\n1 1 1\") == \"3\\n\"\nassert solution(\"4 5 3\\n2 2 2\") == \"0\\n\"\nassert solution(\"4 5 3\\n1 2 3\") == \"2\\n\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 2 4 5\\n') == '1'\n\nassert solution('1 2 3 4 5\\n') == '2'\n\nassert solution('1 2 3 3 3\\n') == '0'\n\n\"\"\""
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 3\n1 2 2 4 5\n''') == '1'\nassert solution('''5 3\n1 2 3 4 5\n''') == '2'\n\"\"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"0\"\nassert solution(\"3 1\") == \"0\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"5 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\nassert solution(\"10 20\\n1 2 3 4 5 6 7 8 9 10\") == \"3\"\nassert solution(\"10 20\\n1 2 3 4 5 6 7 8 9 10\") == \"3\"\n\nprint(\"Tests passed\")\n\"\"\""
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 5\\n1 2 2 4 2 3') == '3'\n\"\"\"\n\nn, k = [int(x) for x in stdin.readline().split()]\na = [int(x) for x in stdin.readline().split()]\n\ncounter = 0\nmax_found = 0\nmin_found = 0\n\nfor x in a:\n    if x > max_found:\n        max_found = x\n        counter += 1\n    if x < min_found:\n        min_found = x\n        counter += 1"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 2 4 2 3\") == 3\nassert solution(\"3 3 2 1 1 1 3\") == 4\nassert solution(\"3 3 3 3 3 3\") == 0\nassert solution(\"3 3 2 1 1 3\") == 4\nassert solution(\"3 3 3 3 1 1 3\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 2 4 2 3') == '3'\n\"\"\"\n\nn, k = list(map(int, input().split(' ')))\na = list(map(int, input().split(' ')))\n\nsm = sum(a)\nn_max = a.index(max(a))\nn_min = a.index(min(a))"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2') == '1'\nassert solution('6 5') == '3'\nassert solution('7 5') == '4'\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 2 4 2 3\\n7 3 3 1 1 1 3\") == '3'\nassert solution(\"5 2\\n4 3 2 1 1 3\") == '4'\nassert solution(\"1 2 2 4 2 3\\n1 1 1 3 3 3\") == '0'\nassert solution(\"2 2\\n2 2\") == '0'\n\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5\\n1 2 2 4 2 3') == '3'\nassert solution('6 5\\n1 2 2 4 2 3') == '3'\n\n\"\"\"\n\na, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\nmx = min(a)\nmn = max(a)\n\nans = 0\nwhile mn < mx and a.count(mx) < k:\n    ans += 1\n    mx -= 1\n\nwhile mn > mx and a.count(mn) < k:\n    ans += 1\n    mn += 1\n\nprint(ans)\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 5\\n1 2 2 4 2 3\") == 3\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2') == '2'\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 2 2 4 2 3\") == 3\nassert solution(\"7 5\\n3 3 2 1 1 1 3\") == 4\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 2 4 2 3\\n') == '3'\nassert solution('3 3 2 1 1 1 3\\n') == '4'\nassert solution('10 10 10 10 10 10 10 10\\n') == '0'\nassert solution('4 6\\n4 4') == '2'\n\"\"\"\n\nn, k = map(int, input().split(' '))\na = list(map(int, input().split(' ')))\n\nmin_index = 0\n\nfor i in range(n):\n    if a[i] < a[min_index]:\n        min_index = i\n\ns = k - 1\ncount = 0\n\nwhile s > 0:\n    if a[min_index] < a[(min_index + 1) % n]:\n        count += a[(min_index + 1) % n] - a[min_index]\n        a[min_index] += 1\n    else:\n        count += a[min_index] - a[(min_index + 1) % n]\n        a[(min_index + 1) % n] += 1\n    min_index = (min_index + 1) % n\n    s -= 1\n\nprint(count)"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '3'\nassert solution('2\\n5 2 3') == '6'\n'''\n\nfrom sys import stdin"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n') == '10\\n9\\n1000\\n42000000000000'\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10 ** 6)\nimport re\n\npattern = re.compile(r'^(\\d+) (\\d+) (\\d+)$')\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\n\"\"\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88''') == '''10\n9\n1000\n42000000000000'''\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 1\\n2 3 5') == '1'\nassert solution('2 1 1\\n10 1000000000 1\\n1 1000000000 1000000000') == '1'\nassert solution('2 1 1\\n1 1 1\\n1 1000000000 1\\n1 1000000000 1000000000') == '2'\nassert solution('2 1 1\\n1 1 1\\n1 1000000000 1\\n1 1000000000 1000000000') == '2'\nassert solution('2 1 1\\n2 3 5\\n10 1000000000 1\\n1 1000000000 1000000000') == '8'\n\"\"\"\n\nfrom collections import deque\n\nn, a, b = [int(i) for i in input().split()]\nmin_money = []\nmoney = 10 ** 12\nqueue = deque()\nqueue.append([n, a, b])\nwhile queue:\n    n, a, b = queue.popleft()\n    if a < b:\n        queue.append([n, a, b - 1])\n    if a == b:\n        money = min(money, a * n)\n    if a > b:\n        queue.append([n, a - 1, b])\n    queue.append([n - 1, a, b])"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 3\") == \"10\"\nassert solution(\"7 3 2\") == \"9\"\nassert solution(\"1 1000 1\") == \"1000\"\nassert solution(\"1000000000000 42 88\") == \"42000000000000\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(s) == e\n\"\"\"\n\n\n\"\"\"\nSolution: \n\nTo write the code, I think the following approach is best:\n\n1. Convert the input to a list of tuples.\n2. If the first element of a tuple is 1, then Polycarp needs to buy exactly n liters of water in this tuple.\n3. If the first element of a tuple is 2, then Polycarp needs to buy exactly n-1 liters of water in this tuple.\n4. If the first element of a tuple is 1, then Polycarp needs to buy exactly n+1 liters of water in this tuple.\n5. Do the same for the rest of the tuples.\n\n\"\"\""
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == \"2\"\nassert solution(\"1 2 3\") == \"0\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 6\n3 4 5''') == '2'\nassert solution('''2 3\n3 4''') == '0'\n\n\"\"\"\nimport math"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 6') == '2'\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n1 2 3 4') == 2\n\"\"\"\n\nfrom itertools import accumulate\n\nn, x = map(int, input().split())\narr = list(map(int, input().split()))\n\nprint(sum(i <= x for i in accumulate(arr)))"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 6\\n3 4 5') == 2\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n\"\"\"\nimport math\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\nassert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\nassert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"hoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\nhoge\nenglish\nhoge\nenigma''') == 'Yes'\nassert solution('''4\nhoge\nenglish\nhoge\nenigma''') == 'No'\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"hoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\n\"\"\"\n\nimport sys\nimport re\n\nn = int(sys.stdin.readline())\nlis = []\n\nfor _ in range(n):\n    lis.append(sys.stdin.readline().strip())\n\nlis.sort(key=lambda x: x[0])\n\nfor i in range(len(lis)):\n    word = re.findall(\"[a-zA-Z]\", lis[i])\n    if i == 0:\n        ans = \"Yes\"\n        for j in word:\n            if j!= lis[i][-1]:\n                ans = \"No\"\n    else:\n        if lis[i][0] == lis[i-1][-1]:\n            pass\n        else:\n            ans = \"No\"\n\nprint(ans)\n\n\"\"\"\nfrom collections import deque\n\nstdin = sys.stdin.readlines()\nn = int(stdin[0])\n\nque = deque()\n\nfor _ in range(n):\n    word = stdin[1+_].rstrip()\n    que.append(word)"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 0\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3') == '6'\nassert solution('5 7') == '4'\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n\") == 2\nassert solution(\"2 3\\n\") == 6\n\"\"\"\n\nimport sys\n\ninputs = list(map(int, sys.stdin.readlines()))"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"6\"\nprint(solution(\"2 3\"))\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5 5') == '0'\nassert solution('2 3') == '6'\nassert solution('2 1') == '0'\nassert solution('3 4') == '8'\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"6\"\n\"\"\"\n\nimport math\n\nA, B = map(int, input().split())\n\ncount_a = math.ceil(A / 2) * 2\ncount_b = math.ceil(B / 2) * 2\n\nprint(min(count_a, count_b))\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"6\"\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '4'\nassert solution('3 2') == '2'\nassert solution('3 5') == '8'\nassert solution('7 3') == '3'\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"3 2\") == \"6\"\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('sardine') == 'xxxxxxx'"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(sardine) == xxxxxxx\nprint(\"Solution is correct!\")\n\nYou can also use input() for the stdin argument.\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('sardine') == 'xxxxxxx'\nprint('Test passed')\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('sardine') == 'xxxxxxx'\nprint('Test passed')\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 1 1 3\\n\") == \"Yes\"\nassert solution(\"5\\n1 1 1 1 3\\n\") == \"No\"\n\"\"\"\n\n\nfrom typing import List\nimport math\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 1 1 3') == 'Yes'\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1 1 3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 1 1 3') == 'Yes'\nassert solution('5 4 3 2 1') == 'No'\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 1 1 3\\n') == 'Yes'\nassert solution('3\\n2 2 1\\n') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1 1 3\") == \"Yes\"\nassert solution(\"5 2 4 3 2\") == \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\nassert solution(\"5\\n3 2 1 1 3\") == \"No\"\nassert solution(\"5\\n1 1 1 1 3\") == \"Yes\"\n\"\"\"\nfrom typing import List, NamedTuple\nimport unittest\n\n\nclass Case(NamedTuple):\n    input: List[int]\n    expected: str\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\nassert solution('6\\n1 1 1 1 1 1\\n') == 'Yes'\nassert solution('5\\n1 3 1 1 2') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == 1\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\\n3 2 1\\n1 2 2\") == 1\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\") == \"1\"\n\"\"\"\n\nimport sys\nimport numpy\n\nN, M, C = [int(x) for x in sys.stdin.readline().rstrip().split()]\nB = [int(x) for x in sys.stdin.readline().rstrip().split()]\nA = numpy.array([[int(x) for x in sys.stdin.readline().rstrip().split()] for _ in range(N)])\n\nprint(numpy.count_nonzero(numpy.dot(A, B) + C > 0))\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\") == \"1\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 3 -10\n1 2 3\n3 2 1\n1 2 2''') == '1'\n\"\"\"\n\nN, M, C = [int(n) for n in input().split()]\n\nB = []\nA = []\n\nfor _ in range(N):\n    B.append([int(n) for n in input().split()])\n    A.append([int(n) for n in input().split()])\n\na = [0] * N\n\nfor i in range(N):\n    t = 0\n    for j in range(M):\n        t += A[i][j] * B[i][j]\n    a[i] = t + C\n\nprint(sum(1 for i in a if i > 0))\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == 1\n\"\"\"\n\nfrom collections import Counter\n\nN, M, C = map(int, stdin.readline().split())\n\nmin_b, max_b = [0] * M, [0] * M\n\nfor i in range(N):\n    b, *a = map(int, stdin.readline().split())\n    b_count = Counter(b)\n\n    for key, value in b_count.items():\n        min_b[key - 1] = max(min_b[key - 1], value)\n        max_b[key - 1] = max(max_b[key - 1], value)\n\n    if min(a) * min_b[0] + max(a) * max_b[0] + C > 0:\n        print(1)\n        break"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\\n') == '1'\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == 1\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1900\") == 100\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000\\n') == '0'\nassert solution('1851\\n') == '2'\nassert solution('10010\\n') == '0'\nassert solution('10000\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000\") == 1\nassert solution(\"2000\") == 2\nassert solution(\"3000\") == 3\nassert solution(\"4000\") == 4\nassert solution(\"5000\") == 5\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000\") == \"1\"\nassert solution(\"1002\") == \"2\"\n\n-----Test Input-----\n1000\n\n-----Test Output-----\n1\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"10\") == \"2\"\nassert solution(\"20\") == \"5\"\nassert solution(\"50\") == \"20\"\nassert solution(\"100\") == \"50\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000') == 1\nassert solution('2000') == 2\nassert solution('1889') == 9\nassert solution('1900') == 1\n\"\"\"\n\nn = int(input())\nn_bills = 0\n\nwhile n > 0:\n    if n >= 1000:\n        n_bills += 1\n        n -= 1000\n    else:\n        n_bills += 1\n        n -= 500\n    if n_bills >= 5:\n        n_bills -= 5\n        print(1000)\n        n += 1000\n    else:\n        break\n\nwhile n > 0:\n    if n >= 100:\n        n_bills += 1\n        n -= 100\n    else:\n        n_bills += 1\n        n -= 50\n    if n_bills >= 5:\n        n_bills -= 5\n        print(100)\n        n += 100\n    else:\n        break\n\nwhile n > 0:\n    if n >= 10:\n        n_bills += 1\n        n -= 10\n    else:\n        n_bills += 1\n        n -= 5\n    if n_bills >= 5:\n        n_bills -= 5\n        print(10)\n        n += 10\n    else:\n        break\n\nwhile n > 0:\n    if n >= 1:\n        n_bills += 1\n        n -= 1\n    else:\n        n_bills += 1\n        n -= 0.5\n    if n_bills >= 5:\n        n_bills -= 5\n        print(1)\n        n += 1\n    else:\n        break\n\nwhile n > 0:\n    if n >= 0.1:\n        n_bills += 1\n        n -= 0.1\n    else:\n        n_bills += 1\n        n -= 0.05\n    if n_bills >= 5:\n        n_bills -= 5\n        print(0.1)\n        n += 0.1\n    else:\n        break\n\nwhile n > 0:\n    if n >= 0.01:\n        n_bills += 1\n        n -= 0.01\n    else:\n        n_bills += 1\n        n -= 0.005\n    if n_bills >= 5:\n        n_bills -= 5\n        print(0.01)\n        n += 0.01\n    else:\n        break\n\nwhile n > 0:\n    if n >= 0.001:\n        n_bills += 1\n        n -= 0.001\n    else:\n        n_bills += 1\n        n -= 0.0005\n    if n_bills >= 5:\n        n_bills -= 5\n        print(0.001)\n        n += 0.001\n    else:\n        break\n\nwhile n > 0:\n    if n >= 0.0001:\n        n_bills += 1\n        n -= 0.0001\n    else:\n        n_bills += 1\n        n -= 0.00005\n    if n_bills >= 5:\n        n_bills -= 5\n        print(0.0001)\n        n += 0.0001\n    else:\n        break\n\nwhile n > 0:\n    if n >= 0.00001:\n        n_bills += 1\n        n -= 0.00001\n    else:\n        n_bills += 1\n        n -= 0.000005\n    if n_bills >= 5:\n        n_bills -= 5\n        print(0.00001)\n        n += 0.00001\n    else:\n        break\n\nwhile n > 0:\n    if n >= 0.000001:\n        n_bills += 1\n        n -= 0.000001\n    else:\n        n_bills += 1\n        n -= 0.000005\n    if n_bills >= 5:\n        n_bills -= 5\n        print(0.000001)\n        n += 0.000001\n    else:\n        break\n\nwhile n > 0:\n    if n >= 0.0000001:\n        n_bills += 1\n        n -= 0.0000001\n    else:\n        n_bills += 1\n        n -= 0.0000005\n    if n_bills >= 5:\n        n_bills -= 5\n        print(0.0000001)\n        n += 0.0000001\n    else:\n        break\n\nwhile n > 0:\n    if n >= 0.00000001:\n        n_bills += 1\n        n -= 0.00000001\n    else:\n        n_bills += 1\n        n -= 0.000005\n    if n_bills >= 5:\n        n_bills -= 5\n        print(0.00000001)\n        n += 0.00000001\n    else:\n        break\n\nwhile n > 0:\n    if n >= 0.000000001:\n        n_bills += 1\n        n -= 0.000000001\n    else:\n        n_bills += 1\n        n -= 0.0000005\n    if n_bills >= 5:\n        n_bills -= 5\n        print(0.000000001)\n        n += 0.000000001\n    else:\n        break\n\nwhile n > 0:\n    if n >= 0.0000000001:\n        n_bills += 1\n        n -= 0.0000000001\n    else:\n        n_bills += 1\n        n -= 0.000005\n    if n_bills >= 5:\n        n_bills -= 5\n        print(0.0000000001)\n        n += 0.0000000001\n    else:\n        break\n\nwhile n > 0:\n    if n >= 0.00000000001:\n        n_bills += 1\n        n -= 0.00000000001\n    else:\n        n_bills += 1\n        n -= 0.000005\n    if n_bills >= 5:\n        n_bills -= 5\n        print(0.00000000001)\n        n += 0.00000000001\n    else:\n        break\n\nwhile n > 0:\n    if n >= 0.000000000001:\n        n_bills += 1\n        n -= 0.000000000001\n    else:\n        n_bills += 1\n        n -= 0.00005\n    if n_bills >= 5:\n        n_bills -= 5\n        print(0.000000000001)\n        n += 0.000000000001\n    else:\n        break\n\nwhile n > 0:\n    if n >= 0.0000000000001:\n        n_bills += 1\n        n -= 0.0000000000001\n    else:\n        n_bills += 1\n        n -= 0.00005\n    if n_bills >= 5:\n        n_bills -= 5\n        print(0.0000000000001)\n        n += 0.0000000000001\n    else:\n        break\n\nwhile n > 0:\n    if n >= 0.00000000000001:\n        n_bills += 1\n        n -= 0.00000000000001\n    else:\n        n_bills += 1\n        n -= 0.000005\n    if n_bills >= 5:\n        n_bills -= 5\n        print(0.00000000000001)\n        n += 0.00000000000001\n    else:\n        break\n\nwhile n > 0:\n    if n >= 0.000000000000001:\n        n_bills += 1\n        n -= 0.000000000000001\n    else:\n        n_bills += 1\n        n -= 0.00005\n    if n_bills >= 5:\n        n_bills -= 5\n        print(0.000000000000001)\n        n += 0.000000000000001\n    else:\n        break\n\nwhile n > 0:\n    if n >= 0.0000000000000001:\n        n_bills += 1\n        n -= 0.0000000000000001\n    else:\n        n_bills += 1\n        n -= 0.00005\n    if n_bills >= 5:\n        n_bills -= 5\n        print(0."
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('1') == 0\nassert solution('2') == 0\nassert solution('3') == 0\nassert solution('4') == 1\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100') == '100'\nassert solution('1') == '1000'\nassert solution('2') == '1100'\nassert solution('3') == '1110'\nassert solution('4') == '11100'\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"20\") == \"10\"\nassert solution(\"300\") == \"200\"\nassert solution(\"4000\") == \"3000\"\n\n\"\"\"\n\n\"\"\"\nn = int(input())\ncount = 0\n\nwhile n >= 1000:\n    count += 1\n    n -= 1000\n\nwhile n >= 500:\n    count += 1\n    n -= 500\n\nwhile n >= 100:\n    count += 1\n    n -= 100\n\nwhile n >= 50:\n    count += 1\n    n -= 50\n\nwhile n >= 10:\n    count += 1\n    n -= 10\n\nwhile n >= 5:\n    count += 1\n    n -= 5\n\nwhile n >= 1:\n    count += 1\n    n -= 1\n\nprint(count)\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n3 5 2\\n4 5') == '9'\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a) == b\n\n------\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 2\\n4 5\\n\") == 9\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2\\n4 5\\n\") == \"9\"\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 5 3\") == \"5\"\nassert solution(\"3 5 2\") == \"3\"\n\"\"\"\n\nimport sys\nimport time"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n3 5 2\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n'''\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n1 2 1\n2 1 1\n''') == '1'\nassert solution('''4\n1 2 1\n3 1 1\n''') == '2'\nassert solution('''5\n1 1 2\n2 2 1\n''') == '3'\nassert solution('''5\n1 1 1\n2 2 1\n''') == '3'\nassert solution('''10\n1 2 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '10'"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 2\\n4 5') == '9'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22') == 'No War'\nassert solution('3 2 10 20\\n8 15 13\\n16 21') == 'War'\n\"\"\"\n\nn, m, x, y = map(int, input().split())\nx_l, y_l = list(map(int, input().split())), list(map(int, input().split()))"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22\\n') == 'No War'\n\"\"\"\n\nN, M, X, Y = list(map(int, stdin.readline().split()))\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22') == 'No War'\nassert solution('3 2 10 20\\n8 15 13\\n16 22\\n8 17 15') == 'War'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('2 2 3 3') == 'War'\nassert solution('1 1 1 1') == 'No War'\nassert solution('5 5 5 5') == 'War'\nassert solution('1 1 1 1 1 1 1 1 1') == 'War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_expected\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"\n\n\"\"\"\nimport sys\nimport numpy as np\n\nn, m, x, y = map(int, sys.stdin.readline().strip().split(' '))\nx_arr = np.array(map(int, sys.stdin.readline().strip().split(' ')))\ny_arr = np.array(map(int, sys.stdin.readline().strip().split(' ')))\n\nstdin = sys.stdin.readline()\nwhile stdin:\n    x, y = map(int, stdin.strip().split(' '))\n    x_arr = np.where(x_arr < x, x, x_arr)\n    y_arr = np.where(y_arr >= y, y, y_arr)\n    stdin = sys.stdin.readline()"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\n\"\"\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"2\n3\n4\n\"\"\") == \"6\"\n\nassert solution(\"\"\"2\n2\n3\n\"\"\") == \"6\"\n\nassert solution(\"\"\"2\n3\n1\n\"\"\") == \"9\"\n\nassert solution(\"\"\"3\n4\n5\n\"\"\") == \"12\"\n\nassert solution(\"\"\"3\n5\n10\n\"\"\") == \"18\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3\\n4\") == \"6\"\nassert solution(\"5\\n5\\n8\\n8\\n9\\n1\") == \"36\"\nassert solution(\"3\\n6\\n9\") == \"12\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\": 2 3\") == 6\n\n\"\"\"\nfrom typing import List, Dict"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3\\n1\") == 6\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3\\n6\") == \"6\"\nassert solution(\"2\\n10\\n100\") == \"310\"\n\nprint(\"All Tests Passed\")\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2\\n3\\n4') == '2'\nassert solution('4\\n3\\n3\\n4') == '6'\n\"\"\"\nfrom math import gcd\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3\\n1\\n4\\n\") == \"6\"\n\"\"\"\n\nimport sys\nimport math\nfrom decimal import Decimal"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\": 2\") == \"6\"\nassert solution(\": 3\") == \"9\"\nassert solution(\": 5\") == \"16\"\nassert solution(\": 10\") == \"36\"\nassert solution(\": 15\") == \"65\"\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n2\\n3\\n\") == \"6\"\nprint(\"PASSED\")\n\n-----------------\n\nGiven an array of strings, sort them in the following order:\n\n- by the length of the first string.\n- if the length of the first string is the same, compare the second string, and so on.\n- if all strings are the same, sort the original array.\n\nInput Format\nThe only argument given is the array of strings A.\n\nOutput Format\nReturn the sorted array of strings.\n\nExample Input\nInput 1:\n\nA = [\"cool\", \"lock\", \"cook\"]\n\nInput 2:\n\nA = [\"cat\", \"dog\", \"lion\"]\n\nExample Output\nOutput 1:\n\n[\"cool\", \"lock\", \"cook\"]\n\nOutput 2:\n\n[\"cat\", \"dog\", \"lion\"]\n\nExample Explanation\nExplanation 1:\n\n\"cool\" is the longest string, so it comes first.\n\"lock\" is the shortest string, so it comes last.\n\"cook\" is the third string.\nExplanation 2:\n\n\"cat\" is the longest string, so it comes first.\n\"dog\" is the shortest string, so it comes last.\n\"lion\" is the third string.\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1 2 3\\n') == '0'\nassert solution('1 1 1\\n') == '0'\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\") == 0\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3') == '0'\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 2 3\") == '0'\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\") == 0\n\"\"\"\n\nfrom collections import namedtuple\n\nTestCase = namedtuple(\"TestCase\", [\"n\", \"w\"])\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1 2 3') == '0'\nassert solution('3\\n1 2 3') == '0'\nassert solution('5\\n1 2 3 4 5') == '1'\nassert solution('5\\n2 3 4 5') == '1'\nassert solution('5\\n3 4 5') == '0'\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"0\"\nassert solution(\"5\\n1 3 3 2 3\") == \"0\"\nassert solution(\"5\\n1 2 3 2 5\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3') == '0'\n\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 2 3') == '0'\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\nw = list(map(int, sys.stdin.readline().strip().split()))\n\nt = w[0]\ns1 = 0\ns2 = sum(w[1:])\n\nfor i in range(1, n):\n    if w[i] <= t:\n        s1 += w[i]\n        s2 -= w[i]\n    else:\n        t = w[i]\n        s1 += w[i]\n        s2 -= w[i]\n\nprint(abs(s1 - s2))\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == '6'\nassert solution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\") == '0'\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == '2'\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"2\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12') == '2'\nassert solution('3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '0'\nassert solution('3 3\\n1 2 3\\n4 5 6\\n7 8 9') == '6'\nassert solution('4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12') == '2'\nassert solution('4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '2'\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == '6'\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == '2'\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == '0'\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == '2'\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == '0'\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == '6'"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n3 2 1\\n1 2 3\\n4 5 6') == '6'\nassert solution('4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12') == '2'\n\"\"\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"6\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n5 10 2 3 14 5') == '5'\nassert solution('2\\n1 100') == '99'\nassert solution('8\\n4 10 5 6 2 3 1 7') == '4'\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"99\"\n\"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n5 10 2 3 14 5') == '5'\nassert solution('2\\n1 100') == '99'"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 2 3 14 5\") == \"5\"\nassert solution(\"1 100\") == \"99\"\n\n\n\n-----Answer-----\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 10 2 3 14 5\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 10 2 3 14 5\") == \"5\"\nassert solution(\"2 1 100\") == \"99\"\nassert solution(\"1 100\") == \"100\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 2 3 14 5\") == \"5\"\nassert solution(\"6 100 2 3 14 5\") == \"6\"\nassert solution(\"2 100\") == \"99\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n\n\"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n5 10 2 3 14 5') == '5'\nassert solution('2\\n1 100') == '99'\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n3 1') == '1'\nassert solution('6 2\\n3 4 8 2 6 9') == '2'\nassert solution('6 3\\n9 10 11 8 12 7') == '3'\nassert solution('6 4\\n9 10 11 12 13 14') == '5'\nassert solution('6 5\\n9 10 11 12 13 14 15') == '6'\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 0 0 1 0\") == \"2\"\nassert solution(\"5\\n0 1 1 1 1\") == \"2\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"3\"\nassert solution(\"7\\n1 1 1 1 1 1 1\") == \"3\"\nassert solution(\"8\\n1 1 1 1 1 1 1 1\") == \"4\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 0 1 0 1\\n') == '2'\n\nassert solution('6\\n0 1 0 1 1 0\\n') == '2'\n\nassert solution('7\\n1 0 1 1 1 0 1\\n') == '3'\n\nassert solution('3\\n0 0 0\\n') == '0'\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\nassert solution(\"9\\n0 1 0 1 1 1 1 1 1\\n\") == \"9\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n1 0 1 1 1 0 1') == '3'\n\nassert solution('3\\n0 0 0') == '0'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read().splitlines()\n\nn = int(stdin[0])\n\nhours = list(map(int, stdin[1].split(' ')))\n\ncurrent_rest_index = 0\ncurrent_rest_length = 1\nfor i in range(n):\n    if hours[i] == 0 and hours[i + 1] == 1:\n        current_rest_length += 1\n    else:\n        if current_rest_length > current_rest_index:\n            current_rest_index = current_rest_length\n        current_rest_length = 1"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 0 1 0 1\") == '2'\nassert solution(\"6\\n0 1 0 1 1 0\") == '2'\nassert solution(\"7\\n1 0 1 1 1 0 1\") == '3'\nassert solution(\"3\\n0 0 0\") == '0'\nassert solution(\"6\\n0 1 0 1 1 0\") == '3'\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n0 0 0') == '0'\nassert solution('4\\n0 0 1 1') == '2'\nassert solution('5\\n0 1 1 1 1 0') == '3'\n\nassert solution('6\\n1 0 1 1 1 0 1') == '2'\nassert solution('7\\n1 0 1 1 1 0 1 0') == '3'\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 0 1 0 1\\n') == '2'\nassert solution('6\\n0 1 0 1 1 0\\n') == '2'\nassert solution('7\\n1 0 1 1 1 0 1\\n') == '3'\nassert solution('3\\n0 0 0\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\nassert solution(\"6\\n0 0 0 1 1 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('7') == '0'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('7') == '0'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\n\"\"\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7') == 0\n\"\"\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '0'\nassert solution('1') == '1'\nassert solution('8') == '0'\n\"\"\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == \"3\"\nassert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == \"4\"\n\"\"\"\n\nn = int(input())\ncheeses = set()\nfor i in range(n):\n    cheeses.add(input())\nprint(len(cheeses))\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9\\n' + 'brie soft\\n' + 'camembert soft\\n' + 'feta soft\\n' + 'goat soft\\n' +'muenster soft\\n' + 'asiago hard\\n' + 'cheddar hard\\n' + 'gouda hard\\n' +'swiss hard') == 3\nassert solution('6\\n' + 'parmesan hard\\n' + 'emmental hard\\n' + 'edam hard\\n' + 'colby hard\\n' + 'gruyere hard\\n' + 'asiago hard') == 4\nassert solution('5\\n' + 'brie soft\\n' + 'camembert soft\\n' + 'feta soft\\n' + 'goat soft\\n' +'muenster soft') == 2\nassert solution('7\\n' + 'parmesan hard\\n' + 'emmental hard\\n' + 'edam hard\\n' + 'colby hard\\n' + 'gruyere hard\\n' + 'asiago hard') == 6\nassert solution('3\\n' + 'brie soft\\n' + 'camembert soft\\n' + 'feta soft') == 3\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == \"3\"\nassert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == \"4\"\nassert solution(\"1\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == \"0\"\nassert solution(\"\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == \"3\"\n\nassert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == \"4\"\n\n-----Explanation-----\nThe first example is trivial. All of the cheeses have the same type, so you just need to count them. The second example is more interesting. The cheeses have different types: Parmesan is \"soft\", Emmental is \"soft\", Edam is \"hard\", Colby is \"hard\", Gruyere is \"soft\", and Asiago is \"hard\".\nYou can't count the cheeses, because Asiago is \"hard\". So we have 4 cheeses (including Asiago).\n\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9\\n brie soft\\n camembert soft\\n feta soft\\n goat soft\\n muenster soft\\n asiago hard\\n cheddar hard\\n gouda hard\\n swiss hard\\n') == '3'\nassert solution('6\\n parmesan hard\\n emmental hard\\n edam hard\\n colby hard\\n gruyere hard\\n asiago hard\\n') == '4'\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == \"3\"\nprint(\"Passed\")\n\n\"\"\"\n\nn = int(input())\ncheese = [input().split() for _ in range(n)]\ncount = 0\nfor x, y in cheese:\n    if x == \"soft\":\n        count += 1\nprint(count)\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n brie soft\\n camembert soft\\n feta soft\\n goat soft\\n muenster soft\\n asiago hard\\n cheddar hard\\n gouda hard\\n swiss hard\\n\") == \"3\"\nprint(\"Test 1 OK\")\nassert solution(\"6\\n parmesan hard\\n emmental hard\\n edam hard\\n colby hard\\n gruyere hard\\n asiago hard\\n\") == \"4\"\nprint(\"Test 2 OK\")\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n\"\n    \"brie soft\\n\"\n    \"camembert soft\\n\"\n    \"feta soft\\n\"\n    \"goat soft\\n\"\n    \"muenster soft\\n\"\n    \"asiago hard\\n\"\n    \"cheddar hard\\n\"\n    \"gouda hard\\n\"\n    \"swiss hard\\n\") == \"3\"\n\nassert solution(\"6\\n\"\n    \"parmesan hard\\n\"\n    \"emmental hard\\n\"\n    \"edam hard\\n\"\n    \"colby hard\\n\"\n    \"gruyere hard\\n\"\n    \"asiago hard\\n\") == \"4\"\n\nassert solution(\"6\\n\"\n    \"parmesan hard\\n\"\n    \"emmental hard\\n\"\n    \"edam hard\\n\"\n    \"colby hard\\n\"\n    \"gruyere hard\\n\"\n    \"asiago hard\\n\"\n    \"cheddar hard\\n\") == \"4\"\n\"\"\"\n\n\"\"\"\nGiven a text string and a key string, write a function that returns the ciphertext in the same format with all the characters shifted by the key number of places.\n\nExamples\n\nshift_cipher(\"Hello, World!\", 3) \u279e \"Khoor, Cdru\"\n\nshift_cipher(\"Good Bye, World!\", -5) \u279e \"Ydv! bb, World!\"\n\nshift_cipher(\"What's going on?\", 0) \u279e \"What's going on?\"\n\nshift_cipher(\"Chill out!\", 2) \u279e \"Hxzj nw!\"\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == 3\nassert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == 4\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n') == 3\nassert solution('6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n') == 4\n\n\"\"\""
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('0 1 2 1') == '0 0 0 2'\nassert solution('0 1 2 1 2 3 4') == '0 0 0 1 0 2 4'\n\nassert solution('') == ''\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\n\"\"\""
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    5\n    0 1 2 1\n    3 2 1 1\n    \"\"\"\n) == \"\"\"\n    1 0 0 2 \n    \"\"\"\nassert solution(\n    \"\"\"\n    7\n    2 5 1 5 3 4 3\n    2 4 3 5 6 5 1\n    \"\"\"\n) == \"\"\"\n    0 0 0 1 0 2 4\n    \"\"\"\n\nprint(\"Successfully solved.\")\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2 1\") == \"1 0 0 2\"\n\"\"\"\n\n\"\"\"\n\u0422\u0443\u0442 \u043c\u044b \u0438\u043c\u0435\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 n \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0435\u0440\u0435\u0442\u043e\u0441\u043e\u0432\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043c\u044b \u0438\u043c\u0435\u0435\u043c \u044d\u0442\u043e\u0442 \u043c\u0430\u0441\u0441\u0438\u0432:\n\na = [1, 2, 3, 4]\n\n\u0422\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:\n\na = [1, 2, 3, 4] -> a = [2, 3, 4, 1]\n\n\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u043c\u0430\u0441\u0441\u0438\u0432:\n\nc = [1, 1, 3, 2, 2, 4, 3]\n\n\u0414\u0430\u043d\u043d\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435.\n\n\u041f\u043e\u043c\u0438\u043c\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0449\u0435 \u043e\u0434\u043d\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0442\u0430\u043a\u043e\u0433\u043e \u043d\u043e\u0432\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430:\n\nc = [1, 1, 3, 2, 2, 4, 3] -> c = [1, 1, 3, 4, 2, 2, 3]\n\n\u0412 \u043e\u0431\u0449\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u0430\u043a \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0434\u043b\u044f \u0441\u0442\u0430\u0440\u043e\u0433\u043e, \u0442\u0430\u043a \u0438 \u0432 \u043d\u043e\u0432\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0435,\n\u0442.\u0435. \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0449\u0438\u043c \u043c\u0435\u0441\u0442\u0430\u043c\u0438, \u043d\u043e \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u0433\u0443\u044e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443, \u0442.\u0435.\n\nc[0] > c[1]\nc[1] > c[2]\n...\nc[i-1] > c[i]\n\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0432 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c\u0443 \u043f\u043e\u0440\u044f\u0434\u043a\u0443, \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c:\n\nc[0] > c[1]\nc[0] > c[2]\n...\nc[i-1] > c[i]\n\n\u0422\u0430\u043a\u0436\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432\u044b\u0432\u043e\u0434 \u043d\u043e\u0432\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e n (1\u2264n\u22642\u22c5105).\n\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b n \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b a1, a2, \u2026, an (0\u2264ai\u2264n).\n\n\u0412 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b n \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b b1, b2, \u2026, bn (0\u2264bi\u2264n).\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0430 \u0437\u0430\u0442\u0435\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043d\u043e\u0432\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n4\n2 5 1 5 3 4 3\n2 4 3 5 6 5 1\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1 0 0 2\n0 0 1 0 2 4\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n6\n1 2 3 4 5 6\n1 4 3 6 5 2\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1 1 1 6 2"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n4 5 6\\n') == '0 0 0 1 0 2 4'\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\") == \"0 0 0 1 0 2 4\"\nassert solution(\"10\\n2 3 9 7 3 1 7 4 3 4\") == \"0 0 0 1 0 2 4 3 3 9 7\"\n\"\"\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\nb = list(map(int, stdin.readline().split()))\n\nc = []\nfor i in range(n):\n    c.append((a[i] + b[i]) % n)\n\nc.sort()\n\nprint(' '.join(map(str, c)))"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\") == \"0 0 0 1 0 2 4\"\n\"\"\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"4\n0 1 2 1\n3 2 1 1\"\"\"\n) == \"\"\"1 0 0 2\"\"\"\n\nassert solution(\n\"\"\"7\n2 5 1 5 3 4 3\n2 4 3 5 6 5 1\"\"\"\n) == \"\"\"0 0 0 1 0 2 4\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"110011001110111110\") == \"0\"\nassert solution(\"10101101101101110\") == \"1\"\nassert solution(\"111001010110110110\") == \"1\"\nassert solution(\"11101111011110111\") == \"1\"\nassert solution(\"11111111111111111111111111111101\") == \"0\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 0\nassert solution('010') == 1\nassert solution('01010') == 1\nassert solution('11101101101') == 1\n\nprint('All test cases passed.')\n\n-----\n\n[Image]\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 0 1 0\") == \"0\"\nassert solution(\"1 0 1 1\") == \"1\"\nassert solution(\"0 0 1 1\") == \"0\"\nassert solution(\"1 0 1 1\") == \"1\"\n\nprint(\"Test finished.\")\n'''\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11101\") == \"1\"\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"001101\") == \"1\"\nassert solution(\"11101\") == \"0\"\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11101\") == 1\nassert solution(\"11010\") == 1\nassert solution(\"11110\") == 0\nassert solution(\"101010\") == 0\nassert solution(\"101110\") == 1\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\\n0\\n1\\n0\\n\") == \"0\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected_output\n\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101010') == '1'\nassert solution('111011') == '0'\nassert solution('10010') == '1'\nassert solution('11100') == '0'\nassert solution('11110') == '1'\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1 1 0\") == \"0\"\nprint(\"Passed\")\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"1000 15 80\"\n) == \"Yes\"\nprint(solution(input()))\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\"\n\n\"\"\"\n    D | T | S\n=================\n1 | 2 | 3\n=================\n2 | 4 | 6\n=================\n3 | 6 | 9\n=================\n4 | 8 | 12\n=================\n5 | 10 | 15\n=================\n6 | 12 | 18\n=================\n7 | 15 | 21\n=================\n8 | 18 | 24\n=================\n9 | 21 | 27\n=================\n10 | 24 | 30\n=================\n11 | 27 | 33\n=================\n12 | 30 | 36\n=================\n13 | 33 | 39\n=================\n14 | 36 | 42\n=================\n15 | 39 | 45\n=================\n16 | 42 | 48\n=================\n17 | 45 | 51\n=================\n18 | 48 | 54\n=================\n19 | 51 | 57\n=================\n20 | 54 | 60\n=================\n21 | 57 | 63\n=================\n22 | 60 | 66\n=================\n23 | 63 | 69\n=================\n24 | 66 | 72\n=================\n25 | 69 | 75\n=================\n26 | 72 | 78\n=================\n27 | 75 | 81\n=================\n28 | 78 | 84\n=================\n29 | 81 | 87\n=================\n30 | 84 | 90\n=================\n31 | 87 | 93\n=================\n32 | 90 | 96\n=================\n33 | 93 | 99\n=================\n34 | 96 | 102\n=================\n35 | 99 | 105\n=================\n36 | 102 | 108\n=================\n37 | 105 | 111\n=================\n38 | 108 | 114\n=================\n39 | 111 | 117\n=================\n40 | 114 | 120\n=================\n41 | 117 | 123\n=================\n42 | 120 | 126\n=================\n43 | 123 | 129\n=================\n44 | 126 | 132\n=================\n45 | 129 | 135\n=================\n46 | 132 | 138\n=================\n47 | 135 | 141\n=================\n48 | 138 | 144\n=================\n49 | 141 | 147\n=================\n50 | 144 | 150\n=================\n51 | 147 | 153\n=================\n52 | 150 | 156\n=================\n53 | 153 | 159\n=================\n54 | 156 | 162\n=================\n55 | 159 | 165\n=================\n56 | 162 | 168\n=================\n57 | 165 | 171\n=================\n58 | 168 | 174\n=================\n59 | 171 | 177\n=================\n60 | 174 | 180\n=================\n61 | 177 | 183\n=================\n62 | 180 | 186\n=================\n63 | 183 | 189\n=================\n64 | 186 | 192\n=================\n65 | 189 | 195\n=================\n66 | 192 | 198\n=================\n67 | 195 | 201\n=================\n68 | 198 | 204\n=================\n69 | 201 | 207\n=================\n70 | 204 | 210\n=================\n71 | 207 | 213\n=================\n72 | 210 | 216\n=================\n73 | 213 | 219\n=================\n74 | 216 | 222\n=================\n75 | 219 | 225\n=================\n76 | 222 | 228\n=================\n77 | 225 | 231\n=================\n78 | 228 | 234\n=================\n79 | 231 | 237\n=================\n80 | 234 | 240\n=================\n81 | 237 | 243\n=================\n82 | 240 | 246\n=================\n83 | 243 | 249\n=================\n84 | 246 | 252\n=================\n85 | 249 | 255\n=================\n86 | 252 | 258\n=================\n87 | 255 | 261\n=================\n88 | 258 | 264\n=================\n89 | 261 | 267\n=================\n90 | 264 | 270\n=================\n91 | 267 | 273\n=================\n92 | 270 | 276\n=================\n93 | 273 | 279\n=================\n94 | 276 | 282\n=================\n95 | 279 | 285\n=================\n96 | 282 | 288\n=================\n97 | 285 | 291\n=================\n98 | 288 | 294\n=================\n99 | 291 | 297\n=================\n100 | 294 | 300\n=================\n101 | 297 | 303\n=================\n102 | 300 | 306\n=================\n103 | 303 | 309\n=================\n104 | 306 | 312\n=================\n105 | 309 | 315\n=================\n106 | 312 | 318\n=================\n107 | 315 | 321\n=================\n108 | 318 | 324\n=================\n109 | 321 | 327\n=================\n110 | 324 | 330\n=================\n111 | 327 | 333\n=================\n112 | 330 | 336\n=================\n113 | 333 | 339\n=================\n114 | 336 | 342\n=================\n115 | 339 | 345\n=================\n116 | 342 | 348\n=================\n117 | 345 | 351\n=================\n118 | 348 | 354\n=================\n119 | 351 | 357\n=================\n120 | 354 | 360\n=================\n121 | 357 | 363\n=================\n122 | 360 | 366\n=================\n123 | 363 | 369\n=================\n124 | 366 | 372\n=================\n125 | 369 | 375\n=================\n126 | 372 | 378\n=================\n127 | 375 | 381\n=================\n128 | 378 | 384\n=================\n129 | 381 | 387\n=================\n130 | 384 | 390\n=================\n131 | 387 | 393\n=================\n132 | 390 | 396\n=================\n133 | 393 | 399\n=================\n134 | 396 | 402\n=================\n135 | 399 | 405\n=================\n136 | 402 | 408\n=================\n137 | 405 | 411\n=================\n138 | 408 | 414\n=================\n139 | 411 | 417\n=================\n140 | 414 | 420\n=================\n141 | 417 | 423\n=================\n142 | 420 | 426\n=================\n143 | 423 | 429\n=================\n144 | 426 | 432\n=================\n145 | 429 | 435\n=================\n146 | 432 | 438\n=================\n147 | 435 | 441\n=================\n148 | 438 | 444\n=================\n149 | 441 | 447\n=================\n150 | 444 | 450\n=================\n151 | 447 | 453\n=================\n152 | 450 | 456\n=================\n153 | 453 | 459\n=================\n154 | 456 | 462\n=================\n155 | 459 | 465\n=================\n156 | 462 | 468\n=================\n157 | 465 | 471\n=================\n158 | 468 | 474\n=================\n159 | 471 | 477\n=================\n160 | 474 | 480\n=================\n161 | 477 | 483\n=================\n162 | 480 | 486\n=================\n163 | 483 | 489\n=================\n164 | 486 | 492\n=================\n165 | 489 | 495\n=================\n166 | 492 | 498\n=================\n167 | 495 | 501\n=================\n168 | 498 | 504\n=================\n169 | 501 | 507\n=================\n170 | 504 | 510\n=================\n171 | 507 | 513\n=================\n172 | 510 | 516\n=================\n173 | 513 | 519\n=================\n174 | 516 | 522\n=================\n175 | 519 | 525\n=================\n176 | 522 | 528\n=================\n177 | 525 | 531\n=================\n178 | 528 | 534\n=================\n179 | 531 | 537\n=================\n180 | 534 | 540\n=================\n181 | 537 | 543\n=================\n182 | 540 | 546\n=================\n183 | 543 | 549\n=================\n184 | 546 | 552\n=================\n185 | 549 | 555\n=================\n186 | 552 | 558\n=================\n187 | 555 | 561\n=================\n188 | 558 | 564\n=================\n189 | 561 | 567\n================="
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\"\nimport sys\nfrom math import ceil, sqrt"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000 15 80') == 'Yes'\nassert solution('1000 15 10') == 'No'\nassert solution('100000 15 10000') == 'Yes'\n\"\"\"\n\nimport math\n\nd, t, s = [int(i) for i in input().split()]\ntakahashi_speed = s * t\ntotal_distance = d * t\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\n\nD, T, S = [int(x) for x in stdin.split(\" \")]\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\n\nimport math\n\nD, T, S = input().split()\nD = int(D)\nT = int(T)\nS = int(S)"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\"\nimport os\nimport sys\nfrom io import StringIO\nimport unittest\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"1000 15 80\"\"\"\n        output = \"\"\"Yes\"\"\"\n        self.assertIO(input, output)\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"1000 15 40\"\"\"\n        output = \"\"\"No\"\"\"\n        self.assertIO(input, output)\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"10 10 10\"\"\"\n        output = \"\"\"Yes\"\"\"\n        self.assertIO(input, output)\n    def test_\u5165\u529b\u4f8b_4(self):\n        input = \"\"\"5 10 10\"\"\"\n        output = \"\"\"No\"\"\"\n        self."
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\n\nimport sys\n\nd, t, s = map(int, sys.stdin.readlines())\nprint(\"Yes\" if d / s <= t else \"No\")\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\n\"\"\"\n\nclass Tester:\n    def __parse_input(self, raw_input):\n        self.matrix = []\n        lines = raw_input.splitlines()\n        for i in range(3):\n            self.matrix.append(list(map(int, lines[i].split())))\n        self.length = int(lines[3])\n        self.candidates = list(map(int, lines[4].split()))\n\n    def __test_solution(self, solution):\n        assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\n        assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\n\n    def test(self):\n        self.__parse_input(\n            \"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\"\n        )\n        solution = lambda raw_input: self.__test_solution(raw_input)\n        print(\"possible:\", is_possible(solution, self.matrix, self.length, self.candidates))"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"Yes\"\nassert solution(\"61 59 7\") == \"No\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"89\") == \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == 'Yes'\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == 'Yes'\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == 'Yes'\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == 'Yes'\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == 'Yes'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\n\"\"\"\n\nA = list(map(int, stdin.readline().split()))\nA += list(map(int, stdin.readline().split()))\nA += list(map(int, stdin.readline().split()))\nN = int(stdin.readline())\nB = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('41 2\\n5 6') == '30'\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"41 2\\n5 6\") == 30\n\"\"\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n3\n1 2 3\n\"\"\"\n) == '6'\nassert solution(\n\"\"\"\n1\n1\n\"\"\"\n) == '1'\nassert solution(\n\"\"\"\n2\n1\n\"\"\"\n) == '-1'\n\n\"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n\"\"\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\nassert solution(\"1 2\\n2 2\") == \"0\"\nassert solution(\"1 1\\n2 2\") == \"0\"\nassert solution(\"1 3\\n1 3\") == \"1\"\nassert solution(\"1 1\\n1 1\") == \"1\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 2\\n3 4\") == \"6\"\nassert solution(\"5 2\\n1 2\\n1 1\") == \"4\"\nassert solution(\"5 2\\n1 2\\n1 1\\n1 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('41 2\\n5 6') == '30'\n\"\"\"\n\nfrom math import ceil\n\nN, M = map(int, stdin.readline().split(' '))\nA = list(map(int, stdin.readline().split(' ')))"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n5 6\\n') == 30\n\"\"\"\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\nprint(m // n)\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6\\n5 6') == '30'\n\"\"\"\n\nimport os\nimport sys\nfrom typing import List"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 2\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 5\\n') == '5'\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 5') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\nassert solution(\"1 1\\n\") == \"1\"\nassert solution(\"0 2\\n\") == \"1\"\nassert solution(\"1 100\\n\") == \"100\"\nassert solution(\"2 100\\n\") == \"101\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == '0'\nassert solution('3 5') == '5'\nassert solution('1 2') == '2'\nassert solution('2 2') == '0'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''0 2\n''') == '5'\nassert solution('''0 1\n''') == '1'\nassert solution('''1 1\n''') == '1'\nassert solution('''2 2\n''') == '2'\nassert solution('''1 2\n''') == '3'\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n5') == '5'\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\n\"\"\"\n\nfrom typing import List\nimport math"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 5\\n') == '5'\n\"\"\"\n\nimport sys\nimport math\n\nD, N = [int(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 1\\n') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n7 6 8\") == \"2\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 2') == 1\nassert solution('4 4 4') == 4\nassert solution('10 1 10') == 1\nassert solution('10 10 10') == 10\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n7 6 8\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n13104 6924 6014 8054 9524\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n8 234 456 758\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\n8 8\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n82469758883246589782469758883246589782469758883246975\n\"\"\") == \"9\"\n\n-----\n7\n82469758883246589782469758883246589782469758883246975\n\n82469758883246589782469758883246589782469758883246975\n\"\"\") == \"9\"\n\n\"\"\"\nThe idea is that the greatest common divisor of the numbers on the blackboard is the largest number divisible by the numbers on the blackboard, so that we can replace the largest number in the sequence with any integer between 1 and 10^9 (inclusive).\n\nFor example, suppose that we have the numbers 2, 8, 7, 6, 4 on the blackboard. The largest number divisible by 2, 8, 7, 6, 4, is 2^6, and the greatest common divisor is 2, so we can replace the number 8 with 4.\n\nAs a second example, suppose that we have the numbers 3, 6, 9, 12, 15 on the blackboard. The largest number divisible by 3, 6, 9, 12, 15 is 3^12, and the greatest common divisor is 3, so we can replace the number 15 with 9.\n\nWe can find the greatest common divisor of the numbers on the blackboard by determining the greatest common divisor of the numbers on the blackboard modulo each other.\n\nFor example, if we have the numbers 2, 8, 7, 6, 4, the largest number divisible by 2, 8, 7, 6, 4, is 2^6, and the greatest common divisor of 2, 8, 7, 6, 4 is 2.\n\nIf we have the numbers 3, 6, 9, 12, 15, the largest number divisible by 3, 6, 9, 12, 15 is 3^12, and the greatest common divisor of 3, 6, 9, 12, 15 is 3.\n\nBy taking the greatest common divisor of all the numbers modulo each other, we can determine the greatest common divisor of the numbers on the blackboard, so we can replace the largest number in the sequence with any integer between 1 and 10^9 (inclusive).\n\"\"\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 7 6\") == 2\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 3''') == '1'\nassert solution('''4\n5 9 7 9\n''') == '9'\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n7 6 8\") == \"2\"\nassert solution(\"2\\n8 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n7 6 8') == '2'\nassert solution('2\\n3 4') == '1'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7 1\") == \"1\"\nassert solution(\"3 3 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n7 6 8') == 2\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 6 8\") == 2\n\"\"\"\n\n\"\"\"\n2.\nGiven N, how many integers 1 \\leq A_i \\leq N \\leq N+1, such that the following equations hold:\nx = A_i\ny = A_j\nx!= y\nA_i % y = 0\n\"\"\"\n\n\"\"\"\n3.\nGiven a positive integer, output its corresponding column title as appear in an Excel sheet.\nFor example:\n1 --> A\n2 --> B\n3 --> C\n...\n26 --> Z\n27 --> AA\n28 --> AB\n...\n\"\"\"\n\n\"\"\"\n4.\nGiven the number of rows of a triangle, print a triangle of numbers, starting with 1.\nFor example, if given the following input:\n3\n\nThe output should be:\n1\n22\n333\n4444\n\"\"\"\n\n\"\"\"\n5.\nGiven a list of words, print the longest word and the length of this longest word.\nIf two or more words have the same length, print the first word from these words in lexicographical order.\nFor example, if the input is the following:\n\naaaaa\nbbbb\ncc\ndd\nThen, the output should be:\n\ncc\n5\n\"\"\"\n\n\"\"\"\n6.\nGiven an array of integers, return the maximum absolute difference between any two of its adjacent elements.\nFor example, given the array [2, 4, 1, 0], return 3, which is the maximum absolute difference between 4 and 1.\nGiven the array [2, 10, 7, 2], return 6, which is the maximum absolute difference between 10 and 2.\n\"\"\"\n\n\"\"\"\n7.\nGiven the integer N - the number of minutes that is passed since midnight - how many hours and minutes are displayed on the 24th digital clock?\nThe program should print two numbers: the number of hours (between 0 and 23) and the number of minutes (between 0 and 59).\nFor example, if N = 150, then 150 minutes have passed since midnight - i.e. now is 2:30 am. So, the program should print 2 30.\n\"\"\"\n\n\"\"\"\n8.\nThe robot moves in a plane starting from the original point (0,0). The robot can move toward UP, DOWN, LEFT and RIGHT with a given steps. The trace of robot movement is shown as the following:\nUP 5\nDOWN 3\nLEFT 3\nRIGHT 2\nThe numbers after the direction are steps. Please write a program to compute the distance from current position after a sequence of movement and original point. If the distance is a float, then just print the nearest integer.\nExample: If the following tuples are given as input to the program:\nUP 5\nDOWN 3\nLEFT 3\nRIGHT 2\nThen, the output of the program should be:\n2\n\n\"\"\"\n\n\"\"\"\n9.\nA school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. Let this ordering be represented by the integer array expected where expected[i] is the expected height of the ith student in line.\n\nYou are given an integer array heights representing the current order that the students are standing in. Each heights[i] is the height of the ith student in line (0-indexed).\n\nReturn the number of indices where heights[i]!= expected[i].\n\n\n-----Constraints-----\n - 1 \\leq heights.length \\leq 10^5\n - 1 \\leq heights[i] \\leq 10^9\n - 1 \\leq expected.length \\leq 10^5\n - 1 \\leq expected[i] \\leq 10^9\n - expected is a permutation of heights.\n\n-----Output-----\nPrint the number of indices where heights[i]!= expected[i].\n\"\"\"\n\n\"\"\"\n10.\nYou are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\n\nMerge all the linked-lists into one sorted linked-list and return it.\n\"\"\"\n\n\"\"\"\n11.\nGiven a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n\nExample 1:\n\nInput: \"babad\"\nOutput: \"bab\"\nNote: \"aba\" is also a valid answer.\nExample 2:\n\nInput: \"cbbd\"\nOutput: \"bb\"\n\"\"\"\n\n\"\"\"\n12.\nGiven an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\n\nNotice that the solution set must not contain duplicate triplets.\n\nExample 1:\n\nGiven array nums = [-1, 0, 1, 2, -1, -4],\n\nA solution set is:\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\nExample 2:\n\nGiven array nums = [0, 0, 0, 0],\n\nA solution set is:\n[\n  [0, 0, 0]\n]\n\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i>0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l<r:\n                s = nums[i]+nums[l]+nums[r]\n                if s>0:\n                    r -= 1\n                elif s<0:\n                    l += 1\n                else:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1\n                    while l<r and nums[l] == nums[l-1]:\n                        l += 1\n        return res\n\"\"\"\n\n\"\"\"\n13.\nGiven an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\n\nNotice that the solution set must not contain duplicate triplets.\n\nExample 1:\n\nGiven array nums = [-1, 0, 1, 2, -1, -4],\n\nA solution set is:\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\nExample 2:\n\nGiven array nums = [0, 0, 0, 0],\n\nA solution set is:\n[\n  [0, 0, 0]\n]\n\"\"\"\n\n\"\"\"\n14.\nGiven an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\n\n0 <= a, b, c, d < n\na, b, c, and d are distinct.\nnums[a] + nums[b] + nums[c] + nums[d] == target\nYou may return the answer in any order.\n\nExample 1:\n\nGiven array nums = [1, 0, -1, 0, -2, 2], and target = 0,\n\nA solution set is:\n[\n  [-1,  0, 0, 1],\n  [-2, -1, 1, 2],\n  [-2,  0, 0, 2]\n]\n\n\"\"\"\n\n\"\"\"\n15.\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nExample:\n\nGiven num"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 1\") == \"3 1 2\"\n\"\"\"\n\nfrom collections import deque\n\nN = int(input())\n\nqueue = deque()\n\nfor i in range(1, N + 1):\n    queue.append(i)\n\nfor A_i in input().split():\n    while len(queue) > 0 and queue[0] == int(A_i):\n        queue.popleft()\n\nprint(' '.join([str(i) for i in queue]))\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == '3 1 2'"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == \"3 1 2\"\nassert solution(\"3\\n2 3 1\") == \"2 3 1\"\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '5 1 2 3 4'\nassert solution('''3\n2 3 1''') == '3 1 2'\nassert solution('''3\n1 2 3''') == '1 2 3'\nassert solution('''4\n2 3 4 1''') == '4 2 3 1'\n\n'''\nhttps://www.codewars.com/kata/56efc5eac2cb89aec6000038/train/python"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\"\"\"\n\nn = int(input())\norder = []\nwhile n!= 0:\n    order.append(str(n))\n    n = int(input())\n\nprint(\" \".join(order[::-1]))\n\n\"\"\"\nSecond solution:\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\nassert solution(\"3\\n3 2 1\") == \"3 1 2\"\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"2 1 3\") == \"2 1 3\"\nassert solution(\"3 2 1\") == \"3 2 1\"\nassert solution(\"4 1 2 3\") == \"4 1 2 3\"\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_data) == test_result\n\"\"\"\n\nn = int(input())\ns_arr = [int(i) for i in input().split()]\n\ns_arr.sort()\n\nfor i in range(n):\n    print(s_arr[i], end=' ')\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2 3 1') == '3 1 2'\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 7 100') == '9'\nassert solution('10 7 12345') == '0'\nassert solution('1 10 100') == '1'\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 7 100') == '9'\nassert solution('10 7 1000') == '0'\nassert solution('10 7 1000000000') == '0'\n\"\"\"\n\nimport math\n\nA, B, X = list(map(int, input().split()))\nprice = A * math.floor(math.log10(X)) + B"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 7 100') == '9'\nassert solution('10 100 100') == '0'\nassert solution('1 9 5') == '0'\nassert solution('1 1 5') == '0'\nassert solution('10 1 10') == '9'\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"10 7 1000\") == \"0\"\nassert solution(\"10 7 12345\") == \"0\"\nassert solution(\"10 10 1000\") == \"0\"\nassert solution(\"10 10 12345\") == \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 7 100') == '9'\nassert solution('10 7 1000') == '0'\nassert solution('7 100 1000') == '0'\nassert solution('100 100 1000') == '0'"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"10 5 20\") == \"10\"\nassert solution(\"10 2 10\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"1 10 100\") == \"0\"\nassert solution(\"10 10 100\") == \"10\"\nassert solution(\"1 0 100\") == \"0\"\nassert solution(\"1 0 0\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\nassert solution(\"1 5 10\") == \"0\"\n\nassert solution(\"1 1 1\") == \"0\"\n\nassert solution(\"1 10 1\") == \"1\"\n\nassert solution(\"10 1 1\") == \"1\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"3 4 100\") == \"0\"\n\"\"\"\n\nimport sys\n\na, b, x = [int(i) for i in sys.stdin.read().split()]\n\nans = 0\n\nwhile b > 0:\n    ans *= 10\n    ans += min(9, x//(a*10+b))\n    x %= (a*10+b)\n    a -= 1\n    b -= 1\n\nprint(ans)\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n2 4\\n1\\n3') == '0'\n\"\"\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 150\n150 140 100 200''') == '2'\nassert solution('''4 100\n100 100 100 100''') == '0'\nassert solution('''5 300\n100 300 100 150 200''') == '0'\nassert solution('''5 300\n100 100 100 150 200''') == '3'\n\n'''\n\uc5ec\ub7ec \uc0ac\ub78c\uc774 \uc81c\uc77c \ub098\uc774\uac00 \ub9ce\uc740 \uc0ac\ub78c\uc744 \ud0a4 \uc21c\uc11c\ub300\ub85c \uc81c\uc77c \uc55e\uc5d0 \uc788\ub294 \uc0ac\ub78c\uc744 \uae30\uc900\uc73c\ub85c \uacc4\uc0b0\n'''"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\"\n\nn,k = [int(s) for s in input().split()]\nheights = [int(s) for s in input().split()]\n\ncnt = 0\nfor i in heights:\n    if i >= k:\n        cnt += 1\nprint(cnt)"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == 2\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\nassert solution('5 100\\n101 110 99 200 100\\n') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n4 150\n150 140 100 200\n''') == '2'\nprint('Passed')\n\nassert solution('''\n5 100\n100 150 90 120 100\n''') == '2'\nprint('Passed')\n\nassert solution('''\n3 100\n100 100 100\n''') == '1'\nprint('Passed')\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\nprint(solution(stdin), end='')"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 150\\n150 140 100 200\\n\") == \"2\"\n\"\"\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n\n-----\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'No'\nassert solution('1\\n') == 'No'\nassert solution('1 2\\n') == 'No'\nassert solution('2 1\\n') == 'No'\nassert solution('1 1\\n') == 'Yes'\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\nassert solution('6 2\\n5 4 2 1 5 3') == 'No'\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\"\"\"\n\n\"\"\"\nThe first line contains integers N and M separated by a single space.\nThe next N lines each contain an integer A_i, denoting the number of votes for item i.\n\n-----Constraints-----\n - 1 \\leq N, M \\leq 100\n - 1 \\leq A_i \\leq 1000\n - A_i are distinct.\n - All values in input are integers.\n\n-----Input-----\nThe first line contains integers N and M separated by a single space.\nThe next N lines each contain an integer A_i, denoting the number of votes for item i.\n\n-----Output-----\nIf M popular items can be selected, print Yes; otherwise, print No.\n\n-----Sample Input-----\n4 1\n5 4 2 1\n\n-----Sample Output-----\nYes\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readlines()))\n\nA_sorted = sorted(A)\nmin_votes = A_sorted[:M]\n\nprint(\"Yes\" if sum(min_votes) * 4 >= N else \"No\")\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a) == b\n-----------------------------"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\n----\n\n\n\n\nWrite 5 lines of code to test the correctness of solution:\nWe have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.\n\n-----Constraints-----\n - 1 \\leq M \\leq N \\leq 100\n - 1 \\leq A_i \\leq 1000\n - A_i are distinct.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1... A_N\n\n-----Output-----\nIf M popular items can be selected, print Yes; otherwise, print No.\n\n-----Sample Input-----\n4 1\n5 4 2 1\n\n-----Sample Output-----\nYes\n\nThere were 12 votes in total. The most popular item received 5 votes, and we can select it.\n\n----\n\n\n\n\nWrite 5 lines of code to test the correctness of solution:\nWe have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.\n\n-----Constraints-----\n - 1 \\leq M \\leq N \\leq 100\n - 1 \\leq A_i \\leq 1000\n - A_i are distinct.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1... A_N\n\n-----Output-----\nIf M popular items can be selected, print Yes; otherwise, print No.\n\n-----Sample Input-----\n4 1\n5 4 2 1\n\n-----Sample Output-----\nYes\n\nThere were 12 votes in total. The most popular item received 5 votes, and we can select it.\n\n----\n\n\nWrite 5 lines of code to test the correctness of solution:\nWe have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.\n\n-----Constraints-----\n - 1 \\leq M \\leq N \\leq 100\n - 1 \\leq A_i \\leq 1000\n - A_i are distinct.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1... A_N\n\n-----Output-----\nIf M popular items can be selected, print Yes; otherwise, print No.\n\n-----Sample Input-----\n4 1\n5 4 2 1\n\n-----Sample Output-----\nYes\n\nThere were 12 votes in total. The most popular item received 5 votes, and we can select it.\n\n----\n\n\n\nWrite 5 lines of code to test the correctness of solution:\nWe have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.\n\n-----Constraints-----\n - 1 \\leq M \\leq N \\leq 100\n - 1 \\leq A_i \\leq 1000\n - A_i are distinct.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1... A_N\n\n-----Output-----\nIf M popular items can be selected, print Yes; otherwise, print No.\n\n-----Sample Input-----\n4 1\n5 4 2 1\n\n-----Sample Output-----\nYes\n\nThere were 12 votes in total. The most popular item received 5 votes, and we can select it.\n\n----\n\n\n\nWrite 5 lines of code to test the correctness of solution:\nWe have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.\n\n-----Constraints-----\n - 1 \\leq M \\leq N \\leq 100\n - 1 \\leq A_i \\leq 1000\n - A_i are distinct.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1... A_N\n\n-----Output-----\nIf M popular items can be selected, print Yes; otherwise, print No.\n\n-----Sample Input-----\n4 1\n5 4 2 1\n\n-----Sample Output-----\nYes\n\nThere were 12 votes in total. The most popular item received 5 votes, and we can select it.\n\n----\n\n\n\nWrite 5 lines of code to test the correctness of solution:\nWe have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.\n\n-----Constraints-----\n - 1 \\leq M \\leq N \\leq 100\n - 1 \\leq A_i \\leq 1000\n - A_i are distinct.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1... A_N\n\n-----Output-----\nIf M popular items can be selected, print Yes; otherwise, print No.\n\n-----Sample Input-----\n4 1\n5 4 2 1\n\n-----Sample Output-----\nYes\n\nThere were 12 votes in total. The most popular item received 5 votes, and we can select it.\n\n----\n\n\n\nWrite 5 lines of code to test the correctness of solution:\nWe have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.\n\n-----Constraints-----\n - 1 \\leq M \\leq N \\leq 100\n - 1 \\leq A_i \\leq 1000\n - A_i are distinct.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1... A_N\n\n-----Output-----\nIf M popular items can be selected, print Yes; otherwise, print No.\n\n-----Sample Input-----\n4 1\n5 4 2 1\n\n-----Sample Output-----\nYes\n\nThere were 12 votes in total. The most popular item received 5 votes, and we can select it.\n\n----\n\n\n\nWrite 5 lines of code to test the correctness of solution:\nWe have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1\\n5 4 2 1') == 'Yes'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1\\n5 4 2 1') == \"Yes\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\"\"\"\n\nn, m = [int(x) for x in stdin.split()]\nvotes = [int(x) for x in stdin.split()]\n\ntotal = sum(votes)\nvotes.sort()"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 2\\n..#\\n###') == 5\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(sample_stdin_1) == 5\nassert solution(sample_stdin_2) == 1\n\"\"\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('.#..#\\n....#\\n#####\\n....#\\n...##') == '5'\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 2\\n..#\\n###\\n') == 5\nassert solution('1 1 1\\n#\\n#\\n') == 0\nassert solution('1 1 0\\n#\\n#\\n') == 1\nassert solution('3 5 2\\n..#\\n.##\\n#..\\n') == 8\nassert solution('3 6 2\\n..#\\n.##\\n#..\\n') == 9\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == 5\nassert solution(\"1 2 2\\n..#\") == 1\nassert solution(\"2 2 2\\n##\") == 0\nassert solution(\"1 1 2\\n..#\") == 0\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\n\n-----Tests-----\nassert solution('3 1 0\\n.##\\n.#.') == 1\nassert solution('1 1 0\\n..#\\n.#.') == 1\nassert solution('2 2 2\\n..#\\n.#.') == 1\nassert solution('1 1 0\\n.##\\n.#.') == 0\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2020 2040') == '2'\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2020 2040\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\nimport sys\n\nL, R = input().split()\n\nL, R = int(L), int(R)\n\nMOD = 2019"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2020 2040\") == 2\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2020 2040') == 2\n\n----Problem----\nTwo non-negative integers L and R are given.\nWe will choose two integers i and j such that L \\leq i < j \\leq R.\nFind the minimum possible value of (i \\times j) \\mbox{ mod } 2019.\n\n-----Constraints-----\n - All values in input are integers.\n - 0 \\leq L < R \\leq 2 \\times 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nL R\n\n-----Output-----\nPrint the minimum possible value of (i \\times j) \\mbox{ mod } 2019 when i and j are chosen under the given condition.\n\n-----Sample Input-----\n2020 2040\n\n-----Sample Output-----\n2\n\nWhen (i, j) = (2020, 2041), (i \\times j) \\mbox{ mod } 2019  = 2.\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(sample1)) == str(sample2)\nprint('Test finished.')\n\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2020 2040\") == 2\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2020 2040\") == \"2\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2020 2040') == 2\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2020 2040\") == 2\nassert solution(\"1 1\") == 0\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"Atcoder\") == \"WA\"\nassert solution(\"AtC0r\") == \"AC\"\n\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('AtCoder') == 'AC'\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AtCoder\") == 'AC'\nassert solution(\"AtCoder\" * 2) == 'AC'\nassert solution(\"AtCoder\" * 10) == 'AC'\nassert solution(\"AtCoder\" * 100) == 'AC'\n\"\"\"\n\nS = input()"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('Atcoder') == 'WA'\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"AbCdEfGh\") == \"WA\"\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('Atcoder') == 'WA'\n\"\"\"\n\nS = input()\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"Atcoder\") == \"WA\"\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('AtCoder') == 'AC'\n\"\"\"\n\nfrom typing import Dict\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('AtCoderPractice') == 'WA'\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AtCoder\") == 'AC'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"151214\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1324\") == \"2\"\nassert solution(\"1444\") == \"4\"\nassert solution(\"1111\") == \"1\"\nassert solution
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"12\") == \"1\"\nassert solution(\"123\") == \"3\"\nassert solution(\"1233\") == \"3\"\nassert solution(\"123344\") == \"4\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1214') == '2'\nassert solution('1') == '1'\nassert solution('14') == '4'\nassert solution('134') == '3'\nassert solution('1444') == '4'\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1214) == 2\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1214\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1214\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1214') == '2'\nassert solution('1234') == '4'\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1214') == '2'\n\nassert solution('1112') == '1'\n\nassert solution('1314') == '2'\n\nassert solution('11214') == '1'\n\nassert solution('122324') == '2'"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1324\") == \"2\"\nassert solution(\"1333224444\") == \"4\"\n\n-----\n1. We need to store the mapping between the original digit and the digit after the date changes. To solve this problem, we will use a dictionary.\n2. To calculate the mapping from the original digit to the digit after the date changes, we will use the following formula: digitAfterDateChanges = digit * base ** power\n3. To calculate the power, we will use math.log(digit, base). Note that math.log(digit, base) returns a float value.\n4. Once we calculated the power, we can calculate the mapping of the original digit to the digit after the date changes by flooring it to an integer.\n5. Finally, we can calculate the kth element in the modified string by finding the index of the digit in the string after the date changes.\n6. To find the index, we will use find(). This function finds the first occurrence of the substring \"\". Since we are interested in the kth element, it will return the kth element in the string after the date changes.\n7. Note that the substring \"\". This is the empty string, which is the substring with length of 0.\n8. The index of the digit in the string after the date changes will be:\n   1. Find(indexToFind=\"\") + power + 1\n   2. If the power is 0, then the index to find will be 0. Otherwise, the index to find will be the index after the date changes of the first digit of the string after the date changes multiplied by the base raised to the power.\n9. Time complexity: O(log(digit) * numberOfDays)\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n5 2 3 4 1\") == \"YES\"\nassert solution(\"3\\n2 3 1\") == \"NO\"\nassert solution(\"5\\n3 4 1 2\") == \"NO\"\nassert solution(\"5\\n1 2 3 4\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"5 2 1 3 4\") == \"NO\"\nassert solution(\"1 2 3 4 5\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"1 2 3 4 5\") == \"NO\"\nassert solution(\"3 1 2 4 5\") == \"YES\"\nassert solution(\"2 4 3 1 5\") == \"YES\"\nassert solution(\"4 3 2 1 5\") == \"YES\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n5 2 3 4 1\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\") == \"NO\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\n\"\"\"\n\nfrom sys import stdin\n\n\"\"\"\nFirst, I was very confused by the problem statement, because of the incorrect format of input.\nThe problem statement was written as:\n1 2 3 4 5\n\n\"\"\"\n\nnum_of_lines = int(stdin.readline())\n\ninput_lines = [line.split() for line in stdin.readlines()]\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"5 2 4 3 1\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\n\n\"\"\""
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3121') == 2\nassert solution('6') == 1\nassert solution('1000000000000000000000000000000000') == 33\nassert solution('201920181') == 4\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"201920181\") == \"4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\n\"\"\"\n\nfrom typing import List\nfrom functools import reduce\nfrom math import gcd\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"201920181\") == \"4\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"201920181\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"1000000000000000000000000000000000\") == 33\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"201920181\") == 4\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"201920181\") == 4\nassert solution(\"1000000000000000000000000000000000\") == 33\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3121) == 2\nassert solution(6) == 1\nassert solution(1000000000000000000000000000000000) == 33\n\"\"\"\n\nimport sys\n\nsys.path.append(\"..\")\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 3 4 5') == '2'\nassert solution('3\\n13 37 39') == '2'\nassert solution('4\\n0 0 0 0') == '0'\nassert solution('4\\n1 2 3 4') == '0'\n\"\"\"\n\n\"\"\"\nInput: two strings (p, q) of the same length, where p and q consist of \"0\" and \"1\"\nOutput: a string c, such that c = p XOR q\n\nConstraints: p and q consist only of \"0\" and \"1\" characters\n\"\"\"\n\n\"\"\"\nThe XOR operation:\n    1) On each bit in the binary representation of the result, XOR it with the corresponding bit in the input, \n        and place the result in the resulting string.\n    2) Apply this process to the entire input.\n\"\"\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == '2'\nassert solution(\"3\\n13 37 39\\n1 2 3\") == '2'\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == '0'\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == '3'\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_str) == test_res\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == 2\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == \"3\"\nprint('Successfully solved!')\n\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 4 7 11 3\\n') == '2'\nassert solution('3\\n13 37 39\\n1 2 3\\n') == '2'\nassert solution('4\\n0 0 0 0\\n1 2 3 4\\n') == '0'\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open('./input.txt').read()) == open('./output.txt').read()\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('bambarbia') == '0'\nassert solution('hellocode') == '0'\nassert solution('code??????') == '10'\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"0\"\nassert solution(\"code??????\") == \"10\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('bambarbia') == '0'\nassert solution('hellocode') == '10'\nassert solution('abaca?b') == '5'\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"10\"\nassert solution(\"aaaaa\") == \"1 2\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('hellocode') == '0'\nassert solution('bambarbia') == '0'\nassert solution('codeforces') == '5'\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('bambarbia') == '0'\nassert solution('hello??') == '10'\nassert solution('??????') == '10'"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('abaca?') == '5'\n\nassert solution('bambarbia') == '0'\nassert solution('hellocode') == '0'"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"hellocode\") == \"0\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"code??????\") == \"10\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('codeforces') == '7 8'\n\"\"\"\n\nn = int(input())\nleft = input()\nright = input()\n\ncompatible = []\nfor i in range(n):\n    if left[i] == '?' or right[i] == '?':\n        compatible.append((i, i))\n    elif left[i] == right[i]:\n        compatible.append((i, i))\n\ncompatible = set(compatible)\nprint(len(compatible))\nfor a, b in compatible:\n    print(a, b)\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('abaca?b') == '5 6'\nassert solution('zabbbcc') == '2 3'\n\nassert solution('code??????') == '10'\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3\\n7 7'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4'\nassert solution('4\\n1 1 1 1') == '4\\n4 4'\nassert solution('5\\n1 2 3 4 2') == '1\\n1 3'\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\""
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(    \"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(    \"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\nassert solution(    \"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(    \"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\n\n\"\"\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\\n2 2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\\n1 1\\n2 2\\n3 3\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7\n4 1 2 2 1 5 3\n''') == '3\n7 7\n2 3\n4 5'"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"4\\n4 4\") == \"1 1\"\nassert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\">-10^5 0 1 2 3 4 5<\") == \"4\"\nassert solution(\">-10^5 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''7\n4 1 2 2 1 5 3\n''') == '3\n7 7\n2 3\n4 5'\n\nassert solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '2\n3 4\n1 1\n2 2\n3 3\n4 4\n1 1\n2 2\n3 3\n4 4\n'''"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''7\n4 1 2 2 1 5 3''') == '''3\n7 7\n2 3\n4 5'''\n\nassert solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5''') == '''2\n3 4\n1 1\n2 2\n3 3'''\n\nassert solution('''4\n1 1 1 1''') == '''4\n4 4\n1 1\n2 2\n3 3'''\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n2 78 4 10') == '12'\nassert solution('5 2\\n3 7 19 3 3') == '0'\nassert solution('6 11\\n45 1 10 12 11 7') == '7'\n\"\"\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n2 78 4 10') == '12'\nassert solution('5 2\\n3 7 19 3 3') == '0'\nassert solution('6 11\\n45 1 10 12 11 7') == '7'\nassert solution('6 2\\n2 78 4 10') == '12'\n\nimport pytest\nfrom a2_test.test_case_strategy import TestCaseStrategy\n\n@pytest.mark.parametrize(\n    argnames='input_s, expected',\n    argvalues=[\n        (\n                \"\"\"6 11\n45 1 10 12 11 7\"\"\",\n                7\n        ),\n        (\n                \"\"\"6 2\n2 78 4 10\"\"\",\n                12\n        ),\n        (\n                \"\"\"6 2\n2 78 4 10\"\"\",\n                12\n        ),\n        (\n                \"\"\"6 2\n2 78 4 10\"\"\",\n                12\n        ),\n        (\n                \"\"\"5 2\n3 7 19 3 3\"\"\",\n                0\n        ),\n        (\n                \"\"\"4 2\n2 78 4 10\"\"\",\n                12\n        )\n    ]\n)\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 11\\n45 1 10 12 11 7\") == \"7\"\nassert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\nassert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"3 3\\n2 78 4 10\") == \"0\"\nassert solution(\"1 1\\n10\") == \"0\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n2 78 4 10') == 12\n\"\"\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12 3\\n1 2 4\") == \"7\"\nassert solution(\"5 2\\n2 3 4 7 7\") == \"0\"\nassert solution(\"4 2\\n1 2 4 10\") == \"12\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n2\\n3\") == \"0\"\nassert solution(\"2 1\\n2\\n3\\n2\\n3\") == \"7\"\nassert solution(\"2 1\\n1\\n3\") == \"5\"\nassert solution(\"2 1\\n1\\n3\\n1\\n3\") == \"14\"\nassert solution(\"2 2\\n1\\n3\\n1\\n3\") == \"3\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == '0'\nassert solution(\"5 3\") == '12'\nassert solution(\"5 2\") == '12'\n\"\"\""
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n2 78 4 10') == '12'\nassert solution('5 2\\n3 7 19 3 3') == '0'\nassert solution('4 2\\n2 78 4 10') == '12'\nassert solution('5 2\\n3 7 19 3 3') == '0'\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == 12\nassert solution(\"5 2\\n3 7 19 3 3\") == 0\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 5') == '9'\nprint('Test pass.')"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\nprint(\"test 1 OK\")\n\nassert solution(\"2\\n3 3\") == \"8\"\nprint(\"test 2 OK\")\n\nassert solution(\"1\\n1 1\") == \"1\"\nprint(\"test 3 OK\")\n\nassert solution(\"1\\n4\") == \"4\"\nprint(\"test 4 OK\")\n\nassert solution(\"2\\n1 2\") == \"3\"\nprint(\"test 5 OK\")"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 5') == '9'\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5,3\\n') == '8'\nassert solution('1,2,3,4\\n') == '9'\n\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 5\\n2 3') == '9'\nprint('Test succeeded')\n\nimport sys\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 5\") == '9'\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\nprint(\"Passed\")\n\n---\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 5') == 9\n\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(sample_input) == sample_output\n\"\"\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == 110\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == '110'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == 110\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 3\\n1 2 2 10\\n2 3 2 10\") == \"110\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == 110\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('./tests/test_01.txt') == '110'\n\"\"\"\n\nimport re\n\nPATTERN = re.compile(r'(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)')\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n\n\"\"\"\n[\ubb38\uc81c \uc124\uba85]\n\ud3c9\ubc94\ud55c \ubc30\ub0ad\uc5d0 \uac00\ubc29\uc744 \ucd94\uac00\ud558\ub824\uba74 \ubc30\ub0ad\uc758 \ubb34\uac8c\ub294 \ucd94\uac00\ud560 \uc218 \uc788\ub294 \ubb3c\uac74\ub4e4\uc758 \ubb34\uac8c\uc758 \ud569\uacfc \uac00\ubc29\uc5d0 \ucd5c\ub300 \uba87 \uac1c\uc758 \ubb3c\uac74\uc744 \ucd94\uac00\ud560 \uc218 \uc788\ub294\uc9c0\ub97c \uc54c\ub824\uc900\ub2e4.\n\n[\ubb38\uc81c \ud574\uacb0 \uc544\uc774\ub514\uc5b4]\n1. \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc758 \uac1c\uc218 T\uac00 \uc8fc\uc5b4\uc9c4\ub2e4.\n2. \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub294 \ud55c \uc904\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\ub2e4.\n3. \ubb34\uac8c W\uac00 \uc8fc\uc5b4\uc9c4\ub2e4.\n4. \uac00\ubc29\uc758 \ubb34\uac8c\ub294 \ucd5c\ub300 W\ub9cc\ud07c\uc744 \ub118\uc9c0 \uc54a\ub294\ub2e4.\n5. \ucd94\uac00\ud560 \ubb3c\uac74\uc758 \uac1c\uc218\ub294 \ucd5c\ub300 K\ub9cc\ud07c\uc744 \ub118\uc9c0 \uc54a\ub294\ub2e4.\n6. \ubb3c\uac74\uc758 \ubb34\uac8c\ub294 K \ubcf4\ub2e4 \uc791\uac70\ub098 \uac19\uc740 \uc790\uc5f0\uc218\uc774\ub2e4.\n7. \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc5d0 \ub300\ud55c \uacb0\uacfc\ub294 '#t'\uc758 \ud615\ud0dc\ub85c \ucd9c\ub825\ud55c\ub2e4.\n8. (t\ub294 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc758 \ubc88\ud638\ub97c \uc758\ubbf8\ud558\uba70 1\ubd80\ud130 \uc2dc\uc791\ud55c\ub2e4.)\n\n[\uc544\uc774\ub514\uc5b4]\n1. \ucd5c\uc801\ud654\ub97c \uc704\ud55c \ubc29\ubc95\uc5d0 \ub530\ub77c \ucd5c\uc18c\ud654 \uc2dc\ud0ac \uc218 \uc788\ub294 \ubb34\uac8c\uc758 \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud558\ub294 \ubcc0\uc218\ub97c \uc815\ud55c\ub2e4.\n2. DP \ud14c\uc774\ube14\uc744 \ub9cc\ub4e0\ub2e4.\n3. \uc7ac\uadc0 \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud55c\ub2e4.\n\n[\uc544\uc774\ub514\uc5b4]\n1. \ubb34\uac8c\uac00 W\uc778 \uac00\ubc29\uc5d0 K\uac1c\uc758 \ubb3c\uac74\uc744 \ub123\ub294 \ucd5c\ub300\uac12\uc744 \uacc4\uc0b0\ud55c\ub2e4.\n2. \ubb3c\uac74\uc744 \ub123\uc5c8\uc744 \ub54c\uc758 \ubb34\uac8c\uac00 W\uc778 \uac00\ubc29\uc5d0 K\uac1c\uc758 \ubb3c\uac74\uc744 \ub123\uc5c8\uc744 \ub54c\uc758 \ucd5c\ub300\uac12\uc5d0\uc11c \ub123\uc5b4\uc57c \ud558\ub294 \ubb34\uac8c\uc758 \ucd5c\uc19f\uac12\uc744 \ube80 \uac12\uc744 \ucd5c\uc18c\ud654 \uc2dc\ud0a4\ub294 \uc810\ud654\uc2dd\uc744 \uc138\uc6b4\ub2e4.\n3. \ub530\ub77c\uc11c, \uc0c8\ub85c\uc6b4 \ubb3c\uac74\uc744 \ub123\uc5c8\uc744 \ub54c\uc758 \ucd5c\ub300\uac12\uc744 \uac00\uc9c0\ub294 \uac00\ubc29\uc758 \ubb34\uac8c\ub97c \ucc3e\ub294 \ubb38\uc81c\ub77c\uace0 \ud55c\ub2e4.\n\n[\uc2dc\uac04\ubcf5\uc7a1\ub3c4]\n1. \ubc30\ub0ad \ubb38\uc81c\uc640 \uac19\uc740 \uc774\uc911\ubc18\ubcf5\ubb38\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud480 \uc218 \uc788\ub2e4.\n2. O(K * W)\n\n[\uc2e4\uc218]\n1. \uc5ec\uae30\uc11c \uc6b0\uc120\uc21c\uc704 \ud050\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac00\uc7a5 \ucd5c\uc18c \uac00\uce58\uc758 \uac12\uc744 \uad6c\ud558\ub294\ub370 \uc5c4\uccad \uc624\ub798\uac78\ub9b0 \uac83 \uac19\ub2e4.\n2. \ubb3c\uac74\uc744 \ub123\uc744 \ub54c\ub9c8\ub2e4 \ud574\ub2f9 \ubb3c\uac74\uc758 \uac00\uce58\ub97c \ud1b5\ud574 \uac00\uc7a5 \ucd5c\uc18c \uac00\uce58\uc758 \ubb34\uac8c\ub97c \ucc3e\ub294 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud574\ub3c4 \ud6a8\uc728\uc131\uc744 \uc801\uc6a9\ud560 \uc218 \uc5c6\ub2e4.\n3. \ud504\ub85c\uadf8\ub798\uba38\uc2a4\uc5d0\uc11c\ub294 \uc774 \ufffd"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 4 3\n1 3 3 100\n1 2 2 10\n2 3 2 10''') == '110'\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == 110\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 6 3\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\n-------Test 1-------\n\"\"\"\nInput:\n4\n1 4 6 3\n\nOutput:\n5\n\"\"\"\n\n-------Test 2-------\n\"\"\"\nInput:\n8\n1 2 3 4 5 6 7 8\n\nOutput:\n4\n\"\"\"\n\"\"\"\n-------Test 3-------\n\"\"\"\n\"\"\"\nInput:\n8\n1 2 3 4 5 6 7 8\n\nOutput:\n0\n\"\"\"\n\"\"\"\n-------Test 4-------\n\"\"\"\n\"\"\"\nInput:\n5\n1 3 -1 2 5\n\nOutput:\n2\n\"\"\"\n\"\"\"\n-------Test 5-------\n\"\"\"\n\"\"\"\nInput:\n2\n4 3\n\nOutput:\n0\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split()))\nprint(max(abs(a[i + 1] - a[i]) for i in range(n - 1)))\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\nassert solution('2\\n1 4') == '1'\nassert solution('1\\n10') == '9'\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\"\"\"\nfrom tools import timing"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n\n\"\"\"\nN = int(stdin)\ndic = {}\nfor i in range(N):\n    x, y = stdin.split(\"\\n\")[i].split()\n    dic[i] = (int(x), int(y))\n\ndist = []\nfor i in range(N):\n    for j in range(i, N):\n        dist.append(sum((dic[i][0]-dic[j][0])**2 + (dic[i][1]-dic[j][1])**2))\n\nprint(sum(dist)/len(dist))\n\"\"\"\n\n\"\"\"\nimport numpy as np\nimport math"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\\n\") == \"2.2761423749\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n0 0\n1 0\n0 1\n''') == '2.2761423749'\nassert solution('''4\n0 0\n1 0\n0 1\n0 0\n''') == '1.0'\nassert solution('''6\n-1 -1\n-2 1\n1 1\n-3 -3\n3 2\n3 3\n-4 1\n''') == '2.908296943'\nassert solution('''6\n-1 -1\n-2 1\n1 1\n-3 -3\n3 2\n3 3\n-4 1\n''') == '2.908296943'\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n0 0\\n1 0\\n0 1') == '2.2761423749'\n\"\"\"\n\nimport math\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.276142\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.276142\"\n\"\"\"\nfrom typing import Tuple, List, Optional\n\nimport math\nimport sys\n\nfrom icontract import require, ensure, DBC\n\nfrom correct_programs.common import Lines"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == '2.2761423749'\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n0 0\\n1 0\") == \"1.41421356237\"\nassert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.23606797749979\"\nassert solution(\"3\\n1 1\\n0 0\\n0 1\") == \"2.8284271247461903\"\nassert solution(\"2\\n1 2\\n0 0\") == \"1.41421356237\"\nassert solution(\"2\\n0 0\\n1 1\") == \"1.41421356237\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12 4') == '4'\n\n\"\"\"\n\n\"\"\"\nFirst we use a while loop to look at the first line of the input, and then we use a for loop to print all the elements in the input.\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12 4\\n\") == \"4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12 4') == '4'\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12 4') == '4'\n\n-------TESTED AND PASSED--------\n------ALL TOKEN COMBINATIONS TESTED--------\n\"\"\"\n\nimport os\nfrom collections import namedtuple"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12 4') == '4'\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(12, 4) == 4\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12 4') == '4'\nassert solution('2 5') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5\\n4') == '5\\n4'\nassert solution('12\\n4') == '12\\n4'\nassert solution('20\\n4') == '20\\n4'\n\"\"\"\n\n\"\"\"\nfrom math import floor\n\nA, B = map(int, stdin.read().strip().split())\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10000\") == 3\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"10000\") == \"3\"\nassert solution(\"1234\") == \"2\"\nassert solution(\"16\") == \"2\"\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10000') == '3'\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline().rstrip())"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('10\\n') == 10\nassert solution('2\\n') == 1\nassert solution('4\\n') == 1\n\"\"\"\n\nn = int(input())\n\nmin_ = n\nfor a in range(1, n + 1):\n    for b in range(a + 1, n + 1):\n        min_ = min(min_, len(str(a)) + len(str(b)))\nprint(min_)\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10011\") == \"3\"\nassert solution(\"10\") == \"1\"\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1234') == 1\nassert solution('5678') == 2\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1') == '2'\nassert solution('10000') == '3'\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\n\n\"\"\"\nNotes:\n\n1. \n\n2.\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"4 2\") == \"4\"\nassert solution(\"5 4\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"\n\nn = int(stdin.readline().strip())\n\nmin_num = 10**10\nfor i in range(1, n+1):\n    for j in range(1, n+1):\n        if n % i == 0 and n // i % j == 0:\n            min_num = min(min_num, len(str(i)) + len(str(j)))\nprint(min_num)"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5\\n1 2\\n1 3\\n2 4\\n3 5\\n4 5') == '2'\nassert solution('5 5\\n1 2\\n1 3\\n2 4\\n3 5\\n4 5') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected_output\n\n\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == '1'\n\n\"\"\"\n\n\n\"\"\"\n[\uc2dc\uc791 \uccb4\ud06c \ub9ac\uc2a4\ud2b8]\n[] 1\uc2dc\uac04 \uc9c0\ub0ac\uc73c\ub098 \ubc1c\uc0c1 \ubd88\uac00 \ub610\ub294 \uc544\uc608 \ub2e4\ub978 \uae38\n[\u2713] \ucf54\ub4dc 50% \uc815\ub3c4 \uc644\uc131\n[] 1\uc2dc\uac04 \ubcf4\ub2e4 \ub354 \uac78\ub824\uc11c \ucf54\ub4dc \uc644\uc131\n[] \ucf54\ub4dc\ub294 \ub2e4 \ub3cc\uc544\uac00\ub294\ub370 \ud6a8\uc728\uc131\uc5d0\uc11c \uac78\ub9bc\n[] \ucf54\ub4dc \uc644\uc131\n\n[\uc644\ub8cc \ud6c4 \uccb4\ud06c \ub9ac\uc2a4\ud2b8]\n[] \uc544\uc608 \ubaa8\ub974\uaca0\uc74c\n[] \uc544\uc608 \ubaa8\ub974\uaca0\uc74c\n[\u2713] \ucf54\ub4dc 50% \uc815\ub3c4 \uc644\uc131\n[] 50% \uc774\uc0c1 \uc644\uc131\n[] \ud1b5\uacfc\n\n[\uc2dc\uac04 \ubcf5\uc7a1\ub3c4]\nO()\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n2 1 3\\n3 1 2 3\") == \"1\"\n\n-----Explanation-----\nKatsusando loves omelette rice.\nBesides, he loves cr\u00e8me br\u00fbl\u00e9e, tenderloin steak and so on, and believes that these foods are all loved by everyone.\nTo prove that hypothesis, he conducted a survey on M kinds of foods and asked N people whether they like these foods or not.\nThe i-th person answered that he/she only likes the A_{i1}-th, A_{i2}-th,..., A_{iK_i}-th food.\n\nSample Input is as follows:\n4 3\n2 1 3\n3 1 2 3\n2 3 2\n\nThe number of the foods liked by all the three people is 1, as only the third food is liked by all the three people.\n\n\"\"\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == 1\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == 1\n\"\"\"\n\nn, m = list(map(int, input().split()))\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4\\n2 1 3\\n3 1 2 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == expected_result\n\"\"\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\\n2 3 2\") == \"1\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\nfood_list = {}\n\nfor i in range(m):\n    line = stdin.readline().split()\n    food_list[line[0]] = line[1:]\n\nfood_list_set = set(food_list.values())\n\nfood_count = 0\n\nfor food_set in food_list_set:\n    food_count += len(set(food_list[food]) for food in food_set)\n\nprint(food_count)\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(4) == 0.5\n\n\"\"\""
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\nassert solution(\"5\\n\") == \"0.2\"\nassert solution(\"6\\n\") == \"0.25\"\nassert solution(\"7\\n\") == \"0.3333333333333333\"\nassert solution(\"8\\n\") == \"0.375\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n') == '0.5'\nassert solution('100\\n') == '0.4992500'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n') == '0.5'\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"0.5\"\n\"\"\"\nimport collections\nimport math"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n') == '0.5'\n\n\"\"\"\n\nfrom fractions import Fraction\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n\") == '0.5'\nprint('Test pass.')\n\n---\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n') == '0.5'\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '0.5'\nassert solution('10') == '0.8333333333333334'\nassert solution('2') == '0.5'\nassert solution('1') == '1.0'\nassert solution('0') == '0.0'\n\"\"\"\n\nimport random"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n') == '0.5'\nassert solution('100\\n') == '0.5'\n\"\"\"\nfrom collections import Counter\nfrom math import factorial\nfrom functools import reduce\nimport operator"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == 2\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == 2\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('A') == 'A'\nassert solution('0') == '0'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\nprint(\"Passed\")\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\n\n\"\"\"\n\nimport unittest\n\n\nclass SolutionTest(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\"), \"2\")\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == 2\nassert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\") == 2\nassert solution(\"5\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == 3\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\"\n) == \"2\"\nprint(\"PASSED\")"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == solution(input())\n\"\"\"\n\nimport itertools\n\nimport pytest\n\n\n@pytest.mark.parametrize(\"test_input,expected\", [\n    ((3,\n       [(1, 1, 1), (2, 1, 1), (1, 1, 0)],\n       [(2, 1, 1), (1, 1, 0)]), 2),\n    ((4,\n       [(1, 1, 1), (2, 1, 1), (3, 1, 1), (1, 1, 0)],\n       [(2, 1, 1), (3, 1, 1)]), 2),\n    ((5,\n       [(1, 1, 1), (2, 1, 1), (3, 1, 1), (4, 1, 1), (1, 1, 0)],\n       [(2, 1, 1), (3, 1, 1), (4, 1, 1)]), 3),\n])\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"nikoandsolsticehasalengthof15whichexceedstok7\") == \"nikoand...\"\n\n'''\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 mnikoandsolstice\") == \"mnikoand... mnikoandsolstice has a length of 15, which exceeds K=7. We should extract the first 7 characters in this string, append...\"\n\n\"\"\"\n\n\n\"\"\"\nSolution 2\nWe can check if the string is larger than K and use that to replace the string. \n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"nikoandsolstice\", 7) == \"nikoand...\"\nassert solution(\"nikoandsolstice\", 8) == \"nikoandsolc...\"\nassert solution(\"nikoandsolstice\", 15) == \"nikoandsolc...\"\nassert solution(\"nikoandsolstice\", 16) == \"nikoandsolc...\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\nassert solution('niko') == 'niko'\n\"\"\"\n\nk, string = [int(x) for x in input().split()]"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n\nk, s = input().split()\nk = int(k)\nfor i in range(k, len(s)):\n    print(s[:k] + \"...\")\n    break"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"nikoandlamespace\") == \"nikoand...\"\nassert solution(\"solsticeandniko\") == \"nikoand...\"\n\nassert solution(\"nikoandlamespace\") == \"nikoand...\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('apple') == 'apples'\n\"\"\"\n\ns = input()\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('apple') == 'apples'\nassert solution('taknese') == 'takneses'\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('apple') == 'apples'\nassert solution('banana') == 'bananas'\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"banana\") == \"bananas\"\nassert solution(\"takne\") == \"takneses\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"atcoder\") == \"atcoder\"\nassert solution(\"abc\") == \"abc\"\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"cat\") == \"cats\"\nassert solution(\"taknese\") == \"takneses\"\nassert solution(\"abracadabra\") == \"abracadabras\"\nassert solution(\"taekwondo\") == \"taekwondos\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a\") == \"a\"\nassert solution(\"a\") == \"a\"\nassert solution(\"a\") == \"a\"\n\nassert solution(\"a\") == \"a\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"dog\") == \"dogs\"\nassert solution(\"hug\") == \"hugs\"\nassert solution(\"house\") == \"houses\"\n\"\"\"\n\n\"\"\"\nSolution:\n1. If S ends with s, then append es.\n2. If S ends with e, then append s.\n3. If S ends with s, then append es.\n\"\"\"\n\nS = input()\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('apple') == 'apples'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\"\nimport math\n\nn, k = input().split()\nn, k = int(n), int(k)\n\nsnakes = dict()\n\nfor i in range(n):\n    snakes[i+1] = set()\n\nfor i in range(k):\n    d = int(input())\n    for j in range(d):\n        snakes[j+1].add(int(input()))"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 3\\n1\\n3') == '1'\n\"\"\"\n\n\"\"\"\nAttempted solution\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 3\\n1\") == \"1\"\nassert solution(\"3\\n2\\n1 3\\n1\") == \"1\"\nassert solution(\"4\\n2\\n3 4\\n1 2\\n1 2\") == \"2\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\nassert solution('2 2\\n2\\n1 3\\n1\\n3') == '2'\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\"\n\nimport sys\n\nn_m = sys.stdin.readline().split()\nn = int(n_m[0])\nm = int(n_m[1])\nsnakes = {}\nfor i in range(m):\n    x = sys.stdin.readline()\n    snakes[x] = True"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == 1\n\n-----------"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1\\n3\\n1\\n3\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 3\\n1\\n3') == '1'\n\n----------------------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ababbaba\") == \"ababa\"\nassert solution(\"aabbbbaaca\") == \"abaca\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aabbbbaaca') == 5\nprint(solution('aabbbbaaca'))\n\n\"\"\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcd\") == \"b\"\nassert solution(\"aabbbbaaca\") == \"5\"\nassert solution(\"aabbccddeeeffggghhiijj\") == \"e\"\nassert solution(\"aabccddeefgggh\") == \"e\"\nassert solution(\"\") == \"\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aabbbbaaca') == '5'\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aabbbbaaca') == 5\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aabbbbaaca') == '5'\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abba') == '2'\nassert solution('abab') == '1'\nassert solution('abbb') == '3'\nassert solution('aabb') == '4'\nassert solution('aaaa') == '4'\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(b'aaabbbbaa') == 1\nassert solution(b'aaaaaaaa') == 1\nassert solution(b'aabbbbaac') == 2\nassert solution(b'abbbbaaac') == 3\nassert solution(b'abacab') == 3\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 0\n\"\"\"\nimport sys"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 6\") == \"1\"\nassert solution(\"2 2 2\") == \"1\"\nassert solution(\"5 2 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 4') == '5'\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 4\") == \"3\"\n\"\"\"\n\nimport sys\nimport numpy as np\n\ninput = sys.stdin.readline\n\nN = int(input())\na = [int(i) for i in input().strip().split()]\n\nd = np.zeros(N, dtype=np.int64)\n\nd[0] = a[0]\nfor i in range(1, N):\n    d[i] = max(a[i], a[i] * 3 // 2, a[i] * 3)\n\nprint(sum(d) // 3)\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5 9 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\"\n\nimport unittest\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        pass\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 4\\n\") == \"3\"\nassert solution(\"3 5 8\\n\") == \"0\"\nassert solution(\"1 1 1\\n\") == \"0\"\nassert solution(\"2 3 5\\n\") == \"4\"\n\"\"\"\n\nn = int(stdin.readline().strip())\na = list(map(int, stdin.readline().strip().split(' ')))"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n5 2 4\\n') == 3\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\"\n\nn = int(input())\nnums = list(map(int, input().split()))\n\ncount_divide = 0\ncount_multiply = 0\n\nfor num in nums:\n    if num % 2 == 0:\n        count_divide += 1\n    if num % 3 == 0:\n        count_multiply += 1\n\nprint(count_divide + count_multiply)\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\n-------------Answer-------------\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 1 3') == '2'\n\n\"\"\"\n\nfrom collections import namedtuple\n\n_, A, B, C, K = [int(i) for i in stdin.split()]\nCard = namedtuple('Card', ['sign', 'digit'])\ncards = []\nfor i in range(A):\n    cards.append(Card(1, i + 1))\nfor i in range(B):\n    cards.append(Card(0, i + 1))\nfor i in range(C):\n    cards.append(Card(-1, i + 1))\n\nres = 0\nfor i in range(K):\n    min_value = cards[0].digit\n    min_sign = cards[0].sign\n    for card in cards:\n        if card.digit < min_value:\n            min_value = card.digit\n            min_sign = card.sign\n    cards.remove(Card(min_sign, min_value))\n    res += min_sign * min_value\n\nprint(res)\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1 3') == '2'\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(A, B, C, K) == ans\n\"\"\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '2 1 1 3'\n    ) == '2'\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 3\") == \"2\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"1 1 1 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 8\\n') == 'Yes'\nassert solution('6 12\\n') == 'No'\nassert solution('3 10\\n') == 'No'\nassert solution('1 10\\n') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == \"No\"\nassert solution(\"1 1\") == \"Yes\"\nassert solution(\"5 2\") == \"No\"\nassert solution(\"5 5\") == \"Yes\"\nassert solution(\"6 1\") == \"Yes\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 8\\n') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\nassert solution(\"1 1\") == \"Yes\"\nassert solution(\"2 4\") == \"No\"\n\"\"\"\n\nx, y = input().split(\" \")\nx, y = int(x), int(y)"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"3 4\") == \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '3 8'\n) == 'Yes'\n\n\"\"\"\n\nx, y = map(int, stdin.split())"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 8') == 'Yes'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 8') == 'Yes'\nassert solution('1 1') == 'No'\nassert solution('1 1') == 'No'\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8\\n') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 3\n1 2\n1 3\n2 3''') == '2'\nassert solution('''5 5\n1 2\n1 3\n3 4\n3 5\n4 5''') == '6'\nassert solution('''3 3\n1 2\n1 3\n2 3\n5 6\n5 7\n3 8\n6 9\n7 8''') == '0'\nassert solution('''5 5\n1 2\n1 3\n3 4\n3 5\n4 5\n5 4''') == '1'\n\n\"\"\"\n\nimport sys\n\nnum_of_vertices, num_of_edges = map(int, input().split())\nedges = [tuple(map(int, input().split())) for _ in range(num_of_edges)]\n\ngraph = {}\n\nfor i, j in edges:\n    if i in graph:\n        graph[i].append(j)\n    else:\n        graph[i] = [j]\n\n    if j in graph:\n        graph[j].append(i)\n    else:\n        graph[j] = [i]"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"4 4\\n1 3\\n2 4\\n3 4\\n1 2 3 4\") == \"4\"\nassert solution(\"5 5\\n1 2\\n1 3\\n2 3\\n1 2 4 5\") == \"6\"\nassert solution(\"3 3\\n1 2\\n2 3\\n1 3\") == \"0\"\nassert solution(\"4 5\\n1 2\\n2 3\\n3 4\\n1 3\\n4 5\") == \"5\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n1 3\\n2 3\\n') == '2'\nassert solution('1 2\\n2 3\\n') == '0'\n\n\"\"\"\n\nfrom collections import defaultdict\nimport sys\n\nclass Graph:\n    def __init__(self, size):\n        self.graph = defaultdict(list)\n        self.size = size\n\n    def addEdge(self, u, v):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n\n\n    def bfs(self, s):\n        visited = [False]*self.size\n        q = []\n        q.append(s)\n        visited[s] = True\n        level = 0\n        while q:\n            size = len(q)\n            for i in range(size):\n                u = q.pop(0)\n                for v in self.graph[u]:\n                    if not visited[v]:\n                        q.append(v)\n                        visited[v] = True\n            level += 1\n        return level\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3 3\n1 2\n1 3\n2 3\n''') == '2'\n\nassert solution('''\n3 3\n1 2\n1 3\n2 3\n''') == '1'\n\nassert solution('''\n4 4\n1 2\n1 3\n2 3\n2 4\n''') == '0'\n\nassert solution('''\n4 4\n1 2\n1 3\n3 4\n2 4\n''') == '0'\n\nassert solution('''\n4 4\n1 2\n1 3\n2 3\n2 4\n''') == '1'"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n'''\n\nimport sys"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 2\\n1 3\\n2 3\\n1 3') == '2'\nprint(solution('4 3\\n1 2\\n1 3\\n2 3\\n1 3'))"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 3\n1 3\n1 2\n2 3\n4 3\n4 2\n1 3''') == \"2\"\nassert solution('''4 3\n1 3\n1 2\n2 3\n4 3\n4 2\n1 3''') == \"2\"\nassert solution('''5 4\n1 3\n1 2\n2 3\n2 4\n5 4\n5 1\n1 4\n1 3''') == \"0\"\nassert solution('''5 4\n1 3\n1 2\n2 3\n2 4\n1 3\n5 4\n5 1\n1 4\n1 3''') == \"2\"\nassert solution('''6 4\n1 3\n1 2\n2 3\n2 4\n5 6\n5 4\n5 3\n5 2\n5 1\n6 5\n6 4\n6 3\n6 2\n6 1\n1 5\n1 4\n1 3\n1 2\n2 4\n2 3\n3 4\n3 5\n4 5\n4 6\n5 6\n5 4\n5 3\n6 4\n6 3\n6 2\n6 1\n1 6\n1 5\n1 4\n1 3\n2 3\n3 4\n4 5\n4 6\n5 6\n5 4\n5 3\n6 4\n6 3\n6 2\n6 1\n1 6\n1 5\n1 4\n1 3\n2 3\n3 4\n4 5\n4 6\n5 6\n5 4\n5 3\n6 4\n6 3\n6 2\n6 1''') == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n1 2\n1 3\n2 3\n''') == '2'\n\nassert solution('''\n3 3\n1 2\n1 3\n2 3\n''') == '2'\n\nassert solution('''\n2 3\n1 2\n1 3\n''') == '0'\n\nassert solution('''\n4 4\n1 3\n2 4\n3 4\n4 2\n''') == '0'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 5\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n''') == '6'\nassert solution('''4 6\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n''') == '10'\nassert solution('''4 5\n1 2\n1 3\n2 3\n3 4\n''') == '5'\nassert solution('''5 5\n1 2\n1 3\n2 3\n2 4\n3 4\n3 5\n''') == '4'\nassert solution('''6 7\n1 2\n1 3\n1 4\n1 5\n2 6\n''') == '8'\n\n-----Problem-----\nGiven the following graph:\n  * 5 vertices\n  * Each vertex has a color\n  * Each edge is colored with a color\n  * Each vertex with an odd number of edges has a color\n  * Each vertex with an even number of edges has a color\nWrite a function to find the number of ways to color the graph.\n\nThe color of an edge cannot be the same as the color of its source vertex.\n\n### Example\nConsider the following graph:\n\nFigure 1. The given graph.\n\nThe following two edges are colored with the same color:\nFigure 2. An example of a graph that has an odd number of edges.\n\nFigure 3. An example of a graph that has an even number of edges.\n\nThe function should return:\n\n2\n1\n2\n2\n2\n\n### Constraints\n- The number of vertices is between 2 and 8.\n- The number of edges is between 1 and 8, that is, the number of vertices - 1.\n\n### Input\nThe input consists of two integer numbers N and M (1\u2264N,M\u22648) representing the number of vertices and edges respectively.\n\nThe next line contains one integer number per line - the color of a vertex. The color is between 1 and 9.\n\n### Output\nThe function should return a single number.\n\n### Examples\ninputCopy\noutputCopy\n\n4 6\n1\n2\n3\n4\n4\n5\n6\n7\noutputCopy\n\n3\n4\n1\n2\n3\n4\n2\n3\n2\n3\n4\n1\n2\n2\n2\n3\n3\n2\n1\n2\n2\n2\n2\n2\n1\n2\n2\n2\n\n5\n2\n3\n4\n4\noutputCopy\n\n3\n1\n2\n2\n2\n2\n1\n1\n3\n3\n4\n4\n2\n2\n2\n3\n2\n1\n1\n2\n2\n2\n1\n3\n1\n2\n2\n2\n2\n2\n2\n1\n2\n2\n1\noutputCopy\n\n6\n1\n2\n2\n2\n1\n1\n2\n3\n2\n2\n2\n2\n1\n2\n3\n2\n3\n2\n3\n2\n2\n2\n1\n2\n2\noutputCopy\n\n2\n1\n2\n1\n2\n1\n3\n2\n1\n1\n1\n3\n4\noutputCopy\n\n4\n2\n1\n3\n2\n1\n2\n1\n2\n1\n2\noutputCopy\n\n2\n3\n2\n1\n2\n1\n2\n1\n1\n1\n2\n2\n2\n1\n1\n2\noutputCopy\n\n2\n1\n1\n1\n2\noutputCopy\n\n1\n2\n3\n4\n4\noutputCopy\n\n3\n2\n2\n3\n3\n3\n1\n1\n3\n1\n3\noutputCopy\n\n1\n2\n2\n1\n2\n2\n2\n1\n3\n1\noutputCopy\n\n1\n1\n1\n2\noutputCopy\n\n1\n1\n1\n1\n1\noutputCopy\n\n1\n1\n2\n2\noutputCopy\n\n1\n1\n1\n2\n2\noutputCopy\n\n1\n1\n2\n1\n1\noutputCopy\n\n1\n2\n1\n1\n2\noutputCopy\n\n2\n3\n2\n2\n1\n2\n2\noutputCopy\n\n2\n3\n2\n1\n1\n1\n2\n2\noutputCopy\n\n2\n1\n1\n2\noutputCopy\n\n2\n2\n2\n2\n2\noutputCopy\n\n2\n1\n2\noutputCopy\n\n3\n3\n3\n1\n2\noutputCopy\n\n1\n2\n1\n1\n2\noutputCopy\n\n2\n1\n1\n2\noutputCopy\n\n1\n1\n1\n1\noutputCopy\n\n2\n2\n1\n1\n2\noutputCopy\n\n2\n2\n1\n1\n1\noutputCopy\n\n2\n1\n1\n1\noutputCopy\n\n2\n2\n1\n1\noutputCopy\n\n1\n1\n1\n1\n1\noutputCopy\n\n1\n1\n1\n1\n1\noutputCopy\n\n1\n1\n1\n1\n1\noutputCopy\n\n1\n1\n1\n1\n1\noutputCopy\n\n1\n2\n1\n1\n1\noutputCopy\n\n2\n2\n1\n1\n1\noutputCopy\n\n2\n2\n1\n1\n2\noutputCopy\n\n2\n2\n1\n1\n1\noutputCopy\n\n1\n1\n1\n1\n2\noutputCopy\n\n1\n1\n1\n1\n1\noutputCopy\n\n1\n1\n1\n1\n1\noutputCopy\n\n1\n1\n1\n1\n1\noutputCopy\n\n1\n2\n1\n1\n1\noutputCopy\n\n1\n1\n1\n1\n2\noutputCopy\n\n1\n1\n1\n1\n2\noutputCopy\n\n1\n2\n1\n1\n1\noutputCopy\n\n2\n1\n1\n1\n1\noutputCopy\n\n1\n1\n1\n1\n1\noutputCopy\n\n2\n1\n1\n1\n1\noutputCopy\n\n2\n1\n1\n1\n1\noutputCopy\n\n1\n1\n1\n1\n1\noutputCopy\n\n1\n1\n1\n1\n1\noutputCopy\n\n1\n2\n1\n1\n2\noutputCopy\n\n1\n1\n1\n1\n2\noutputCopy\n\n1\n1\n2\n1\n1\noutputCopy\n\n1\n1\n1\n1\n1\noutputCopy\n\n1\n1\n1\n1\n1\noutputCopy\n\n1\n1\n1\n1\n1\noutputCopy\n\n1\n2\n1\n1\n1\noutputCopy\n\n1\n1\n1\n1\n1\noutputCopy\n\n1\n2\n1\n1\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(solution.testcase[0]) == solution.testcase[1]\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2') == '18'\nassert solution('5 3') == '18'\nassert solution('5 4') == '22'\nassert solution('5 5') == '27'\n\n\"\"\"\n\nimport sys\n\n_, n, m = map(int, sys.stdin.readline().split())\n\nprint((m - n + 1) * min(abs(n), abs(m)))\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"18\"\nassert solution(\"4 5\") == \"14\"\nassert solution(\"100 99\") == \"100\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 2 3 4 5 6\") == \"18\"\n\"\"\"\nimport sys\nimport numpy as np"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n') == '18'\nassert solution('2 -5\\n') == '7'\nassert solution('100 -50\\n') == '150'\nassert solution('30 -10\\n') == '50'\nassert solution('-5 1\\n') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n\") == \"18\"\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5 2') == '18'\nassert solution('5 3') == '13'\nassert solution('5 4') == '9'\nassert solution('5 5') == '10'\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n') == '18'\n\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"15\") == \"60\"\nprint(solution(\"15\"))"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('15') == 60\nprint(solution('15'))\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == 'Fizz'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('15\\n') == '60'\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\"\nimport sys\n\nfor line in sys.stdin:\n    line = line.strip()\n    result = 0\n    for i in range(1, int(line) + 1):\n        if (i % 3 == 0) and (i % 5 == 0):\n            result += i\n        elif i % 3 == 0:\n            result += i\n        elif i % 5 == 0:\n            result += i\n        else:\n            result += i\n    print(result)\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"15\") == \"60\"\n\nprint(solution(\"15\"))\n\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('15') == '60'\nassert solution('3') == 'Fizz'\nassert solution('5') == 'Buzz'\nassert solution('10') == 'FizzBuzz'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"15\") == \"60\"\nprint(solution(stdin), end=\"\")\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''6 5\n4 7 10 6 5''') == '8'\nassert solution('''8 10\n5 7 4 3 2''') == '5'\n\"\"\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 5\\n4 7 10 6 5') == '8'\n\nimport sys"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\nprint(solution(\"4 7 10 6 5\"))\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n7 10 6 5') == '8'\n\"\"\"\n\n\"\"\"\n    - take the maximum difference between the two numbers\n    - find all the numbers that are not contained in the sequence\n    - find the maximum difference between the two numbers\n    - select the number with minimum difference\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\nprint(solution('6 5\\n4 7 10 6 5'))\n\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 10 6 5\") == 8\n\"\"\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\n-----Explanation-----\nFor example, if we paint all cells in the first row in black and all cells in the second row in black, then the number of remaining white cells is one.\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\"\"\"\n\nimport sys\n\nH, W = map(int, sys.stdin.readline().split())\nh, w = map(int, sys.stdin.readline().split())\n\nprint(H * W - h * w)\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n\nimport unittest\nfrom collections import Counter"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\nh, w = stdin.split('\\n')\nprint(solution(h, w))\n\"\"\"\n\nh, w = input().split()\nh = int(h)\nw = int(w)\n\nprint(h * w - (h + w - 1))\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n2 2\\n2 1\") == \"1\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\n\"\"\"\n\nH, W = [int(x) for x in stdin.strip().split(' ')]\nh, w = [int(x) for x in stdin.strip().split('\\n')[1:]]\n\nprint(H * W - h * w)\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n2 1\") == 1\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\"\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '7 4\\n3 7 5 1 10 3 20'\n) == '6'\nassert solution(\n    '7 2\\n3 7 5 1 10 3 20'\n) == '-1'\n\n\"\"\"\nimport unittest"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == '-1'\nassert solution('2 1') == '1'\nassert solution('2 1 1') == '1'\nassert solution('4 1 2 4') == '4'\nassert solution('4 1 3 1') == '2'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-\"\n\"\"\"\n\nn, k = input().split()\narr = list(map(int, input().split()))\n\nlow, high = 1, 10 ** 9\n\nwhile low <= high:\n    mid = (high + low) // 2\n    if len([x for x in arr if x <= mid]) <= int(k):\n        high = mid - 1\n    else:\n        low = mid + 1\n\nprint(low if low!= 10 ** 9 else \"-1\")\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 4\n3 7 5 1 10 3 20''') == '6'\nassert solution('''7 2\n3 7 5 1 10 3 20''') == '-1'\nassert solution('''7 3\n3 7 5 1 10 3 20''') == '5'\nassert solution('''7 4\n3 7 5 1 10 3 20''') == '6'\nassert solution('''7 5\n3 7 5 1 10 3 20''') == '5'"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1') == '3'\nassert solution('7 2') == '-1'\nassert solution('7 4') == '6'\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\nassert solution('7 3\\n3 7 5 1 10 3 20') == '-1'\nassert solution('7 2\\n3 7 5 1 10 20') == '-1'\nassert solution('7 3\\n3 7 5 1 10 20') == '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\".*...\\n...**\\n..****\\n...**\\n.*...\") == '3'\nassert solution(\"....*...\\n...**...\\n..****..\\n...**...\\n....*...\") == '3'\nassert solution(\"....*...\\n...**...\\n..****..\\n...**...\\n....*...\") == '3'\nassert solution(\"....*...\\n...**...\\n..****..\\n...**...\\n....*...\") == '3'\nassert solution(\"....*...\\n...**...\\n..****..\\n...**...\\n....*...\") == '3'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n....\\n....\\n..*..\\n....\\n....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"-1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n......\") == \"3\"\nassert solution(\"5 5\\n.**..\\n.*...\\n.*...\\n.*...\\n......\") == \"3\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '-1'\nassert solution('5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....') == '-1'\nassert solution('3 3\\n*.*\\n.*.\\n*.*') == '-1'\nassert solution('3 3\\n*.*\\n.*.\\n*.*') == '-1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n.*\\n.*\\n.*') == '-1'\nassert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n') == '3\\n3 4 1\\n3 5 2\\n3 5 1\\n'\n\nassert solution('3 3\\n.*\\n.*\\n.*') == '-1'\nassert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n') == '3\\n2 2 1\\n3 3 1\\n3 4 1\\n'\n\nassert solution('5 5\\n.*\\n.*\\n.*\\n.*\\n.*') == '-1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3\\n3 4 1\\n3 5 2\\n3 5 1'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '-1'\nassert solution('5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....') == '-1'\nassert solution('3 3\\n*.*\\n.*.\\n*.*') == '-1'\nassert solution('3 3\\n*.*\\n.*.\\n*.*') == '-1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '3\\n2 2 1\\n3 3 1\\n3 4 1'\n\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n.*\\n.*\\n.*') == '3\\n2 2 1\\n3 3 1\\n3 4 1'\nassert solution('2 2\\n.*\\n.*') == '2\\n2 1 1\\n2 2 1'\nassert solution('1 1\\n*') == '1\\n0 0 1'\nassert solution('4 4\\n.**\\n.**\\n.**\\n.**') == '4\\n3 3 1\\n3 4 1\\n3 5 1\\n4 4 1'\nassert solution('4 4\\n..**\\n.*..\\n..*.') == '4\\n3 3 1\\n3 4 1\\n3 5 1\\n4 4 1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\".***\\n.*.*\\n.*.*\") == \"3\"\nassert solution(\"**\\n.*\\n.*\") == \"2\"\nassert solution(\"*\\n.*\\n.*\") == \"1\"\nassert solution(\"***\\n.*\\n.*\\n****\\n***\\n.*\\n.*\\n\") == \"0\"\n\nassert solution(\".***\\n.*.*\\n.*.*\") == \"3\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\n\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n.*\\n.*\\n.*\") == '3'\nassert solution(\"5 5\\n.*\\n.*\\n.*\\n.*\\n.*\") == '3'\nassert solution(\"5 5\\n.*\\n.**\\n.*\\n.*\\n.*\") == '-1'\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"good\") == 0\nassert solution(\"string\") == 3\nassert solution(\"xyxy\") == 1\nassert solution(\"aabc\") == 2\nassert solution(\"aaa\") == 3\n\nprint(\"All tests passed\")\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(good) == 0\nassert solution(string) == 2\nassert solution(xyyx) == 1\nassert solution(aabc) == 2\nassert solution(aaa) == 3\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"good\") == 0\nassert solution(\"string\") == 1\nassert solution(\"xyyx\") == 2\nassert solution(\"bad\") == 1\nassert solution(\"aabc\") == 2\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaaa\") == 0\nassert solution(\"aaaa\") == 0\nassert solution(\"aaaa\") == 0\nassert solution(\"aaaa\") == 0\nassert solution(\"aaaa\") == 0\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aabc') == 'ab'\n\"\"\""
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"good\") == '0'\nassert solution(\"aabc\") == '2'\nassert solution(\"aaa\") == '3'\nassert solution(\"aaaa\") == '0'\nassert solution(\"aaaaa\") == '1'\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"good\") == 0\nassert solution(\"string\") == 0\nassert solution(\"xyyx\") == 1\nassert solution(\"aaa\") == 3\n\nprint(solution(stdin.readline().strip()))\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('good') == 0\nassert solution('string') == 1\nassert solution('xyyx') == 2\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"good\") == \"0\"\nassert solution(\"aabc\") == \"2\"\nassert solution(\"aaa\") == \"3\"\nassert solution(\"abcdef\") == \"1\"\n\nassert solution(\"a\") == \"0\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"\nassert solution(\"7 7\\n1 3\\n2 4\\n2 3\\n5 6\\n5 7\\n2 4\") == \"NO\"\nassert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"\nassert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"\nassert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 4\\n2 3\\n3 1\\n4 1\\n1 3\") == \"NO\"\nassert solution(\"5 6\\n1 5\\n1 4\\n2 3\\n6 5\\n2 5\") == \"NO\"\nassert solution(\"5 5\\n1 5\\n1 4\\n2 3\\n4 1\\n2 5\") == \"YES\"\nassert solution(\"5 5\\n1 5\\n1 4\\n2 3\\n4 1\\n2 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\\\n1 5\\\\n2 1\\\\n1 4\\\\n3 1\\\\n6 1\\\\n\") == 'YES\\\\n10100'\n\"\"\"\n\nfrom collections import defaultdict, deque"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\\n\") == \"YES\\n10100\"\nassert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\\n\") == \"NO\\n\"\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 4\\n3 4\") == \"YES\\n1010\"\nassert solution(\"4 4\\n1 2\\n1 3\\n2 3\\n3 4\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n2 3\\n2 1\\n2 1\\n1 2\\n1 3\") == \"NO\"\nassert solution(\"3 2\\n1 2\\n1 3\") == \"YES\"\nassert solution(\"4 1\\n1 2\\n1 3\") == \"1010\"\nassert solution(\"4 4\\n1 2\\n2 3\\n3 4\") == \"NO\"\nassert solution(\"5 7\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"YES\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 2\\n1 3\") == \"NO\"\nassert solution(\"3 2\\n1 2\\n2 3\") == \"YES\\n11\"\nassert solution(\"2 5\\n1 5\\n1 4\\n2 1\\n2 3\\n3 4\\n5 1\\n5 4\\n\") == \"NO\"\nassert solution(\"2 5\\n1 5\\n1 4\\n2 1\\n2 3\\n3 4\\n5 1\\n5 4\\n\") == \"NO\"\nassert solution(\"1 5\\n2 1\\n1 4\\n2 3\\n3 4\\n5 1\\n5 4\\n\") == \"NO\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"YES\\n1010\"\n\"\"\"\n\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1\\n1 4\\n3 1\\n') == \"10100\"\n\n\"\"\"\n\nfrom sys import stdin\nfrom collections import deque\nfrom copy import deepcopy\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n1 2\\n1 2\\n1 3\\n1 3\\n1 3') == '10101'\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\\n\") == '2\\n3 4'\n\"\"\"\n\nfrom typing import List\n\n\nclass Segments:\n    def __init__(self, n: int, m: int) -> None:\n        self.n = n\n        self.m = m\n        self.segments = []\n        for i in range(n):\n            line = stdin.readline()\n            l, r = int(line.split(' ')[0]), int(line.split(' ')[1])\n            self.segments.append((l, r))\n\n    def _calculate_segments(self, segment: tuple[int, int]) -> None:\n        l, r = segment\n        for i in range(l, r + 1):\n            self.add(i)\n\n    def _calculate_segments_overlap(self, segment: tuple[int, int]) -> None:\n        l, r = segment\n        for i in range(l, r + 1):\n            self.add(i)\n\n    def _calculate_segments_degenerate(self, segment: tuple[int, int]) -> None:\n        l, r = segment\n        for i in range(l, r + 1):\n            if i == l:\n                self.add(i)\n            elif i == r:\n                self.add(i)\n            else:\n                pass\n\n    def add(self, number: int) -> None:\n        if number not in self.segments:\n            self.segments.append(number)\n\n    def calculate(self) -> None:\n        self.segments = sorted(self.segments, key=lambda x: x[0])\n        for segment in self.segments:\n            self._calculate_segments(segment)\n        for segment in self.segments:\n            self._calculate_segments_overlap(segment)\n        for segment in self.segments:\n            self._calculate_segments_degenerate(segment)\n        print(len(self.segments))\n        print(' '.join([str(x) for x in self.segments]))\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5\\n2 2\\n1 2\\n5 5') == '2\\n3 4'\nassert solution('1 7\\n1 7') == '0'\nassert solution('1 7\\n1 7') == '0'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import Dict, List\nfrom unittest import TestCase\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n2 2\\n1 2\\n5 5\\n') == '0\\n3 4'\nassert solution('1 7\\n1 7\\n') == '0'\nassert solution('1 7\\n1 7\\n1 7\\n') == '0'"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\n\n\"\"\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n1 2\\n5 5') == '2\\n3 4'\nassert solution('1 7\\n1 7') == '0'\nassert solution('1 2\\n1 2') == '0'\n\"\"\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == '2\\n3 4'\nassert solution(\"1 7\\n1 7\") == '0'\nassert solution(\"5 7\\n1 3\\n4 6\") == '0'\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 7\\n2 2\\n5 5\") == \"0\"\nassert solution(\"1 7\\n2 2\\n5 5\\n3 4\") == \"2 3\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == '2\\n3 4'\nassert solution(\"1 7\\n1 7\") == '0'"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 9 2 3\") == 2\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 9 2 3') == '2'\nassert solution('4 9 5 3') == '0'\nassert solution('4 9 5 6') == '1'\nassert solution('1 1 1 1') == '0'\nassert solution('1 1 2 2') == '0'\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 9 2 3') == 2\n\"\"\"\n\nA, B, C, D = map(int, input().split())\n\nn = 0\nfor x in range(A, B + 1):\n    if x % C!= 0 and x % D!= 0:\n        n += 1\n\nprint(n)\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 9 2 3\") == \"2\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 9 2 3') == 2\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 9 2 3') == '2'\nprint('OK')\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 9 2 3\") == \"2\"\nprint(\"All tests passed.\")\n\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 9 2 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 9 2 3') == 2\n\"\"\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 9 2 3') == 2\n\nimport sys"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"543210\") == \"No\"\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('9') == 'Yes'\nassert solution('1') == 'No'\n\"\"\"\n\nimport sys\nfrom itertools import islice"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('1729') == 'No'\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123456789') == 'Yes'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('123456789') == 'Yes'\nassert solution('999999999') == 'No'\nassert solution('2434777') == 'Yes'\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(123456789) == \"Yes\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('123456789') == 'Yes'\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123456789\") == 'Yes'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"127\") == \"4\"\nprint(solution(\"127\"))\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('127') == '4'\n\n\"\"\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('127') == '4'\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\">7\") == \"1\"\nassert solution(\"15\") == \"4\"\nassert solution(\"12345\") == \"1\"\n\n\"\"\"\n\nimport math\n\nN = int(input())\nx = math.ceil(math.log2(N))\n\nprint(x)\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"127\"\n) == \"4\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('127') == '4'\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('127') == '4'\n\n-------Solution-------\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('1') == 0\nassert solution('9') == 1\nassert solution('36') == 1\nassert solution('81') == 2\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"127\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\"\nassert solution(\"abcdefghijklm\") == \"No\"\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('hello') == 'olleh'\nassert solution('abcdef') == 'fedcba'\nassert solution('this is a test') == 'gits at set a test'\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\nprint(solution(stdin))\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"a\"\nassert solution(\"aab\") == \"aba\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"abca\") == \"bcac\"\nassert solution(\"abcb\") == \"bca\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abc\") == \"cab\"\nassert solution(\"abcde\") == \"edcba\"\nassert solution(\"12345\") == \"34512\"\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"abc\"), \"cab\")\n        self.assertEqual(solution(\"abcde\"), \"edcba\")\n        self."
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('xyz') == 'zxy'\nassert solution('ABC') == 'CBA'\nassert solution('KRYPT') == 'RKPA'\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\nassert solution(\"tokyo\") == \"kyoto\"\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcd') == 'bcda'\nassert solution('xyz') == 'yza'\nassert solution('a') == 'a'\n\"\"\"\nfrom functools import reduce"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('cabacc') == 1\nassert solution('abc') == 0\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('cabacc') == 1\nassert solution('abc') == 0\n\"\"\"\n\nS = input()\nT = input()\n\ncount = 0\nfor i in range(len(S)):\n    if T[i]!= S[i]:\n        count += 1\nprint(count)"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('cabacc') == 1\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abc', 'bc') == 1\nassert solution('cabacc', 'abc') == 1\nassert solution('cabacc', 'cab') == 0\nassert solution('cabacc', 'ca') == 1\nassert solution('cabacc', 'cc') == 2\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cabacc\") == 1\n\"\"\"\n\nS = input()\nT = input()\ncount = 0\nfor i in range(len(S)):\n    if S[i]!= T[i]:\n        count += 1\nprint(count)"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('cabacc', 'abc') == '1'\nprint('all tests passed')"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('cabacc') == 1\nassert solution('abc') == 0\nassert solution('abcd') == 1"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abccccccccd') == 4\nassert solution('abbdd') == 2\nassert solution('cbccc') == 2\nassert solution('dddddd') == 0\nassert solution('a') == 1\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('cabacc') == 1\nassert solution('abc') == 0\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 12 2') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 12 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 12 2') == '2'\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\"\"\"\n\nimport sys\n\ninputs = [x.strip().split(' ') for x in sys.stdin.readlines()][:5]"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 12 2') == '2'\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 12 2\") == \"2\"\nprint('Hooray!!')\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 12 2') == 2\n\n\"\"\"\n\nimport sys\nimport heapq"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 12 2') == '2'\n\"\"\"\n\nfrom math import gcd\n\na, b, k = map(int, stdin.readline().split())\n\nmax_number = min(a, b)\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 12 2') == '2'\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 12 2') == '2'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1024') == '2020'\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1024') == '2020'"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"\n\nimport sys\n\nX = int(sys.stdin.readline())\n\ncnt = 0\n\nwhile X >= 0:\n    if X // 500 > 0:\n        cnt += X // 500\n        X -= (X // 500) * 500\n    if X // 100 > 0:\n        cnt += X // 100\n        X -= (X // 100) * 100\n    if X // 50 > 0:\n        cnt += X // 50\n        X -= (X // 50) * 50\n    if X // 10 > 0:\n        cnt += X // 10\n        X -= (X // 10) * 10\n    if X // 5 > 0:\n        cnt += X // 5\n        X -= (X // 5) * 5\n    if X == 0:\n        break\n\nprint(cnt)\n\n\"\"\"\n\ubaa8\ubc94\ub2f5\uc548\nX = int(input())"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1024') == '2020'\nprint(solution(stdin.readline().strip()))\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '5'\nassert solution('2') == '10'\nassert solution('3') == '15'\nassert solution('4') == '20'\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"\n\n\"\"\"\n1.  read the input in one line\n2.  separate the line into two numbers: X and Y\n3.  convert X and Y into int\n4.  calculate result of X and Y in int\n5.  return the result\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('50') == '250'\nassert solution('1000') == '2000'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\nx = int(sys.stdin.readline().rstrip())\n\ncoins = [500, 100, 50, 10, 5, 1]"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 4\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 4\") == \"5\"\nassert solution(\"4\\n1 4\") == \"5\"\nassert solution(\"2\\n1 4\") == \"5\"\nassert solution(\"1\\n1 1\") == \"0\"\nassert solution(\"3\\n1 2 3\") == \"3\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 4') == '5'\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\n\n------\nInput:\n3\n1 2 3\n\nOutput:\n3\n\nAssume the meeting is held at coordinate 2. In this case, the first person will spend 1 points of stamina, the second person will spend 2 points of stamina, and the third person will spend 3 points of stamina, for a total of 3 points of stamina.\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 4\") == \"5\"\nprint(solution(\"2 1 4\"))"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\n\"\"\"\n\n\"\"\"\n\nWrite 5 lines of code to test the correctness of solution:\nThere are N people living on a number line.\nThe i-th person lives at coordinate X_i.\nYou are going to hold a meeting that all N people have to attend.\nThe meeting can be held at any integer coordinate. If you choose to hold the meeting at coordinate P, the i-th person will spend (X_i - P)^2 points of stamina to attend the meeting.\nFind the minimum total points of stamina the N people have to spend.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 100\n - 1 \\leq X_i \\leq 100\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nX_1 X_2... X_N\n\n-----Output-----\nPrint the minimum total stamina the N people have to spend.\n\n-----Sample Input-----\n2\n1 4\n\n-----Sample Output-----\n5\n\nAssume the meeting is held at coordinate 2. In this case, the first person will spend (1 - 2)^2 points of stamina, and the second person will spend (4 - 2)^2 = 4 points of stamina, for a total of 5 points of stamina. This is the minimum total stamina that the 2 people have to spend.\nNote that you can hold the meeting only at an integer coordinate.\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nx = list(map(int, sys.stdin.readline().split()))\n\ntotal_points = 0\n\nfor i in range(len(x)):\n    total_points += x[i] ** 2\n\nprint(total_points)\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 4\") == \"5\"\n\"\"\"\nimport math"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10\") == \"3\"\nassert solution(\"1 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 10') == '3'\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10\") == 3\nprint(solution(\"4 10\"))\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10\") == \"3\"\nprint(solution(\"4 10\"))"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 10') == '3'\nprint(solution(stdin))\n\n'''\n\n'''\n-----Problem-----\nAt the beginning of the 20th century, the world was already populated by about 20 billion people. \nBy the end of the 21st century, the number of people would likely be about 2 trillion.\nWhile the population has increased, the amount of power available to the world also increased.\nToday, the amount of power available to the world is about 2 trillion joules.\nWe can think of every joule as a calorie.\nYour goal is to find the minimum amount of power strips required for the world to be completely electrified.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq A \\leq 20\n - 1 \\leq B \\leq 20\n - The number of power strips has to be the same for all input cases.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nPrint the minimum number of power strips required.\n\n-----Sample Input-----\n4 10\n\n-----Sample Output-----\n5\n\n4 power strips, each with 4 sockets, extend the socket into 10 empty sockets.\n\n'''\n\n'''\n-----Solution-----\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 10') == 3\n\"\"\"\n\nA, B = [int(i) for i in input().split(' ')]"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 10\\n\") == 3\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10\") == \"3\"\n\"\"\"\n\na, b = (int(x) for x in stdin.split())\n\ns = 1\nwhile a >= b:\n    a = a - b\n    s += 1\n\nprint(s)\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\") == \"3\"\nassert solution(\"20 10\") == \"3\"\n\"\"\"\n\na, b = map(int, stdin.split())\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"CSS\") == 2\nassert solution(\"CSR\") == 1\n\"\"\"\n\nweather = stdin.split()\ncount = 0\n\nfor i in range(3):\n    if weather[0][i] == weather[1][i]:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '2'\nassert solution('RRR') == '3'\n\nprint(\"Passed\")\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"2\"\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('CSS') == 2\nassert solution('CSR') == 1\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('CSS') == 2\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"CSS\") == 2\nassert solution(\"CSR\") == 0\nassert solution(\"SCC\") == 0\nassert solution(\"SSR\") == 0\n\"\"\"\n\n\"\"\"\nInput\nCSS\nCSR\n\nOutput\n2\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('C') == 1\nassert solution('R') == 1\nassert solution('CSC') == 2\nassert solution('RSC') == 1\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 3 5 4 2') == 2\n\n'''"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 3 4 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 3 5 2') == '2'\nassert solution('7\\n1 3 5 4 2 7') == '0'\nassert solution('6\\n1 3 5 4 2') == '0'\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3 5 4 2') == '2'\n'''"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\n\"\"\"\n\n\"\"\"\nn = int(stdin.readline())\nline = stdin.readline().strip().split()\nline = [int(num) for num in line]\nline.sort()\ncount = 0\nfor i in range(1, len(line) - 1):\n    if line[i + 1] > line[i - 1] and line[i] > line[i - 1] and line[i] < line[i + 1]:\n        count += 1\nprint(count)\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 3 5 4 2\") == 2\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1 3 5 4 2') == 2\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n4 2 3 7 10 5\") == \"2\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.040\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.040\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"6.040\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == \"6.720\"\n\nprint(solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\"))\nprint(solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\"))\nprint(solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\"))\nprint(solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\"))\nprint(solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\"))\nprint(solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\"))\nprint(solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\"))\nprint(solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\"))\nprint(solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\"))\nprint(solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\"))\nprint(solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\"))\nprint(solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\"))\nprint(solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\"))\nprint(solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\"))\nprint(solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\"))\nprint(solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\nassert solution('3\\n2.1 2.1') == '1.414214'\n\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76') == '6.040'\n\nassert solution('8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92') == '6.720'\n\n\"\"\"\n\nimport re\n\nn = int(input())"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5.24 2.04\") == 5.410\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\\n\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\\n\") == \"6.040\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\\n\") == \"6.720\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\\n\") == \"6.720\"\n\"\"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66') == '5.620'\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76') == '5.480'\nassert solution('8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92') == '6.040'\nassert solution('8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92') == '6.040'\n\n\"\"\"\n\nimport ast\nimport sys"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.040\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"\n\nprint(\"Successfully passed!\")\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.040\"\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.040\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"\n\"\"\""
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8\") == \"3\"\n\nassert solution(\"7 10\") == \"2\"\n\nassert solution(\"5 15\") == \"-1\"\n\nassert solution(\"5 26\") == \"2\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(5, 8) == 4\nassert solution(7, 10) == 2\nassert solution(5, 15) == -1\nassert solution(5, 16) == 2\nassert solution(5, 26) == -1\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8\") == \"2\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 15\") == \"-1\"\nassert solution(\"5 26\") == \"2\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n5 5 5 5 5\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '-1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\n\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 8\n2 3 1 1 2''') == '4'\nassert solution('''7 10\n5 5 5 5 5\n''') == '2'\nassert solution('''5 15\n5 5 5 5 5\n''') == '-1'\nassert solution('''5 26\n5 5 5 5 5\n''') == '-1'\nassert solution('''5 26\n5 5 5 5 5\n''') == '-1'\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 1 1 2\") == 4\nassert solution(\"5 8\") == 4\nassert solution(\"7 10\") == 2\nassert solution(\"5 15\") == -1\nassert solution(\"5 26\") == -1\n\n-----Explanation-----\n\nIn the first example, Polycarp can drink first cup, second cup and fourth cup during first day, write one page for second cup and two pages for fourth cup so he needs to wait four days to write coursework.\n\nIn the second example, Polycarp can drink third, fourth and second cups during first day, write two pages for third cup and four pages for second cup so he needs to wait two days to write coursework.\n\nIn the third example Polycarp can drink all cups of coffee during first day and write 15 pages of coursework, so he needs to wait one day to write coursework.\n\nIn the fourth example Polycarp cannot drink all cups of coffee during first day and he needs to drink one cup of coffee during the second day.\n\nIn the fifth example Polycarp cannot write coursework at all.\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\nassert solution(\"5 16\\n5 5 5 5 5\") == '2'\n\n\"\"\"\n\nn, m = [int(i) for i in input().split()]\narr = [int(i) for i in input().split()]\n\ndays = 0\nfor i in range(n):\n    if arr[i] >= m:\n        days += 1\n    else:\n        break\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\""
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"1 2 3\"\nassert solution(\"7 5\") == \"1 3 2 4 5\"\nassert solution(\"10 4\") == \"1 1 3 7 7 12 3\"\nassert solution(\"15 2\") == \"1 1\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\") == \"1 3\"\nassert solution(\"5 2\") == \"1 2\"\nassert solution(\"6 1\") == \"2 4\"\nassert solution(\"5 3\") == \"1 2\"\nassert solution(\"6 3\") == \"1 1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\") == \"1 1\"\nassert solution(\"1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\") == \"1 1\"\nassert solution(\"1 2 3 2 4 3 1\") == \"1 2 3\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == \"1 1\"\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"7 3 1 3\"\nassert solution(\"15 2\") == \"1 1\"\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3') == '1 2 3'\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"2\", \"4\", \"3\", \"1\"]) == '1 2 3'\nassert solution([\"1\", \"3\", \"1\", \"3\", \"10\", \"3\", \"7\", \"7\", \"12\", \"3\"]) == '7 3 1 3'\nassert solution([\"1\", \"2\", \"1\", \"1\", \"2\", \"1\", \"1\", \"2\", \"1\", \"1\", \"1\"]) == '1 1'\n\"\"\""
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\") == \"1 1\"\n\"\"\""
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == \"1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"7 3 1 3\"\nassert solution(\"15 2\") == \"1 1\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\") == \"3\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"4 2\n9 9\n10 8\n5 3\n4 3\"\"\") == \"5\"\nassert solution(\"\"\"2 4\n1 2 3 4\n10 3 7 3\"\"\") == \"0\"\nassert solution(\"\"\"6 1\n3\n6\n2\n5\n1\n4\"\"\") == \"3\"\nprint('The code ran Correctly')"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\\n\") == \"3\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\\n\") == 5\n\"\"\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == '5'\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == '0'\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == '3'"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n\"\"\"\n\nfrom itertools import chain, combinations"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('xxxxxx') == '5'\nassert solution('xxxiixx') == '8'\nassert solution('xxxixx') == '8'\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('xxxi') == '1'\nassert solution('xxxii') == '0'\nassert solution('xxxxx') == '4'\nassert solution('xxii') == '0'\nassert solution('xxxx') == '4'\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('xxxiii') == 1\nassert solution('xxoxx') == 0\nassert solution('xxxxxxxxxx') == 8\nassert solution('xxiiix') == 1\nassert solution('xxxxxxxxxx') == 8\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xxxiii\") == 1\nassert solution(\"xxoxx\") == 0\nassert solution(\"xxxxxxxxxx\") == 8\nassert solution(\"xxx\") == 0\nassert solution(\"i\") == 0\n\n\"\"\"\n\n\nfrom math import log2, ceil"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"xxxiii\") == 1\nassert solution(\"xxoxx\") == 0\nassert solution(\"xxxxxxxxxx\") == 8\nassert solution(\"xxxxxxx\") == 1\nassert solution(\"xxxxxx\") == 0\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xxxiii\") == \"1\"\n\nassert solution(\"xxxxx\") == \"0\"\n\nassert solution(\"xxxx\") == \"2\"\n\nassert solution(\"xxxxxx\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\u201cxxxiii\u201d) == 1\nassert solution(\u201cxxoxx\u201d) == 0\nassert solution(\u201cxxxxxxxxxx\u201d) == 8\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"xxxxx\") == \"0\"\nassert solution(\"xxii\") == \"1\"\nassert solution(\"xxix\") == \"1\"\nassert solution(\"xxxx\") == \"1\"\nassert solution(\"xxii\") == \"1\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n5') == \"15\"\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '48'\nprint(solution(stdin))\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '48'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n') == '48'\nassert solution('2\\n') == '6'\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n\") == 48\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n4') == '20'\nassert solution('2\\n5') == '10'\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '48'\nprint(solution('4'))\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n\") == \"48\"\n\nassert solution(\"1\\n\") == \"1\"\n\nassert solution(\"2\\n\") == \"3\"\n\nassert solution(\"3\\n\") == \"6\"\n\nassert solution(\"4\\n\") == \"24\"\n\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n') == '48'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"48\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5') == 'unsafe'\n\n'''\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5') == 'unsafe'\n\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n\") == \"unsafe\"\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5') == 'unsafe'\nassert solution('5 1') =='safe'\nassert solution('100 100') == 'unsafe'\nassert solution('99 101') == 'unsafe'\n\n------'''"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(example1) == example2\n\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5\\n') == 'unsafe'\nassert solution('4 5\\n') == 'unsafe'\nassert solution('5 4\\n') =='safe'\nassert solution('4 4\\n') =='safe'\nassert solution('3 3\\n') =='safe'\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\"\"\"\n\nS, W = input().split()\nS, W = int(S), int(W)\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\"\"\"\n\nS, W = map(int, input().split())\nprint(\"unsafe\" if W >= S else \"safe\")\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') =='safe'\nassert solution('1 1') == 'unsafe'\nassert solution('3 3') =='safe'\nassert solution('3 2') == 'unsafe'\nassert solution('3 0') == 'unsafe'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 4 5''') == '6'\n\"\"\"\n\n\"\"\"\nimport re\nimport sys\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 4 5''') == '6'\nprint(\"Test 1 Passed\")\n\nassert solution('''1 1 1''') == '0'\nprint(\"Test 2 Passed\")\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\n\"\"\"\n\n\"\"\"\nThe proof is in the factorial of the sum of two sides and\nthe sum of all three sides minus the third side.\n\n3+4+5-5=12\n12/2=6\n6!\n\n(3+4+5+6+6+...+6)=3(6!)+4(6!)+5(6!)=3!(6!)+4!(6!)+5!(6!)=6!(3+4+5)\n=6!(12/2)\n=6!6(12/2)=720\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 5') == '6'\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\\n4 5 6\\n7 8 9\") == \"6\"\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 6\") == \"6\"\n\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 5') == '6'\nassert solution('6 7 8') == '27'\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\n\"\"\"\n\nimport sys\n\na, b, c = [int(i) for i in sys.stdin.readline().strip().split()]"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 5') == '6'\n\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 11 4\\n') == '4'\n\"\"\"\n\na, b, c = map(int, input().split())\nn = 0\nwhile b >= a:\n    b -= a\n    n += 1\n    if c >= n:\n        print(n)\n    else:\n        print(n + c // n)\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 11 4') == '4'\nassert solution('11 11 4') == '4'\nassert solution('11 11 11 4') == '4'\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 11 4\") == 4\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 11 4\") == 4\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 4 10\") == \"5\"\nprint(solution(\"2 11 4\"))\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 11 4') == '4'\n\"\"\"\n\nfrom unittest import TestCase\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n\nimport sys\n\nA, B, C = [int(s) for s in sys.stdin.readline().strip().split()]"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 11 4') == '4'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 11 4') == '4'\nassert solution('1 1 1') == '1'\nassert solution('10 1 10') == '10'\nassert solution('1 1 1') == '1'\nassert solution('2 10 5') == '1'\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5') == '10'\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5') == '10'\n\"\"\"\n\nA, B = map(int, input().split(' '))\nprint(A * B)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3, 4) == 12\nassert solution(1, 2) == 2\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2, 5) == 10\n\"\"\"\n\n\"\"\"\nUnderstand:\ninput line to stdin\n3 2\n\nreturn 5\n\nPlan:\nconvert string input to ints\nmultiply them\n\noutput\n\nWhat is the format of stdin?\nstr\n\nWhat is the format of output?\nint\n\nInput:\n3 2\n\nOutput:\n5\n\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\") == 10\nprint(solution(\"2 5\"))\n'''\n\n'''\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == \"10\"\n'''"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5') == 10\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 5') == '10'\n\n---"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\") == 10\n\"\"\"\n\nA, B = input().split()\nA = int(A)\nB = int(B)\nprint(A*B)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''1 2\n3 4\n5 6\n7 8\n9 10''') == '''1 2\n3 4\n5 6\n7 8\n9 10'''\n\nassert solution('''10 20\n30 40\n50 60\n70 80\n90 100\n110 120\n130 140\n150 160\n170 180\n190 200\n210 220\n230 240\n250 260\n270 280\n290 300\n310 320\n330 340\n350 360\n370 380\n390 400\n410 420\n430 440\n450 460\n470 480\n490 500\n510 520\n530 540\n550 560\n570 580\n590 600\n610 620\n630 640\n650 660\n670 680\n690 700\n710 720\n730 740\n750 760\n770 780\n790 800\n810 820\n830 840\n850 860\n870 880\n890 900\n910 920\n930 940\n950 960\n970 980\n990 1000\n''') == '''10 20\n30 40\n50 60\n70 80\n90 100\n110 120\n130 140\n150 160\n170 180\n190 200\n210 220\n230 240\n250 260\n270 280\n290 300\n310 320\n330 340\n350 360\n370 380\n390 400\n410 420\n430 440\n450 460\n470 480\n490 500\n510 520\n530 540\n550 560\n570 580\n590 600\n610 620\n630 640\n650 660\n670 680\n690 700\n710 720\n730 740\n750 760\n770 780\n790 800\n810 820\n830 840\n850 860\n870 880\n890 900\n910 920\n930 940\n950 960\n970 980\n990 1000\n'''\n\nassert solution('''1 0\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\n8 0\n9 0\n10 0\n11 0\n12 0\n13 0\n14 0\n15 0\n16 0\n17 0\n18 0\n19 0\n20 0\n21 0\n22 0\n23 0\n24 0\n25 0\n26 0\n27 0\n28 0\n29 0\n30 0\n31 0\n32 0\n33 0\n34 0\n35 0\n36 0\n37 0\n38 0\n39 0\n40 0\n41 0\n42 0\n43 0\n44 0\n45 0\n46 0\n47 0\n48 0\n49 0\n50 0\n51 0\n52 0\n53 0\n54 0\n55 0\n56 0\n57 0\n58 0\n59 0\n60 0\n61 0\n62 0\n63 0\n64 0\n65 0\n66 0\n67 0\n68 0\n69 0\n70 0\n71 0\n72 0\n73 0\n74 0\n75 0\n76 0\n77 0\n78 0\n79 0\n80 0\n81 0\n82 0\n83 0\n84 0\n85 0\n86 0\n87 0\n88 0\n89 0\n90 0\n91 0\n92 0\n93 0\n94 0\n95 0\n96 0\n97 0\n98 0\n99 0\n100 0\n101 0\n102 0\n103 0\n104 0\n105 0\n106 0\n107 0\n108 0\n109 0\n110 0\n111 0\n112 0\n113 0\n114 0\n115 0\n116 0\n117 0\n118 0\n119 0\n120 0\n121 0\n122 0\n123 0\n124 0\n125 0\n126 0\n127 0\n128 0\n129 0\n130 0\n131 0\n132 0\n133 0\n134 0\n135 0\n136 0\n137 0\n138 0\n139 0\n140 0\n141 0\n142 0\n143 0\n144 0\n145 0\n146 0\n147 0\n148 0\n149 0\n150 0\n151 0\n152 0\n153 0\n154 0\n155 0\n156 0\n157 0\n158 0\n159 0\n160 0\n161 0\n162 0\n163 0\n164 0\n165 0\n166 0\n167 0\n168 0\n169 0\n170 0\n171 0\n172 0\n173 0\n174 0\n175 0\n176 0\n177 0\n178 0\n179 0\n180 0\n181 0\n182 0\n183 0\n184 0\n185 0\n186 0\n187 0\n188 0\n189 0\n190 0\n191 0\n192 0\n193 0\n194 0\n195 0\n196 0\n197 0\n198 0\n199 0\n200 0\n201 0\n202 0\n203 0\n204 0\n205 0\n206 0\n207 0\n208 0\n209 0\n210 0\n211 0\n212 0\n213 0\n214 0\n215 0\n216 0\n217 0\n218 0\n219 0\n220 0\n221 0\n222 0\n223 0\n224 0\n225 0\n226 0\n227 0\n228 0\n229 0\n230 0\n231 0\n232 0\n233 0\n234 0\n235 0\n236 0\n237 0\n238 0\n239 0\n240 0\n241 0\n242 0\n243 0\n244 0\n245 0\n246 0\n247 0\n248 0\n249 0\n250 0\n251 0\n252 0\n253 0\n254 0\n255 0\n256 0\n257 0\n258 0\n259 0\n260 0\n261 0\n262 0\n263 0\n264 0\n265 0\n266 0\n267 0\n268 0\n269 0\n270 0\n271 0\n272 0\n273 0\n274 0\n275 0\n276 0\n277 0\n278 0\n279 0\n280 0\n281 0\n282 0\n283 0\n284 0\n285 0\n286 0\n287 0\n288 0\n289 0\n290 0\n291 0\n292 0\n293 0\n294 0\n295 0\n296 0\n297 0\n298 0\n299 0\n300 0\n301 0\n302 0\n303 0\n304 0\n305 0\n306 0\n307 0\n308 0\n309 0\n310 0\n311 0\n312 0\n313 0\n314 0\n315 0\n316 0\n317 0\n318 0\n319 0\n320 0\n321 0\n322 0\n323 0\n324 0\n325 0\n326 0\n327 0\n328 0\n329 0\n330 0\n331 0\n332 0\n333 0\n334 0\n335 0\n336 0\n337 0\n338 0\n339 0\n340 0\n341 0\n342 0\n343 0\n344 0\n345 0\n346 0\n347 0\n348 0\n349 0\n350 0\n351 0\n352 0\n353 0\n354 0\n355 0\n356 0\n357 0\n358 0\n359 0\n360 0\n361 0\n362 0\n363 0\n364 0\n365 0\n366 0\n367 0\n368 0\n369 0\n370 0\n371 0\n372 0\n373 0\n374 0\n375 0\n376 0\n377 0\n378 0\n379 0\n380 0\n381 0\n382 0\n383 0\n384 0\n385 0\n386 0\n387 0\n388 0\n389 0\n390 0\n391 0\n392 0\n393 0\n394 0\n395 0\n396 0\n397 0\n398 0\n399 0\n400 0\n401 0\n402 0\n403 0\n404 0\n405 0\n406 0\n407 0\n408 0\n409 0\n410 0\n411 0\n412 0\n413 0\n414 0\n415 0\n416 0\n417 0\n418 0\n419 0\n420 0\n421 0\n422 0\n423 0\n424 0\n425 0\n426 0\n427 0\n428 0\n429 0\n430 0\n431 0\n432 0\n433 0\n434 0\n435 0\n436 0\n437 0\n438 0\n439 0\n440 0\n441 0\n442 0\n443 0\n444 0\n445 0\n446 0\n447 0\n448 0\n449 0\n450 0\n451 0\n452 0\n453 0\n454 0\n455 0\n456 0\n457 0\n458 0\n459 0\n460 0\n461 0\n462 0\n463 0\n464 0\n465 0\n466 0\n467 0\n468 0\n469 0\n470 0\n471 0\n472 0\n473 0\n474 0\n475 0\n476 0\n477 0\n478 0\n479 0\n480 0\n481 0\n482 0\n483 0\n484 0\n485 0\n486 0\n487 0\n488 0\n489 0\n490 0\n491 0\n492 0\n493 0\n494 0\n495 0\n496 0\n497 0\n498 0\n499 0\n500 0\n501 0\n502 0\n503 0\n504 0\n505 0\n506 0\n507 0\n508 0\n509 0\n510 0\n511 0\n512 0\n513"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 7') == '10'"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 5 7''') == '10'\n\"\"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 7\") == \"10\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 7\") == \"10\"\nprint(solution(\"3 5 7\"))\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 7\") == \"10\"\nprint(\"Test PASSED\")\n\"\"\"\n\n\"\"\"\nSolution:\n\nA, B, T = [int(x) for x in stdin.split(' ')]\ntotal = 0\nfor t in range(T+0.5):\n    if t % A == 0:\n        total += B\nprint(total)\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 7') == '10'\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5 7') == '10'\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 7\") == \"10\"\nassert solution(\"2 4 3\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 5 7\") == \"10\"\nassert solution(\"5 5 7\") == \"20\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 500 600\\n') == 'OK'\n\n\"\"\"\n\n\"\"\"\nAnother solution, but slower:\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n500 600') == 'OK'\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 400\\n7\") == \"NG\"\nassert solution(\"20 30\\n7\") == \"OK\"\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n500 600\") == \"OK\"\n\nassert solution(\"7\\n10 100\") == \"NG\"\n\"\"\"\n\nimport math\n\nK, A, B = [int(num) for num in input().strip().split(' ')]\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n500 600') == \"OK\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n500 600\") == \"OK\"\nassert solution(\"7\\n1 2\") == \"NG\"\nassert solution(\"7\\n10 20\") == \"OK\"\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2\\n3 4') == \"NG\"\nassert solution('2 2\\n1 2') == \"OK\"\nassert solution('3 4\\n1 4') == \"OK\"\nassert solution('4 4\\n1 2') == \"OK\"\nassert solution('1 1000000000\\n1 1') == \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 500 600') == 'OK'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\nassert solution(\"1 10 1\") == \"NG\"\nassert solution(\"7 1000 400\") == \"OK\"\nassert solution(\"1 10 10\") == \"OK\"\nassert solution(\"7 10000 1000\") == \"OK\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n7 10') == \"OK\"\nassert solution('4 5\\n7 10') == \"NG\"\nassert solution('4 5\\n8 10') == \"NG\"\n\n\"\"\"\n\nimport sys\n\nA, B, K = map(int, sys.stdin.readline().strip().split())"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\"\n\"\"\"\n\nT, X = input().split()\nT = int(T)\nX = int(X)\n\nprint((T * X) / X)\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(r'8 3') == r'2.6666666667'\n\"\"\"\n\nT, X = input().split()\nT = int(T)\nX = int(X)\n\nprint(\"%.3f\" % (T * X / X))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\"\n\"\"\"\n\nimport math\n\nT, X = map(int, input().split())\n\nprint(\"%.3f\" % (T * X))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 3\\n') == '2.6666666667'\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 3\\n') == '2.6666666667'\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"\n\nT, X = [int(s) for s in input().split()]\n\nprint(T / X)\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3') == '2.6666666667'\n\"\"\"\n\n\"\"\"\nWrite a program that will solve the following problem:\n\nTaro is studying at World B where time passes three times as fast as it does in our world (World A).\nHe has to study for T hours.\nWhile T hours have passed in World B, T hours have passed in World A.\nHow long did Taro study for in World A?\n\n-----Constraints-----\n - T is in the range [1...100].\n - T \\in {1,2,3,...,100}.\n - X is in the range [1...100].\n\n-----Input-----\nThe input consists of three values:\nT X\n\n-----Output-----\nPrint Taro's total study hours in World A.\nThe output will be regarded as correct if its absolute or relative error from the judge's output is at most 10^{-3}.\n\n-----Sample Input-----\n7 10\n\n-----Sample Output-----\n9.0\n\nTaro studies for seven hours in World A.\n\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3\\n') == '2.6666...'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(    '5 5 5'    ) == '0'\nassert solution(    '20 5 5'    ) == '20'\nassert solution(    '15 5 5'    ) == '0'\n\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4 3') == '1'\nassert solution('1 1 1') == '0'\nassert solution('1 1 3') == '0'\nassert solution('0 5 6') == '0'\nassert solution('0 0 5') == '0'\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n\nfrom unittest.mock import patch\nfrom unittest import TestCase, main\nfrom typing import List, Tuple"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 4 3\") == '1'\n\"\"\"\n\na, b, c = map(int, input().split())\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 4 3\") == \"1\"\nassert solution(\"3 5 8\") == \"2\"\nassert solution(\"3 5 5\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"6 4 3\"\n) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n4 5 6') == '1'\nassert solution('1 2\\n3 4') == '1'\nassert solution('1 2 3\\n3 1 2') == '1'\nassert solution('1 2 3 4\\n3 1 2 4') == '2'\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 3 2') == '3'\nassert solution('3\\n3 1 2') == '0'\n\n\"\"\"\nfrom itertools import permutations\nfrom collections import deque"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\nassert solution(\"4\\n1 4 3 2\") == \"0\"\nassert solution(\"3\\n3 2 1\") == \"0\"\nassert solution(\"2\\n2 1\") == \"0\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 2 4\") == \"0\"\n\nfrom operator import itemgetter\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\n\"\"\"\n\nfrom math import factorial\nimport sys\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 3 2') == '3'\nassert solution('4\\n1 3 2 4') == '1'\nassert solution('6\\n1 3 5 6 4 2') == '2'\n\n\"\"\"\n\nimport sys\nfrom itertools import permutations\n\nDEBUG = False\ndata = sys.stdin.read().split()\nn = int(data[0])\nP = list(map(int, data[1].split(' ')))\nQ = list(map(int, data[2].split(' ')))"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 4 2 3\\n3 1 4 2') == '4'\nassert solution('5\\n1 3 6 4 2\\n2 1 4 6 3') == '3'\nassert solution('6\\n1 2 3 4 5 6\\n1 2 3 4 5 6') == '0'\nassert solution('3\\n1 3 2\\n2 1 3') == '2'\nassert solution('4\\n1 3 2 4\\n2 1 3 4') == '1'\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nfrom collections import Counter\nimport sys\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ATCODER') == 'ATC'\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ATCODER\") == 3\nassert solution(\"ATC\") == 1\n\n\"\"\"\nfrom typing import List, Dict\nimport sys\nimport unittest"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ATCODER\") == \"ATC\"\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ATCODER\") == \"ATC\"\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('AAAAAC') == 6\nassert solution('AAC') == 3\nassert solution('CAC') == 3\nassert solution('AC') == 2\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ATCODER\") == 3"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\"\nimport re"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11') == 9\n\"\"\"\n\nn = input()\n\ncount = 0\n\nfor i in range(1, int(n) + 1):\n    if len(str(i)) % 2!= 0:\n        count += 1\n\nprint(count)"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == '9'\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == '9'\nassert solution('6') == '4'\nassert solution('2') == '1'\nassert solution('8') == '1'\nassert solution('4') == '0'\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"11\"\n) == \"9\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11') == '9'\n\"\"\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11') == '9'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11') == '9'\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(11) == 9\nassert solution(13) == 11"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\nassert solution(\"abcdefg\") == \"bcdeaa\"\n\"\"\"\nimport re\nimport sys\n\nassert re.fullmatch(\"[a-zA-Z]{2}\\d*\", \"aa1\") is not None\nassert re.fullmatch(\"[a-zA-Z]{2}\\d*\", \"abcde\") is not None\nassert re.fullmatch(\"[a-zA-Z]{2}\\d*\", \"a3cde\") is None\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('cupofcoffee') == '4'\nassert solution('cupofhottea') == '4'\nassert solution('cupofchocolate') == '5'\nassert solution('cupofgreentea') == '5'\nassert solution('cupofgrasshopper') == '7'\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea', 'cannot change'\nassert solution('qwertyuiop') == 'qwertyuiop', 'cannot change'\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\nassert solution(\"cupofwater\") == \"cupofwater\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\nassert solution(\"c\") == \"t\"\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('cupofcoffee') == 'hottea'\nassert solution('codewars') == 'lars'\nassert solution('ahmed') == 'hmed'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"cupofcoffee\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('cupofcoffee') == 4\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\") == \"7\"\nassert solution(\"7 7\") == \"7 8 9\"\nassert solution(\"7 8\") == \"8 9\"\nassert solution(\"7 10\") == \"8 9\"\n\n\"\"\"\n\nfrom math import inf\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 7') == '5 6 7 8 9'\n\n------------------------------------------------------------\n\nimport math\nimport sys"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 7') == '5 6 7 8 9'"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 7\\n\") == \"5 6 7 8 9\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 7\\n') == '5 6 7 8 9'\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"25\"\n) == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(TESTS[0][0])) == TESTS[0][1]\nassert solution(str(TESTS[1][0])) == TESTS[1][1]\n\"\"\"\n\nTESTS = [\n    (25, 'No'),\n    (30, 'Yes'),\n    (100, 'No'),\n    (-20, 'No'),\n]"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('30') == 'Yes'\nassert solution('25') == 'No'\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20') == 'Yes'\nassert solution('25') == 'Yes'\nassert solution('30') == 'Yes'\nassert solution('35') == 'No'\nassert solution('40') == 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"-15\") == \"Yes\"\nassert solution(\"-16\") == \"No\"\nassert solution(\"-35\") == \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('30') == 'Yes'\nassert solution('30') == 'No'\nassert solution('-40') == 'No'\nassert solution('10') == 'No'\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('25') == 'No'\nassert solution('15') == 'Yes'"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"30\") == \"Yes\"\nassert solution(\"0\") == \"No\"\nassert solution(\"-1\") == \"No\"\nassert solution(\"40\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('25') == 'No'\nassert solution('-25') == 'No'\nassert solution('-3') == 'No'\nassert solution('12') == 'Yes'\nassert solution('30') == 'Yes'\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(25) == 'No'\nassert solution(0) == 'No'\nassert solution(-1) == 'No'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == '1'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 2\\n4 5') == '1'\nassert solution('5 5\\n5 5\\n5 5\\n5 5\\n5 5') == '0'\n\"\"\"\n\nimport math\n\nn, d = [int(x) for x in stdin.readline().split()]\nx = [float(x) for x in stdin.readline().split()]\n\ncount = 0\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        if math.isclose(x[i], x[j]):\n            continue\n        else:\n            if (x[i] - x[j]) % 1 == 0:\n                count += 1\n\nprint(count)"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\"\"\"\n\nimport math\n\nn, d = map(int, stdin.readline().split())\n\npoints = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\nd_sum = sum([(i[0] - j[0]) ** 2 for i in points for j in points if i!= j])\nprint(math.floor(math.sqrt(d_sum)))\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == '1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\"\"\"\nimport math\n\nn, d = map(int, input().split())\nx = [list(map(int, input().split())) for _ in range(n)]\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        r = 0\n        for k in range(d):\n            r += (x[i][k] - x[j][k]) ** 2\n        r = math.sqrt(r)\n        if r.is_integer():\n            count += 1\nprint(count)\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"7843\") == \"Good\"\nassert solution(\"1724\") == \"Good\"\nassert solution(\"2111\") == \"Bad\"\nassert solution(\"1234\") == \"Bad\"\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3211') == 'Good'\nassert solution('3776') == 'Bad'\nassert solution('1111') == 'Bad'\n\nprint('All tests passed.')\n\n-----\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3776') == 'Bad'\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2456') == 'Bad'\nassert solution('1234') == 'Good'\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('1234') == 'Good'\nassert solution('1111') == 'Bad'\nassert solution('1221') == 'Good'\nassert solution('1234') == 'Bad'\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('1234') == 'Good'\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1111') == 'Bad'\nassert solution('1234') == 'Good'\nassert solution('9000') == 'Bad'\nassert solution('5245') == 'Good'\nassert solution('5245') == 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1234\") == \"Bad\"\nassert solution(\"1256\") == \"Bad\"\nassert solution(\"9876\") == \"Bad\"\nassert solution(\"5421\") == \"Good\"\nassert solution(\"2345\") == \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1777') == \"Bad\"\nassert solution('77') == \"Good\"\nassert solution('1924') == \"Bad\"\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3') == '3.5'\n\"\"\"\n\nN = int(input())\n\nv = list(map(int, input().split()))\n\nmax_value = 0\n\nfor i in range(N - 1):\n    value = (v[i] + v[i + 1]) / 2\n    if value > max_value:\n        max_value = value\n\nprint(int(max_value))\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"3.5\"\nprint(solution(\"3 4\"))\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"3.5\"\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"3.5\"\n\"\"\"\n\n\"\"\"\nintuition: \na = (a1, a2)\nb = (b1, b2)\n\nc = (a1 + b1, a2 + b2)\n\na = (a1 + a2) / 2\nb = (b1 + b2) / 2\nc = (a1 + b1 + a2 + b2) / 4\n\nO(N) time, O(1) space\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\"\"\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n3 4') == '3.5'\n\"\"\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n3 4') == '3.5'\n\"\"\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n3 4\\n') == '3.5'\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\nassert solution(\"1\\n1\\n\") == \"1.0\"\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"\n\n\"\"\"\nimport collections"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\\n\") == 14\nassert solution(\"1 1 1\\n3\\n3\\n\") == 0\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\") == 14\n\na, b, c = map(int, stdin.split())\n\nreturn a * b * c\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 2\\n2 5 4\\n3 6\\n') == 14\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\") == \"14\"\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\\n\") == 14\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\\n\") == 14\n\"\"\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABCD') == 'ABC'\nassert solution('ABBC') == 'ABC'\nassert solution('ABCDABCE') == 'ABCDE'\nassert solution('ABCDEFABCD') == 'ABCD'\n\"\"\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\nZABCDBABCQ\") == \"2\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\nassert solution('AABBC') == 0\nassert solution('AABBCAABBC') == 1\nassert solution('AABBCAABBCA') == 2\n\nassert solution('AABBCAABBCAAAAA') == 4\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ZZZABCDBABCQ') == '2'\nassert solution('AAA') == '0'\nassert solution('ABBC') == '0'\nassert solution('BCCA') == '1'\nassert solution('AAABBCCA') == '3'\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABCD\") == \"ABCD\"\nassert solution(\"ABCDBABC\") == \"ABCDBABC\"\nassert solution(\"ABCDBABCQ\") == \"ABCDBABCQ\"\nassert solution(\"ABCDBABCQW\") == \"ABCDBABCQW\"\nassert solution(\"ABCDBABCQWX\") == \"ABCDBABCQWX\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABABABABCA\") == 5\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABBCDBC\") == \"2\"\nassert solution(\"ZABCDBABCQ\") == \"2\"\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ZABCDBABCQ\") == \"2\"\n\"\"\"\n\nimport itertools\n\nnum_lines = int(stdin.readline().rstrip())\nstring = stdin.readline().rstrip()\n\noccurrences = []\n\nfor i in range(num_lines):\n    if string[i:i+3] == 'ABC':\n        occurrences.append(i)\n\nprint(len(occurrences))"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABC') == 'ABCABCABCABCABCABCABCABC'\nassert solution('ABCDAB') == 'ABCDABDABDABDABDABDAB'\nassert solution('ABCDABDACBDABCDAB') == 'ABCDABDACBDABCDABDABCDABDABCDAB'\nassert solution('ABCDABDACBDABCDABDAB') == 'ABCDABDACBDABCDABDABCDABDABDAB'\nassert solution('ABCDABDACBDABCDABDAB') == 'ABCDABDACBDABCDABDABDABDABDAB'\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABCDBABCQ') == 2\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'\nprint('Success')\n'''\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\n\"\"\"\n) == \"2\"\nprint(\"PASSED\")\n\n-----Problem-----\nThere are N people. The name of the i-th person is S_i.\nWe would like to choose three people so that the following conditions are met:\n - The name of every chosen person begins with M, A, R, C or H.\n - There are no multiple people whose names begin with the same letter.\nHow many such ways are there to choose three people, disregarding order?\nNote that the answer may not fit into a 32-bit integer type.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - S_i consists of uppercase English letters.\n - 1 \\leq |S_i| \\leq 10\n - S_i \\neq S_j (i \\neq j)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nIf there are x ways to choose three people so that the given conditions are met, print x.\n\n-----Sample Input-----\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\n\n-----Sample Output-----\n2\n\nWe can choose three people with the following names:\n - MASHIKE, RUMOI, HABORO\n - MASHIKE, RUMOI, HOROKANAI\nThus, we have two ways.\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI''') == '2'\n\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == 2\nassert solution(\"MASHIKE\\nOBIRA\\nHABORO\\nHOROKANAI\") == 2\nassert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == 2\n\n-----Test Case-----\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"5 4\") == \"No\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\") == \"Yes\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1\\n2\\n3\\n1\\n2\\n3\\n\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n0 0 0\\n0 0 0\\n0 0 0') == 'Yes'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3') == 'Yes'\nassert solution('4 2') == 'No'\nassert solution('3 3') == 'Yes'\nassert solution('1 1') == 'No'\n\nsolution = lambda stdin: 'Yes' if sum(map(int, stdin.split())) == N else 'No'\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'No'\nassert solution('1 1') == 'Yes'\nassert solution('2 1') == 'No'\nassert solution('2 2') == 'No'\nassert solution('3 3') == 'Yes'\n\n----------------------------------------\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'No'\nassert solution('4 2') == 'Yes'\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(open('input.txt', 'r').read()) == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"2 3\") == \"No\"\nassert solution(\"100 100\") == \"Yes\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('xopz') == 'No'\nassert solution('mmzu') == 'No'\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('sippuu') == 'Yes'\n\n---\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"sippuu\") == 'Yes'\nassert solution(\"aabbcc\") == 'No'\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('aabb') == 'No'\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('bob') == 'No'\nassert solution('1234') == 'No'\nassert solution('ssss') == 'No'\nassert solution('cocoa') == 'Yes'\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"tmmzuxt\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"aabb\") == \"No\"\nassert solution(\"aabbcc\") == \"No\"\nassert solution(\"aaabbb\") == \"No\"\nassert solution(\"aaabbbb\") == \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('sippuu') == \"Yes\"\nassert solution('sippuuuu') == \"No\"\nassert solution('sipp') == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('codecoffee') == 'No'\nassert solution('coffeeee') == 'No'\nassert solution('coffeefilm') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\\n\") == \"4\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 70\\n7 60\\n1 80\\n4 50\") == \"4\"\nassert solution(\"2 1\\n3 1\") == \"TLE\"\nassert solution(\"2 1\\n3 1\\n1 1\") == \"TLE\"\nassert solution(\"2 1\\n3 1\\n4 1\") == \"TLE\"\nassert solution(\"1 1\\n1 1\") == \"1\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '3 70\\n' +\n    '7 60\\n' +\n    '1 80\\n' +\n    '4 50\\n') == '4'\n\n\"\"\"\n\nimport sys\n\nN, T = map(int, sys.stdin.readline().split())\ncost, time = [0] * N, [0] * N\n\nfor i in range(N):\n    c, t = map(int, sys.stdin.readline().split())\n    cost[i], time[i] = c, t\n\ncost.sort()\ntime.sort()\ncost_time = cost + time\ncost_time.sort()\n\nl, r = 0, N - 1\nans = T\nwhile l < r:\n    t = cost_time[r] + cost_time[l]\n    if t <= T:\n        ans = min(ans, t)\n        l += 1\n    else:\n        r -= 1"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n1 2\\n3 4') == '5'\n\"\"\"\n\nfrom collections import namedtuple\nimport sys\n\nEvent = namedtuple('Event', ['time', 'type'])"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\\n\") == \"4\"\n\"\"\"\n\nimport sys\nfrom queue import PriorityQueue\n\nsys.stdin = open('input.txt', 'r')\n\nN, T = map(int, input().split())\n\nc = PriorityQueue()\nt = PriorityQueue()\n\nfor i in range(N):\n    c.put(int(input().split()[1]))\n    t.put(int(input().split()[1]))\n\nresult = 0\nwhile not c.empty() and not t.empty():\n    if c.get() + t.get() > T:\n        result = T\n        break\n    else:\n        result = c.get() + t.get()\n\nprint(result)"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 70\") == \"4\", \"case 1\"\nassert solution(\"1 80\") == \"TLE\", \"case 2\"\nassert solution(\"1 10\") == \"TLE\", \"case 3\"\nassert solution(\"1 10 100\") == \"1\", \"case 4\"\n\n\"\"\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 50\\n7 60\\n1 80\\n3\") == \"TLE\", 'Expected TLE'\nassert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\", 'Expected 4'\nprint('Passed')\n\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"4 2 9\"\n) == \"8\"\n\n\"\"\"\n\nfrom ast import literal_eval as make_tuple"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 9') == '8'\n\"\"\"\nimport sys\n\nn, a, b = map(int, sys.stdin.readline().split())\nprint(n * a + min(n * b, n * (n + 1) // 2 * a))\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 9') == '8'\n\n-----\n4 2 9\nprint(8)"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 2 9''') == '8'\n\n---\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 2 9''') == '8'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 9') == 8\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('a') == 1\nassert solution('aab') == 2\nassert solution('abc') == 2\nassert solution('abcdef') == 3\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == '1'\n\"\"\"\n\nimport collections\nimport itertools"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"acornistnt\") == 1\n\"\"\"\n\n\"\"\"\nImplementation 1:\nThe easiest way to solve this problem is to use a HashMap. We can use the HashMap's key (character) and value (number of occurances of that character). \nSince HashMap's key and value are the same, we can also use HashMap's value to keep track of the number of occurances of that character.\n\"\"\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\nacornistnt\\npeanutbomb\\nconstraint') == '1'\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == '1'\n\n-----Test 1-----\n\n-----Test 2-----\n\"\"\"\nimport unittest"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == '1'\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\\n\") == \"1\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\nIf you want to test the code with different inputs, \nyou can change input function name.\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\\n\") == \"1\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\"\"\"\n\n\nimport sys\nimport math"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11212312341234512345612345671234567812345678912345678910') == [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"1\"\n\"\"\""
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\n\"\"\"\n\nimport os\nimport sys\n\nsys.path.append(os.path.join(os.path.dirname(__file__), \"..\"))\nfrom utils.input_utils import (\n    get_input_int_line_by_line,\n    get_input_line_by_line,\n)\nfrom utils.test_utils import (\n    get_output_lines_for_input_lines,\n    assert_output_for_input_lines,\n)\n\ninput_lines = get_input_lines_for_file(\"A-06.txt\")\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"112233445566778899010\") == \"7\"\nassert solution(\"1111222233445566778899010\") == \"7\"\nassert solution
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123412341234123412345\") == \"4\"\nassert solution(\"112345123451234512345\") == \"0\"\n\"\"\""
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"112123123412345$\\dots
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('112123123412345$\\dots$') == '1'\nassert solution('11223344556677$\\dots$') == '7'\nassert solution('1123445566778899$\\dots$') == '8'\nassert solution('112345667788991123344$\\dots$') == '0'\n\n-----Debug-----"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\nassert solution(\"12121212121212$\\dots$\") == \"12121212121212\"\n\"\"\""
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 2\\n3 4\") == \"2\\n1 1 1 2\"\nassert solution(\"3 2\\n1 2\\n1 3\") == \"1\\n1 1 2\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\\n1 2 1 1 2\"\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\") == \"1\\n1 1 1\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\\n1 1 2 3 2 3 1 3 1\""
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 4\\n4 3\\n3 5\\n3 6\") == \"2\\n1 2 1 1 2\"\n\"\"\""
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\") == \"1 2\"\nassert solution(\"4 2\\n1 4\\n2 3\\n3 4\\n3 5\\n4 2\\n1 2\") == \"2 2 1 2 1 1\"\nassert solution(\"1 5\\n5 1\") == \"1 1\"\nassert solution(\"1 5\\n5 1\\n2 4\\n4 2\\n3 5\\n5 3\") == \"1 1\"\nassert solution(\"1 5\\n5 1\\n2 4\\n4 2\\n3 5\\n5 3\\n3 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\\n2 4\\n4 2\\n3 5\\n5 3\") == \"1 1\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n3 4\\n5 6\\n7 8\") == \"1 2 1 2\\n2 3 2 3 1 1 2 1 2 1 1 1 1 1 2\\n1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 4\\n2 3\\n1 2\\n1 3\\n\") == \"1 2 1 1 2\"\nassert solution(\"6 2\\n4 3\\n1 2\\n3 5\\n3 6\\n5 2\\n\") == \"1 2 1 1 2\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"1 1 2 3 2 3 1 3 1\"\n\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\") == \"1 2 1 1 2\"\nassert solution(\"6 2\\n4 3\\n5 6\\n3 5\") == \"1 1 2 3 2 3 1 3 1\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n3 1\\n1 4\\n1 2\") == \"1\\n1 2 1 1 2\"\n\"\"\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2') == '2'\nassert solution('4 2\\n3 1\\n1 4\\n1 2\\n') == '1'\nassert solution('10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9') == '3'\n\"\"\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\\n1 2 1 1 2\"\n\"\"\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\\n1 2 1 1 2\"\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\") == \"1\\n1 1 1\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\\n1 1 2 3 2 3 1 3 1\"\nprint('test passed')\n\n\"\"\""
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == (0, 0)\nassert solution('1 2 4 4') == (2, 4)\n\nassert solution('4 3 7 1 4 3 3') == (3, 8)\nassert solution('7 1 4 3 3 3') == (3, 6)\n\nassert solution('9 1 1 8 8 8 4 4 4 4') == (3, 8)\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\ncoordinates = [int(x) for x in sys.stdin.readline().split()]\n\nfours = 0\ncount = 0\ncurrent = coordinates[0]\nfor next_coordinate in coordinates[1:]:\n    if next_coordinate - current == 1:\n        count += 1\n    else:\n        count = 1\n\n    if count == 4:\n        fours += 1\n        count = 0\n\n    current = next_coordinate\n\nprint(count, fours)\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 4 4\") == '2 4'\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == '3 8'\nassert solution(\"7\\n4 3 7 1 4 3 3\") == '3 6'\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 4 4') == '2 4'\nassert solution('1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7 4 3 1 4 3 3') == '3 6'\n\nprint(solution(stdin))\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n\"\"\""
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3') == '3 6'\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n\"\"\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n5\n3 5\n1 4\n2 4\n1 5\n2 3\n''') == '3 2 4 1 5'\n\nassert solution('''\n3\n2 3\n3 1\n1 2\n''') == '3 1 2'\n\nprint('Success')\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3') == '3 2 4 1 5'\nassert solution('3\\n2 3\\n3 1\\n1 2') == '3 1 2'\nassert solution('3\\n1 2\\n3 1') == '3 1 2'\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 2\\n1 2\\n1 3\\n2 3\") == \"3 1 2\"\n\"\"\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n3 1\\n1 2\") == \"3 1 2\"\n\nassert solution(\"2 3\\n3 1\\n1 2\") == \"3 1 2\"\n\nassert solution(\"1 1\\n1 1\") == \"1 1\"\nassert solution(\"1 1\\n1 2\") == \"1 2\"\nassert solution(\"1 2\\n2 1\") == \"1 2\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\nassert solution(\"3\\n2 3\\n3 1\\n1 2\") == \"3 1 2\"\n\"\"\""
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data) == test_result\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 1\\n2 1') == '1 2 3 4'\nassert solution('4\\n1 3\\n2 3\\n3 1\\n1 2') == '1 2 3 4'\n\n-----Problem-----\nhttps://open.kattis.com/problems/xmastree\n\"\"\""
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n') == '3 2 4 1 5'\n\"\"\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n\"\"\""
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n1 10 17 12 15 2\\n') == 3\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\\n') == 10\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '2'\nassert solution('1 10 17 12 15 2') == '3'\nassert solution('1 1000 10000 10 100 1000000000') == '1'\nassert solution('1 1000 10000 10 100 1000000000') == '1'\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337') == 10\nassert solution('5\\n1337 1337 1337 1337 1337 1337') == 5\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\n\"\"\"\n\nimport sys\nimport math\n\nstdin = sys.stdin"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n1 10 17 12 15 2') == '3'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\nassert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n1 10 17 12 15 2') == 3\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == 10\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n6\n1 10 17 12 15 2\n''') == '3'\n\nassert solution('''\n10\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\n''') == '10'\n\nassert solution('''\n6\n1 1000 10000 10 100 1000000000\n''') == '1'\n\n\n\n\"\"\"\n\nn = int(input())\n\narr = list(map(int, input().split()))\n\narr.sort()\n\ntot = sum(arr)\n\ntot //= 5\n\nresult = 0\n\nwhile tot:\n    for i in range(n - 1, -1, -1):\n        if tot > arr[i]:\n            result += 1\n            tot -= arr[i]\n            break\n\nprint(result)\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n1 1000 10000 10 100 1000000000\\n') == '1'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\\n') == '10'\nassert solution('6\\n1 1000 10000 10 100 1000000000\\n') == '1'\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"10\\n
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('15 5 3 2') == '4'\nassert solution('15 5 4 3') == '-1'\nassert solution('15 5 2 1') == '5'\nassert solution('15 5 5 1') == '2'\nassert solution('16 7 5 2') == '0'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\nassert solution(\"8 10 7 3\\n10 10 10 1\\n8 8 8 3\\n6 10 10 1\\n10 10 10 1\\n5 10 10 1\\n9 10 10 1\\n10 10 10 1\\n9 10 10 1\") == \"2\\n4\\n1\\n3\\n0\\n3\"\nassert solution(\"6 10 10 3\\n9 10 10 1\\n10 10 10 1\\n9 10 10 1\\n8 10 10 1\\n7 10 10 1\\n8 10 10 1\\n9 10 10 1\\n6 10 10 1\\n10 10 10 1\\n8 10 10 1\\n10 10 10 1\") == \"1\\n2\\n2\\n2\\n2\\n1\\n1\\n0\\n0\"\nassert solution(\"5 10 10 3\\n6 10 10 1\\n10 10 10 1\\n6 10 10 1\\n9 10 10 1\\n8 10 10 1\\n9 10 10 1\\n10 10 10 1\\n5 10 10 1\\n6 10 10 1\\n8 10 10 1\\n10 10 10 1\") == \"0\\n1\\n0\\n0\\n1\\n2\\n0\\n0\\n1\"\nassert solution(\"7 10 10 3\\n7 10 10 1\\n7 10 10 1\\n6 10 10 1\\n9 10 10 1\\n10 10 10 1\\n8 10 10 1\\n8 10 10 1\\n9 10 10 1\\n7 10 10 1\\n7 10 10 1\\n10 10 10 1\") == \"0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\""
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n10 2 2\\n10 2 1') == \"4\"\nassert solution('3\\n10 3 2\\n10 3 1') == \"3\"\nassert solution('3\\n10 3 2\\n10 3 2') == \"3\"\nassert solution('1\\n10 3 2\\n10 3 2') == \"3\"\nassert solution('1\\n10 3 2\\n10 3 3') == \"1\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12 5 3 2\\n12 5 4 3\\n12 5 2 1\\n12 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n\"\"\"\n\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\nQ = int(INPUT_LINES[0])\n\nfor i in range(1, Q+1):\n    k, n, a, b = [int(x) for x in INPUT_LINES[i].split()]\n    if n > a + b:\n        print(-1)\n    elif n == a + b:\n        print(0)\n    else:\n        print(n - (a + b))"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4 -1\\n5\\n2\\n0\\n1'\nassert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4 -1\\n5\\n2\\n0\\n1'\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\\n\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2 1\") == \"4\"\nassert solution(\"5 3 2 1\") == \"4\"\nassert solution(\"5 3 2 1\") == \"4\"\nassert solution(\"5 3 2 1\") == \"4\"\nassert solution(\"5 3 2 1\") == \"4\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4 -1\\n5 2\\n2 0\\n0 1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == '4\\n-1\\n5\\n2\\n0\\n1'\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nlines = [line.rstrip('\\n') for line in open(sys.argv[1])]\n\nlines = list(map(lambda x: tuple(map(int, x.split(' '))), lines))\n\nfor k, n, a, b in lines:\n    if a > b:\n        print(-1)\n    elif a == b:\n        print(n)\n    else:\n        print(n - (n // (a - b)) * (a - b))\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ac?b?c') == 24\nassert solution('a??c') == 2835\nassert solution('a??a') == 1\nassert solution('a???c') == 46\nassert solution('ac??b') == 7\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"???????\") == 2835\nassert solution(\"ac???c\") == 46\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ac?b?c\") == 24\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ac?b?c') == 24\nassert solution('??a??b??c') == 2835\nassert solution('a??b??c') == 46\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ac?b?c') == 24\nassert solution('a??b') == 2835\nassert solution('??abc??') == 4862\nassert solution('???c') == 46\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"????????\") == 2835\nassert solution(\"cccbbbaaa\") == 0\nassert solution(\"a???c\") == 46"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\n\"\"\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"????????\") == 2835\nassert solution(\"cccbbbaaa\") == 0\n\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\nprint(\"Hooray!\")"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"???????\") == \"2835\"\nassert solution(\"a???c\") == \"46\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input) == expected_result\n\n\"\"\""
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 3 3 7\\n2 3 5\") == \"5\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\n\n\"\"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 2\n1 3 3\n2 3 5\n2 1 1''') == \"5\"\n\nassert solution('''4 0\n1 3 3 7\n''') == \"16\"\n\n\n\n-----Problem-----\n\nhttps://codeforces.com/contest/1521/problem/E\n\n-----Solution-----\n\n\"\"\"\n\nimport sys\nimport heapq"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 0\\n1 2 3 4 5\") == '16'\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == '18'\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 3 3 7\\n1 2 8') == '16'\nassert solution('5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15') == '18'\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 2\n1 3 3\n2 3 5\n2 1 1''') == '5'\nassert solution('''4 0\n1 3 3 7\n''') == '16'\n\"\"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 0\\n1 3 3 7') == '16'\nassert solution('5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15') == '18'\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 2 3 7\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\\n') == '18'\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_0) == test_output_0\n\nassert solution(test_input_1) == test_output_1\n\nassert solution(test_input_2) == test_output_2\n\nassert solution(test_input_3) == test_output_3\n\nprint(solution(input()))\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '-1'\nassert solution('0 0 0 0') == '-1'\nassert solution('0 0 0 1') == '1'\nassert solution('1 1 1 1') == '4'\nassert solution('0 2 1 3') == '3'\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"-1\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('a\\n') == ''\nassert solution('a\\nb') == ''\nassert solution('a\\n0\\n') == '-1'\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == \"-1\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == '14'\nassert solution(\"10 1 1\\n0 9\\n0 5\") == '45'\nassert solution(\"10 1 1\\n0 9\\n1 5\") == '-1'\n\n\"\"\"\n\n\nfrom itertools import chain, combinations\nfrom functools import lru_cache\nfrom typing import List\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 1 1\\n0 9\\n0 5\") == '-1'\nassert solution(\"10 1 1\\n0 9\\n1 5\") == '45'\n\n\"\"\"\nfrom itertools import product\nfrom typing import List, Dict\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"\n\"\"\"\n\na, n, m = map(int, stdin.readline().split())\n\nl = []\np = []\n\nfor _ in range(n):\n    x, y = map(int, stdin.readline().split())\n    l.append(x)\n    p.append(y)\n\nu = []\nfor _ in range(m):\n    x, y = map(int, stdin.readline().split())\n    u.append((x, y))\n\nu = sorted(u, key=lambda x: x[0])\n\nl = sorted(l)\np = sorted(p)\n\nfat = 0\ni = 0\n\nwhile i < len(l):\n    if i < len(u) and l[i] < u[i][0]:\n        fat += u[i][1]\n        i += 1\n    else:\n        fat += p[i]\n        i += 1"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\n\n\"\"\"\n\nimport itertools\nimport functools\nimport operator\nimport collections"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 7 5\\n\") == \"Yes\"\nassert solution(\"5 7 6\\n\") == \"No\"\nassert solution(\"3 3 3\\n\") == \"No\"\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 7 5') == 'Yes'\nassert solution('5 7 6') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 7 5') == 'Yes'\nassert solution('3 7 3') == 'No'"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 5\\n') == 'Yes'\nassert solution('1 1 1\\n') == 'No'\nassert solution('1 2 3\\n') == 'No'\nassert solution('2 1 3\\n') == 'No'\nassert solution('3 2 3\\n') == 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 7 5') == 'Yes'\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 7 5') == 'Yes'\nassert solution('1 1 1') == 'No'\n\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 7 5') == 'Yes'\nassert solution('1 7 5') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7 5') == \"Yes\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 1\") == \"Yes\"\nassert solution(\"4 1 2\") == \"No\"\nassert solution(\"4 1 3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 12 1000 2000\") == \"1\"\n\"\"\"\n\nn = int(input())\nt, a = map(int, input().split())\nh = list(map(int, input().split()))"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\\n\") == '1'\n\n----\n\n// C++\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n12 5\\n1000 2000') == '1'\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n12 5\\n1000 2000\\n') == '1'\n\n-------TESTING-------\nimport unittest\nfrom unittest.mock import patch\nfrom io import StringIO\nimport sys\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        with patch('sys.stdin', StringIO('2\\n12 5\\n1000 2000\\n')):\n            capturedOutput = StringIO()\n            sys.stdout = capturedOutput\n            solution()\n            sys.stdout = sys.__stdout__\n            self.assertEqual(capturedOutput.getvalue(), '1\\n')\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 12 1000 2000') == '1'\nassert solution('1 12 1000 2000') == '1'\nassert solution('1 10 1000 2000') == '0'\nassert solution('1 1 1000 2000') == '1'\nassert solution('2 0 1000 2000') == '1'\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n12 5\\n1000 2000') == '1'\n\n\"\"\"\n\n\nimport sys\nimport math"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n12 5\\n1000 2000') == '1'\n\nassert solution('3\\n12 5\\n1000 2000\\n1000 2000') == '1'\n\nassert solution('3\\n12 5\\n1000 2000\\n1000 2000\\n1000 2000') == '0'\n\nassert solution('3\\n12 5\\n1000 2000\\n1000 2000\\n1000 2000\\n1000 2000') == '1'\n\nassert solution('3\\n12 5\\n1000 2000\\n1000 2000\\n1000 2000\\n1000 2000\\n1000 2000') == '0'"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 12 5 1000 2000\") == \"1\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\n12 5\n1000 2000''') == '1'\nassert solution('''5\n42 -40\n-20 30 60 70\n-25 -10 12 -4\n-21 1 23 56\n-2 34 -33 0''') == '3'\nassert solution('''3\n25 -1\n-30 5 10\n-1 50 2\n''') == '2'\n\nSample Input:\n5\n40 -20\n10 40 60 80 100\n50 -40 -30 0 10\n-1 -50 60 -20 -10\n20 30 -50 -10 -30\n-40 -60 -50 0 30\n\nSample Output:\n0\n1\n2\n3\n4\n\"\"\"\n\nimport sys\n\nfor _ in range(int(sys.stdin.readline())):\n    N = int(sys.stdin.readline())\n    A, H = list(map(int, sys.stdin.readline().split()))\n    for _ in range(N):\n        H.append(int(sys.stdin.readline()))\n    H.sort()\n    i = 0\n    while i + 1 < len(H) and A > H[i] + 0.006 * (H[i + 1] - H[i]):\n        i += 1\n    print(i)\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n\") == \"1\"\n\"\"\"\nimport math"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 4\") == \"1\"\nassert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"4 3\") == \"1\"\nassert solution(\"6 6\") == \"0\"\nassert solution(\"0 1\") == \"1\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n\") == \"1\"\nassert solution(\"3 2\\n\") == \"0\"\nassert solution(\"6 6\\n\") == \"0\"\nassert solution(\"6 7\\n\") == \"2\"\nassert solution(\"6 8\\n\") == \"10\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('1 2') == '1'\nassert solution('1 3') == '1'\nassert solution('1 4') == '0'\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n\") == \"1\"\nassert solution(\"2 1\\n\") == \"1\"\nassert solution(\"4 1\\n\") == \"1\"\n\"\"\"\n\n\"\"\"\nSample Input:\n3 1\n\nSample Output:\n1\n\"\"\""
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"1\"\n\n---"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('N M') == 'N M'\n\"\"\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ACACTACG') == 2\n\"\"\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ACACTACG\") == 2\n\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('ACACTACG') == 'ACACTACG'\nassert solution('AAACTTACG') == 'ACTAC'\n\"\"\"\n\n\n\"\"\"\nRead 2 strings s and t of length N. For each i (1 \\leq i \\leq N), we want to check whether string t is a rotated version of string s.\nString t is a rotated version of string s if t can be obtained by rotating string s by exactly one position.\n\n-----Input-----\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N denoting the length of each string.\nThe second line contains a single string s of length N consisting of characters A, C, G and T.\nThe third line contains a single string t of length N consisting of characters A, C, G and T.\n\n-----Output-----\nPrint \"YES\" if string t is a rotated version of string s. Otherwise, print \"NO\". Do not print the quotes.\n\n-----Constraints-----\n - 1 \\leq T \\leq 10^5\n - 1 \\leq N \\leq 10^5\n - Each string consists only of the characters A, C, G and T.\n\n-----Sample Input-----\n3\n2\nCAG\nAGC\n3\nAAG\nGGG\nCGG\n\n-----Sample Output-----\nYES\nNO\nYES"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ACACTACG\") == \"2\\n0\\n3\"\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"ATCODER\") == \"5\"\nassert solution(\"GATATATATATATATATATA\") == \"11\"\n\nprint(solution(\"ACACTACG\"))\nprint(solution(\"ATCODER\"))\nprint(solution(\"GATATATATATATATATATA\"))\n\"\"\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"CATGTAATGACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGT"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ACACTACG\", 3, 7) == 2\nassert solution(\"ACACTACG\", 2, 3) == 0\nassert solution(\"ACACTACG\", 1, 8) == 3\nassert solution(\"CCACTACG\", 3, 7) == 0\nassert solution(\"CCACTACG\", 2, 3) == 0\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ACACTACG') == 2\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"ACTACG\") == \"1\"\nassert solution(\"AAACCC\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ACACTACG', 3, 7) == 2\nassert solution('ACACTACG', 2, 3) == 0\nassert solution('ACACTACG', 1, 8) == 3\n\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"5 3\\n50 100 80 120 80\\n\"\n) == \"210\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 3\n50 100 80 120 80''') == 210\n\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n5 3\n50 100 80 120 80\n\"\"\"\n) == \"210\"\n\nassert solution(\n\"\"\"\n10 5\n1 100 5 4 3 5 2 4 1 100 10\n\"\"\"\n) == \"172\"\n\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == 210\n\"\"\"\n\n\nfrom typing import List\nimport sys\n\n\nclass Solution:\n    def main(self):\n        pass\n\n    def solution(self, stdin: str) -> int:\n        return self.solution_bruteforce(stdin)\n\n    def solution_bruteforce(self, stdin: str) -> int:\n        \"\"\"\n        Time Complexity: O(N^3)\n        Space Complexity: O(1)\n        \"\"\"\n        n, k = list(map(int, stdin.split()))\n        prices = list(map(int, stdin.split()))\n        min_price = sys.maxsize\n\n        for i in range(n - k + 1):\n            cur_price = 0\n            for j in range(i, i + k):\n                cur_price += prices[j]\n            min_price = min(cur_price, min_price)\n\n        return min_price\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\nprint('Passed')\n\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == 210\n\n\"\"\"\n\n\nfrom fractions import Fraction\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 3\n50 100 80 120 80''') == '210'\n\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == \"210\"\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str_io.StringIO('1 3 4\\n')) == '4'\n\n-------\nclass Test:\n    def __init__(self, x):\n        self.x = x\n    def __lt__(self, other):\n        return self.x > other.x\n\nassert min(Test(1), Test(3), Test(4)) == Test(1)\n-------\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3 4\") == '4'\n\"\"\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nprint(\"Passed\")"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 4\") == 4\n\n------\nimport sys\nfrom typing import List\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\n    def sum_flight_times(self, P: int, Q: int, R: int) -> int:\n        pass"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"4 2 3\") == \"9\"\nassert solution(\"3 1 5\") == \"8\"\nassert solution(\"100 -100 200 -300\") == \"200\"\nassert solution(\"1 100 200 300\") == \"200\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\") == \"0\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n') == '0'\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\") == \"0\"\n\n---------------------\n\n---SOLUTION---\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"3 5\"\n) == '0'\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\") == \"0\"\nprint(\"Test PASSED\")\n\"\"\"\n\n\"\"\"\n4. Write a program to test whether a given number is even or odd.\n\n-----Solution-----\nWrite 5 lines of code to test the correctness of solution:\nX is a non-negative integer. If X is even, print 0; if X is odd, print 1.\n\n-----Constraints-----\n - 0 \\leq X \\leq 9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nX\n\n-----Output-----\nPrint 1 if X is odd, or 0 if X is even.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n1\n\n2 is odd, so we should print 1."
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5') == '0'\nassert solution('5 3') == '10'\n\"\"\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5) == '10'\nprint(solution(5))\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\") == \"0\"\n'''\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5') == '0'\n\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5') == '0'\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 4') == '1'\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4\") == \"1\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4\\n\") == \"1\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 4') == '1'\n\"\"\"\nimport sys"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 4') == '1'\nprint('Test passed')\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 4\") == \"1\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 4') == '1'\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 4') == '1'\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 4\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 7 9\") == \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('10 10 10') == 'bust'\nassert solution('10 10 12') == 'win'\nassert solution('10 10 11') == 'bust'\n\"\"\"\n\nimport sys\n\na = sys.stdin.readline().split()\na = [int(i) for i in a]\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\"\"\"\nimport sys\n\na, b, c = [int(x) for x in sys.stdin.readline().strip().split()]\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 7 9') == 'win'\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 7 9\") == \"win\"\nassert solution(\"5 7 9\") == \"win\"\n\nassert solution(\"5 7 9\") == \"win\"\nassert solution(\"5 7 9\") == \"win\"\n\nassert solution(\"5 7 9\") == \"win\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 6\") == \"win\"\nassert solution(\"3 5 9\") == \"bust\"\n\"\"\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('3 6 6') == 'bust'\nassert solution('8 8 8') == 'bust'\nassert solution('11 12 21') == 'win'\nassert solution('7 7 7') == 'win'\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('5 6 7') == 'bust'\n\"\"\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 7 9') == 'win'\n\"\"\"\n\n\"\"\"\nGiven a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.\n\nExamples:\n\ns = \"leetcode\"\nreturn 0.\n\ns = \"loveleetcode\",\nreturn 2.\n\"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == 6\n\"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"1\") == \"2\"\nassert solution(\"5\") == \"10\"\nassert solution(\"6\") == \"12\"\nassert solution(\"20\") == \"25\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\n\nstdin = \"3\"\nprint(solution(stdin))\n\nassert solution(stdin) == \"6\"\nassert solution(stdin)!= \"5\"\n\nstdin = \"11\"\nprint(solution(stdin))\n\nassert solution(stdin) == \"12\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '6'\n\"\"\"\n\nimport sys\nfrom math import gcd"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n') == '6'\nassert solution('5\\n') == '10'\n\"\"\""
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '6'\n\"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == 6\nassert solution(\"4\") == 10\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == 6\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == 1\nassert solution(\"3\") == 3\nassert solution(\"10\") == 10\nassert solution(\"10^9\") == 10 ** 9\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"6 2\") == \"2\"\nassert solution(\"10 3\") == \"3\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 10\") == \"1\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2') == 2\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 2\\n') == 2\n\"\"\"\nimport math"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n3 2\\n1 3\\n2 3\\n1 3') == '2'\n\n\"\"\"\nfrom typing import List\nfrom collections import defaultdict\n\nfrom common import app, IntCodeProcess\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(solution(input()))\n\n-----Solution-----\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 2') == '2'\nprint('Test PASSED')"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\") == \"2\"\nassert solution(\"20 2\") == \"3\"\nassert solution(\"30 2\") == \"3\"\nassert solution(\"50 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == 2\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 2\\n') == '2'\n\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2\") == \"2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('16') == 'pon'\nassert solution('12') == 'hon'\nassert solution('99') == 'bon'\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('16') == \"pon\"\nassert solution('13') == \"hon\"\nassert solution('34') == \"bon\"\n\"\"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\"\n\nfrom utils.test import Test"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('15') == 'hon'\nassert solution('9') == 'hon'\nassert solution('10') == 'pon'\nassert solution('1567') == 'bon'\n\"\"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('16') == 'pon'\nassert solution('999') == 'hon'\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"76\") == \"hon\"\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"5\") == \"bon\"\nassert solution(\"99\") == \"hon\"\nassert solution(\"0\") == \"pon\"\nassert solution(\"100\") == \"hon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"16\") == \"pon\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3\n3 1 2\n\"\"\") == 11\nassert solution(\"\"\"4\n0 1 2 3\n\"\"\") == 15\nassert solution(\"\"\"4\n1 1 1 1\n\"\"\") == 1\nassert solution(\"\"\"5\n1 1 1 1 1\n\"\"\") == 0\nassert solution(\"\"\"5\n1 2 3 4 5\n\"\"\") == 12\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 2') == '6'\nassert solution('3 1 2') == '6'\nassert solution('3 2 1') == '6'\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 2') == '11'\n\n\"\"\"\nimport math\n\nN = int(stdin.readline())\n\nd = []\nfor i in range(N):\n    d.append(int(stdin.readline()))\n\nres = 0\nfor i in range(N - 1):\n    for j in range(i + 1, N):\n        res += (d[i] * d[j])\n\nprint(res)\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n3 1 2') == 11\n\"\"\"\n\n\nfrom itertools import combinations"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2\\n') == '11'\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\\n\") == 11\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 4\") == 6\n\"\"\"\n\nn = int(input())\nd = [int(i) for i in input().split()]\ntotal = 0\nfor i in range(1, n):\n    for j in range(0, i):\n        total += d[i] * d[j]\nprint(total)\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('10') == '55'\nassert solution('100') == '5555'\nassert solution('100 100') == '55555'\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1 3') == '6'\n\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('1\\n2') == 1\nassert solution('2\\n1 2') == 2\nassert solution('3\\n1 2 3') == 6\nassert solution('4\\n1 2 3 4') == 10\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1\\n3\\n3\") == \"3\\n2\\n4\"\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\\n\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1\\n4\\n3\\n') == '4\\n3\\n4'\nassert solution('4\\n1\\n4\\n3\\n') == '4\\n3\\n4'\nassert solution('3\\n1\\n4\\n3') == '4\\n3\\n4'\nassert solution('3\\n4\\n1\\n3\\n') == '4\\n3\\n4'\nassert solution('3\\n4\\n3\\n1\\n') == '4\\n3\\n4'\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n4\\n3') == '4\\n3\\n4'"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n4\\n3\\n') == '4\\n3\\n4'\nassert solution('2\\n4\\n3\\n') == '4\\n4\\n4'\nassert solution('3\\n4\\n3\\n') == '4\\n4\\n4'"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"\nassert solution(\"3\\n2\\n4\\n3\") == \"4\\n3\\n4\"\nassert solution(\"1\\n4\\n3\") == \"4\\n3\\n4\"\nassert solution(\"3\\n1\\n4\\n1\") == \"4\\n3\\n4\"\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1\\n4\\n3') == '4\\n3\\n4'\nassert solution('1\\n4\\n3') == '4\\n3\\n4'\n\"\"\"\nimport sys"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == '4\\n3\\n4'\n\"\"\"\n\n\"\"\"\n3\n1\n4\n3\n\n4\n3\n4\n\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1\\n2\\n3\\n4\\n\") == \"3\\n2\\n4\\n4\\n4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n\") == \"9\"\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3') == '9'\n\"\"\"\nimport sys\nimport numpy as np\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n') == '9'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3') == '9'\n\"\"\"\n\na, b = [int(x) for x in stdin.split()]\nprint(a*b*(b-1)//2)\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == 9\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3') == '9'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.read()\nline = list(map(int, input.split('\\n')))\nA, B = line"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == 2\nassert solution(\"3 5\") == 3\nassert solution(\"3 3\") == 2\nassert solution(\"4 5\") == 4\nassert solution(\"2 10\") == 3"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n\") == \"9\"\n\n-------"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"-10 10 20 50\") == 40\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n-30 -10 10 20 50') == '40'\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 2 1 2 1\") == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"5 3\\n-30 -10 10 20 50\"\n) == \"40\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n-30 -10 10 20 50') == '40'\n\"\"\"\n\n\n\"\"\"\nMemoization solution.\n\"\"\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n-1 0 1\") == \"2\"\nassert solution(\"4 1\\n1 2 3 4\") == \"0\"\nassert solution(\"5 3\\n0 10 20 30 40\") == \"10\"\n\"\"\""
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\"\n\nn, k = input().split()\nn = int(n)\nk = int(k)\ncandles = [int(x) for x in input().split()]\n\ncandles = sorted(candles)\n\ntime_taken = 0\nfor i in range(n - 1):\n    time_taken += abs(candles[i + 1] - candles[i])\n\ntime_taken += k\n\nprint(time_taken)\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\"\n\nN, K = map(int, input().split())\nL = list(map(int, input().split()))\n\nans = 0\n\nwhile K:\n    ans += 1\n    toMove = 0\n    for i in range(1, N):\n        if L[i] < L[i - 1] and L[i] >= L[i - 1 - K]:\n            toMove = min(toMove, L[i - 1] - L[i])\n    if toMove == 0:\n        break\n    for i in range(1, N):\n        if L[i - 1] + toMove < L[i]:\n            L[i] = L[i - 1] + toMove\n    K -= toMove\n\nprint(ans)\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n-30 -10 10 20 50') == '40'\n\"\"\""
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 13') == '2'\nprint('OK!')\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 15') == '2'\nassert solution('3 3') == '0'\nassert solution('1 1') == '1'\nassert solution('10 15 20') == '2'\nassert solution('10 15 20 30') == '2'\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3, 2) == 2\n\"\"\"\n\na, b = map(int, stdin.readline().split())\nprint(int((a * b) / 2))\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 13') == '2'\n\"\"\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 15\") == \"2\"\n\n-----\n\n-----\n\n-----\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----\n\"\"\"\n\n\"\"\"\n\n-----"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n2 4') == '1'\nassert solution('8 13\\n8 13') == '0'\nassert solution('1 10\\n10 1') == '0'\nassert solution('5 10\\n10 5') == '0'\nassert solution('10 10\\n10 10') == '0'\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 13\") == \"2\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 13\") == \"2\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 13\") == \"2\"\nassert solution(\"8 12\") == \"1\"\nassert solution(\"8 11\") == \"0\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 1\") == \"1\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 4\\n') == '3'\nassert solution('100 30\\n') == '1'\nassert solution('1 2\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 4') == '3'"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 4') == 3\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''10 4''') == '3'\nprint(\"Tests passed\")\n\n'''\nTEST 1\nInput:\n10 4\nOutput:\n3\n\nTEST 2\nInput:\n1 10\nOutput:\n10\n\nTEST 3\nInput:\n1 1\nOutput:\n0\n'''\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 4') == 3\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4\") == \"3\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 4\") == 3\nprint(\"Passed!\")\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4\") == 3\n\"\"\"\n\nH, A = map(int, input().split())\n\ncount = 0\nwhile H > 0:\n    H -= A\n    count += 1\n    if H <= 0:\n        break\n\nprint(count)\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 4') == '3'\nassert solution('10 3') == '1'\nassert solution('10 2') == '0'\nassert solution('10 1') == '-1'\nassert solution('9 5') == '-1'\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''0 75 25 100''') == '50'\nassert solution('''0 75 25 100''') == '50'\nassert solution('''0 75 25 100''') == '50'\nassert solution('''0 75 25 100''') == '50'\nassert solution('''0 75 25 100''') == '50'\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 75 25 100') == '50'\n\"\"\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 75 25 100') == '50'\nassert solution('2 0 2 1') == '2'\nassert solution('100 20 0 0') == '100'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 75 25 100') == '50'\n\"\"\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"0 25 75 100\") == \"50\"\n\"\"\"\nfrom typing import Dict"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"\n\nimport ast"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 75 25 100\") == 50\n\"\"\"\n\na, b, c, d = (int(i) for i in input().split())\n\nstart = min(a, b)\nend = max(a, b)\n\nc = c - start\nd = d - start\n\nprint(end - start + c + d)\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\n\"\"\"\nimport sys\nfrom collections import defaultdict\n\nfor line in sys.stdin:\n    a, b, c, d = [int(x) for x in line.split(' ')]\n    print(a + b)\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 75 25 100') == \"50\"\nassert solution('0 100 25 75') == \"50\"\nassert solution('0 25 75 100') == \"50\"\nassert solution('75 75 75 100') == \"50\"\nassert solution('100 75 75 100') == \"50\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(105) == 1\n\"\"\"\nimport math"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(105) == 1"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('105') == '1'\n\"\"\"\n\nn = int(stdin.readline())\ncnt = 0\nfor i in range(n):\n    if i == 0:\n        if (n - i) % 2 == 0:\n            continue\n    if (n - i) % 2 == 0:\n        cnt += 1\nprint(cnt)"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"105\") == \"1\"\nassert solution(\"20\") == \"6\"\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('105') == 1\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"105\") == \"1\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('105') == '1'\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"105\") == \"1\"\nprint(\"PASS\")\n\nassert solution(\"1\") == \"1\"\nprint(\"PASS\")\n\nassert solution(\"20\") == \"0\"\nprint(\"PASS\")\n\nassert solution(\"50\") == \"6\"\nprint(\"PASS\")\n\nassert solution(\"200\") == \"34\"\nprint(\"PASS\")\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 3\\n') == '1'\nassert solution('4 2\\n') == '2'\nassert solution('1 1\\n') == '0'\n\"\"\"\n\n\nfrom typing import List, Tuple, Sequence, Set\nfrom collections import Counter, defaultdict\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n2 2 3\") == \"1\"\nassert solution(\"7 3\\n2 2 3\") == \"1\"\nassert solution(\"7 3\\n2 2 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '7 3'\n) == '1'\n\n------------\n\n>>> from a1 import solution\n>>> solution('7 3')\n'1'\n\n>>> from a1 import solution\n>>> solution('2 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 100')\n'99'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('100 100')\n'0'\n\n>>> from a1 import solution\n>>> solution('101 100')\n'1'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>> solution('1 1')\n'0'\n\n>>> from a1 import solution\n>>>"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"7 3\"\n) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7 3\n1 2 3 4 5 6 7''') == '1'\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3') == '1'\n\n\"\"\"\n\nimport math\n\nn, k = map(int, input().split())"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3\\n2 2\\n3 1\\n4 4\\n5 2\\n6 3\\n7 3') == '1'\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('7 3') == '1'"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n2 2\\n3 1\\n2 3') == '2'\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n\nn = input()\nprint(n)\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"111\") == \"111\"\n\nprint(solution(\"111\"))\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('111') == '111'\nassert solution('999') == '999'\nassert solution('111') == '111'\n\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"111\") == \"111\"\n\n-----\nThe next ABC to be held is ABC 111, where Kurohashi can make his debut.\nThe next ABC to be held is ABC 222, where Kurohashi can make his debut.\nThe next ABC to be held is ABC 333, where Kurohashi can make his debut.\nThe next ABC to be held is ABC 444, where Kurohashi can make his debut.\nThe next ABC to be held is ABC 555, where Kurohashi can make his debut.\nThe next ABC to be held is ABC 666, where Kurohashi can make his debut.\nThe next ABC to be held is ABC 777, where Kurohashi can make his debut.\nThe next ABC to be held is ABC 888, where Kurohashi can make his debut.\nThe next ABC to be held is ABC 999, where Kurohashi can make his debut.\n\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('111') == '111'\nassert solution('100') == '100'\nassert solution('101') == '101'\n\"\"\"\n\n\"\"\"\nUse a brute force solution, and the next \"N\" values until they are no longer the same.\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline())\ni = 0\nwhile True:\n    i += 1\n    N = str(N)\n    if N[0] == N[-1]:\n        print(i)\n        break\nprint(N)"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('111') == '111'\n\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n\nn = int(stdin.readline())\nnums = [0 for _ in range(10)]\n\nfor i in range(1, 10):\n    nums[i] = str(i).count(str(i))\n\nfor i in range(10):\n    if nums[i] == n:\n        print(i)\n        break\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 6 3') == '5'\nassert solution('3 6 2') == '6'\nassert solution('3 2 1') == '5'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 6 3') == '5'\n\"\"\"\n\nA = list(map(int, stdin.split()))\nprint(sum(max(0, a - b) for a, b in zip(A, A[1:])))\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 3\") == \"5\"\nassert solution(\"4 1 6\") == \"13\"\n\"\"\"\nimport sys\n\na, b, c = map(int, sys.stdin.readline().split())\nprint(a + abs(b - c))\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 6 3\\n') == '5'\nassert solution('1 6 3\\n') == '5'\nassert solution('1 6 3\\n') == '5'\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3\\n') == '5'\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 6 3') == '5'\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8') == '5'\n\"\"\"\n\ns = int(input())"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\") == \"5\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8') == '5'\n\n----\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8') == '5'\n\n\"\"\"\nfrom __future__ import print_function\n\ns = input()"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8') == '5'\n\"\"\"\nimport sys"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8') == '5'\n\n\"\"\"\n\nfrom typing import List, Optional\n\nfrom icontract import require, ensure, DBC\n\n\nclass Array(DBC, tuple):\n    @require(lambda self: len(self) >= 1)\n    @require(lambda self: all(isinstance(x, int) for x in self))\n    def __add__(self, other: 'Array') -> 'Array':\n        \"\"\"self + other\n\n        The `other` argument can either be an `Array`, or a single integer.\n        \"\"\"\n        if isinstance(other, int):\n            other = Array([other])\n        else:\n            assert isinstance(other, Array)\n        return Array(self.tolist() + other.tolist())\n\n    @require(lambda self: len(self) >= 1)\n    @require(lambda self: all(isinstance(x, int) for x in self))\n    def __sub__(self, other: 'Array') -> 'Array':\n        \"\"\"self - other\n\n        The `other` argument can either be an `Array`, or a single integer.\n        \"\"\"\n        if isinstance(other, int):\n            other = Array([other])\n        else:\n            assert isinstance(other, Array)\n        return Array(self.tolist() - other.tolist())\n\n    @require(lambda self: len(self) >= 1)\n    @require(lambda self: all(isinstance(x, int) for x in self))\n    def __mul__(self, other: int) -> 'Array':\n        \"\"\"self * other\n\n        The `other` argument can either be an `int`, or a single integer.\n        \"\"\"\n        if isinstance(other, int):\n            other = Array([other])\n        else:\n            assert isinstance(other, Array)\n        return Array(self.tolist() * other.tolist())\n\n    def __truediv__(self, other: int) -> 'Array':\n        \"\"\"self / other\n\n        The `other` argument can either be an `int`, or a single integer.\n        \"\"\"\n        if isinstance(other, int):\n            other = Array([other])\n        else:\n            assert isinstance(other, Array)\n        return Array(self.tolist() // other.tolist())\n\n\n@ensure(lambda result: result.startswith('5'))\n@ensure(\n    lambda result: all(i.startswith('5') for i in result.split('5'))\n)\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\"\n\ns = int(input())\n\na = [s]"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\") == \"5\"\nassert solution(\"8\") == \"5\"\nassert solution(\"8\") == \"5\"\nassert solution(\"8\") == \"5\"\nassert solution(\"8\") == \"5\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"10 9 10 10\"\n) == \"No\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 9 10 10') == 'No'\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 9 10 10') == 'No'\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 9 10 10') == 'No'\n\"\"\"\n\nA, B, C, D = map(int, input().split())\n\nt = 0\n\nwhile A > 0 and C > 0:\n    t += 1\n    C -= B\n    if C < 0:\n        C = 0\n    A -= D\n    if A < 0:\n        A = 0"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 9 10 10') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"\n\nimport sys\n\ninp = sys.stdin.readlines()\n\na, b, c, d = [int(i) for i in inp[0].split(\" \")]"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"1 1 1 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 9 10 10') == 'No'\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"10 9 20 20\") == \"No\"\nassert solution(\"1 1 1 1\") == \"No\"\nassert solution(\"1 2 1 1\") == \"Yes\"\nassert solution(\"1 1 2 1\") == \"Yes\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"1 10 10 1\") == \"No\"\nassert solution(\"5 9 3 1\") == \"No\"\nassert solution(\"10 5 10 5\") == \"Yes\"\nassert solution(\"10 9 10 10\") == \"Yes\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4') == '5'\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4') == '5'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4\\n') == '5'\n\nIf we choose the second gem, X = 2 and Y = 6, which is not the maximum value we can get.\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4') == '5'\n\"\"\"\n\nn = int(input())\nv = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\nv_sum = 0\nc_sum = 0\n\nfor i in range(len(v)):\n    v_sum += v[i]\n    c_sum += c[i]\n\nmax_value = max(v_sum - c_sum, 0)\n\nprint(max_value)\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n10 2 5\n6 3 4''') == '5'\n\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == 5\n\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\\n\") == \"5\"\n\"\"\"\nfrom math import inf\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 2 1\\n1 2 3 4') == '8'\n\"\"\"\n\nn = int(input())\nv = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\nprint(max([v[i] - c[i] for i in range(n)]))\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\\n\") == \"5\"\n\"\"\"\n\nn = int(input())\nv, c = list(map(int, input().split()))\n\nres = 0\n\nfor i in range(n):\n    v_i, c_i = list(map(int, input().split()))\n    if v_i > c_i:\n        res += c_i\n        v = v - c_i\n    else:\n        res += v_i\n        c = c - v_i\n    if v == 0:\n        break\n\nprint(res)\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\n\"\"\"\n\nimport sys\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4 4\n##.#\n....\n##.#\n.#.#\n\"\"\") == \"\"\"\n3 3\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\\n\") == \"###\\n###\\n.##\\n\"\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 4\n##.#\n....\n##.#\n.#.#\n''') == '''3 3\n.##\n.##\n.##'''\nassert solution('''5 6\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\nassert solution(\"4 4\\n.#.#\\n....\\n##.#\\n.#.#\") == \".##\"\n\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\\n\") == \"###\\n###\\n.##\\n\"\nassert solution(\"5 5\\n....\\n....\\n....\\n....\\n....\\n\") == \"....\\n....\\n....\\n....\\n....\\n\"\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n##.#\\n....\\n##.#\\n.#.#\\n') == '###\\n###\\n.##\\n'\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n##.#\\n....\\n##.#\\n.#.#') == '###\\n###\\n.##'\nassert solution('4 4\\n....\\n##.#\\n.#.#') == '###\\n###\\n.##'\nassert solution('4 4\\n.#.#\\n....\\n##.#\\n.#.#') == '###\\n###\\n.##'\nassert solution('4 4\\n#.#\\n....\\n#.#\\n#.#') == '###\\n###\\n.##'\nassert solution('4 4\\n##.#\\n#.#\\n....\\n##.#\\n#.#') == '###\\n###\\n.##'\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".#.#\") == \".#.\"\nassert solution(\"###\") == \"\"\nassert solution(\"####\") == \".\"\nassert solution(\"##.#\") == \"##.\"\n\n-----------------------\n---ALTERNATIVE SOLUTIONS---\n-----------------------\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '6.28318530717958623200'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '6.28318530717958623200'\nassert solution('1\\n') == '6.28318530717958623200'\nassert solution('1\\n2') == '6.28318530717958623200'\nassert solution('1\\n2\\n3') == '6.28318530717958623200'\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n') == '6.28318530717958623200'\nassert solution('2\\n') == '12.566370614359172953850'\nassert solution('3\\n') == '19.0874639915328334'\nassert solution('4\\n') == '25.1327412153803467'\nassert solution('5\\n') == '31.4159265358979323846'\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n') == '6.28318530717958623200'\nassert abs(solution('1') - '6.28318530717958623200') <= 10 ** (-2)\nassert abs(solution('2') - '12.566370614359172') <= 10 ** (-2)\nassert abs(solution('3') - '19.154434690031884') <= 10 ** (-2)\nassert abs(solution('4') - '30.122448979591837') <= 10 ** (-2)\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\nassert solution(\"2\") == \"12.566370614359172953850\"\nassert solution(\"3\") == \"19.4339811320566031157\"\nassert solution(\"4\") == \"30.0\"\nassert solution(\"5\") == \"40.7394736842105252081\"\n\"\"\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(1)) == str(6.28318530717958623200)\nassert solution(str(0.1)) == str(6.28318530717958623200)\nassert solution(str(-1)) == str(6.28318530717958623200)\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '2.0'\nassert solution('0\\n') == '2.0'\nassert solution('5\\n') == '12.566370614359172'\nassert solution('100\\n') == '33.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273'\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '6.28318530717958623200'\nassert solution('0') == '6.28318530717958623200'\nassert solution('-1') == '6.28318530717958623200'\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == '6.28318530717958623200'\n\n-----Test Data-----\n-----Test Input-----\n1\n-----Test Output-----\n6.28318530717958623200\n\"\"\"\nimport math"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == 6.28318530717958623200"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('AAAB') == 'No'\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ASSA') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AAAA\") == \"Yes\"\nassert solution(\"AAAS\") == \"No\"\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"LSSS\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ASAS') == 'Yes'\nassert solution('ASSS') == 'No'\nassert solution('AAAA') == 'No'\nassert solution('ABAB') == 'No'\nassert solution('AAAB') == 'Yes'\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ASSS\") == 'Yes'\nassert solution(\"AASAS\") == 'Yes'\nassert solution(\"ASAS\") == 'No'\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ASSS\") == \"Yes\"\nassert solution(\"AS\") == \"No\"\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"QQQ\") == \"No\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('-13 3\\n') == '-10'\n\"\"\"\n\n\"\"\"\n3.\nWrite a program to print the length of the longest word that is both in the list and a substring of the given string.\n\n-----Constraints-----\n - The string and the words list are separated by a single space.\n - The words list contains words separated by a single space.\n - The string's length is in the range of [1, 50].\n - The words list's length is in the range of [1, 50].\n - There is only one longest word that is a substring of the given string.\n\n-----Input-----\nTestcases are given in the following format:\n\nABCD ABCDABCD\n\n-----Output-----\nThe length of longest word is 2\n\n-----Sample Input-----\nABCD ABCDABCD\n\n-----Sample Output-----\nThe length of longest word is 2\n\"\"\"\n\n\"\"\"\n4.\nWrite a program to remove duplicates from a given list of numbers and return the new list.\n\n-----Constraints-----\n - The list contains only numbers.\n - 1 <= length of the list <= 100\n\n-----Input-----\nTestcases are given in the following format:\n\n[1, 2, 3, 3, 3, 6, 9]\n\n-----Output-----\n[1, 2, 3, 6, 9]\n\n-----Sample Input-----\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n-----Sample Output-----\n[1]\n\"\"\"\n\n\"\"\"\n5.\nWrite a program to remove the Nth index character from a nonempty string.\n\n-----Constraints-----\n - 1 \\leq N \\leq String length\n\n-----Input-----\nTestcases are given in the following format:\n\nW3RD\n\n-----Output-----\nR3D\n\"\"\"\n\n\"\"\"\n6.\nWrite a program to check if a given string is a palindrome or not.\n\n-----Constraints-----\n - 1 \\leq |S| \\leq 10^3\n\n-----Input-----\nTestcases are given in the following format:\n\nracecar\n\n-----Output-----\nTrue\n\n-----Sample Input-----\nradar\n\n-----Sample Output-----\nFalse\n\"\"\"\n\n\"\"\"\n7.\nGiven a list of numbers, write a Python program to check whether a given number \u2018key\u2019 is in a list of numbers.\n\n-----Constraints-----\n - 1 \\leq |L| \\leq 10^4\n - 1 \\leq key \\leq 10^5\n\n-----Input-----\nTestcases are given in the following format:\n\nL = [3, 1, 7, 4, 12]\nkey = 7\n\n-----Output-----\nTrue\n\n-----Sample Input-----\nL = [3, 1, 7, 4, 12]\nkey = 13\n\n-----Sample Output-----\nFalse\n\"\"\"\n\n\"\"\"\n8.\nWrite a Python program to create all sublists of a list of numbers.\n\n-----Constraints-----\n - The length of the given list is in the range of [1, 10]\n\n-----Input-----\nTestcases are given in the following format:\n\nL = [1, 2, 3]\n\n-----Output-----\n[[], [1], [2], [3], [1, 2], [2, 3], [1, 2, 3]]\n\"\"\"\n\n\"\"\"\n9.\nWrite a Python program to create the combinations of 3 digit combo.\n\n-----Constraints-----\n - Length of the combo should be 3\n - The combo should be sorted\n\n-----Input-----\nTestcases are given in the following format:\n\n123\n\n-----Output-----\n[1, 2, 3]\n[1, 2, 4]\n[1, 2, 5]\n[1, 3, 2]\n[1, 3, 4]\n[1, 3, 5]\n[1, 4, 2]\n[1, 4, 3]\n[1, 4, 5]\n[2, 1, 3]\n[2, 1, 4]\n[2, 1, 5]\n[2, 3, 1]\n[2, 3, 4]\n[2, 3, 5]\n[2, 4, 1]\n[2, 4, 3]\n[2, 4, 5]\n[3, 1, 2]\n[3, 1, 4]\n[3, 1, 5]\n[3, 2, 1]\n[3, 2, 4]\n[3, 2, 5]\n[3, 4, 1]\n[3, 4, 2]\n[3, 4, 5]\n[4, 1, 2]\n[4, 1, 3]\n[4, 1, 5]\n[4, 2, 1]\n[4, 2, 3]\n[4, 2, 5]\n[4, 3, 1]\n[4, 3, 2]\n[4, 3, 5]\n\"\"\"\n\n\"\"\"\n10.\nWrite a Python program to print a specified list after removing the 0th, 4th and 5th elements.\n\nNote: Please solve this task in a single line using list comprehension.\n\n-----Constraints-----\n - 0 \\leq |nums| \\leq 10^5\n\n-----Input-----\nTestcases are given in the following format:\n\nnums = [0, 1, 2, 3, 0, 4, 5, 0]\n\n-----Output-----\n[1, 2, 3, 0, 0, 4, 5]\n\n-----Sample Input-----\nnums = [0, 1, 2, 3, 0, 4, 5, 0]\n\n-----Sample Output-----\n[1, 2, 3, 5]\n\"\"\"\n\n\"\"\"\n11.\nWrite a program to compute the future value of a specified principal amount, rate of interest, and a number of years.\n\nNote: The result should be rounded to 2 decimal places.\n\n-----Constraints-----\n - 0 \\leq principalAmount \\leq 10^6\n - 0.01 \\leq interestRate \\leq 1\n - 1 \\leq numberOfYears \\leq 10^5\n\n-----Input-----\nTestcases are given in the following format:\n\nprincipalAmount = 10000\ninterestRate = 0.05\nnumberOfYears = 8\n\n-----Output-----\n13165.00\n\"\"\"\n\n\"\"\"\n12.\nWrite a program to compute the distance between the points (x1, y1) and (x2, y2).\n\n-----Constraints-----\n - |x1|, |y1|, |x2|, and |y2| are in the range of [-100.0, 100.0]\n\n-----Input-----\nTestcases are given in the following format:\n\nx1 = 2.5\ny1 = -7.6\nx2 = -12.8\ny2 = 2.9\n\n-----Output-----\n9.4\n\"\"\"\n\n\"\"\"\n13.\nWrite a program to convert a binary number to its decimal equivalent.\n\n-----Constraints-----\n - The given binary number is a binary string.\n - 0 <= length of binary number <= 100\n\n-----Input-----\nTestcases are given in the following format:\n\nbinary number = 10111\n\n-----Output-----\n26\n\"\"\"\n\n\"\"\"\n14.\nWrite a program to check whether a given number is a power of two.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n\n-----Input-----\nTestcases are given in the following format:\n\nN = 16\n\n-----Output-----\nTrue\n\"\"\"\n\n\"\"\"\n15.\nGiven a number \u2018n\u2019, write a python program to calculate the sum of the first \u2018n\u2019 natural numbers.\n\n-----Constraints-----\n - 1 \\leq n \\leq 10^5\n\n-----Input-----\nTestcases are given in the following format:\n\nn = 6\n\n-----Output-----\n21\n\"\"\"\n\n\"\"\"\n16.\nWrite a program to calculate the sum of the first n even numbers.\n\n-----Constraints-----\n - 1 \\leq n \\leq 10^5\n\n-----Input-----\nTestcases are given in the following format:\n\nn = 6\n\n-----Output-----\n12"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '2'\nassert solution('1 -1') == '0'\nassert solution('-1 -1') == '-2'\nassert solution('5 4') == '9'\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"-13 3\") == \"-10\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"-2 -7\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"-13 3\") == \"10\"\nprint(solution(\"-13 3\"))\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"-13 3\") == \"The largest number among A + B = -10, A - B = -16, and A \\times B = -39 is -10\"\nassert solution(\"-11 -22\") == \"The largest number among A + B = 0, A - B = -30, and A \\times B = -60 is 0\"\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"-13 3\") == '-10'\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n3 4\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\"\n\na, b = map(int, stdin.split())\n\nprint(-max(a + b, a - b, a * b))\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n6 5 6 8\") == 3\nassert solution(\"5\\n7 7 2 4 8\") == 2\n\"\"\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n6 5 6 8\") == 3\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"1\\n5\") == \"1\"\nassert solution(\"1\\n0\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\">1 2 3 4 <5 6 7 8\") == \"3\"\nassert solution(\">10 <10 <10 <10 >10\") == \"0\"\nassert solution(\">5 <5 <5 <5 <5\") == \"5\"\nassert solution(\">10 <10 10 10 10 <10\") == \"1\"\nassert solution(\">1 2 3 4 <5 6 7 8 <5 6 7 8\") == \"4\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n6 5 6 8\") == 3\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == result\n\n----------\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 4 5\") == 3\n\"\"\""
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\n\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\n\n\"\"\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n1 2 3 1 2 3 4') == 2\nassert solution('5\\n1 2 1 2 1') == 3\nassert solution('4\\n1 1 1 1') == 4\nassert solution('5\\n1 2 1 2 1') == 3"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7\n1 2 3 1 2 3 4''') == '2\nassert solution('''7\n1 2 3 1 2 3 4''') == '2\nassert solution('''7\n1 2 3 1 2 3 4''') == '2\nassert solution('''7\n1 2 3 1 2 3 4''') == '2\nassert solution('''7\n1 2 3 1 2 3 4''') == '2\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\\n\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\\n\") == \"1\\n5\""
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n2 2 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n2 2 1\"\n\"\"\"\nimport re"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1 1 1') == '4\\n1 1 1 1'\n\"\"\""
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == '2\\n3 4'\nassert solution(\"4\\n1 1 1 1\") == '4\\n1 1 1 1'\nassert solution(\"5\\n1 2 1 2 1\") == '1\\n5'\nassert solution(\"5\\n1 2 3 4 5\") == '1\\n5'\nassert solution(\"5\\n1 2 3 4 5\") == '1\\n5'"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\n\"\"\""
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n6\") == \"1\"\nassert solution(\"7\\n21\") == \"4\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n6\\n7\\n21\\n28\\n999999999\\n999999984\\n\") == \"1\\n2\\n1\\n7\\n4\\n333333333\\n333333328\"\nassert solution(\"3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n6\") == '1\\n2\\n1'\nassert solution(\"7\\n21\") == '4\\n333333333'\nassert solution(\"1\\n999999999\") == '999999999\\n999999984'\nprint(solution(stdin))"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\") == 1\nassert solution(\"7\") == 2\nassert solution(\"3\") == 1\nassert solution(\"21\") == 4\nassert solution(\"28\") == 3\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == '1'\nassert solution(\"6\") == '2'\nassert solution(\"7\") == '1'\nassert solution(\"21\") == '4'\nassert solution(\"28\") == '3'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7\n3\n6\n7\n21\n28\n999999999\n999999984\n''') == '1\\n2\\n1\\n7\\n4\\n333333333\\n333333328'\nassert solution('''5\n8\n10\n11\n16\n17\n''') == '1\\n2\\n1\\n7\\n4'\nassert solution('''2\n3\n4\n10\n20\n''') == '1\\n2\\n1\\n7\\n4'\nassert solution('''1\n2\n3\n4\n5\n''') == '1\\n2\\n1\\n7\\n4'\nassert solution('''1\n2\n3\n4\n5\n6\n''') == '1\\n2\\n1\\n7\\n4'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == 1\nassert solution('6') == 2\nassert solution('7') == 1\nassert solution('21') == 7\nassert solution('28') == 4\n\n---Problem---\nThe number n is given. Determine any integer x such that n = x + 2x + 4x +... + 2^k x and print any x.\n\nInput\nThe only line of the input contains one integer n (3 \\le n \\le 10^9) \u2014 the number that is given.\n\nOutput\nPrint any positive integer x so that n = x + 2x + 4x +... + 2^k x (with k>1) and n is divisible by 10^9.\n\n---Example---\nInput:\n\n6\n\nOutput:\n\n4\n\n\n\n---Solved---\n\"\"\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n8\\n32') == '3'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n3') == '1'\nassert solution('6\\n7') == '2'\nassert solution('21\\n28') == '1'\nassert solution('999999999\\n999999984') == '333333333'\nassert solution('999999999\\n999999984') == '333333328'\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"999999999\") == \"333333328\"\nassert solution(\"5\") == \"4\"\nassert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"1\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"512 4\") == \"50\"\n\"\"\"\n\nn, m = map(int, input().split())\nfor i in range(m):\n    a = n % 10\n    if a == 0:\n        n = int(n / 10)\n    else:\n        n = n - 1\nprint(n)\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"512 4\") == \"50\"\nprint(solution(\"1000000000 9\"))\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\nimport unittest\nclass TestStringMethods(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('512 4'), '50')\n        self.assertEqual(solution('1000000000 9'), '1')\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('512 4') == '50'\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('512 4') == '50'\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('512 4') == '50'\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"512 4\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"7\n4 3 5 1 2 2 2 1\"\"\") == \"5\", \"Wrong solution for 7\"\nassert solution(\"\"\"5\n3 7 5 1 5\"\"\") == \"2\", \"Wrong solution for 5\"\nassert solution(\"\"\"5\n1 4 5\"\"\") == \"2\", \"Wrong solution for 5\"\nassert solution(\"\"\"3\n5 1 4\"\"\") == \"2\", \"Wrong solution for 3\"\nassert solution(\"\"\"7\n2 2 3 2 1 2 2\"\"\") == \"7\", \"Wrong solution for 7\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\\n\") == \"5\\n2 1 1 2 3\"\n\nassert solution(\"5\\n3 7 5 1 5\\n\") == \"2\\n5 5\"\n\nassert solution(\"7\\n5 1 4\\n\") == \"2\\n4 5\"\n\nassert solution(\"3\\n5 1 4\\n\") == \"2\\n4 5\"\n\nassert solution(\"7\\n1 2 2 2 2 3 2\\n\") == \"7\\n1 2 2 2 2 3 2\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1 4') == '2 1 1 2 3'\nassert solution('7 2 5 1 5') == '2 1 1 2 3'\nassert solution('7 5 2 1 2 2') == '2 1 1 2 3'\nassert solution('7 2 2 1 2 2') == '2 1 1 2 3'\nassert solution('7 2 2 1 2 2') == '2 1 1 2 3'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\nassert solution('3\\n5 1 4') == '2\\n4 5'\nassert solution('7\\n2 2 3 2 1 2 2') == '7\\n1 2 2 2 2 3 2'\n\"\"\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 5 1 2 2 1\") == \"5\"\nassert solution(\"3 7 5 1 5\") == \"2\"\nassert solution(\"5 1 4\") == \"2\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n5 5\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7\n4 3 5 1 2 2 1\n''') == '5\n2 1 1 2 3'\nassert solution('''5\n3 7 5 1 5\n''') == '2\n5 5'\nassert solution('''3\n5 1 4\n''') == '2\n4 5'\nassert solution('''7\n2 2 3 2 1 2 2\n''') == '7\n1 2 2 2 2 3 2'\n\n'''\nn = int(input())\na = [int(i) for i in input().split()]\na.sort()\nb = []\nfor i in range(n):\n    if i == n - 1:\n        b.append(a[i])\n        break\n    if abs(a[i] - a[i+1]) <= 1:\n        b.append(a[i])\n        b.append(a[i+1])\nfor i in range(n):\n    print(b[i], end=' ')\n'''\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 5 1 2 2 1\") == \"5\\n2 1 1 2 3\"\n\"\"\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\\n\") == \"5\\n2 1 1 2 3\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\nassert solution('3\\n5 1 4') == '2\\n4 5'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('0 1') == '0'\nassert solution('0 1 2') == '0'\nassert solution('0 1 2 3') == '0'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('\\n') == '-'\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '1'\nassert solution('1\\n2\\n') == '1'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\n\"\"\"\nfrom typing import List, Optional, Tuple\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 16\n10 8\n7 4\n3 1\n5 4''') == '-1'\n\nassert solution('''4 16\n10 8\n7 4\n3 1\n5 4''') == '2'\n\nassert solution('''4 21\n10 8\n7 4\n3 1\n5 4''') == '2'\n\nassert solution('''4 16\n10 8\n7 4\n3 1\n5 4''') == '-1'\n\nassert solution('''4 16\n10 8\n7 4\n3 1\n5 4''') == '-1'"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-\""
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"\n\"\"\"\n\nfrom collections import namedtuple\n\nSizes = namedtuple('Sizes', ('sizes','size'))\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 8\\n7 4\\n3 1\\n5 4\\n\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"-1\"\nassert solution(\"4 1\\n1 0\\n4 0\\n\") == \"1\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"tleelte\"\nassert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"qwerty\"\nassert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"vvvvvv\"\nassert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"abcde\"\n\"\"\""
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\\n\") == \"tleelte\"\n\n\"\"\"\n\n\"\"\"\nSolution 2\n\n\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0447\u0438\u0441\u043b\u043e \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u043e\u043a \u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u0432 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0431\u0443\u043a\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043c\u043e\u0434\u0443\u043b\u044c re.\n\u0412 \u0446\u0438\u043a\u043b\u0435 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0432 \u043d\u0435\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u0435\u0441\u0442\u044c \u043b\u0438 \u0434\u0430\u043d\u043d\u0430\u044f \u0431\u0443\u043a\u0432\u0430.\n\u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0431\u0443\u043a\u0432\u0430, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0435\u0435 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c.\n\u0415\u0441\u043b\u0438 \u043d\u0435\u0442, \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0434\u0430\u043d\u043d\u043e\u0439 \u0431\u0443\u043a\u0432\u044b.\n\u0415\u0441\u043b\u0438 \u0431\u0443\u043a\u0432\u0430 \u043d\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u044d\u0442\u0443 \u0431\u0443\u043a\u0432\u0443 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0435\u0435 \u043a\u0430\u043a \u043d\u043e\u0432\u0443\u044e.\n\u0415\u0441\u043b\u0438 \u0443\u0436\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f, \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0434\u0430\u043d\u043d\u043e\u0439 \u0431\u0443\u043a\u0432\u044b.\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f solution \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 stdin, \u0442\u043e \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0430 \u0438 \u0431\u0435\u0437 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430.\n\u0412 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u0437\u043e\u0432\u043e\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. \u0415\u0441\u043b\u0438 \u043e\u043d\u0438 \u043d\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442\u0441\u044f, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u0448\u0438\u0431\u043a\u0443.\n\u0415\u0441\u043b\u0438 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442\u0441\u044f, \u0442\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435, \u0438 \u0434\u0435\u043b\u0430\u0435\u043c \u0438\u0437 \u043d\u0438\u0445 \u043d\u043e\u0432\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a.\n\n\u0412 \u0441\u043f\u0438\u0441\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u0438 \u0434\u043b\u0438\u043d\u0430 \u0441\u0442\u0440\u043e\u043a \u043d\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442\u0441\u044f.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c\n7 5 3\n6 1 1\n6 6 1\n5 2 2\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430\ntleelte\nqwerty\nvvvvvv\nabcde\n\n\"\"\"\n\nimport re\n\nwith open(\"data/solutions/solution2.txt\") as input_file:\n    t = int(input_file.readline())\n    lines = [line.strip() for line in input_file.readlines()]\n    length_of_all_lines = [len(line) for line in lines]\n    letters = {}\n    index = 0\n    while index < len(lines):\n        for i in range(index, index + length_of_all_lines[index]):\n            if letters.get(lines[i][0]) == None:\n                letters[lines[i][0]] = 1\n            else:\n                letters[lines[i][0]] += 1\n        index += length_of_all_lines[index]\n    #print(letters)\n    for i in range(t):\n        line = lines[i]\n        string_of_letters = \"\"\n        for j in range(len(line)):\n            if letters[line[j]] == 1:\n                string_of_letters += line[j]\n            letters[line[j]] -= 1\n        for key, value in letters.items():\n            if value == 1:\n                string_of_letters += key\n        print(string_of_letters)\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\") == \"tleelte\\nqwerty\\nvvvvvv\"\n\"\"\""
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5 3\") == \"tleel\""
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 5 3') == 'tleel'\nassert solution('6 1 1') == 'qwerty'\nassert solution('6 6 1') == 'vvvvv'\nassert solution('5 2 2') == 'abcde'\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3\") == \"tleel\"\n\n\"\"\""
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 3\") == 'tleelte'\nassert solution(\"6 1 1\") == 'qwerty'\nassert solution(\"6 6 1\") == 'vvvvvv'\nassert solution(\"5 2 2\") == 'abcde'\n\n----\n\n>>> s = '3 1 2'\n>>> s.split(' ')\n['3', '1', '2']\n>>> [int(i) for i in s.split(' ')]\n[3, 1, 2]\n>>>\n\n>>> solution(s)\ntleelte\n\n>>> solution(s = '3 1 1')\nqwerty\n\n>>> solution(s = '6 1 1')\nvvvvvv\n\n>>> solution(s = '5 2 2')\nabcde\n\n>>> solution(s = '3 2 2')\ntleelte\n\n>>> solution(s = '6 6 1')\nvvvvvv\n\n>>> solution(s = '3 3 2')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>> solution(s = '7 5 3')\ntleelte\n\n>>>"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"tleelte\"\nassert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"tleelte\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"20 12 6\"\n) == \"12\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20 12 6\\n') == '12'\n\"\"\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 12 6\") == 12"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20 12 6') == '12'\n\nimport sys; import math; import collections; import re; from typing import *; from math import *; import random; import bisect; import heapq; import itertools; import math; import queue; import string; from typing import *; from math import *; import re; import math; import collections; import queue; import bisect; import heapq; import itertools; import math; import random; import functools\nimport math\nimport collections\nimport queue\nimport itertools\nimport re\nimport collections\nimport heapq\nfrom collections import defaultdict\nimport math\nimport queue\nimport bisect\nimport string\nimport itertools\nfrom functools import lru_cache\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\"\"\"\n\nn, x, t = input().split()\nn = int(n)\nx = int(x)\nt = int(t)\n\nfirst = x // n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 12 6\") == 12\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10 3\") == \"10\"\nassert solution(\"100 500 1\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 20 6\") == \"8\"\n\"\"\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20 12 6') == '12'\n\"\"\"\n\nn, x, t = map(int, input().split())\n\ntime = 0\nwhile n > 0:\n    time += x\n    n -= x\n    if n > 0:\n        time += t\n        n -= 1\nprint(time)\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20 12 6\\n') == 12\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n') == '2'\nassert solution('8\\n7\\n3\\n7\\n3\\n5\\n4\\n2\\n5\\n5\\n') == '3'\nassert solution('8\\n7\\n3\\n7\\n3\\n5\\n4\\n2\\n5\\n5\\n') == '3'\nassert solution('8\\n7\\n3\\n7\\n3\\n5\\n4\\n2\\n5\\n5\\n') == '3'\nassert solution('8\\n7\\n3\\n7\\n3\\n5\\n4\\n2\\n5\\n5\\n') == '3'\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n') == '2'\nassert solution('8\\n') == '2'\nassert solution('8\\n') == '2'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '3'\nassert solution('7') == '3'\nassert solution('10') == '2'\n\"\"\"\n\nn = int(input())\ncount = 0\nwhile n >= 0:\n    if n % 3 == 0:\n        count += 1\n        n = n - 2\n    else:\n        n = n - 1\nprint(count)\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('8') == '2'"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\") == \"2\"\nassert solution(\"7\") == \"1\"\nassert solution(\"6\") == \"0\"\nassert solution(\"5\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8') == '2'\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1') == '2'\nassert solution('6\\n4') == '2'\nassert solution('8\\n3') == '2'\nassert solution('8\\n5') == '3'\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n') == '0'\nassert solution('8\\n') == '2'\nassert solution('8\\n') == '2'\nassert solution('4\\n') == '0'\nassert solution('0\\n') == '0'\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3') == '3'\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3\") == \"3\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == 3\nassert solution(\"2 3\") == 3\nassert solution(\"3 3\") == 4\nassert solution(\"1 3\") == 3\nassert solution(\"2 3\") == 3\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3\\n\") == \"3\"\n\"\"\"\n\nfrom math import ceil, log"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3') == '3'\nassert solution('4 7') == '3'\nassert solution('10 10') == '2'\nassert solution('1 1') == '1'\nassert solution('2 1') == '0'\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3') == '3'\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3') == '3'\nassert solution('1 3') == '3'\nassert solution('1 3') == '3'\n\"\"\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"5 3\") == \"0\"\nassert solution(\"3 0\") == \"0\"\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3') == '3'\n\n-------\n\nApples and Apples\nYou are given the following information, but you may prefer to do some research for yourself.\n\n1 Jan 1900 was a Monday.\nThirty days has September,\nApril, June and November.\nAll the rest have thirty-one,\nSaving February alone,\nWhich has twenty-eight, rain or shine.\nAnd on leap years, twenty-nine.\nA leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.\nHow many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?\n\"\"\"\n\nmonths = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 12\\n\") == \"16\"\n\n-----Solution-----\nA, B = map(int, stdin.split())\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 12\") == \"16\"\nprint(\"All test cases passed.\")\n\n-----\nYou are given a positive integer N. Your task is to print a palindromic triangle of size N.\nA palindromic triangle is a triangle in which all the numbers are the same when they are read both forward and backward.\n\nFor example, when N = 5, the output should be:\n1\n121\n12321\n1234321\n123454321\n\n-----Input-----\nA single line containing a positive integer N (1\u2009\u2264\u2009N\u2009\u2264\u2009100)\n\n-----Output-----\nPrint the palindromic triangle of size N as explained above.\n\n-----Sample Input-----\n5\n\n-----Sample Output-----\n1\n121\n12321\n1234321\n123454321"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a, b) == c\na, b = map(int, stdin.readline().split())\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n'''\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 4\") == \"5\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 4\") == \"2\"\n\n'''\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 12\") == \"16\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 12\\n\") == \"16\"\n\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\nassert solution('chokudais') == 'No'\nassert solution('chokudaist') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(chokudai) == chokudaiz\nassert solution(chokudaiz) == Yes\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\nassert solution('chokudaiabc') == 'No'\nassert solution('chokudaiab') == 'Yes'\nassert solution('chokudaiabcd') == 'Yes'\n\"\"\"\n\ns = stdin.splitlines()[0]\nt = stdin.splitlines()[1]\n\nwhile len(t) > len(s):\n    if t[:-1] == s:\n        print('Yes')\n        exit()\n    t = t[:-1]\n\nprint('No')\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\nassert solution('chokuda') == 'No'\nassert solution('chokud') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 16\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '2 16'\n) == '9'\nassert solution(\n    '1 2'\n) == 'IMPOSSIBLE'\nassert solution(\n    '0 0'\n) == 'IMPOSSIBLE'\n\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 16') == '9'\n\"\"\"\n\nimport sys\n\nA, B = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 16\") == \"9\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('1 2') == 'IMPOSSIBLE'\nassert solution('2 16') == '9'\nassert solution('2 16') == '9'\nassert solution('2 16') == '9'\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\"\n\nfrom typing import List\nimport math"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == IMPOSSIBLE\nassert solution('2 16') == '9'\n\n------\n|2 - 9| = 7 and |16 - 9| = 7, so 9 satisfies the condition.\n\n'''\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 16\\n') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 16\\n') == '9'\n\"\"\"\n\n\n\"\"\"\nThe key idea here is we have two integers A and B and we want to find K, such that |A-K| = |B-K|.\nLet's find a number K, such that |A-K| = |B-K| = |A-B|/2.\nThen, K = A + B/2.\nWe then have a solution if and only if A = B.\nWe can easily find a solution if we get A, and we can get B, if we get A.\nIf we get A, we can get B, if we get B.\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 16') == '9'\n\"\"\"\n\nimport sys\n\nA, B = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"117\") == \"Yes\"\nassert solution(\"123\") == \"No\"\n\"\"\"\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('117') == 'Yes'\nassert solution('111') == 'No'\nassert solution('997') == 'Yes'\nassert solution('999') == 'No'\n\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(117) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100\") == \"No\"\nassert solution(\"237\") == \"Yes\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"47\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('111') == 'No'\nassert solution('717') == 'Yes'\nassert solution('999') == 'Yes'\nassert solution('107') == 'No'\nassert solution('117') == 'Yes'\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin=\"117\") == \"Yes\"\nassert solution(stdin=\"231\") == \"No\"\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('117') == 'Yes'\nassert solution('567') == 'No'"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('117') == 'Yes'\nassert solution('106') == 'No'\nassert solution('123') == 'No'"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"117\") == \"Yes\"\nassert solution(\"1\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"117\") == \"Yes\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\") == 'Yes'\n\n\"\"\"\n\n\"\"\"\n    S(n) = sum of digits in n\n\"\"\"\nimport sys"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12') == 'Yes'\nassert solution('10') == 'No'\nassert solution('101') == 'No'\nassert solution('1') == 'No'\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12\\n') == 'Yes'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12\\n') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"101\") == \"No\"\n\nimport sys\nfrom typing import List\n\nsys.setrecursionlimit(100010)\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101') == 'Yes'\nassert solution('123') == 'No'\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101\") == \"Yes\"\n\"\"\"\nfrom math import sqrt\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\"\"\""
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\nassert solution(\"1 1 1 1\") == \"0 0 0 0\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 0 1\") == \"0 1 1 0\"\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\n\nimport math\nfrom typing import Tuple\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\"\"\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\nprint(\"All tests passed.\")\n\n\"\"\""
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 0 1\") == \"1 1 -1 0\"\n\"\"\""
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\n\"\"\"\n\nimport collections\nfrom typing import Dict, List, Set, Tuple, Union\n\n\nclass Node:\n    def __init__(self, x: int, y: int, parent: int):\n        self.x = x\n        self.y = y\n        self.parent = parent\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"red blue\") == \"2 4\"\nassert solution(\"green blue\") == \"0 0\"\nassert solution(\"yellow blue\") == \"1 2\"\nassert solution(\"red blue blue\") == \"0 0\"\n\"\"\"\n\nS, T = stdin.split()\nS = S.lower()\nT = T.lower()\nA, B = [int(i) for i in stdin.split()]\nU = stdin.split()[2].lower()\nprint(str(A - (S == U)) + \" \" + str(B - (T == U)))\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\""
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"red blue\") == \"2 4\"\nassert solution(\"red blue\") == \"2 4\"\nassert solution(\"red blue\") == \"2 4\"\nassert solution(\"red blue\") == \"2 4\"\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\ns, t = input().split()\nn, m = input().split()\nprint(s.count(n), t.count(m))\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin_str) == stdout_str"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"aabbcc\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abcabcab') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcabc') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"abcabcabc\") == \"Yes\"\nassert solution(\"abcabcabcabc\") == \"Yes\"\nassert solution(\"abcabcabcabc\") == \"Yes\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"abab\") == \"No\"\nassert solution(\"ab\") == \"No\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"abababab\") == \"Yes\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(s) == \"Yes\"\n\"\"\"\n\nimport collections\nimport re\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"a\") == \"No\"\nassert solution(\"ab\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcabc') == 'Yes'\n\"\"\"\nimport re\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\nassert solution(\"2 3 1 3\") == \"0.666667 1\"\n\"\"\"\n\nfrom typing import List\nimport math\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f\"({self.x}, {self.y})\"\n\n    def __repr__(self):\n        return f\"Point({self.x}, {self.y})\"\n\n    def __eq__(self, other):\n        return (self.x, self.y) == (other.x, other.y)\n\n    def __lt__(self, other):\n        return (self.x, self.y) < (other.x, other.y)\n\n    def __hash__(self):\n        return hash((self.x, self.y))\n\n\nclass Rectangle:\n    def __init__(self, p1: Point, p2: Point, p3: Point, p4: Point):\n        self.p1 = p1\n        self.p2 = p2\n        self.p3 = p3\n        self.p4 = p4\n\n    def __str__(self):\n        return f\"Rectangle({self.p1}, {self.p2}, {self.p3}, {self.p4})\"\n\n    def __repr__(self):\n        return f\"Rectangle({self.p1}, {self.p2}, {self.p3}, {self.p4})\"\n\n    def __eq__(self, other):\n        return (self.p1, self.p2, self.p3, self.p4) == (other.p1, other.p2, other.p3, other.p4)\n\n    def __lt__(self, other):\n        return (self.p1, self.p2, self.p3, self.p4) < (other.p1, other.p2, other.p3, other.p4)\n\n    def __hash__(self):\n        return hash((self.p1, self.p2, self.p3, self.p4))\n\n    def get_area(self):\n        x1, y1 = self.p1.x, self.p1.y\n        x2, y2 = self.p2.x, self.p2.y\n        x3, y3 = self.p3.x, self.p3.y\n        x4, y4 = self.p4.x, self.p4.y\n\n        return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n\n    def contains_point(self, point: Point):\n        x1, y1 = self.p1.x, self.p1.y\n        x2, y2 = self.p2.x, self.p2.y\n        x3, y3 = self.p3.x, self.p3.y\n        x4, y4 = self.p4.x, self.p4.y\n\n        # compare with each of the sides of the rectangle\n        if x1 <= point.x <= x2 and y1 <= point.y <= y2:\n            return True\n        if x2 <= point.x <= x3 and y2 <= point.y <= y3:\n            return True\n        if x3 <= point.x <= x4 and y3 <= point.y <= y4:\n            return True\n        if x4 <= point.x <= x1 and y4 <= point.y <= y1:\n            return True\n\n        return False\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\n\"\"\"\n\nW, H, x, y = [int(i) for i in stdin.split()]\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 3 1 2''') == '''3.000000 0\n'''\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\n\"\"\""
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 1 2\") == \"3.0 0\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1) == 3.0\nassert solution(2) == 1.0\nassert solution(3) == 0.0\nassert solution(2, 2, 2, 2) == 1.0\nassert solution(4, 1, 3, 2) == 0.5\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '0'\nassert solution('2 3 1 2') == '3.0 0'\nassert solution('2 4 3 2') == '4.0 1'\n\"\"\""
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 1 2') == '3.0 0'\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 1 2\") == \"3.0 0\"\nprint(solution(\"2 3 1 2\"), end=\" \")\n\nassert solution(\"10 10 1 10\") == \"2.0 0\"\nprint(solution(\"10 10 1 10\"), end=\" \")\n\nassert solution(\"10 10 5 3\") == \"0 0\"\nprint(solution(\"10 10 5 3\"), end=\" \")\n\nassert solution(\"10 10 5 3\") == \"0 0\"\nprint(solution(\"10 10 5 3\"), end=\" \")\n\nassert solution(\"10 10 5 3\") == \"0 0\"\nprint(solution(\"10 10 5 3\"), end=\" \")"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 P') == 'Three'\nassert solution('4 P') == 'Four'\nassert solution('3 G G') == 'Four'\nassert solution('3 G W G') == 'Three'\nassert solution('3 G W W') == 'Three'\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n\n\"\"\"\n\nn, *colors = input().split()\n\nprint(\n    \"Three\"\n    if len(set(colors)) == 3\n    else \"Four\"\n    if len(set(colors)) == 4\n    else \"Invalid\"\n)\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"G W Y P Y W\") == \"Four\"\nassert solution(\"P P G G P Y Y P\") == \"Three\"\nassert solution(\"P P G G P Y Y P W W G G\") == \"Four\"\nassert solution(\"P P G G P Y Y P W W G G G W W G G\") == \"Four\"\nassert solution(\"P P G G P Y Y P W W G G G W W G G G W W G G\") == \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nG W Y P Y W\") == \"Four\"\n\n-----\n\n3\nG W Y P Y W\n\n-----\n\n4\nG W Y P Y W\n\n-----\n\n5\nG W Y P Y W\n\n-----\n\n6\nG W Y P Y W\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('G W Y P Y W') == 'Four'\nassert solution('G W G Y P Y W') == 'Three'\n\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\nP W\\nW G') == 'Four'\nassert solution('4\\nP W\\nP Y\\nG Y') == 'Three'\nassert solution('4\\nP W\\nP Y\\nG Y\\nY G') == 'Three'\n\n\"\"\"\n\n\"\"\"\n5\nY P Y W\n\n4\nP P Y Y\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"pink\\nwhite\\ngreen\\n\") == 'Three'\nassert solution(\"pink\\nwhite\\ngreen\\nyellow\\n\") == 'Four'\n\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"WWGGP\") == \"Three\"\nassert solution(\"WWGYY\") == \"Four\"\nassert solution(\"GYYWG\") == \"Four\"\nassert solution(\"WGGYY\") == \"Four\"\nassert solution(\"YYWWG\") == \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == \"Four\"\n\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WWGYYY\") == \"Four\"\nassert solution(\"GGWWGG\") == \"Four\"\nassert solution(\"YYPYYW\") == \"Four\"\nassert solution(\"WWGGYY\") == \"Four\"\nassert solution(\"WWGYYP\") == \"Four\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\") == 6\nassert solution(\"5 3 3\\n1 2 4 2 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(expected_result)\n\n\n\n-----Solution-----\n\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 1 3 4 2\") == 6\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\") == 6\nassert solution(\"5 3 3\\n1 2 4 2 3\") == 2\nassert solution(\"5 5 6\\n1 2 6 10 3\") == 2\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\") == 6\n\nassert solution(\"5 3 3\\n1 2 4 2 3\") == 2\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1 1 1 1') == '0'\nassert solution
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 3\\n1 2 6 10 3') == 2\nassert solution('6 3 2\\n2 3 1 3 4 2') == 6\nassert solution('5 5 6\\n1 2 6 10 3') == 2\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\\n\") == 6\n\n\"\"\"\n\nn, x, y = (int(i) for i in stdin.split())\na = [int(i) for i in stdin.split()[1:]]\n\nimport heapq\n\nclass State:\n    def __init__(self, value, durability, action, prev):\n        self.value = value\n        self.durability = durability\n        self.action = action\n        self.prev = prev\n\nclass Player:\n    def __init__(self, value, durability, action):\n        self.value = value\n        self.durability = durability\n        self.action = action\n\n    def __repr__(self):\n        return f\"value={self.value} durability={self.durability} action={self.action}\""
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'''6 3 2\n2 3 1 3 4 2'''\n) == '6'\nassert solution(\n'''6 5 6\n1 2 6 10 3'''\n) == '2'\nassert solution(\n'''5 5 6\n1 2 6 10 3'''\n) == '2'\nassert solution(\n'''5 6 4\n1 2 6 10 3'''\n) == '0'\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == \"7\"\nprint(solution(\"4\\n1 3 2 4\\n1 3 2 4\"))"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8 2 6 2') == 7\nassert solution('4 5 4 1 3') == 0\n\"\"\""
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == 7"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 2 6 2\\n4 5 4 1 3\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 8 2 6 2\\n4 5 4 1 3') == '7'\n\"\"\"\nfrom __future__ import annotations\nfrom collections import defaultdict\nfrom typing import Optional\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8 2 6 2\\n4 5 4 1 3\\n\") == 7\nprint(solution(\"4 8 2 6 2\\n4 5 4 1 3\\n\"))\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5\n4 8 2 6 2\n4 5 4 1 3\n\"\"\") == '7'\nassert solution(\"\"\"4\n1 3 2 4\n1 3 2 4\n\"\"\") == '0'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n4 8 2 6 2\\n4 5 4 1 3') == '7'\n\n\"\"\""
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8 2 6 2') == '7'\n\nprint(solution('4 8 2 6 2'))\n\"\"\"\n\n\"\"\"\nn = int(stdin.readline().strip())\nt = list(map(int, stdin.readline().split()))\n\nm = list(map(int, stdin.readline().split()))\nt = [a - b for a, b in zip(t, m)]\n\ncnt = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if t[i] > t[j] + 1:\n            cnt += 1\n\nprint(cnt)\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if a[i] > a[j] + 1 or b[i] > b[j] + 1:\n            cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8 2 6 2\\n4 5 4 1 3') == '7'\nassert solution('1 3 2 4\\n1 3 2 4') == '0'\nassert solution('2 4 4 2\\n2 2 4 4') == '3'\nassert solution('3 4 4 2\\n3 3 4 4') == '0'\nassert solution('5 5 5 5\\n5 5 5 5') == '15'\n\"\"\"\nimport sys"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())\nb = Counter(map(int, input().split()))\n\nfor key in sorted(b.keys()):\n    print(key, b[key])\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 4 5\\n\") == \"1 1 3 5\"\nassert solution(\"5\\n1 2 4 5 10\\n\") == \"1 1 3 5 9\"\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\nprint(\"All tests passed.\")\n\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 4 5 10') == '1 1 3 5 9'\n\n(It's guaranteed that the input is valid)\n\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n\"\"\"\n\n\"\"\"\n\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u044b \u043d\u0430 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c:\n1. \u0421\u0442\u0440\u043e\u043a\u0430 \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0446\u0438\u0444\u0440\u0443 0 \u043b\u0438\u0431\u043e \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0434\u0432\u0430 \u0440\u0430\u0437\u0430.\n2. \u0421\u0442\u0440\u043e\u043a\u0430 \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0446\u0438\u0444\u0440\u0443 5 \u043b\u0438\u0431\u043e \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0434\u0432\u0430 \u0440\u0430\u0437\u0430.\n3. \u0421\u0442\u0440\u043e\u043a\u0430 \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0446\u0438\u0444\u0440\u0443 6 \u043b\u0438\u0431\u043e \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0434\u0432\u0430 \u0440\u0430\u0437\u0430.\n\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u043d\u0430\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u043e \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0443:\ns0, s1, s2, s3,...\n\u0421\u0442\u0440\u043e\u043a\u0430 \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0446\u0438\u0444\u0440\u0443 0 \u043b\u0438\u0431\u043e \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0434\u0432\u0430 \u0440\u0430\u0437\u0430 \u0437\u043d\u0430\u043a\u0430 \u0440\u0430\u0432\u043d\u043e.\n\u041d\u0435 \u043d\u0443\u0436\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430.\n\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u043f\u0438\u0441\u0430\u043d\u044b \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043a \u0437\u0430\u0434\u0430\u043d\u0438\u044e.\n\n\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u043e \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443.\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043e\u0444\u043e\u0440\u043c\u0438\u0442\u0435 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 solve(s), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 True, \u0435\u0441\u043b\u0438 \u043e\u0448\u0438\u0431\u043e\u043a \u043d\u0435 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u043e, \u0438 False, \u0435\u0441\u043b\u0438 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u044b \u043e\u0448\u0438\u0431\u043a\u0438.\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n1 2 4 5 10''') == '1 1 3 5 9'\n\nassert solution('''10\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000''') == '9999 9 50605065 1 5 89 5 999999999 60506055 999999999'\n'''\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n\"\"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 4\n1 2\n3 4\n5 4\n3 5''') == '1'\nassert solution('''17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6''') == '2'\n\"\"\"\n\n\n\nclass Solution:\n    def solution(self, stdin):\n        pass"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\\n\") == \"2\"\n\"\"\"\n\nfrom math import sqrt\nfrom typing import List\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n1 2\\n3 4\\n1 3') == '1'\nassert solution('5 7\\n1 2\\n2 3\\n3 4\\n4 5\\n1 3') == '2'\nassert solution('17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 4\") == 1\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 4\n1 2\n3 4\n5 4\n3 5''') == '1'\n\nassert solution('''17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6''') == '2\n\n\"\"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4\\n1 2\\n3 4\\n5 4\\n3 5') == '1'\nassert solution('17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6') == '2'\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n2 5\") == \"1\"\nassert solution(\"5\\n2 0 0 0 2\\n1 2\\n2 3\\n3 4\\n2 5\") == \"4\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n2 4\\n2 5\\n\") == \"1\"\nassert solution(\"5\\n2 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\\n\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 2\\n1 2\\n2 3\\n3 4\\n4 5') == '1'\nassert solution('5 1 2\\n1 2\\n2 3\\n3 4\\n4 5') == '4'\nassert solution('3 1 2\\n1 2\\n2 3') == '0'\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == '1'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n2 4\\n2 5\") == '4'\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == '0'"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5') == '1'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5') == '4'\nassert solution('3\\n1 1 2\\n2 3\\n1 3') == '0'\nassert solution('3\\n1 1 2\\n2 3\\n1 3') == '0'\nassert solution('1\\n1 0 0\\n2 3') == '0'\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n1 2\n2 3\n2 4\n2 5\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5\n1 0 2\n2 3\n2 4\n2 5\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n3\n1 1 2\n2 3\n1 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3\n1 1 2\n2 3\n1 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5\n0 1 1 0 2\n2 3\n2 4\n3 4\n4 5\n\"\"\") == \"4\""
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\naz\\nbf') == 'bc'\nassert solution('5\\nafogk\\nasdji') == 'alvuw'\nassert solution('6\\nnijfvj\\ntvqhwp') == 'qoztvz'\n\"\"\""
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('az') == 'bc'"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\n\"\"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ab\") == \"a\"\nassert solution(\"b\") == \"b\"\nassert solution(\"abcd\") == \"b\"\nassert solution(\"abcdec\") == \"c\"\nassert solution(\"abcdefg\") == \"c\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"abc\") == \"abd\"\nassert solution(\"abd\") == \"abd\"\n\nassert solution(\"afogk\") == \"alvuw\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ab') == 'a'\nassert solution('abc') == 'a'\nassert solution('abcd') == 'b'\nassert solution('z') == 'z'\nassert solution('ba') == 'b'\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\nassert solution(\"nijfvj\") == \"tvqhwp\"\n\n\"\"\"\n\nfrom statistics import median\n\nn = int(input())\ns = input()\nt = input()\n\ns_list = [s for s in sorted(s) if s in t]\ns_list = sorted(s_list)\n\nprint(s_list[(len(s_list) - 1)//2])\n\n\"\"\"\nInput\n2\naz\nbf\n\nOutput\nbc\n\nInput\n5\nafogk\nasdji\n\nOutput\nalvuw\n\nInput\n6\nnijfvj\ntvqhwp\n\nOutput\nqoztvz\n\n\"\"\""
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\n\nassert solution(\"asdji\") == \"qoztvz\"\n\nassert solution(\"tvqhwp\") == \"vqtzb\"\n\n\n\n\"\"\"\nimport math"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\nassert solution(\"kolowie\") == \"mccnb\"\n\n\"\"\"\n\nfrom typing import List\nimport math\n\n\"\"\"\nnum = 1\nfor i in range(1, n + 1):\n    num *= i\n\n\"\"\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\nassert solution(\"4 4\\n20 10 40 30\") == \"NO\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n15 13 15 15 12') == 'YES\\n1 2 5'\nassert solution('5 4\\n15 13 15 15 12') == 'NO'\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n20 10 40 30\\n\") == \"YES\\n1 2 3 4\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n15 13 15 15 12') == 'YES\\n1 2 5'\nassert solution('5 4\\n20 10 40 30') == 'NO'\nassert solution('4 4\\n20 10 40 30') == 'YES\\n1 2 3 4'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\nassert solution(\"5 3\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"5 3\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"5 3\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"5 3\\n15 13 15 15 12\") == \"NO\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\n\"\"\"\n\n\nimport sys\nimport math"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n\n\n-----Hint-----\n\nThis problem has many ways of solving. You should check all of them.\n\nThis problem has lots of similarities with the previous problem. The only difference is that this problem is more general and can be solved with a different algorithm.\n\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        n, k = map(int, stdin.split())\n        if k > n:\n            return \"NO\"\n\n        # count_set = set()\n        # visited = set()\n        # res = []\n        # for i in range(n):\n        #     if i in visited:\n        #         continue\n        #     visited.add(i)\n        #     count = 0\n        #     for j in range(i + 1, n):\n        #         if j in visited:\n        #             continue\n        #         count += 1\n        #         visited.add(j)\n        #         if count >= k:\n        #             res.append(i + 1)\n        #             res.append(j + 1)\n        #             count_set.add(i)\n        #             count_set.add(j)\n        #             break\n        #     if count < k:\n        #         return \"NO\"\n        # return \"\\n\".join(map(str, res))\n        \n        if n == k:\n            return \"YES\\n1\"\n        visited = set()\n        res = []\n        for i in range(n):\n            if i in visited:\n                continue\n            visited.add(i)\n            for j in range(i + 1, n):\n                if j in visited:\n                    continue\n                if n - i - j < k - 2:\n                    return \"NO\"\n                res.append(i + 1)\n                res.append(j + 1)\n                res.append(j + 1)\n        return \"\\n\".join(map(str, res))\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n\n\"\"\""
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1 3 6 8 2 9 0 10') == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution('9 6 4 5 3 2 1 1 1') == 'YES\\n1 1 1 0 1 1 1 0 1 1'\nassert solution('2 3 1 0 0') == 'YES\\n0 1 0 1 0'\nassert solution('3 3 3 1 3 3') == 'YES\\n1 1 1 0 1 1'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 2 4 7 1 6 5 3\") == \"YES\"\nassert solution(\"9 2 4 0 2\") == \"NO\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n\ninputs = sys.stdin.readlines()\ninputs = [line.strip() for line in inputs]\n\nn = int(inputs[0])\na = list(map(int, inputs[1].split()))\n\nincreasing = deque()\ndecreasing = deque()\n\nfor i in range(n):\n    if a[i] < a[i-1]:\n        increasing.append(a[i])\n    elif a[i] > a[i-1]:\n        decreasing.append(a[i])"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 2 4 0 2') == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution('7\\n4 3 2 1 5 6 8 7') == 'YES\\n1 0 0 1 1 1 1 1 1'\nassert solution('10\\n5 1 3 6 8 2 9 0 10') == 'YES\\n0 0 0 0 0 1 1 1 1'\nassert solution('5\\n0 2 4 6 8') == 'NO'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution(\"3\\n1 2 3\") == 'NO\\n0 1 0'\nassert solution(\"3\\n1 3 2\") == 'YES\\n0 0 1'\nassert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution(\"5\\n1 2 3 4 5\") == 'YES\\n0 0 1 0 1'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3 2 4 0') == 'YES\\n1 0 0 0 1 0 1 0 0\\n'\nassert solution('5\\n4 2 3 7 10 9') == 'YES\\n0 0 1 0 1 0 1 1 0\\n'\nassert solution('6\\n2 0 3 2 4 6 7') == 'YES\\n1 0 1 1 1 0 1 1 0\\n'\nassert solution('5\\n4 2 7 6 0 2') == 'NO\\n'\nassert solution('4\\n1 4 2 0') == 'NO\\n'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''9\n5 1 3 6 8 2 9 0 10''') == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution('''5\n1 2 4 0 2''') == 'NO'\n\nassert solution('''7\n2 2 1 1 1 3 3''') == 'YES\\n1 1 0 0 1 1 0 1'\nassert solution('''5\n1 2 4 0 2''') == 'NO'\nassert solution('''7\n2 2 1 1 1 3 3''') == 'NO'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1 3 6 8 2 9 0 10') == \"YES\\n1 0 0 0 0 1 0 1 0\"\n\nassert solution('9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1 3 6 8 2 9 0 10') == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution('5 1 3 6 8 2 9 0 10') == 'NO'\nassert solution('5 1 3 6 8 2 9 0 10') == 'NO'\nassert solution('5 1 3 6 8 2 9 0 10') == 'NO'\nassert solution('5 1 3 6 8 2 9 0 10') == 'NO'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution(\"1 2 4 0 2\") == 'NO'\nassert solution(\"1 2 4 0 2 3 5 7 8 9 10\") == 'YES\\n0 1 0 1 1 1 0 1 1 0'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().strip().split()))\n\nprint('YES' if a[0] < a[1] and a[-1] > a[-2] and (a[1] < a[2] and a[-2] > a[-3]) else 'NO')"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '1'\nassert solution('10 2 3 7') == '3'\nassert solution('100 51 51 51') == '0'\nassert solution('1234 1 100 199') == '1134'\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '3'\nassert solution('''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '0'\nassert solution('''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '1134'\nassert solution('''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '0'\nassert solution('''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '1134'\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n''') == \"3\\n0\\n1134\\n0\""
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\nassert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\nassert solution(\"3\\n4\\n6 2\\n2 8 9\") == \"1\\n0\\n0\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\nassert solution(\"3\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\") == \"2\\n0\\n1134\\n0\"\nassert solution(\"3\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\") == \"3\\n0\\n1134\\n0\"\nassert solution(\"3\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\") == \"3\\n0\\n1134\\n0\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n    4\n    10 2 3 7\n    100 51 51 51\n    1234 1 100 199\n    1000000000 1 1 1000000000\n    \"\"\"\n) == \"\"\"\n    3\n    0\n    1134\n    0\n    \"\"\"\n\n\nassert solution(\n    \"\"\"\n    4\n    10 1 10 1\n    100 1 10 1\n    1234 1 100 199\n    1000000000 1 1 1000000000\n    \"\"\"\n) == \"\"\"\n    3\n    0\n    1134\n    0\n    \"\"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\"\"\") == '3\\n0\\n1134\\n0'\n\"\"\"\n\n-----\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\n\n-----\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\n\n-----\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\n\n-----\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\n\n-----\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\n\n-----\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\n\n-----\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\n\n-----\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\n\n-----\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\n\n-----\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\n\n-----\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\n\n-----\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\"\"\""
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\nassert solution(\"5\\n10 4 3 1\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"4\\n0\\n1134\\n0\"\nassert solution(\"5\\n10 2 4 1\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\nassert solution(\"1\\n10 4 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"0\"\n\n\"\"\"\n\n\"\"\"\nIncorrect solution\nimport sys\nsys.setrecursionlimit(10000000)\nimport collections"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '3'\nassert solution('8') == '1260'\n\"\"\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2) == 1\nassert solution(4) == 3\nassert solution(8) == 1260\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(2) == 1\nassert solution(4) == 3\nassert solution(8) == 1260\nassert solution(20) == 12164510040883200\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"20\") == \"12164510040883200\"\n\nprint(solution(\"20\"))"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n\") == \"1\"\nassert solution(\"4\\n\") == \"3\"\nassert solution(\"8\\n\") == \"1260\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\nassert solution(\"20\") == \"12164510040883200\"\nprint(\"All cases passed\")\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == '3'\nassert solution('8') == '1260'\n\"\"\"\n\nn = int(input())\nassert n % 2 == 0\nassert n in range(2, 21)\n\nways = 0\nfor i in range(n // 2 + 1):\n    if i * 2 == n:\n        ways += 1\n\nprint(ways)\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccccc\"\nassert solution(\"u\") == \"\"\nassert solution(\"abracadabra\") == \"acdr\"\nassert solution(\"a\") == \"\"\n\"\"\""
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == \"\"\n\"\"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == ''\nassert solution('aaaaa') == 'aaaaa'\nassert solution('abcde') == 'abcde'\n\"\"\"\n\nn, k = map(int, input().split())\ns = input()\n\nfor _ in range(k):\n    left = s[:s.find('a')] + s[s.find('z'):] if 'a' in s else s\n    right = s[:s.rfind('a')] + s[s.rfind('z'):] if 'a' in s else s\n    s = left if left < right else right\n\nprint(s if s else '')\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == \"def\"\n\"\"\"\n\nn, k = map(int, input().split())\ns = input()\n\nwhile k > 0:\n    if s[0] == 'a':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'b':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'c':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'd':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'e':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'f':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'g':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'h':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'i':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'j':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'k':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'l':\n        s = s[1:]\n        k -= 1\n    elif s[0] =='m':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'n':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'o':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'p':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'q':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'r':\n        s = s[1:]\n        k -= 1\n    elif s[0] =='s':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 't':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'u':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'v':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'w':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'x':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'y':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'z':\n        s = s[1:]\n        k -= 1\n    elif s[0] =='':\n        s = s[1:]\n        k -= 1\n    else:\n        s = s[1:]\n        k -= 1\n\nprint(s, end='')\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"cccaabababaccbc\"\n) == \"cccbbabaccbc\"\nassert solution(\n    \"u\"\n) == \"def\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\nassert solution('u') == ''\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('abc') == 'abc'\nassert solution('abcde') == ''\nassert solution('abcdeaa') == 'abcdeaa'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\"\"\"\n\n\"\"\"\n1712\n\"\"\"\n\n\"\"\"\n1801\n\"\"\"\n\n\"\"\"\n1806\n\"\"\"\n\n\"\"\"\n1714\n\"\"\"\n\n\"\"\"\n1809\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1812\n\"\"\"\n\n\"\"\"\n1810\n\"\"\"\n\n\"\"\"\n1819\n\"\"\"\n\n\"\"\"\n1812\n\"\"\"\n\n\"\"\"\n1819\n\"\"\"\n\n\"\"\"\n1815\n\"\"\"\n\n\"\"\"\n1819\n\"\"\"\n\n\"\"\"\n1815\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1810\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1811\n\"\"\"\n\n\"\"\"\n1811\n\"\"\"\n\n\"\"\"\n1813\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1813\n\"\"\"\n\n\"\"\"\n1812\n\"\"\"\n\n\"\"\"\n1809\n\"\"\"\n\n\"\"\"\n1809\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1806\n\"\"\"\n\n\"\"\"\n1804\n\"\"\"\n\n\"\"\"\n1805\n\"\"\"\n\n\"\"\"\n1805\n\"\"\"\n\n\"\"\"\n1805\n\"\"\"\n\n\"\"\"\n1805\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1804\n\"\"\"\n\n\"\"\"\n1803\n\"\"\"\n\n\"\"\"\n1803\n\"\"\"\n\n\"\"\"\n1802\n\"\"\"\n\n\"\"\"\n1803\n\"\"\"\n\n\"\"\"\n1804\n\"\"\"\n\n\"\"\"\n1803\n\"\"\"\n\n\"\"\"\n1806\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1805\n\"\"\"\n\n\"\"\"\n1804\n\"\"\"\n\n\"\"\"\n1802\n\"\"\"\n\n\"\"\"\n1805\n\"\"\"\n\n\"\"\"\n1805\n\"\"\"\n\n\"\"\"\n1803\n\"\"\"\n\n\"\"\"\n1804\n\"\"\"\n\n\"\"\"\n1801\n\"\"\"\n\n\"\"\"\n1802\n\"\"\"\n\n\"\"\"\n1803\n\"\"\"\n\n\"\"\"\n1804\n\"\"\"\n\n\"\"\"\n1804\n\"\"\"\n\n\"\"\"\n1804\n\"\"\"\n\n\"\"\"\n1803\n\"\"\"\n\n\"\"\"\n1802\n\"\"\"\n\n\"\"\"\n1802\n\"\"\"\n\n\"\"\"\n1803\n\"\"\"\n\n\"\"\"\n1804\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1809\n\"\"\"\n\n\"\"\"\n1809\n\"\"\"\n\n\"\"\"\n1804\n\"\"\"\n\n\"\"\"\n1805\n\"\"\"\n\n\"\"\"\n1805\n\"\"\"\n\n\"\"\"\n1806\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1809\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1806\n\"\"\"\n\n\"\"\"\n1805\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1805\n\"\"\"\n\n\"\"\"\n1805\n\"\"\"\n\n\"\"\"\n1805\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1805\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1809\n\"\"\"\n\n\"\"\"\n1806\n\"\"\"\n\n\"\"\"\n1809\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1809\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1809\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1809\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1809\n\"\"\"\n\n\"\"\"\n1809\n\"\"\"\n\n\"\"\"\n1809\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1807\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1808\n\"\"\"\n\n\"\"\"\n1809\n\"\"\"\n\n\"\"\"\n1810\n\"\"\"\n\n\"\"\"\n1811\n\"\"\"\n\n\"\"\"\n1812\n\"\"\"\n\n\"\"\"\n1810\n\"\"\"\n\n\"\"\"\n1813\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1815\n\"\"\"\n\n\"\"\"\n1811\n\"\"\"\n\n\"\"\"\n1813\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1815\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1813\n\"\"\"\n\n\"\"\"\n1815\n\"\"\"\n\n\"\"\"\n1813\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1813\n\"\"\"\n\n\"\"\"\n1815\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1812\n\"\"\"\n\n\"\"\"\n1813\n\"\"\"\n\n\"\"\"\n1815\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1813\n\"\"\"\n\n\"\"\"\n1813\n\"\"\"\n\n\"\"\"\n1815\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1815\n\"\"\"\n\n\"\"\"\n1815\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1815\n\"\"\"\n\n\"\"\"\n1815\n\"\"\"\n\n\"\"\"\n1815\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1815\n\"\"\"\n\n\"\"\"\n1813\n\"\"\"\n\n\"\"\"\n1813\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1813\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1815\n\"\"\"\n\n\"\"\"\n1815\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1815\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1814\n\"\"\"\n\n\"\"\"\n1813\n\"\"\"\n\n\"\"\"\n1813\n\"\"\"\n\n\"\"\"\n1815\n\"\"\"\n\n\"\"\"\n1815"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('c') == 'c'\nassert solution('cc') == ''\nassert solution('ccccc') == ''\nassert solution('cccaaa') == 'cccb'"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n2 3\") == \"2\"\nassert solution(\"2 2\\n1 1\") == \"1\"\nassert solution(\"2 2\\n1 2\") == \"1\"\nassert solution(\"2 2\\n2 1\") == \"1\"\nassert solution(\"1 2\\n3 4\") == \"1\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\"\n\"\"\"\n\nn, m = list(map(int, input().split()))\nk = list(map(int, input().split()))\n\nans = 0\n\nfor _ in range(m):\n    d, t = list(map(int, input().split()))\n    if d * t > 2 * k[t - 1]:\n        ans = max(ans, d * t)\n\nprint(ans)\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2 3 2\") == \"3\"\nassert solution(\"2 2 2 2\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 0 2 0\") == \"2\"\nassert solution(\"1 2 3 0 2 0\") == \"3\"\nassert solution(\"1 2 0 2 0\") == \"1\"\nassert solution(\"1 2 3 0 2 0\") == \"3\"\nassert solution(\"1 2 3 2 0\") == \"8\"\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == 20\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\"\n\"\"\""
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(s) == sol\n\"\"\"\nimport copy\n\nclass Cell:\n    def __init__(self, row, col):\n        self.row = row\n        self.col = col"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n5 5\n.*...\n****.\n.****\n..**.\n.....\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n5 5\n.*...\n***..\n.*...\n.*...\n.....\n\"\"\") == \"-1\"\n\nassert solution(\"\"\"\n3 3\n*.*\n.*.\n*.*\n\"\"\") == \"-1\"\n\nassert solution(\"\"\"\n3 3\n*.*\n.*.\n*.*\n\"\"\") == \"2 2 1\"\n\n\n\"\"\"\n\nYour Task\nSince this is a small task, the whole task is up to you. You just need to return the number of stars in the correct format.\n\nConstraints\n1 \u2264 n,m \u2264 1000\n\nOutput Format\nReturn one integer - the number of stars.\n\nSample TestCase 1\nInput\n6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\nOutput\n3\n3 4 1\n3 5 2\n3 5 1\n\n\"\"\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\", \"*.*\\n.*.\", \"5\") == \"3\"\nassert solution(\"3 2\", \".*.*\\n.*.\", \"4\") == \"3\"\nassert solution(\"3 2\", \"*.*\\n.*.\", \"3\") == \"-1\"\nassert solution(\"3 2\", \"*.*\\n.*.\", \"2\") == \"-1\"\nassert solution(\"3 2\", \"*.*\\n.*.\", \"2\", \"5\") == \"3\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5\\n.*...\\n.*...\\n*.*\\n.*...\\n.....') == '3\\n2 2 1\\n3 3 1'\nassert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3\\n3 4 1\\n3 5 2'\n\nimport itertools"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\\n\"\nassert solution(\"5 5\\n*.*\\n.*.\\n*.*\\n\") == \"-1\\n\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\\n\") == \"-1\\n\"\nassert solution(\"3 3\\n*.*\\n***.\\n*.*\\n\") == \"-1\\n\"\nassert solution(\"5 5\\n.***\\n*.*\\n.*.\\n*.*\\n\") == \"-1\\n\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"-1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\nassert solution(\"3 3\\n.*.*\\n.*.\\n*.*\") == \"-1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n.*\\n.*\\n*.\") == \"2 2 1\"\nassert solution(\"5 5\\n.*\\n****\\n.*\\n.*\\n*.\") == \"3 3 1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"3\"\nassert solution(\"5 5\\n*.*\\n****\\n.*\\n.*\\n*.\") == \"3\"\nassert solution(\"5 5\\n*.*\\n****\\n.*\\n.*\\n*.\") == \"3\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n\") == \"3\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\\n\") == \"2\"\nassert solution(\"3 3\\n*.*\\n**..\\n*.*\\n\") == \"3\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('.*...\\n'\n'...**...\\n'\n'..*****.\\n'\n'...**...\\n'\n'.*...\\n'\n'........') == '3'\n\nassert solution('.*...\\n'\n'******...\\n'\n'...*.***\\n'\n'.*...\\n'\n'........') == '-1'\n\nassert solution('.*...\\n'\n'******...\\n'\n'...*.***\\n'\n'.*...\\n'\n'.....') == '3'\n\nassert solution('.*...\\n'\n'******...\\n'\n'...*.***\\n'\n'.*...\\n'\n'.....') == '3'\n\nassert solution('.*...\\n'\n'******...\\n'\n'...*.***\\n'\n'.*...\\n'\n'.....') == '3'"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('575') == 'Yes'\nassert solution('123') == 'No'\n\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('575') == 'Yes'\nassert solution('111') == 'No'\n\nprint(solution(input()))"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"123\") == \"No\"\n\nprint(solution(\"575\"))\nprint(solution(\"123\"))"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100') == 'Yes'\nassert solution('777') == 'Yes'\nassert solution('357') == 'No'\nassert solution('550') == 'Yes'\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"555\") == \"Yes\"\nassert solution(\"573\") == \"Yes\"\nassert solution(\"575\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('555') == 'Yes'\nassert solution('123') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('575') == 'Yes'\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"575\") == \"Yes\"\nprint(solution(\"575\"))\n\n------------"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100\") == \"Yes\"\nassert solution(\"11\") == \"Yes\"\nassert solution(\"101\") == \"Yes\"\nassert solution(\"111\") == \"Yes\"\nassert solution(\"121\") == \"No\"\n\n\"\"\"\n\n\n\n\"\"\"\n50\n\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"2 2\") == \"Draw\"\nassert solution(\"1 1\") == \"Draw\"\nassert solution(\"4 7\") == \"Bob\"\nassert solution(\"6 5\") == \"Alice\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('6 8') == 'Bob'\nassert solution('6 6') == 'Draw'\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('6 8') == 'Bob'\nassert solution('2 2') == 'Draw'\nassert solution('12 12') == 'Draw'\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"8 6\") == \"Alice\"\nassert solution(\"1 1\") == \"Draw\"\nassert solution(\"10 2\") == \"Alice\"\nassert solution(\"10 10\") == \"Draw\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_01) == \"Alice\"\nassert solution(test_input_02) == \"Bob\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"3 6\") == \"Bob\"\nassert solution(\"2 2\") == \"Draw\"\nassert solution(\"1 1\") == \"Draw\"\nassert solution(\"6 8\") == \"Alice\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('8 7') == 'Bob'\nassert solution('8 8') == 'Draw'\nassert solution('7 8') == 'Bob'\nassert solution('7 9') == 'Alice'\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 6\\n') == 'Alice'\nassert solution('3 5\\n') == 'Bob'\nassert solution('1 1\\n') == 'Draw'\n\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"2 7\") == \"Bob\"\nassert solution(\"7 8\") == \"Draw\"\nassert solution(\"8 8\") == \"Draw\"\nassert solution(\"2 8\") == \"Draw\"\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 8') == 'Bob'\nassert solution('8 7') == 'Alice'\nassert solution('8 7') == 'Draw'\nassert solution('2 8') == 'Alice'\nassert solution('2 8') == 'Bob'\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"sad,newyear,enjoy\") == \"sad newyear enjoy\"\n\n'''\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\"\"\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\"\"\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(',newyear,,') == 'newyear'\nassert solution(',,,') == ''\nassert solution('a,b,c,d,e,f') == 'a b c d e f'\nassert solution('a,b,c,d,e,f,g') == 'a b c d e f g'\nassert solution('a,b,c,d,e,f,g,h') == 'a b c d e f g h'\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"\n\ns = input()\nn = s.count(',')\ns = s.replace(';', ',')\nprint(s.replace(',',''))\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"who,are,you?\") == \"who are you?\"\nassert solution(\"happy,newyear,enjoy!\") == \"happy newyear enjoy!\"\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\"\"\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\nassert solution('hello,, world') == 'hello, world'\nassert solution('hello,,,world') == 'hello,, world'\nassert solution('hello,, world') == 'hello,, world'\nassert solution('hello,, world') == 'hello,, world'\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n2 0\\n0 0\\n-1 0\\n1 0') == '2\\n1'\nassert solution('5 5\\n-1 -1\\n3 5\\n0 0\\n2 3\\n4 1') == '1\\n1\\n1\\n2\\n3'\n\"\"\"\n\nfrom sys import stdin\n\nn, m = map(int, stdin.readline().split())\narr = []\n\nfor _ in range(n):\n    arr.append(tuple(map(int, stdin.readline().split())))\n\npoints = []\n\nfor _ in range(m):\n    points.append(tuple(map(int, stdin.readline().split())))\n\ndistance = []\nfor point in points:\n    min_distance = float('inf')\n    for i in range(len(arr)):\n        p = arr[i]\n        x = abs(point[0] - p[0]) + abs(point[1] - p[1])\n        if x < min_distance:\n            min_distance = x\n    distance.append(min_distance)\n\nprint('\\n'.join(map(str, distance)))\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"2 2\\n-1 0\\n1 0\\n0 0\") == \"2\\n1\"\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n') == '2\\n1'\n\nassert solution('2 2\\n0 0\\n0 0\\n-1 0\\n1 0\\n') == '1'\n\nassert solution('2 2\\n2 0\\n0 0\\n1 0\\n1 0\\n') == '2\\n1'\n\nassert solution('2 2\\n1 0\\n0 0\\n0 1\\n0 1\\n') == '2\\n1'\n\nassert solution('4 2\\n1 1\\n0 0\\n0 1\\n0 1\\n') == '2\\n1'"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\nhttps://www.algoexpert.io/questions/Nearest%20Checkpoint\n\"\"\"\n\n\nclass Solution:\n    def solution(self, input_str: str) -> str:\n        # parse input\n        input_list = list(map(int, input_str.split('\\n')[1:]))\n        n, m = input_list[:2]\n        points = input_list[2:]\n\n        # partition points into checkpoints and students\n        points_dict = dict()\n        checkpoints = list()\n        for i, point in enumerate(points):\n            if point not in points_dict:\n                points_dict[point] = list()\n            points_dict[point].append(i)\n\n            if i < m:\n                checkpoints.append(point)\n\n        # go through every student\n        students = list()\n        for i in range(n):\n            # get student coordinate\n            point = points[i]\n            # get checkpoints near student\n            near_checkpoints = [points_dict[p] for p in points if p - point <= abs(p - point)]\n            # get checkpoints with fewest neighbors\n            nearest_checkpoints = min(near_checkpoints, key=lambda x: len(x))\n            # add student and checkpoint with fewest neighbors\n            students.append((i, nearest_checkpoints[0]))\n\n        # go through every student and find the checkpoint they go to\n        result = [students[0][1]]\n        for i, student in students[1:]:\n            result.append(min(checkpoints, key=lambda x: abs(x - student)))\n\n        return''.join(list(map(str, result)))\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"2 2\\n0 0\\n0 0\\n0 0\\n1 0\") == \"1\\n0\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 2\n2 0\n0 0\n-1 0\n1 0\n''') == '2\\n1'\n\nassert solution('''2 2\n2 0\n0 0\n-1 0\n1 0\n''') == '2\\n1'\n\nassert solution('''2 2\n-1 0\n1 0\n2 0\n''') == '2\\n2'\n\nassert solution('''2 2\n0 0\n-1 0\n1 0\n''') == '1\\n2'\n\nassert solution('''4 4\n1 1\n1 1\n1 1\n1 1\n2 2\n2 2\n2 2\n2 2\n''') == '1\\n2\\n1\\n1'\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n\") == \"2\\n1\"\nassert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n\") == \"1\\n2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\n\"\"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2) == 14\nprint(solution(2))"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == 14\nprint(solution(\"2\"))\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"14\"\nassert solution(\"10\") == \"110\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2) == 14\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == 14\n\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"14\"\nassert solution(\"3\") == \"27\"\nassert solution(\"9\") == \"121\"\n\n\"\"\"\n\nimport ast"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"14\"\nassert solution(\"5\") == \"55\"\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '14'\nprint(solution('2'))"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"14\"\n\n-----Test Cases-----\nYou may use `test_cases.txt` file for testing.\n\nIf you have passed the test cases, the score will be calculated as follows:\n\nFor each input file:\n\n10/10 (TESTCASE_SIZE/INPUT_SIZE)\n\n-----Benchmarks-----\nBenchmark results are accurate to at least six significant digits.\n \n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"14\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n.#\\n.\") == \"Yes\"\nassert solution(\"3 3\\n.#.\\n.#.\\n#.#\") == \"Yes\"\nassert solution(\"4 4\\n...\\n#.#\\n#.#\\n..#\") == \"Yes\"\nassert solution(\"4 5\\n.#.\\n..#\\n.##\\n...\\n....\") == \"Yes\"\nassert solution(\"3 4\\n.#.\\n..#\\n#.#\") == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.') == 'Yes'\nassert solution('2 2\\n##\\n##') == 'No'\nassert solution('5 3\\n####\\n#.#\\n####\\n###\\n###') == 'No'\n\n---------------------------------------------------\n\nYour company built an in-house calendar tool called HiCal. You want to add a feature to see the times in a day when everyone is available.\n\nTo do this, you\u2019ll need to know when any team is having a meeting. In HiCal, a meeting is stored as a tuple \u21b4 of integers (start_time, end_time). These integers represent the number of 30-minute blocks past 9:00am.\n\nFor example:\n\n(2, 3)  # Meeting from 10:00 \u2013 10:30 am\n(6, 9)  # Meeting from 12:00 \u2013 1:30 am\n\nstart_time    end_time        result\n2                3                True\n6                9                True\n2                4                False\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n#.\") == \"Yes\"\nassert solution(\"2 1\\n#.\\n#.\") == \"No\"\n\nassert solution(\"6 5\\n##.#.\\n#..#.\\n#.##.\\n#...#\\n#....\\n#####\") == \"Yes\"\nassert solution(\"6 4\\n##.#.\\n#..#.\\n#.##.\\n#...#\\n#....\\n#####\") == \"No\"\n\nassert solution(\"6 4\\n###.#\\n#..#.\\n#.##.\\n#...#\\n#....\\n#####\") == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n#.#\\n.#.#\\n#.#.\\n.#.#\\n#.#\") == \"Yes\"\nassert solution(\"4 4\\n#...\\n.#.#\\n#...\\n#...\\n\") == \"No\"\n\n\"\"\"\n\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 \u00ab\u041f\u043e\u0438\u0441\u043a \u0432 \u0437\u0430\u043f\u0430\u0434\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438\u00bb\n\u0414\u0430\u043d \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0438 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: i \u0438 j.\n\n\u041f\u043e\u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0441 \u043d\u043e\u043c\u0435\u0440\u0430\u043c\u0438 i \u0438 j \u0438 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043e\u0444\u043e\u0440\u043c\u0438\u0442\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 swap_columns(a, i, j).\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432, \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u043e\u0435 \u0441\u043c\u0435\u043d\u0443 \u0438 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: i \u0438 j.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435:\n\u041c\u0430\u0441\u0441\u0438\u0432 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c, \u043a\u0430\u043a \u043e\u043d \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439.\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n3 4\\n5 6\\n7 8\\n9\") == \"Yes\"\n\n\"\"\"\n\n\nimport re\n\nN, M = [int(x) for x in re.findall(r'\\d+', input())]\nA = []\nfor _ in range(N):\n    A.append(input())\nB = []\nfor _ in range(M):\n    B.append(input())"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 2\n.#.\n.#.\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n.#..#\\n.....\\n#####\\n....#\\n...##\") == \"Yes\"\nassert solution(\"3 3\\n#.#\\n...\\n#.#\") == \"No\"\n\n\"\"\"\n\n\"\"\"\nTest.describe('Example Tests')\nTest.assert_equals(solution('4 4\\n.#..#\\n.....\\n#####\\n....#\\n...##'), 'Yes')\nTest.assert_equals(solution('3 3\\n#.#\\n...\\n#.#'), 'No')\nTest.assert_equals(solution('5 5\\n...#.#.\\n#.#.##.\\n.#.#.#.\\n.#...#.\\n.#..##'), 'No')\nTest."
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 2\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.#\") == \"Yes\"\nassert solution(\"3 2\\n#.\\n.#\\n#.\\n#\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 5 2') == '53'\n\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n\na, b, c = map(int, input().split())\n\nprint(max(a+b, a+c, b+c))\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 5 2') == '53'\n\"\"\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 5 2') == '53'\n\n---\n<a id=\"final\"></a>\n### Final\n\nThere are some more bonuses to the task. You can do the following:\n\n- You can make the task a little easier or harder, depending on the difficulty level you choose.\n- You can test your solution by submitting it to our server and seeing whether it works correctly or not.\n\n## Time limit\nIn the first test the time limit for the submissions to the Online Judge was 1.00 sec (capped at 1.00) for all test sets.\n\n## Memory limit\nThere are no memory limits for the test sets, but you need to make sure that your solution fits into memory.\n\n## Test sets\nFor each of the following difficulty levels, the maximum amount of test sets is 1.\n\n* Easy: 1.5 tests per test set\n* Medium: 2.0 tests per test set\n* Hard: 3.0 tests per test set\n\nFor each test set, there are multiple difficulty levels and the numbers of tests per level depends on the difficulty level. For each of the tests, there are the following limits:\n\n* Easy:\n* Medium:\n* Hard:\n\n## Rules\nYou should make sure that your solution for the test sets of the level easy will pass all the tests in the level medium and medium will pass all the tests in the level hard.\n\nIn the test set for the level easy, the maximum number of test that can be solved at the same time is 1.\nIn the test set for the level medium, the maximum number of test that can be solved at the same time is 2.\nIn the test set for the level hard, the maximum number of test that can be solved at the same time is 3.\n\n### Bonus\nFor each test set, there are multiple difficulty levels and the numbers of tests per level depends on the difficulty level.\n\nFor each of the tests, there is a difficulty level and the following limits:\n\n* Easy: 2.0\n* Medium: 3.0\n* Hard: 5.0\n\nFor each of the tests, there are 5 difficulty levels and the numbers of tests for each level depends on the difficulty level.\n\nIf the test set is easy, then the maximum number of tests that can be solved at the same time is 2.\nIf the test set is medium, then the maximum number of tests that can be solved at the same time is 3.\nIf the test set is hard, then the maximum number of tests that can be solved at the same time is 5.\n\n## Bonus 1\nYou can only solve one test at a time for each difficulty level.\n\n## Bonus 2\nYou can solve all the tests in the test set in one go, for example:\n\n* Medium: all tests from the easy, medium and hard levels will be solved.\n* Hard: all tests from the easy, medium and hard levels will be solved.\n\n## Bonus 3\nThere are no limits on the number of tests you can solve in one go, and you can solve as many tests as you want in one go.\n\n## Bonus 4\nYou can make the test set harder by adding a new test with the value of 5 in the difficulty level.\n\n## Bonus 5\nThe maximum amount of the allowance can be from 1 to 100.\n\n## Bonus 6\nThe maximum amount of the allowance can be from 1 to 1000.\n\n## Bonus 7\nYou can make the test set easier by deleting some tests and making their values equal to 0.\n\n## Bonus 8\nYou can only solve one test at a time.\n\n## Bonus 9\nYou can solve a specific test or tests.\n\n## Bonus 10\nYou can add a new difficulty level.\n\n## Bonus 11\nYou can delete a specific difficulty level.\n\n## Bonus 12\nYou can have a new test with the value of 5 in the difficulty level.\n\n## Bonus 13\nYou can solve as many tests as you want, but you cannot solve more than the maximum number of tests for the difficulty level.\n\n## Bonus 14\nYou cannot delete a specific test.\n\n## Bonus 15\nYou can always solve more than one tests if needed.\n\n## Bonus 16\nYou can only have a new difficulty level at the beginning of the test set.\n\n## Bonus 17\nYou can always solve more than one tests if needed.\n\n## Bonus 18\nYou can only have a new difficulty level at the beginning of the test set.\n\n## Bonus 19\nYou can always solve more than one tests if needed.\n\n## Bonus 20\nYou can only have a new difficulty level at the beginning of the test set.\n\n## Bonus 21\nYou can always solve more than one tests if needed.\n\n## Bonus 22\nYou can have a new test with the value of 5 in the difficulty level.\n\n## Bonus 23\nYou can have a new difficulty level at the beginning of the test set.\n\n## Bonus 24\nYou can have a new test with the value of 5 in the difficulty level.\n\n## Bonus 25\nYou can have a new difficulty level at the beginning of the test set.\n\n## Bonus 26\nYou can have a new test with the value of 5 in the difficulty level.\n\n## Bonus 27\nYou can have a new difficulty level at the beginning of the test set.\n\n## Bonus 28\nYou can have a new difficulty level at the beginning of the test set.\n\n## Bonus 29\nYou can have a new test with the value of 5 in the difficulty level.\n\n## Bonus 30\nYou can have a new difficulty level at the beginning of the test set.\n\n## Bonus 31\nYou can have a new test with the value of 5 in the difficulty level.\n\n## Bonus 32\nYou can have a new difficulty level at the beginning of the test set.\n\n## Bonus 33\nYou can have a new difficulty level at the beginning of the test set.\n\n## Bonus 34\nYou can have a new test with the value of 5 in the difficulty level.\n\n## Bonus 35\nYou can have a new difficulty level at the beginning of the test set.\n\n## Bonus 36\nYou can have a new test with the value of 5 in the difficulty level.\n\n## Bonus 37\nYou can have a new difficulty level at the beginning of the test set.\n\n## Bonus 38\nYou can have a new difficulty level at the beginning of the test set.\n\n## Bonus 39\nYou can have a new test with the value of 5 in the difficulty level.\n\n## Bonus 40\nYou can have a new difficulty level at the beginning of the test set.\n\n## Bonus 41\nYou can have a new test with the value of 5 in the difficulty level.\n\n## Bonus 42\nYou can have a new difficulty level at the beginning of the test set.\n\n## Bonus 43\nYou can have a new test with the value of 5 in the difficulty level.\n\n## Bonus 44\nYou can have a new difficulty level at the beginning of the test set.\n\n## Bonus 45\nYou can have a new test with the value of 5 in the difficulty level.\n\n## Bonus 46\nYou can have a new difficulty level at the beginning of the test set.\n\n## Bonus 47\nYou can have a new test with the value of 5 in the difficulty level.\n\n## Bonus 48\nYou can have a new difficulty level at the beginning of the test set.\n\n## Bonus 49\nYou can have a new test with the value of 5 in the difficulty level.\n\n## Bonus 50\nYou can have a new difficulty level at the beginning of the test set.\n\n## Bonus 51\nYou can have a new test with the value of 5 in the difficulty level.\n\n## Bonus 52\nYou can have a new difficulty level at the beginning of the test set.\n\n## Bonus 53\nYou can have a new test with the value of 5 in the difficulty level.\n\n## Bonus 54\nYou can have a new difficulty level at the beginning of the test set.\n\n## Bonus 55\nYou can have a new test with the value of 5 in the difficulty level"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"6\"\nassert solution(\"1 5 2\") == \"53\"\n\"\"\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 5 2') == '53'\n\n\"\"\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\n-----\n1 5 2\n53\n-----\nassert solution(\"1 5 2\") == \"53\"\n\n-----\n1 5 2\n53\n-----\nassert solution(\"1 5 2\") == \"53\"\n\n-----\n1 5 2\n53\n-----\nassert solution(\"1 5 2\") == \"53\"\n\n-----\n1 5 2\n53\n-----\nassert solution(\"1 5 2\") == \"53\"\n\n-----\n1 5 2\n53\n-----\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n4980\\n7980\\n6980') == '15950'\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4980\\n7980\\n6980\\n\") == '15950'\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4980\\n7980\\n6980\") == 15950\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n4980\\n7980\\n6980') == '15950'\nprint('Test passed')\n\n-----\n1.2.2\n\n\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 print().\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b, \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u0432\u0435\u0434\u0435\u043d 0. \u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0431\u0443\u0434\u0435\u0442 \u0432\u0432\u0435\u0434\u0435\u043d 0 (\u043d\u043e\u043b\u044c), \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d:\n\n- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b (\u0437\u0430\u0432\u0435\u0440\u0448\u0430\u044e\u0449\u0438\u0439 0 \u043d\u0435 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f)\n- \u0418\u0445 \u0441\u0443\u043c\u043c\u0443\n- \u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 (\u043d\u0435 \u0441\u0447\u0438\u0442\u0430\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u044e\u0449\u0435\u0433\u043e \u0447\u0438\u0441\u043b\u0430 0)\n- \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n- \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0451\u0442\u043d\u044b\u0445 \u0438 \u043d\u0435 \u0447\u0451\u0442\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043e\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044e\u0449\u0430\u044f\u0441\u044f \u0447\u0438\u0441\u043b\u043e\u043c 0 (\u0441\u0430\u043c\u043e \u0447\u0438\u0441\u043b\u043e 0 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0435 \u0432\u0445\u043e\u0434\u0438\u0442).\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442\u044b \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e, \u043f\u043e\u0442\u043e\u043c \u0441\u0443\u043c\u043c\u0443, \u043f\u043e\u0442\u043e\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435, \u043f\u043e\u0442\u043e\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n\u041a\u0430\u0436\u0434\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\nSample Input:\n\n1\n23\n4\n0\n0\n0\n\nSample Output:\n\n4\n46\n5.666666666666667\n23\n1\n0\n\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n4980\\n7980\\n6980\\n') == '15950'\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n4980\\n7980\\n6980') == '15950'\n\"\"\"\n\nn = int(input())\n\nprice = list(map(int, input().split()))\n\nprice.sort()\n\ntotal = 0\n\nfor i in range(n):\n    if i % 2 == 0:\n        total += price[i]\nprint(total)"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\nprint(\"Test 1 PASSED\")\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n4980\\n7980\\n6980\\n') == '15950'\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3\n4980\n7980\n6980\n''') == '15950'\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n4\\n\") == \"9\\n\"\nassert solution(\"3\\n4980\\n7980\\n6980\\n\") == \"15950\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"29\\n20\\n7\\n35\\n120\"\n) == \"215\"\n\"\"\"\n\nimport sys\n\nA, B, C, D, E = [int(i) for i in sys.stdin.readlines()]"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('10') == '10'\nassert solution('20') == '20'\nassert solution('29') == '29'\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\nassert solution(\"7 5 12 40\") == \"33\"\n\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom typing import List, Optional\n\n@dataclass\nclass Order:\n    dishes: List[str]\n    start: Optional[int] = field(default=None)\n    finish: Optional[int] = field(default=None)\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''29\n20\n7\n35\n120''') == '215'\n\n'''\n--- Part Two ---\nE869120 still has to wait for the last dish to be delivered. Now, he's curious to know how long it will take to get the last dish out of the restaurant.\n\nThe cook's mood can be in one of the following two states:\n\nhappy: they are happy and want to cook as fast as possible.\ngrumpy: they are grumpy and want to cook in a slow but healthy way.\nHere, we denote the mood of the cook by the string happy or grumpy.\nThe kitchen produces three types of food:\n\ncookable: the kitchen can prepare food of this type in exactly the time it takes to prepare food of that type.\nuncookable: the kitchen can prepare food of this type, but the time it takes to prepare food of that type is not known to the cook.\ncookbook: the cookbook consists of different types of food that can be prepared in any way within a given amount of time.\nGiven the starting and ending time of cooking for the dishes in the order they were delivered, your task is to determine how long it will take to prepare the last dish for the cook.\n\nFor example, when the mood is happy:\n\ncookable: chicken and rice in 10 minutes\nuncookable: stew in 20 minutes\ncookbook: soup in 30 minutes\nAll dishes can be prepared in 30 minutes.\nWhen the mood is grumpy:\n\ncookable: food that takes 1 minute to cook\nuncookable: food that takes 2 minutes to cook\ncookbook: food that takes 30 minutes to cook\nYou can start cooking the dishes as soon as you receive them.\nThe kitchen produces only one dish per minute, and you can start cooking as soon as you receive a dish.\n\nFor example, suppose the mood is happy.\n\ncookable: chicken in 10 minutes\nuncookable: rice in 20 minutes\ncookbook: soup in 30 minutes\nWhen you receive a cookable dish, you can start to cook it immediately.\nWhen you receive an uncookable dish, you can start to cook it in 20 minutes.\nWhen you receive a cookbook, you can start to cook it in 30 minutes.\nNote that you can only cook a single dish at a time, but you can start to cook a new dish as soon as you finish cooking the previous one.\n\nWhat is the longest time it will take to cook the last dish?\n\n-----Constraints-----\n - A, B, C, D and E are integers between 1 and 123 (inclusive).\n - The kitchen can cook food of any type at all times.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nhappy\nuncookable\ncookable\ncookbook\n\n-----Output-----\nPrint a single integer denoting the longest time it will take to cook the last dish.\n\n-----Sample Input-----\nhappy\nuncookable\ncookable\ncookbook\n\n-----Sample Output-----\n20\n\nIf the mood is happy, the cook prepares the food in 10 minutes.\nIf the mood is grumpy, the cook prepares the food in 20 minutes.\nIn either case, the cookbook is prepared in 30 minutes.\n\nThe longest time the cook will need to cook the last dish is 20 minutes.\n'''"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n10 30') == '7.5'\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 30') == '7.5'\n\"\"\"\n\nN = int(stdin.readline().rstrip())\na = [int(stdin.readline().rstrip()) for i in range(N)]\n\ntotal = 0\nfor i in range(N):\n    total += 1 / a[i]\n\nprint(total)"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '2\\n10 30') == '7.5'\nassert solution(\n    '2\\n10 30') == '7.5'\n\n\"\"\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 30\") == \"7.5\"\n\"\"\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 30\\n') == '7.5'\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n6 3 8 9 5') == '5'\nassert solution('2\\n10 30') == '7.5'\n\"\"\"\n\n\"\"\"\nFind the (multiplicative) inverse of the sum of the inverses of these numbers, \\frac{1}{\\frac{1}{A_1} + \\frac{1}{A_2} + \\cdots + \\frac{1}{A_N}}.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq A_i \\leq 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\ldots A_N\n\n-----Output-----\nPrint a decimal number (or an integer) representing the value of \\frac{1}{\\frac{1}{A_1} + \\frac{1}{A_2} + \\cdots + \\frac{1}{A_N}}.\nYour output will be judged correct when its absolute or relative error from the judge's output is at most 10^{-5}.\n\n-----Sample Input-----\n5\n10 30\n\n-----Sample Output-----\n7.5\n\n\\frac{1}{\\frac{1}{10} + \\frac{1}{30}} = \\frac{1}{\\frac{4}{30}} = \\frac{30}{4} = 7.5.\nPrinting 7.50001, 7.49999, and so on will also be accepted.\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 30\\n\") == \"7.5\"\n\"\"\"\nfrom math import gcd\nfrom functools import reduce"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 30\") == \"7.5\"\nprint(solution(\"10 30\"))\n\nimport math\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 30\") == \"7.5\"\nassert solution(\"1 2\") == \"0.5\"\nassert solution(\"10 10\") == \"1\"\nassert solution(\"3 9\") == \"0.3333333333333333333333333333\"\nassert solution(\"1000 1000\") == \"1\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2') == '0.5'\nassert solution('3\\n10 100') == '0.2475'\n\"\"\"\n\nimport math\nfrom typing import Iterator, List\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12') == 2\n\"\"\"\n\nimport sys\n\nN, K = [int(i) for i in sys.stdin.readline().strip().split()]\narr = sorted([int(i) for i in sys.stdin.readline().strip().split()])\n\nprint(arr[K-1]-arr[0])"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12\\n') == '2'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"5 3\\n10\\n15\\n11\\n14\\n12\"\n) == 2\n\"\"\"\n\n\n\nfrom collections import namedtuple, deque\nfrom enum import Enum\nfrom typing import List, NamedTuple\n\nTestCase = namedtuple(\"TestCase\", [\"num_trees\", \"num_lights\", \"heights\"])\n\n\nclass State(Enum):\n    OPEN = 1\n    CLOSE = 0\n\n\nclass Solution:\n    def __init__(self, test_cases: List[TestCase]) -> None:\n        self.test_cases = test_cases\n\n    def solution(self) -> str:\n        pass\n\n    def run(self) -> None:\n        for test_case in self.test_cases:\n            print(f\"{test_case.num_trees} {test_case.num_lights} {test_case.heights}\")\n            print(f\"{self.solution()}\")\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n10 15 11 14 12\\n') == '2'\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12') == 2\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12\\n') == '2'\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 3\n10\n15\n11\n14\n12''') == '2'\n\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == 2\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"B\") == \"A\"\nassert solution(\"A\") == \"a\"\n\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"B\") == \"A\"\nassert solution(\"b\") == \"a\"\n\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a') == 'a'\nassert solution('b') == 'A'\nassert solution('A') == 'A'\n\nassert solution('B') == 'A'\nassert solution('C') == 'C'\n\n-----Explanation-----\nB is uppercase, so we should print A.\nA is uppercase, so we should print A.\nC is uppercase, so we should print C.\n\"\"\"\n\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_solution1(self):\n        self."
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\nassert solution('A') == 'A'\n\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\n\"\"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\u2018B\u2019) == \u2018A\u2019\nassert solution(\u2018b\u2019) == \u2018a\u2019\n\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"B\") == \"A\"\nassert solution(\"b\") == \"a\"\nassert solution(\"a\") == \"a\"\nassert solution(\"A\") == \"A\"\nassert solution(\"a\") == \"a\"\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"B\") == \"A\"\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('A') == 'A'\nassert solution('a') == 'a'\nassert solution('B') == 'A'\nassert solution('b') == 'a'\nassert solution('C') == 'C'\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 2\\n\"\n    \"0 2\\n\"\n    \"0 1\\n\"\n    \"2 0\\n\"\n    \"0 1\\n\"\n    \"1 1\\n\"\n    \"1 2\\n\"\n    \"1 0\\n\"\n    \"0 2\\n\"\n) == \"6\"\nprint(\"test passed\")\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2') == '6'\nassert solution('2 4') == '0'\nassert solution('1 5') == '0'\nassert solution('3 6') == '6'\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n') == '6'\nassert solution('2 2\\n') == '6'\n\nassert solution('3 2\\n') == '3'\n\nassert solution('1 2\\n') == '0'\n\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2') == '6'\nassert solution('1 1') == '1'\n\"\"\"\n\nfrom collections import Counter\n\nK, S = input().split()\nK, S = int(K), int(S)\n\ncombinations = [[0, 0, K], [0, K, 0], [K, 0, 0], [K, K, K], [0, S-2*K, K], [S-K, S-K, K]]\nprint(len(list(filter(lambda x: sum(x) == S, combinations))))\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n') == 6\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n\") == \"6\"\nassert solution(\"2 2\\n\") == \"6\"\nassert solution(\"2 3\\n\") == \"0\"\nassert solution(\"2 0\\n\") == \"1\"\nassert solution(\"1 2\\n\") == \"0\"\n\"\"\"\n\nK, S = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n\") == '6'\nprint(solution(stdin))\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\n\"\"\"\n\n\"\"\"\nYou are given three integers X, Y, and Z representing the dimensions of a cuboid along with an integer N. You have to print a list of all possible coordinates given by (i, j, k) on a 3D grid where the sum of i+j+k is not equal to N. Here, 0<=i<=X, 0<=j<=Y, 0<=k<=Z.\nInput Format\nThe first line contains the space separated values of X, Y, Z and N.\nOutput Format\nPrint the list in a sorted order.\nConstraints\n- 1<=X<=10\n- 1<=Y<=10\n- 1<=Z<=10\n- 1<=N<=10^9\nSample Input 0\n1 1 1 2\nSample Output 0\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\n\"\"\"\n\n\"\"\"\nYou are given three integers X, Y, and Z representing the dimensions of a cuboid along with an integer N. You have to print a list of all possible coordinates given by (i, j, k) on a 3D grid where the sum of i+j+k is not equal to N. Here, 0<=i<=X, 0<=j<=Y, 0<=k<=Z.\nInput Format\nThe first line contains the space separated values of X, Y, Z and N.\nOutput Format\nPrint the list in a sorted order.\nConstraints\n- 1<=X<=10\n- 1<=Y<=10\n- 1<=Z<=10\n- 1<=N<=10^9\nSample Input 0\n1 1 1 2\nSample Output 0\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\n\"\"\"\n\n\"\"\"\nYou are given an integer,. Your task is to print an alphabet rangoli of size. (Rangoli is a form of Indian folk art based on creation of patterns.)\nDifferent sizes of alphabet rangoli are shown below:\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2') == '3'\nassert solution('2 2') == '6'\nassert solution('2 3') == '0'\nassert solution('2 2') == '6'\nassert solution('1 100') == '0'\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('2060') == 'MMYY'\nassert solution('1920') == 'AMBIGUOUS'\nassert solution('1901') == 'NA'\n\"\"\"\n\nS = input()\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '1905'\n) == 'YYMM'\nassert solution(\n    '2002'\n) == 'MMYY'\nassert solution(\n    '19'\n) == 'AMBIGUOUS'\nassert solution(\n    '200'\n) == 'AMBIGUOUS'\nassert solution(\n    '190501'\n) == 'YYMM'\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1905') == 'YYMM'\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin), file=sys.stdout)"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1915\") == \"YYMM\"\nassert solution(\"190519\") == \"AMBIGUOUS\"\nassert solution(\"1105\") == \"MMYY\"\nassert solution(\"191515\") == \"AMBIGUOUS\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1912\") == \"MMYY\"\nassert solution(\"191231\") == \"AMBIGUOUS\"\nassert solution(\"1913\") == \"NA\"\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905-05\") == \"YYMM\"\nassert solution(\"2005-5\") == \"YYMM\"\nassert solution(\"05-1905\") == \"MMYY\"\nassert solution(\"1905-5\") == \"YYMM\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1913\") == \"YYMM\"\nassert solution(\"1912\") == \"YYMM\"\nassert solution(\"1312\") == \"YYMM\"\nassert solution(\"1313\") == \"YYMM\"\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1905') == 'YYMM'\nassert solution('2020') == 'YYMM'\nassert solution('2020') == 'MMYY'\nassert solution('20') == 'YYMM'\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3''') == '2'\nassert solution('''2''') == '2'\nassert solution('''1''') == '0'\nassert solution('''0''') == '0'\n\nassert solution('''3\n4''') == '2'\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '4'\nassert solution('8') == '7'\nassert solution('10') == '9'\n\"\"\"\n\nK = int(input())"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n3\\n') == '3'\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == '0'\nassert solution('5') == '1'\nassert solution('6') == '2'\nassert solution('7') == '3'\nassert solution('8') == '4'\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"0\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"5 5\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n') == '2'\nprint('Test pass.')\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n\") == 5\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n') == '6'\nassert solution('2\\n3\\n') == '4'\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n') == '4\\n'\nassert solution('1\\n') == '0\\n'\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'null'\nassert solution('6 6') == '18'\nassert solution('9 12') == '21'\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9 12') == '21'\n\"\"\"\n\na, b = map(int, stdin.readline().split())\nprint((a + b) % 12)\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 12\") == \"21\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9 12') == '21'"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9 12') == '21'\n\n\"\"\"\n\nimport math\n\ninput_str = input()\nt, n = input_str.split()\nt = int(t)\nn = int(n)"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '2'\nassert solution('9 13') == '18'\nassert solution('1 3') == '2'\nassert solution('1 10') == '11'\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 12\\n') == '21'\n\"\"\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '9 12'\n) == '21'\n\"\"\"\nimport os\nimport sys\nimport unittest\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9 12') == '21'"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9 12\\n') == '21'\n\"\"\"\n\nfrom typing import Tuple\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"\n\nN, R = stdin.split(\" \")\nN, R = int(N), int(R)"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == OUTPUT\n\"\"\"\n\nn, r = map(int, input().split())\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 31\\n5 314\\n10 314\") == \"3 314\\n5 314\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2919\\n\") == \"3719\"\n\"\"\"\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2919\\n') == '3719'"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2919') == '3719'\nassert solution('3 4012') == '4121'\nassert solution('3 1301') == '3231'\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2919\\n') == '3719'\n\"\"\"\nimport sys"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2919\") == \"3719\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 2919\"\n) == \"3719\"\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 2919''') == '3719'\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11 2') == 4\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11 2') == '4'\nprint(solution(\"11 2\"))\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 2\") == \"4\"\n\"\"\"\n\n\"\"\"\n11 2\n\"\"\"\n\nimport unittest\nimport sys\n\nclass Solution:\n    def digitcount(self, n: int, k: int) -> int:\n        d = 0\n        while n:\n            n //= k\n            d += 1\n        return d\n\nclass TestCases(unittest.TestCase):\n    def test_1(self):\n        \"\"\"\n        11 2\n        \"\"\"\n        sol = Solution()\n        self.assertEqual(sol.digitcount(11, 2), 4)\n\n    def test_2(self):\n        \"\"\"\n        2 3\n        \"\"\"\n        sol = Solution()\n        self.assertEqual(sol.digitcount(2, 3), 1)\n\n    def test_3(self):\n        \"\"\"\n        0 2\n        \"\"\"\n        sol = Solution()\n        self.assertEqual(sol.digitcount(0, 2), 0)\n\n    def test_4(self):\n        \"\"\"\n        3 2\n        \"\"\"\n        sol = Solution()\n        self.assertEqual(sol.digitcount(3, 2), 2)\n\n    def test_5(self):\n        \"\"\"\n        10 3\n        \"\"\"\n        sol = Solution()\n        self."
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 2') == 4\nassert solution('12345 5 2') == 8\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 2\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 2\") == 4\n\"\"\"\nfrom math import log10"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 2\") == \"4\"\n\n-------\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 2\") == 4\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 2\") == 4\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'''4\n''') == \"2\"\nassert solution(\n'''3\n''') == \"2\"\nassert solution(\n'''1\n''') == \"1\"\nassert solution(\n'''5\n''') == \"3\"\nassert solution(\n'''8\n''') == \"3\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(5) == 3\nprint(solution(5))\n\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == '3'\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == '3'\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"3\"\nprint(solution(\"4\"))\nprint(solution(\"3\"))\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == '3'\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == '3'\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n5\\n1') == '3\\n2\\n1'\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\") == 'Yay!'\n\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '5 4'\n) == 'Yay!'\n\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4') == 'Yay!'\nassert solution('8 8') == 'Yay!'\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 4\\n') == 'Yay!'\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\nassert solution(\"6 7\") == \"Yay!\"\nassert solution(\"4 10\") == \"Yay!\"\nassert solution(\"5 9\") == \"Yay!\"\nassert solution(\"1 16\") == \"Yay!\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4') == 'Yay!'\nassert solution('4 3') == ':(\n\n'''"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(sys.stdin.read())) == str(sys.stdin.read())\n\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1234567876') == '34'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n\n\"\"\"\nInput\n\n8912\n\nOutput\n\n34\n\nExplanation\n\nTaking out the seventh to the ninth digits results in X = 891. With 753, the difference is 34.\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1234567876') == '34'\n\"\"\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n\n\"\"\"\nOur task is to return the minimum absolute difference between X and 753.\n\nFor example, given S = 1234567876, X = 787, we will obtain the minimum difference.\n\nS[0] - 753 = 34\nS[1] - 753 = 33\nS[2] - 753 = 32\nS[3] - 753 = 31\nS[4] - 753 = 30\nS[5] - 753 = 29\nS[6] - 753 = 28\nS[7] - 753 = 27\nS[8] - 753 = 26\nS[9] - 753 = 25\n\nNow we take X and S, and substract these.\n\nX - 753 = 786\n\nIf we substract X and 753, we get a positive difference:\n\nS[0] - 753 - 786 = -386\nS[1] - 753 - 786 = -385\nS[2] - 753 - 786 = -384\nS[3] - 753 - 786 = -383\nS[4] - 753 - 786 = -382\nS[5] - 753 - 786 = -381\nS[6] - 753 - 786 = -380\nS[7] - 753 - 786 = -379\nS[8] - 753 - 786 = -378\nS[9] - 753 - 786 = -377\n\nAnd if we substract X and 753, we get a negative difference:\n\nS[0] - 753 - 786 = 386\nS[1] - 753 - 786 = 385\nS[2] - 753 - 786 = 384\nS[3] - 753 - 786 = 383\nS[4] - 753 - 786 = 382\nS[5] - 753 - 786 = 381\nS[6] - 753 - 786 = 380\nS[7] - 753 - 786 = 379\nS[8] - 753 - 786 = 378\nS[9] - 753 - 786 = 377\n\nSo the minimum absolute difference is from 786 to -377.\n\nS[0] - 753 = -386\nS[1] - 753 = -385\nS[2] - 753 = -384\nS[3] - 753 = -383\nS[4] - 753 = -382\nS[5] - 753 = -381\nS[6] - 753 = -380\nS[7] - 753 = -379\nS[8] - 753 = -378\nS[9] - 753 = -377\n\nThe minimum absolute difference can be obtained by taking the absolute values of these differences, so we have:\n\nabs(S[0] - 753) = abs(-386) = 386\nabs(S[1] - 753) = abs(-385) = 385\nabs(S[2] - 753) = abs(-384) = 384\nabs(S[3] - 753) = abs(-383) = 383\nabs(S[4] - 753) = abs(-382) = 382\nabs(S[5] - 753) = abs(-381) = 381\nabs(S[6] - 753) = abs(-380) = 380\nabs(S[7] - 753) = abs(-379) = 379\nabs(S[8] - 753) = abs(-378) = 378\nabs(S[9] - 753) = abs(-377) = 377\n\nThe minimum absolute difference is therefore 786.\n\nWe can also obtain the minimum absolute difference from S[0] - 753, S[1] - 753, S[2] - 753 and so on.\n\nabs(S[0] - 753) = abs(-386) = 386\nabs(S[1] - 753) = abs(-385) = 385\nabs(S[2] - 753) = abs(-384) = 384\nabs(S[3] - 753) = abs(-383) = 383\nabs(S[4] - 753) = abs(-382) = 382\nabs(S[5] - 753) = abs(-381) = 381\nabs(S[6] - 753) = abs(-380) = 380\nabs(S[7] - 753) = abs(-379) = 379\nabs(S[8] - 753) = abs(-378) = 378\nabs(S[9] - 753) = abs(-377) = 377\n\nThe minimum absolute difference is therefore 786.\n\nIn conclusion, we can return 786.\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\nimport unittest\nimport sys\nimport io\n\nclass Test(unittest.TestCase):\n    def test_solution1(self):\n        capturedOutput = io.StringIO()\n        sys.stdout = capturedOutput\n        solution(\"1234567876\")\n        sys.stdout = sys.__stdout__\n        self.assertEqual(capturedOutput.getvalue(), \"34\\n\")\n\n    def test_solution2(self):\n        capturedOutput = io.StringIO()\n        sys.stdout = capturedOutput\n        solution(\"567\")\n        sys.stdout = sys.__stdout__\n        self.assertEqual(capturedOutput.getvalue(), \"56\\n\")"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 2 1000000000 4 6 8 4 2\") == \"2999999987 2\"\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 0 13 26 52') == '12 13'\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 52 0 13 26 52') == '12 13'\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 52 0 13 26 52') == '12 13'"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1 2'\nassert solution('1 2 3') == '1 2 3'\nassert solution('1 2 3 4') == '1 2 3 4'\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\""
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\""
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 52 0 13 26 52') == '12 13'\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n\nprint(\"The second mission in series is completed.\")\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 2 2\") == 2\n\"\"\"\n\nfrom collections import defaultdict\n\nn = int(input())\n\ncontests = list(map(int, input().split()))\n\ncounter = defaultdict(int)\n\nfor i in range(n):\n    counter[i] = contests[i]\n\nl = max(counter.values())\n\nres = l\n\nfor i in range(n):\n    if i < l:\n        res += 1\n    else:\n        res += l - counter[i] + 1\n\nprint(res)\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 2 2\\n\") == 2\nassert solution(\"3 1 4 1\\n\") == 3\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\ncur_day = 1\nmax_day = 1\n\nwhile a:\n    if cur_day < a[0]:\n        cur_day += 1\n    else:\n        a.pop(0)\n        cur_day += 1\n        max_day = max(max_day, cur_day)\n\nprint(max_day)"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 4 1\") == \"3\"\nassert solution(\"3\\n1 1 4 1\") == \"1\"\n\"\"\"\n\nimport sys\nimport bisect\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 1\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"5 1 1 2 2\") == \"2\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 4 1\") == \"3\"\nassert solution(\"3 1 4 1\") == \"1\"\nassert solution(\"3 1 4 1\") == \"1\"\n\"\"\"\nimport math\nfrom collections import defaultdict"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 4 1\\n3 1 4 1\") == '3'\nassert solution(\"3 1 4 1\\n2 1 4 1\") == '2'\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 4 1\\n3 1 4 1') == '3'\nassert solution('3 1 4 1\\n1 1 1') == '1'\nassert solution('5 1 4 1\\n1 1 1 2 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2 1\\n3 1 4 1\\n5 1 6 1\\n1 1 1 1\") == \"3\"\nassert solution(\"3 1 4 1\\n1 1 1 1\") == \"1\"\nassert solution(\"6 1 1 2 2 2\\n1 1 1 1 1 1\") == \"2\"\n\nprint(solution(\"4 1 2 1\\n3 1 4 1\\n5 1 6 1\\n1 1 1 1\"))\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 1 4 1\\n') == 3\n\"\"\""
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n1 1 1\n''') == '1'\nassert solution('''4\n1 1 1 2 2\n''') == '2'\nassert solution('''5\n1 1 1 2 2\n''') == '3'\nassert solution('''3\n1 1 2\n''') == '1'\nassert solution('''5\n1 1 1 2 2\n''') == '2'\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\\n4 2\\n\"\nassert solution(\"2 0\") == \"1\\n1 2\\n\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\\n4 2\"\nassert solution(\"2 0\") == \"1\\n1 2\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"5 5\\n1 2\\n1 3\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\") == \"4\\n5 7\"\n\"\"\"\n\n\nfrom typing import List\n\n\nclass UnionFind:\n    def __init__(self, n: int):\n        self.parents = [i for i in range(n)]\n\n    def find(self, i: int) -> int:\n        if i!= self.parents[i]:\n            self.parents[i] = self.find(self.parents[i])\n        return self.parents[i]\n\n    def union(self, i: int, j: int):\n        pi = self.find(i)\n        pj = self.find(j)\n        if pi!= pj:\n            self.parents[pj] = pi\n\n    def get_size(self, i: int) -> int:\n        return -self.parents[self.find(i)]\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"4 3\\n1 3\\n2 3\\n2 4\") == \"2\"\nassert solution(\"4 3\\n1 3\\n1 4\\n2 4\") == \"2\"\n\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\\n\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2\\n4 2\\n'\nassert solution('2 0\\n') == '1\\n1 2\\n'\nassert solution('3 2\\n1 3\\n2 3') == '2\\n'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\n\nassert solution(\"2 0\\n\") == \"1\"\n\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n\nprint(\"Successfully solved.\")\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('2 0\\n') == '1'\nassert solution('3 2\\n1 3\\n2 3') == '2'\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n1 3\\n2 3') == '2'\nassert solution('4 2\\n1 3\\n2 3') == '4 2'\nassert solution('4 2\\n1 3\\n2 3\\n1 4') == '2'\nassert solution('4 3\\n1 3\\n2 3\\n1 4\\n2 4') == '2'\nassert solution('5 2\\n1 4\\n2 5\\n1 3\\n2 4') == '4'\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 3\\n\") == \"2\"\nassert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"1 2\\n2 3\") == \"1\"\nassert solution(\"5 3\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"3\"\nassert solution(\"4 1\\n1 2\\n2 3\\n3 4\\n\") == \"1\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 2\\n\") == \"2\"\nassert solution(\"2 0\\n1 2\\n\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\\n\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\") == \"8\"\nassert solution(\"5 1\") == \"8\"\nassert solution(\"7 2\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5') == '11'\n\"\"\""
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"11\"\n\n\"\"\""
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\nassert solution('5 2\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '4'\nassert solution('5 2\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\nassert solution('5 2\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\n\nprint(\"All cases passed!\")\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n2 4\\n2 5\\n3 4\\n\") == '6'\n\nassert solution(\"7 3\\n1 2\\n2 3\\n2 4\\n2 5\\n3 4\\n7 5\\n7 4\\n\") == '4'\n\"\"\""
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(200_001)\n\nn, k = list(map(int, sys.stdin.readline().split()))\n\nedges = []\nfor i in range(n - 1):\n    edges.append(list(map(int, sys.stdin.readline().split())))\n\nvisited = [False for _ in range(n)]\ndist = [-1 for _ in range(n)]\n\ngraph = [[] for _ in range(n)]\n\nfor u, v in edges:\n    graph[u - 1].append(v - 1)\n    graph[v - 1].append(u - 1)"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n\") == '11'\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\nl = list(map(int, sys.stdin.readline().split()))\nl.sort(reverse=True)\n\nm = int(sys.stdin.readline())\n\nfor _ in range(m):\n    a, b = map(int, sys.stdin.readline().split())\n    a -= 1\n    b -= 1\n\n    if a == b:\n        print(l[b])\n        continue\n    a, b = (a, b) if l[a] >= l[b] else (b, a)\n    if abs(a - b) <= k:\n        print(l[a] + l[b])\n    else:\n        print(l[a])\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\") == \"4\"\n\"\"\"\nimport heapq"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\") == \"11\"\nprint(\"Passed\")\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1\\n1 2\\n2 3\\n3 4\\n') == '4', 'case1'\nassert solution('6 2\\n1 5\\n2 3\\n2 4\\n3 5\\n3 6\\n') == '6', 'case2'\nassert solution('6 3\\n1 5\\n2 3\\n2 4\\n3 5\\n3 6\\n') == '5', 'case3'\nassert solution('7 2\\n1 5\\n2 3\\n2 4\\n3 5\\n3 6\\n') == '5', 'case4'\nassert solution('8 3\\n1 5\\n2 3\\n2 4\\n3 5\\n3 6\\n') == '6', 'case5'\n\n\"\"\""
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n\n\n-----Problem-----\n\"\"\"\n\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == '1 1\\n1 9\\n2 2\\n2 13'\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == '1 5\\n2 1\\n2 9999999994'"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 5\\n1 4\") == \"1 1\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\"\n\"\"\"\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor i in range(m):\n    f, k = 0, 0\n    for j in range(n):\n        if b[i] < a[j] * (j + 1):\n            break\n        f, k = j, b[i] - a[j] * j\n    print(f + 1, k)\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == '1 5\\n2 1\\n2 9999999994'\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n\n\"\"\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37\\n') == '1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12\\n'\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 6\n10 15 12\n1 9 12 23 26 37\n''') == '''1 1\n1 9\n2 2\n2 13\n3 1\n3 12'''\nassert solution('''2 3\n5 10000000000\n5 6 9999999999\n''') == '''1 5\n2 1\n2 9999999994'''\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 6 5 4''') == '2 1 3'\n\"\"\"\n\nfrom typing import List\nimport math"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"3 6 5 4\"\n) == \"2 1 3\"\nassert solution(\n    \"40 40 40 60\"\n) == \"20 20 20\"\nassert solution(\n    \"201 101 101 200\"\n) == \"1 100 100\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n\"\"\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n\n\"\"\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6 5 4\") == '2 1 3'\nassert solution(\"40 40 40 60\") == '20 20 20'\nassert solution(\"201 101 101 200\") == '1 100 100'\n\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n\"\"\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n\"\"\"\n\nimport unittest\n\nstdin = \"\"\"40 40 40 60\"\"\""
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\""
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6 5 4\") == '2 1 3'\nassert solution(\"40 40 40 60\") == '20 20 20'\nassert solution(\"201 101 101 200\") == '1 100 100'"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('201 101 101 200') == '1 100 100'\nassert solution('2 4 4 6') == '2 4 4'\nassert solution('1 2 3 4') == '1 2 3'\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9RBRRRRGGGGGGRRR\") == '2RBRGBRRRRRRGRRR'\nassert solution(\"8BBBBBGRRRRRGRRRR\") == '2BGBRBBBBBBGRRRR'\nassert solution(\"13BGRRRRRRRRRRRRR\") == '6BGRGBBBGBGRRRRRR'\n\"\"\"\n\nstdin = input()\nstdin = [stdin[i: i + 3] for i in range(0, len(stdin), 3)]\nstdin = list(map(lambda x: x.lower(), stdin))\n\ncolors = ['r', 'g', 'b']\narr = [0] * len(stdin)\nfor i in range(len(stdin)):\n    for j in range(len(colors)):\n        if colors[j] == stdin[i]:\n            arr[i] = j + 1\n            break\n\nans = 1\nfor i in range(len(arr) - 1):\n    if arr[i]!= arr[i + 1]:\n        ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\\nRBGRRBRGG\\n\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\\n\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\\n\") == \"6\\nBGRRRBGBGBGRG\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9\\nRBGRRBRGG') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRBRBGBGBGRG'\n\n\"\"\""
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\") == \"6\\nBGRBRBGBGBGRG\"\n\"\"\"\n\nfrom itertools import groupby\nfrom operator import itemgetter\nfrom functools import reduce"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\") == \"6\\nBGRRRBGBGBGRG\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGRRRGR\") == \"2\\nRBGRGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\") == \"6\\nBGRRRBGBGBGRG\""
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\") == \"6\\nBGRRRRRRRRRRRR\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RRRGB\") == \"GRR\"\nassert solution(\"RGBBGB\") == \"BGB\"\nassert solution(\"RGBGGR\") == \"GRG\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\") == \"2\\nRBGRGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\") == \"6\\nBGRBRBGBGBGRG\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n-----\n10\nBGBBGBRRR\n\n2\n\n-----\n9\nBGBBBBBR\n\n1\n\n-----\n8\nBGBBGBR\n\n0\n\n-----\n13\nBBRRRRGGGGGGRR\n\n6\n\n-----\n\n1\nRRRRRR\n\n0\n\n-----\n8\nBBBGBBGRRRGGRR\n\n4\n\n-----\n\n7\nBBBGBBGRR\n\n3\n\n-----\n4\nBGBRBGBBGR\n\n0\n\n-----\n5\nBGBBBBGRR\n\n1\n\n-----\n4\nBGBRBGGRR\n\n0\n\n-----\n7\nBGBBBBGRR\n\n0\n\n-----\n6\nBGRRRRRGGR\n\n0\n\n-----\n8\nBGBBBBGRR\n\n0\n\n-----\n3\nBGBBGBR\n\n0\n\n-----\n4\nBGBBGBR\n\n0\n\n-----\n5\nBGBBGBR\n\n0\n\n-----\n6\nBGBBBBGR\n\n0\n\n-----\n7\nBBBBBBG\n\n0\n\n-----\n8\nBGBBGBR\n\n0\n\n-----\n7\nBGBBBBGR\n\n0\n\n-----\n4\nBGBRBG\n\n0\n\n-----\n8\nBGBBBBGRR\n\n3\n\n-----\n6\nBGRRRRGGR\n\n0\n\n-----\n4\nBGBRBGGR\n\n0\n\n-----\n6\nBGRRRRRGGR\n\n0\n\n-----\n3\nBGBBGBR\n\n0\n\n-----\n8\nBBBGBBGRRRGGRR\n\n4\n\n-----\n9\nBBBGBBGRRRRGGGRR\n\n5\n\n-----\n6\nBGRRRRRRRRRRR\n\n0\n\n-----\n5\nBGBBBBGRRRRRRR\n\n0\n\n-----\n6\nBGRRRRRRRRRRR\n\n0\n\n-----\n4\nBGBBBG\n\n0\n\n-----\n8\nBGBBBBGRRRRGGG\n\n4\n\n-----\n5\nBGBBBGGRRRRGGG\n\n0\n\n-----\n7\nBGBBBBGRRRRRGGG\n\n0\n\n-----\n7\nBGBBBGGRRRRGGGR\n\n0\n\n-----\n4\nBGBBBGGRRRRGGGR\n\n0\n\n-----\n7\nBGBBBBGRRRRGGGR\n\n0\n\n-----\n5\nBGBBBGGRRRRGGGR\n\n0\n\n-----\n4\nBGBBBBGRRRRGGGR\n\n0\n\n-----\n5\nBGBBBGGRRRRGGGR\n\n0\n\n-----\n7\nBGBBBBGRRRRRGGGR\n\n0\n\n-----\n6\nBGRRRRRRRRRRR\n\n0\n\n-----\n8\nBGBBBBGRRRRRRRR\n\n0\n\n-----\n3\nBGBBBGBR\n\n0\n\n-----\n6\nBGBBBGGRR\n\n0\n\n-----\n7\nBGBBBBGRRRR\n\n0\n\n-----\n7\nBGBBBBGRRRR\n\n0\n\n-----\n4\nBGBBBBGRRRR\n\n0\n\n-----\n7\nBGBBBBGRRRR\n\n0\n\n-----\n6\nBGRRRRRRRR\n\n0\n\n-----\n8\nBGBBBBGRRRR\n\n0\n\n-----\n3\nBGBBBBGRRR\n\n0\n\n-----\n6\nBGRRRRRRRR\n\n0\n\n-----\n6\nBGRRRRRRRR\n\n0\n\n-----\n6\nBGRRRRRRRR\n\n0\n\n-----\n3\nBGBBBG\n\n0\n\n-----\n7\nBGBBBBGRRR\n\n0\n\n-----\n3\nBGBBBG\n\n0\n\n-----\n6\nBGBBBBGRRR\n\n0\n\n-----\n5\nBGBBBBGRRR\n\n0\n\n-----\n4\nBGBBBBGRRR\n\n0\n\n-----\n7\nBGBBBBGRRR\n\n0\n\n-----\n6\nBGBBBGGRRR\n\n0\n\n-----\n4\nBGBBBBGRRR\n\n0\n\n-----\n6\nBGBBBBGRRR\n\n0\n\n-----\n6\nBGBBBBGRRR\n\n0\n\n-----\n5\nBGBBBBGRRR\n\n0\n\n-----\n6\nBGBBBGGRRR\n\n0\n\n-----\n4\nBGBBBBGRRR\n\n0\n\n-----\n6\nBGBBBBGRRR\n\n0\n\n-----\n4\nBGBBBBGRRR\n\n0\n\n-----\n6\nBGBBBBGRRR\n\n0\n\n-----\n5\nBGBBBBGRRR\n\n0\n\n-----\n3\nBGBBBGBR\n\n0\n\n-----\n8\nBGBBBBGRRRRRRR\n\n0\n\n-----\n7\nBGBBBBGRRRRRRR\n\n0\n\n-----\n5\nBGBBBGGRRRRRRR\n\n0\n\n-----\n5\nBGBBBGGRRRRRRR\n\n0\n\n-----\n3\nBGBBBGBR\n\n0\n\n-----\n5\nBGBBBGGRR\n\n0\n\n-----\n5\nBGBBBGGRR\n\n0\n\n-----\n6\nBGBBBBGRR\n\n0\n\n-----\n7\nBGBBBGGRR\n\n0\n\n-----\n5\nBGBBBGGRR\n\n0\n\n-----\n5\nBGBBBGGRR\n\n0\n\n-----\n7\nBGBBBGGRR\n\n0\n\n-----\n6\nBGBBBGGRR\n\n0\n\n-----\n7\nBGBBBBGRR\n\n0\n\n-----\n3\nBGBBBBGRR\n\n0\n\n-----\n4\nBGBBBBGRR\n\n0\n\n-----\n7\nBGBBBBGRR\n\n0\n\n-----\n5\nBGBBBBGRR\n\n0\n\n-----\n7\nBGBBBBGRR\n\n0\n\n-----\n4\nBGBBBBGRR\n\n0\n\n-----\n7\nBGBBBBGRR\n\n0\n\n-----\n7\nBGBBBBGRR\n\n0\n\n-----\n7\nBGBBBBGRR\n\n0\n\n-----\n6\nBGRRRRRRRR\n\n0\n\n-----\n3\nB"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 7 8 3') == '1 2 3 7 8'\nassert solution('10 9 8 7') == '1 2 3 7 8 9'\nassert solution('6 7 8 3 4 5 9 10 11') == '1 2 3 7 8 9'\n\"\"\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 5 2') == '2'\nassert solution('9\\n6 7 8 3 4 5 9 10 11') == '6'\nassert solution('7\\n3 3 4 7 5 6 8') == '4'\n\nassert solution('10\\n6 7 8 3 4 5 9 10 11') == '1 2 3 7 8 9'\nassert solution('5\\n1 3 5 2 4') == '2 3 5'\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 2 4 1\") == \"3\", \"Test 1\"\nassert solution(\"3 3 4 7 5 6\") == \"4\", \"Test 2\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\", \"Test 3\"\nassert solution(\"1 3 5 2 4 6\") == \"2\", \"Test 4\"\nassert solution(\"10 9 8 7\") == \"1\", \"Test 5\"\n\n\"\"\""
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == result\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 4 7 5 6 8') == '4'\nassert solution('1 3 5 2 4 6') == '2'\nassert solution('6 7 8 3 4 5 9 10 11') == '6'\nassert solution('1 3 5 2 4 6') == '2'\nassert solution('10 9 8 7') == '1'\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"4 10 9 8 7\") == \"1\"\nassert solution(\"9 6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"10 9 8 7\") == \"1\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 4 7 5 6 8\") == \"4\"\nassert solution(\"1 3 5 2 4 6\") == \"2\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"10 9 8 7\") == \"1\"\nassert solution(\"1 3 5 2 4 6\") == \"2\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '1\\n1\\n'\nassert solution('7') == '2\\n1 3\\n'\nassert solution('9') == '1\\n1 2\\n'\nassert solution('10') == '1\\n1 2 3\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n3 3 4 7 5 6 8') == '4'\nassert solution('6\\n1 3 5 2 4 6') == '2'\nassert solution('4\\n10 9 8 7') == '1'\nassert solution('9\\n6 7 8 3 4 5 9 10 11') == '6'\n\"\"\""
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\n\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n\nassert solution(\"4 10 9 8 7\") == \"1\\n1\"\n\nassert solution(\"9 6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"1 3\") == \"No\"\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('2 2') == 'No'\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 1\n''') == 'Yes'\nassert solution('''3 2\n''') == 'No'\n'''\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\n\"\"\"\nimport re\n\nfrom typing import Dict, List, Set, Tuple\n\nREGEX_1 = r\"^\\s*([1-3]\\s*){2}\\s*$\"\nREGEX_2 = r\"^\\s*([1-3]\\s*){2}\\s*([1-3])\\s*$\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n') == 'Yes'\n\n-----Explanation-----\nWe can assume that A, B are integers between 1 and 3 (inclusive) and that C is an integer between 1 and 3 (inclusive).\nIf A = 3, then A \\times B = 3 \\times 1 = 3, which is an odd number. Similarly, if B = 1, then A \\times B = 3 \\times 1 = 3, which is also an odd number.\nTherefore, C = 3 is an odd number and that means the condition is satisfied.\n\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"1 3\") == \"No\"\nassert solution(\"2 2\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1\\n') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"2 2\") == \"No\"\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('81 58\\n') == '110'\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('81 58') == '110'\n\"\"\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('81 58') == '110'\n\"\"\"\nfrom math import floor\nx, y = map(int, input().split())\nprint(floor(x * 2 / 29) + y * 2)\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('81 58') == '110'\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Dict, List, Tuple\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('81 58') == '110'\nprint(solution(stdin))\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('81 58') == '110'\nassert solution('2 2') == '0'\nassert solution('1 1') == '0'\nassert solution('11 11') == '0'\nassert solution('3 4') == '4'\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\nprint('Test passed')\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n1') == ''\nassert solution('1\\n1\\n1') == ''\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 8\nprint('Success')\n\n\"\"\"\n\nimport sys\n\nN = int(input())"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"8\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"27\"\nassert solution(\"4\") == \"52\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n') == 8\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == 8\nprint(solution(input()))\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == 8\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == 8"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 8\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 8\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"9\") == \"NO\"\n\"\"\"\n\nx = input().strip()"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"YES\"\nprint(solution(\"5\"))"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == 'YES'\nassert solution('1') == 'NO'\nassert solution('2') == 'NO'\nassert solution('3') == 'YES'\nassert solution('4') == 'YES'\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == 'YES'\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == 'YES'\nassert solution('3') == 'NO'\nassert solution('7') == 'YES'\nassert solution('9') == 'NO'\nassert solution('2') == 'NO'\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == 'YES'\nassert solution('9') == 'YES'\nassert solution('4') == 'NO'\nassert solution('3') == 'NO'\nassert solution('2') == 'NO'\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\n----Solution----"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"9\") == \"YES\"\nassert solution(\"12\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"9\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"15\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('999') == 'ABC'\nassert solution('10') == 'ABC'\nassert solution('1000') == 'ABC'"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"999\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\nassert solution(\"ABC998\") == \"ABC\"\nassert solution(\"ABC997\") == \"ABC\"\nassert solution(\"ABC996\") == \"ABC\"\nassert solution(\"ABC995\") == \"ABD\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('999') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"999\") == \"ABC\"\n\"\"\"\n\nN = int(stdin.readline())\n\nrounds = [\"ABC\", \"ARC\", \"AGC\", \"GHC\", \"HHC\", \"CSC\", \"OBC\", \"ABC\"]\n\nprint(rounds[N - 1][:3])"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('999') == 'ABC'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"999\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\nassert solution(\"ABC1000\") == \"ABD\"\nassert solution(\"ABC1001\") == \"ABE\"\nassert solution(\"ABC1002\") == \"ABF\"\nassert solution(\"ABC1003\") == \"AC0\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('999') == 'ABC'\nassert solution('3') == 'ABC'\nassert solution('7') == 'BDA'\nassert solution('19') == 'BDA'\nassert solution('1234') == 'BCD'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('999') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(a='1', b='2', c='4', d='8', e='9', k='15') == 'Yay!'\nassert solution(a='1', b='2', c='4', d='8', e='9', k='2') == ':(\nassert solution(a='1', b='2', c='4', d='8', e='9', k='4') == ':(\nassert solution(a='1', b='2', c='4', d='8', e='9', k='6') == ':(\nassert solution(a='1', b='2', c='4', d='8', e='9', k='8') == ':(\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\n\n------Problem------\nIn AtCoder city, there are five antennas standing in a straight line. They are called Antenna A, B, C, D and E from west to east, and their coordinates are a, b, c, d and e, respectively.\n\nTwo antennas can communicate directly if the distance between them is k or less, and they cannot if the distance is greater than k.\n\nDetermine if there exists a pair of antennas that cannot communicate directly.\n\nHere, assume that the distance between two antennas at coordinates p and q (p < q) is q - p.\n\n-----Constraints-----\n - a, b, c, d and k are integers between 0 and 123 (inclusive).\n - a < b < c < d\n\n-----Input-----\nInput is given from Standard Input in the following format:\na\nb\nc\nd\ne\nk\n\n-----Output-----\nPrint :( if there exists a pair of antennas that cannot communicate directly, and print Yay! if there is no such pair.\n\n-----Sample Input-----\n1\n2\n4\n8\n9\n15\n\n-----Sample Output-----\nYay!\n\nIn this case, there is no pair of antennas that cannot communicate directly, because:\n - the distance between A and B is 2 - 1 = 1\n - the distance between A and C is 4 - 1 = 3\n - the distance between A and D is 8 - 1 = 7\n - the distance between A and E is 9 - 1 = 8\n - the distance between B and C is 4 - 2 = 2\n - the distance between B and D is 8 - 2 = 6\n - the distance between B and E is 9 - 2 = 7\n - the distance between C and D is 8 - 4 = 4\n - the distance between C and E is 9 - 4 = 5\n - the distance between D and E is 9 - 8 = 1\nand none of them is greater than 15. Thus, the correct output is Yay!.\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 4 8 9 15\") == \"Yay!\"\nassert solution(\"1 2 3 4 5 6 7\") == \"Yay!\"\nassert solution(\"1 2 3 4 5 7 8 9\") == \"Yay!\"\nassert solution(\"1 2 3 4 6 7 8 9\") == \"Yay!\"\nassert solution(\"1 2 3 5 6 7 8 9\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15\\n') == 'Yay!'\n\"\"\"\n\n\"\"\"\nTLE\n\"\"\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 4 8 9 15\") == \"Yay!\"\nassert solution(\"1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n8\\n9\\n15\\n16\") == \":(\n\n\"\"\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n\") == \"Yay!\"\n\n\"\"\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 4 8 9 15') == 'Yay!'\nassert solution('1 2 3 4 8 9 15') == 'Yay!'\nassert solution('1 2 3 4 5 8 9 15') == 'Yay!'\n\n-----Explanation-----\nThis solution is based on the following observation:\n\nLet x denote the minimum distance between two antennas, and y denote the maximum distance between two antennas.\n\nIf there exists an antenna that cannot communicate directly with another antenna, then there exists an antenna that cannot communicate directly with a different antenna, which must be within the distance range between x and y.\n\nTherefore, if we just check the distance between two antennas and find a pair that cannot communicate directly, then all other pairs must also be able to communicate directly.\n\n\"\"\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 4 8 9 15') == 'Yay!'\n\n\"\"\"\n\nfrom typing import List\nfrom sys import stdin\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('pink') == 'pink'\nassert solution('red') =='red'\n\"\"\"\n\na, s = map(str, input().split(' '))\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('pink') == 'pink'\nassert solution('red') =='red'\n\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"pink\") == \"pink\"\nassert solution(\"red\") == \"red\"\n\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('pink') == 'pink'\nassert solution('red') =='red'\n\"\"\"\n\na, s = input().split('\\n')\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3200', 'pink') == 'pink'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('pink') == 'pink'\nassert solution('3200') =='red'\n\"\"\"\n\na = int(input())\ns = input()"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3200, \"pink\") == \"pink\"\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3200\") == \"pink\"\nassert solution(\"3100\") == \"red\"\nassert solution(\"5200\") == \"red\"\nassert solution(\"5100\") == \"pink\"\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('pink') == 'pink'\nassert solution('red') =='red'\n\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('pink') == 'pink'\nassert solution('pink') == 'pink'\nassert solution('pink') == 'pink'\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1199') == 'ABC'\n\nassert solution('1240') == 'ARC'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1181\\n') == 'ABC'\nassert solution('1199\\n') == 'ABC'\nassert solution('2800\\n') == 'ARC'\nassert solution('1200\\n') == 'ABC'\nassert solution('2801\\n') == 'ARC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1199\") == \"ABC\"\nassert solution(\"1200\") == \"ARC\"\nassert solution(\"2800\") == \"AGC\"\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1234') == 'ABC'\nassert solution('123') == 'ARC'\nassert solution('1234') == 'AGC'\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1234') == 'ABC'\nassert solution('6285') == 'ARC'\nassert solution('2572') == 'AGC'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1100\") == \"ARC\"\nassert solution(\"2400\") == \"AGC\"\nassert solution(\"3677\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(0) == 'ABC'\nassert solution(1) == 'ARC'\nassert solution(2) == 'AGC'\nassert solution(3) == 'ABC'\nassert solution(4) == 'ARC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1199\") == \"ABC\"\n\"\"\"\n\nr = int(input())"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1234\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1237\") == \"ARC\"\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"119\") == \"991\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"91\") == \"991\"\n\"\"\"\n\nimport ast\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('111') == '999'\nassert solution('9') == '1'\nassert solution('100') == '100'\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('119') == '991'\n\na = '45'\nb = '9'\nc = 'a'\nd = 'b'\ne = 'c'\nf = 'd'\ng = 'e'\nh = 'f'\ni = 'g'\nj = 'h'\nk = 'i'\nl = 'j'\nm = 'k'\nn = 'l'\no ='m'\np = 'n'\nq = 'o'\nr = 'p'\ns = 'q'\nt = 'r'\nu ='s'\nv = 't'\nw = 'u'\nx = 'v'\ny = 'w'\nz = 'x'\n\nassert solution(a) == '45'\nassert solution(b) == '9'\nassert solution(c) == 'a'\nassert solution(d) == 'b'\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('119') == '991'"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"9\"\nassert solution(\"9\") == \"1\"\nassert solution(\"99\") == \"1\"\nassert solution(\"123\") == \"913\"\nassert solution(\"456\") == \"549\"\n\nprint('Success')\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution( '119' ) == '991'\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"011\") == \"91\"\nassert solution(\"929\") == \"91\"\nassert solution(\"369\") == \"369\"\nassert solution(\"999\") == \"999\"\nassert solution(\"998\") == \"998\"\n\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\") == \"19\"\n\"\"\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('111') == '999'"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\n\n\"\"\"\n\n\n\nimport sys"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abbaac') == 'abac'\nassert solution('ac') == 'ac'\nassert solution('bccddaaf') == 'bcdaf'\nassert solution('zzzzzz') == 'zzzzzz'\nassert solution('abbac') == 'abac'\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abbaac') == 'abac'\nassert solution('ac') == 'ac'\nassert solution('bccddaaf') == 'bcdaf'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\n\"\"\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\n\"\"\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4\") == '2'\nassert solution(\"13 9\") == '5'\nassert solution(\"100 13\") == '4'\nassert solution(\"123 456\") == '333'\nassert solution(\"92 46\") == '0'\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5\\n10 4') == '2'\nassert solution('5\\n10 4') == '2'\nassert solution('5\\n13 9') == '5'\nassert solution('5\\n13 9') == '5'\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 4\") == \"2\"\nassert solution(\"13 9\") == \"5\"\nassert solution(\"100 13\") == \"4\"\nassert solution(\"123 456\") == \"333\"\nassert solution(\"92 46\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 1') == ''\nassert solution('1 2') == ''\nassert solution('2 3') == ''\nassert solution('2 4') == ''\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"\nprint(solution(\"10 4\\n13 9\\n100 13\\n123 456\\n92 46\"))\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 8\\n1 2') == '3'\nassert solution('7 8\\n2 3') == '1'\nassert solution('7 8\\n2 4') == '0'\nassert solution('7 8\\n4 5') == '2'\nassert solution('7 8\\n6 7') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8\") == \"0\"\nassert solution(\"10 4\") == \"2\"\nassert solution(\"123 456\") == \"3\"\nassert solution(\"92 46\") == \"1\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4\") == \"2\"\nassert solution(\"13 9\") == \"5\"\nassert solution(\"100 13\") == \"4\"\nassert solution(\"123 456\") == \"333\"\nassert solution(\"92 46\") == \"0\"\n\"\"\"\nimport math\nt = int(stdin.readline())\nfor _ in range(t):\n    n, m = map(int, stdin.readline().split())\n    if n % m == 0:\n        print(0)\n    else:\n        print(math.ceil(n / m) + 1)\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"\nprint(\"Test 1 OK\")\n\nassert solution(\"5\\n10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"\nprint(\"Test 2 OK\")\n\nassert solution(\"5\\n10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"\nprint(\"Test 3 OK\")\n\nassert solution(\"5\\n10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"\nprint(\"Test 4 OK\")\n\nassert solution(\"5\\n10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"\nprint(\"Test 5 OK\")"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\nprint('Hooray!')\n\nprint('-' * 50)\n\nassert solution('4 3\\n3 4 5 2') == '3.0'\nprint('Hooray!')\n'''\n\nn, k = map(int, input().split())\narr = [int(i) for i in input().split()]\n\nfor i in range(n - k + 1):\n    print(max(arr[i:i + k]))\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_str) == test_res\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == 2.666666666666667\n\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nres = 0\nres_0 = 0\nfor i in range(n):\n    if i + k > n:\n        break\n    else:\n        res = sum(a[i:i+k]) / k\n        if res > res_0:\n            res_0 = res\n\nprint(res_0)"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n\n\"\"\"\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\ns = sys.stdin.readline().strip()\n\na = list(map(int, s.split()))\nres = 0\nfor i in range(n - k + 1):\n    if i == 0:\n        res = max(res, sum(a[i:i + k]) / k)\n    else:\n        res = max(res, sum(a[i:i + k]) / k, sum(a[i - 1:i + k - 1]) / k)\nprint(res)\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n\n\"\"\"\n\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == 2.666666666666667\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == 2.666666666666667\n\n---\n\ninput_ = input()\n\nn, k = input_\nn, k = map(int, n.split())\na = list(map(int, input_.split()))"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\nprint(solution(input()))\n'''\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nm = float('-inf')\n\nfor i in range(n - k + 1):\n    s = 0\n    for j in range(i, i + k):\n        s += a[j]\n    if m < s / k:\n        m = s / k\nprint(m)\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\n\narr.sort()\nprint(sum([arr[i] for i in range(n - k + 1)]) / k)\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\"\nassert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES'\nassert solution('4 2\\n4 1 2 3\\n1 2\\n4 2\\n4 3 2 1\\n1 3\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'NO'\nassert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES'\nassert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'NO'\nassert solution('4 2\\n4 1 2 3\\n1 2\\n4 2\\n4 3 2 1\\n1 3\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2\\n3 1\\n1 2\\n4 2\\n4 1 2 3\\n3\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n2 3\") == \"YES\"\nassert solution(\"1 3\\n2 3\") == \"NO\"\nassert solution(\"1 3\\n4 5\\n2 3\") == \"NO\"\nassert solution(\"1 2\\n2 1\\n1 3\") == \"YES\"\nassert solution(\"1 2\\n2 1\\n1 3\") == \"NO\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1') == 'YES\\nNO\\nYES\\nYES\\nNO\\nYES'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5') == 'YES'\nassert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5') == 'NO'\n\"\"\""
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a\\nb\\n') == 'a\\nb'\nassert solution('a b') == 'a b'\nassert solution('a\\tb') == 'a b'\nassert solution('a\\tb\\n') == 'a b'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\") == \"YES\"\nassert solution(\"6 3\\n6 3 2\\n2 1 4 3\\n5 1\\n4 2 1 2 3\\n6 2\\n4 3 1 2 3\\n6 3\\n5 1\\n1 2 3 4 5\\n5\") == \"NO\"\nassert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES'\nassert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'NO'\nassert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'NO'\nassert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES'\nassert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\"\nassert solution(\"2 3\\n1 3\\n1 2\") == \"NO\"\nassert solution(\"4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\"\nassert solution(\"4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n\"\"\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"baabbb\") == \"bab\"\nassert solution(\n\"ooppps\") == \"oops\"\nassert solution(\n\"z\") == \"z\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bab\") == \"baabbb\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n\n\"\"\"\n\nn = int(input())\nt = input()"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('bab') == 'baabbb'\n\nassert solution('ooopppssss') == 'oops'\n\nassert solution('z') == 'z'\n\nassert solution('a') == 'a'\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bab\") == \"baa\"\nassert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"bab\") == \"baaab\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"bab\") == \"baabbb\"\nassert solution(\"baabbb\") == \"bab\"\nassert solution(\"oopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n\nstdin = input()\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('baabbb') == 'bab'\nassert solution('ooopppssss') == 'oops'\nassert solution('z') == 'z'\n\nstdin = sys.stdin.readlines()\nt = stdin[1].strip()\nassert len(t) % len(stdin[0].strip()) == 0\n\ns = ''\nfor i in range(0, len(t), len(stdin[0].strip())):\n    s += stdin[0].strip()[i]\n\nprint(s)\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n\nassert solution(\"ooopppssss\") == \"oops\"\n\nassert solution(\"ooopppssss\") == \"oops\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('bab') == 'baabbb'\nassert solution('baz') == 'baz'\nassert solution('z') == 'z'\nassert solution('ooopppssss') == 'oops'\n\n\nimport unittest\nimport io\nimport sys\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        captured_output = io.StringIO()\n        sys.stdout = captured_output\n        solution('baabbb')\n        sys.stdout = sys.__stdout__\n        self.assertEqual(captured_output.getvalue(), 'bab\\n')\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == \"2\"\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == \"2\""
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n1 4 2\\n1 5 3\\n\") == \"2\"\n\n\"\"\"\nimport sys\nfrom typing import List, Set, Dict, Tuple, Union\nfrom collections import deque, defaultdict, Counter\n\nsys.setrecursionlimit(1_000_000)\nreadline = sys.stdin.readline\n\nAdjacent = Dict[int, List[Tuple[int, int]]]\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 2 1\\n2 3 2\\n1 3 3\\n') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n') == '1'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n') == '0'\nassert solution('1 0\\n') == '0'\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4') == '1'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == '1'\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == '1'\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == '0'\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == '2'\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n1 4 2\\n1 5 3') == '1'\n\n\"\"\""
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2 1') == '0'\nassert solution('1 2 1\\n2 3 2') == '0'\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3') == '2'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n') == '1'\nassert solution('1 0') == '0'\n\"\"\"\nimport sys\nimport math\n\nsys.stdin = open(\"in.txt\")\nsys.stdout = open(\"out.txt\", \"w\")"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"1\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RGRGRG\") == \"R\"\nassert solution(\"RGBGBBB\") == \"RGBGBB\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBGRR\"\nassert solution(\"RBR\") == \"RGR\"\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('RGBGRBB') == 'RGBRGBR'\nassert solution('RR') == 'RR'\nassert solution('RG') == 'RG'\n\nassert solution('RGBGRBB') == 'RGBRGBR'\nassert solution('RR') == 'RR'\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nprint(solution(\"RGBGRBB\"))\n\n\"\"\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBGRB\"\nassert solution(\"BB\") == \"B\"\nassert solution(\"RR\") == \"R\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline()\n\ncount = 0\nold = ''\nfor i in range(n):\n    if s[i]!= old:\n        count += 1\n        old = s[i]\nprint(count)\n\nlast = 0\nfor i in range(n):\n    if s[i]!= s[i - 1] and i!= 0:\n        if (i - last) % 3 == 0:\n            count += 1\n        last = i\nprint(count)\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RGBGRBB') == 3\nassert solution('RRRRGGG') == 0\nassert solution('GRB') == 1"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('RGBGRBB') == 'RGBGRB', 'error'\nassert solution('RGBG') == 'GRB', 'error'\n\"\"\"\n\nn = int(input())\n\ns = input()\n\nprint(int(n/2) if n%2==0 else int(n/2)+1)\nprint(s[:int(n/2)]+s[int(n/2):])\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('RGBGRBB') == 'RGBRGBR'\nprint(solution('RGBGRBB'))\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RGBGRBB') == 'RGBRGBR'\nassert solution('RGBGRBB') == 'GRB'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 10000\\n0.10000000 BTC\") == 48000.0\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10000 JPY\\n0.10000000 BTC') == '48000.0'\n\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '0'\n\nassert solution('10000 JPY') == '10000'\n\nassert solution('0.10000000 BTC') == '0.10000000'\n\nassert solution('0.10000000 BTC\\n0.10000000 JPY') == '48000.0'\n\nassert solution(':\\n10000 JPY\\n0.10000000 BTC') == '48000.0'"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\nassert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10000 JPY\\n0.10000000 BTC\\n') == '48000.0'\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3\n10000 JPY\n0.10000000 BTC\n''') == '48000.0'\n\nassert solution('''\n3\n1000 JPY\n0.10000000 BTC\n''') == '5160.0'\n\nassert solution('''\n3\n10 JPY\n1 BTC\n''') == '80.0'\n\nassert solution('''\n3\n100000 JPY\n0.010000000 BTC\n''') == '994000.0'\n\nassert solution('''\n3\n10000000 JPY\n1 BTC\n''') == '10000000.0'"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\nprint(solution(\"10000 JPY\\n0.10000000 BTC\"))"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n\"\"\"\n\nfrom __future__ import annotations\n\nimport typing\nimport collections\nimport math\nimport decimal"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '2\\n10000 JPY\\n0.10000000 BTC'\n) == '48000.0'\n\"\"\"\n\nfrom typing import Dict, List, Tuple\n\nUSD = 'USD'\nJPY = 'JPY'\n\nGIFT_USD_TO_JPY_RATE = 380000"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(sys.stdin.read()) == sys.stdin.read()\n\"\"\"\n\nfrom math import sqrt\nimport sys\n\nT = int(input())\n\nwhile T > 0:\n    N, i = input().split(\" \")\n    N = int(N)\n    i = int(i)\n    if N == 0 and i == 0:\n        print(0)\n        break\n    if N == 1 and i == 1:\n        print(0)\n        break\n    sqrt_N = sqrt(N)\n    if int(sqrt_N) == sqrt_N:\n        print(int(sqrt_N - 1))\n    else:\n        print(int(sqrt(N) - 1))\n    T -= 1\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n') == '3'\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2') == '3'\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n') == '3'\n\"\"\"\n\nimport sys\n\nN, i = map(int, sys.stdin.readline().split())\nprint(i + N - 2)"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n') == 3\n\"\"\"\n\nimport math"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2') == '3'\n\"\"\"\n\nN, i = input().split()\nN = int(N)\ni = int(i)\nprint((N - i) + 1)"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"3\"\n\n-------Solution---------\n\nN = int(stdin.readline())\ni = int(stdin.readline())\nj = N - i + 1\nprint(j)\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == 3\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2') == '3'\n\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\nprint(\"all tests passed.\")\n\n\"\"\"\n\nimport unittest\nimport sys\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        input = stdin.split()\n        n = int(input[0])\n        s = input[1]\n        t = input[2]\n        \n        if len(s)!= len(t):\n            raise ValueError(\"Strings are not of equal length\")\n        \n        new_str = \"\"\n        for i in range(n):\n            new_str += s[i] + t[i]\n        return new_str\n\nclass TestSolution(unittest.TestCase):\n    def test_1(self):\n        solution = Solution()\n        self.assertEqual(solution.solve(\"1 ab\"), \"a1b\")\n    def test_2(self):\n        solution = Solution()\n        self.assertEqual(solution.solve(\"2 ab\"), \"a2b\")\n    def test_3(self):\n        solution = Solution()\n        self.assertEqual(solution.solve(\"3 ab\"), \"a3b\")\n    def test_4(self):\n        solution = Solution()\n        self.assertEqual(solution.solve(\"4 ab\"), \"a4b\")\n    def test_5(self):\n        solution = Solution()\n        self."
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 ip cc') == 'icpc'\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('hello') == 'hleol'\nassert solution('ip cc') == 'icpc'\nassert solution('abc def') == 'a b c def'\nassert solution('abc def ghi jkl mno pqrs') == 'a b c def ghi jkl mno pqrs'\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ip cc') == 'icpc'\nprint('PASSED')"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n2\n\nip\ncc\n''') == 'icpc'\n\nassert solution('''\n4\n\nnn\ncc\ndd\nbb\n''') == 'cccccc'\n\nprint('Hooray!')\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ip cc') == 'icpc'\n\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n\nprint(solution(\"ip cc\"))\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\nprint('Success')\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\nip cc') == 'icpc'\n\n------Solution:---------\n\nn = stdin.readline().strip()\ns = stdin.readline().strip()\nt = stdin.readline().strip()"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\nip cc''') == 'icpc'\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABA') == 'Yes'\nassert solution('BBA') == 'Yes'\nassert solution('AAB') == 'No'\nassert solution('BAB') == 'No'\nassert solution('ABB') == 'No'\n\na, b = stdin.split('\\n')[0], stdin.split('\\n')[1]\na, b = [i for i in a], [i for i in b]\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AAA\") == \"Yes\"\nassert solution(\"ABA\") == \"Yes\"\nassert solution(\"BAA\") == \"Yes\"\nassert solution(\"BAB\") == \"Yes\"\nassert solution(\"BBA\") == \"No\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABA') == 'Yes'\n\"\"\"\n\n\n\n\"\"\"\n8. [Median of Two Sorted Arrays]\nGiven two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n\n-----Constraints-----\n - nums1 and nums2 are both sorted in non-decreasing order.\n - n == nums1.length\n - m == nums2.length\n - The elements in nums1 and nums2 are all distinct.\n\n-----Input-----\nThe first line contains an integer t, the number of test cases.\nEach of the next t pairs of lines is as follows:\n- The first line contains two space-separated integers, m and n, the number of elements in nums1 and nums2 respectively.\n- The second line contains m space-separated integers describing nums1.\n- The third line contains n space-separated integers describing nums2.\n\n-----Output-----\nFor each test case, print the median of nums1 and nums2 in a single line.\n\n-----Sample Input-----\n2\n4 4\n1 2 3 4\n1 2 3 4\n4 2\n2 3 4\n1 2 3\n\n-----Sample Output-----\n2.5\n2.0\n\n\"\"\"\n\"\"\"\n9. [Median of Two Sorted Arrays II]\nGiven two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n\n-----Constraints-----\n - nums1 and nums2 are both sorted in non-decreasing order.\n - n == nums1.length\n - m == nums2.length\n - The elements in nums1 and nums2 are all distinct.\n\n-----Input-----\nThe first line contains an integer t, the number of test cases.\nEach of the next t pairs of lines is as follows:\n- The first line contains two space-separated integers, m and n, the number of elements in nums1 and nums2 respectively.\n- The second line contains m space-separated integers describing nums1.\n- The third line contains n space-separated integers describing nums2.\n\n-----Output-----\nFor each test case, print the median of nums1 and nums2 in a single line.\n\n-----Sample Input-----\n2\n4 4\n1 2 3 4\n1 2 3 4\n4 2\n2 3 4\n1 2 3\n\n-----Sample Output-----\n2.5\n2.0\n\n\"\"\"\n\"\"\"\n10. [Remove Nth Node From End of List]\nYou are given the head of a linked list, and an integer n.\nReturn the head of the linked list after removing the nth node from the end of the list.\n\n-----Constraints-----\n- The number of nodes in the list is sz.\n- 1 <= sz <= 30\n- 0 <= Node.val <= 100\n- 1 <= n <= sz\n\n-----Input-----\nYou have to complete the method removeNthFromEnd() which takes two arguments - the head of the linked list and the integer n. You should NOT read any input from stdin/console.\nThe input is handled by the code in the editor and the format is as follows:\nLinkedListInput.txt\n\n-----Output-----\nPrint the returned linked list to stdout/console.\n\n-----Sample Input-----\n5\n1 2 3 4 5\n3\n\n-----Sample Output-----\n1 2 4 5\n\n\"\"\"\n\"\"\"\n11. [Find Pivot Index]\nGiven an array of integers nums, calculate the pivot index of this array.\n\nThe pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.\n\nIf the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.\n\nReturn the leftmost pivot index. If no such index exists, return -1.\n\n-----Constraints-----\n- 1 <= nums.length <= 10^5\n- -1000 <= nums[i] <= 1000\n\n-----Input-----\nThe first line contains n, the number of elements in nums.\nThe second line contains n space-separated integers describing nums.\n\n-----Output-----\nReturn the leftmost pivot index. If no such index exists, return -1.\n\n-----Sample Input-----\n5\n1 2 3 4 5\n\n-----Sample Output-----\n3\n\n\"\"\"\n\"\"\"\n12. [Contains Duplicate]\nGiven an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.\n\n-----Constraints-----\n- 1 <= nums.length <= 10^5\n- -10^9 <= nums[i] <= 10^9\n\n-----Input-----\nThe first line contains n, the number of elements in nums.\nThe second line contains n space-separated integers describing nums.\n\n-----Output-----\nPrint true if nums contains a duplicate, otherwise, print false.\n\n-----Sample Input-----\n5\n1 2 3 4 5\n\n-----Sample Output-----\nfalse\n\n\"\"\"\n\"\"\"\n13. [Interleaving Strings]\nGiven strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\n\nAn interleaving of two strings s and t is a configuration where they are divided into non-empty substrings such that:\n\ns = s1 + s2 +... + sn\nt = t1 + t2 +... + tm\n|n - m| <= 1\nThe interleaving is s1 + t1 + s2 + t2 + s3 + t3 +... or t1 + s1 + t2 + s2 + t3 + s3 +...\nNote: a + b is the concatenation of strings a and b.\n\n-----Constraints-----\n- 1 <= s1.length, s2.length <= 100\n- s1 and s2 consist of lowercase English letters.\n- 0 <= s3.length <= 200\n\n-----Input-----\nThe first line contains a single integer t (1 <= t <= 100) denoting the number of test cases.\nEach test case is described by three space-separated strings s1, s2, and s3.\n\n-----Output-----\nFor each test case, print whether s3 is formed by an interleaving of s1 and s2.\n\n-----Sample Input-----\n2\naabcc\nadcaa\naadbbcbcac\n\n-----Sample Output-----\ntrue\ntrue\nfalse\n\n\"\"\"\n\"\"\"\n14. [Longest Common Prefix]\nWrite a function to find the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".\n\n-----Constraints-----\n- 1 <= strs.length <= 200\n- 0 <= strs[i].length <= 200\n- strs[i] consists of only lower-case English letters.\n\n-----Input-----\nThe first line contains a single integer n (1 <= n <= 200), the number of strings.\nEach of the next n lines contains a string, strs[i].\n\n-----Output-----\nPrint the longest common prefix of all strings in strs.\n\n-----Sample Input-----\n5\nagbcba\ndog\nbigdog\ntig\ntiger\n\n-----Sample Output-----\nab\ndog\nbig\nt\n\n\"\"\"\n\"\"\"\n15. [Partition Array Into Disjoint Intervals]\nGiven an array nums, partition it into two (contiguous) subarrays left and right so that:\n\nEvery element in left is less than or equal to every element in"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABA\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABA\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"ABB\") == \"No\"\n\"\"\"\n\nstdin = input()"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'Yes'\nassert solution('ABA') == 'Yes'\nassert solution('BAB') == 'No'\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABB\") == \"No\"\nassert solution(\"ABC\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABB\") == \"No\"\nassert solution(\"ABA\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BBA\") == \"No\"\n\"\"\"\n\nS = stdin.strip()\n\nfor i in range(len(S)):\n    if S[i] == \"A\" and S[(i+1)%len(S)] == \"B\":\n        print(\"Yes\")\n        exit()\n\nprint(\"No\")\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RRR') == 3\n\"\"\"\n\ninput = stdin.readline()"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RRRR\") == \"4\"\nassert solution(\"RRSR\") == \"2\"\nassert solution(\"RSRSRS\") == \"3\"\n\nprint(\"All test cases passed.\")\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('RRR') == '2'\nassert solution('RRS') == '2'\nassert solution('RSS') == '0'\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('RRRR') == '0'\nassert solution('SSSS') == '0'\nassert solution('RRSS') == '2'\nassert solution('RSSSS') == '4'\nassert solution('RRSSS') == '2'\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RRS') == 2\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRS\") == 2\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RRR\") == 3\nassert solution(\"SRS\") == 1\n\nprint('Hooray!')\n\n-----\nThe input is provided in the main function.\n\n-----\nExamples\n\nIf the input is\n\nRRR\nthe output is\n\n2\n\nBecause there were 2 consecutive rainy days.\n\nIn the second example,\n\nSRS\nthe output is\n\n1\n\nbecause there was only 1 consecutive rainy day.\n\nIn the third example,\n\nSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the fourth example,\n\nSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the fifth example,\n\nR\nthe output is\n\n1\n\nbecause there was only 1 consecutive rainy day.\n\nIn the sixth example,\n\nRRRRRRRR\nthe output is\n\n5\n\nbecause there were 5 consecutive rainy days.\n\nIn the seventh example,\n\nSSSRSRSRSSRSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the eighth example,\n\nSSSRSSSSSRSRSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the ninth example,\n\nSSSSSSSSSSSSSSSSSS\nthe output is\n\n5\n\nbecause there were 5 consecutive rainy days.\n\nIn the tenth example,\n\nSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n5\n\nbecause there were 5 consecutive rainy days.\n\nIn the eleventh example,\n\nRRRRRRRRRRRRRRRRRRRR\nthe output is\n\n5\n\nbecause there were 5 consecutive rainy days.\n\nIn the twelveth example,\n\nSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the thirteenth example,\n\nRRRRRRRRRRRRRRRRRRRRR\nthe output is\n\n5\n\nbecause there were 5 consecutive rainy days.\n\nIn the fourteenth example,\n\nRRRRRRRRRRRRRRRRRRRRRR\nthe output is\n\n5\n\nbecause there were 5 consecutive rainy days.\n\nIn the fifteenth example,\n\nSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n1\n\nbecause there was only 1 consecutive rainy day.\n\nIn the sixteenth example,\n\nSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n1\n\nbecause there was only 1 consecutive rainy day.\n\nIn the seventeenth example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n5\n\nbecause there were 5 consecutive rainy days.\n\nIn the eighteenth example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n5\n\nbecause there were 5 consecutive rainy days.\n\nIn the nineteenth example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the twentieth example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n5\n\nbecause there were 5 consecutive rainy days.\n\nIn the twenty-first example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the twenty-second example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the twenty-third example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the twenty-fourth example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the twenty-fifth example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the twenty-sixth example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the twenty-seventh example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the twenty-eighth example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the twenty-ninth example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the thirty-first example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the thirty-second example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the thirty-third example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the thirty-fourth example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the thirty-fifth example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the thirty-sixth example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the thirty-seventh example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the thirty-eighth example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the thirty-ninth example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the thirty-tenth example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the thirty-eleventh example,\n\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nthe output is\n\n0\n\nbecause there were no consecutive rainy days in the period.\n\nIn the thirty-twelfth example,\n\nSSSSSS"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RRR\") == \"1\"\nassert solution(\"SSS\") == \"0\"\nassert solution(\"RRR\") == \"2\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('RRS') == '2'\n\nassert solution('RSS') == ''\nassert solution('RR') == '2'\nassert solution('RRR') == '3'"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RRS') == 2\n\"\"\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '3 1 2'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"2 3 1\") == \"3 2 1\"\nassert solution(\"3 1 2\") == \"1 3 2\"\nassert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"1 1 1\") == \"1 1 1\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\n\"\"\"\nfrom collections import defaultdict\n\nimport numpy as np\n\ninput_array = np.fromstring(stdin, dtype=int, sep=\" \")\n\nboxA = input_array[0]\nboxB = input_array[1]\nboxC = input_array[2]\n\nd = defaultdict(list)\nd[boxA].append(boxB)\nd[boxB].append(boxA)\nd[boxC].append(boxA)\nd[boxA].append(boxC)\nd[boxB].append(boxC)\nd[boxC].append(boxB)\n\ncurrent_box = boxA\ncurrent_index = 0\nwhile len(d[current_box]) > 1:\n    next_box = d[current_box][current_index]\n    current_index = (current_index + 1) % len(d[current_box])\n    current_box = next_box\n\nprint(current_box, end=\" \")\n\nfor key in sorted(d):\n    if d[key][0] == current_box:\n        print(key, end=\" \")\n        break\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\\n1 2 3\") == \"3 1 2\"\nassert solution(\"1 2 3\\n3 2 1\") == \"3 1 2\"\nassert solution(\"1 2 3\\n2 3 1\") == \"2 3 1\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"1 2 3 4\") == \"3 4 1 2\"\nassert solution(\"5 2 3 4\") == \"4 3 5 2\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\\n\") == \"3 1 2\"\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1 2 3''') == '3 1 2'\nassert solution('''1 2 3''') == '3 1 2'\nassert solution('''1 2 3''') == '3 1 2'\nassert solution('''1 2 3''') == '3 1 2'\n\nassert solution('''1 2 3''') == '3 1 2'\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '3 1 2'\nassert solution('2 3 1') == '1 2 3'\nassert solution('1 1 1') == '1 1 1'\nassert solution('2 2 2') == '2 2 2'\nassert solution('2 3 3') == '3 2 3'\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nprint(solution(\"1 2 3\"))\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('A B') == ''\nassert solution('A B A') == ''\nassert solution('A B C') == ''\nassert solution('A B C A') == ''\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"30 100\") == '100'\n\"\"\"\n\nA, B = map(int, input().split())\nprint(A*B*0.5 if A >= 13 or A < 6 else A*B)\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20 200') == '100'\nassert solution('10 3') == '0'\nassert solution('2 10') == '5'\nassert solution('6 5') == '2'\nassert solution('10 30') == '100'\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"30 100\") == \"100\"\n\n\"\"\"\n\nfrom typing import Union\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('30 100') == '100'\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"30 100\") == \"100\"\nprint(solution(\"30 100\"))"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('+-') == '0'\nassert solution('++') == '2'\nassert solution('-') == '1'\nassert solution('--') == '1'\nassert solution('---') == '0'\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"+-\") == \"0\"\nassert solution(\"+-++\") == \"2\"\nassert solution(\"++\") == \"0\"\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"+-\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"--\") == \"0\"\nassert solution(\"++\") == \"2\"\nassert solution(\"+-\") == \"2\"\nassert solution(\"+\") == \"1\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('+-') == '2'\nassert solution('-+-+') == '0'\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('+-') == '2'\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('+-') == '2'\n\n-------"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('+-') == '0'\nassert solution('++') == '1'\nassert solution('+') == '0'\nassert solution('-') == '0'\nassert solution('-++') == '0'\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'Heisei'\nassert solution('2019/04/30') == 'Heisei'\nassert solution('2019/04/31') == 'TBD'\n\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/05/02\") == \"TBD\"\n\nprint(solution(\"2019/04/30\"))\nprint(solution(\"2019/05/02\"))\n\nprint(solution(\"2019/04/30\"))\nprint(solution(\"2019/05/02\"))\n\nassert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/05/02\") == \"TBD\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/05/30\") == \"TBD\"\n\n\"\"\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/31\") == \"TBD\"\nassert solution(\"2020/04/30\") == \"TBD\"\nassert solution(\"2019/05/30\") == \"Heisei\"\nassert solution(\"2019/12/31\") == \"TBD\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/31\") == \"TBD\"\n\n\"\"\"\n\nimport sys\n\nfrom datetime import datetime\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/31\") == \"TBD\"\n\"\"\"\n\n\"\"\"\n2. Write a program that takes a date as input, and prints the month of that date in full, e.g. April.\n\n-----Constraints-----\n - S is a string that represents a valid date in the year 2019 in the yyyy/mm/dd format.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the month of that date in full, e.g. April.\n\n-----Sample Input-----\n2019/04/30\n\n-----Sample Output-----\nApril"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/05/01') == 'TBD'\n\"\"\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2019/04/30') == 'Heisei'\n\"\"\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2018/05/31\") == \"TBD\""
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 1 1') == '3'\nassert solution('6\\n1 1 1') == '2'\nassert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('3\\n1337 1337 1337') == '3'"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('3\\n1337 1337 1337') == '3'\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\nassert solution(\"3\\n1337 1337 1337\") == \"3\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\\n\") == '14'\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\\n\") == '9'\nassert solution(\"3\\n1337 1337 1337\\n\") == '3'\n\"\"\"\n\nfrom collections import Counter, defaultdict\nfrom typing import List\nfrom decimal import Decimal\nfrom math import ceil, log\nfrom decimal import Decimal, getcontext\n\nfrom util.result_check import get_output_with_stdin_input_split\n\ngetcontext().prec = 100\n\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solution(self, stdin: str) -> str:\n        pass\n\n    @staticmethod\n    def _get_min_problems(problems: List[int], problems_count: int) -> int:\n        min_problems = ceil(Decimal(problems_count) / Decimal(2))\n        for i, _ in enumerate(problems):\n            min_problems = min(min_problems, ceil(Decimal(problems_count) / Decimal(2) * Decimal(log(problems[i]))))\n        return min_problems\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\\n\") == \"14\"\n\"\"\""
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 6 6') == '9'\nassert solution('1337 1337 1337') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == 14\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == 9\nassert solution(\"3\\n1337 1337 1337\") == 3\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('4\\n1\\n3\\n5') == ''\nassert solution('2\\n1\\n2\\n1\\n1\\n1\\n3') == '6'\nassert solution('3\\n1\\n1\\n1\\n1\\n1\\n3') == '3'\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2') == '2\\n2 1'\n\"\"\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2 3 2 1\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n\nprint(\"Successfully solved!\")\n\"\"\""
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7 2\n1 2 3 2 1 3 2\n''') == '2\\n2 1'\n\"\"\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\nconv = [int(x) for x in input().split()]\n\na = []\nfor x in conv:\n    if len(a) >= k:\n        a.pop(0)\n    a.append(x)\n\nprint(len(a))\nprint(*a)\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"2 1 3\"\nassert solution(\"10 4\") == \"3 1 2\"\nassert solution(\"7 2\") == \"2 1\"\n\n\"\"\""
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == ''\nassert solution('2 3 1 2 1 2') == '2 1'\nassert solution('3 3 1 1 2 1 2 3') == '2 1 3'\nassert solution('5 3 1 2 3 1 2 1 3') == '3 1 2 3'\n\nstdin = sys.stdin.read()\nprint(solution(stdin))\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\\n\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\\n\"\n\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2 3') == '2 1 3'\n\nassert solution('1 2 3') == '2 1 3'\nassert solution('1 2 3\\n4') == '2 4 1'\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''7 2\n1 2 3 2 1 3 2''') == \"2\"\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3''') == \"3\"\n\n'''\n7 2\n1 2 3 2 1 3 2\n\n7 2\n2 1 3 2 1 3 2\n'''\n\n'''\n10 4\n2 3 3 1 1 2 1 2 3 3\n\n10 4\n1 3 2 3 1 1 2 1 2 3 3\n'''\n\n'''\n7 2\n1 2 3 2 1 3 2\n\n7 2\n1 2 3 2 1 3 2\n\n7 2\n1 3 2 2 1 3 2\n\n7 2\n1 3 2 2 1 3 2\n\n7 2\n1 3 2 2 1 3 2\n\n7 2\n2 1 3 2 1 3 2\n'''\n\n'''\n10 4\n2 3 3 1 1 2 1 2 3 3\n\n10 4\n1 3 2 3 1 1 2 1 2 3 3\n\n'''"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n2 3\") == \"2 1\"\nassert solution(\"4 6\\n7 5\\n9 6\\n2 1\") == \"3 1\"\n\"\"\"\nfrom collections import defaultdict\n\n\nclass Solution:\n    def solve(self, a, n, q):\n        d = defaultdict(list)\n        for i in range(n):\n            d[a[i]].append(i)\n\n        dp = defaultdict(list)\n        for k, v in d.items():\n            dp[k] = [None] * (len(v) + 1)\n            dp[k][0] = 0\n            dp[k][1] = v[0]\n            for i in range(1, len(v)):\n                dp[k][i + 1] = min(dp[k][i], dp[k][i - 1] + v[i])\n\n        res = []\n        for i in range(q):\n            b = int(stdin.readline())\n            if dp[b][-1] is None:\n                res.append(-1)\n            else:\n                res.append(dp[b][-1] + 1)\n        return res\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"1 -1 3 2\"\n\"\"\""
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"1 -1 3 2 2\"\n\"\"\"\nfrom math import ceil, log2\nfrom typing import List\n\nfrom utils import timing\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(text) == answer\n\"\"\"\n\nn, q = map(int, input().split())\n\ncoins = list(map(int, input().split()))\n\nq_list = [int(input()) for _ in range(q)]\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 6 7 8 9\\n2 1 2 3 4\") == \"1 2 3 4\"\nassert solution(\"5 10 15 2 4 6 8\\n8\") == \"1 2 2 2 2 2 1\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == '1 -1 3 2'\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\") == \"1 -1 3 2\"\n\"\"\"\n\nn, q = [int(i) for i in input().split()]\ncoins = [int(i) for i in input().split()]\ncoins.sort()\nfor i in range(q):\n    b = int(input())\n    low = 0\n    high = n - 1\n    while low < high:\n        m = (low + high) // 2\n        if coins[m] <= b:\n            low = m + 1\n        else:\n            high = m\n    if coins[low] <= b:\n        print(low + 1)\n    else:\n        print(-1)\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10') == '1 -1 3 2'\n\"\"\"\n\n\nfrom typing import List, Dict\n\nn, q = list(map(int, input().split(' ')))\narr = list(map(int, input().split(' ')))\n\nfor i in range(q):\n    b = int(input())\n    if 2 ** b <= max(arr):\n        print(2 ** b)\n    else:\n        print(-1)\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 6\\n4 6\\n4 6\\n4 6\\n4 6\\n3 5\\n3 5\\n3 5\\n3 5\\n3 5\\n1 1\\n1 1\\n2 2\\n2 2\\n2 2\\n2 2\\n') == '1\\n-1\\n3\\n2\\n'\nassert solution('4 6\\n4 6\\n4 6\\n4 6\\n4 6\\n3 5\\n3 5\\n3 5\\n3 5\\n1 1\\n1 1\\n2 2\\n2 2\\n2 2\\n2 2\\n') == '1\\n-1\\n3\\n2\\n'\nassert solution('4 6\\n4 6\\n4 6\\n4 6\\n4 6\\n3 5\\n3 5\\n3 5\\n3 5\\n1 1\\n1 1\\n2 2\\n2 2\\n2 2\\n2 2\\n') == '1\\n-1\\n3\\n2\\n'\n\"\"\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 8 2 4\\n8\\n5\\n14\\n10\") == '3 2 1 -1'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5') == '21'\nassert solution('3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\n\"\"\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\") == '21'\n\"\"\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\") == \"0\"\nassert solution(\"5 5\\n1 2 3 4 5 6\\n2 3 4 5 6 7\\n2 4 5 6 7 8\\n3 4 5 6 7 8 9\\n3 5 6 7 8 9 10\") == \"20\"\nassert solution(\"3 3\\n1 1 1 1 1\\n1 2 3\") == \"0\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 3\n1 3 2 8 5 5 8 2 2 8 5 2\n1 2 2 5\n2 6 7''') == '21'\n\nprint(solution('''3 3\n9 9 9 9 9 9 9 9 9\n1 2 3\n1 2 3'''))"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\") == '21'\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == '0'\nassert solution(\"5 2\\n1 2 2 5\\n2 6 7\") == '1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5') == '21'\nassert solution('3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 3\n1 3 2 8 5 5 8 2 2 8 5 2\n1 2 2 5\n2 6 7''') == '21'\n\nprint('all tests passed')\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\") == '21'\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == '0'\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 8 10\") == \"2\\n2 2 1\"\nassert solution(\"4\\n2 8 10\") == \"2\\n2 2 1\"\nassert solution(\"5\\n2 8 10\") == \"2\\n2 2 1\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n2 4 6 6 6''') == '2'\nassert solution('''3\n2 8 10''') == '2'\nassert solution('''4\n1 1 1 1''') == '0'\n\n##########################################################################################\n'''\n5\n2 4 6 6 6\n\n2\n1 2 3\n1 1 2\n\n3\n2 8 10\n2 2 1\n2 3 2\n\n4\n1 1 1 1\n\n0\n'''\n\n##########################################################################################\n'''\n4\n1 1 1 1\n\n0\n'''"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\"\"\"\n\nclass Solution:\n    def __init__(self, n: int, a: List[int]):\n        self.n = n\n        self.a = a\n        self.op = 0\n        self.init()\n    def init(self) -> None:\n        self.ma = max(self.a)\n        self.mn = min(self.a)\n\n    def op1(self) -> None:\n        for i in range(self.n):\n            if self.a[i] > self.mn:\n                self.a[i] -= self.ma - self.mn\n                self.op += 1\n        self.init()\n\n    def op2(self) -> None:\n        for i in range(self.n):\n            if self.a[i] < self.ma:\n                self.a[i] += self.ma - self.mn\n                self.op += 1\n        self.init()\n\n    def solve(self) -> None:\n        while self.ma!= self.mn:\n            if self.ma > self.mn:\n                self.op1()\n            else:\n                self.op2()\n        print(self.op)\n        for i in range(self.op):\n            print(1, end ='')\n            if i % 2 == 1:\n                print(i, end ='')\n            else:\n                print(i - 1, end ='')\n            print(*self.a, sep ='')\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 4 6 6 6\") == \"2\"\nassert solution(\"3 8 10\") == \"2\"\nassert solution(\"2 8 10\") == \"2\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"3 4 8 9\") == \"1\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 6 6 6') == '2'\nassert solution('8 10 10 10') == '2'\nassert solution('1 1 1 1') == '0'"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == 2\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 6 6 6\") == 2\n\"\"\"\n\nn = int(stdin.readline())\narr = [int(x) for x in stdin.readline().split()]\n\ns = sorted(arr)\n\nequal = []\n\nfor i in range(len(s) - 1):\n    if s[i] == s[i + 1]:\n        equal.append(s[i])"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 4 6 6 6') == '2'\nassert solution('3\\n2 8 10') == '2'\nassert solution('4\\n1 1 1 1') == '0'"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 4 6 6 6\\n\") == \"2\\n1 2 3\\n1 1 2\"\nassert solution(\"3\\n2 8 10\\n\") == \"2\\n2 2 1\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 3 6\") == \"2\"\n\nimport sys\ninput = sys.stdin.readline\n\nn = int(input().strip())\na = list(map(int, input().strip().split()))"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0''') == '2'\n\"\"\""
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100010') == 1\nassert solution('10000010') == 2\nassert solution('00000000') == 0\nassert solution('00100000') == 1\n\nassert solution('10100100') == 1\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'5 1\\n101010'\n) == '2'\nassert solution(\n'6 1\\n100010'\n) == '1'\nassert solution(\n'6 2\\n000000'\n) == '0'\nassert solution(\n'5 1\\n101010'\n) == '2'\nassert solution(\n'6 2\\n000000'\n) == '0'\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100010') == 1\nassert solution('10010001') == 1\nassert solution('10100100') == 0\nassert solution('11111111') == 0\nassert solution('10101010') == 2\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('101010') == '0'\nassert solution('100010') == '1'\nassert solution('111011') == '1'\nassert solution('111001') == '2'\nassert solution('10010001') == '1'\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\n\nfor i in range(int(input())):\n    n, k = map(int, input().split())\n    s = input()\n    print(solution(s))\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\nassert solution(\"11111111\") == 0\nassert solution(\"10101010\") == 1\nassert solution(\"010101010\") == 0\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n''') == '2'\n\nassert solution('''6 1\n101010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n''') == '2'\n\nassert solution('''6 1\n101010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n''') == '0'\n\n'''\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n''') == '1'\n\nassert solution('''\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n''') == '2'\n\nassert solution('''\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n''') == '0'\n\nassert solution('''\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n''') == '1'\n\nassert solution('''\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n''') == '1'"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0''') == '1'\nassert solution('''6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0''') == '2'\nassert solution('''6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0''') == '0'\n\n-----Big O Notation-----"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3\\n4 6 7'\n\"\"\"\n\n\nfrom collections import Counter, defaultdict\nfrom typing import DefaultDict\nfrom unittest.mock import patch\n\nclass SegmentTree:\n\n    def __init__(self, n):\n        self.n = n\n        self.lengths = [0] * (2 * n)\n        self.values = [0] * (2 * n)\n        self.values[n:n + n] = list(range(1, n + 1))\n\n    def update(self, i, l, r, x):\n        \"\"\"\n        O(log n)\n        \"\"\"\n        i += self.n\n        self.lengths[i] = r - l + 1\n        self.values[i] += x\n        while i!= 0:\n            i = (i - 1) // 2\n            self.values[i] = self.values[2 * i + 1] + self.values[2 * i + 2]\n            self.lengths[i] = self.lengths[2 * i + 1] + self.lengths[2 * i + 2]\n\n    def sum(self, i, l, r):\n        \"\"\"\n        O(log n)\n        \"\"\"\n        i += self.n\n        result = 0\n        while i > 0:\n            if l <= self.lengths[i] and self.lengths[i] <= r:\n                result += self.values[i]\n            i = (i - 1) // 2\n        return result\n\n    def intersection(self, l, r):\n        \"\"\"\n        O(log n)\n        \"\"\"\n        i = self.lengths.index(max(0, r - l + 1))\n        j = 0\n        while i!= 0:\n            j += 2 ** (i - 1)\n            i = (i - 1) // 2\n        if self.values[j + l - 1] > 0:\n            return (self.values[j + r], j + r)\n        else:\n            return (0, 0)\n\n    def intersect_sum(self, l, r):\n        \"\"\"\n        O(log n)\n        \"\"\"\n        return self.sum(0, l - 1, r - 1)\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n4 6 7\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 4 5\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n\"\"\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\"\n\"\"\"\n\nimport itertools\nfrom functools import reduce\n\nn, k = map(int, input().split())\na = sorted([tuple(map(int, input().split())) for _ in range(n)])\n\nprint(n - reduce(lambda x, y: x + 1 if y[0] <= x[1] <= y[1] else x,\n                 [(0, a[0][0] - 1)] + a + [(a[-1][1] + 1, 2 * 10**5)]))\nprint(*[i + 1 for i in\n        next(filter(lambda x: x[0] <= a[0][0] and a[-1][1] <= x[1],\n                    itertools.groupby(sorted(a, key=lambda x: a[x][1] - a[x][0],\n                                             reverse=True),\n                                       key=lambda x: a[x][1]))[0][1])\n      ])\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n4 6 7'\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == '3'\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3') == '4'\n\"\"\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\"\"\") == \"3\\n4 6 7\"\n\n\"\"\"\nimport sys\n\nfrom typing import List\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == \"3\\n4 6 7 \"\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == \"3\\n1 4 5 \"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 4 5\"\n\n\"\"\"\nimport sys\nfrom collections import Counter\nfrom typing import List, Optional, Tuple, Union\n\nsegments: List[Tuple[int, int]] = []\nfor _ in range(int(sys.stdin.readline())):\n    left, right = map(int, sys.stdin.readline().split())\n    segments.append((left, right))\n\ncounter = Counter()\nfor left, right in segments:\n    counter[left] += 1\n    counter[right] += 1\n\nmax_segments = 0\nmax_segment_index = -1\nfor index, value in enumerate(counter.values()):\n    if value > max_segments:\n        max_segments = value\n        max_segment_index = index\n\nfor segment in segments:\n    if segment[0] <= max_segment_index <= segment[1]:\n        print(segment)\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n4 6 7\\n\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 4 5\\n\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6\\n\"\n\nassert solution(\"10 10\\n19 19\\n18 19\\n17 19\\n16 19\\n15 19\\n14 19\\n13 19\\n12 19\\n11 19\\n10 19\\n9 19\\n8 19\\n7 19\\n6 19\\n5 19\\n4 19\\n3 19\\n2 19\\n1 19\\n0 19\\n19 0\\n18 19\\n17 19\\n16 19\\n15 19\\n14 19\\n13 19\\n12 19\\n11 19\\n10 19\\n9 19\\n8 19\\n7 19\\n6 19\\n5 19\\n4 19\\n3 19\\n2 19\\n1 19\\n0 19\\n19 0\\n18 19\\n17 19\\n16 19\\n15 19\\n14 19\\n13 19\\n12 19\\n11 19\\n10 19\\n9 19\\n8 19\\n7 19\\n6 19\\n5 19\\n4 19\\n3 19\\n2 19\\n1 19\\n0 19\\n19 0\\n18 19\\n17 19\\n16 19\\n15 19\\n14 19\\n13 19\\n12 19\\n11 19\\n10 19\\n9 19\\n8 19\\n7 19\\n6 19\\n5 19\\n4 19\\n3 19\\n2 19\\n1 19\\n0 19\\n19 0\\n18 19\\n17 19\\n16 19\\n15 19\\n14 19\\n13 19\\n12 19\\n11 19\\n10 19\\n9 19\\n8 19\\n7 19\\n6 19\\n5 19\\n4 19\\n3 19\\n2 19\\n1 19\\n0 19\\n19 0\\n18 19\\n17 19\\n16 19\\n15 19\\n14 19\\n13 19\\n12 19\\n11 19\\n10 19\\n9 19\\n8 19\\n7 19\\n6 19\\n5 19\\n4 19\\n3 19\\n2 19\\n1 19\\n0 19\\n19 0\\n18 19\\n17 19\\n16 19\\n15 19\\n14 19\\n13 19\\n12 19\\n11 19\\n10 19\\n9 19\\n8 19\\n7 19\\n6 19\\n5 19\\n4 19\\n3 19\\n2 19\\n1 19\\n0 19\\n19 0\\n18 19\\n17 19\\n16 19\\n15 19\\n14 19\\n13 19\\n12 19\\n11 19\\n10 19\\n9 19\\n8 19\\n7 19\\n6 19\\n5 19\\n4 19\\n3 19\\n2 19\\n1 19\\n0 19\\n19 0\\n18 19\\n17 19\\n16 19\\n15 19\\n14 19\\n13 19\\n12 19\\n11 19\\n10 19\\n9 19\\n8 19\\n7 19\\n6 19\\n5 19\\n4 19\\n3 19\\n2 19\\n1 19\\n0 19\\n19 0\\n18 19\\n17 19\\n16 19\\n15 19\\n14 19\\n13 19\\n12 19\\n11 19\\n10 19\\n9 19\\n8 19\\n7 19\\n6 19\\n5 19\\n4 19\\n3 19\\n2 19\\n1 19\\n0 19\\n19 0\\n18 19\\n17 19\\n16 19\\n15 19\\n14 19\\n13 19\\n12 19\\n11 19\\n10 19\\n9 19\\n8 19\\n7 19\\n6 19\\n5 19\\n4 19\\n3 19\\n2 19\\n1 19\\n0 19\\n19 0\\n18 19\\n17 19\\n16 19\\n15 19\\n14 19\\n13 19\\n12 19\\n11 19\\n10 19\\n9 19\\n8 19\\n7 19\\n6 19\\n5 19\\n4 19\\n3 19\\n2 19\\n1 19\\n0 19\\n19 0\\n18 19\\n17 19\\n16 19\\n15 19\\n14 19\\n13 19\\n12 19\\n11 19\\n10 19\\n9 19\\n8 19\\n7 19\\n6 19\\n5 19\\n4 19\\n3 19\\n2 19\\n1 19\\n0 19\\n19 0\\n18 19\\n17 19\\n16 19\\n15 19\\n14 19\\n13 19\\n12 19\\n11 19\\n10 19\\n9 19\\n8 19\\n7 19\\n6 19\\n5 19\\n4 19\\n3 19\\n2 19\\n1 19\\n0 19\\n19 0\\n18 19\\n17 19\\n16 19\\n15 19\\n14 19\\n13 19\\n12 19\\n11 19\\n10 19\\n9 19\\n8 19\\n7 19\\n6 19\\n5 19\\n4 19\\n3 19\\n2 19\\n1 19\\n0 19\\n19 0\\n18 19\\n17 19\\n16 19\\n15 19\\n14 19\\n13 19\\n12 19\\n11 19\\n10 19\\n9 19\\n8 19\\n7 19\\n6 19\\n5 19\\n4 19\\n3 19\\n2 19\\n1 19\\n0 19\\n19 0\\n18 19\\n17 19\\n16 19\\n15 19\\n14 19\\n13 19\\n12 19\\n11 19\\n10 19\\n9 19\\n8 19\\n7 19\\n6 19\\n5 19\\n4 19\\n3 19\\n2 19\\n1 19\\n0 19\\n19 0\\n18 19\\n17 19\\n16 19\\n15 19\\n14 19\\n13 19\\n12 19\\n11 19\\"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(example1) == \"31\"\nassert solution(example2) == \"10\"\n\"\"\"\nimport math"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n\") == \"30\\n31\\n10\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5 6 15 30\") == \"30\"\nassert solution(\"4\\n10 6 30 15\") == \"31\"\nassert solution(\"3\\n3 4 6\") == \"10\"\n\"\"\"\n\n\"\"\"\nFrom stdin:\na[i] = list of integers\nt = integer\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\") == \"30\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n5 6 15 30') == '30'\n\"\"\"\n\n\n\"\"\"\n[ 1 ]\n\n1 2 3 4 5\n1 2 3 4\n\nans = 1"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6') == '30'\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\") == \"30\"\n\nassert solution(\"5\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\") == \"31\"\n\nassert solution(\"1\\n1\") == \"1\"\n\nassert solution(\"1\\n5\\n5\\n5\\n5\") == \"5\"\n\nassert solution(\"3\\n1\\n1\\n1\") == \"1\""
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(['5 4 3 2 1']) == '10', 'wrong result for input 1'\nassert solution(['1 2 3 4 5']) == '10', 'wrong result for input 2'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"20\\n20\\n10\\n\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n5 6 15 30') == '30'\n\"\"\"\n\n\nimport sys\nfrom itertools import product"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\\n\") == \"2\\n1\\n2\\n1\"\n'''\n\n\n'''\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 3\\n2\\n3\") == \"1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\") == \"2\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\") == \"1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\") == \"2\"\n\n\n-----Hint-----\n\nThe goal is to calculate the minimum number of teams (a number $m$) such that no two students $i$ and $j$ belong to the same team (with the same difference $|a_i - a_j|$) such that $|a_i - a_j| = 1$.\n\nTo do this, you can use the concept of \"Trees\" (or \"Fenwick trees\").\n\n* The Tree is represented as a list.\n* For any $i$, the $i$-th element of the tree is the number of elements in the interval [0, $i$) whose sum is less than $i$. For example, the second element of the tree, $t[1]$, is the number of elements in the interval [0, 1) whose sum is less than 1.\n\nSince it is sufficient to know only the numbers of elements in the interval [0, $i$) with a fixed value of $x$, you can create a \"Binary Indexed Tree\" (or \"BIT\") for $x$, and then to find the number of elements in the interval [0, $i$) with a fixed value of $x$ you can count the number of elements with fixed value in the interval [0, $i$) by adding the prefix sum of elements with fixed value in the interval [0, $i$) and then subtracting the prefix sum of elements with fixed value in the interval [0, $i$) with a fixed value of $x$.\n\nSince each query in the input is independent, you can simply create a new BIT for each query and then update the value of $x$ for each query.\n\nIn the first example of the input, the value of $x$ will be $a_1 = 2$, $a_2 = 1$, $a_3 = 1$, $a_4 = 2$ and so on. So the first query should look like:\n\nBIT = [0] * (len(stdin) + 1)\nBIT[0] = 0\nBIT[1] = 0\nBIT[2] = 2\nBIT[3] = 2\nBIT[4] = 2\n\nFor each query, update BIT with the new value of $x$ and then calculate the number of elements with fixed value of $x$ in the interval [0, $i$).\n\nTo calculate the number of elements with fixed value of $x$ in the interval [0, $i$), you can use the following formula:\n\n1) $y = x + \\sum_{k=1}^{i-1} |a_k|$\n2) $z = x + \\sum_{k=1}^{i} |a_k|$\n3) $x = (z - y) / i + 1$\n\nIf you don't know how to calculate the formula in 3), you can use the idea of the \"disjoint-intervals sum\" and then calculate $x$ by:\n\n1) $y = \\sum_{k=1}^{i-1} |a_k|$\n2) $z = \\sum_{k=1}^{i} |a_k|$\n3) $x = (z - y) / i + 1$\n\nAs you can see, it is sufficient to know only the numbers of elements in the interval [0, $i$) with a fixed value of $x$.\n\"\"\"\n\n\nfrom bisect import bisect_left\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\n\nassert solution(\"4\\n3 1 3 4\\n2\\n2 3\\n3\\n1\\n1\\n2\\n3\\n4\\n1\\n1\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n2\\n3\\n2\\n3\\n4\\n4\\n3\\n1\\n1\\n2\\n3\\n4\\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\") == \"2\"\nassert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\") == \"1\"\nassert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\") == \"2\"\n\"\"\""
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100''') == \"2\\n1\\n2\\n1\"\n\n'''\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 10 1 20\\n2\\n3 6') == '2'\nassert solution('4\\n2 10 1 20\\n2\\n3 6') == '1'\nassert solution('4\\n2 10 1 20\\n2\\n3 6') == '2'\n\n-----Hint-----\n\nIn the first query of the example, it is possible to divide the students into exactly two teams: the first team consists of students $1$ and $2$ and the second team consists of students $3$ and $4$.\n\nIn the second query of the example, it is possible to compose just a single team containing both students.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100') == '2\\n1\\n2\\n1'\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\") == '2'\nassert solution(\"4\\n4\\n1 2 3 4\\n2\\n1 4\") == '2'\nassert solution(\"5\\n2\\n3 4 99 100\") == '1'\nassert solution(\"5\\n42\") == '1'\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"2\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"2\"\n\"\"\"\n\nimport sys\nimport math\n\nDEBUG = False\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\n\nassert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\nassert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 6\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'NO'\nassert solution('aaaaaaaaa') == 'NO'\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') == 'YES'\nassert solution('ababababababababababababababababababababababababababababababab') == 'NO'\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18\n\"\"\"\n) == \"\"\"\nYES\nNO\nNO\nYES\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4\\n1 2 3 6') == 'YES'\nassert solution('5 2 6 27\\n3 3 5 18') == 'NO'\n\n-----Notes-----\n\nDon't forget to check the test case with the lowest value of n.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == 'YES'\nassert solution('1 2 3 6') == 'NO'\nassert solution('5 2 6 27') == 'NO'\nassert solution('3 3 5 18') == 'YES'\n\nassert solution('4\\n1 2 3 4') == 'YES'\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18\") == \"YES\\nNO\\nNO\\nYES\"\nassert solution(\"4\\n5\\n7\\n7\\n9\\n8\\n10\") == \"YES\\nNO\\nNO\\nYES\\nNO\\nYES\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 1 6') == 'NO'\nassert solution('5 2 6 27') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 6\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"NO\"\nassert solution(\"3 3 5 18\") == \"YES\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18') == 'YES\\nNO\\nNO\\nYES'\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\n1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18''') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 3 1 5 3\") == \"YES\"\nassert solution(\"5 4 3 2 1\") == \"NO\"\nassert solution(\"5 4 1 2 3\") == \"YES\"\nassert solution(\"5 5 1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 3 1 5 3\") == \"NO\"\nassert solution(\"4 3 1 5 3\") == \"YES\"\nassert solution(\"5 4 3 2 1\") == \"YES\"\nassert solution(\"5 3 2 4 1\") == \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 2 7 3 3 1 4') == 'YES'\nassert solution('5 4 3 2 1 0') == 'YES'\nassert solution('5 1 1 2 1 2') == 'NO'\nassert solution('5 1 1 2 1 3') == 'NO'\nassert solution('1 2 3 4 5 6 7') == 'YES'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == 'YES'\nassert solution(\"5 3 1 5 3\") == 'YES'\nassert solution(\"5 4 3 2 1\") == 'NO'\nassert solution(\"5 0 4 3 2 1\") == 'YES'\n\nassert solution(\"5 1 4 3 2 1\") == 'YES'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 1 5 3\") == \"YES\\n1\\n3\\n5 4 3 2 1\"\nassert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == 'YES'\nassert solution(\"5 3 4 2 1 0\") == 'NO'\nassert solution(\"5 1 2 3 4 0\") == 'YES'\nassert solution(\"1 2 3 4 5 6 7\") == 'NO'\nassert solution(\"0 1 2 3 4 5 6 7\") == 'YES'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == 'YES'\nassert solution(\"5 3 1 5 3\") == 'NO'\nassert solution(\"4 3 1 5 3\") == 'YES'\nassert solution(\"0 1 2 3 4\") == 'YES'\nassert solution(\"1 1 2 1 2\") == 'NO'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n    5\n    4 3 1 5 3\n    \"\"\"\n) == \"\"\"\nYES\n1\n3\n4\n5 4 3 1 \n\"\"\"\n)\n\nassert solution(\n    \"\"\"\n    7\n    7 2 7 3 3 1 4\n    \"\"\"\n) == \"\"\"\nYES\n2\n3 7 \n5\n7 4 3 2 1 \n\"\"\"\n)\n\nassert solution(\n    \"\"\"\n    7\n    7 2 7 3 3 1 4\n    \"\"\"\n) == \"\"\"\nYES\n2\n3 7 \n5\n7 4 3 2 1 \n\"\"\"\n)\n\nassert solution(\n    \"\"\"\n    5\n    4 3 1 5 3\n    \"\"\"\n) == \"\"\"\nNO\n\"\"\"\n)\n\nassert solution(\n    \"\"\"\n    5\n    4 3 1 5 3\n    \"\"\"\n) == \"\"\"\nYES\n1\n3 \n4\n5 4 3 1 \n\"\"\"\n)"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"5 4 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\"\nassert solution(\"5 1 4 3 2 1\") == \"NO\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 3 1 5 3\") == \"YES\"\nassert solution(\"5 4 3 2 1\") == \"NO\"\nassert solution(\"5 4 3 2 1\") == \"YES\"\nassert solution(\"5 4 3 2 1\") == \"YES\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == \"18\"\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1\\n\") == \"8\"\nassert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\\n\") == \"-1\"\nprint('The code ran Correctly')\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == \"18\"\nassert solution(\"5 3\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 0 1\\n3 0 1\\n\") == \"8\"\n\"\"\"\n\na, b = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nans = []\n\nfor i in range(a[0]):\n    ans.append(a[i + 1])\n\nfor j in range(b[0]):\n    ans.append(b[j + 1])\n\nprint(sum(ans))\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 4\") == \"18\"\n\n\"\"\"\n\nn, k = map(int, input().split())\nbook = []\nfor i in range(n):\n    book.append(list(map(int, input().split())))\n\nbook.sort(key=lambda x: x[0])\n\ni, j = 0, 0\nans = 0\nfor t, a, b in book:\n    if a == 1 and b == 1:\n        if k > 0:\n            k -= 1\n            ans += t\n        else:\n            ans += t\n            break\n    else:\n        if a == 0 and b == 1:\n            j += 1\n        elif a == 1 and b == 0:\n            i += 1\n\nprint(ans if k == 0 else -1)\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1\\n2 1 1\") == \"7\"\nassert solution(\"3 0 1\\n2 1 1\") == \"7\"\n\nassert solution(\"3 0 0\\n2 1 0\") == \"3\"\nassert solution(\"5 0 1\\n3 0 1\") == \"8\"\n\nassert solution(\"3 0 0\\n2 1 0\\n5 1 0\") == \"3\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n') == '18'\nassert solution('5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1\\n') == '8'\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == \"18\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == \"18\"\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1\") == \"8\"\nassert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\") == \"-1\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == \"18\"\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1\") == \"8\"\nassert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\") == \"-1\"\n\n\n\n-----Explanation-----\nThe problem is too easy for you.\n\n\n\n\"\"\""
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3\") == \"7\"\nassert solution(\"8 3\") == \"9\"\nassert solution(\"9 3\") == \"9\"\nassert solution(\"4 0\") == \"0\"\nassert solution(\"8 1\") == \"9\"\n\"\"\"\n\nfrom collections import deque\n\nn, k = list(map(int, input().split()))\n\nbooks = deque([])\nfor _ in range(n):\n    t, a, b = list(map(int, input().split()))\n    books.append((t, a, b))"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 1 1\\n9 0 0\\n1 0 1\\n2 1 1\\n5 0 1\\n3 0 1\") == \"8\"\nassert solution(\"5 2 0\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 0 1\\n3 0 1\") == \"-1\"\nassert solution(\"5 3 0\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 0 1\\n3 0 1\") == \"8\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5') == '2\\n6\\n-1\\n7'\nassert solution('4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5') == '2\\n6\\n-1\\n7'\n\n-----Solution-----\n\n\"\"\"\n\nfrom typing import List, Tuple, Set\nfrom collections import Counter"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n\") == '2\\n6\\n-1\\n7'\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == '2'\n\nassert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == '6'\n\nassert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == '-1'\n\nassert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == '7'\n\nassert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == '-1'\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == '2\n\nassert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == '6\n\nassert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == '-1\n\nassert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == '7\n\nassert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5''') == '-1"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open('./sample.in', 'r').read()) == '2\\n6\\n-1\\n7'\n\"\"\""
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"6\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"-1\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"7\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5') == '2\\n6\\n-1\\n7'\nassert solution('4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5') == '2\\n6\\n-1\\n7'\n\n\"\"\""
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == '2\\n6\\n-1\\n7'\nassert solution(\"1 1\\n1\") == '1\\n1'\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n\") == \"2\\n6\\n-1\\n7\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == '2\\n6\\n-1\\n7'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 15 16 23\") == 5\n\"\"\""
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n\"\"\""
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n\n\"\"\"\n\nfrom itertools import chain\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n\"\"\""
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n\"\"\"\n\nn = input()\na = list(map(int, input().split()))\na.sort()\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8 15 16 23\\n') == '5'\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42\\n') == '0'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\n\"\"\""
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42') == '0'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '3'\n\"\"\""
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\") == \"0\"\nassert solution(\"13 42\") == \"3\"\nassert solution(\"18 4\") == \"2\"\nassert solution(\"1337 420\") == \"92\"\nassert solution(\"123456789 1000000000\") == \"87654322\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\"\nassert solution(\"13 37\\n100500 9000\") == \"3\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"92\"\nassert solution(\"1 2\\n2 1\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5') == '0'\nassert solution('13 42') == '3'\nassert solution('18 4') == '2'\nassert solution('1337 420') == '92'\nassert solution('123456789 1000000000') == '87654322'\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\\n3\"\nassert solution(\"13 37\\n1337 420\") == \"2\\n92\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"87654322\\n9150\"\nassert solution(\"10 50\\n3 9\") == \"2\\n0\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n13 42\\n18 4\\n1337 420\\n123456789 1000000000\\n100500 9000\") == \"0\\n3\\n2\\n92\\n87654322\\n9150\"\nprint(solution(\"5 5\\n13 42\\n18 4\\n1337 420\\n123456789 1000000000\\n100500 9000\"))\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n13 42\\n18 4\\n1337 420\\n123456789 1000000000\\n100500 9000\\n\") == \"0\\n3\\n2\\n92\\n87654322\\n9150\"\n\"\"\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('5 5\\n13 42') == '0\\n3'\nassert solution('1337 420\\n18 4') == '2\\n2'\nassert solution('123456789 1000000000\\n100500 9000') == '895\\n7'\nassert solution('1010101010') == '1\\n0'\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\") == \"0\"\nassert solution(\"13 42\") == \"3\"\nassert solution(\"18 4\") == \"2\"\nassert solution(\"1337 420\") == \"92\"\nassert solution(\"123456789 1000000000\") == \"87654322\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5\\n13 42') == '0'\nassert solution('13 37\\n42 1000000000') == '3'\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5, 5) == 0\nassert solution(13, 42) == 3\nassert solution(18, 4) == 2\nassert solution(1337, 420) == 2\nassert solution(123456789, 1000000000) == 92\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n\n\"\"\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"7\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n\"\"\") == \"\"\"12339\n0\n15\n54306\n999999995\n185\n999999998\"\"\"\n\n\"\"\"\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 5 \\cdot 10^4$) \u2014 the number of test cases. The next $t$ lines contain test cases.\n\nThe only line of the test case contains three integers $x, y$ and $n$ ($2 \\le x \\le 10^9;~ 0 \\le y < x;~ y \\le n \\le 10^9$).\n\nIt can be shown that such $k$ always exists under the given constraints.\n\n\"\"\""
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n\n\n---\n\nApproach:\n\n*   \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u0447\u0438\u0441\u043b\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u0438 \u0431\u043e\u043b\u044c\u0448\u0435 1.\n*   \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0442\u043e\u0440\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043a\u0440\u0430\u0442\u043d\u043e\u0435 \u0442\u0440\u0435\u0442\u044c\u0435\u043c\u0443, \u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u0435 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u0433\u043e.\n*   \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0435\u0440\u0432\u043e\u0435 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u0438 \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u043c \u0432\u0442\u043e\u0440\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u0435."
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 5 12345') == '12339'\nassert solution('5 0 4') == '0'\nassert solution('10 5 15') == '15'\nassert solution('17 8 54321') == '54306'\nassert solution('499999993 9 1000000000') == '999999995'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 12345\") == \"12339\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\nprint(\"Passed\")"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 12345\") == \"12339\"\nassert solution(\"5 0 4\") == \"0\"\nassert solution(\"10 5 15\") == \"15\"\nassert solution(\"17 8 54321\") == \"54306\"\nassert solution(\"499999993 9 1000000000\") == \"999999995\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n\n\n\"\"\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\""
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 3''') == '3'\nassert solution('''1 1''') == '1'\nassert solution('''2 1''') == '1'\nassert solution('''4 3''') == '0'\nassert solution('''5 2''') == '1'\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"1\"\nassert solution(\"7 2\") == \"1\"\nassert solution(\"8 2\") == \"1\"\nassert solution(\"7 3\") == \"2\"\nassert solution(\"8 3\") == \"2\""
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n\nprint(\"Well done!\")\n\n\"\"\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == '6'\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == '8'\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == '4'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"4\"\nassert solution(\"7 3\") == \"4\"\nassert solution(\"8 2\") == \"8\"\nassert solution(\"10 2\") == \"5\"\nassert solution(\"10 3\") == \"4\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 4') == '4'\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 2 3 2 4 10\") == 6\nassert solution(\"1 2 2 3 2 4 6 10\") == 8\nassert solution(\"1 2 2 3 2 4 5\") == 4\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n1 2 3 2\\n') == '3'\nassert solution('4 2\\n1 2 3 2\\n') == '3'\nassert solution('4 2\\n1 2 3 2\\n') == '3'\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('ABABBABC') == 'abababa'\nassert solution('CABBAB') == 'cababab'\nassert solution('BABABAB') == 'baabaab'\nassert solution('CABBABBA') == 'cababaab'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABC') == 'abc'\n\"\"\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"ABC\") == \"abc\"\nassert solution(\"ABCabc\") == \"abcABC\"\nassert solution(\"ABCabcABC\") == \"abcABCabc\"\n\n\"\"\"\n\nfrom sys import stdin\n\nstdin = stdin.read().split(\"\\n\")\nn, k = map(int, stdin[0].split())\ns = stdin[1]\n\nprint(s[:k - 1] + s[k:].lower())\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABC') == 'aBC'\nassert solution('aBc') == 'abC'\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('bA') == 'ba'\nassert solution('a') == 'a'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC\", 1) == \"aBC\"\nassert solution(\"ABC\", 2) == \"abC\"\nassert solution(\"ABC\", 3) == \"abc\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('abc') == 'abc'\n\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC\") == \"abc\"\n\"\"\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('abc') == 'abc'\nassert solution('ABCabc') == 'abcabc'\n\"\"\"\n\nimport sys\nimport itertools\nimport operator\n\nN, K = map(int, sys.stdin.readline().split())\nS = sys.stdin.readline().rstrip()\nS = S[:K - 1] + S[K].lower() + S[K + 1:]\nprint(S)\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\""
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40') == '3\\n4\\n6\\n1\\n5\\n2'\nassert solution('khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40') == '3\\n4\\n6\\n1\\n5\\n2'\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\nprint(solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\"))\n\nimport sys"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\n\"\"\""
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\n\"\"\""
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    'khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\n'\n    ) == '3\\n4\\n6\\n1\\n5\\n2'"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\n\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\n\"\"\""
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\nassert solution(\"moscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"4\\n6\\n1\\n5\\n2\"\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 10\\nkhabarovsk 40\") == \"3\\n4\\n1\\n6\\n2\"\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nkhabarovsk 40\") == \"1\\n2\\n3\\n4\\n5\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n5\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\n''') == '3\\n4\\n6\\n1\\n5\\n2'\n\nprint('PASSED')"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == '3\\n4\\n6\\n1\\n5\\n2'\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 9\\n\") == \"Yes\"\n\"\"\"\n\nK, X = input().split()\nK, X = int(K), int(X)"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\n\"\"\"\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n\n    def test_1(self):\n        K, X = \"2 900\".split()\n        self.assertEqual(solution(K, X), \"Yes\")\n\n    def test_2(self):\n        K, X = \"1 100\".split()\n        self.assertEqual(solution(K, X), \"No\")\n\n    def test_3(self):\n        K, X = \"1 1000\".split()\n        self.assertEqual(solution(K, X), \"No\")"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"\n\nK, X = map(int, input().split())\nprint(\"Yes\" if K * 500 >= X else \"No\")\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 900\\n\") == \"Yes\"\n\n\"\"\"\n\nk, x = map(int, input().split())\ncoins = [500, 100, 50, 10, 5, 1]"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '2 1000'\n    ) == 'Yes'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 900\") == \"Yes\"\nassert solution(\"4 4000\") == \"No\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 10') == '0.145833333333'\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\n\"\"\"\n\n\"\"\"\nThe first line of input gives the number of test cases, T. T test cases follow.\nEach test case is described by a line with the two integers N and K.\n\n-----Output-----\nFor each test case, print a single line containing the probability Snuke wins the game.\n\n-----Sample Input-----\n1\n5 10\n\n-----Sample Output-----\n0.5\n\"\"\"\n\nimport math"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 10') == '0.145833333333'\n\"\"\"\n\nfrom math import factorial\n\nn, k = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\") == '0.145833333333'"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 10') == '0.145833333333'\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 10') == '0.145833333333'\n\"\"\"\n\n\"\"\"\nSample Input:\n3 10\n\nSample Output:\n0.145833333333\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\""
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 10') == '0.145833333333'\nassert solution('2 2') == '0.166666666666'\n\"\"\"\n\nimport sys\nfrom typing import Dict\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\nassert solution(\"6 10\") == \"0.43572916667\"\nassert solution(\"3 11\") == \"0.52194324073\"\nassert solution(\"6 11\") == \"0.57007282857\"\n\"\"\""
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 10') == '0.145833333333'\nassert solution('1 10') == '0.1'\nassert solution('5 10') == '0.21'\nassert solution('6 10') == '0.245'\nassert solution('10 10') == '0.3312133814'\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"SAT\") == 1\n\"\"\""
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"SAT\") == 1\nassert solution(\"SUN\") == 0\nassert solution(\"MON\") == 1\nassert solution(\"TUE\") == 2\nassert solution(\"WED\") == 3\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"SAT\") == \"1\"\nprint(solution(\"SAT\"))\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"SAT\") == 1\nassert solution(\"SUN\") == 0\nassert solution(\"MON\") == 0\nassert solution(\"TUE\") == 0\nassert solution(\"WED\") == 0\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"SAT\") == 1\n\"\"\""
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"SAT\") == \"1\"\n\n----------------------------"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"SAT\") == 1\nassert solution(\"MON\") == 0\nassert solution(\"TUE\") == 0\nassert solution(\"WED\") == 0\nassert solution(\"THU\") == 0\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"SAT\") == 1\nassert solution(\"SUN\") == 0\nassert solution(\"MON\") == 0\nassert solution(\"TUE\") == 0\nassert solution(\"WED\") == 0\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"SAT\") == 1\n\"\"\""
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"SAT\") == \"1\"\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n\"\"\"\n\nr, d, x_2000 = map(int, stdin.split())\n\nx = r * x_2000\nfor i in range(2001, 2011):\n    x -= d\n    print(x)\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\n\"\"\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10 20\\n') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\"\n\nimport sys\n\nD, r, x = [int(x) for x in sys.stdin.readline().split()]\n\nfor year in range(2000, 2011):\n    print(r * x - D)\n    x = r * x - D\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\nprint(solution(\"2 10 20\"))\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 10 20\\n') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\nprint(solution(stdin))"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '4'\nassert solution('3\\n4 1 2') == '0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\\n\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\\n\"\nassert solution(\"3\\n4 1 2\") == \"0\\n\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\""
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3 1 1 4\\n\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\\n\") == \"4\"\nassert solution(\"3\\n4 1 2\\n\") == \"0\"\n\n\"\"\"\nfrom typing import Dict\n\nimport sys\n\nsys.stdin = open(\"input.txt\")"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '4'\nassert solution('3\\n4 1 2') == '0'\nassert solution('3\\n4 1 2') == '0'\nassert solution('5\\n1 1 1 1 1') == '6'\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == 5\nassert solution(\"5\\n1 3 2 1 4\") == 4\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '5\\n1 3 1 1 4\\n'\n    ) == '5'\nassert solution(\n    '5\\n1 3 2 1 4\\n'\n    ) == '4'\nassert solution(\n    '3\\n4 1 2\\n'\n    ) == '0'\nassert solution(\n    '3\\n1 1 1\\n'\n    ) == '0'\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\nassert solution(\"3\\n4 1 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\\n\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\\n\"\nassert solution(\"3\\n4 1 2\") == \"0\\n\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\n\n\n\n\n\n\n\n\"\"\"\n\n\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 5\") == \"NO\"\nassert solution(\"100 100 100\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\nprint(solution(stdin))"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n2 3 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000''') == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000'''\nprint(solution(stdin))\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\nprint(solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\"))\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000') == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000'\nassert solution('1 1000000000 1000000000\\n1 1000000000 1000000000') == 'NO'\n\"\"\"\n\nfrom collections import deque\n\nt = int(input())\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\\n') == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000'\nprint(solution(stdin))\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'NO'\nassert solution('1 2 3') == 'NO'\nassert solution('3 2 3') == 'YES'\nassert solution('3 2 1') == 'YES'\nassert solution('1 2 3') == 'YES'\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\nassert solution(\"3\\n2 1 3\\n1 1 3\\n2 2 3\") == \"NO\\n2 1 1\\nNO\"\nprint('Passed')\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\"\"\"\n\n\"\"\"\nIn the first line, print \"YES\" (without quotes) if there is a solution and \"NO\" (without quotes) if there isn't.\nIn the second line, print any solution.\nIn the third line, print \"NO\" (without quotes) if there isn't a solution and any solution otherwise.\nIn the fourth line, print any solution.\nIn the fifth line, print \"NO\" (without quotes) if there isn't a solution and any solution otherwise.\nIn the sixth line, print any solution.\nIn each of the remaining lines, print any solution in any order.\nInput\n3\n4 6 9\n5 6 8\n5 8 6\n3 2 3\n\nOutput\nYES\n5 1 2\nNO\n3 1 1\nYES\n4 1 3\nNO\n3 2 3\n\"\"\""
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == '4'\nassert solution(\"5 1 4\\n4 2 3 4 1\") == '1'\nassert solution(\"5 3 3\\n1 2 3 1 1\") == '5'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\n\"\"\"\nfrom collections import deque\n\nstdin = \"\"\"5 2 6\n5 2 1 4 2\"\"\"\n\nn, m, k = map(int, stdin.split('\\n')[0].split())\nobjects = list(map(int, stdin.split('\\n')[1].split()))\nboxes = deque()\nobjects_in_boxes = []\n\nfor i in range(m):\n    boxes.append([])\n\nfor i in range(n):\n    boxes[objects[i] - 1].append(i + 1)\n\nobjects_in_boxes = [0] * n\n\nwhile boxes:\n    for box in boxes:\n        if box:\n            for object in box:\n                objects_in_boxes[object - 1] = 1\n            box.popleft()\n            break\n    for i in range(len(boxes)):\n        if not boxes[i]:\n            boxes[i] = deque(sorted(set(objects) & set(objects_in_boxes)))\n            break\n\nprint(sum(objects_in_boxes))\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n\"\"\"\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\ns = 0\nmax_s = 0\nfor i in range(n):\n    s += a[i]\n    if s > m * k:\n        break\n    max_s = i + 1\n\nprint(max_s)\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 6\") == \"4\"\n\"\"\"\n\nn, m, k = [int(x) for x in input().split(' ')]\na = [int(x) for x in input().split(' ')]"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3'\nassert solution('5 2 6') == '4'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\nassert solution(\"5 1 1\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 1 4\\n1 4 2 3 4 1\") == \"1\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaaaaaa\") == \"21\"\n\"\"\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacaba') == '12'\nassert solution('aaaaaaa') == '21'\nassert solution('sadfaasdda') == '0'\nassert solution('sadfaaasdda') == '0'\nassert solution('aaaaaaa') == '21'\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"aaaaaafsdsad\") == 21\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n\"\"\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\nassert solution(\"asdasdasdasd\") == \"asdasd\"\nassert solution(\"adadadaa\") == \"adadada\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"sadfaasdda\") == 21\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abacaba') == 12\nassert solution('aaaaaaa') == 0\nassert solution('sadfaasdda') == 21\nassert solution('abc') == 3\nassert solution('adfdgh') == 3\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacaba') == 12\nassert solution('aaaaaaa') == 0\nassert solution('aaaaaa') == 21\nassert solution('aaa') == 3\nassert solution('b') == 1"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == \"2\"\nassert solution(\"4\\n4\\n1 2 3 -1 -2\") == \"-1\"\nassert solution(\"4\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"6\"\nassert solution(\"4\\n6\\n-1 -1000000000 1 -1000000000 1 -1000000000\") == \"-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\") == \"2\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\nassert solution('1 2 3') == ''\n\nassert solution('1 2 -3') == ''\n\nassert solution('1 2 3 -1') == ''\n\nassert solution('1 -2 3') == ''"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1\\n6\\n-2999999997'\nassert solution('4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '-1\\n-1'\nassert solution('6\\n1 -1000000000 1 -1000000000 1 -1000000000\\n6\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '-2999999997\\n-2999999997'\nassert solution('5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1'\nassert solution('4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '-1'\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a b') == 'a b'\nassert solution('a b c') == 'a b c'\nassert solution('a b c d') == 'a b c d'\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1\\n6'\nassert solution('1\\n3\\n1 -1\\n1') == '1'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\""
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n\"\"\") == '2 -1'\nassert solution(\"\"\"4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n\"\"\") == '-1'\nassert solution(\"\"\"4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n\"\"\") == '6 -2999999997'\nassert solution(\"\"\"4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n\"\"\") == '-2999999997'\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n4\\n1 -2 3 -1') == '2\\n-1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"3\\n4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n5\\n-1 -1000000000 1 -1000000000 1 -1000000000\") == \"-1\\n-1\\n6\"\nassert solution(\"2\\n4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n6\\n-1 -1000000000 1 -1000000000 1 -1000000000\") == \"-2999999997\\n-1\\n6\"\n\n\n\n-----Test data-----\n\n-----Source-----\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n3 4\") == \"1 2\\n2 3\\n3 4\"\nassert solution(\"6 6\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\") == \"1 2\\n1 5\\n2 3\\n2 4\\n3 6\"\nassert solution(\"8 8\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 8\\n4 7\\n5 6\\n5 8\\n6 7\") == \"1 2\\n1 5\\n2 3\\n2 4\\n3 6\\n3 7\\n4 8\\n4 7\"\nassert solution(\"8 8\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 8\\n5 1\\n5 6\\n6 7\\n7 1\\n7 3\\n7 8\\n8 1\\n8 2\\n8 3\") == \"1 2\\n1 5\\n2 3\\n2 4\\n3 6\\n3 7\\n4 8\\n5 1\\n5 6\"\n\nprint(solution(stdin))\n\"\"\"\n\n\n\nimport sys"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n\") == '3 5\\n2 1\\n3 2\\n3 4'\n\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == '4 1\\n1 2\\n1 3'\n\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == '3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4'\n\nassert solution('''5 5\n1 2\n2 3\n3 5\n4 3\n1 5''') == '3 5\\n2 1\\n3 2\\n3 4'\n\nassert solution('''4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n''') == '4 1\\n1 2\\n1 3'"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == '3 5\\n2 1\\n3 2\\n3 4'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n3 4\\n\") == \"3 2\\n2 1\\n3 2\"\n\nassert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n\") == \"3 5\\n2 1\\n3 2\\n3 4\"\n\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n\") == \"3 5\\n2 1\\n3 2\\n3 4\\n\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"4 1\\n1 2\\n1 3\\n\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\\n\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n') == '3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4'\nassert solution('8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n') == '3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4'"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\"\nassert solution(\"10 10\\n1 2\\n1 5\\n2 3\\n3 6\\n4 5\\n5 7\\n6 8\\n7 9\\n8 10\\n9 10\") == \"1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\"\n\n\n\"\"\""
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5') == '3 5\\n2 1\\n3 2\\n3 4'\n\nassert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4') == '4 1\\n1 2\\n1 3'\n\nassert solution('8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8') == '3 2\\n2 5\\n8 5\\n6 1\\n2 7'\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\"\n) == \"3 5\\n2 1\\n3 2\\n3 4\"\n\nassert solution(\n    \"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\"\n) == \"4 1\\n1 2\\n1 3\"\n\nassert solution(\n    \"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\"\n) == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1\") == \"0\"\nassert solution(\"1\\n5\") == \"40\"\nassert solution(\"1\\n499993\") == \"41664916690999888\"\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2') == '2'\nassert solution('3') == '8'\nassert solution('4') == '9'\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n5\\n499993\\n\") == \"0\\n40\\n41664916690999888\"\n\"\"\"\n\nfrom __future__ import annotations\nfrom itertools import product\nfrom typing import List\nimport unittest\n\nfrom collections import Counter\n\n\nclass Board:\n    def __init__(self, board: List[int], size: int) -> None:\n        self.size = size\n        self.board = board\n\n    def get_cell_neighbours(self, i: int, j: int) -> List[List[int]]:\n        cell_neighbours = []\n\n        if i > 0:\n            cell_neighbours.append([i - 1, j - 1])\n        if i > 0 and j < self.size - 1:\n            cell_neighbours.append([i - 1, j])\n        if i > 0 and j < self.size - 1:\n            cell_neighbours.append([i - 1, j + 1])\n        if j > 0:\n            cell_neighbours.append([i, j - 1])\n        if j < self.size - 1:\n            cell_neighbours.append([i, j + 1])\n        if i < self.size - 1 and j > 0:\n            cell_neighbours.append([i + 1, j - 1])\n        if i < self.size - 1:\n            cell_neighbours.append([i + 1, j])\n        if i < self.size - 1 and j < self.size - 1:\n            cell_neighbours.append([i + 1, j + 1])\n\n        return cell_neighbours\n\n    def is_full_cell(self, i: int, j: int) -> bool:\n        return self.board[i][j] == 1\n\n    def get_all_neighbours_of_figure(self, figure: List[int], cell: List[int]) -> List[List[int]]:\n        neighbours = []\n        for i, j in figure:\n            cell_neighbours = self.get_cell_neighbours(i, j)\n            for neighbour in cell_neighbours:\n                if neighbour == cell:\n                    continue\n\n                if self.is_full_cell(neighbour[0], neighbour[1]):\n                    neighbours.append(neighbour)\n\n        return neighbours\n\n    def can_figure_be_moved_to_neighbour(self, figure: List[int], neighbour: List[int]) -> bool:\n        cell_neighbours = self.get_cell_neighbours(figure[0][0], figure[0][1])\n        neighbours = self.get_all_neighbours_of_figure(figure, neighbour)\n\n        return cell_neighbours == neighbours\n\n    def move_figure_to_neighbour(self, figure: List[int], neighbour: List[int]) -> None:\n        for i, j in figure:\n            self.board[i][j] = 0\n\n        self.board[neighbour[0]][neighbour[1]] = 1\n\n    def get_free_neighbour(self, i: int, j: int) -> List[List[int]]:\n        free_neighbours = []\n\n        cell_neighbours = self.get_cell_neighbours(i, j)\n        for cell_neighbour in cell_neighbours:\n            if not self.is_full_cell(cell_neighbour[0], cell_neighbour[1]):\n                free_neighbours.append(cell_neighbour)\n\n        return free_neighbours\n\n    def move_figure_to_free_neighbour(self, figure: List[int]) -> None:\n        free_neighbours = self.get_free_neighbour(figure[0][0], figure[0][1])\n        for free_neighbour in free_neighbours:\n            if self.can_figure_be_moved_to_neighbour(figure, free_neighbour):\n                self.move_figure_to_neighbour(figure, free_neighbour)\n                break\n\n    def move_figure(self, figure: List[int]) -> None:\n        if self.is_full_cell(figure[0][0], figure[0][1]):\n            return\n\n        if len(figure) == 1:\n            self.move_figure_to_free_neighbour(figure)\n            return\n\n        for neighbour in self.get_all_neighbours_of_figure(figure, figure[0]):\n            if self.can_figure_be_moved_to_neighbour(figure, neighbour):\n                self.move_figure_to_neighbour(figure, neighbour)\n                self.move_figure(figure[1:])\n                return\n\n\nclass Test(unittest.TestCase):\n    def test_1(self) -> None:\n        board = Board([\n            [0, 1, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 1, 0, 0],\n            [0, 0, 0, 0, 0, 1, 0],\n            [0, 0, 0, 0, 0, 0, 1],\n            [0, 1, 0, 0, 1, 0, 0],\n            [1, 1, 0, 1, 1, 1, 1],\n        ], 7)\n\n        board.move_figure([[4, 2], [4, 3]])\n\n        self.assertEqual(board.board, [\n            [0, 0, 0, 0, 0, 0, 1],\n            [0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 1, 0, 0, 0, 0],\n            [0, 0, 1, 0, 0, 0, 0],\n        ])\n\n    def test_2(self) -> None:\n        board = Board([\n            [0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0,"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('4') == '9'\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n5\\n499993') == '0\\n40\\n41664916690999888'\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"499993\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"499993\") == \"41664916690999888\"\nprint(solution(\"499993\"))\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n') == '0\\n40\\n41664916690999888'\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"499993\") == \"41664916690999888\"\n\"\"\"\nfrom tools import timing\n\n@timing\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == '0'\nassert solution(\"499993\") == '41664916690999888'\n\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''10\n4 5 7 6 7 5 4 4 6 4''') == '''1 1 1 2 -1 1 1 3 1 1'''\nassert solution('''5\n5 5 5 5 5 5''') == '''-1'''\n\"\"\"\n\"\"\"\nimport copy\nimport time\n\nimport sys\n\nsys.setrecursionlimit(10000)\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 1 2 3 4 5') == '3 1 1 1 1 -1 1 1 3 1 1'\n\"\"\"\n\na = [int(s) for s in stdin.split()]\nn = a[0]\na = a[1:]\nb = [0] * n\nfor i, el in enumerate(a):\n    b[i] = el + a[el - 1] if i + a[el - 1] < n else -1\n\nfor i in range(n):\n    print(b[i], end=' ')\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\nassert solution('2 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\nassert solution('3 4 7 4 6') == '-1'\n\n\"\"\"\nimport sys\n\nsys.stdin = open('./input.txt')\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == '1 1 1 2 -1 1 1 3 1 1'\n\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2 3 4 5 6 7 8 9 10\") == \"1 1 1 2 -1 1 1 3 1 1\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('64\\n32\\n97\\n2\\n12345\\n') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\n\"\"\"\n\n\"\"\"\nBETTER SOLUTION\n\nfrom math import gcd\nfrom typing import List\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str([\n    64,\n    32,\n    97,\n    2,\n    12345,\n])) == 'YES\\n2 4 8'\nassert solution(str([\n    64,\n    32,\n    97,\n    2,\n    12345,\n])) == 'YES\\n2 4 8'\n\"\"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_str) == test_res\n\nprint(solution(stdin_str))\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"YES\"\nassert solution(\"64\") == \"2 4 8\"\nassert solution(\"32\") == \"NO\"\nassert solution(\"97\") == \"NO\"\nassert solution(\"2\") == \"YES\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == 'NO'\nassert solution('1 2 3 4') == 'YES'\n\"\"\"\nimport math"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == 'YES\\n2 4 8'\nassert solution('64') == 'YES\\n2 4 8'\nassert solution('32') == 'NO'\nassert solution('97') == 'NO'\nassert solution('2') == 'YES\\n3 5 8'\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823\"\n\"\"\""
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823\"\n\nassert solution(\"65\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\\nNO\\nNO\\nYES\"\n\"\"\"\n\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('12') == '2'\nassert solution('123') == '1'\nassert solution('12345') == 'NO'\n\n'''"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abba') == 2\nassert solution('ababab') == 0\nassert solution('aaaa') == 0\nassert solution('a') == 0\nassert solution('ba') == 1\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abba\") == \"2\"\nassert solution(\"aaaa\") == \"0\"\nassert solution(\"abab\") == \"1\"\nassert solution(\"aaaaa\") == \"3\"\nassert solution(\"ababa\") == \"1\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bbbb\") == 2\nassert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"ababab\") == 0\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"aaaa\") == 0\n\"\"\""
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abbbbbba') == 2\nassert solution('ababab') == 0\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abba\") == 2, 'wrong result'\nassert solution(\"ababab\") == 0, 'wrong result'\nassert solution(\"aa\") == 1, 'wrong result'\n\n\"\"\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"ababab\") == 0\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\n\"\"\"\n\nimport math"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abba') == 2, 'Wrong answer'\nassert solution('bbbb') == 2, 'Wrong answer'\nassert solution('ababab') == 0, 'Wrong answer'\nassert solution('aa') == 1, 'Wrong answer'\n\n---\n\n\u041a\u0430\u043a \u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0434\u043b\u044f \u0442\u0430\u043a\u043e\u0433\u043e \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f?\n\u0414\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u043e\u0431\u0445\u043e\u0434\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0447\u0430\u0441\u0442\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e.\n\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0442\u043e\u0447\u0435\u043a \u043d\u0430 \u0434\u043e\u0441\u043a\u0435. \u0418 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043d\u0435\u0433\u043e:\n\n| \u041f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0442\u043e\u0447\u043a\u0438 \u043d\u0430 \u0434\u043e\u0441\u043a\u0435\n| \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0445\u043e\u0434\u043e\u0432 \u0432 \u043d\u0435\u0439 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432\n| \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0445\u043e\u0434\u043e\u0432 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432\n\n\u0415\u0441\u043b\u0438 \u0432 \u043f\u0435\u0440\u0432\u044b\u0445 \u0434\u0432\u0443\u0445 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0445\u043e\u0434\u043e\u0432, \u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u043e\u0442\u0432\u0435\u0442\u044b. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u043a\u0430\u043a\u043e\u0439 \u0438\u0437 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0432\u0435\u0440\u043d\u044b\u043c.\n\u041d\u043e, \u0435\u0441\u043b\u0438 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0445\u043e\u0434\u043e\u0432 \u0431\u0443\u0434\u0435\u0442 \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0432 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439, \u0442\u043e \u043c\u044b \u0432\u0441\u0435 \u0436\u0435 \u0437\u043d\u0430\u0435\u043c, \u0447\u0442\u043e \u043e\u0442\u0432\u0435\u0442 \u0432\u0435\u0440\u043d\u044b\u0439, \u043d\u043e \u044d\u0442\u043e \u043d\u0435\u0432\u0435\u0440\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u044b \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0447\u0430\u0441\u0442\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043d\u0430 \u0432\u044b\u0431\u043e\u0440 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430.\n\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0442\u043e\u0447\u043a\u0438 \u043d\u0430 \u0434\u043e\u0441\u043a\u0435.\n\n| \u041f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0442\u043e\u0447\u043a\u0438 \u043d\u0430 \u0434\u043e\u0441\u043a\u0435\n| \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0445\u043e\u0434\u043e\u0432 \u0432 \u043d\u0435\u0439 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432\n| \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0445\u043e\u0434\u043e\u0432 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432\n\n\u041e\u0442\u0432\u0435\u0442 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u043c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c, \u043a\u043e\u0433\u0434\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0445\u043e\u0434\u043e\u0432 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u043d\u044c\u0448\u0435 \u043d\u0443\u043b\u044f.\n\n\u0414\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u043d\u0443\u0436\u043d\u043e \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0445\u043e\u0434\u043e\u0432 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0438 \u0432\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0438.\n\n\u0415\u0441\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0445\u043e\u0434\u043e\u0432 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0431\u043e\u043b\u044c\u0448\u0435, \u0442\u043e \u043e\u0442\u0432\u0435\u0442 \u0432\u0435\u0440\u043d\u044b\u0439.\n\u0415\u0441\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0445\u043e\u0434\u043e\u0432 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u043c\u0435\u043d\u044c\u0448\u0435, \u0442\u043e \u043e\u0442\u0432\u0435\u0442 \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0439.\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\nbbbb''') == '2'\nassert solution('''6\nababab''') == '0'\nassert solution('''2\naa''') == '1'\nassert solution('''7\naabbbb''') == '4'\nassert solution('''6\nabbabb''') == '4'\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n') == '15\\n'\nassert solution('5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n') == '9\\n'\n\"\"\"\nfrom collections import defaultdict, deque\nfrom itertools import permutations, product\nimport sys\n\nlines = list(map(lambda x: list(map(int, x.split())), sys.stdin.readlines()))\nkeys = lines[0]\ndel lines[0]"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == '15'\n\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == '9'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n\n\nimport unittest\nimport sys\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\""
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n4 1') == '5'\nassert solution('1\\n1') == '0'\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == '10'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7') == '9'\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n\"\"\""
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == '15'\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == '9'\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n4 3') == '15'\nassert solution('1 2\\n3 1') == '9'\nassert solution('4 3\\n3 1') == '9'\nassert solution('4 3\\n1 1') == '5'\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5 3\\n1 1\\n2 0\\n3 2\\n0 3') == '9'\n'''"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 1\\n2 2\\n3 3\\n4 4') == '9'\nassert solution('5\\n1 1\\n2 0\\n3 2\\n4 3\\n0 3') == '9'\n\"\"\"\n\n\n\"\"\"\nThe distance between two points $(x_1, y_1)$ and $(x_2, y_2)$ is $|x_1 - x_2| + |y_1 - y_2|$ where $|v|$ is the absolute value of $v$.\nThe point at level $i$ is at the point $(min(x_i, y_i), max(x_i, y_i))$.\nThe distance between two points at level $i$ and at level $j$ is at least the distance between points at level $i$ and at level $j + 1$.\nThe distance of the first point at level 0 is 0.\n\nFor any i, if x_i <= 0 or y_i <= 0, then there is no key point at level i.\n\nThe distance of the first point at level 0 is 0.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i.\n\nThe distance of the first point at level i is x_i + y_i."
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"2\"\n\"\"\"\n\nA = int(stdin.readline())\nB = int(stdin.readline())"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1') == '2'\n\"\"\"\n\nA, B = input().split()"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"2 3\") == \"2\"\n\nimport codewars_test as test\n\n@test.describe(\"Sample Tests\")\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"3\\n1\"\n) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"3 1\") == \"2\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"2 1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == '2'\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"3 1 2 1 3 1\") == \"3\"\n\"\"\"\nfrom typing import List\nimport sys"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1') == '2'"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1') == '2'\nassert solution('3\\n2') == '1'\nassert solution('1\\n3') == '2'\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '1.0'\n\"\"\""
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == 1.0\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '1.000000000000'\n\"\"\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '1.000000000000'\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '1.000000000000'\nassert solution('1 3 2') == '0.3333333333333'\nassert solution('2 3 3') == '0.3333333333333'\nassert solution('5 10 4') == '0.500000'\n\"\"\""
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == '1.000000000000'\nassert solution(\"1\") == '1.000000000000'\nassert solution(\"0\") == '0.000000000000'\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '1.000000000000'\nassert solution('0') == '1.000000000000'\nassert solution('1') == '1.000000000000'\nassert solution('2') == '1.000000000000'\nassert solution('3') == '1.000000000000'"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '1.000000000000'\n\nassert solution('1') == '1.000000000000'\n\nassert solution('0') == '0.0'\n\nassert solution('0.1') == '0.0999999999999'\n\nassert solution('0.01') == '0.0999999999998'"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == '1.000000000000'\n\"\"\""
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('5') == ''\nassert solution('5\\n6') == ''\nassert solution('5\\n6\\n7') == ''\nassert solution('3\\n1\\n2') == '1.000000000000'\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 'Hello World\\n'\nassert solution('2') == '3\\n'\n\n----\n## For Python 3.7\n## For Python 3.6\n----\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\nassert solution(\"2\") == \"3\"\n\nassert solution(\"A\") == \"A+B\"\n\nassert solution(\"B\") == \"A+B\"\n\nassert solution(\"A A\") == \"2A2\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Hello World\\n\"\nassert solution(\"2\") == \"5\\n\"\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2) == 6\n\nprint(solution(2))\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == '6'\n\"\"\"\n\nN = int(input())\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == '9'\n\n-------------\n\n----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n\nimport sys\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1) == \"Hello World\\n\"\nassert solution(2) == \"3\\n\"\n\n\"\"\"\n\n\n\n\"\"\"\nIn 2020, AtCoder Inc. with an annual sales of more than one billion yen (the currency of Japan) has started a business in programming education.\n\nOne day, there was an exam where a one-year-old child must write a program that prints Hello World, and a two-year-old child must write a program that receives integers A, B and prints A+B.\n\nTakahashi, who is taking this exam, suddenly forgets his age.\n\nHe decides to write a program that first receives his age N (1 or 2) as input, then prints Hello World if N=1, and additionally receives integers A, B and prints A+B if N=2.\n\nWrite this program for him.  \n\n-----Constraints-----\n - N is 1 or 2.\n - A is an integer between 1 and 9 (inclusive).\n - B is an integer between 1 and 9 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in one of the following formats:  \n1\n\n2\nA\nB\n\n-----Output-----\nIf N=1, print Hello World; if N=2, print A+B.  \n\n-----Sample Input-----\n1\n\n-----Sample Output-----\nHello World\n\nAs N=1, Takahashi is one year old. Thus, we should print Hello World.\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == '4'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n\") == \"Hello World\\n\"\nassert solution(\"2\\n3\\n4\\n\") == \"7\\n\"\nassert solution(\"2\\nA\\nB\\n\") == \"A+B\\n\"\n\"\"\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"3333\"\nprint(\"Test pass.\")\n\n-----\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"3333\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str) == str\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 3''') == '3333'\nassert solution('''1 1''') == '11'\n'''\n\n'''\n\nimport sys"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 3''') == '3333'\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12 123') == '3333'\nassert solution('12 34') == '1234'\n\"\"\"\n\nimport sys\nfrom copy import deepcopy"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"3333\"\nprint(\"Cool!\")"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == '3333'\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3') == '3333'\n\"\"\"\n\na, b = map(int, input().split())\nprint((str(a) * b) + (str(b) * a))\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3') == '3333'\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'b'\nassert solution('c') == 'd'\nassert solution('z') == 'A'\nassert solution('A') == 'B'\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a\") == \"b\"\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"z\") == \"a\"\nassert solution(\"c\") == \"d\"\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a') == 'b'\nassert solution('c') == 'd'\nassert solution('z') == 'a'\nassert solution('e') == 'f'\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('a') == 'b'\nassert solution('c') == 'd'\nassert solution('z') == '{'\nassert solution('x') == 'y'\nassert solution('m') == 'n'\n\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('a') == 'b'\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a') == 'b'\nassert solution('b') == 'c'\nassert solution('c') == 'd'\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a\") == \"b\"\n\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"b\") == \"c\"\nassert solution(\"c\") == \"d\"\nassert solution(\"d\") == \"e\"\nassert solution(\"e\") == \"f\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"b\") == \"c\"\nassert solution(\"c\") == \"d\"\nassert solution(\"d\") == \"e\"\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"order\", \"atc\") == \"atcoder\"\n\"\"\"\n\ns, t = input().split()\nprint(t + s)\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('\\n'.join(['oder atc'])) == 'atcoder'\nassert solution('\\n'.join(['pear tree'])) == 'pear tree'\nassert solution('\\n'.join(['coding theory'])) == 'coding theorycoding theory'\n\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('order atc') == 'atcorder'\n\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\nprint(\"Test PASSED\")\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\nprint(solution(\"oder atc\"))\n\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\n\"\"\"\n\nimport io\nimport sys\n\nstdin = io.StringIO(\"\".join(sys.stdin.readlines()))\n\nstring1 = input()\nstring2 = input()\n\nprint(string2 + string1)\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('oder atc') == 'atcoder'\n\"\"\"\n\nS = input()\nT = input()\nprint(T + S)\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 5 7 8 2\\n') == 0\n\nassert solution('6\\n5 1 2 4 6 3\\n') == 0\n\nassert solution('2\\n1000000 1000000\\n') == 1000000\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 5 7 8 2\\n\") == \"0\"\nassert solution(\"6\\n5 1 2 4 6 3\\n\") == \"0\"\nassert solution(\"2\\n1000000 1000000\\n\") == \"1000000\"\n\"\"\""
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"0\"\nassert solution(\"5\\n1 2 3 4 5\") == \"0\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\nassert solution(\"7\\n1 2 3 4 5 6 7\") == \"1\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"0\""
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 5 7 8 2\\n\") == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == \"0\"\nassert solution(\"6\\n5 1 2 4 6 3\") == \"0\"\nassert solution(\"2\\n1000000 1000000\") == \"1000000\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 5 7 8 2') == '0'\nassert solution('6\\n5 1 2 4 6 3') == '0'\nassert solution('2\\n1000000 1000000') == '1000000'\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == '0'\nassert solution(\"6\\n5 1 2 4 6 3\") == '0'\nassert solution(\"2\\n1000000 1000000\") == '1000000'"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1 2 4 6 3') == '0'\nassert solution('6 5 4 2 1') == '1000000'\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == '0'\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nmin_sum = 0\nfor i in range(len(a)):\n    if i == 0:\n        min_sum += a[i]\n    elif a[i] % 2 == a[i - 1] % 2:\n        min_sum += a[i]\nprint(min_sum)\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 2 4 6 3\\n\") == \"0\"\nassert solution(\"5 1 2 4 6 3\\n\") == \"0\"\nassert solution(\"5 1 2 4 6 3\\n\") == \"0\""
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\\n\") == \"5\"\n\"\"\"\n\nfrom typing import List\nimport unittest\nfrom collections import Counter\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\\n\") == 5\nprint(solution(\"1 1 100 99\\n100\\n\"))"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2 3 3\\n1 1 100 99\") == \"1\"\nassert solution(\"6 2 3 3\\n1 1 100 99\") == \"1\"\nassert solution(\"6 2 3 3\\n1 1 100 99\") == \"1\"\nassert solution(\"7 2 3 3\\n1 1 100 99\") == \"1\"\nassert solution(\"7 2 3 3\\n1 1 100 99\") == \"1\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 2 3 3\\n1 3 5 4 2 7 6') == '5'\n\"\"\"\n\nimport collections\nimport itertools\n\nimport sys\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 2 3 3\\n7 10 50 12 1 8') == '5'\n\"\"\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\") == \"5\"\n\"\"\"\n\nn, a, b, k = [int(i) for i in input().split(' ')]\nh = [int(i) for i in input().split(' ')]\n\nh.sort()\n\nscore = 0\nfor i in range(n):\n    if i < k:\n        if a > h[i]:\n            score += 1\n        else:\n            break\n    else:\n        if a > h[i]:\n            score += 1\n        else:\n            if a < h[i] and b < h[i]:\n                score += 1\n            break\n\nprint(score)\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\") == 5\nassert solution(\"1 1 100 99\\n100\") == 1\nassert solution(\"7 4 2 1\\n1 3 5 4 2 7 6\") == 6\nassert solution(\"7 4 2 1\\n1 10 50 12 1 8\") == 6\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 2 3 3\\n7 10 50 12 1 8\\n') == 5\nprint(solution('1 1 100 99\\n100\\n'))\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 4 2 1\\n1 3 5 4 2 7 6\") == \"6\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 100 99\") == \"1\"\nassert solution(\"7 10 50 12 1 8\") == \"5\"\nassert solution(\"2 1 2 1\") == \"1\"\nassert solution(\"1 1 100 99\") == \"1\"\nassert solution(\"5 2 2 1\") == \"1\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(['2', '5', '1', '3', '4']) == '6 2 1 4 3'\n\"\"\""
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n0 2 3 4\") == \"0\"\nassert solution(\"4 3\\n1 2 3 4\\n0 2 3 4\") == \"0\"\nassert solution(\"4 2\\n0 2 4 4\\n0 2 4 4\") == \"0\"\nassert solution(\"4 3\\n1 2 3 4\\n0 2 3 4\") == \"0\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\\n3 2 0 7 10 14\"\n\nprint(solution(stdin.strip()))"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n0 1 2 3\\n\") == \"0\\n0 1 2 3\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\"\nassert solution(\"4 2\\n1 2 3 4\") == \"0\"\nassert solution(\"4 2\\n3 4 5 6\") == \"0\"\nassert solution(\"4 2\\n3 0 5 6\") == \"1\"\nassert solution(\"4 2\\n3 1 5 6\") == \"2\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n1 1 2 3 4\\n') == '1\\n1 2 4 5'\nassert solution('4 2\\n0 1 2 3\\n') == '0\\n0 1 2 3'\nassert solution('5 2\\n1 3 1 1 1\\n') == '2\\n1 1 1 2 3'\nassert solution('8 1\\n2 3 4 5 6 7 8\\n') == '2\\n2 3 4 6 7 8'\nassert solution('7 2\\n2 1 2 3 4 5 6\\n') == '0\\n0 1 2 3 4 5'\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"6 3\n3 2 0 6 10 12\"\"\") == \"3\"\nassert solution(\"\"\"4 2\n0 1 2 3\"\"\") == \"0\"\nassert solution(\"\"\"5 2\n0 1 2 3 4\"\"\") == \"0\"\nassert solution(\"\"\"3 2\n0 1 2\"\"\") == \"0\"\nassert solution(\"\"\"4 2\n0 1 2 3\"\"\") == \"0\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n0 1 2 3') == '0\\n0 1 2 3'\n\"\"\"\n\nn, m = [int(x) for x in stdin.split()]\narr = [int(x) for x in stdin.split()]\n\nc = [0] * (m + 1)\n\nfor i in range(n):\n    c[arr[i] % m] += 1\n\ncount = 0\nfor i in range(1, m + 1):\n    count += i * c[i]\n\nprint(count)"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n0 1 2 3') == '0\\n0 1 2 3'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n0 1 2 3\\n') == '0\\n0 1 2 3'\nassert solution('6 3\\n3 2 0 6 10 12\\n') == '3\\n3 2 0 7 10 14'\nassert solution('5 2\\n2 1 4 6 8\\n') == '2\\n2 1 6 8'\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('12') == '12'\nassert solution('1 1') == '1'\nassert solution('1 1 0') == '1'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n\n\"\"\"\nfrom sys import stdin\n\nn, m = map(int, stdin.readline().split())\nk = [int(x) for x in stdin.readline().split()]\n\nz = [int(x) for x in stdin.readline().split()]\nx = [int(x) for x in stdin.readline().split()]\n\nj = 0\ndays = 0\n\nfor i in range(m):\n    while j < n and k[j] == 0:\n        j += 1\n    if j >= n:\n        break\n    if x[i] <= k[j]:\n        k[j] -= x[i]\n    else:\n        days = i + 1\n        break\n    j += 1\n\nprint(days)\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == '20'\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3') == 8\n\n\"\"\"\n\nn, m = map(int, input().split())\nk = list(map(int, input().split()))\nd = []\nfor _ in range(m):\n    d.append(map(int, input().split()))\n\nans = 0\nk = sorted(k)\nfor i in range(m):\n    if d[i][1] > n:\n        continue\n    else:\n        a = d[i][0]\n        k[-1] -= d[i][1]\n        k = sorted(k)\n        while a > 0:\n            k[-1] -= 1\n            if k[-1] <= 0:\n                break\n            a -= 1\n            k = sorted(k)\n        if a < 0:\n            k[-1] = 0\n        ans = max(ans, a)\n        \nprint(ans)"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5') == '20'\n\"\"\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\""
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == 8\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n\"\"\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_data) == test_result"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2\\n1 1 2 2\\n1\\n3\") == \"YES\"\nassert solution(\"4\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\") == \"NO\"\nassert solution(\"4\\n1\\n1 1 1 1 1\") == \"YES\"\nassert solution(\"1\\n1\\n10000 10000 10000 10000\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(example_input_1) == \"YES\\nNO\\nYES\\nNO\\nYES\"\nassert solution(example_input_2) == \"NO\"\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(2500)"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000') == 'YES\\nYES\\nNO\\nYES\\nYES'\nassert solution('4\\n1 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000') == 'YES\\nYES\\nNO\\nYES'\nassert solution('4\\n1 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000') == 'YES\\nYES\\nNO\\nYES'\nassert solution('4\\n1 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000') == 'YES\\nYES\\nNO\\nYES'\nassert solution('4\\n1 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000') == 'YES\\nYES\\nNO\\nYES'\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\") == 'YES\\nYES\\nNO\\nYES\\nYES\\n'\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == 'YES'\nassert solution(\"4\\n1 1 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\n\"\"\"\n\n\"\"\"\nfrom typing import Any, List\nimport sys"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\nassert solution(\"1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10000 10000 10000 10000\") == \"NO\\nNO\"\nassert solution(\"1\\n1 1 10 10\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"NO\\nNO\"\nassert solution(\"1\\n1 1 10 10\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\\nYES\"\nassert solution(\"1\\n1 1 10 10\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\\nYES\"\n\nprint(solution(\"1\\n1 1 10 10\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\"))"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\n\"\"\"\n\nimport math\nfrom collections import Counter"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n\") == \"3\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\") == 3\nassert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == 9\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2 2 1\\n2 1 1') == '2'\nassert solution('2 2 1\\n2 1 1\\n2 1 1') == '3'\nassert solution('2 2 1\\n2 1 1\\n2 1 1\\n2 1 1') == '3'\nassert solution('2 2 1\\n2 1 1\\n2 1 1\\n2 1 1\\n2 1 1') == '3'\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 1\\n1 2 4\\n1 3 2\\n2 3 2\") == \"4\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5') == '3'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\") == \"3\"\n\n-----"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\") == '3'\nassert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == '9'\n\n\"\"\"\n\nimport sys\nimport heapq\n\nclass Heap:\n    def __init__(self, k):\n        self.data = []\n        self.k = k\n        self.len = 0\n        self.reversed = False\n\n    def __str__(self):\n        return str(self.data)\n\n    def is_empty(self):\n        return self.len == 0\n\n    def __len__(self):\n        return self.len\n\n    def __bool__(self):\n        return not self.is_empty()\n\n    def __lt__(self, other):\n        return self.reversed\n\n    def insert(self, i, l):\n        if self.len < self.k:\n            self.len += 1\n            heapq.heappush(self.data, (-l, i))\n            self.reversed = True\n        else:\n            heapq.heappushpop(self.data, (-l, i))\n            self.reversed = not self.reversed\n\n    def remove(self):\n        if self.reversed:\n            self.len -= 1\n            ret = heapq.heappop(self.data)\n            self.reversed = False\n            return -ret\n        else:\n            heapq.heappop(self.data)\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 6 5\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\\n') == '9'\n\nassert solution('7 16 20\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\\n') == '9'\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"6 10 5\n2 5 1\n5 3 9\n6 2 2\n1 3 1\n5 1 8\n6 5 10\n1 6 5\n6 4 6\n3 6 2\n3 4 5\"\"\") == '3'\n\n\"\"\"\nYou are given a connected undirected weighted graph consisting of $n$ vertices and $m$ edges.\n\nYou need to print the $k$-th smallest shortest path in this graph (paths from the vertex to itself are not counted, paths from $i$ to $j$ and from $j$ to $i$ are counted as one).\n\nMore formally, if $d$ is the matrix of shortest paths, where $d_{i, j}$ is the length of the shortest path between vertices $i$ and $j$ ($1 \\le i < j \\le n$), then you need to print the $k$-th element in the sorted array consisting of all $d_{i, j}$, where $1 \\le i < j \\le n$.\n\nNote that the order of vertices in the array should be the same as in the input graph.\n\n-----Input-----\n\nThe first line of the input contains three integers $n$, $m$ and $k$ ($2 \\le n \\le 2 \\cdot 10^5$, $n - 1 \\le m \\le \\min\\Big(\\frac{n(n-1)}{2}, 2 \\cdot 10^5\\Big)$, $1 \\le k \\le \\min\\Big(\\frac{n(n-1)}{2}, 400\\Big)$\u00a0\u2014 the number of vertices in the graph, the number of edges in the graph and the value of $k$, correspondingly.\n\nThen $m$ lines follow, each containing three integers $x$, $y$ and $w$ ($1 \\le x, y \\le n$, $1 \\le w \\le 10^9$, $x \\ne y$) denoting an edge between vertices $x$ and $y$ of weight $w$.\n\nIt is guaranteed that the given graph is connected (there is a path between any pair of vertices), there are no self-loops (edges connecting the vertex with itself) and multiple edges (for each pair of vertices $x$ and $y$, there is at most one edge between this pair of vertices in the graph).\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the length of the $k$-th smallest shortest path in the given graph (paths from the vertex to itself are not counted, paths from $i$ to $j$ and from $j$ to $i$ are counted as one).\n\n\n-----Examples-----\nInput\n6 10 5\n2 5 1\n5 3 9\n6 2 2\n1 3 1\n5 1 8\n6 5 10\n1 6 5\n6 4 6\n3 6 2\n3 4 5\n\nOutput\n3\n\nInput\n7 15 18\n2 6 3\n5 7 4\n6 5 4\n3 6 9\n6 7 7\n1 6 4\n7 1 6\n7 2 1\n4 3 2\n3 2 8\n5 3 6\n2 5 5\n3 7 9\n4 1 8\n2 1 1\n\nOutput\n9\n\nInput\n5 4 6\n1 4 1\n2 3 1\n5 1 6\n3 4 1\n\nOutput\n4\n\nInput\n8 10 4\n2 4 7\n1 3 1\n2 5 3\n4 6 5\n1 4 3\n3 2 1\n3 4 1\n5 1 2\n5 2 2\n7 2 1\n6 4 2\n\nOutput\n4\n\nInput\n6 6 3\n3 2 1\n4 1 1\n2 3 1\n5 2 1\n4 5 1\n5 4 1\n3 6 1\n\nOutput\n4\n\"\"\"\n\nimport math\nimport heapq\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('4\\n1 1 3 4 2') == '3 1\\n1 1 1 1 1'\nassert solution('5\\n1 1 3 4 2') == '3 1\\n1 1 1 1 1'\nassert solution('6\\n1 5 12 13 2 15') == '7 2\\n2 2 1 1 2 1'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3\\n3 3 3 2 2 2 2 1 1 1'\n\n'''\n\nn = int(stdin.readline())\n\nimport heapq\nimport sys\n\nheap = []\n\nfor i in range(n):\n    heapq.heappush(heap, int(stdin.readline()))\n\nwhile len(heap) > 0:\n    heapq.heappush(heap, heapq.heappop(heap) + heapq.heappop(heap))\n\nprint(heap[0], len(heap))\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n\n\"\"\"\n\nimport math\nfrom typing import List\nfrom functools import reduce\n\nfrom utils import timing\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 1 3 4 2') == '3 1'\nassert solution('6\\n1 5 12 13 2 15') == '7 2'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3'\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\""
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\n\nprint(\"The code ran Correctly\")"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 1 3 4 2\\n\") == \"3 1\\n1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\\n\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\\n\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\nprint('Success')"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == '3 1\\n1 1 1 1 1'\nassert solution(\"6\\n1 5 12 13 2 15\") == '7 2\\n2 2 1 1 2 1'\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == '7486 3\\n3 3 3 2 2 2 2 1 1 1'\n\"\"\""
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n1 1 3 4 2\n''') == '3 1'\nassert solution('''6\n1 5 12 13 2 15\n''') == '7 2'\nassert solution('''10\n1 2 5 129 185 581 1041 1909 1580 8150\n''') == '7486 3'\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5009\") == \"2 5 0 9\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1\") == \"1 1 1 1 1\"\n\n\"\"\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1\\n9\\n2\\n4') == '1'\nassert solution('4\\n7\\n9\\n10\\n8') == '2'\n\"\"\""
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\\n9\\n8\\n5\\n3\") == \"1\\n3\\n5\\n9\"\n\"\"\""
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n5009\n7\n9876\n10000\n10\n\"\"\") == '2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10'\n\"\"\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9') == 1\nassert solution('900') == 2\nassert solution('90') == 0\nassert solution('908') == 2\nassert solution('907') == 1\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1') == '1'\nassert solution('2\\n2') == '1'\nassert solution('3\\n3') == '1'\nassert solution('1\\n2') == '1'\nassert solution('2\\n3') == '1'\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n6\\n7\") == \"3\"\n\"\"\"\n\n\nimport sys\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    if n < 10:\n        print(1)\n    else:\n        rounds = []\n        while n >= 10:\n            rounds.append(n % 10)\n            n //= 10\n        rounds.append(n)\n        print(len(rounds))\n        print(*rounds)"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n5009\\n7\\n9876\\n10000\\n10\\n\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\\n\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"\nassert solution(\"1\\n1\") == \"1\\n1\"\nassert solution(\"5\\n5\\n5\\n5\\n5\") == \"1\\n5\\n10\\n15\\n20\"\n\"\"\"\n\nimport sys\nimport math\n\nt = int(sys.stdin.readline())\n\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    ans = []\n    for i in range(1, n + 1):\n        j = math.ceil(n / i)\n        if n == (i * j):\n            ans.append(str(j))\n            break\n    sys.stdout.write(\" \".join(ans))\n    sys.stdout.write(\"\\n\")"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 2\") == \"1 1 1 1\"\nassert solution(\"6\\n4 6 2 1 5 3\") == \"3 3 3\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1 1 1 1\"\nassert solution(\"5\\n4 6 2 1 5 3\") == \"2 3 3 2 1 3\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\"\nassert solution(\"4\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"3 3 3\"\nassert solution(\"4\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"2 3 3 2 1 3\"\n\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\n\"\"\""
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\"\n\"\"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1\\n2\") == \"2 1 1 1\"\nassert solution(\"3\\n1\\n2\") == \"3 3 3\"\nassert solution(\"3\\n1\\n3\") == \"3 3 3 2 1 3\"\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\nprint(solution(sys.stdin.read()))\n\n\"\"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n') == '1 1 1 1 1'\nassert solution('6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n') == '3 3 3'\nassert solution('6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n') == '2 3 3 2 1 3'\n\n\"\"\""
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 4\\n5\\n1 2 3 4 5\\n') == '1 1 1 1 1'\nassert solution('4\\n3\\n1 2 3 4\\n5\\n2 3 1\\n') == '2 3 3 2 3'\nassert solution('4\\n4\\n1 2 3 4\\n5\\n2 3 1\\n') == '4 4 4 4 1 4'\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n') == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\\n'\n\n\"\"\""
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '1 1 1 1 1'\n\nassert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '3 3 3'\n\nassert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '2 3 3 2 1 3'\n\nassert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '1'\n\nassert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '2 2 2 2'"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3\\n1 2 3 4') == '2'\nassert solution('5\\n3\\n1 2 3 4 5') == '4'\n\n---\n\nThe number of products is given in the first line of the input. The sum of their costs is given in the second line.\n\nYou need to find a price so that the sum of the prices equals the minimum possible sum of prices (all prices in the second line).\n\nIt means that you need to find the minimum possible price for the total cost of all products so that if you sell all products for this price, you will receive at least the same (or greater) amount of money as if you sell them for their initial costs.\n\nNote that you may not sell any product.\n\n---\nInput\n5\n1 2 3 4 5\n6\n1 2 3 4 5 6\n\nOutput\n5\n4\n\nExplanation\nThe sum of prices of products for the given price is equal to 16. Let's find the minimum possible price for this sum. If we sell the products at the price 4, then the amount of money we will receive will be 5 + 6 + 6 + 6 + 5 = 25, which is less than 16. So the answer is 4.\n\nSo the answer is 5.\n\nIf we sell the products at the price 5, then the amount of money we will receive will be 6 + 6 + 6 + 6 + 5 = 21, which is not less than 16. So the answer is 5.\n\nThe minimum possible price for the given sum is 5, and the minimum possible price for the given sum is 5.\n---\n\nSample Tests\n\nInput:\n1\n3\n1 2 3\n\nOutput:\n3\n\nInput:\n1\n5\n1 2 3 4 5\n\nOutput:\n4\n\nInput:\n2\n5\n1 2 3 4 5\n6\n1 2 3 4 5 6\n\nOutput:\n5\n4\n\n-----\n\"\"\""
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3\\n1 2 3 4') == '2'\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"1\"\nassert solution(\"4\\n1 2 3 4\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 4 5') == 3\nassert solution('2\\n1 2') == 1\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"1\"\nassert solution(\"4\\n2 2 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1 1 1\\n3') == '2'\nassert solution('4\\n1 1 1 1\\n4') == '1'\nassert solution('4\\n1 1 1 1\\n4') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 1 1 1') == '2'\n\"\"\"\n\n\"\"\"\n\u0412 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u043d\u0430\u0439\u0442\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438 \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \u043a \u0437\u0430\u0434\u0430\u0447\u0435: \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430 \u043d\u0435 \u043f\u0443\u0442\u0430\u0439\u0442\u0435 \u00ab\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439\u00bb \u0438 \u00ab\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\u00bb. \u042d\u0442\u043e \u0434\u0432\u0430 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e \u0440\u0430\u0437\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n\n\u0412\u043e \u0432\u0445\u043e\u0434\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 $N$ \u0438 $M$. \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 10000, \u0438 \u0437\u0430\u0442\u0435\u043c $N$ \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 $M$, \u043a\u0430\u0436\u0434\u043e\u0435 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0412 \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e $K$, \u0430 \u0437\u0430\u0442\u0435\u043c $K$ \u0441\u0442\u0440\u043e\u043a, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0440\u0438 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430: \u043f\u0435\u0440\u0432\u043e\u0435 \u0438\u0437 \u043d\u0438\u0445 (\u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435) \u2014 \u044d\u0442\u043e \u043d\u043e\u043c\u0435\u0440 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435, \u0432\u0442\u043e\u0440\u043e\u0435 \u0438\u0437 \u043d\u0438\u0445 (\u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435) \u2014 \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c, \u0430 \u0442\u0440\u0435\u0442\u044c\u0435 \u0438\u0437 \u043d\u0438\u0445 (\u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435) \u2014 \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0442 $M$.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 $N$ \u0438 $M$, \u0437\u0430\u0442\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0442 $N$ \u0441\u0442\u0440\u043e\u043a \u0441 \u0446\u0435\u043b\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438, \u043a\u0430\u0436\u0434\u043e\u0435 \u0432 \u043d\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\nSample Input 1:\n\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\n\nSample Output 1:\n\n2\n0\n3\n2\n1\n\nSample Input 2:\n\n3\n5\n2 4 8\n5\n1 2 4 5\n4\n1 3 6 7\n8\n1 2 3 4\n\nSample Output 2:\n\n3\n0\n1\n1\n3\n\"\"\"\nimport re\n\nn = int(input())\nm = int(input())\nmass = []\n\nfor i in range(n):\n    mass.append(list(map(int, re.findall(r'-?\\d+', input()))))\n\nans = -m + max([max(mass[i]) for i in range(n)])\n\nfor i in range(n):\n    if ans in mass[i]:\n        print(ans, i, mass[i].index(ans))\n        break"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\\n3\\n1 2 2\") == \"1\"\n\"\"\"\n\nfrom math import gcd\nfrom functools import reduce\nfrom itertools import chain\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(example_1) == '3'\nassert solution(example_2) == '2'\n\"\"\"\n\nq = int(stdin.readline().strip())\n\nwhile q!= 0:\n    n = int(stdin.readline().strip())\n    price = list(map(int, stdin.readline().strip().split()))\n    prices = sum(price)\n    if prices % n == 0:\n        print(prices // n)\n    else:\n        print(prices // n + 1)\n\n    q -= 1\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 4 2 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n10 4 10 15\\n1 2\\n4 3') == '0 0 1 2'\nassert solution('10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 4 10 15\\n1 2\\n4 3\\n\") == \"0 0 1 2\"\nassert solution(\"10 4 10 15\\n1 2\\n4 3\\n\") == \"0 0 1 2\"\nassert solution(\"10 4 10 15\\n1 2\\n4 3\\n\") == \"0 0 1 2\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\n\"\"\"\n\nimport sys\nimport collections\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n10 4 10 15\\n1 2\\n4 3') == '0 0 1 2'\nassert solution('10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6') == '5 4 0 5 3 3 9 0 2 5'"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\\n\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n10 4 10 15\\n1 2\\n4 3\\n') == '0 0 1 2'\n\"\"\"\n\nfrom typing import List\n\n\nclass Programmer:\n    def __init__(self, skill: int):\n        self.skill = skill\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\n\"\"\"\nREADME\n\nYour solution should return the number of mentors.\n\nInput\n\nIn the first line, you are given the two integers: n and k.\n\nIn the next n lines, you are given the skills of n programmers: r_1, r_2,..., r_n.\n\nIn the next k lines, you are given pairs of integers: x_i, y_i (1\u2264x_i, y_i\u2264n) \u2014 pair of programmers (x_i, y_i) in a quarrel.\n\nYou should output n integers: the i-th number should be equal to the number of programmers, for which the i-th programmer can be a mentor. Programmers are numbered in the same order that their skills are given in the input.\n\nInput format\n\nThe first line contains two integers: n and k.\n\nThe next n lines contain one integer each: r_1, r_2,..., r_n.\n\nThe next k lines contain two integers each: x_i, y_i (1\u2264x_i, y_i\u2264n) \u2014 pair of programmers (x_i, y_i) in a quarrel.\n\nOutput format\n\nPrint n integers: the i-th number should be equal to the number of mentors.\n\nConstraints\n\n1\u2264n,k\u22642*10^5\n1\u2264r_i\u226410^9 for each valid i\n1\u2264x_i, y_i\u2264n, x_i\u2260y_i for each valid pair (x_i, y_i)\n\nExamples\nInput\n\n4 2\n10 4 10 15\n1 2\n4 3\n\nOutput\n\n0 0 1 2 \n\nInput\n\n10 4\n5 4 1 5 4 3 7 1 2 5\n4 6\n2 1\n10 8\n3 5\n\nOutput\n\n5 4 0 5 3 3 9 0 2 5\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3') == 'abc'\nassert solution('1 2 3') == 'bac'\nassert solution('3 3') == 'abc'\nassert solution('2 3') == 'abc'\nassert solution('1 2 3') == 'bac'\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"abb\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"abb\"\n\nassert solution(\"2 1 3\") == \"baa\"\n\nassert solution(\"1 2 2\") == \"NO\"\n\nassert solution(\"1 3 2\") == \"cab\"\n\nassert solution(\"1 3 1\") == \"NO\""
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"abb\"\n\"\"\""
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == 'abc'\n\"\"\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"abb\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == 'abb'\n\n\n\"\"\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\nassert solution(\"3 2\\n1 2 3\\n2 1 3\") == \"NO\\n\"\nassert solution(\"3 2\\n1 3 2\\n1 2 3\") == \"YES\\nabc\"\nassert solution(\"3 2\\n1 3 2\\n1 2 3\") == \"NO\\n\"\nassert solution(\"3 2\\n1 3 2\\n2 1 3\") == \"NO\\n\"\n\"\"\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\\n1 3 2\") == \"abb\"\n\"\"\""
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n1 2 3\\n1 3 2') == 'YES\\nabb'\n\"\"\""
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_data_1) == '3'\nassert solution(test_data_2) == '64'\nassert solution(test_data_3) == '69'\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\nassert solution(\"7\\n1 2 2 3 2 2 1\") == \"5\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n20 10 20\\n\") == \"43\"\nassert solution(\"4\\n10 10 10 10\\n\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\\n\") == \"69\"\nassert solution(\"2\\n1 4\\n\") == \"3\""
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n20 10 20\\n\") == \"43\\n1 3 2\\n\"\nassert solution(\"4\\n10 10 10 10\\n\") == \"64\\n2 1 4 3\\n\"\nassert solution(\"6\\n5 4 5 4 4 5\\n\") == \"69\\n6 1 3 5 2 4\\n\"\nassert solution(\"2\\n1 4\\n\") == \"3\\n2 1\\n\"\nprint(\"Success\")\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n20 10 20') == '43'\n\nassert solution('4\\n10 10 10 10') == '64'\n\nassert solution('6\\n5 4 5 4 4 5') == '69'\n\nassert solution('2\\n1 4') == '3'\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n20 10 20') == '43'\n\nassert solution('4\\n10 10 10 10') == '64'\n\nassert solution('6\\n5 4 5 4 4 5') == '69'\n\nassert solution('2\\n1 4') == '3'"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10 10 10 10\") == \"64\"\nassert solution(\"3 10 10 10\") == \"43\"\nassert solution(\"6 5 5 4 4 5\") == \"69\"\nassert solution(\"2 1 4\") == \"3\"\nassert solution(\"10 10 10 10\") == \"64\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n\"\"\"\n\nimport math\nimport sys\nimport itertools"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 5 1 3\\n\") == 3\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n4 2 5 1 3') == '3'\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n4 2 5 1 3') == '3'\n\"\"\"\n\nfrom math import log2, floor\nfrom collections import deque\nfrom sys import stdin\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n4 2 5 1 3''') == '''3'''\nassert solution('''6\n4 2 5 1 3 6''') == '''6'''\nassert solution('''6\n5 1 4 3 2 6''') == '''0'''\nassert solution('''6\n1 2 3 4 5 6''') == '''5'''\nassert solution('''5\n2 3 4 5 1''') == '''0'''\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 5 1 3') == '3'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 5 1 3') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 5 1 3') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(test_input_1)) == str(test_output_1)\nassert solution(str(test_input_2)) == str(test_output_2)\nassert solution(str(test_input_3)) == str(test_output_3)\nprint('Success')\n\n------\n\"\"\""
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\nassert solution(\"5\\n3 2 2 2 3\") == \"0\"\nassert solution(\"6\\n3 2 2 2 3 2\") == \"2\"\n\"\"\"\n\nfrom typing import Dict\nimport unittest\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        inp = stdin.split()\n        n = int(inp[0])\n        seq = inp[1:]\n        seq = [int(x) for x in seq]\n        if n == 1:\n            return \"0\"\n        dct = {}\n        for item in seq:\n            dct[item] = dct.get(item, 0) + 1\n        for item in dct:\n            if dct[item] % n!= 0:\n                return \"1\"\n        return \"0\"\n\n\nclass TestSolution(unittest.TestCase):\n    def test_first(self):\n        self.assertEqual(Solution().solution(\"4\\n3 3 3 3\"), \"1\")\n    def test_second(self):\n        self.assertEqual(Solution().solution(\"5\\n3 2 2 2 3\"), \"0\")\n    def test_third(self):\n        self."
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 3 3\") == '1'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 3 3 3\") == '1'\n\"\"\""
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 3 3') == '1'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\nassert solution(\"4\\n4 4 4 4\") == \"0\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 3 3\\n\") == \"1\"\nassert solution(\"4 1 2 4\\n\") == \"0\"\nassert solution(\"3 3 3 3\\n\") == \"0\"\n\"\"\"\n\nimport sys\n\ninput = lambda: sys.stdin.readline().rstrip()"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 3 3\") == 1\n\"\"\""
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 2 3 4 5') == '1'\n\"\"\"\n\nx_1, x_2, x_3, x_4, x_5 = input().split()\n\nprint(x_1)\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\nprint(solution(\"0 2 3 4 5\"))\n'''"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 2 3 4 5') == '1'\n\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n\") == 0\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\") == 0\n\n-----------------------------------------------------------------------------------------------------------------------------------------------\n---\n---\n---\n##\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n\") == \"0\"\nassert solution(\"3 5\\n6 1\\n1 1\\n5 4\\n4 5\\n5 2\\n1 1\\n3 1\\n2 4\\n\") == \"0\"\nassert solution(\"3 5\\n3 4\\n2 4\\n1 1\\n4 1\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3') == '0'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\") == 0\nassert solution(\"3 10\") == -2\nassert solution(\"3 10\", 10) == -4\nassert solution(\"1 1\", 10) == 0\n\n-------------------------------------------------\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3, 5) == 0\nassert solution(12, 3) == 12 - 3\nassert solution(4, 8) == 4 - 8\n\"\"\"\n\nH, W = input().split()\nH, W = int(H), int(W)"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n3\\n1\\n4\\n1\\n') == '0'\n\"\"\"\n\nimport sys\n\nH, W = map(int, sys.stdin.readline().split())\n\npossible_cuts = []\n\nfor i in range(H):\n    for j in range(W):\n        # print(i, j)\n        if (W - j) % 3 == 0:\n            possible_cuts.append(((i, j), (i, j + W - 1)))\n        if (H - i) % 3 == 0:\n            possible_cuts.append(((i, j), (i + H - 1, j)))\n\nmax_s = 0\nmin_s = 0\n\nfor cut in possible_cuts:\n    x, y = cut\n    cut_width = y[1] - x[1] + 1\n    cut_height = y[0] - x[0] + 1\n    s = cut_width * cut_height\n    if s > max_s:\n        max_s = s\n    if s < min_s:\n        min_s = s\n\nprint(max_s - min_s)\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n1 2\\n5 3\") == 0\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == \"0\"\nassert solution(\"2 2\") == \"0\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\nassert solution(\"3 10 10 9\") == \"No\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 10 100\\n\") == \"Yes\"\nassert solution(\"2\\n1 100\\n\") == \"No\"\nassert solution(\"2\\n100 1\\n\") == \"No\"\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 5 6 7\\n\") == \"Yes\"\nassert solution(\"3\\n1 4 9\\n\") == \"No\"\nassert solution(\"3\\n10 9 8\\n\") == \"No\"\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 10 100\n''') == 'Yes'\n\nassert solution('''\n4\n1 5 1 1\n''') == 'Yes'\n\nassert solution('''\n2\n1 10\n''') == 'No'\n\nassert solution('''\n2\n1 10\n''') == 'No'\n\nassert solution('''\n5\n1 2 3 4 5\n''') == 'Yes'"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n3\n1 10 100\n\"\"\"\n) == \"Yes\"\n\nassert solution(\n\"\"\"\n3\n1 10 100\n\"\"\"\n) == \"Yes\"\n\nassert solution(\n\"\"\"\n4\n1 10 100 10\n\"\"\"\n) == \"No\"\n\nassert solution(\n\"\"\"\n4\n1 2 3 4\n\"\"\"\n) == \"No\"\n\n\"\"\"\n[+]Temporal marker            : Sun, 20:39 | Feb 19, 20\n[+]Temporal marker untethered : Sun, 20:39 | Feb 19, 20\n[+]Comments                  : Knew the question was given an easy\n                               problem.\n[+]Space Complexity          : O(N)\n[+]Time Complexity           : O(N)\n[+]Level                     : EASY\n[+]Tread Speed               : Intermittent\n[+]LINK                      : https://www.interviewbit.com/problems/snuke\n[+] Supplement Sources       : N/A\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 5 5 1\") == \"Yes\"\nassert solution(\"4\\n100 100 10\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 10 100') == 'Yes'\nassert solution('4\\n1 10 10 20') == 'No'\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\nassert solution(\"1 2 3 4\") == \"No\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == 'Yes'\nassert solution('2\\n10 10') == 'No'\nassert solution('3\\n10 100 10') == 'Yes'\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 10 100') == 'Yes'\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"abcd\") == \"No\"\nassert solution(\"aabc\") == \"No\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\n\n\"\"\"\n\ns, t = map(str, stdin.split())\nprint('Yes' if sorted(s) < sorted(t) else 'No')\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xy\") == \"Yes\"\nassert solution(\"atcoder\") == \"Yes\"\nassert solution(\"atlas\") == \"No\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('abcd') == 'No'\n\"\"\"\n\ns = input()\nt = input()"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"axcy\") == \"No\"\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\n\"\"\"\n\ns = input()\nt = input()"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xy\") == \"Yes\"\nassert solution(\"atcoder\") == \"No\"\nassert solution(\"atlas\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('axcy') == 'No'\nassert solution('ayx') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"atcoder\") == \"No\"\nassert solution(\"sunday\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('xay') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 5 1') == 'YES'\nassert solution('7 8 1') == 'NO'\nassert solution('1 1 1') == 'NO'\nassert solution('1 2 1') == 'YES'\n\"\"\"\nimport sys"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7 5 1''') == 'YES'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == 'NO'\nassert solution('5 5 1') == 'NO'\nassert solution('7 5 1') == 'YES'\n\"\"\"\n\n\n\n\"\"\"\n\u5c0f\u63d0\u793a\uff1a\n1. \u4e00\u4e2a\u6570\u4e58\u4ee5\u81ea\u5df1\uff0c\u5982\u679c\u5927\u4e8eb\uff0c\u5c31\u662f\u975e\u6cd5\u7684\uff0c\u76f4\u63a5\u8fd4\u56defalse\n2. \u7b2c\u4e00\u6b65\u601d\u8def\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5143\u7ec4\uff0c\u82e5\u503c\u4e3a\u8d28\u6570\uff0c\u90a3\u4e48\u503c\u4e00\u5b9a\u662fA\u7684\u500d\u6570\uff0c\u90a3\u4e48\u5176\u7ed3\u679c\u4e0d\u4e3aC\u7684\u500d\u6570\uff0c\u90a3\u4e48\u662f\u975e\u6cd5\u7684\u3002\n\n\"\"\""
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 5 1') == 'YES'\n\"\"\"\n\nA, B, C = [int(i) for i in stdin.split()]\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 5 1\\n') == 'YES'\nassert solution('7 6 1\\n') == 'NO'\nassert solution('7 7 1\\n') == 'YES'\nassert solution('7 7 3\\n') == 'NO'\nassert solution('7 6 7\\n') == 'YES'\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 5 1') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 5 1\\n') == 'YES'\nassert solution('7 5 1\\n') == 'YES'\nassert solution('7 5 1\\n') == 'YES'\nassert solution('7 5 1\\n') == 'YES'\nassert solution('7 5 1\\n') == 'YES'\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"10 10\") == \"50\"\nassert solution(\"10 10\") == \"50\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 7\") == \"8\"\nassert solution(\"3 3\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2') == 1"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2') == 1\nassert solution('3 3') == 9\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == '1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == 1\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n2 2') == 1\nassert solution('1 2\\n2 2') == 0\nassert solution('1 2\\n1 2') == 0\nassert solution('3 1\\n1 2') == 0\nassert solution('3 2\\n2 1') == 0\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n') == '1'\n\"\"\"\n\n\"\"\"\nWith the help of additional information about the road construction, I can take this problem a little bit easier:\n\n- The road height H represents the vertical distance between the border of the farm and the intersection of the road with the border.\n\n- The road width W represents the horizontal distance between the border of the farm and the intersection of the road with the border.\n\nWith the above information, I can take this problem a little bit easier:\n\n- The height of the farm H is 1 yard.\n\n- The width of the farm W is A yards.\n\nSo I can find the area of the farm as:\n\n(1 + H) * A\n\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\"\"\"\n\n\"\"\"\n\u6b64\u984c\u7d50\u69cb\u4f9d\u8a2d\u5b9a\u6c7a\u5b9a\uff0c\u628a\u8d77\u59cb\u70ba0\uff0c\u6bcf\u4e00\u6b21\u6703\u7531\u6b64\u6c7a\u5b9a\u5176\u9577\u5ea6\uff0c\n\u82e5\u9577\u5ea6\u70ba0\u7684\u6642\u5019\uff0c\u4ee3\u8868\u8dd1\u6389\u9019\u4e00\u500b\u4eba\uff0c\u4ee3\u8868\u4eba\u6578-1\uff0c\n\u82e5\u9577\u5ea6>=2\u7684\u6642\u5019\uff0c\n\u628a\u7e3d\u9577\u5ea6\u548c\u6b64\u6642\u5019\u7684\u9577\u5ea6\u6bd4\u8f03\uff0c\n\u6bd4\u8f03\u5f8c\u6703\u8b8a\u6210\u82e5\u9577\u5ea6<\u6b64\u6642\u5019\u7684\u9577\u5ea6\u7684\u8a71\uff0c\u5247\u4ee3\u8868\u6703\u8986\u84cb\uff0c\n\u82e5>=\u5247\u4ee3\u8868\u4e0d\u6703\u8986\u84cb\uff0c\n\u6700\u5f8c\u6703print\u9577\u5ea6\n\"\"\"\n\nseat = list(map(int, input().split()))\nprint(seat)"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 1 2''') == '2'\nassert solution('''1 1 2\n2 1 1\n2 2 1\n2 2 2''') == '1'\nassert solution('''1 1 2\n2 1 1\n2 2 1\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n\nprint(solution(\"13 3 1\"))\n\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2 1\") == \"5\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 2 2\") == \"2\"\nassert solution(\"3 2 1\") == \"3\"\nassert solution(\"10 5 1\") == \"4\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13 3 1\") == 3\n\"\"\"\nimport math\nx, y, z = [int(i) for i in input().split()]\ns = 0\na = math.floor(x / y)\nm = a\nwhile True:\n    c = math.floor((x - y * m) / z)\n    s += c\n    if c == 0:\n        break\n    else:\n        m += 1\nprint(s)\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''13 3 1''') == '3'\n\n-------Solution-------\n\"\"\"\n\nx, y, z = map(int, stdin.split(' '))\nprint(math.ceil((x - y - 2 * z) / (y + z)))\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n-------------------------------"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n\"\"\"\n\nx, y, z = [int(x) for x in stdin.split()]\n\nprint((x - 2 * z) // (y + 2 * z))\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 1') == '3'\n\nassert solution('5 4 1') == '3'\n\nassert solution('10 6 2') == '5'\n\nassert solution('10 7 2') == '4'\n\nassert solution('10 8 2') == '3'"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5') == '2'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4') == 2\n'''\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a_1, b_1, a_2, b_2,..., a_N, b_N, c_1, d_1, c_2, d_2,..., c_N, d_N) == N\n\n\"\"\""
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n0\\n3\\n1\\n1\\n3') == '2'\nassert solution('3\\n2\\n0\\n3\\n1\\n0\\n1\\n3') == '2'\nassert solution('4\\n2\\n0\\n4\\n1\\n0\\n1\\n3') == '2'\nassert solution('3\\n1\\n1\\n3\\n2\\n0\\n1\\n3') == '2'\nassert solution('3\\n2\\n0\\n3\\n1\\n0\\n1\\n3') == '2'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\"\"\") == \"2\"\n\n\"\"\"\n!\n    def solution(stdin: str) -> str:\n        N = int(stdin)\n        pairs = []\n        for line in stdin.splitlines()[1:]:\n            a, b = map(int, line.split())\n            pairs.append((a, b))\n        pairs.sort()\n        last_a = pairs[0][0]\n        max_pairs = 0\n        for a, b in pairs[1:]:\n            if a >= last_a:\n                last_a = a\n            elif b >= last_a:\n                last_a = b\n            else:\n                max_pairs += 1\n        return str(max_pairs)\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == \"2\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == 2\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4') == '2'\nassert solution('4\\n0 4\\n5 5\\n5 5\\n5 5') == '4'\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n0 3\\n5 4\\n\") == \"3\"\nassert solution(\"3\\n2 1\\n0 1\\n4 2\\n\") == \"1\"\nassert solution(\"2\\n1 0\\n3 1\\n\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 0\\n3 1\\n1 3') == '2'\n\"\"\"\n\nn = int(input())\n\nnum_pairs = 0\ni = 0\nwhile i < n:\n    (a, b) = list(map(int, input().split()))\n    while i+1 < n and a > 2*(i+1):\n        (c, d) = list(map(int, input().split()))\n        if b < c:\n            num_pairs += 1\n        i += 1\n\nprint(num_pairs)\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4\\n0 3') == 7\n\"\"\"\n\nimport math\nfrom collections import defaultdict\n\nstdin = open('./input.txt')\nlines = stdin.readlines()\n\nN, T = map(int, lines[0].split())\ntimestamps = list(map(int, lines[1].split()))\n\nfirst_stamp = timestamps[0]\nprev = timestamps[0]\nsum_of_durations = 0\n\nfor stamp in timestamps[1:]:\n    if stamp >= prev:\n        sum_of_durations += stamp - prev\n    else:\n        sum_of_durations += T - prev + stamp\n    prev = stamp\nprint(sum_of_durations)"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n0 0') == '1'"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4\\n0 3\\n\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n0 3\\n\") == \"7\"\n\"\"\"\n\nfrom collections import deque\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        # parse input\n        n, t = [int(x) for x in stdin.split(' ')]\n        sequence = [int(x) for x in stdin.split('\\n')[1:]]\n        \n        # find max and min values of sequence\n        queue = deque(sequence)\n        queue.append(0)\n        queue.append(t)\n        queue.sort()\n        max_, min_ = queue[-1], queue[0]\n        \n        # set up variables\n        total = 0\n        \n        # for every x, we need to check if x is in bounds\n        # if it is, then we add t-x to the total\n        # if not, we are in bounds and we can just add t-x to the total\n        for x in sequence:\n            if x < min_:\n                total += min_ - x\n            elif x > max_:\n                total += x - max_\n            else:\n                continue\n        \n        return str(total)\n\n\n\"\"\"\nYou are given n rectangles with integer coordinates (i, j) of bottom left and top right corner.\nYou are also given the coordinates of a point (x, y).\nA rectangle is called \"horizontal\" if it has vertical boundary at x and horizontal boundary at y,\nand it is called \"vertical\" if it has horizontal boundary at x and vertical boundary at y.\nThe point (x, y) is inside the rectangle if its coordinates are inside the rectangle.\nWrite a function, which returns the number of rectangles that are either horizontal or vertical.\n\n---Example---\nInput:\nrectangles = [[1, 1], [3, 1], [3, 3], [1, 3], [1, 1]]\npoint = [1, 1]\nOutput:\n5\nExplanation:\nAll rectangles are either vertical or horizontal.\n1. [1, 1] vertical\n2. [3, 1] vertical\n3. [3, 3] vertical\n4. [1, 3] horizontal\n5. [1, 1] horizontal\n\n\"\"\"\n\nclass Solution:\n    def solution(self, rectangles: list, point: list) -> int:\n        # iterate through the rectangles\n        # check if the point lies in the rectangle\n        # if it does, add to the result\n        res = 0\n        for x1, y1, x2, y2 in rectangles:\n            # check if the point is in the rectangle\n            if x1 <= point[0] <= x2 and y1 <= point[1] <= y2:\n                res += 1\n        return res\n    \n\"\"\"\nYou are given n rectangles and your task is to count the number of rectangles that are either horizontal or vertical.\n\n---Example---\nInput:\nrectangles = [[1, 1], [3, 1], [3, 3], [1, 3], [1, 1]]\nOutput:\n5\nExplanation:\nAll rectangles are either vertical or horizontal.\n1. [1, 1] vertical\n2. [3, 1] vertical\n3. [3, 3] vertical\n4. [1, 3] horizontal\n5. [1, 1] horizontal\n\n\"\"\"\n\nclass Solution:\n    def solution(self, rectangles: list) -> int:\n        # iterate through the rectangles\n        # check if the rectangle is horizontal or vertical\n        # if it is, add to the result\n        res = 0\n        for x1, y1, x2, y2 in rectangles:\n            # check if the rectangle is vertical\n            if x1 == x2:\n                res += 1\n            # check if the rectangle is horizontal\n            elif y1 == y2:\n                res += 1\n        return res\n    \n\"\"\"\nYou are given an array of integers. You should find the sum of the integers with even indexes (0th, 2nd, 4th...).\nThen multiply this summed number and the final element of the array together.\nDon't forget that the first element has an index of 0.\n\n---Example---\nInput: A = [0, 1, 2, 3, 4, 5, 6, 7, 8]\nOutput: 0 + 2 + 4 + 6 + 8 = 28\nExplanation:\n0th element = 0, 1st element = 1, 2nd element = 2, 3rd element = 3\n4th element = 4, 5th element = 5, 6th element = 6, 7th element = 7, 8th element = 8\n\"\"\"\n\nclass Solution:\n    def solution(self, A: list) -> int:\n        # iterate through the A\n        # check if the current index is even\n        # add the element at the current index to the sum\n        # at the end multiply the sum and the last element of the array\n        # return the result\n        res = 0\n        for x in A:\n            if x % 2 == 0:\n                res += x\n        return res * A[-1]\n    \n\"\"\"\nYou are given two strings. You need to find an index of the second occurrence of the second string in the first one.\nLet's go through the first example where you need to find the second occurrence of \"s\" in a word \"sims\".\nIt's easy to find its first occurrence with a function index or find which will point out that \"s\" is the first symbol in a word \"sims\" and therefore the index of the first occurrence is 0.\nBut we have to find the second \"s\" which is 4th in a row and that means that the index of the second occurrence (and the answer to a question) is 3.\n\n---Example---\nInput:\ns = \"sims\"\nwords = [\"sim\", \"s\", \"i\", \"s\", \"im\", \"s\"]\n\nOutput:\n3\n\n\"\"\"\n\nclass Solution:\n    def solution(self, s: str, words: list) -> int:\n        # iterate through the words\n        # iterate through the characters in s\n        # if the character is the same as the current character in words\n        # return the index\n        # if it is not the same as the current character, check if the last character is the same as the current character in words\n        # if it is, then we have found the second occurrence of the second character in the first one\n        # if not, we have not found the second occurrence of the second character in the first one\n        for x in words:\n            if x == s:\n                return words.index(x)\n        for x in range(len(s)):\n            if s[x] == s[-1]:\n                return x\n        return -1\n    \n\"\"\"\nYou are given a string s.\nYour task is to find out if the string s contains: alphanumeric characters, \nalphabetical characters, digits, lowercase and uppercase characters.\n\n---Example---\nInput:\ns = \"qA2\"\nOutput:\nTrue\nExplanation:\ns contains alphanumeric characters, \nalphabetical characters, digits, lowercase and uppercase characters.\n\n\"\"\"\n\nclass Solution:\n    def solution(self, s: str) -> bool:\n        # iterate through the characters in s\n        # check if the character is a digit\n        # if it is, check if the character is uppercase or lowercase\n        # if it is, add to the result\n        # return the result\n        res = 0"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4\\n0 3') == '7'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 3\\n4 5\") == \"7\"\nassert solution(\"1 1\\n10 10\") == \"10\"\nassert solution(\"2 1\\n1 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n\"\"\"\n    ) == \"1\\n1\\n2\"\n\nassert solution(\n    \"\"\"\n10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n\"\"\"\n    ) == \"0\\n2\\n1\""
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n?2\\n1\\n4\\n?1\\n\") == \"1\\n1\\n2\"\nassert solution(\"10\\n100\\n100000\\n123\\n101\\n100\\n100000\\n123\\n110\\n115\\n\") == \"0\\n2\\n1\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1') == '1\\n1\\n2'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115') == '0\\n2\\n1'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"\n\n\"\"\"\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0443\u0441\u043b\u0443\u0433\u0438 \u043f\u043e \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u0440\u0430\u0432\u043e\u0432\u043e\u043c\u0443 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u043e\u043d\u043d\u043e\u043c\u0443 \u0441\u043e\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u044e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438. \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432. \u0420\u0430\u0431\u043e\u0442\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0438\u0445 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432.\n\u0423\u0441\u043b\u0443\u0433\u0438 \u0442\u0440\u0435\u0431\u0443\u044e\u0442\u0441\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432 \u043e\u0431\u0449\u0435\u0436\u0438\u0442\u0438\u0438 \u0438 \u0432 \u043e\u0444\u0438\u0441\u0435.\n\u0412 \u043e\u0431\u0449\u0435\u0436\u0438\u0442\u0438\u0438 \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 $c$;\n\u0432 \u043e\u0444\u0438\u0441\u0435 \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 $d$;\n\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u0440\u0438\u0431\u044b\u043b\u044c \u043e\u0442 \u0443\u0441\u043b\u0443\u0433\u0438 \u0432 \u043e\u0431\u0449\u0435\u0436\u0438\u0442\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 $b$.\n\u0412 \u043e\u0442\u0432\u0435\u0442\u0435 \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u043a\u043e\u043c\u0430\u043d\u0434, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u0430\u043d\u0434 \u0432 \u043e\u0444\u0438\u0441\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 $c$ \u0438 $d$ (1 \\le c, d \\le 10^5). \u041a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1') == '1\\n1\\n2'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115') == '0\\n2\\n1'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3\\nR 1\") == '1'\nassert solution(\"2\\n3\\nR 1\\n2\\n3\\nL 4\") == '0'\nassert solution(\"2\\n3\\nR 1\\n2\\n3\\nL 4\\n3\\nL 5\") == '2'\nassert solution(\"2\\n3\\nR 1\\n2\\n3\\nL 4\\n3\\nL 5\\n1\\nL 5\") == '0'\nassert solution(\"2\\n3\\nR 1\\n2\\n3\\nL 4\\n3\\nL 5\\n1\\nL 5\\n3\\nL 2\") == '1'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n\") == \"1\"\nassert solution(\"8\\n1\\n2\\n3\\n? 2\\n1\\n? 1\\n\") == \"1\"\nassert solution(\"10\\n100\\n100000\\n123\\n? 123\\nL 101\\n? 100\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == \"2\"\nassert solution(\"10\\n100\\n100000\\n123\\n? 123\\nL 101\\n? 100\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == \"2\"\n\n\"\"\"\n\n\nfrom collections import deque\nfrom typing import List, Deque\n\n\nclass Shelf:\n    def __init__(self, start: int = 0, books: List[int] = []):\n        self.start = start\n        self.books = books\n\n    def __repr__(self):\n        return f\"{self.books}\"\n\n    def __iter__(self):\n        return iter(self.books)\n\n    def __len__(self):\n        return len(self.books)\n\n    def __contains__(self, item: int):\n        return item in self.books\n\n    def __getitem__(self, item: int):\n        return self.books[item]\n\n    def add_books(self, books: List[int]):\n        self.books.extend(books)\n\n    def pop_books(self, books: int):\n        while len(self.books) > books:\n            self.books.pop()\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == '1'\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == '0'\nassert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == '1'\nassert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == '1'\nassert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == '1'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n') == '1\\n1\\n2'\n\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n') == '0\\n2\\n1'\n\"\"\""
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n\"\"\"\n\nn = int(input())\n\nfor _ in range(n):\n    n = int(input())\n    if n % 2 == 0:\n        n //= 2\n    elif n % 3 == 0:\n        n //= 3\n    elif n % 5 == 0:\n        n //= 5\n    else:\n        print(-1)\n        continue\n    if n == 1:\n        print(0)\n    else:\n        print(n - 1)\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n20\\n16\\n24\\n8\\n1\") == \"5\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n72\"\nprint('Passed')\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '1'\nassert solution('1\\n2\\n1') == '0'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n1') == '0'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n1') == '4'\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n72\"\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n6912\"\nassert solution(\"3\\n1\\n100\") == \"1\\n1\\n1\"\nassert solution(\"2\\n10\\n20\") == \"2\\n2\\n2\"\nassert solution(\"4\\n10\\n20\\n30\\n40\") == \"3\\n3\\n3\\n3\\n-1\"\nassert solution(\"5\\n10\\n20\\n30\\n40\\n50\") == \"3\\n3\\n3\\n3\\n-1\\n-1\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1\\n1\\n') == '2'\nassert solution('2\\n3\\n1\\n') == '4'\nassert solution('2\\n1\\n1\\n') == '2'\nassert solution('3\\n3\\n1\\n') == '6'\nassert solution('3\\n2\\n2\\n') == '6'\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"15\\n1\\n12\\n16\\n18\\n22\\n17\\n9\\n32\\n3\\n24\\n40\\n50\") == \"15\\n1\\n12\\n16\\n18\\n22\\n17\\n9\\n32\\n3\\n24\\n40\\n50\"\nassert solution(\"100\\n5\\n2\\n1\\n6\\n15\\n36\\n10\\n8\\n7\\n6\\n10\\n13\\n15\\n18\\n17\\n20\\n20\\n20\\n20\\n20\\n20\\n17\\n22\\n22\\n22\\n22\\n22\\n23\\n22\\n22\\n22\\n20\\n22\\n22\\n22\\n22\\n22\\n21\\n22\\n22\\n22\\n22\\n21\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n21\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22\\n22"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"1\\n\"\n\"10\\n\"\n\"25\\n\"\n\"30\\n\"\n\"14\\n\"\n\"27\\n\"\n\"1000000000000000000\") == \"4\\n\"\n\nassert solution(\n\"1\\n\"\n\"10\\n\"\n\"25\\n\"\n\"30\\n\"\n\"14\\n\"\n\"27\\n\"\n\"1000000000000000000\") == \"6\\n\"\n\nassert solution(\n\"1\\n\"\n\"10\\n\"\n\"25\\n\"\n\"30\\n\"\n\"14\\n\"\n\"27\\n\"\n\"1000000000000000000\") == \"6\\n\"\n\nassert solution(\n\"1\\n\"\n\"10\\n\"\n\"25\\n\"\n\"30\\n\"\n\"14\\n\"\n\"27\\n\"\n\"1000000000000000000\") == \"6\\n\"\n\nassert solution(\n\"1\\n\"\n\"10\\n\"\n\"25\\n\"\n\"30\\n\"\n\"14\\n\"\n\"27\\n\"\n\"1000000000000000000\") == \"6\\n\""
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n72\""
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\"\"\") == \"YES\"\nassert solution(\"\"\"3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\"\"\") == \"NO\"\nassert solution(\"\"\"2\n2\n1 1\n1\n1\n1\n1\"\"\") == \"NO\"\n\n\"\"\"\nfrom sys import stdin\n\nt = int(stdin.readline())\nfor _ in range(t):\n    n, a = map(int, stdin.readline().strip().split())\n    if sum(a) < 2:\n        print(\"YES\")\n    elif 2 in a:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\"\"\"\nfrom sys import stdin\n\nt = int(stdin.readline())\nfor _ in range(t):\n    n, a = map(int, stdin.readline().strip().split())\n    if sum(a) < 2:\n        print(\"YES\")\n    elif 2 in a:\n        print(\"YES\")\n    elif a[0] == a[1] and a[0] == 2 and a[n - 1] == 2:\n        print(\"YES\")\n    elif a[0] == a[1]:\n        print(\"YES\")\n    elif a[n - 1] == a[n - 2]:\n        print(\"YES\")\n    elif a[0] < 2 or a[n - 1] < 2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n4\\n1 1 3\\n2\\n11 11\\n1\\n100\") == \"NO\"\nassert solution(\"1\\n4\\n1 1 3\") == \"NO\"\nassert solution(\"4\\n1 1 2 1\") == \"YES\"\nassert solution(\"4\\n1 1 2 1\") == \"YES\""
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 2 2 2 2\\n4 4 4 4 4\\n3 3 3 3 3\") == \"YES\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\nassert solution(\"3\\n100 100 100\\n1\\n100\") == \"YES\"\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 1 1 2\\n3\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"4\\n1 1 1 2\\n3\\n11 11\\n1\\n100\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1 3\") == \"YES\"\nassert solution(\"4\\n1 1 2 1\") == \"NO\"\nassert solution(\"2\\n11 11\") == \"YES\"\nassert solution(\"1\\n100\") == \"YES\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4\\n2 1 3\\n\") == \"NO\"\nassert solution(\"3\\n4\\n2 2 3\\n\") == \"YES\"\nassert solution(\"2\\n3\\n1 1 2\\n\") == \"NO\"\nassert solution(\"2\\n1\\n1 1\\n\") == \"YES\"\n\n---\n\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:\n\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\ufffd"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1 3\") == \"YES\"\nassert solution(\"4\\n1 1 2 1\") == \"NO\"\nassert solution(\"11\\n1 1 2 1\") == \"YES\"\nassert solution(\"100\\n100 100\") == \"NO\"\nassert solution(\"2\\n1 1\\n2 1\") == \"YES\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"NO\"\n\n\"\"\"\n\nimport sys\nimport math\n\nDEBUG = False\ndata = [\n    (3, [1, 1, 3], \"YES\"),\n    (4, [1, 1, 2, 1], \"NO\"),\n    (4, [1, 1, 1, 1], \"YES\"),\n    (4, [1, 1, 1, 1], \"YES\"),\n    (4, [1, 1, 2, 1], \"YES\"),\n    (4, [1, 1, 2, 1], \"YES\"),\n    (4, [1, 1, 2, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1, 3, 1], \"YES\"),\n    (4, [1, 1"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\nassert solution(\"2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"2\\n11 11\\n1\") == \"YES\"\nassert solution(\"2\\n11 11\\n100\") == \"NO\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abacaba') == 4\nassert solution('bacabaa') == 0\nassert solution('zcabd') == 0\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = sys.stdin.readline()\nb = sys.stdin.readline()\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"zcabd\") == 0\n\"\"\"\n\nn = int(input())\ns1 = input()\ns2 = input()\n\ndp = [[0 for i in range(n+1)] for j in range(3)]\ndp[0][1] = 0\ndp[1][1] = 0\ndp[2][1] = 2\n\nfor i in range(2, n+1):\n    dp[0][i] = dp[1][i-1] + dp[2][i-1] + 1\n    if s1[i-1] == s2[i-1]:\n        dp[0][i] = min(dp[0][i], dp[2][i-1])\n    if s1[i-2] == s2[i-2] and s1[i-1] == s2[i-1]:\n        dp[0][i] = min(dp[0][i], dp[1][i-2] + 1)\n    dp[1][i] = min(dp[0][i], dp[1][i-1]) + 1\n    dp[2][i] = min(dp[0][i], dp[2][i-1]) + 1\n\nprint(min(dp[0][-1], dp[1][-1], dp[2][-1]))"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abacaba', 'bacabaa') == 4\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == 4\n\"\"\"\n\n\nimport sys\nfrom typing import List, Dict\n\ninp = sys.stdin.readline()\na: List[str] = list(sys.stdin.readline().strip())\nb: List[str] = list(sys.stdin.readline().strip())\n\nm: Dict[int, str] = {}\n\nfor i in range(len(a)):\n    if a[i]!= b[i]:\n        m[i] = a[i]\n\ncnt: int = 0\nwhile len(m) > 0:\n    cnt += 1\n    for i in range(len(m)):\n        if len(m) == 0:\n            break\n        try:\n            if i == 0:\n                if m[i + 1]!= m[i]:\n                    m.pop(i)\n                    m.pop(i)\n                    if len(m) == 0:\n                        break\n                    else:\n                        break\n                else:\n                    m.pop(i)\n                    m.pop(i)\n                    break\n            elif i == len(m) - 1:\n                if m[i - 1]!= m[i]:\n                    m.pop(i)\n                    m.pop(i)\n                    if len(m) == 0:\n                        break\n                    else:\n                        break\n                else:\n                    m.pop(i)\n                    m.pop(i)\n                    break\n            elif m[i + 1]!= m[i] and m[i - 1]!= m[i]:\n                m.pop(i)\n                m.pop(i)\n                break\n            elif m[i + 1]!= m[i]:\n                m.pop(i)\n                m.pop(i)\n                break\n            elif m[i - 1]!= m[i]:\n                m.pop(i)\n                m.pop(i)\n                break\n        except IndexError:\n            break\n\nprint(cnt)\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == \"4\"\nassert solution(\"bacabaa\") == \"0\"\nassert solution(\"zcabd\") == \"0\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == 4\n\"\"\"\n\nn = int(stdin.readline())\na = stdin.readline()\nb = stdin.readline()\n\ncount = 0\n\nfor i in range(n):\n    if a[i]!= b[i]:\n        count += 1\n        a = a[:i] + b[i] + a[i+1:]\n        b = b[:i] + a[i] + b[i+1:]\n\nprint(count)\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"bacabaa\") == 0\nassert solution(\"zcabd\") == 0\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = sys.stdin.readline().strip()\nb = sys.stdin.readline().strip()"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    'abacaba'\n) == 4\nassert solution(\n    'zcabd'\n) == 0\nassert solution(\n    'dbacz'\n) == 0\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"abacaba\"\n) == \"4\"\nassert solution(\n\"zcabd\"\n) == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution([\"abacaba\", \"bacabaa\"]) == 4\nassert solution([\"zcabd\", \"dbacz\"]) == 0\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 1 2\\n3 3 4\\n2 2 1\\n2 1 3\\n1 2 3\\n1 1 2\\n3 3 4\\n2 2 1') == '0\\n0\\n2\\n1'\nassert solution('1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1') == '1'\nassert solution('3\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1') == '1'\nassert solution('3\\n3 3 4\\n2 2 1\\n2 1 3\\n1 2 3\\n1 1 2\\n3 3 4\\n2 2 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n4 2 3\") == \"6\"\nassert solution(\"3\\n1 1 1\") == \"1\"\nassert solution(\"5\\n1 100 1 4\") == \"8\"\nassert solution(\"6\\n1 1 1\") == \"0\"\nassert solution(\"6\\n1 1 1\\n1 1 1\") == \"0\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8198-17299999999701\""
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 3\") == \"8\"\nassert solution(\"5 2 3\") == \"8\"\nassert solution(\"5 2 2\") == \"8\"\nassert solution(\"5 2 1\") == \"6\"\nassert solution(\"5 2 9\") == \"2\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0 0 1\\n1 1 0\\n0 1 0\\n2 0 1\\n1 1 1\\n0 0 1') == '0\\n2\\n1\\n0'\nassert solution('6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\\n') == '8\\n198\\n-17\\n2999999997\\n0\\n1'\n\n\n\"\"\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1') == '4\\n-1\\n0\\n0\\n1\\n0'\nassert solution('10\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1') == '10\\n-1\\n-1\\n-1\\n-1\\n0'\nassert solution('8\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999') == '8\\n198\\n-17\\n2999999997\\n0\\n1'\nassert solution('8\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999') == '8\\n198\\n-17\\n2999999997\\n0\\n1'\nassert solution('8\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999') == '8\\n198\\n-17\\n2999999997\\n0\\n1'\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3\") == '8'\nassert solution(\"100 1 4\") == '198'\nassert solution(\"1 10 5\") == '-17'\nassert solution(\"1 1 1000000000\") == '2999999997'\nassert solution(\"1 1 999999999\") == '0'\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8 198 -17 2999999997 0 1\"\nassert solution(\"1 1 1\\n1 2 3\") == \"0 -1 2\"\nassert solution(\"4 1 3\\n1 2 3\\n1 3 4\") == \"3 3 3\"\nassert solution(\"3 2 1\\n2 1 2\\n3 1 1\") == \"0 -1 1\"\nassert solution(\"6 2 1\\n2 1 3\\n2 3 6\") == \"1 1 1\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 3\") == \"8\"\nassert solution(\"100 1 4\") == \"198\"\nassert solution(\"1 10 5\") == \"17\"\nassert solution(\"1 1 1000000000\") == \"2999999997\"\nassert solution(\"1 1 999999999\") == \"0\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3\") == \"8\"\nassert solution(\"100 1 4\") == \"198\"\nassert solution(\"1 10 5\") == \"8\"\nassert solution(\"1 1 1000000000\") == \"299999999973\"\nassert solution(\"1 1 999999999\") == \"0\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2\\n1\") == \"1\"\nassert solution(\"4\\n2\\n3\") == \"5\"\nassert solution(\"2\\n4\\n2\") == \"5\"\nassert solution(\"4\\n4\\n2\") == \"9\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1\\n2\\n3\") == \"2\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\\n') == '3\\n9\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089'\nprint(solution(stdin))\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n1\") == \"3\"\nassert solution(\"3\\n5\") == \"6\"\n\"\"\"\n\nfrom math import log10\nfrom math import floor\nimport sys"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3') == '4'\nassert solution('3\\n2') == '3'\nassert solution('10\\n10') == '10'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('6') == '1'\nassert solution('13') == '1'\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3') == '4'\n\"\"\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1\") == \"2\"\nassert solution(\"3\\n2\") == \"4\"\nassert solution(\"5\\n9\") == \"12\"\nassert solution(\"6\\n4\") == \"5\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n8\n1\n2\n6\n13\n14\n3620\n10000\n1000000000000000000\n''') == '''\n1\n3\n9\n13\n27\n6561\n19683\n1350851717672992089\n'''\n\nassert solution('''\n8\n2\n2\n1\n3\n2\n3\n3\n2\n''') == '''\n2\n1\n1\n3\n2\n1\n2\n2\n3\n'''\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1\\n2\\n5\\n6\\n\") == '4\\n3\\n5\\n8\\n6\\n'\n\"\"\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(    \"10 10 8 5 3\") == \"70\"\nassert solution(    \"12 8 8 7 2\") == \"77\"\nassert solution(    \"12343 43 4543 39 123212\") == \"177177\"\nassert solution(    \"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(    \"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 10 8 5 3') == 70\nassert solution('12 8 8 7 2') == 77\nassert solution('12343 43 4543 39 123212') == 177177\nassert solution('1000000000 1000000000 1 1 1') == 9999999999000000000\nassert solution('1000000000 1000000000 1 1 1000000000') == 9999999999\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5 4 2 1') == '12'\nassert solution('5 2 4 1') == '12'\nassert solution('5 1 3 1') == '7'\nassert solution('10 3 4 1') == '77'\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70771771779999999990501111111\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 10 8 5 3') == '70'\nassert solution('12 8 8 7 2') == '77'\nassert solution('12343 43 4543 39 123212') == '177177'\nassert solution('1000000000 1000000000 1 1 1') == '999999999000000000'\nassert solution('1000000000 1000000000 1 1 1000000000') == '999999999'\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 10 8 5 3') == 70\nassert solution('12 8 8 7 2') == 77\nassert solution('12343 43 4543 39 123212') == 177177\nassert solution('1000000000 1000000000 1 1 1') == 999999999999999999\nassert solution('1000000000 1000000000 1 1 1000000000') == 999999999999999999\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('10 10 8 5 3') == '70'\nassert solution('12 8 8 7 2') == '77'\nassert solution('12343 43 4543 39 123212') == '177177'\nassert solution('1000000000 1000000000 1 1 1') == '999999999000000000'\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70\\n77\\n177177\\n999999999\\n55\\n10\"\nprint(\"OK\")\n\n\"\"\"\nfrom collections import defaultdict\nimport sys"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"707717717799999999999999999\\n9999999991111111111111111111\\n5510\\n10\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n2 3\n10 10\n2 4\n7 4\n9 3\n''') == '1\\n0\\n2\\n2\\n1'\n\n\"\"\""
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 10\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"7 4\") == \"2\"\nassert solution(\"9 3\") == \"1\""
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"1\"\nassert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"0\"\nassert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"2\"\nassert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"2\"\nassert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == \"1\""
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3') == '1'\nassert solution('10 10') == '0'\nassert solution('2 4') == '2'\nassert solution('7 4') == '2'\nassert solution('9 3') == '1'\n\"\"\""
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n\") == \"1\\n0\\n2\\n2\\n1\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\"\nassert solution(\"2 4\\n7 4\") == \"0\"\nassert solution(\"2 4\\n7 4\") == \"2\"\nassert solution(\"2 4\\n7 4\") == \"2\"\nassert solution(\"2 4\\n7 4\") == \"2\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('1 2') == '0'\nassert solution('2 3') == '1'\nassert solution('2 4') == '2'\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"7 4\") == \"2\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == '1\\n0\\n2\\n2\\n1'\nassert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\") == '1\\n0\\n2\\n2\\n1'\n\"\"\""
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 3\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"7 4\") == \"2\"\nassert solution(\"9 3\") == \"1\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\nprint(solution('22\\n9999\\n1\\n777'))\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\n\"\"\"\nfrom typing import List\nfrom itertools import groupby"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    x = int(input())\n    count = 0\n    while x > 0:\n        if x % 10 == 1:\n            count += 1\n        x = x // 10\n    print(count)"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\nprint(\"Passed\")\n\"\"\"\nfrom math import ceil, log10\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\nprint(solution('4\\n22\\n9999\\n1\\n777'))\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n22\\n9999\\n1\\n777\\n') == '13\\n90\\n1\\n66'\n\"\"\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\n\"\"\"\nimport re"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\nprint(solution(\"22\\n9999\\n1\\n777\"))\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"22\") == 13\nassert solution(\"9999\") == 90\nassert solution(\"1\") == 1\nassert solution(\"777\") == 66\n\n\"\"\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\nassert solution('22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\nassert solution('22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\n\"\"\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'NO'\nassert solution('4\\n5\\n1 1 1 1 1\\n2\\n2 3') == 'NO'\nassert solution('4\\n6\\n2 2 2 2 2 2\\n3\\n2 2 2') == 'NO'\nassert solution('4\\n5\\n1 1 1 1 1\\n5\\n1 1 1 1 1') == 'YES'\nassert solution('4\\n5\\n1 1 1 1 1\\n5\\n1 1 1 1 1') == 'YES'\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n2 2 2\n2 2 2\n2 2 2''') == 'YES\\n2 2\\n4 1'\nassert solution('''2\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1''') == 'NO'\nassert solution('''4\n6\n2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2''') == 'YES\\n2 2\\n4 1'\nassert solution('''5\n2 2 2 2 2 2\n6\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2''') == 'YES\\n2 2\\n4 1'\nassert solution('''5\n2 2 2 2 2 2\n6\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2''') == 'YES\\n2 2\\n4 1'\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1') == 'YES\\n2 6\\n1 2'\n\"\"\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_result\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1') == 'YES\\n2 6\\n1 2'\nassert solution('3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3') == 'NO'\nassert solution('4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2') == 'YES\\n2 2\\n4 1'\n\n\"\"\"\n\nfrom typing import Dict, List, Tuple\nimport re\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\n\nassert solution(\"4\\n6\\n2 2 2 2 2\\n5\\n2 2 2 2 2\") == \"YES\\n2 2\\n4 1\"\n\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\") == \"NO\"\n\nassert solution(\"3\\n1\\n5\\n5\\n2 2 2 2 2\") == \"NO\"\n\nassert solution(\"3\\n1\\n5\\n5\\n2 2 2 2 2\") == \"NO\""
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n\"\"\") == \"YES\\n2 6\\n1 2\\n\"\n\nassert solution(\"\"\"\n4\n1 1 1 1 1\n2\n2 3\n5\n2 2 2 2 2\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n6\n2 2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n\"\"\") == \"YES\\n2 2\\n4 1\\n\"\n\n\n-----\n\"\"\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"NO\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\") == \"YES\\n2 2\\n4 1\"\n\n\"\"\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n\"\"\") == 'YES\\n2 6\\n1 2\\n'\nassert solution(\"\"\"\n4\n2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n\"\"\") == 'YES\\n2 2\\n4 1'\n\"\"\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"4\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\") == \"NO\"\n\n\n\"\"\"\n\nfrom collections import Counter\nimport math\n\nclass Node:\n    def __init__(self, char=None, freq=None):\n        self.char = char\n        self.freq = freq\n        self.left = None\n        self.right = None\n    \n    def __repr__(self):\n        return f'Node(char: {self.char}, freq: {self.freq})'\n\nclass HuffmanCoding:\n    def __init__(self, text: str):\n        self.text = text\n        self.frequency_dict = {}\n        self.root = None\n        \n    def calculate_frequency(self):\n        counter = Counter(self.text)\n        for k, v in counter.items():\n            self.frequency_dict[k] = v\n        \n    def create_tree(self):\n        queue = []\n        for k, v in self.frequency_dict.items():\n            node = Node(k, v)\n            queue.append(node)\n        queue = sorted(queue, key=lambda x: x.freq)\n        while len(queue) > 1:\n            node_left = queue.pop(0)\n            node_right = queue.pop(0)\n            node_parent = Node(None, node_left.freq + node_right.freq)\n            node_parent.left = node_left\n            node_parent.right = node_right\n            queue.append(node_parent)\n            queue = sorted(queue, key=lambda x: x.freq)\n        self.root = queue[0]\n    \n    def huffman_encoding(self):\n        self.calculate_frequency()\n        self.create_tree()\n        encoded_text = ''\n        for char in self.text:\n            encoded_text += self.get_code(self.root, char)\n        return encoded_text\n    \n    def get_code(self, root: Node, char: str):\n        if root.char is not None:\n            return root.char\n        if root.left.freq > root.right.freq:\n            return '0' + self.get_code(root.left, char)\n        return '1' + self.get_code(root.right, char)\n    \n    def huffman_decoding(self, encoded_text: str):\n        decoded_text = ''\n        current_node = self.root\n        for bit in encoded_text:\n            if bit == '0':\n                current_node = current_node.left\n            else:\n                current_node = current_node.right\n            if current_node.char is not None:\n                decoded_text += current_node.char\n                current_node = self.root\n        return decoded_text\n    "
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 3') == 5\nassert solution('3 -1 0 2') == 6\nassert solution('2 -3 -1 5 -4') == 13\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('[4,2,3], 1') == '5'\nassert solution('[3,-1,0,2], 3') == '6'\nassert solution('[2,-3,-1,5,-4], 2') == '13'\n\n[0,0,0,0]\n[0,0,0,0]\n[0,0,0,0]\n[0,0,0,0]\n\"\"\"\n\nclass Solution:\n    def largestSumAfterKNegations(self, A, K: int) -> int:\n        # return max(0,sum(sorted(A)[:K])+sum(sorted(A,reverse=True)[:K]))\n        A.sort()\n        res = 0\n        for i in range(K):\n            if A[i] < 0:\n                A[i] = -A[i]\n            else:\n                break\n        if K % 2 == 0:\n            return sum(A)\n        else:\n            return sum(A) - 2 * min(A)\n\nsolution = Solution()\nassert solution.largestSumAfterKNegations([4,2,3], 1) == 5\nassert solution.largestSumAfterKNegations([3,-1,0,2], 3) == 6\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3\") == 5\nassert solution(\"3 -1 0 2\") == 6\nassert solution(\"2 -3 -1 5 -4\") == 13\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ababa\") == \"abab\"\nassert solution(\"abcdefg\") == \"abcdefg\"\nassert solution(\"abcbdddddeeefff\") == \"abcbdddddeeefff\"\nassert solution(\"aabbccdd\") == \"abccdd\"\n\"\"\"\n\n\nclass Solution:\n    def getLargestSum(self, A, K):\n        ans = curr = sum(A)\n        for _ in range(K):\n            curr = max(curr, 0) - min(curr, 0)\n            ans = max(ans, curr)\n        return ans\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"[4,2,3]\") == 5\nassert solution(\"[3,-1,0,2]\") == 6\nassert solution(\"[2,-3,-1,5,-4]\") == 13\n\"\"\"\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 2 3\n1\n2\n2\n3\n\"\"\") == \"5\"\nassert solution(\"\"\"\n3 -1 0 2\n2\n2\n2\n\"\"\") == \"6\"\nassert solution(\"\"\"\n2 -3 -1 5 -4\n3\n2\n2\n2\n\"\"\") == \"13\"\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 3\") == \"5\"\nassert solution(\"3 -1 0 2\") == \"6\"\nassert solution(\"2 -3 -1 5 -4\") == \"13\"\n\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        while K:\n            A.sort()\n            if A[0] > 0:\n                A[0] = -A[0]\n                K -= 1\n            else:\n                A[-1] = -A[-1]\n                K -= 1\n        return sum(A)\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 3') == '5'\nassert solution('3 -1 0 2') == '6'\nassert solution('2 -3 -1 5 -4') == '13'\n\"\"\"\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"[4,2,3]\") == 5\nassert solution(\"[3,-1,0,2]\") == 6\nassert solution(\"[2,-3,-1,5,-4]\") == 13\n\nclass Solution:\n    def maxSumAfterPartitioning(self, A: List[int], K: int) -> int:\n'''\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3\", \"1\") == \"5\"\nassert solution(\"3 -1 0 2\", \"3\") == \"6\"\nassert solution(\"2 -3 -1 5 -4\", \"2\") == \"13\"\n\n\"\"\"\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        s = 0\n        for i in range(len(A)):\n            if K > 0:\n                s += A[i] * (-1)\n                A[i] *= -1\n                K -= 1\n            else:\n                break\n        if K % 2 == 0:\n            return s\n        else:\n            if K > 0:\n                s += A[0]\n            return s"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('[0,2,1,-6,6,-7,9,1,2,0,1]') == True\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == False\nassert solution('[3,3,6,5,-2,2,5,1,-9,4]') == True\nassert solution('[1,-2,-3,-2]') == True\nassert solution('[1,-2,-3,-2,-1]') == False\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == False"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[1,-1,1,1]\") == False\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('[0,2,1,-6,6,-7,9,1,2,0,1]') == True\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == False\nassert solution('[3,3,6,5,-2,2,5,1,-9,4]') == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0,2,1,-6,6,-7,9,1,2,0,1') == True\nassert solution('0,2,1,-6,6,7,9,-1,2,0,1') == False\nassert solution('3,3,6,5,-2,2,5,1,-9,4') == True\n\n\"\"\"\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: bool\n        \"\"\"\n        total = sum(A)\n        if total % 3!= 0:\n            return False\n        else:\n            target = total // 3\n            tmp = 0\n            for i in range(len(A)):\n                tmp += A[i]\n                if tmp == target:\n                    tmp = 0\n                    if i + 1 < len(A):\n                        tmp += A[i + 1]\n                        if tmp == target:\n                            return True\n        return False\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('[0,2,1,-6,6,-7,9,1,2,0,1]') == True\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == False\nassert solution('[3,3,6,5,-2,2,5,1,-9,4]') == True\n\"\"\"\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        s = sum(A)\n        if s % 3!= 0:\n            return False\n        t = s // 3\n        cnt = 0\n        for a in A:\n            if cnt == 2:\n                break\n            cnt += (a == t)\n        return cnt >= 2\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == \"true\"\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == \"false\"\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == \"true\""
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"010\") == True\nassert solution(\"010\") == False\nassert solution(\"010\") == True\nassert solution(\"010\") == True\nassert solution(\"010\") == False\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('[0,2,1,-6,6,-7,9,1,2,0,1]') == True\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == False\nassert solution('[3,3,6,5,-2,2,5,1,-9,4]') == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('[0,2,1,-6,6,-7,9,1,2,0,1]') == True\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == False\nassert solution('[3,3,6,5,-2,2,5,1,-9,4]') == True\n\nprint(solution([0,2,1,-6,6,-7,9,1,2,0,1]))\nprint(solution([0,2,1,-6,6,7,9,-1,2,0,1]))\nprint(solution([3,3,6,5,-2,2,5,1,-9,4]))\n\n\"\"\"\n\nclass Solution:\n    def canThreePartsEqualSum(self, A):\n        summ = sum(A)\n        if summ % 3!= 0:\n            return False\n        summ //= 3\n        count = 0\n        t = 0\n        for a in A:\n            t += a\n            count += 1\n            if t == summ:\n                break\n        if count < 3:\n            return False\n        t = 0\n        for i in range(count, len(A)):\n            t += A[i]\n            if t == summ:\n                return True\n        return False\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\ncat\\ncow\\ndog\\ncow\\ncat\\ncow\\ndog\\ncow\\ncow\\ncow\\ncat\\ncow') == 'cow\\ncat\\ndog'\n\"\"\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nabcd\\nefgh\\nijkl\\nmnop\") == \"abcd\\nefgh\\nijkl\\nmnop\"\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\") == \"beet vet\"\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\nbeat\\n: beat\\nvet\\n: vet\\nbeet\\n: beet\\nbed\\n: bed\\nbet\\n: bet\") == \"beet vet\"\nassert solution(\"4\\nbeet\\n: beet\\nvet\\n: vet\\nbeet\\n: beet\") == \"beet\"\n\"\"\""
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\nbeat') == 'beet'\nassert solution('7\\nbeet') == 'beet'\n\"\"\"\nimport operator"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet''') == 'beet\\nvet'\nassert solution('''8\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet''') == 'beat\\nbeet\\nvet'\nassert solution('''8\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet''') == 'beat\\nbeet\\nvet'\nassert solution('''5\na\na\na\na\na''') == 'a'\nassert solution('''3\na\na\na''') == 'a\\na\\na'\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\\n\") == \"beet\\nvet\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == \"vet\"\n\n-------------------------\n\nimport collections"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n7\nbeet\nvet\nbeet\nbed\nvet\nbet\nbeet\n''') == 'beet\\nvet'\n\n\"\"\""
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\nbeet\\n:\\nbeet\\nvet\\n:\\nvet\\nbet\\n:\\nbet\\n\") == \"beet\\nvet\"\nassert solution(\"5\\nbeet\\n:\\nvet\\n:\\nbet\\n\") == \"beet\\nbet\"\nassert solution(\"5\\nbeet\\n:\\nbeet\\nvet\\n:\\nvet\\n\") == \"beet\\nvet\"\nassert solution(\"7\\nbeet\\n:\\nbeet\\nvet\\n:\\nvet\\nbet\\n:\\nbet\\n\") == \"beet\\nvet\"\nassert solution(\"7\\nbeet\\n:\\nbeet\\nvet\\n:\\nvet\\nbet\\n:\\nbet\\n\") == \"beet\\nvet\"\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8\") == \"8\"\n\n\"\"\"\n\nimport sys\n\nn = int(input())\narr = list(map(int, input().split()))\narr.sort()\n\nminimum = sys.maxsize\nfor i in range(n - 1):\n    minimum = min(minimum, arr[i] ** 2 + arr[i + 1] ** 2)\n\nprint(minimum)\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8') == '8'\nassert solution('2 1') == '1'\n\"\"\"\nimport sys\n\nstdin = sys.stdin\n\nN = int(stdin.readline().strip())\na_list = list(map(int, stdin.readline().strip().split()))\n\nmin_cost = sys.maxsize\nfor i, x in enumerate(a_list):\n    for j, y in enumerate(a_list):\n        if i == j:\n            continue\n\n        cost = abs(x - y) ** 2\n        if cost < min_cost:\n            min_cost = cost\n\nprint(min_cost)\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 8\\n') == '8'\nprint(solution(stdin))"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 5\\n\") == \"8\"\nassert solution(\"3\\n8 5 2\\n\") == \"8\"\nassert solution(\"3\\n6 5 2\\n\") == \"7\"\nassert solution(\"2\\n4 8\\n\") == \"8\"\nassert solution(\"3\\n4 8 2\\n\") == \"8\"\n\n\"\"\"\n\nfrom collections import defaultdict\n\nn = int(stdin.readline())\n\np = defaultdict(int)\n\nfor _ in range(n):\n    a = int(stdin.readline())\n    p[a] += 1\n\nm = sum([a * a for a in p.keys()])\n\nfor i in p.keys():\n    if p[i] >= 2:\n        m += (p[i] - 1) * (i - p[i]) * p[i]\n\nprint(m)\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8\") == \"8\"\nassert solution(\"2 4\") == \"4\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"10 10\") == \"10\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8\\n') == '8'\n\nprint(solution('2\\n4 8\\n'))\n\n'''\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8\\n') == '8'\nassert solution('2 8\\n') == '3'\nassert solution('1 10\\n') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8\\n') == '8'\n\"\"\"\n\nimport sys\n\na = list(map(int, sys.stdin.readline().strip().split()))\n\na_sum = sum(a)\n\ntotal = 0\nfor i in range(len(a)):\n    for j in range(i+1, len(a)):\n        a[i], a[j] = a[j], a[i]\n        a_sum -= a[i]\n        total = max(total, a_sum)\n        a[i], a[j] = a[j], a[i]\n\nprint(total)\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n4 8\") == \"8\"\n\"\"\""
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1234 150 100') == '84'\n\"\"\""
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1234 150 100') == '84'\n\n\"\"\"\n\nfrom typing import Any\nimport sys\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1234 150 100') == '84'\n\"\"\"\n\nimport sys\n\na = int(sys.stdin.readline())\nb = int(sys.stdin.readline())\nc = int(sys.stdin.readline())\n\nprint(a - b * c)\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1234 150 100') == '84'\n\"\"\"\n\nimport math\n\nx, a, b = map(int, input().split())\n\nprint(f'{x - a * b}')\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1234 150 100') == '84'\nassert solution('1000 2000 3') == '16'\nassert solution('1 100 1') == '99'\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n1\\n1\\n') == ''\nassert solution('1\\n2\\n3\\n') == '1'\nassert solution('3\\n3\\n2\\n') == '3'\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1234 150 100') == '84'\nprint(solution('1234 150 100'))"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1234 150 100') == '84'\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"8\"\n\n\"\"\"\nfrom math import factorial\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == 8\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"8\"\nassert solution(\"5 2\") == \"8\"\n\"\"\"\nimport sys\nimport copy\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\") == \"110\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"3 5\") == \"6\"\nassert solution(\"4 3\") == \"10\"\n\n\"\"\"\n\nimport sys\nimport numpy as np\n\nn, m = map(int, sys.stdin.readline().split())\n\narr = np.array([int(s) for s in sys.stdin.readline().split()])\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\n1 2\\n2 3\\n3 4\\n4 3\") == \"POSSIBLE\"\n\"\"\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 4\") == 'POSSIBLE'\nassert solution(\"2 2\\n1 2\") == 'IMPOSSIBLE'\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\") == 'IMPOSSIBLE'\n\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nislands = [sys.stdin.readline().split() for _ in range(N)]"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\n\n\"\"\"\nimport sys\nimport math\n\nclass Islands:\n    def __init__(self, n, m, islands):\n        self.n = n\n        self.m = m\n        self.islands = islands\n    \n    def check_two_islands(self, island_one, island_two):\n        return not ((island_one[0] == island_two[0]) or (island_one[1] == island_two[1]))"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n1 3\") == \"POSSIBLE\"\nassert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\nassert solution(\"3 2\\n2 1\\n2 3\") == \"POSSIBLE\"\nassert solution(\"3 2\\n2 3\\n1 2\") == \"POSSIBLE\"\nassert solution(\"3 2\\n2 1\\n1 3\") == \"POSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\\n\") == \"POSSIBLE\"\n\"\"\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n3 2\n1 2\n2 3\n\"\"\"\n) == \"POSSIBLE\"\n\n\"\"\"\n3 2\n1 2\n2 3\n\nPOSSIBLE\n\n3 3\n1 2\n2 3\n3 4\n\nIMPOSSIBLE\n\n3 3\n1 2\n2 3\n3 4\n\nPOSSIBLE\n\n\"\"\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n1 2\\n2 3') == 'POSSIBLE'\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\ntransport = [[int(a), int(b)] for a, b in zip(*[iter(sys.stdin.readline().split())] * 2)]\n\nprint('POSSIBLE' if (N == 1 and 1 in [i for i, j in transport]) or N == 1 and N not in [i for i, j in transport] or N == 1 and 1 in [j for i, j in transport] else 'IMPOSSIBLE')\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\\n\") == \"POSSIBLE\"\n\"\"\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n\"\"\"\n\nimport sys\nimport os\nimport re\nimport itertools\nimport math\nimport copy\nfrom collections import deque\nfrom itertools import chain\n\n\"\"\"\ninput\n3 2\n1 2\n2 3\n\noutput\nPOSSIBLE\n\ninput\n3 2\n1 2\n2 3\n\noutput\nIMPOSSIBLE\n\"\"\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\\n\") == \"POSSIBLE\"\n\n\"\"\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('atcoder') == 'acdr'\nassert solution('abc') == 'abc'\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nassert solution(\"atcoder1\") == \"acdr1\"\nassert solution(\"atcoder2\") == \"acdr2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == \"acdr\"\n'''"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\nfrom typing import Tuple\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    'rng gorilla apple'\n) == 'YES'\nassert solution(\n    'rng rng rng'\n) == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"rng gorilla apple\") == \"YES\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\n\na = input().split()\n\nprint('YES' if a[0][-1] == a[1][0] and a[1][-1] == a[2][0] else 'NO')\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('rng gorilla apple') == 'YES'\nassert solution('rng gorilla antelope') == 'NO'\n\"\"\"\n\n\"\"\"\nAlgorithm\n\nHow do you think the solution will be represented?\nSince B and C are two different strings, they won't end up having the same last character.\n\nHow will you test your solution?\nYou will use python's assert statement.\nYou will create a word chain by joining the input strings with 'a' between them.\n\nFinal complexity\nTime: O(1)\nSpace: O(1)\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"rng gorilla apple\"\n) == \"YES\"\nassert solution(\n\"gorilla gorilla apple\"\n) == \"NO\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\nassert solution(\"36 24\") == \"GREATER\"\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('36 24') == 'GREATER'\nassert solution('24 36') == 'LESS'\nassert solution('36 36') == 'EQUAL'\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\nprint(solution(\"36 24\"))\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"36 24\") == 'GREATER'\nassert solution(\"24 36\") == 'LESS'\nassert solution(\"34 34\") == 'EQUAL'\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\n\nA, B = [int(x) for x in stdin.split()]\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('36\\n24') == 'GREATER'\n\n\"\"\"\n\n\"\"\"\nimport math\n\na, b = input().split()\n\nprint('GREATER' if math.fabs(int(a)) > math.fabs(int(b)) else 'LESS' if math.fabs(int(a)) < math.fabs(int(b)) else 'EQUAL')\n\"\"\"\n\nimport math\n\na, b = input().split()\n\nprint('GREATER' if math.fabs(int(a)) > math.fabs(int(b)) else 'LESS' if math.fabs(int(a)) < math.fabs(int(b)) else 'EQUAL')\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\""
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\ncat\\ncat\\napple\") == \"0\"\nassert solution(\"1\\ncat\\ncat\\napple\") == \"2\"\nassert solution(\"1\\ncat\\ncat\\napple\") == \"2\"\nassert solution(\"3\\ncat\\ncat\\napple\\ngrape\") == \"5\"\n\n----\n\nN = int(stdin.readline())\na = []\nb = []\nfor _ in range(N):\n    a.append(stdin.readline())\nm = int(stdin.readline())\nfor _ in range(m):\n    b.append(stdin.readline())\n\nfor i in range(m):\n    c = []\n    for j in range(N):\n        if a[j] == b[i]:\n            c.append(j)\n    if len(c)!= 0:\n        print(len(c))\n    else:\n        print(0)\n\n-----\n\nN = int(input())\na = []\nb = []\nfor _ in range(N):\n    a.append(input())\nm = int(input())\nfor _ in range(m):\n    b.append(input())\n\nfor i in range(m):\n    c = []\n    for j in range(N):\n        if a[j] == b[i]:\n            c.append(j)\n    if len(c)!= 0:\n        print(len(c))\n    else:\n        print(0)\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\na\\nb\\n\\nc\\n1\\ng') == '2'\nassert solution('3\\na\\nb\\n\\nc\\n1\\ng') == '2'\nassert solution('3\\na\\nb\\n\\nc\\n1\\ng') == '2'\n\n-----TESTING-----\nsolution([input() for _ in range(int(input()))])\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\napple\norange\napple\n1\ngrape\n''') == '2'\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\\n\") == \"2\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('b') == ''\nassert solution('a,b') == ''\nassert solution('a,a') == ''\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\napple\norange\napple\n1\ngrape''') == '2'\nassert solution('''2\ncherry\napple\n2\ncherry\napple\n3\ncherry\napple\n5\ncherry\napple''') == '5'\n\"\"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"apple\\norange\\napple\\n1\\ngrape\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\n\n-------------"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"apple\\norange\\napple\\n1\\ngrape\") == '2'\nprint(\"All sample test cases passed.\")\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('A') == 'T'\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(A) == \"T\"\n\"\"\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\nimport sys"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"G\") == \"C\"\n\"\"\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('A') == 'T'\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\""
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 2 2 1\") == \"14\"\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3 2 2 4 1\\n1 2 2 2 1') == 14\n\"\"\"\n\nn = int(input())\ngrid = [[int(i) for i in input().split()] for j in range(2)]\n\n\"\"\"\nprint('n: {}'.format(n))\nprint('grid: {}'.format(grid))\n\"\"\""
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3 2 2 4 1') == '14'\n\"\"\"\n\nn = int(input())\n\na = [[int(x) for x in input().split()] for _ in range(2)]\n\ntotal = 0\nfor i in range(n):\n    for j in range(n):\n        total += a[(i + j) % 2][j]\n\nprint(total)\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 2 2 4 1\") == 14\n\"\"\"\n\nimport sys\nimport pprint"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n3 2 2 4 1') == 14\n\"\"\"\n\nn = int(stdin.readline().rstrip())\ngrid = list()\nfor _ in range(n):\n    grid.append([int(x) for x in stdin.readline().rstrip().split()])\n\nresult = 0\nrow = 0\ncol = 0\nwhile row < n - 1 and col < n - 1:\n    if grid[row][col] == grid[row][col + 1] == grid[row + 1][col] == grid[row + 1][col + 1]:\n        result += grid[row][col] + grid[row][col + 1] + grid[row + 1][col] + grid[row + 1][col + 1]\n        col += 2\n    else:\n        row += 1\n        col += 1\n\nrow = n - 1\ncol = n - 1\nwhile row >= 1 and col >= 1:\n    if grid[row][col] == grid[row - 1][col] == grid[row][col - 1] == grid[row - 1][col - 1]:\n        result += grid[row][col] + grid[row - 1][col] + grid[row][col - 1] + grid[row - 1][col - 1]\n        col -= 2\n        row -= 1\n    else:\n        col -= 1\n        row -= 1\n\nprint(result)\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n3 2 2 4 1') == '14'\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 2 4 1\\n1 2 2 2 1\") == 14\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3 2 2 4 1\") == \"14\"\n\n'''\n\n\n\nn = int(input())\na = [[int(i) for i in input().split()]]\nfor i in range(n - 1):\n    a.append([int(i) for i in input().split()])\na.append([int(i) for i in input().split()])\n\ndp = [0] * (n + 1)\nfor i in range(n - 1):\n    for j in range(n):\n        dp[i + 1] = max(dp[i + 1], dp[i] + a[i][j])\n        dp[i + 2] = max(dp[i + 2], dp[i] + a[i][j])\nprint(max(dp))\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3 2 2 4 1\") == 14\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n3 2 2 4 1') == '14'\n\"\"\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n\nimport sys\n\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ncount = 0\nfor i in range(n):\n    if a[i] < k:\n        continue\n    if a[i] % k!= 0:\n        a[i] = (a[i] // k) + 1\n    else:\n        a[i] = (a[i] // k)\n    count += 1\n\nprint(count)\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\\n\") == \"6\"\nassert solution(\"5 3\\n5 5 5 5\\n\") == \"10\"\n\"\"\"\n\n\nimport sys\nimport collections\n\nsys.stdin = open(\"input.txt\")\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\narr = list(map(int, input().split()))\n\nans = 0\n\nqueue = collections.deque([])\nfor box in arr:\n    if box >= m:\n        queue.append(box)\n    else:\n        ans += box\n\nwhile queue:\n    box = queue.popleft()\n    if box >= m:\n        queue.append(box - m)\n        ans += m\n    else:\n        ans += box\n\nprint(ans)"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n\nn, *c = list(map(int, input().split()))\nprint(sum(min(max(c) - i, i - max(c)) for i in c))\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n1 2 3 4 5') == '4'\n\nassert solution('10 20\\n1 1 1 1 1 1 1 1 1 1') == '1'\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n3 3 2') == '1'\n\"\"\""
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n2 2 2') == '1'\n\"\"\"\n\nN, *nums = map(int, input().split())\n\nans = 0\n\nfor i in range(N - 1):\n    nums[i + 1] += max(nums[i], 0)\n    ans += max(nums[i], 0)\nprint(ans)\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\"\"\"\n\nfrom collections import defaultdict\nimport itertools"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == 'Yes'\n\n-----Takahashi's solution-----\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"3 0 0\\n3 1 1\\n3 1 1\") == \"Yes\"\nassert solution(\"4 0 2\\n3 2 1\\n3 2 1\\n4 0 2\") == \"No\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\nassert solution('1 0 1\\n2 1 2\\n3 1 3') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"1 1 0\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"1 0 1\\n2 1 2\\n1 1 0\") == \"No\"\nassert solution(\"1 0 1\\n2 2 2\\n1 0 1\") == \"No\"\nassert solution(\"1 2 1\\n2 1 2\\n1 0 1\") == \"No\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\n\"\"\"\n\nfrom functools import reduce\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC\") == \"ARC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\"\n\ns = input()\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABC') == 'ARC'\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC\") == \"ARC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ARC\") == \"ARC\"\nassert solution(\"ABC\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 8 2''') == '''3'''\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8 2') == '3'\n\"\"\"\n\na, b, x = input().split()\na = int(a)\nb = int(b)\nx = int(x)\n\ncount = 0\n\nfor i in range(a, b + 1):\n    if i % x == 0:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 2\") == 3\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 8 2\\n') == '3'\n\"\"\"\n\na, b, x = (int(input()) for _ in range(3))\nans = 0\nfor i in range(a, b + 1):\n    if i % x == 0:\n        ans += 1\nprint(ans)"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8 2') == '3'\nassert solution('1 2 3') == '0'\nassert solution('2 4 6') == '1'\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8 2') == 3\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 2\") == \"3\"\nprint(solution(\"4 8 2\"))\n\"\"\"\n\na, b, x = [int(c) for c in input().split()]\n\nres = 0\nfor i in range(a, b+1):\n    if i % x == 0:\n        res += 1\nprint(res)\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8 2\") == \"3\"\nprint(solution(\"4 8 2\"))"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == \"4\"\nassert solution(test_input_2) == \"6\"\nassert solution(test_input_3) == \"3\"\nassert solution(test_input_4) == \"7\"\nassert solution(test_input_5) == \"0\"\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n\"\"\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"25\") == \"Christmas\"\n\"\"\"\n\n\"\"\"\nYou are given a number N and your task is to print the pattern like the one below.\n\n1\n2 2\n3 3 3\n4 4 4 4\n5 5 5 5 5\n\nInput Format\n\nA number N.\n\nConstraints\n\n1 \\leq N \\leq 10^6\n\nOutput Format\n\nPrint N lines with the pattern as explained above.\n\nSample Input 0\n\n5\n\nSample Output 0\n\n1\n2 2\n3 3 3\n4 4 4 4\n5 5 5 5 5\n\"\"\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"25\") == \"Christmas\", \"1st example\"\nassert solution(\"24\") == \"Christmas Eve\", \"2nd example\"\nassert solution(\"23\") == \"Christmas Eve Eve\", \"3rd example\"\nassert solution(\"22\") == \"Christmas Eve Eve Eve\", \"4th example\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('25') == 'Christmas'\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('25') == 'Christmas','solution(25)'\nassert solution('24') == 'Christmas Eve','solution(24)'\nassert solution('23') == 'Christmas Eve Eve','solution(23)'\nassert solution('22') == 'Christmas Eve Eve Eve','solution(22)'\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nPair Programming:\n\nImplementation of the function get_partitions(s)"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '3'\nassert solution('6') == '4'\nassert solution('4') == '0'\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == '2'\nassert solution('1') == '0'\nassert solution('6') == '4'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7') == '4'\n\"\"\"\n\nn = int(input())\n\nprint(((n - 1) // 2) + 1)\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n') == '4'"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(expected_output)\n\nexpected_output = \"\"\"4\"\"\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\") == \"4\"\n\"\"\"\n\nimport unittest\n\nfrom unittest.mock import patch\n\nclass TestCalculate(unittest.TestCase):\n    def test_case_1(self):\n        with patch('builtins.input', return_value='7'):\n            with patch('builtins.print') as mock_print:\n                solution()\n                mock_print.assert_called_with('4')\n\n    def test_case_2(self):\n        with patch('builtins.input', return_value='6'):\n            with patch('builtins.print') as mock_print:\n                solution()\n                mock_print.assert_called_with('6')\n\n    def test_case_3(self):\n        with patch('builtins.input', return_value='5'):\n            with patch('builtins.print') as mock_print:\n                solution()\n                mock_print.assert_called_with('5')\n\n    def test_case_4(self):\n        with patch('builtins.input', return_value='0'):\n            with patch('builtins.print') as mock_print:\n                solution()\n                mock_print.assert_called_with('0')\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\") == \"4\"\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7') == '4'\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n\") == \"2\"\nassert solution(\"7\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 7 9 3') == 'Yes'\nassert solution('4 7 9 4') == 'No'\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\"\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\nassert solution(\"7 7 9 3\") == \"No\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\nThe solution is not complete, it only verifies that the given input and output match.\nYou should use the standard input and output in your solution to ensure that it works in the HackerRank platform.\n\n-----\nUse one function that takes in one list of distances (a,b,c), and returns if A and C can communicate directly or indirectly.\n\nNote: The code takes in all three distances at once, so it's a 3-argument function.\nThe function will take in all three numbers at once, such as\n\ncommunicate([1,2,3])\n\n### The distances\ndistances = [1,2,3]\n\n### The answer to the problem\nanswer = communicate(distances)\n\n### Output the result\nprint(answer)\n\n### Example:\n\nA and C can communicate directly, so we should print Yes.\n\ncommunicate([1,3,5])\n\n### Print: Yes\n\nA and B can communicate directly, so we should print Yes.\n\ncommunicate([1,2,1])\n\n### Print: Yes\n\nA and C can communicate indirectly, but not directly, so we should print No.\n\ncommunicate([3,2,4])\n\n### Print: No\n\nNote: the function should be able to take in lists of all different sizes.\n\n### Code:"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data) == expected_result\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\nassert solution(\"4 6 7 9\") == \"No\"\n\"\"\"\n\n\"\"\"\nBig-O efficiency\n- Time complexity : O(n^2)\n- Space complexity : O(1)\n\nApproach:\n- iterate over every character in the string\n    - check if the characters are in the allowed character set\n    - if not, return False\n    - if yes, check if it's not the start character\n    - if yes, iterate over the rest of the string\n        - if the substring is not in the allowed character set, return False\n        - if yes, check if there's no duplicate characters\n            - if there's, return False\n        - otherwise, return True\n\"\"\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\nassert solution(\"3 7 9 3\") == \"No\"\nassert solution(\"4 9 10 8\") == \"Yes\"\nassert solution(\"1 2 3 2\") == \"Yes\"\nassert solution(\"5 8 11 4\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stin) == \"Yes\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"ABC\"\n\"\"\"\n\ns1, s2, s3 = input().split()\nprint(''.join([s[0] for s in [s1, s2, s3]]).upper())\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n\"\"\"\n\ns_1 = stdin.split(' ')[0]\ns_2 = stdin.split(' ')[1]\ns_3 = stdin.split(' ')[2]\n\nprint(s_1[0].upper() + s_2[0].upper() + s_3[0].upper())"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n\ns_1, s_2, s_3 = input().split()\ns_1, s_2, s_3 = s_1.upper(), s_2.upper(), s_3.upper()\nprint(\"\".join([i[0] for i in (s_1, s_2, s_3)]))\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n\ns = input().split()\nprint(\"\".join(i[0] for i in s).upper())"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\nassert solution('aaa bbb ccc') == 'AAA'\nassert solution('aaa aaa aaa') == 'AAA'\nassert solution('abc') == 'ABC'\nassert solution('a b c') == 'ABC'\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('50 100 120') == 'Yes'\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('50 100 120') == 'Yes'\n\n-----Explanation-----\nTakahashi has 50 + 100 = 150 yen, which is bigger than 120 yen, so he can buy the 120-yen toy.\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"50 100 120\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('50 100 120') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\">50 100 120\") == 'Yes'\nassert solution(\">50 150 120\") == 'No'\nassert solution(\">50 150 140\") == 'No'\nassert solution(\">50 150 180\") == 'No'\n\n-----Explanation-----\nSince Takahashi has 50 + 100 = 150 yen, he can buy the 120-yen toy.\nThe toy cost 120 yen. But Takahashi cannot buy the next toy because he has 150 yen, so he cannot buy it.\n\"\"\"\n\n\"\"\"\nGiven A, B, C, calculate the value of A + B + C. \n\n-----Constraints-----\n 1 \\leq A, B, C \\leq 10000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C\n\n-----Output-----\nPrint the value of A + B + C, each in its own line.\n\n-----Sample Input-----\n2 10 20\n\n-----Sample Output-----\n22\n\n2 + 10 = 12\n2 + 10 = 12\n12 + 20 = 32\n\"\"\"\n\n\"\"\"\nGiven A, B, C, find the number of ways to make the number sum of A + B + C.\n\n-----Constraints-----\n 1 \\leq A, B, C \\leq 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C\n\n-----Output-----\nPrint the number of ways to make the number sum of A + B + C.\n\n-----Sample Input-----\n2 10 20\n\n-----Sample Output-----\n1\n\nThe number of ways is:\n2 + 10 = 12\n12 + 20 = 32\n2 + 10 + 20 = 42\n\n12 + 20 = 32\n2 + 10 + 20 = 42\n\"\"\"\n\n\"\"\"\nGiven N, calculate the number of ways to express N as a sum of 2 squares.\n\n-----Constraints-----\n 0 \\leq N \\leq 10^6\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the number of ways to make N as a sum of two squares.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n1\n\nThe number of ways is:\n2 = 1 + 1 = 2\n2 = 1 + 1 = 2\n\n2 = 2\n\"\"\"\n\n\"\"\"\nGiven an array of integers A, the task is to find the number of different arrays possible with the array elements as the set of elements. The number of different arrays possible will be counted as the number of permutations of (A[1], A[2], \u2026, A[n]) where n = length of the array.\n\n-----Constraints-----\n 1 \\leq n \\leq 10^5\n 1 \\leq A[i] \\leq 10^5\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\nA[1] A[2] A[3] \u2026 A[n]\n\n-----Output-----\nPrint the number of different arrays possible as the set of elements.\n\n-----Sample Input-----\n5\n1 2 3 4 5\n\n-----Sample Output-----\n5\n\nThe different arrays possible are:\nA[1] + A[2] + \u2026 + A[5]\nA[1] + A[3] + \u2026 + A[5]\nA[2] + A[3] + \u2026 + A[5]\nA[2] + A[4] + \u2026 + A[5]\nA[3] + A[4] + \u2026 + A[5]\nA[3] + A[2] + \u2026 + A[5]\nA[4] + A[2] + \u2026 + A[5]\nA[4] + A[3] + \u2026 + A[5]\n\"\"\"\n\n\"\"\"\nGiven an integer n, find the smallest integer which has exactly n divisors.\n\n-----Constraints-----\n 0 \\leq n \\leq 10^5\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\n\n-----Output-----\nPrint the smallest integer with exactly n divisors.\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\n1\n\nFor n = 3, the smallest integer with exactly 3 divisors is 1.\n\nFor n = 5, the smallest integer with exactly 5 divisors is 2.\n\nFor n = 10, the smallest integer with exactly 10 divisors is 3.\n\nFor n = 12, the smallest integer with exactly 12 divisors is 4.\n\"\"\"\n\n\"\"\"\nGiven an array of numbers, find and print all the elements in the array that are less than their neighbors.\n\n-----Constraints-----\n 1 \\leq n \\leq 10^5\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\nx1 x2 x3 \u2026 xn\n\n-----Output-----\nPrint the elements that are less than their neighbors in the array.\n\n-----Sample Input-----\n6\n5 6 7 4 3 2\n\n-----Sample Output-----\n5\n6\n3\n2\n\"\"\"\n\n\"\"\"\nGiven two positive integers A and B.\nThe task is to print all the numbers between and including A and B such that each digit of a number is an even number.\n\n-----Constraints-----\n 1 \\leq A, B \\leq 10^5\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nPrint the numbers between and including A and B such that each digit of a number is even.\n\n-----Sample Input-----\n4 6\n\n-----Sample Output-----\n4\n6\n8\n10\n12\n14\n\"\"\"\n\n\"\"\"\nGiven an array of integers. Find the length of the longest sub-sequence such that elements in the subsequence are consecutive integers, the consecutive numbers can be in any order.\n\n-----Constraints-----\n 1 \\leq n \\leq 10^5\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\na1 a2 \u2026 an\n\n-----Output-----\nPrint the length of the longest subsequence.\n\n-----Sample Input-----\n10\n1 4 7 9 10 12 15 16 19 20\n\n-----Sample Output-----\n6\n\nThe longest consecutive subsequence is 1, 4, 7, 10, 12, 15, 16, 19, 20.\n\nNote: If there are several possible answers, then print the minimum length.\n\n\"\"\"\n\n\"\"\"\nGiven two positive integers A and B, find and print all the numbers in the range [A..B] whose sum of digits is divisible by A.\n\n-----Constraints-----\n 1 \\leq A, B \\leq 10^5\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nPrint all the numbers in the range [A..B] whose sum of digits is divisible by A.\n\n-----Sample Input-----\n4 7\n\n-----Sample Output-----\n3\n5\n6\n9\n\"\"\"\n\n\"\"\"\nGiven an array of integers and a number K, find and print all the contiguous subarrays with K as their average.\n\n-----Constraints-----\n 1 \\leq n \\leq 10^5\n 1 \\leq A[i] \\leq 10^5\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\nA[1] A[2] \u2026 A[n]\n\n-----Output-----\nPrint all the contiguous subarrays with K as their average.\n\n-----Sample Input-----\n5\n2 1 3 2 2\n\n-----Sample Output-----\n1\n2\n3\n\n2 = (1 + 2) / 2\n1 = (2 + 1) / 2\n\n1 = 2\n2 = 1\n\n3 = (2 + 2) / 2\n\n2 = (1 + 3) / 2\n\n2 = 1\n\"\"\"\n\n\"\"\"\nGiven an array of N elements, and a number K, find the number of pairs of integers in the array whose sum is divisible by K.\n\n-----"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('50 100 120') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('50 100 120') == 'Yes'\n\n------\nimport sys\nsys.stdin.readline()\n\n---\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\"\"\"\n\na, b, c = [int(x) for x in stdin.split(\" \")]"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('50 100 120') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\"\"\"\nimport math\nimport numpy as np\nfrom utils import test"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\n----"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 8\\n7 9 8 9') == 5\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == '5'\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n\n'''"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'4 8'\n) == '5'\n\n-------\n\n\"\"\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 2 3') == '4 2 1 3'\nassert solution('1 2 3 4') == '4 2 1 3'\nassert solution('7 9 8 10 1 2 3 4 5 6') == '9 8 10 1 2 3 4 5 6 7'\n\nimport io\nimport sys"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\"\"\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"4\\n1 2 3 4\"\n) == \"4 2 1 3\"\nassert solution(\n    \"5\\n1 2 3 4 5\"\n) == \"5 2 1 4 3\"\nassert solution(\n    \"5\\n5 4 3 2 1\"\n) == \"5 4 3 2 1\"\nassert solution(\n    \"7\\n5 6 1 2 3 4 7\"\n) == \"7 5 6 1 4 3 2\"\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2 3\") == \"4 2 1 3\"\nassert solution(\"3 4 2 1\") == \"3 4 1 2\"\n\n------\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == t\n'''\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n1 2 3 4''') == '4 2 1 3'\nassert solution('''5\n9 8 7 6 5''') == '5 9 8 7 6'\nassert solution('''3\n1 2 3''') == '3 1 2'\nassert solution('''5\n-1 -2 -3 -4 -5''') == '5 -1 -2 -3 -4'\nassert solution('''1\n2''') == '2 1'\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\nassert solution(\"7\\n1 2 3 4 5 6 7\") == \"7 1 2 3 4 5 6\"\nassert solution(\"5\\n9 1 4 2 3\") == \"9 1 4 2 3\""
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n1 2 3 4''') == '4 2 1 3'\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\nassert solution(\"4\\n2 4 3 1\") == \"4 3 2 1\"\n\"\"\"\nfrom collections import deque\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nb = deque([])\n\nfor i in range(n):\n    b.append(a[i])\n    b.appendleft(a[i])\n\nfor i in range(n):\n    b.popleft()\n    b.pop()\n\nb = list(b)\n\nfor i in range(n):\n    print(b[i], end=' ')\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\nprint(solution(\"10 3\\n4 5 6\"))\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 6\") == \"Yes\"\nassert solution(\"10 3\") == \"No\"\nassert solution(\"5 5 5\") == \"No\"\nassert solution(\"3 5 6\") == \"Yes\"\nassert solution(\"10 9 10\") == \"No\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\\n1 1 1 1 1 1 1\") == \"Yes\"\nassert solution(\"7 3\\n1 1 2 2 2 2 2\") == \"No\"\nassert solution(\"10 10\\n1 1 1 1 1 1 1 1 1 1 1\") == \"Yes\"\nassert solution(\"10 10\\n1 1 1 1 1 1 1 1 1 1 2\") == \"No\"\nassert solution(\"10 10\\n2 2 2 2 2 2 2 2 2 2 2\") == \"Yes\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\n\nimport sys\n\nH, N = list(map(int, sys.stdin.readline().strip().split(\" \")))\nA = list(map(int, sys.stdin.readline().strip().split(\" \")))"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 3\\n4 5 6\") == 'Yes'\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 3\\n4 5 6') == 'Yes'\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 6\") == \"Yes\"\nassert solution(\"3 4 4\") == \"No\"\nassert solution(\"1 2 3\") == \"Yes\"\nassert solution(\"1 2 3 4\") == \"No\"\nassert solution(\"10 10 10 10\") == \"Yes\"\n\n----\n\nH, N = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nprint(\"Yes\" if H - min(A) >= 0 else \"No\")\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 3\\n4 5 6\") == 'Yes'\n\"\"\"\n\nH, N = [int(i) for i in stdin.split()]\nA = [int(i) for i in stdin.split()[1:]]"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abaababaab\") == 6\n\"\"\""
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abaababaab\") == 6\n\n---\nYou are given an array of integers representing coordinates of obstacles situated on a straight line.\n\nAssume that you are jumping from the point with coordinate 0 to the right. You are allowed only to make jumps of the same length represented by some integer.\n\nFind the minimal length of the jump enough to avoid all the obstacles.\n\nExample\n\nFor inputArray = [5, 3, 6, 7, 9], the output should be\navoidObstacles(inputArray) = 4.\n\n'''"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abaababaab\") == 6\nassert solution(\"baab\") == 2"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('a') == 1\nassert solution('aa') == 2\nassert solution('aba') == 3\nassert solution('abaab') == 4\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abaababaab') == 6\nassert solution('aaaaaa') == 6\nassert solution('baaaaaaa') == 5"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abaababaab') == 6\n\"\"\""
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ababab') == 6\n\"\"\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('a') == 1\nassert solution('ab') == 1\nassert solution('abab') == 2\nassert solution('aba') == 2\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abaababaab') == 6\nassert solution('aaaaa') == 5\nassert solution('ababab') == 4\nassert solution('abbba') == 3\nassert solution('abba') == 3\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abaababaab\") == 6\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"aab\") == \"Yes\"\nassert solution(\"abb\") == \"Yes\"\nassert solution(\"abcde\") == \"Yes\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abc') == 'Yes'\nassert solution('bac') == 'Yes'\nassert solution('abcba') == 'No'\n\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abc') == 'Yes'\nassert solution('bac') == 'Yes'\nassert solution('bca') == 'Yes'\nassert solution('cba') == 'Yes'\nassert solution('cab') == 'Yes'\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('abc') == 'No'\nassert solution('abcde') == 'No'\nassert solution('ababa') == 'Yes'\nassert solution('abab') == 'Yes'\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"abb\") == \"No\"\nassert solution(\"abcded\") == \"Yes\"\nassert solution(\"abcdedfg\") == \"No\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"bca\") == \"No\"\nassert solution(\"abc\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"bca\") == \"No\"\nassert solution(\"acb\") == \"No\"\nassert solution(\"acbz\") == \"No\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"bca\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"aac\") == \"No\"\nassert solution(\"bac\") == \"Yes\"\nassert solution(\"aba\") == \"No\"\nassert solution(\"abc\") == \"Yes\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n1 8 7 2 4\n9 7 2 9 3''') == '646'\nassert solution('''1\n1000000\n1000000''') == '757402647'\n\n\"\"\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n\"\"\""
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 8 7 2 4\\n9 7 2 9 3') == 646\n\"\"\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n\"\"\"\n\nimport sys\nfrom copy import deepcopy"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"2 5 1\"\nassert solution(\"2 3 1\") == \"2 5 1\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n\nprint(solution(\"1\\n1000000\\n1000000\"))\nprint(solution(\"2\\n1 3\\n4 2\"))\n\n\n\"\"\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n\n\"\"\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5\n1 8 7 2 4\n9 7 2 9 3\"\"\") == \"\"\"646\"\"\"\nassert solution(\"\"\"1\n1000000\n1000000\"\"\") == \"\"\"757402647\"\"\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 3 2') == '20'\nassert solution('6 2 6 1 1 2') == '63'\nassert solution('1 100 100 1 1 2') == '56'\nassert solution('1 2 3 4 5 6') == '9'\n\"\"\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\n\n\"\"\"\n\nn, m, k = [int(i) for i in input().split()]\n\nshovels = [int(i) for i in input().split()]\n\nspecial_offers = []\n\nfor i in range(m):\n    x, y = [int(j) for j in input().split()]\n    special_offers.append((x, y))"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9 4 8\\n6 8 5 1 8 1 1 2 1') == '17'\nassert solution('5 1 4\\n2 5 7 4 6') == '17'\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\nassert solution(\"8 8 8\\n8 1 1 1 1 1 1 1 1\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\n8 8\\"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == '17'\n\"\"\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == '7'\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == '17'\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == '17'\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == '7'\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == '17'\n\"\"\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1''') == '17'\nassert solution('''9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\n''') == '17'\nassert solution('''5 1 4\n2 5 7 4 6\n5 4\n''') == '17'\nassert solution('''9 9 8\n8 1 7 2 4 5 1 1 1 1\n3 1\n8 4\n5 3\n9 7\n''') == '17'\nassert solution('''5 3 2\n2 5 4 4 6\n5 4\n''') == '17'\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\n\nprint(\"Success!\")\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5 2\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1') == '7'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n') == '17'\nassert solution('5 1 4\\n2 5 7 4 6\\n5 4\\n') == '17'\n\"\"\""
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == \"17\"\n\"\"\"\n\nimport sys\nimport ast\nimport os\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == \"2\"\n\"\"\"\nimport sys\nfrom collections import defaultdict\n\n\"\"\"\n1. find distance from 1\n2. find distance from 2\n3. compute the minimum distance\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\\n\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"0\\n\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"1\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7') == '2'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7') == '0'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7') == '1'\n\"\"\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n7\n1 2\n2 3\n2 4\n4 5\n4 6\n5 7\n''') == '2'\n\nassert solution('''\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n''') == '0'\n\nassert solution('''\n7\n1 2\n2 3\n3 4\n3 5\n3 6\n3 7\n''') == '1'\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import Dict, List, Tuple, Set, DefaultDict\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 7\") == \"1\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == '2'\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == '0'\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == '1'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict, deque\nfrom typing import List, Set, DefaultDict, Deque\n\n\nclass Solution:\n    def get_distance_to_node(self, node: int) -> int:\n        queue = deque([(node, 0)])\n        visited = {node}\n        distance_to_node = 0\n\n        while queue:\n            for _ in range(len(queue)):\n                node, distance = queue.popleft()\n                for neighbor in self.graph[node]:\n                    if neighbor not in visited:\n                        visited.add(neighbor)\n                        queue.append((neighbor, distance + 1))\n                        distance_to_node = distance + 1\n        return distance_to_node\n\n    def find_shortest_path(self) -> int:\n        distance_to_node = self.get_distance_to_node(1)\n        return distance_to_node if distance_to_node < 2 else -1\n\n    def minimum_edges(self, nodes: int, edges: List[List[int]]) -> int:\n        self.graph = defaultdict(set)\n        for u, v in edges:\n            self.graph[u].add(v)\n            self.graph[v].add(u)\n        return self.find_shortest_path()\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7') == '2'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7') == '0'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7') == '1'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2\\n1 3\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"1\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n1 7\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 7\\n6 7\") == \"1\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 7\") == \"2\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str([\n    '1 2',\n    '2 3',\n    '3 4',\n    '4 5',\n    '4 6',\n    '5 7',\n])) == '2'\n\nassert solution(str([\n    '1 2',\n    '1 3',\n    '2 4',\n    '2 5',\n    '3 6',\n    '1 7',\n])) == '0'\n\nassert solution(str([\n    '1 2',\n    '2 3',\n    '3 4',\n    '3 5',\n    '3 6',\n    '3 7',\n])) == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"1\"\n\n\n\n\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\\n') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\nassert solution('3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\\n') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\nassert solution('3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\\n') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\nassert solution('3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\\n') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\nassert solution('3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\\n') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 7') == '10'\nassert solution('4 12') == '15'\nassert solution('2 1000000000') == '1999999999'\nassert solution('7 97') == '113'\nassert solution('1000000000 1000000000') == '1000000001'\n\"\"\""
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\") == \"10\\n15\\n1999999999\\n113\\n1000000001\\n1\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 7') == '10'\nassert solution('4 12') == '15'\nassert solution('2 1000000000') == '1999999999'\nassert solution('7 97') == '113'\nassert solution('1000000000 1000000000') == '1000000001'\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1\\n3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\n\"\"\"\n\n\nfrom typing import List\nfrom math import ceil"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n7 2\\n1 5\\n1 8\\n4 8\\n7 3\\n\") == \"10\\n15\\n1999999999\\n113\\n1000000001\\n1\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\\n') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\n\"\"\"\n\nt = int(stdin.readline())\n\nfor _ in range(t):\n    n, k = list(map(int, stdin.readline().split(' ')))\n    print(sum([i for i in range(k) if i % n!= 0]))\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('11') == '1'\nassert solution('111') == '2'\nassert solution('1111') == '2'\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\") == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 7\") == \"10\"\nassert solution(\"4 12\") == \"15\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\nassert solution(\"1000000000 1000000000\") == \"1000000001\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2') == '2'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3') == '3'\n\n\n\"\"\""
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3') == '1 3 2'\nassert solution('4 2') == '2 1'\nassert solution('10 4') == '3 1 2'\n\"\"\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\\n\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\\n\"\n\nassert solution(\"5 4\\n1 1 2 2 1\\n\") == \"3\\n1 1 2 2\\n\"\nassert solution(\"5 5\\n1 1 2 2 1\\n\") == \"2\\n1 1 2 2\\n\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"2 1\"\nassert solution(\"5 4\") == \"2 3\"\nassert solution(\"6 3\") == \"1 3 2\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\n\"\"\"\n\nn, k = map(int, stdin.readline().strip().split())\nconv = []\nfor i in range(n):\n    x = int(stdin.readline())\n    conv.append(x)\n    while len(conv) > k:\n        conv.pop(0)\n\nfor i in conv:\n    print(i)\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2\\n') == '2\\n2 1'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3\\n') == '3\\n1 3 2'\n\n\n\n\"\"\"\n\nimport sys\nimport os\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7 2\n1 2 3 2 1 3 2\n''') == '2\n2 1'\n\n\"\"\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n\"\"\"\n\nfrom collections import deque\n\nn, k = map(int, stdin.readline().split())\n\nconversations = deque()\n\nfor i in range(n):\n    conversation = [int(x) for x in stdin.readline().split()]\n    conversations.append(conversation)\n\nk_conversations = list()\n\nwhile len(conversations) > 0:\n    if len(conversations) <= k:\n        k_conversations.extend(conversations)\n        break\n    k_conversations.append(conversations.popleft())\n\nwhile len(k_conversations) > k:\n    k_conversations.pop()\n\nprint(len(k_conversations))\nprint(*k_conversations)\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2') == '2\\n2 1'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100') == '263'\nassert solution('1') == '1'\nassert solution('3\\n1 10\\n3 5\\n2 3\\n3') == '125'\nassert solution('1\\n2\\n2\\n1\\n1\\n1') == '1'\n\"\"\"\n\nimport sys\nimport math\nfrom typing import List\nfrom collections import defaultdict\n\n\"\"\"\n\u5148\u904d\u5386\u6240\u6709\u7ea7\u6570\uff0c\u6309\u7ea7\u6570\u6392\u5e8f\uff0c\u6bcf\u6b21\u904d\u5386\u7ea7\u6570\u4e3ai\u65f6\uff0c\u5148\u8ba1\u7b97\u7b2ci\u4e2a\u7ea7\u6570\u6240\u6709\u53ef\u4ee5\u6253\u7684card\uff0c\u7edf\u8ba1\u4e0d\u80fd\u6253\u7684card\n\"\"\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100''') == '263'\nprint('OK')\n\n-----Explanation-----\n\nLet's define a function $f(n, k, c, d)$ to denote the max possible damage of character in $n$ turns:\n\n$f(n, k, c, d) = \\max \\{d, f(n - 1, k - 1, c - c_j, d + 2 * d_j) + d_j, j \\in [1, k]\\}$.\n\nRecurrence relation:\n\n$f(n, k, c, d) = max \\{d, f(n - 1, k - 1, c - c_j, d + 2 * d_j) + d_j, j \\in [1, k]\\}$, where\n\n$\\text{max} \\{d, d_j\\}$ is the maximum damage you can deal with card j (when you've played up to card j).\n\nSo we have:\n\n$$\\max \\{d, f(n - 1, k - 1, c - c_j, d + 2 * d_j) + d_j, j \\in [1, k]\\} = \\max \\{d, d + 2 * d_j, j \\in [1, k]\\} = \\max \\{d, d_j\\}$$\n\nAnd we can rewrite it as:\n\n$$f(n, k, c, d) = max \\{d, d_j\\}$, where\n\n$\\text{max} \\{d, d_j\\}$ is the maximum damage you can deal with card j (when you've played up to card j).\n\nSo we have:\n\n$$f(n, k, c, d) = \\max \\{d, d_1, d_2, \\ldots, d_j, d_{j + 1}\\}$, where\n\n$\\text{max} \\{d, d_j\\}$ is the maximum damage you can deal with card j (when you've played up to card j).\n\nSo we have:\n\n$$f(n, k, c, d) = \\max \\{d, d_1, d_2, \\ldots, d_j, d_{j + 1}\\}$, where\n\n$\\text{max} \\{d, d_j\\}$ is the maximum damage you can deal with card j (when you've played up to card j).\n\nSo we have:\n\n$$f(n, k, c, d) = \\max \\{d, d_1, d_2, \\ldots, d_j, d_{j + 1}\\}$, where\n\n$\\text{max} \\{d, d_j\\}$ is the maximum damage you can deal with card j (when you've played up to card j).\n\nSo we have:\n\n$$f(n, k, c, d) = \\max \\{d, d_1, d_2, \\ldots, d_j, d_{j + 1}\\}$, where\n\n$\\text{max} \\{d, d_j\\}$ is the maximum damage you can deal with card j (when you've played up to card j).\n\nSo we have:\n\n$$f(n, k, c, d) = \\max \\{d, d_1, d_2, \\ldots, d_j, d_{j + 1}\\}$, where\n\n$\\text{max} \\{d, d_j\\}$ is the maximum damage you can deal with card j (when you've played up to card j).\n\nSo we have:\n\n$$f(n, k, c, d) = \\max \\{d, d_1, d_2, \\ldots, d_j, d_{j + 1}\\}$, where\n\n$\\text{max} \\{d, d_j\\}$ is the maximum damage you can deal with card j (when you've played up to card j).\n\nSo we have:\n\n$$f(n, k, c, d) = \\max \\{d, d_1, d_2, \\ldots, d_j, d_{j + 1}\\}$, where\n\n$\\text{max} \\{d, d_j\\}$ is the maximum damage you can deal with card j (when you've played up to card j).\n\nSo we have:\n\n$$f(n, k, c, d) = \\max \\{d, d_1, d_2, \\ldots, d_j, d_{j + 1}\\}$, where\n\n$\\text{max} \\{d, d_j\\}$ is the maximum damage you can deal with card j (when you've played up to card j).\n\nSo we have:\n\n$$f(n, k, c, d) = \\max \\{d, d_1, d_2, \\ldots, d_j, d_{j + 1}\\}$, where\n\n$\\text{max} \\{d, d_j\\}$ is the maximum damage you can deal with card j (when you've played up to card j).\n\nSo we have:\n\n$$f(n, k, c, d) = \\max \\{d, d_1, d_2, \\ldots, d_j, d_{j + 1}\\}$, where\n\n$\\text{max} \\{d, d_j\\}$ is the maximum damage you can deal with card j (when you've played up to card j).\n\nSo we have:\n\n$$f(n, k, c, d) = \\max \\{d, d_1, d_2, \\ldots, d_j, d_{j + 1}\\}$, where\n\n$\\text{max} \\{d, d_j\\}$ is the maximum damage you can deal with card j (when you've played up to card j).\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == '263'\nassert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == '253'\nassert solution(\"5\\n2\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == '212'\nassert solution(\"5\\n1\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == '211'\nassert solution(\"5\\n1\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == '212'\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n\") == '263'\n\"\"\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n\") == \"263\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == '263'\nassert solution(\"5\\n1\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == '263'\n\"\"\"\nimport sys\n\nsys.stdin = open(\"test_input.txt\")\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == '263'\nassert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == '280'\nassert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == '237'\nassert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == '259'\nassert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == '256'\n\"\"\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '6\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100') == '263'\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n\") == \"263\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abacaba') == '3'\nassert solution('dfcbbcfeeedbaea') == '5'"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"codeforces\") == \"2\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abacaba') == 3\nassert solution('dfcbbcfeeedbaea') == 6\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"6\"\nassert solution(\"a\") == \"1\"\nassert solution(\"ab\") == \"2\"\nassert solution(\"ababab\") == \"3\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == \"3\"\n\nassert solution(\"dfcbbcfeeedbaea\") == \"6\""
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"5\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"26\"\nassert solution(\"zzz\") == \"1\"\nassert solution(\"xaaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxaaxa"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == 'cdfrs'\n\"\"\"\n\nclass CodeforcesTask1138ASolution:\n    def __init__(self):\n        self.result = ''\n\n    def read_input(self):\n        pass\n\n    def process_task(self):\n        pass\n\n    def write_output(self):\n        pass\n\n    def main(self):\n        pass\n\nimport sys"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"8\"\n\"\"\""
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"cdfrces\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacaba') == '3'\nassert solution('dfcbbcfeeedbaea') == '5'\nassert solution('codeforces') == '2'\n\n\n-----Problem-----\n\n*De Finibus Bonorum et Malorum*\n\nGood and evil are opposites of each other, if you switch their names. \nThey cannot be the same, but both can be the same name (e.g., J and O). \nThe function should take a string of good and evil names and return a string of the same format, but with the good and evil swapped.\n\nInput: The function will take a string of good and evil names, such as \"Johann\" and \"Karl\" and return a string of the same format, but with the good and evil swapped.\n\nOutput:\n\nThe function should return a string of the same format, but with the good and evil swapped.\n\n\n-----Test 1-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Charles\"\n\nOutput: \"Johann\"\n\n\n-----Test 2-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Charles\"\n\nOutput: \"Johann\"\n\n\n-----Test 3-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Charles\"\n\nOutput: \"Johann\"\n\n\n-----Test 4-----\n\nInput: \"John\"\n\nOutput: \"Johann\"\n\nInput: \"Mary\"\n\nOutput: \"Johann\"\n\n\n-----Test 5-----\n\nInput: \"John\"\n\nOutput: \"Johann\"\n\nInput: \"Mary\"\n\nOutput: \"Johann\"\n\n-----Test 6-----\n\nInput: \"Charles\"\n\nOutput: \"Johann\"\n\nInput: \"Richard\"\n\nOutput: \"Johann\"\n\n-----Test 7-----\n\nInput: \"John\"\n\nOutput: \"Johann\"\n\nInput: \"Mary\"\n\nOutput: \"Johann\"\n\n-----Test 8-----\n\nInput: \"Charles\"\n\nOutput: \"Johann\"\n\nInput: \"Richard\"\n\nOutput: \"Johann\"\n\n-----Test 9-----\n\nInput: \"Johan\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n-----Test 10-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 11-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n-----Test 12-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n-----Test 13-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 14-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 15-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 16-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 17-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 18-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 19-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 20-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 21-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 22-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 23-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 24-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 25-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 26-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 27-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 28-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 29-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 30-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 31-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 32-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 33-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 34-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 35-----\n\nInput: \"Johann\"\n\nOutput: \"Karl\"\n\nInput: \"Mark\"\n\nOutput: \"Johann\"\n\n\n-----Test 36-----\n\nInput: \"Johann\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\n\n\"\"\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == '336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"154873296\") == \"154873396\"\nassert solution(\"386592714\") == \"336592714\"\nassert solution(\"729641835\") == \"729645835\"\nassert solution(\"863725149\") == \"863725145\"\nassert solution(\"975314628\") == \"979314628\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\n\"\"\"\nimport sys\n\nsys.stdin = open('input.txt')"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('154873296') == '154873396'\n\"\"\"\n\nimport unittest\nfrom unittest.mock import patch\nimport sys\n\nclass TestSudoku(unittest.TestCase):\n\n    def test_solution1(self):\n        with patch('builtins.input', side_effect=['1']):\n            sys.stdin = open('test_input.txt', 'r')\n            with patch('sys.stdout', new=open('./tests/output/test_task_solution_1.txt', 'w')):\n                solution()\n                sys.stdout.close()\n\n    def test_solution2(self):\n        with patch('builtins.input', side_effect=['2']):\n            sys.stdin = open('test_input.txt', 'r')\n            with patch('sys.stdout', new=open('./tests/output/test_task_solution_2.txt', 'w')):\n                solution()\n                sys.stdout.close()\n\n    def test_solution3(self):\n        with patch('builtins.input', side_effect=['3']):\n            sys.stdin = open('test_input.txt', 'r')\n            with patch('sys.stdout', new=open('./tests/output/test_task_solution_3.txt', 'w')):\n                solution()\n                sys.stdout.close()\n\n    def test_solution4(self):\n        with patch('builtins.input', side_effect=['4']):\n            sys.stdin = open('test_input.txt', 'r')\n            with patch('sys.stdout', new=open('./tests/output/test_task_solution_4.txt', 'w')):\n                solution()\n                sys.stdout.close()\n\n    def test_solution5(self):\n        with patch('builtins.input', side_effect=['5']):\n            sys.stdin = open('test_input.txt', 'r')\n            with patch('sys.stdout', new=open('./tests/output/test_task_solution_5.txt', 'w')):\n                solution()\n                sys.stdout.close()\n\n    def test_solution6(self):\n        with patch('builtins.input', side_effect=['6']):\n            sys.stdin = open('test_input.txt', 'r')\n            with patch('sys.stdout', new=open('./tests/output/test_task_solution_6.txt', 'w')):\n                solution()\n                sys.stdout.close()\n\n    def test_solution7(self):\n        with patch('builtins.input', side_effect=['7']):\n            sys.stdin = open('test_input.txt', 'r')\n            with patch('sys.stdout', new=open('./tests/output/test_task_solution_7.txt', 'w')):\n                solution()\n                sys.stdout.close()\n\n    def test_solution8(self):\n        with patch('builtins.input', side_effect=['8']):\n            sys.stdin = open('test_input.txt', 'r')\n            with patch('sys.stdout', new=open('./tests/output/test_task_solution_8.txt', 'w')):\n                solution()\n                sys.stdout.close()\n\n    def test_solution9(self):\n        with patch('builtins.input', side_effect=['9']):\n            sys.stdin = open('test_input.txt', 'r')\n            with patch('sys.stdout', new=open('./tests/output/test_task_solution_9.txt', 'w')):\n                solution()\n                sys.stdout.close()\n\n    def test_solution10(self):\n        with patch('builtins.input', side_effect=['10']):\n            sys.stdin = open('test_input.txt', 'r')\n            with patch('sys.stdout', new=open('./tests/output/test_task_solution_10.txt', 'w')):\n                solution()\n                sys.stdout.close()\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"154873296\") == \"154873396\"\nassert solution(\"386592714\") == \"336592714\"\nassert solution(\"729641835\") == \"729645835\"\nassert solution(\"863725149\") == \"863725145\"\nassert solution(\"975314628\") == \"979314628\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1548732963865927147296418358637251499753146284314968357246189563\") == '1548732963865927147296418358637251499753146284314968357246189563'\n\"\"\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"154873296\") == \"154873396\"\nassert solution(\"386592714\") == \"336592714\"\nassert solution(\"729641835\") == \"729645835\"\nassert solution(\"863725149\") == \"863725145\"\nassert solution(\"975314628\") == \"979314628\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"154873296\\n\"\n    \"386592714\\n\"\n    \"729641835\\n\"\n    \"863725149\\n\"\n    \"975314628\\n\"\n    \"412968357\\n\"\n    \"631457982\\n\"\n    \"598236471\\n\"\n    \"247189563\") == \"154873396\\n\" \\\n       \"336592714\\n\" \\\n       \"729645835\\n\" \\\n       \"863725145\\n\" \\\n       \"979314628\\n\" \\\n       \"412958357\\n\" \\\n       \"631457992\\n\" \\\n       \"998236471\\n\" \\\n       \"247789563\"\n\n\"\"\"\nimport copy\nimport itertools\n\n\"\"\"\nn = 9\nfor row in range(n):\n    for col in range(n):\n        print(row, col, end=' ')\n    print()\n\n0 1 2\n3 4 5\n6 7 8\n\"\"\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9') == '3\\n6\\n8\\n-1\\n9\\n4'\nassert solution('9 4\\n2 3\\n2 2\\n2 1\\n1 2\\n4 1') == '2\\n3\\n2\\n1\\n1'\nassert solution('9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9') == '3\\n6\\n8\\n-1\\n9\\n4'\nassert solution('9 4\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9') == '3\\n6\\n8\\n-1\\n9\\n4'\nassert solution('10 10\\n1 1\\n2 1\\n3 2\\n4 3\\n5 4\\n6 5\\n7 6\\n8 7\\n9 8\\n10 10\\n2 10') == '2\\n10\\n10\\n3\\n10\\n7\\n8\\n9\\n8\\n10\\n6\\n8\\n7'\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n3 1\\n5 8\\n4 3\\n8 7\") == \"8\\n7\"\nassert solution(\"8 7\\n6 6\\n5 7\\n4 4\\n8 5\\n3 3\\n5 1\\n2 3\\n7 1\\n1 5\") == \"8\\n6\\n5\\n7\"\nassert solution(\"10 11\\n9 9\\n8 10\\n7 9\\n6 9\\n4 8\\n2 6\\n6 5\\n3 5\\n7 2\\n4 1\\n3 3\\n5 1\\n9 1\\n5 4\\n1 7\\n7 1\\n8 2\\n6 3\\n2 6\\n6 2\\n1 8\\n3 2\\n1 10\\n3 7\\n6 9\\n8 6\\n7 4\\n9 7\\n1 9\\n6 7\\n2 7\\n6 7\\n9 9\\n7 5\\n3 7\\n7 2\\n8 7\") == \"9\\n10\\n8\"\n\"\"\"\n\nn, q = [int(val) for val in input().split()]\nparent = [0] + [int(val) for val in input().split()]\ngraph = {}\n\nfor i in range(1, n + 1):\n    graph[i] = []\n\nfor _ in range(q):\n    u, k = [int(val) for val in input().split()]\n    while k > len(graph[u]):\n        if parent[u] == u:\n            graph[u].append(u)\n            break\n        u = parent[u]\n    else:\n        print(graph[u][k - 1])"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 9\\n1 2\\n2 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 8\\n4 9\\n5 9\\n7 8\\n8 9\\n9 9\\n\") == \"9 9 9 9 9 4 -1\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n6\\n8\\n-1\\n9\\n4\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\\n\") == \"3\\n6\\n8\\n-1\\n9\\n4\"\nassert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\\n\") == \"3\\n6\\n8\\n-1\\n9\\n4\"\nassert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\\n\") == \"3\\n6\\n8\\n-1\\n9\\n4\"\nassert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\\n\") == \"3\\n6\\n8\\n-1\\n9\\n4\"\n\nprint(solution(input()))"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open('input.txt').read()) == open('output.txt').read()\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''9 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9''') == '''3\n6\n8\n-1\n9\n4'''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\\n\") == \"3\\n6\\n8\\n-1\\n9\\n4\\n\"\n\n\"\"\"\n\nimport math\nimport sys\n\nclass Tree(object):\n    def __init__(self, index, rank):\n        self.index = index\n        self.rank = rank\n        self.children = []\n        self.parent = None\n\n    def add_child(self, child):\n        self.children.append(child)\n        child.parent = self\n\n    def get_subtree_rank(self):\n        if len(self.children) == 0:\n            return self.rank\n        else:\n            rank = self.rank\n            for child in self.children:\n                rank += child.get_subtree_rank()\n            return rank\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n2 1\\n3 3\\n1 4') == '4\\n2\\n3'\nassert solution('5 10\\n4 1\\n4 2\\n3 5\\n3 6\\n5 4\\n5 6\\n7 2\\n7 3\\n6 8\\n8 1\\n9 2\\n10 3') == '4\\n2\\n3'\nassert solution('5 10\\n4 1\\n4 2\\n3 5\\n3 6\\n5 4\\n5 6\\n7 2\\n7 3\\n6 8\\n8 1\\n9 2\\n10 3') == '4\\n2\\n3'"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 3\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n6\\n8\\n-1\\n9\\n4\"\n\"\"\"\n\nimport sys\n\nn, q = [int(i) for i in input().split()]\nd = {}\nfor i in range(1, n + 1):\n    d[i] = [int(i) for i in input().split()]"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2 100\") == \"NO\"\nassert solution(\"4 3 2 8\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"YES\"\nassert solution(\"101 101 101 3\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\n\"\"\"\n\nfrom itertools import combinations\nfrom functools import reduce\n\nt = int(input())\nfor i in range(t):\n    a,b,c,n = map(int, input().split())\n    if n - a - b == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\\nYES\\nNO\\nNO\\nYES\"\n\"\"\"\n\n\nt = int(input().strip())\nfor _ in range(t):\n    a,b,c,n = list(map(int, input().strip().split()))\n    A = n//a\n    B = n//b\n    C = n//c\n    print(\"YES\" if A*b==B*c and A*c==B*a and A==B==C else \"NO\")\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"YES\"\nassert solution(\"101 101 101 3\") == \"YES\"\n\"\"\"\n\nimport sys\nimport os\nfrom io import StringIO\nfrom io import BytesIO\nimport tempfile"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n\n\"\"\"\n\n\nt = int(stdin.readline().strip())\nwhile t!= 0:\n    a, b, c, n = [int(x) for x in stdin.readline().split()]\n    if (n - a - b - c) % 3 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    t -= 1"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"NO\"\nassert solution(\"101 101 101 3\") == \"YES\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == 'YES'\n\n-----\n\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n---\n\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n---\n\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n---\n\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n---\n\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n---\n\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n---\n\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n---\n\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n---\n\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n---\n\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n---\n\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n---\n\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n---\n\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n---\n\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\n\n3 2 1 100000000"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 2 1\") == \"YES\"\n\"\"\"\n\nimport os\nfrom sys import stdin\nfrom typing import List\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"3 4 6 5\"\nassert solution(\"5 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\") == \"3 3\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n1 2 3 4') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\nassert solution('4 5\\n1 2 3 4 1') == '9 8 12 6 8'\nassert solution('2 10\\n2 1 5 3 5') == '9 8 12 6 8'\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n1 2 3 4') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\nassert solution('2 10\\n1 1 1 1 2 2 2 2 2 2') == '0 8'\nassert solution('2 10\\n2 2 2 2 2 2 2 2 2 2 2') == '8 0'\n\n\"\"\"\n\nimport collections\nfrom typing import List"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1 2 3 4\\n\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\\n\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\\n\") == \"3 3\"\nassert solution(\"4 4\\n1 2 3 4\\n\") == \"3 4 6 5\"\nassert solution(\"4 4\\n2 1 5 3 5\\n\") == \"9 8 12 6 8\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n1 2 3 4') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\n\n\"\"\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n1 2 3 4') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 6 5\") == \"3 4 6 5\"\nassert solution(\"2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\") == \"3 3\"\nassert solution(\"1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\nassert solution(\"1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1 2 3 4\\n\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\\n\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\\n\") == \"3 3\"\nassert solution(\"4 5\\n1 1 1 1 2 2 2 2 2 2\\n\") == \"3 3\""
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 2\\n2 3\\n3 4\\n1 4\\n2 2') == 'NO'\nassert solution('10 5\\n1 2\\n1 3\\n2 4\\n2 5\\n4 5\\n4 6\\n5 7\\n6 7\\n1 8\\n2 6\\n3 7') == 'NO'\nassert solution('8 7\\n2 5\\n2 6\\n3 7\\n4 7\\n5 7\\n7 7\\n1 7\\n3 7\\n7 7\\n1 1\\n2 2\\n1 2') == 'YES'"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\nassert solution(\"4 3\\n1 2\\n2 3\\n2 4\") == \"YES\\nNO\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nassert solution('10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nassert solution('7 7\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nassert solution('7 7\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nassert solution('10 7\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(expected_result)\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\nimport collections\n\nimport sys\nsys.path.append(\"../\")\n\nfrom lib.tree.Tree import Tree\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 2\\n3 4\\n2 3\\n3 4\\n1 4\\n1 2\\n2 4\\n1 3\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n2 4\\n3 4\\n2 3\\n3 2\\n1 4\\n1 2\\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\n\n\"\"\"\n\nimport sys\n\nimport unittest\n\nsys.path.append('../')\n\nfrom tree.utils.utils import Utils\n\nclass TestUtils(unittest.TestCase):\n\n    def test_remove_duplicates_on_list(self):\n        a = [1, 2, 2, 3, 5, 6, 7, 8, 8, 8, 10]\n        b = [1, 2, 2, 3, 5, 6, 7, 8, 8, 10]\n        Utils.remove_duplicates(a)\n        self.assertEqual(a, b)\n\n    def test_remove_duplicates_on_set(self):\n        a = {1, 2, 2, 3, 5, 6, 7, 8, 8, 8, 10}\n        b = {1, 2, 2, 3, 5, 6, 7, 8, 10}\n        Utils.remove_duplicates(a)\n        self.assertEqual(a, b)\n\n    def test_remove_duplicates_on_dict(self):\n        a = {1: 1, 2: 2, 2: 2, 3: 3, 5: 5, 6: 6, 7: 7, 8: 8, 8: 8, 8: 10}\n        b = {1: 1, 2: 2, 2: 2, 3: 3, 5: 5, 6: 6, 7: 8, 8: 10}\n        Utils.remove_duplicates(a)\n        self.assertEqual(a, b)\n\n    def test_remove_duplicates_on_tuple(self):\n        a = (1, 2, 2, 3, 5, 6, 7, 8, 8, 8, 10)\n        b = (1, 2, 2, 3, 5, 6, 7, 8, 10)\n        Utils.remove_duplicates(a)\n        self.assertEqual(a, b)\n\n    def test_get_set_of_paths_for_tree_without_path(self):\n        g = [['1', '2'], ['1', '3']]\n        tree = {'1': {'2'}, '2': {'1', '3'}, '3': {'2'}}\n        Utils.get_set_of_paths_for_tree(tree, g)\n        self."
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\n1 2\\n2 3\\n3 4\\n4 1\\"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\"\nassert solution(\"5\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\"\nassert solution(\"4\\n6\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"NO\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 2\\n1 3\\n1 4\\nYES\"\n\"\"\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\n\"\"\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\\nYES\\n1 2\\n1 3\\n1 4\"\n\n\"\"\""
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\"\n\"\"\"\nimport heapq"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\"\nassert solution(\"2\\n1\\n1\\n1\\n1\") == \"YES\\n1 1\"\n\"\"\""
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\") == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\n\n\"\"\"\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    roads = []\n    for j in range(n):\n        for k in range(j+1, n):\n            roads.append((j, k))\n    \n    roads = list(set(roads))\n    roads.sort(key=lambda x: (x[0], x[1]))\n    \n    for road in roads:\n        if a[road[0]]!= a[road[1]]:\n            print('NO')\n            break\n    else:\n        print('YES')\n        for road in roads:\n            print(road[0]+1, road[1]+1)\n    print()\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\nassert solution('4\\n3\\n1 2 3\\n4\\n1 1 1\\n1 2\\n1 3\\n') == 'YES\\n1 2\\n1 3\\n1 4\\n'\nassert solution('4\\n3\\n1 2 2\\n4\\n1 1 1\\n1 2\\n1 3\\n') == 'YES\\n1 2\\n1 3\\n1 4\\n'\nassert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\nassert solution('4\\n3\\n1 2 2\\n4\\n1 1 1\\n1 2\\n1 3\\n') == 'YES\\n1 2\\n1 3\\n1 4\\n'\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11011010\") == \"01011110\"\nassert solution(\"11101101\") == \"0101111\"\nassert solution(\"1111100\") == \"0011111\"\nassert solution(\"11111010\") == \"01111110\"\n\nassert solution(\"11101101\") == \"0101111\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11010') == '011110'\nassert solution('11110') == '11111'\n\"\"\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11101010\") == \"01111010\"\nassert solution(\"11100110\") == \"01111010\"\nassert solution(\"11101010\") == \"01111010\"\nassert solution(\"11111010\") == \"01111010\"\nassert solution(\"11111011\") == \"01111011\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11011010\") == \"011110\"\nassert solution(\"1111100\") == \"1111100\"\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom typing import List, Tuple, Dict\n\nimport utils\n\n\n@dataclass\nclass Case:\n    string: str\n    length: int\n    moves: int\n    expect: str\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11101010') == '01011110'\nassert solution('1111100') == '0101111'\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11011010\") == \"011110\"\nassert solution(\"1111100\") == \"0011111\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11011010\") == \"011110\"\nassert solution(\"1111100\") == \"1110110\"\nassert solution(\"1110110\") == \"1110110\"\nassert solution(\"1110111\") == \"1111110\"\n\nassert solution(\"11101110\") == \"11101110\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11101010') == '01111010'\nassert solution('11011010') == '01011110'\nassert solution('1111100') == '0011111'\n\n\n\n\n'''"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11101110') == '0111111'\nassert solution('1101110') == '0111110'\nassert solution('11100110') == '01111110'\n\"\"\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11011010\") == \"0111010\"\nassert solution(\"1111100\") == \"0011111\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9''') == '3\nassert solution('''5 1\n29 30\n30 30\n29 29\n28 30\n30 30''') == '3\nassert solution('''6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3''') == '4\nassert solution('''5 1\n28 30\n30 30\n29 29\n28 30\n30 30''') == '4\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_str_1) == solution(test_str_2)\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n1 4 7\"\n\"\"\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\n\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4\"\n\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\""
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3\\n1 4 7'\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == '3\\n1 2 4'\n\"\"\""
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == '3\\n1 4 7\\n'\n\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == '4\\n1 3 5 6\\n'\n\n\"\"\"\n\nfrom collections import defaultdict\nimport sys\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3\\n1 4 7'\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == '3\\n1 2 4'\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == '4\\n1 3 5 6'\n\n-----Explanation-----\nThe optimal solution is to remove segments $4$ and $6$ since $[1, 2, 3]$ and $[2, 3]$ contain all bad points.\n\nOther optimal solutions are to remove segments $1$ and $2$ (since $[7, 8]$ and $[8, 9]$ contain all bad points), and segments $3$ and $4$ (since $[9, 11]$ and $[7, 9]$ contain all bad points).\n\n\"\"\""
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n1 4 7\\n\", \"case1\"\nassert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n1 2 4 7\\n\", \"case2\"\nassert solution(\"7 2\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n29 29\\n28 30\\n30 30\\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == 3\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == 19\nassert solution(\"2\\n2 1\\n-3 0\") == 0\n\"\"\""
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 2 1\\n1 4 2 3 5\") == \"19\"\n\"\"\""
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3') == '3'\nassert solution('3\\n1 3 2\\n-100 2 3') == '3'\nassert solution('5\\n2 1 4 3 5') == '19'\nassert solution('5\\n2 1 4 3 5') == '19'"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 3 2\\n-100 2 3') == '3'\n\nassert solution('5\\n2 1 4 3 5\\n2 2 2 3 4') == '19'"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1 3 2\n-100 2 3''') == 3\nassert solution('''5\n2 1 4 3 5\n2 2 2 3 4''') == 19\nassert solution('''5\n2 1 4 3 5\n-100 2 3''') == 0\n\nprint(solution(stdin.strip()))\n\n'''\nn = int(input())\nx = list(map(int, input().split()))\nv = list(map(int, input().split()))\n\nmin_ = [0]*(n-1)\nfor i in range(n-1):\n    if x[i] < x[i+1]:\n        min_[i] = v[i]\n    else:\n        min_[i] = v[i+1]\n\nd = 0\nfor i in range(n-1):\n    d += (x[i] - x[i+1] + 1)*min_[i]\n\nprint(d)\n'''"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1\\n-3 0') == '0'\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3') == '3'\nassert solution('5\\n2 1 4 3 5\\n2 2 2 3 4') == '19'\nassert solution('2\\n2 1\\n-3 0') == '0'\n\n\"\"\"\n\nn = int(input())\nx = list(map(int, input().split()))\nv = list(map(int, input().split()))\nd = [0] * n\n\nfor i in range(1, n):\n    d[i] = min(d[i], d[i - 1] + abs(x[i] - x[i - 1]))\n    d[i] = min(d[i], d[i - 1] + abs(x[i] - x[i - 1]) * v[i - 1])\n\nprint(sum(d))\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2 3 4\") == \"19\"\nassert solution(\"1 2 3 4\") == \"4\"\n\"\"\"\n\nfrom collections import deque\nimport sys\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 4 3 5\") == \"19\"\nassert solution(\"2 2 2 3 4\") == \"14\"\nassert solution(\"3 1 2\") == \"6\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 -3 0') == '0'\nassert solution('3 1 2') == '0'\nassert solution('5 1 2 3 4') == '0'\nassert solution('2 1 -3 0') == '0'\n\nassert solution('3 2 1') == '0'\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n\nprint(solution(stdin))\n\n\n\n\n\"\"\""
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == '21 7 15 21 3'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str([\n    [1, 2, 1],\n    [3, 2, 3],\n    [2, 4, 1],\n    [4, 5, 2],\n    [5, 7, 4],\n    [3, 6, 2],\n    [5, 2, 3, 4, 1],\n])) == '21 7 15 21 3'\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n\"\"\"\n\nfrom collections import defaultdict, deque\nimport sys\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\\n\") == \"21 7 15 21 3\"\n\"\"\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\n\"\"\") == '21 7 15 21 3'\n\nassert solution(\"\"\"\n1 2\n1 2\n\"\"\") == '0 0'\n\"\"\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 1') == '3'\nassert solution('1 2 1\\n2 3 2') == '3'\nassert solution('1 2 1\\n2 3 2\\n3 4 2') == '3'\n'''"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1') == '21 7 15 21 3'\n\nassert solution('1 2\\n2 3 2\\n1 3 2') == '0 0'\n\nassert solution('3 3\\n1 2 1\\n2 3 2\\n1 3 2') == '1 3 3'\n\n\n'''\nfrom collections import deque"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\\n\") == \"YES\"\n\nassert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\\n\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\") == \"YES\"\nassert solution(\"3\\n1 2 4\\n4\\n1 3 4 4\") == \"YES\"\nassert solution(\"3\\n1 2 4\\n4\\n1 3 4 4\") == \"NO\"\nassert solution(\"3\\n1 2 4\\n4\\n1 3 4 4\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 2\") == \"YES\"\nassert solution(\"4\\n5 5 5 5\") == \"YES\"\nassert solution(\"3\\n1 2 4\") == \"NO\"\nassert solution(\"1\\n100\") == \"YES\"\nassert solution(\"5\\n1 2 2\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2 4\n4\n1 3 4 4\n1\n100''') == 'YES'\nassert solution('''2\n1 2 4\n4\n1 3 4 4\n1\n100''') == 'YES'\nassert solution('''1\n1 2 4\n4\n1 3 4 4\n1\n100''') == 'NO'\nassert solution('''1\n1 2 2\n2\n1 3 4 4\n1\n100''') == 'NO'\nassert solution('''1\n1 2 2\n2\n1 3 4 4\n1\n100''') == 'NO'"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\\n') == \"YES\"\nassert solution('3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\\n') == \"NO\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 2\\n4\\n5 5 5 5') == 'YES'\nassert solution('3\\n1 2 4\\n4\\n1 3 4 4') == 'NO'\nassert solution('1\\n100') == 'YES'\nassert solution('5\\n1 2 2\\n4\\n1 3 4 4') == 'NO'\nassert solution('5\\n1 2 2\\n4\\n1 3 4 4') == 'NO'\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n    \"\"\") == \"YES\"\n\nassert solution(\"\"\"\n5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n    \"\"\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\") == \"YES\"\nassert solution(\"3\\n1 2 2\\n4\\n1 3 4 4\") == \"NO\"\nassert solution(\"3\\n1 2 4\\n4\\n1 3 4 4\") == \"YES\"\nassert solution(\"1\\n100\") == \"YES\"\nassert solution(\"5\\n1 2 2\\n4\\n5 5 5 5\") == \"NO\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\") == \"YES\"\nassert solution(\"3\\n1 2 2\\n4\\n1 3 4 4\") == \"NO\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(expected_result)\n\n\"\"\"\n\nt = int(input())\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '4 4'\n) == '12'\nassert solution(\n    '4 5'\n) == '11'\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4 1010 1111') == '12'\nassert solution('4 5 10101 11101') == '11'\n\n\"\"\""
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1010\\n1101\\n\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\\n\") == \"11\"\n\"\"\""
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\n\"\"\"\n\nfrom operator import lshift, rshift\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4') == '12'\nassert solution('4 5') == '11'\nassert solution('4 10') == '8'\nassert solution('5 9') == '11'\n\"\"\"\n\nfrom typing import List\n\nMOD = 10 ** 9 + 7\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1010\\n1101\\n\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\\n\") == \"11\"\n\n\n'''\n\n\nimport sys\nimport itertools\n\nstdin = sys.stdin\n\nn, m = [int(x) for x in stdin.readline().split()]\na = int('1' + '0' * n, 2)\nb = int('1' + '0' * m, 2)\nans = 0\nwhile b > 0:\n    ans = (ans + a & b) % (1e9+7)\n    b = int(str(b) + '0', 2)\n    a = int(str(a) + '0', 2)\n    b //= 2\nprint(ans)\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2') == 'NO'\nassert solution('1\\n2') == 'NO'\nassert solution('1\\n2\\n') == 'NO'\nassert solution('2\\n1') == 'NO'\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2') == 'NO'\nassert solution('8\\n6') == '2 4 1 5'\nassert solution('10\\n10') == 'NO'\nassert solution('10\\n8') == '2 4 6 8 1 3 5 11'\nassert solution('1\\n1') == 'NO'\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == 'NO'\nassert solution('6') == 'YES\\n2 4 1 5'\nassert solution('8') == 'NO'\nassert solution('10') == 'YES\\n2 4 6 8 1 3 5 11'\nassert solution('2') == 'YES\\n2 4 1 5'\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == 'YES'\nassert solution('6') == 'NO'\nassert solution('8') == '2 4 1 5'\nassert solution('10') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n6\") == \"NO\"\nassert solution(\"2\\n8\") == \"YES\\n2 4 1 5\"\nassert solution(\"8\\n10\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data_1) == test_result_1\n\"\"\""
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'NO'\nassert solution('3') == 'YES'\nassert solution('2') == 'YES'\nassert solution('1') == 'NO'\nassert solution('0') == 'NO'\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == 'NO'\nassert solution('6') == 'YES\\n2 4 1 5'\nassert solution('8') == 'NO'\nassert solution('10') == 'YES\\n2 4 6 8 1 3 5 11'"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n6\") == \"YES\\n2 4 1 5\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == 'YES'\nassert solution('8') == 'NO'\nassert solution('6') == '2 4 1 5'\nassert solution('10') == 'NO'\nassert solution('20') == '2 4 6 8 1 3 5 11'\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3\\n1 1 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1 1 1\\n3') == '5'\nassert solution('9\\n3 1 4 1 5 9 2 6 5') == '5'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 2\") == \"1\"\nassert solution(\"3\\n1 1 2\") == \"0\"\nassert solution(\"5\\n1 1 1 1 1\") == \"0\"\nassert solution(\"3\\n1 2\") == \"0\"\nassert solution(\"8\\n8 7 6 5 4 3 2 1\") == \"0\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\\n8\\n8 7 6 5 4 3 2 1\"\n) == \"5\\n1\\n0\\n4\\n0\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n3') == '0'\nassert solution('1\\n2\\n3\\n4') == '0'\nassert solution('1\\n2\\n3\\n4\\n5') == '0'\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 1 4 1 5 9 2 6 5\") == \"5\"\nassert solution(\"3\\n1 1 2\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\nassert solution(\"3\\n1 1 2\") == \"0\"\nassert solution(\"5\\n1 1 1 1 1\") == \"0\"\nassert solution(\"8\\n8 7 6 5 4 3 2 1\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"1\"\nassert solution(\"4\\n1 2 3 4\") == \"0\"\nassert solution(\"5\\n1 1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 1 1\") == \"1\"\nassert solution(\"3\\n1 2 2\") == \"0\"\n\nprint(\"Hooray!\")\n\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3\\n1 1 2') == '1'\nassert solution('4\\n1 1 2') == '0'\nassert solution('7\\n3 4 1 2 3 5 1 1') == '0'\nassert solution('8\\n8 7 6 5 4 3 2 1') == '0'\n\"\"\"\nimport sys\n\ntest_cases = int(sys.stdin.readline().rstrip())\n\nfor _ in range(test_cases):\n    n = int(sys.stdin.readline().rstrip())\n    a = list(map(int, sys.stdin.readline().rstrip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(a[i:j+1]) == j - i + 1:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n''') == '''5\n1\n0\n4\n0\n'''\nprint(solution(stdin))\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\") == \"3\"\n\"\"\"\n\n\nfrom bisect import bisect\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"7\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"7\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"7\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"7\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '1'\nassert solution('3\\n') == '2'\nassert solution('4\\n') == '2'\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '3', 'Test 1'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '4', 'Test 2'\n\"\"\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2') == ''\nassert solution('1 2\\n2 3') == ''\nassert solution('1 2\\n2 3\\n4 3') == ''\nassert solution('2 3\\n2 4') == ''\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == \"3\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == \"2\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == '3\\n4\\n2\\n7'\n\"\"\"\n\nfrom sys import stdin\nfrom collections import defaultdict, deque\nimport heapq"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\\n4\\n2\\n7\"\n\"\"\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('foo') == 'foo'\nassert solution('x') == 'x'\nassert solution('x y z') == 'xyz'\n\"\"\"\n\nimport sys\nimport random\n\nsys.stdin = open(\"test_files/Y12R5P1/A.in\")\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\") == \"3\"\nassert solution(\"4\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\") == \"4\"\nassert solution(\"4\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\") == \"2\"\nassert solution(\"4\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\") == \"7\"\n\"\"\"\n\n\n\nimport sys\nimport bisect"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\""
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('23 55\\n23 0\\n0 1\\n4 20\\n23 59') == '5\\n60\\n1439\\n1180\\n1'\n\"\"\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\""
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('23 55\\n23 0\\n0 1\\n4 20\\n23 59') == '5\\n60\\n1439\\n1180\\n1'\n\"\"\""
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('23 55') == '5'\nassert solution('23 0') == '60'\nassert solution('0 1') == '1439'\nassert solution('4 20') == '1180'\nassert solution('23 59') == '1'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\nprint(solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\"))\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LURD\") == \"1 4\"\nassert solution(\"RRUDU\") == \"3 4\"\nassert solution(\"LLDDR\") == \"3 4\"\nassert solution(\"LLRDD\") == \"1 4\""
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('LRUD') == 'L1R2U3D'\nassert solution('LLDDR') == 'LLDDR'\nassert solution('RRUDU') == 'RRUDU'\nassert solution('RDRUDU') == 'RDRUDU'\nassert solution('RRUDDRUDRDUDRLDDURDRDDRDRUDRDRDRLDLDDRLUDDRDRDRDDRUDRDRDRLDLDDURDRDRDRLDUDRLDLUDDRDRDRDRDDRLUDDRDRDRDDRUDRDRDRDRDRDRDRDDRDDRDRDRDRDDRDRDRDRDDRDRDDRDRDDRDRDDRDDRDRDRDDRDRDDRDDRDRDDRDRDDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRDDRDRDRDRD"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('LRUD') == 'URD'\nassert solution('LURDLRUDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDR"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LURD\") == \"1 4\"\nassert solution(\"RRUDU\") == \"3 4\"\nassert solution(\"LLDDR\") == \"-1\"\n\n-----Explanation-----\nTest case 1: There is no substring that can be removed to make the robot end its path at the same point.\n\nTest case 2: The substring can be removed. The endpoint of the robot's path changes to $(1, 4)$.\n\nTest case 3: There is no substring that can be removed to make the robot end its path at the same point.\n\nTest case 4: The substring can be removed. The endpoint of the robot's path changes to $(3, 4)$.\n\"\"\""
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"LRUD\") == \"UD\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"LRUD\") == '1 2'\nassert solution(\"LURD\") == '1 4'\nassert solution(\"RRUDU\") == '3 4'\nassert solution(\"LLDDR\") == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"LRUD\") == \"LURD\"\nassert solution(\"LRUDU\") == \"LURDRD\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"LRUD\") == \"LR\"\nassert solution(\"LLDDR\") == \"LR\"\n\nassert solution(\"LLDDDRUDRD\") == \"LLDR\"\n\nassert solution(\"UUDRRDRDDRUDRRDRDRRRRRRDRRDRRRDRURDRDRDRRRDRDRUDRDRD\") == \"DRDDRRDRDRDRRDRDDRRRRDRDDRRRDRDRRDRRRDDRDRDRDDRDRRDRDRDRDRDDRRDRDRDRDRRRRRRRRRRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"LRUD\") == \"LR\"\nassert solution(\"RRUDU\") == \"RRU\"\n\"\"\"\n\nimport sys\nimport math\nfrom math import inf"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5\\n2 1 5 4 3\") == \"3\\n1\\n0\\n2\"\n\"\"\"\n\n\nfrom typing import Tuple, List, Set\n\nstdin = \"\"\"\n3\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n4\\n1\\n3\") == 3\nassert solution(\"5\\n1\\n4\\n2\\n5\\n3\") == 0\nassert solution(\"7\\n4\\n2\\n4\\n1\\n4\\n3\") == 2\nassert solution(\"7\\n5\\n2\\n4\\n3\\n1\\n5\\n3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5\\n2 1 5 4 3\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"4\\n1 1 1 3\") == \"2\"\n\n\n\n\n\n\"\"\""
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5\\n2 1 5 4 3\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"4\\n1 1 1 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n4 2 4 1 4 3 4') == '3'\nassert solution('5\\n2 1 5 4 3') == '1'\nassert solution('1\\n1') == '0'\nassert solution('4\\n1 1 1 3') == '2'\n\n\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5\\n2 1 5 4 3\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"4\\n1 1 1 3\") == \"2\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n1 1 1 3\\n2\") == \"3\"\n\"\"\"\nfrom typing import List\nimport itertools\nfrom collections import Counter\n\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solve(self, stdin: str) -> str:\n        \"\"\"\n        >>> solution(\"4\\n5\\n1 1 1 3\\n2\")\n        '3'\n        >>> solution(\"5\\n4\\n1 1 1 3\\n2\")\n        '1'\n        >>> solution(\"7\\n4\\n2 1 3 2 4 4\\n2\")\n        '2'\n        \"\"\"\n        n = int(stdin.split('\\n')[0])\n        a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n        # for x in range(n):\n        #     print(x, a[x])\n\n        a.sort()\n\n        # for x in range(n):\n        #     print(x, a[x])\n\n        s = Counter(a)\n        # for x in range(n):\n        #     print(x, s[x])\n\n        max_v = max(s.values())\n        # print(max_v)\n\n        max_c = max_v\n        min_c = 1\n\n        # print(max_c, min_c)\n\n        ans = max_c\n        while max_c >= min_c:\n            s_c = min_c + (max_c - min_c) // 2\n            s_c_v = 0\n            # print(s_c)\n\n            for k, v in s.items():\n                # print(k, v)\n\n                if k <= s_c:\n                    s_c_v += v\n                else:\n                    break\n\n            if s_c_v >= max_v:\n                # print(s_c_v)\n\n                ans = s_c\n                max_c = s_c - 1\n            else:\n                min_c = s_c + 1\n        return str(ans)\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\\n\") == \"3\\n1\\n0\\n2\"\nassert solution(\"4\\n2\\n1 1 1 3\\n4\\n1 1 1 3\") == \"2\\n1\\n0\\n2\"\nassert solution(\"4\\n1\\n1\\n3\\n1 1 1 3\\n4\\n1 1 1 3\") == \"2\\n1\\n0\\n2\"\n\"\"\"\n\nimport sys\nimport numpy as np\nfrom typing import List\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5 2 1 5 4 3\") == \"1\"\nassert solution(\"1 1 1 3\") == \"0\"\nassert solution(\"4\") == \"2\"\n\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '0'\nassert solution('2\\n2\\n2\\n2\\n2\\n') == '2'\nassert solution('2\\n3\\n3\\n3\\n3\\n') == '1'\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\""
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n1 4\") == \"12\"\nassert solution(\"2\\n1 2\") == \"0\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n1 4\\n2 4\\n3 4\") == \"15\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''8\n9 4 1 7 10 1 6 5\n1 2\n2 3\n1 4\n1 5\n5 6\n5 7\n5 8''') == '121'\nassert solution('''1\n1337''') == '0'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\nprint('The local tests are done. Try Solution online first.')"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 3\\n1 2\\n1 3\\n1 4\\n3 4\") == \"4\\n\"\nassert solution(\"1 1\\n1 2\") == \"0\\n\"\nassert solution(\"2 2\\n1 2\") == \"0\\n\"\nassert solution(\"5 1 2 5 3\\n1 2\\n2 5\\n3 5\\n4 5\") == \"12\\n\"\nassert solution(\"7 1 2 5 3 6 4 7\\n1 2\\n2 5\\n3 5\\n4 5\\n5 6\\n6 7\") == \"21\\n\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\n\"\"\""
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\n\nfrom sys import stdin\n\nfrom typing import Dict\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\nassert solution(\"1 1337\\n\") == \"0\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\n\n-------\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        pass\n\nassert Solution().solve(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert Solution().solve(\"1\\n1337\") == \"0\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2 1 3\") == \"6\"\nassert solution(\"10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"18\"\nassert solution(\"5 10\\n20 100 50 20 100500\") == \"0\"\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"8\"\n\n\n\"\"\"\n\n\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 1 3\") == \"6\"\nassert solution(\"10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"18\"\nassert solution(\"5 10\\n20 100 50 20 100500\") == \"0\"\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"8\"\n\nprint(\"Successfully solved.\")\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"0\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"5 10\") == \"11\"\nassert solution(\"8 8\") == \"1\"\nassert solution(\"4 3\") == \"0\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2 1 3\") == \"6\"\nassert solution(\"10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"18\"\nassert solution(\"5 10\\n20 100 50 20 100500\") == \"0\"\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"8\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"6\\n18\\n0\\n227\\n8\"\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"0\\n18\\n0\\n227\\n8\"\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"227\\n8\\n0\\n0\\n0\"\n\n\"\"\""
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 2 1 3\\n10 6') == '6'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9') == '6'\n\"\"\"\n\n\nimport collections\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 1 3\") == \"6\"\nassert solution(\"10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"18\"\nassert solution(\"5 10\\n20 100 50 20 100500\") == \"0\"\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"8\"\nassert solution(\"8 8\\n1 2 3 4 5 6 7 8\") == \"0\""
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1\\n2\\n2\\n3\\n3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"6\"\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"0\"\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"227\"\n\n-----Problem-----\n\nIn a forest, each rabbit has some color. Some subset of rabbits (possibly all of them) tell you how many other rabbits have the same color as them. Those answers are placed in an array.\n\nReturn the minimum number of rabbits that could be in the forest.\n\n-----"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1') == '2'\nassert solution('1 1 1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '2'\nassert solution('1 1') == '2'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"[1,2,3]\\n[1,1]\") == \"1\"\nassert solution(\"[1,2]\\n[1,2,3]\") == \"2\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"1\n2\n3\n1\n2\n\n\"\"\") == \"1\"\nassert solution(\"\"\"1\n3\n2\n1\n2\n\n\"\"\") == \"2\"\nassert solution(\"\"\"1\n3\n1\n2\n\n\"\"\") == \"1\"\nassert solution(\"\"\"1\n1\n1\n2\n\n\"\"\") == \"1\"\nassert solution(\"\"\"2\n3\n1\n2\n\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"3 3 3\") == \"0\"\nassert solution(\"0 1 2\") == \"0\"\n\nassert solution(\"3 2 1\") == \"0\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"[1,2,3], [1,1]\") == 1\nassert solution(\"[1,2], [1,2,3]\") == 2\nassert solution(\"[1,2,3], [1,2]\") == 1\nassert solution(\"[1,2,3], [1,2,3]\") == 3\nassert solution(\"[1,2,3], [1,2,3,5]\") == 4\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3\\n1 1\\n') == '1'\nassert solution('1 2\\n1 1 3\\n') == '2'\nassert solution('1 2\\n1 2 3\\n') == '2'"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\") == \"1\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"3 3 3\") == \"0\"\nassert solution(\"1 3 3\") == \"1\"\nassert solution(\"10\") == \"0\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('1 1') == '1'\nassert solution('2 1') == '2'\nassert solution('1 2 3 4') == '2'\nassert solution('1 2 3 4 5') == '2'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1,2,3,1,1') == '1'\nassert solution('1,2,3,1,2') == '2'\nassert solution('1,2,3,1,2,3') == '2'\nassert solution('1,2,3,1,2,3,3') == '3'\nassert solution('1,2,3,1,2,3,3,3') == '3'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2,2\\n2,2\") == \"1\"\nassert solution(\"2,1\\n2,2\") == \"2\"\nassert solution(\"1,1\\n2,2\") == \"2\"\nassert solution(\"1,2\\n2,2\") == \"1\"\nassert solution(\"1,2\\n1,2\") == \"1\"\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == [1,3,3,1]\n\n\"\"\"\n\nimport unittest\nfrom typing import List, Set\n\n\nclass Solution:\n\n    \"\"\"\n    This is a common mathematical question that can be solved with the help of Pascal's triangle\n    Pascal's triangle is a triangle of numbers whose nth row is the sum of the previous row's n-1 and n+1 numbers.\n    \"\"\"\n\n    def pascal_triangle(self, index: int, memo: Set[int] = None) -> List[int]:\n\n        \"\"\"\n        Return a list with the first `index` elements of Pascal's triangle.\n\n        Pascal's triangle is a triangle of numbers whose nth row is the sum of the previous row's n-1 and n+1 numbers.\n        \"\"\"\n\n        if not index:\n            return []\n\n        if index == 1:\n            return [1]\n\n        if memo is None:\n            memo = set()\n\n        if index in memo:\n            return []\n\n        memo.add(index)\n\n        return self.pascal_triangle(index - 1, memo) + [1] + self.pascal_triangle(index - 1, memo)[: -1]\n\n\nclass TestSolution(unittest.TestCase):\n\n    def test_solution(self):\n\n        self.assertEqual(Solution().pascal_triangle(1), [1])\n        self.assertEqual(Solution().pascal_triangle(3), [1, 3, 3, 1])\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == [1, 3, 3, 1]\n\"\"\"\n\nfrom typing import List\n\nimport numpy as np\n\nfrom tools import timing\n\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        ans = [1]\n        for i in range(1, rowIndex + 1):\n            if i == 1:\n                ans.append(1)\n            else:\n                # base case\n                pre_ans = ans\n                cur_ans = [1]\n                for i in range(len(ans) - 1):\n                    cur_ans.append(pre_ans[i] + pre_ans[i + 1])\n                cur_ans.append(1)\n                ans = cur_ans\n        return ans\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\"\"\""
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n'''\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1,1]\n        row = [1, 1]\n        for i in range(2, rowIndex+1):\n            tmp = [1]\n            for j in range(1, len(row)-1):\n                tmp.append(row[j-1] + row[j])\n            tmp.append(1)\n            row = tmp\n        return row\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == [1, 4, 6, 4, 1]\n\nassert solution('5') == [1, 5, 10, 10, 5, 1]\n\nassert solution('6') == [1, 6, 15, 20, 15, 6, 1]\n\nassert solution('7') == [1, 7, 21, 35, 35, 21, 7, 1]\n\nassert solution('8') == [1, 8, 28, 56, 70, 56, 28, 8, 1]"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\n\"\"\"\n\nimport math\n\nclass Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        tmp = [1] * (rowIndex + 1)\n        for i in range(2, rowIndex + 1):\n            for j in range(i - 1, 0, -1):\n                tmp[j] = tmp[j - 1] + tmp[j]\n        return tmp"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == [1, 4, 6, 4, 1]\nassert solution('3') == [1, 3, 3, 1]\nassert solution('4') == [1, 4, 6, 4, 1]\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '1 3 3 1'\nassert solution('5') == '1 4 6 4 1'\n\"\"\"\nimport math\n\nimport numpy as np\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == [1,3,3,1]\n'''\n\nfrom typing import List\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        elif rowIndex == 1:\n            return [1, 1]\n        else:\n            row = [1, 1]\n            for i in range(2, rowIndex+1):\n                newRow = []\n                newRow.append(1)\n                for j in range(1, i):\n                    newRow.append(row[j-1]+row[j])\n                newRow.append(1)\n                row = newRow\n            return row\n\n\n\n\n\n\ns = Solution()\nprint(s.getRow(3))"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == [1, 3, 3, 1]\nassert solution('4') == [1, 4, 6, 4, 1]\nassert solution('5') == [1, 5, 10, 10, 5, 1]\n\"\"\"\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n\"\"\""
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n!= 0:\n            n = n & n-1\n            count += 1\n        return count"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        for i in range(32):\n            if n & (1 << i):\n                count += 1\n        return count\n        \n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n'''\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        \n        for i in range(32):\n            if n & (1 << i):\n                count += 1\n            \n        return count\n\nsolution = Solution().hammingWeight\n\nassert solution(11) == 3\nassert solution(128) == 1\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\"\"\"\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0000000000000000000000001011') == 3\nassert solution('11111111111111111111111111111101') == 31\n\"\"\"\n\n\nclass Solution:\n    def hammingWeight(self, n):\n        # return bin(n).count(\"1\")\n        return bin(n).count(\"1\")\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\nassert solution(\"00000000000000000000000010110110\") == 3\nassert solution(\"10010011111111111111111111111110111\") == 25\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count(\"1\")\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(0b1101) == 4\nassert solution(0b11011111111111111111111111101) == 30\n\"\"\"\n\nimport unittest\nfrom typing import List\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            if n & 1:\n                count += 1\n            n = n >> 1\n\n        return count\n\n\nclass TestSolution(unittest.TestCase):\n\n    def test_first_example(self):\n        self.assertEqual(solution(0b1101), 4)\n\n    def test_second_example(self):\n        self.assertEqual(solution(0b11011111111111111111111111101), 30)\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1101') == 3\nassert solution('1100') == 1\nassert solution('1111') == 31\nassert solution('101010') == 10\n\"\"\"\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')\n\n\nclass Solution2:\n    def hammingWeight(self, n: int) -> int:\n        res = 0\n        while n:\n            res += 1\n            n &= n - 1\n        return res\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123\") == \"124\"\nassert solution(\"4123\") == \"4124\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123\") == \"124\"\nassert solution(\"456\") == \"457\"\nassert solution(\"9\") == \"10\"\nassert solution(\"0\") == \"1\"\nassert solution(\"-1\") == \"0\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('[1, 2, 3]') == '[1, 2, 4]'\nassert solution('[4, 3, 2, 1]') == '[4, 3, 2, 2]'\nassert solution('[1, 2, 9, 9]') == '[1, 2, 0, 0]'\nassert solution('[0]') == '[1]'\nassert solution('[]') == '[]'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123\") == \"124\"\nassert solution(\"987\") == \"988\"\nassert solution(\"932\") == \"933\"\nassert solution(\"0\") == \"1\"\nassert solution(\"1111\") == \"1112\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1,2,3\") == \"1,2,4\"\nassert solution(\"4,3,2,1\") == \"4,3,2,2\""
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123\") == \"124\"\nassert solution(\"9999\") == \"1000\"\nassert solution(\"4999\") == \"5000\"\n\n\"\"\""
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"11\"\nassert solution(\"0\") == \"1\"\nassert solution(\"1234\") == \"1235\"\nassert solution(\"54321\") == \"5432\"\nassert solution(\"9\") == \"10\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('123') == '124'\nassert solution('999') == '1000'\nassert solution('9') == '10'\nassert solution('88') == '89'\nassert solution('0000') == '0001'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123\") == \"124\"\nassert solution(\"9\") == \"1\"\nassert solution(\"1\") == \"2\"\nassert solution(\"9999\") == \"1\"\nassert solution(\"0\") == \"1\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('23') == '24'\nassert solution('432') == '433'\nassert solution('77') == '78'\nassert solution('8') == '9'\nassert solution('8342') == '8343'\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"4\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"2 2\") == \"4\"\n\n----\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"4\"\n\"\"\"\n\nimport unittest\nfrom collections import deque\nimport heapq\n\nclass Solution:\n    def __init__(self, A, B):\n        self.A = A\n        self.B = B\n\n    def solution(self, stdin: str) -> str:\n        max_1 = max(self.A+self.B, self.A-self.B, self.A*self.B)\n        return str(max_1)\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution(3, 1)\n\n    def test_solution(self):\n        self.assertEqual(self.solution.solution(stdin), \"4\")"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n') == 3\n\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1') == '4'\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3, 1) == 4\nprint(solution(3, 1))\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"8\"\nprint(\"All tests passed.\")"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1') == '4'\nassert solution('6 7') == '21'\nassert solution('7 0') == '7'\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_expected"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n') == '4'\n\"\"\""
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == '3'\n\"\"\""
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\\n\") == 3\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\\n') == '3'\n\"\"\""
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == '3'\n\"\"\"\n\nn, d = map(int, input().split(' '))\nx, y = [], []\nfor _ in range(n):\n    xi, yi = map(int, input().split(' '))\n    x.append(xi)\n    y.append(yi)\n\nprint(sum(1 for xi, yi in zip(x, y) if abs(xi) + abs(yi) <= d))\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\n\"\"\""
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('2 3\\n 1 5') == '0'\nassert solution('2 3\\n 4 -5') == '0'\nassert solution('2 3\\n 2 4') == '0'\nassert solution('2 3\\n 1 4') == '1'\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12') == 'Yes'\nassert solution('10') == 'No'\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"100\") == \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\") == \"Yes\"\n\n-----\nf(12)=1+2=3. Since 12 is divisible by 3, 12 is a Harshad number.\n\n\"\"\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"15\") == \"No\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12') == 'Yes'\nassert solution('11') == 'No'\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12\\n') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 -1\") == \"12 8 10\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '3 5 -1'\n) == '12 8 10'\n\"\"\"\n\n\n\"\"\"\nimport sys\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N, *A = [int(x) for x in stdin.split()]\n        cost = []\n        for i in range(len(A)):\n            for j in range(i + 1, len(A)):\n                cost.append(abs(A[i] - A[j]))\n        return '\\n'.join([str(x) for x in sorted(cost)])\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n\n---\nIf you have another solution, feel free to submit a new solution as your answer.\nIf you have any questions, please ask before the session.\n\n'''\n\nimport sys\n\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().split()))\ncost = []\nfor i in range(1, N):\n    cost.append(abs(A[i-1] - A[i]))\ntotal_cost = sum(cost)\nfor i in range(N):\n    print(total_cost - cost[i] + abs(A[0] - A[i]))"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n\nfrom math import fsum"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3, [3, 5, -1]) == [12, 8, 10]\n\"\"\"\nimport collections\nimport sys\nimport typing\nimport unittest\n\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        pass\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n5 -1') == '12\\n8\\n10'\n\nfrom __future__ import annotations\n\nimport io\nfrom abc import ABC, abstractmethod\nfrom enum import Enum\nfrom typing import Any, List, Optional, Tuple, Union\n\nfrom src.tools import consume, read_line\n\n\nclass Direction(Enum):\n    UP = 0\n    DOWN = 1\n\n\nclass Line(Enum):\n    Y = 0\n    X = 1\n\n\nclass Point(ABC):\n\n    def __init__(self, line: Line, value: Optional[int]) -> None:\n        self._line = line\n        self._value = value\n\n    def __hash__(self) -> int:\n        return hash(self._line)\n\n    def __repr__(self) -> str:\n        return str(self._value)\n\n    @abstractmethod\n    def __eq__(self, other: Any) -> bool:\n        pass\n\n    @abstractmethod\n    def __lt__(self, other: Any) -> bool:\n        pass\n\n    @abstractmethod\n    def __add__(self, other: Any) -> Any:\n        pass\n\n    def _compare(self, other: Any) -> int:\n        if self._line == other._line:\n            return self._value - other._value\n        elif self._line == Line.X:\n            return self._value - other._line.value\n        else:\n            return self._line.value - other._value\n\n    def __gt__(self, other: Any) -> bool:\n        return not self < other\n\n    def __lt__(self, other: Any) -> bool:\n        return not self > other\n\n    def __ge__(self, other: Any) -> bool:\n        return self > other or self == other\n\n    def __le__(self, other: Any) -> bool:\n        return self < other or self == other\n\n\nclass Coordinate(Point):\n\n    def __init__(self, line: Line, value: Optional[int]) -> None:\n        super().__init__(line, value)\n\n    def __add__(self, other: Any) -> Any:\n        if isinstance(other, Direction):\n            return Coordinate(self._line, self._value + 1 if self._line == Direction.UP else self._value - 1)\n        return NotImplemented\n\n    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, Coordinate):\n            return self._line == other._line and self._value == other._value\n        return False\n\n    def __hash__(self) -> int:\n        return hash(self._line) * 37 + hash(self._value)\n\n    def __lt__(self, other: Any) -> bool:\n        return self._compare(other) < 0\n\n\nclass Spot(Coordinate):\n\n    def __init__(self, line: Line, value: Optional[int]) -> None:\n        super().__init__(line, value)\n\n    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, Spot):\n            return self._line == other._line and self._value == other._value\n        return False\n\n    def __hash__(self) -> int:\n        return super().__hash__()\n\n    def __lt__(self, other: Any) -> bool:\n        return self._compare(other) < 0\n\n\nclass Passenger(ABC):\n\n    def __init__(self, spots: Optional[List[Spot]] = None) -> None:\n        self._spots = spots or []\n\n    def __repr__(self) -> str:\n        return '\\n'.join(str(spot) for spot in self._spots)\n\n    def __eq__(self, other: Any) -> bool:\n        return isinstance(other, Passenger) and self._spots == other._spots\n\n    def __hash__(self) -> int:\n        return hash(tuple(self._spots))\n\n    def __lt__(self, other: Any) -> bool:\n        return self._spots < other._spots\n\n    def __le__(self, other: Any) -> bool:\n        return self._spots <= other._spots\n\n    def __gt__(self, other: Any) -> bool:\n        return self._spots > other._spots\n\n    def __ge__(self, other: Any) -> bool:\n        return self._spots >= other._spots\n\n    @abstractmethod\n    def __iadd__(self, other: Any) -> Any:\n        pass\n\n\nclass PassengerStart(Passenger):\n\n    def __init__(self, spots: Optional[List[Spot]] = None) -> None:\n        super().__init__(spots)\n\n    def __iadd__(self, other: Any) -> Any:\n        if isinstance(other, Passenger):\n            return self._spots + other._spots\n        elif isinstance(other, Direction):\n            return self._spots + [Spot(other, 0)]\n        else:\n            raise TypeError\n        return self\n\n\nclass PassengerEnd(Passenger):\n\n    def __init__(self, spots: Optional[List[Spot]] = None) -> None:\n        super().__init__(spots)\n\n    def __iadd__(self, other: Any) -> Any:\n        if isinstance(other, Passenger):\n            return self._spots + other._spots\n        elif isinstance(other, Direction):\n            return self._spots + [Spot(other, 1)]\n        else:\n            raise TypeError\n        return self\n\n\nclass NoPassenger(Passenger):\n\n    def __init__(self, spots: Optional[List[Spot]] = None) -> None:\n        super().__init__(spots)\n\n    def __iadd__(self, other: Any) -> Any:\n        if isinstance(other, Passenger):\n            return self._spots\n        elif isinstance(other, Direction):\n            return self._spots + [Spot(other, -1)]\n        else:\n            raise TypeError\n        return self\n\n\nclass PassengerHolder:\n\n    def __init__(self, passenger: Optional[Passenger] = None) -> None:\n        self._passenger = passenger or NoPassenger"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5 -1\") == \"12\\n8\\n10\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"b\") == \"consonant\"\nassert solution(\"c\") == \"consonant\"\nassert solution(\"d\") == \"consonant\"\nassert solution(\"e\") == \"vowel\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"b\") == \"consonant\"\nassert solution(\"e\") == \"vowel\"\nassert solution(\"i\") == \"vowel\"\nassert solution(\"o\") == \"vowel\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"b\") == \"consonant\"\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a') == 'vowel'\n\n-----Test Cases-----\n0. Test case 1\n1. Test case 2\n2. Test case 3\n3. Test case 4\n4. Test case 5\n5. Test case 6\n6. Test case 7\n7. Test case 8\n8. Test case 9\n9. Test case 10\n10. Test case 11\n11. Test case 12\n12. Test case 13\n13. Test case 14\n14. Test case 15\n15. Test case 16\n16. Test case 17\n17. Test case 18\n18. Test case 19\n19. Test case 20\n20. Test case 21\n21. Test case 22\n22. Test case 23\n23. Test case 24\n24. Test case 25\n25. Test case 26\n26. Test case 27\n27. Test case 28\n28. Test case 29\n29. Test case 30\n30. Test case 31\n31. Test case 32\n32. Test case 33\n33. Test case 34\n34. Test case 35\n35. Test case 36\n36. Test case 37\n37. Test case 38\n38. Test case 39\n39. Test case 40\n40. Test case 41\n41. Test case 42\n42. Test case 43\n43. Test case 44\n44. Test case 45\n45. Test case 46\n46. Test case 47\n47. Test case 48\n48. Test case 49\n49. Test case 50\n50. Test case 51\n51. Test case 52\n52. Test case 53\n53. Test case 54\n54. Test case 55\n55. Test case 56\n56. Test case 57\n57. Test case 58\n58. Test case 59\n59. Test case 60\n60. Test case 61\n61. Test case 62\n62. Test case 63\n63. Test case 64\n64. Test case 65\n65. Test case 66\n66. Test case 67\n67. Test case 68\n68. Test case 69\n69. Test case 70\n70. Test case 71\n71. Test case 72\n72. Test case 73\n73. Test case 74\n74. Test case 75\n75. Test case 76\n76. Test case 77\n77. Test case 78\n78. Test case 79\n79. Test case 80\n80. Test case 81\n81. Test case 82\n82. Test case 83\n83. Test case 84\n84. Test case 85\n85. Test case 86\n86. Test case 87\n87. Test case 88\n88. Test case 89\n89. Test case 90\n90. Test case 91\n91. Test case 92\n92. Test case 93\n93. Test case 94\n94. Test case 95\n95. Test case 96\n96. Test case 97\n97. Test case 98\n98. Test case 99\n99. Test case 100\n100. Test case 101\n101. Test case 102\n102. Test case 103\n103. Test case 104\n104. Test case 105\n105. Test case 106\n106. Test case 107\n107. Test case 108\n108. Test case 109\n109. Test case 110\n110. Test case 111\n111. Test case 112\n112. Test case 113\n113. Test case 114\n114. Test case 115\n115. Test case 116\n116. Test case 117\n117. Test case 118\n118. Test case 119\n119. Test case 120\n120. Test case 121\n121. Test case 122\n122. Test case 123\n123. Test case 124\n124. Test case 125\n125. Test case 126\n126. Test case 127\n127. Test case 128\n128. Test case 129\n129. Test case 130\n130. Test case 131\n131. Test case 132\n132. Test case 133\n133. Test case 134\n134. Test case 135\n135. Test case 136\n136. Test case 137\n137. Test case 138\n138. Test case 139\n139. Test case 140\n140. Test case 141\n141. Test case 142\n142. Test case 143\n143. Test case 144\n144. Test case 145\n145. Test case 146\n146. Test case 147\n147. Test case 148\n148. Test case 149\n149. Test case 150\n150. Test case 151\n151. Test case 152\n152. Test case 153\n153. Test case 154\n154. Test case 155\n155. Test case 156\n156. Test case 157\n157. Test case 158\n158. Test case 159\n159. Test case 160\n160. Test case 161\n161. Test case 162\n162. Test case 163\n163. Test case 164\n164. Test case 165\n165. Test case 166\n166. Test case 167\n167. Test case 168\n168. Test case 169\n169. Test case 170\n170. Test case 171\n171. Test case 172\n172. Test case 173\n173. Test case 174\n174. Test case 175\n175. Test case 176\n176. Test case 177\n177. Test case 178\n178. Test case 179\n179. Test case 180\n180. Test case 181\n181. Test case 182\n182. Test case 183\n183. Test case 184\n184. Test case 185\n185. Test case 186\n186. Test case 187\n187. Test case 188\n188. Test case 189\n189. Test case 190\n190. Test case 191\n191. Test case 192\n192. Test case 193\n193. Test case 194\n194. Test case 195\n195. Test case 196\n196. Test case 197\n197. Test case 198\n198. Test case 199\n199. Test case 200\n200. Test case 201\n201. Test case 202\n202. Test case 203\n203. Test case 204\n204. Test case 205\n205. Test case 206\n206. Test case 207\n207. Test case 208\n208. Test case 209\n209. Test case 210\n210. Test case 211\n211. Test case 212\n212. Test case 213\n213. Test case 214\n214. Test case 215\n215. Test case 216\n216. Test case 217\n217. Test case 218\n218. Test case 219\n219. Test case 220\n220. Test case 221\n221. Test case 222\n222. Test case 223\n223. Test case 224\n224. Test case 225\n225. Test case 226\n226. Test case 227\n227. Test case 228\n228. Test case 229\n229. Test case 230\n230. Test case 231\n231. Test case 232\n232. Test case 233\n233. Test case 234\n234. Test case 235\n235. Test case 236\n236. Test case 237\n237. Test case 238\n238. Test case 239\n239. Test case 240\n240. Test case 241\n241. Test case 242\n242. Test case 243\n243. Test case 244\n244. Test case 245\n245. Test case 246\n246. Test case 247\n247. Test case 248\n248. Test case 249\n249. Test case 250\n250. Test case 251\n251. Test case 252\n252. Test case 253\n253. Test case 254\n254. Test case 255\n255. Test case 256\n256. Test case 257\n257. Test case 258\n258. Test case 259\n259. Test case 260\n260. Test case 261\n261. Test case 262\n262. Test case 263\n263. Test case 264\n264. Test case 265\n265. Test case 266\n266. Test case 267\n267. Test case 268\n268. Test case 269\n269. Test case 270\n270. Test case 271\n271. Test case 272\n272. Test case 273\n273. Test case 274\n274. Test case 275\n275. Test case 276\n276. Test case 277\n277. Test case 278\n278. Test case 279\n279. Test case 280\n280. Test case 281\n281. Test case 282\n282. Test case 283\n283. Test case 284\n284. Test case 285\n285. Test case 286\n286. Test case 287\n287. Test case 288\n288. Test case 289\n289. Test case 290\n290. Test case 291\n291. Test case 292\n292. Test case 293\n293. Test case 294\n294. Test case 295\n295. Test case 296\n296. Test case 297\n297. Test case 298\n298. Test case 299\n299. Test case 300\n300. Test case 301\n301. Test case 302\n302. Test case 303\n303. Test case 304\n304. Test case 305\n305. Test case 306\n306. Test case 307\n307. Test case 308\n308. Test case 309\n309. Test case 310\n310. Test case 311\n311. Test case 312\n312. Test case"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"e\") == \"vowel\"\nassert solution(\"i\") == \"vowel\"\nassert solution(\"o\") == \"vowel\"\nassert solution(\"u\") == \"vowel\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"b\") == \"consonant\"\nassert solution(\"c\") == \"vowel\"\nassert solution(\"d\") == \"consonant\"\nassert solution(\"e\") == \"vowel\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a') == 'vowel'\n\"\"\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a') == 'vowel'\n\"\"\"\n\nimport sys\n\nassert solution('a') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('o') == 'vowel'\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a\") == \"vowel\"\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a') == 'vowel'\n\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"WWWBB\") == \"0\"\nassert solution(\"BBBWWWWWBBWWBWWWWBBWWWWBBBWWB\") == \"3\"\n\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nFor each element of the input string, check if the color of the element is equal to the current color of the first element. If it is, return the length of the string - 1.\n\nComplexity Analysis:\nTime Complexity: O(N). We traverse the input string only once.\nSpace Complexity: O(1). We only use the constant number of variables.\n\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"WWBWB\") == \"0\"\nassert solution(\"BWBWB\") == \"0\"\nassert solution(\"WWWWB\") == \"0\"\nassert solution(\"BBBBB\") == \"0\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"WWBWBW\") == \"2\"\nassert solution(\"BWBWB\") == \"0\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"BBBBBBBB\") == \"1\"\nassert solution(\"WWWWWWW\") == \"0\"\nassert solution(\"BBBBBBBBW\") == \"2\"\nassert solution(\"BBBBBBBBBWW\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('BBBWW') == '1'\nassert solution('BWBWBWB') == '0'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"WWWWG\") == \"0\"\nassert solution(\"BBBBW\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('BBBWW') == '1'\nassert solution('BWBW') == '1'\nassert solution('WBWBW') == '0'\n\"\"\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BBBBW\") == 1\nassert solution(\"WWBBW\") == 1\nassert solution(\"WWBBBWW\") == 2\nassert solution(\"WWWWBWBWW\") == 3\nassert solution(\"BBBBBWWW\") == 3\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BBBWW\") == 1\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"BBBWW\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n24\n36\n49\n97''') == 'Yes'\nassert solution('''3\n11\n8\n7''') == 'No'\n\nassert solution('''5\n0\n100\n1\n1000\n1002''') == 'No'\n\nassert solution('''1\n5\n7\n10\n21\n28''') == 'Yes'\n\nassert solution('''2\n7\n4\n1\n0''') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2\\n3 4') == 'Yes'"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2') == 'No'\nassert solution('1 21') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n\") == \"Yes\"\nassert solution(\"11 22\\n\") == \"Yes\"\nassert solution(\"7 41\\n\") == \"No\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 21\\n') == 'Yes'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 21') == 'Yes'"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"Yes\"\nassert solution(\"1 21\") == \"Yes\"\nassert solution(\"1 21 22\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nSolution 2\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '1 21') == 'Yes'\nprint(solution(\n    '1 21'))\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 4 1 5 9 2') == '4'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == '4'\n'''\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 4 1 5 9 2') == '4'\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 1\") == \"3\"\nassert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 4 1 6\\n\") == \"4\"\nassert solution(\"3\\n3 2 2\\n\") == \"0\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3 1 4 1 5 9 2') == 4\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"3\"\nassert solution(\"5\\n9 2 3 4 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 4 3 3 4') == '4'\n\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\n\nmin_el = min(arr)\nprint(min_el)\n\narr = [i - min_el for i in arr]\nprint(arr)\narr.sort()\nprint(arr)\n\nx = int(sys.stdin.readline())\nres = 0\nfor i in range(len(arr)):\n    if arr[i] < x:\n        res += 1\nprint(res)"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == '4'"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == ''\nassert solution('3') == ''\nassert solution('4') == ''\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\"\"\"\nimport math"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n4\\n') == '5'\n\"\"\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3') == '5'\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3) == 5\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"5\"\nassert solution(\"100 100\") == \"0\"\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('2 4 6') == 'NO'\n\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\nassert solution(\"1 1 2\") == \"NO\"\nassert solution(\"1 2 1\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4 6') == 'YES'\nassert solution('3 5 7') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"4 5 6\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"2 4 10\") == \"NO\"\nassert solution(\"1 5 3\") == \"NO\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"1 2 2\") == \"NO\"\nassert solution(\"1 1 1\") == \"YES\"\nassert solution(\"5 6 6\") == \"NO\"\nassert solution(\"1 4 6\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"2 4 6\"\n) == \"YES\"\n\nassert solution(\n    \"8 11 16\"\n) == \"NO\"\n\nassert solution(\n    \"1 2 2\"\n) == \"YES\"\n\nassert solution(\n    \"1 3 4\"\n) == \"YES\"\n\nassert solution(\n    \"1 4 6\"\n) == \"NO\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"29\") == \"Yes\"\n\n\"\"\"\n\n\"\"\"\n\n-----------SOLUTION--------------"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"29\") == \"Yes\"\nassert solution(\"10\") == \"No\"\nassert solution(\"91\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('29') == 'Yes'\n\nassert solution('19') == 'No'\n\n\"\"\"\n\nfrom typing import Any"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"29\"\n) == \"Yes\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"29\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('29') == 'Yes'\nassert solution('40') == 'No'\nassert solution('89') == 'Yes'\nassert solution('30') == 'No'\n\nprint('all tests passed.')\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"29\") == \"Yes\"\nassert solution(\"31\") == \"No\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(29) == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"29\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"29\") == \"Yes\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == 1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 3 3\n1 2 4''') == '1'\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\"\n\nN, M, X = [int(x) for x in stdin.split()]\ntolls = [int(x) for x in stdin.split()][1:]\n\nfor toll in tolls:\n    assert toll < N\n    assert toll >= 1\n    assert toll!= X\n    assert toll!= 0\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 3\\n1 2 4') == '1'\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 3\\n1 2 4\") == \"1\"\nassert solution(\"6 3 2\\n4 5 3 6 5\") == \"5\"\nassert solution(\"6 1 1\\n2 4 5 6 4 2\") == \"0\"\nassert solution(\"5 4 2\\n2 4 1 3 5\") == \"2\"\n\nassert solution(\"6 1 1\\n4 5 3 6 5\") == \"0\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 3\\n1 2 4') == '1'\nassert solution('5 2 3\\n2 1 4') == '0'\nassert solution('5 5 4\\n5 3 1') == '1'\n\"\"\"\n\nN, M, X = map(int, input().split())\nA = list(map(int, input().split()))\n\ns = [0] * (N + 1)\n\nfor i in range(M):\n    s[A[i]] = 1\n\ncost = 0\nfor i in range(X, N):\n    if s[i + 1] == 1:\n        cost += 1\n    s[i + 1] = s[i]\n\nprint(cost)\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n5 3 3\n1 2 4\n''') == '1'\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n#\\n#\\n#\\n#\\n#') == 'Yes'\nassert solution('4 5\\n####\\n####\\n#..\\n####\\n####') == 'Yes'\nassert solution('3 3\\n##.\\n###\\n#.') == 'No'\nassert solution('2 2\\n..\\n..\\n..') == 'Yes'\n\"\"\"\nfrom typing import List\n\nclass Solution:\n    def solution(self, input: str) -> str:\n        # H is the number of rows in the input\n        # W is the number of columns in the input\n        H, W = [int(x) for x in input.split(' ')]\n\n        # s is a matrix consisting of H lines of W columns of characters\n        s = [[ch for ch in input.split('\\n')[i]] for i in range(H)]\n\n        def can_fill_cell(h, w):\n            return s[h][w] == '.'\n\n        def can_fill_cell_r(h, w):\n            return s[h][w] == '#' or s[h][w] == '.'\n\n        # check if all the squares can be filled with black\n        def can_fill_black():\n            for i in range(H):\n                for j in range(W):\n                    if not can_fill_cell_r(i, j):\n                        return False\n\n            return True\n\n        # check if there exists two squares h and w (1 <= h < H and 1 <= w < W) such that\n        # the distance between them is at most 1 and the color of the square is same\n        def can_apply_paint():\n            for i in range(H):\n                for j in range(W):\n                    # we'll try to apply paint on s[i][j]\n                    if s[i][j] == '.':\n                        # we'll try to apply paint on s[i - 1][j]\n                        # if it's ok, we'll try to apply paint on s[i][j - 1]\n                        # if it's ok, we'll try to apply paint on s[i][j + 1]\n                        # if it's ok, we'll try to apply paint on s[i + 1][j]\n                        if can_fill_cell(i, j - 1):\n                            if can_fill_cell(i - 1, j):\n                                if can_fill_cell(i + 1, j):\n                                    if can_fill_cell(i, j + 1):\n                                        return True\n\n            return False\n\n        # check if there exists two squares h and w (1 <= h < H and 1 <= w < W) such that\n        # the distance between them is at most 1 and the color of the square is different\n        def can_apply_paint_r():\n            for i in range(H):\n                for j in range(W):\n                    # we'll try to apply paint on s[i][j]\n                    if s[i][j] == '#':\n                        # we'll try to apply paint on s[i - 1][j]\n                        # if it's ok, we'll try to apply paint on s[i][j - 1]\n                        # if it's ok, we'll try to apply paint on s[i][j + 1]\n                        # if it's ok, we'll try to apply paint on s[i + 1][j]\n                        if can_fill_cell(i, j - 1):\n                            if can_fill_cell(i - 1, j):\n                                if can_fill_cell(i + 1, j):\n                                    return True\n\n            return False\n\n        # if can_fill_black() == True, then we can paint all the squares black\n        # and we only need to check whether there exists a pair of squares (h, w)\n        # such that can_apply_paint() == True or can_apply_paint_r() == True\n        if can_fill_black():\n            return 'Yes' if can_apply_paint() or can_apply_paint_r() else 'No'\n\n        # if can_fill_black() == False, then we can't paint all the squares black\n        # and we only need to check whether there exists a pair of squares (h, w)\n        # such that can_apply_paint() == True or can_apply_paint_r() == True\n        else:\n            return 'No'\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n..\\n..\\n..\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n.#.\\n###\\n.#.') == 'Yes'\nassert solution('2 2\\n..\\n..') == 'No'\n\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n.#.\\n###\\n.#.') == 'Yes'\nassert solution('3 3\\n.#.\\n###\\n.#.') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n.#.\\n###\\n.#.') == 'Yes'\n\n\"\"\"\nfrom typing import List, Tuple\nimport unittest\nfrom unittest import mock\nimport io\n\n\nclass TestIO(unittest.TestCase):\n    def test_read_input(self):\n        with mock.patch('builtins.input', return_value='3 3\\n.#.\\n###\\n.#.'):\n            with mock.patch('sys.stdin', io.StringIO()):\n                self.assertEqual(read_input(), (3, 3, ['.#.', '###', '.#.']))\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '3 3\\n'\n    '.#.\\n'\n    '###\\n'\n    '#.#\\n'\n) == 'Yes'\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n#.#\\n###\\n.#.\") == \"Yes\"\n\"\"\"\n\nimport collections\nimport re\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n..#\\n###\\n#..\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n.\\n###\\n.\\n\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"#.#\\n###\\n#.#\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 20 30\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"10 30 10\") == \"No\"\nassert solution(\"30 10 30\") == \"No\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"30 10 20\") == \"Yes\"\nassert solution(\"20 30 10\") == \"No\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\n-------\n\n### Exercise 6.3\n\nGiven the length of a string and an integer K, your task is to truncate the string at a random position such that the length of the truncated string is divisible by K.\n\nFor example, if the input is \"abcdefghij\" and K = 3, then the output should be \"defghij\".\n\n## Output Format:\n\nPrint the resulting string after the string is truncated.\n\n## Sample Input 0:\n\nabcdefghij\n3\n## Sample Output 0:"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 30 20\") == 'Yes'\nassert solution(\"3 2 1\") == 'No'\nassert solution(\"100 100 100\") == 'Yes'\nassert solution(\"1 1 1\") == 'Yes'\nassert solution(\"2 1 1\") == 'Yes'\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'Yes'\nassert solution('1 2 3') == 'No'\n'''\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\nhttps://atcoder.jp/contests/agc027/tasks/agc027_a\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nassert solution(\"2 1 4 3\") == \"Right\"\nassert solution(\"1 2 4 3\") == \"Balanced\"\n\"\"\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 8 7 1') == 'Left'\n\n\"\"\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nassert solution(\"9 2 9 3\") == \"Balanced\"\nassert solution(\"9 2 9 8\") == \"Right\"\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\". 1 1 1 1\") == \"Left\"\nassert solution(\". 0 0 0 0\") == \"Balanced\"\nassert solution(\". 1 1 1 0\") == \"Right\"\nassert solution(\". 0 0 0 1\") == \"Left\"\nassert solution(\". 0 0 0 0\") == \"Balanced\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 8 7 1''') == 'Left'\nassert solution('4 5 6 2') == 'Right'\n'''\nWhat is the total weight of the masses on the left pan?\ntotal weight of the masses on the left pan is 11.\nThe total weight of the masses on the right pan?\ntotal weight of the masses on the right pan is 8.\nThe left pan is heavier than the right pan.\nHence the balance scale tips to the left.\n'''\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8 7 1\") == 'Left'\n\nYou passed: 100.0% of the tests\n\nTest Results:\nExample\nYour Output\nStdout\nRuntime\nYour code took 0.00 ms of time.\nCompile Time\nYour code took 0.00 ms of time.\n\nAttempted:\n\nI have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the first input was 3 8 7 1. I have no clue how to solve this,\nbut the"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\") == \"8\"\n\"\"\"\n\n\"\"\"\nSolution1:\nTime: O(N * M^2), N is the number of shops, and M is the number of business hours.\nSpace: O(1)\n\"\"\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\") == '8'\n\"\"\"\n\nfrom typing import List, Dict, Tuple, Any\n\nfrom collections import defaultdict\n\nclass Day(object):\n    def __init__(self, num: int):\n        self.num = num\n\nclass Period(object):\n    def __init__(self, num: int):\n        self.num = num\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1 0 1 0 0 0 1 0 1') == '8'\nassert solution('3\\n1 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2') == '8'\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == '8'\n\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import combinations\n\nclass CombinationIterator:\n    def __init__(self, characters: str, combinationLength: int):\n        self.combinations = list(combinations(characters, combinationLength))\n        self.combinations.sort()\n        self.index = 0\n        \n    def next(self) -> str:\n        next = self.combinations[self.index]\n        self.index += 1\n        return ''.join(next)\n        \n    def hasNext(self) -> bool:\n        return self.index < len(self.combinations)\n        \nclass Solution:\n    def getMaximumProfit(self, N: int, F: List[List[int]], P: List[int]) -> int:\n        if N == 1:\n            return P[0]\n        p_dict = Counter(P)\n        p_list = [i for i in p_dict]\n        p_list.sort()\n        ans = 0\n        for num in p_list:\n            ans += num\n            if num < 0:\n                break\n        \n        F = list(zip(*F))\n        if F[0][0] == 0:\n            F[0] = list(set(F[0]))\n            F[0].sort()\n            \n        length = len(F[0])\n        \n        for i in range(N):\n            count = Counter(F[i])\n            if count[0] == 0:\n                continue\n            max_count = max(count.values())\n            if max_count > 1:\n                for j in range(length):\n                    if F[i][j] == 0:\n                        continue\n                    else:\n                        ans += max_count * (p_dict[F[i][j]] - 1)\n                        F[i][j] = 0\n        return ans\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n2 1 0 1\\n2 0 1 0') == '2'\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n''') == '8'\nassert solution('''5\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n''') == '0'\n\n\"\"\"\n\nn = int(stdin.readline())\nf = list(map(int, stdin.readline().split(' ')))\np = list(map(int, stdin.readline().split(' ')))\n\ncnt = [0] * (n + 1)\n\nfor i in range(n):\n    for j in range(1, n + 1):\n        if f[i * n + j - 1] == 1:\n            cnt[j] += 1\n\nret = 0\nfor i in range(1, n + 1):\n    ret += p[i - 1] * cnt[i]\n\nprint(ret)\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 0 1 0 0\\n3 4 5 6 7 8 9\") == \"8\"\n\"\"\"\n\nstdin = \"\"\"3\\n1 1 1\\n0 0 0\\n3 3 3\\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 0 1 0 0 1\\n1 0 1 1 1 1 1\\n1 1 1 0 1 1 1\\n1 1 1 1 1 1 1\\n0 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n0 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1') == '8'\nassert solution('3\\n0 0 0\\n0 0 0\\n0 0 0\\n0 1 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 1 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 1 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 1 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 1 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\") == \"8\"\n\"\"\"\n\n\n\"\"\"\nhttps://codeforces.com/problemset/problem/254/A\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435, \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0441\u043f\u0438\u0441\u043a\u0430, \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u0445 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435.\n\n\u0414\u043b\u044f \u0441\u043f\u0438\u0441\u043a\u0430 [1, 2, 3, 4, 5] \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 [5, 4, 3, 2, 1]\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e N, \u0434\u0430\u043b\u0435\u0435 \u0438\u0434\u0443\u0442 N \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 9 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\n\u0422\u0435\u0441\u0442 1\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n5\n1\n2\n3\n4\n5\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n5\n4\n3\n2\n1\n\n\u0422\u0435\u0441\u0442 2\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n5\n3\n2\n1\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n5\n4\n3\n2\n1\n\n\u0422\u0435\u0441\u0442 3\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n6\n9\n7\n5\n4\n3\n2\n1\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n1\n2\n3\n4\n5\n6\n7\n9\n\n\u0422\u0435\u0441\u0442 4\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n1\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n1\n\"\"\"\n\n\n\n\"\"\"\nhttps://codeforces.com/problemset/problem/254/A\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0447\u0438\u0441\u043b\u043e n, \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043a\u0432\u0430\u0434\u0440\u0430\u0442 \u043d\u0435\u0447\u0451\u0442\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n\u22650.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u0432\u0430\u0434\u0440\u0430\u0442 \u043d\u0435\u0447\u0451\u0442\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 n.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u0446\u0438\u043a\u043b for.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0422\u0435\u0441\u0442 1\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n1\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n1\n\n\u0422\u0435\u0441\u0442 2\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n2\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n4\n\n\u0422\u0435\u0441\u0442 3\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n3\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n9\n\"\"\"\n\n\n\"\"\"\nhttps://codeforces.com/problemset/problem/256/A\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0433\u043e \u0441\u0435\u0440\u0438\u044e \u0441\u043c\u0435\u0436\u043d\u044b\u0445 \u0440\u0430\u0432\u043d\u044b\u0445 \u0433\u0440\u0430\u043d\u0435\u0439.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(': 1 2 3 4 5 6 7 8 9 10') == 10\nassert solution(': -1 -2 -3 -4 -5 -6 -7 -8 -9 -10') == -10\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"5-4445\") == \"No\"\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\n\"\"\"\n\"\"\"\n----------SOLUTION----------\nA, B = map(int, stdin.split())\ns = stdin.split('\\n')[1]"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 4\n269-6650''') == 'Yes'\nassert solution('''4 5\n0-0-0-0\n\n''') == 'No'\nassert solution('''2 2\n0-0\n01010\n\n''') == 'Yes'\n\n'''\n3-1 \u90e8\u5206\u548c\u554f\u984c\nhttps://atcoder.jp/contests/arc054/tasks/arc054_a\n\n(A, B) \u3068\u3059\u308b\u3002\n\u305d\u308c\u305e\u308c\u306e\u90e8\u5206\u548c\u304c A \u4ee5\u4e0a B \u4ee5\u4e0b\u3067\u3042\u308b\u3088\u3046\u306a\u6570\u5217\u304c\u4f55\u500b\u5b58\u5728\u3059\u308b\u304b\u3002\n\u81ea\u7136\u6570 x \u306e\u90e8\u5206\u548c\u306f\u3001x \u304c A \u4ee5\u4e0a B \u4ee5\u4e0b\u306e\u3068\u304d\u306e\u307f x \u3068\u3044\u3046\u6570\u306b\u306a\u308b\u3002\n\u306a\u305c x \u306f\u6574\u6570\u3067\u3042\u308b\u306e\u304b\u3002\n\na+b < (c+d) \u3068\u306a\u308b\u3088\u3046\u306a a, b \u304c\u5b58\u5728\u3059\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u3066\u3044\u308b\u306e\u3067\u3001\na+b+1 < (c+d+1) \u3068\u306a\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\u3053\u308c\u3092\u4f7f\u3063\u3066\u3001(a+1) - (a+b) < (c+1) - (c+d) \u304c\u6210\u308a\u7acb\u3064\u3068\u3044\u3046\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n\u3053\u3053\u3067\u3001 a+b \u304c\u56fa\u5b9a\u3057\u305f\u306e\u3067\u3001(c+1) - (c+d) \u306f\u56fa\u5b9a\u3057\u305f\u306e\u3067\u3001(c+1) - (c+d) \u304c\u8ca0\u304b\u3064 0 \u306b\u8fd1\u3044\u304b\u3069\u3046\u304b\u3067\u5224\u5b9a\u3067\u304d\u308b\u3002\n\n\u3053\u306e\u3053\u3068\u3092\u3064\u304b\u3063\u3066\u3001\u300cc+d\u300d\u304c\u56fa\u5b9a\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\u3002\n\u306a\u304a\u3001(a+1) - (a+b) = (c+1) - (c+d) \u3068\u306a\u308b c, d \u306f\u3001\u305d\u308c\u305e\u308c(a+1), (b+1) \u306e\u3069\u3061\u3089\u304b\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n\u307e\u305f\u3001(a+1) - (a+b) < 0 \u3092\u6e80\u305f\u3059 (a+1) \u304c\u5b58\u5728\u3057\u306a\u3044\u3053\u3068\u3092\u8003\u616e\u3057\u3066\u3001\n\u8ca0\u3051\u306a\u3044\u306a\u3089\u3070 (a+1) - (a+b) = 0 \u306e 0 \u306e\u65b9\u5411\u306b\u79fb\u52d5\u3059\u308c\u3070\u3088\u3044\u3002\n\u8ca0\u3051\u306a\u3044\u306a\u3089\u3070 (a+1) \u304c\u5b58\u5728\u3057\u306a\u3044\u304b\u3001(a+1) - (a+b) \u304c 0 \u306b\u8fd1\u3065\u304b\u306a\u3044\u3053\u3068\u3067\u3082\u3088\u3044\u3002\n'''\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4\\n269-6650') == 'Yes'"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('269-6650') == 'Yes'\nassert solution('1234-5678') == 'No'\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('269-6650') == 'Yes'\nassert solution('890-9292') == 'Yes'\nassert solution('8902-9292') == 'Yes'\nassert solution('8902-9292-') == 'Yes'\nassert solution('8902-929') == 'No'\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"Yes\"\nassert solution(\"3 4\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == 'Yes'\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n269-6650\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 6\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\n\n\"\"\"\n\nfrom collections import namedtuple\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport statistics\n\nPoint = namedtuple('Point', 'x y')"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 6\") == '1'\n\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 2 6''') == '''1'''\n\nassert solution('''3 2 3''') == '''0'''\n\nassert solution('''4 4 4''') == '''0'''\n\nassert solution('''10 10 10''') == '''-1'''\n\nassert solution('''2 2 3''') == '''2'''\n\"\"\"\n\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 6\\n') == '1'\nassert solution('4 5 4\\n') == '0'\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2 6') == '1'\n\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 6\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"2 2 10\") == \"8\"\n\"\"\"\n\n\n\nfrom collections import Counter"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2 6') == '1'\nassert solution('3 2 5') == '2'\nassert solution('1 2 5') == '0'\nassert solution('0 4 1') == '-1'\nassert solution('1 2 5') == '0'"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 6\") == \"1\"\nassert solution(\"3 1 5\") == \"1\"\nassert solution(\"3 2 3\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"3 3 3\") == \"0\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 6\") == '1'\n\"\"\"\nfrom collections import deque\nfrom sys import stdin"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\nprint(\"PASSED\")\n\n------------------------------------------------------------------"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 8 2\") == \"3\"\nprint(solution(input()))"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 8 2\\n') == '3\\n4\\n7\\n8'\nassert solution('1 10 2\\n') == '1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9'\nassert solution('7 10 3\\n') == '7\\n8'\nassert solution('7 10 5\\n') == '7\\n8\\n9'\nassert solution('7 10 6\\n') == '7\\n8'\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\n\"\"\"\nimport heapq\nimport sys\n\na, b, k = (int(input()) for _ in range(3))\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 8 2\\n') == '3\\n4\\n7\\n8'\n\"\"\"\n\nimport math\n\na, b, k = map(int, stdin.readline().split())\n\nmin_val = a - k + 1\nmax_val = a + k\n\nres_list = []\n\nfor i in range(min_val, max_val):\n    res_list.append(i)"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8 2\") == \"3 4 7 8\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 8 2\\n') == '3\\n4\\n7\\n8'\n\n\"\"\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8 2\") == \"3 4 7 8\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n\"\"\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(AtCoder Beginner Contest) == \"ABC\"\nprint(solution(AtCoder Beginner Contest))\n\n'''\n\n'''\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\nassert solution(\"AtCoder Intermediate Contest\") == \"ARC\"\nassert solution(\"AtCoder Final Contest\") == \"ACC\"\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        return stdin[0:3].upper()"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 1\") == \"NO\"\nassert solution(\"4 1 2\") == \"YES\"\nassert solution(\"2 3 2\") == \"YES\"\nassert solution(\"3 3 3\") == \"NO\"\nassert solution(\"2 2 2\") == \"YES\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 4\\n\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 4\") == \"YES\"\nassert solution(\"6 6 4\") == \"NO\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\nassert solution(\"2 3 1\") == \"NO\"\nassert solution(\"1 1 1\") == \"YES\"\nassert solution(\"4 4 2\") == \"YES\"\nassert solution(\"1 5 1\") == \"NO\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 4') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3\\n') == 'YES'\n\n------Solution-----\n\"\"\"\nimport math\n\na, b, x = map(int, input().split())\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 2\") == \"NO\"\nassert solution(\"3 5 4\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\u20183 5 4\u2019) == \u2018YES\u2019\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 4\") == 'YES'\n\n-----Explanation-----\nThe 3 cats and 4 dogs among the 5 animals are all known to be cats.\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 4\") == \"YES\"\nassert solution(\"2 3 6\") == \"NO\"\nassert solution(\"1 3 5\") == \"NO\"\nassert solution(\"1 3 6\") == \"YES\"\nassert solution(\"1 2 6\") == \"YES\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100 17') == '83'\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2\\n3 4') == '3'\n\nassert solution('2 2\\n2 1') == '2'\n\nassert solution('3 5\\n5 6') == '9'\n\nassert solution('10 2\\n10 2') == '20'\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100 17') == '83'\nprint(solution('100 17'))\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100 17') == '83'\n\n'''\n\n'''\ni = 0\nx, t = input().split()\nx = int(x)\nt = int(t)\nwhile i < t:\n    x = x - 1\n    i = i + 1\nprint(x)\n'''\n\nx, t = map(int, input().split())\n\nwhile x > 0:\n    x = x - 1\n    t = t + 1\nprint(t - 1)\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100 17') == '83'\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 17\") == \"83\"\nprint(solution(\"100 17\"))\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 17\") == \"83\"\nprint(\"PASSED\")\n\n---------------------------------------"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 17\") == \"83\"\nprint(solution(\"100 17\"), \"83\")\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100 17') == '83'\n\n\"\"\"\n\nX, t = input().split()\nprint(int(X)-int(t))"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 17\") == \"83\""
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1\\n100\\n') == '1000000000000000000'\nassert solution('3\\n12\\n4\\n4\\n') == '48'\n\"\"\"\nimport sys\nfrom functools import reduce\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1000000000 1000000000\") == \"1000000000000000000\"\n\"\"\"\nfrom __future__ import print_function\n\nn = int(stdin.readline().rstrip())\narr = [int(x) for x in stdin.readline().split()]\nans = 1\nfor i in range(n):\n    ans *= arr[i]\n    if ans > pow(2, 18):\n        print(-1)\n        return\nprint(ans)\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100000 1000000000') == '1000000000000000000'\nassert solution('0 1') == '1'\nassert solution('1 1000000000') == '1000000000000000000'\nassert solution('0') == '0'\nassert solution('0 1') == '0'\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2\n1000000000 1000000000\n\"\"\") == '1000000000000000000'\n\"\"\"\n\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000000000 1000000000') == '1000000000000000000'\nassert solution('1') == '1'\nassert solution('2 1000000000') == '-1'\n\"\"\"\nimport sys\n\nfrom typing import List\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000000000 1000000000') == '1000000000000000000'\n\"\"\"\nfrom math import log10"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1000000000\") == \"1000000000000000000\"\n\"\"\""
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2018\\n218') == 'Yes'\nprint(solution(stdin))"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2018\\n218\\n') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2018\\n218') == 'Yes'\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"218\") == \"Yes\"\nassert solution(\"2018\") == \"Yes\"\nassert solution(\"1234\") == \"No\"\nassert solution(\"5000\") == \"Yes\"\n\n\"\"\"\n\n\"\"\"\n\u601d\u8003\uff1a\n1. \u9664\u4e86\u53ea\u4f7f\u75281\u548c500\u786c\u5e63\u4e4b\u5916\uff0c\u5176\u4ed6\u786c\u5e63\u4e0d\u80fd\u505a\u5230\u5e7e\u5143\uff0c\u6240\u4ee5\u61c9\u8a72\u662f\u6c42\u89e3\u5dee\u7570\u70ba0\u6240\u5728\u7684\u9ede\uff0c\u5c31\u662f\u627e\u51faN=1000\uff0cA=0\u7684\u89e3\uff0c\u4e5f\u5c31\u662f\u6700\u5927\u503c\u5c0d\u96641000\u7684\u9664\u6cd5\u6578\uff0c\n\u4e8b\u5be6\u4e0a\u5dee\u7570\u5c31\u662f\u5dee\u7570\u6578\uff0c\u53c8\u7a31\u70ba\u7dad\u5ea6\uff0c\u8f03\u5c11\u503c\u70ba0\uff0c\u8f03\u591a\u503c\u70ba1\uff0c\u4f46\u662f\u8a2d\u6c42\u89e3\u7dad\u5ea6\u503c\u6703\u662f0\u62161\uff0c\u6240\u4ee5\u6703\u6709\u5f88\u591a\u503c\u70ba0\u7684\u9ede\uff0c\u6240\u4ee5\u8981\u628a\u5dee\u7570\u6578\u7684\u79e9\u6539\u70ba1\uff0c\n\u5dee\u7570\u6578\u79e9\u5c31\u662f\u7dad\u5ea6\u3002\n2. \u5224\u65b71-yen\u548c500-yen\u7684\u65b9\u6cd5\u662f\u628a\u6bcf\u500b\u786c\u5e63\u7684\u9280\u5e63\u50f9\u503c\u505a\u76f8\u52a0\uff0c\u76f8\u52a0\u5f8c\u8ddf\u539f\u672c\u505a\u6bd4\u8f03\uff0c\n\u63a5\u8457\u7528\u5dee\u7570\u6578\u6bd4\u8f03\uff0c\u6bd4\u5982\u6709\u4e00\u500b\u786c\u5e63\u50f9\u503c\u70ba500\uff0c\u90a3\u9ebc\u82071-yen\u50f9\u503c\u76f8\u52a0\u6703\u70ba500\uff0c\u5176\u5dee\u7570\u6578\u5c31\u662f500\uff0c\n\u63a5\u8457\u6703\u505a\u6bd4\u8f03\uff0c\u5982\u679c\u5dee\u7570\u6578\u5c31\u662f1\uff0c\u8a72\u786c\u5e63\u5c31\u662f\u5176\u4ed6\u786c\u5e63\u52a0\u4e0a\u76841\uff0c\u50cf\u53ea\u67092\u500b\u5143\u786c\u5e63\uff0c1\u500b1-yen\u5143\u786c\u5e63\uff0c\n\u6240\u4ee5\u53ef\u4ee5\u5224\u65b7\u75281-yen\u50f9\u503c\u5c31\u662fN\uff0c\u6240\u4ee5\u53ea\u8981\u628a\u6bcf\u500b\u786c\u5e63\u50f9\u503c\u4f9d\u5e8f\u52a0\u8d77\u4f86\u5373\u53ef\u3002\n\n\u5229\u7528\u5dee\u7570\u6578\u5c31\u662f\u7dad\u5ea6\u503c\u89e3\u984c\u4e86\u3002\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2018\\n218\\n\") == \"Yes\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"218\\n\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\"\n\n\"\"\"\n\ud83d\udcdd Solution:\n\nRead n and A from stdin.\nPrint Yes if E869120 can pay exactly N yen using only his 1-yen and 500-yen coins, otherwise print No.\n\n-----Constraints-----\n - N is an integer between 1 and 10000 (inclusive).\n - A is an integer between 0 and 1000 (inclusive).\n\n-----Input-----\n2018\n218\n\n-----Output-----\nYes\n\"\"\"\n\nfrom sys import stdin\n\nn, a = map(int, stdin.readline().strip().split())\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\nassert solution(\"4 3 7\") == \"dangerous\"\nassert solution(\"3 3 6\") == \"dangerous\"\nassert solution(\"1 2 3\") == \"dangerous\"\n\"\"\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 3 6''') =='safe'\n\nassert solution('''4 3 1''') == 'dangerous'\n\nassert solution('''4 3 7''') == 'delicious'\n\nassert solution('''10 4 3''') == 'dangerous'\n\nassert solution('''10 10 10''') == 'dangerous'"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 6\\n') =='safe'\n\"\"\"\nimport time\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\nassert solution(\"4 3 5\") == \"dangerous\"\nassert solution(\"4 4 5\") == \"dangerous\"\nassert solution(\"5 5 5\") == \"dangerous\"\nassert solution(\"1 1 1\") == \"delicious\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\"\n\nx, a, b = map(int, stdin.readline().split())\n\nprint(\"delicious\" if (a - x >= 1) else \"safe\" if (a - x == 0) else \"dangerous\")\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\"\n\nX, A, B = map(int, input().split())\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 6') == \"safe\"\n\"\"\"\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass Date:\n    day: int\n    month: int\n    year: int\n\n    def __post_init__(self):\n        assert self.month < 13\n        assert self.year < 10000\n        assert self.day < 32\n        if self.month == 2:\n            if self.day > 29:\n                self.day = 29\n            if self.year % 4 == 0:\n                assert self.day < 30\n        if self.month == 4 or self.month == 6 or self.month == 9 or self.month == 11:\n            if self.day > 30:\n                self.day = 30\n\n    def __add__(self, other):\n        self.day += other.day\n        if self.day > 30:\n            self.month += 1\n            self.day = self.day - 30\n        if self.month == 12:\n            self.month = 1\n            self.year += 1\n        return Date(self.day, self.month, self.year)\n\n    def __sub__(self, other):\n        self.day -= other.day\n        if self.day < 1:\n            self.month -= 1\n            self.day += 30\n        if self.month == 1:\n            self.month = 12\n            self.year -= 1\n        return Date(self.day, self.month, self.year)\n\n    def __gt__(self, other):\n        if self.year < other.year:\n            return True\n        if self.year == other.year:\n            if self.month < other.month:\n                return True\n            if self.month == other.month:\n                return self.day < other.day\n        return False\n\n    def __lt__(self, other):\n        if self.year < other.year:\n            return False\n        if self.year == other.year:\n            if self.month < other.month:\n                return False\n            if self.month == other.month:\n                return self.day < other.day\n        return True\n\n    def __eq__(self, other):\n        if self.year == other.year:\n            if self.month == other.month:\n                if self.day == other.day:\n                    return True\n        return False"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == \"safe\"\n\n-----Problem-----\nTakahashi has a strong stomach. He never gets a stomachache from eating something whose \"best-by\" date is at most X days earlier.\nHe gets a stomachache if the \"best-by\" date of the food is X+1 or more days earlier, though.\nOther than that, he finds the food delicious if he eats it not later than the \"best-by\" date. Otherwise, he does not find it delicious.\nTakahashi bought some food A days before the \"best-by\" date, and ate it B days after he bought it.\nWrite a program that outputs delicious if he found it delicious, safe if he did not found it delicious but did not get a stomachache either, and dangerous if he got a stomachache.\n\n-----Constraints-----\n - 1 \u2264 X,A,B \u2264 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nX A B\n\n-----Output-----\nPrint delicious if Takahashi found the food delicious; print safe if he neither found it delicious nor got a stomachache; print dangerous if he got a stomachache.\n\n-----Sample Input-----\n4 3 6\n\n-----Sample Output-----\ndangerous\n\nHe ate the food three days after the \"best-by\" date. He is a dangerous man!\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"9\"\nprint(solution(\"10\"))\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == \"9\"\n\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '9'"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"9\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '9'\nassert solution('1') == '0'\nassert solution('0') == '0'\n\"\"\"\nimport math"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == '9'\nassert solution('100') == '99'\nassert solution('999') == '981'\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(10) == 9\nprint(solution(10))\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"9\"\nprint(solution(\"10\"))"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"9\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\"\n\nfrom math import gcd\nimport sys"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n2 3\n1 1\n3 2''') == 10\n\"\"\"\n\nfrom collections import Counter, defaultdict\nimport sys\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1\\n3 2\\n4 3\\n5 4\\n6 5\\n7 6\\n8 7\") == \"4\"\nassert solution(\"4\\n1 1\\n3 2\\n4 3\\n5 4\\n6 5\\n7 6\\n8 7\") == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == answer\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n2 3\n1 1\n3 2''') == \"10\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\nprint(solution(\"9\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\"))"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\nassert solution(\"aabbccddeeffgghhiijjkkllmmnnooppqqrrsstttuvwwxyz\") == \"no\"\nassert solution(\"aabbccddeeffgghhiijjkkllmmnnooppqqrrsstttuvwwxy\") == \"yes\"\nassert solution(\"aabbccddeeffgghhiijjkkllmmnnooppqqrrsstttuvw\") == \"yes\"\nassert solution(\"aabbccddeeffgghhiijjkkllmmnnooppqqrrsstttuv\") == \"yes\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\nassert solution(\"aabc\") == \"no\"\nassert solution(\"abc\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == \"no\"\nassert solution('a') == \"yes\"\nassert solution('aa') == \"no\"\nassert solution('aaa') == \"yes\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abc') == 'no'\nassert solution('abcd') == 'yes'\nassert solution('aabc') == 'yes'\nassert solution('abca') == 'no'\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('uncopyrightable') == 'yes'\nassert solution('b') == 'no'"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('uncopyrightable') == 'yes'"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"WEEWW\") == 1\n\"\"\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('WEEWW') == '1'\nassert solution('WWWWE') == '0'\nassert solution('WEW') == '2'\n\n\"\"\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '1'\n\nfrom math import gcd\nfrom functools import reduce"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\nWEEWW') == '1'\nassert solution('5\\nWWEWE') == '0'\nassert solution('5\\nWWWEW') == '1'\nassert solution('5\\nWWWEE') == '2'\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('WEEWW') == 1\nassert solution('WEWE') == 3\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5WEEWW\") == \"1\"\n\"\"\"\n\nN, string = int(input()), input()\n\nprint(string.count(\"E\") - string.count(\"W\"))\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5WEEWW') == 1\n\"\"\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5\nWEEWW\n''') == '1'\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5WEEWW') == 1"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(1)\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n2 3\\n1 4\\n\") == \"2\\n2\\n1\\n1\"\n\nassert solution(\"2 2\\n1 1\\n2 1\\n\") == \"2\\n1\\n0\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\n---"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 3\n1 2\n2 3\n1 4''') == '2\\n2\\n1\\n1'\n\n-------\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\""
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4') == '2\\n2\\n1\\n1'\n\"\"\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == '2\\n2\\n1\\n1'\nassert solution(\"4 4\\n1 2\\n2 3\\n3 4\") == '0\\n0\\n0\\n0'\nassert solution(\"4 5\\n1 2\\n2 3\\n3 4\\n4 5\") == '0\\n0\\n0\\n0\\n0'\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 3\n1 2\n2 3\n1 4''') == '2\\n2\\n1\\n1'\n\nprint(solution(stdin))\n\n'''\n--- Day 4: High-Entropy Passphrases ---\n--- Part Two ---\nWhile it appears you validated the passwords correctly, they don't seem to be what the Official Toboggan Corporate Authentication System is expecting.\n\nThe shopkeeper suddenly realizes that he just accidentally explained the password policy rules from his old job at the sled rental place down the street! The Official Toboggan Corporate Policy actually works a little differently.\n\nEach policy actually describes two positions in the password, where 1 means the first character, 2 means the second character, and so on. (Be careful; Toboggan Corporate Policies have no concept of \"index zero\"!) Exactly one of these positions must contain the given letter. Other occurrences of the letter are irrelevant for the purposes of policy enforcement.\n\nGiven the same example list from above:\n\n1-3 a: abcde is valid: position 1 contains a and position 3 does not.\n1-3 b: cdefg is invalid: neither position 1 nor position 3 contains b.\n2-9 c: ccccccccc is invalid: both position 2 and position 9 contain c.\nHow many passwords are valid according to the new interpretation of the policies?\n\nYour puzzle answer was 511.\n\n--- Part Two ---\nWhile it appears you validated the passwords correctly, they don't seem to be what the Official Toboggan Corporate Authentication System is expecting.\n\nThe shopkeeper suddenly realizes that he just accidentally explained the password policy rules from his old job at the sled rental place down the street! The Official Toboggan Corporate Policy actually works a little differently.\n\nEach policy actually describes two positions in the password, where 1 means the first character, 2 means the second character, and so on. (Be careful; Toboggan Corporate Policies have no concept of \"index zero\"!) Exactly one of these positions must contain the given letter. Other occurrences of the letter are irrelevant for the purposes of policy enforcement.\n\nGiven the same example list from above:\n\n1-3 a: abcde is valid: position 1 contains a and position 3 does not.\n1-3 b: cdefg is invalid: neither position 1 nor position 3 contains b.\n2-9 c: ccccccccc is invalid: both position 2 and position 9 contain c.\nHow many passwords are valid according to the new interpretation of the policies?\n\nYour puzzle answer was 531.\n\nBoth parts of this puzzle are complete! They provide two gold stars: **\n\nAt this point, you should return to your Advent calendar and try another puzzle.\n\nIf you still want to see it, you can get your puzzle input.\n\nYou can also [Share] this puzzle.\n'''\n'''\n--- Day 4: High-Entropy Passphrases ---\n\n--- Part One ---\n\nThe shopkeeper suddenly realizes that he just accidentally explained the password policy rules from his old job at the sled rental place down the street! The Official Toboggan Corporate Policy actually works a little differently.\n\nEach policy actually describes two positions in the password, where 1 means the first character, 2 means the second character, and so on. (Be careful; Toboggan Corporate Policies have no concept of \"index zero\"!) Exactly one of these positions must contain the given letter. Other occurrences of the letter are irrelevant for the purposes of policy enforcement.\n\nGiven the same example list from above:\n\n1-3 a: abcde is valid: position 1 contains a and position 3 does not.\n1-3 b: cdefg is invalid: neither position 1 nor position 3 contains b.\n2-9 c: ccccccccc is invalid: both position 2 and position 9 contain c.\nHow many passwords are valid according to the new interpretation of the policies?\n\nYour puzzle answer was 44.\n\n--- Part Two ---\n\nNow that the shopkeeper's attention is drawn to the other part of the policies, what new meaning can be assigned to the given examples? \nHow many passwords are valid according to the new interpretation of the policies?\n\nYour puzzle answer was 484.\n'''\n'''\n--- Day 4: High-Entropy Passphrases ---\n\n--- Part One ---\n\nThe shopkeeper suddenly realizes that he just accidentally explained the password policy rules from his old job at the sled rental place down the street! The Official Toboggan Corporate Policy actually works a little differently.\n\nEach policy actually describes two positions in the password, where 1 means the first character, 2 means the second character, and so on. (Be careful; Toboggan Corporate Policies have no concept of \"index zero\"!) Exactly one of these positions must contain the given letter. Other occurrences of the letter are irrelevant for the purposes of policy enforcement.\n\nGiven the same example list from above:\n\n1-3 a: abcde is valid: position 1 contains a and position 3 does not.\n1-3 b: cdefg is invalid: neither position 1 nor position 3 contains b.\n2-9 c: ccccccccc is invalid: both position 2 and position 9 contain c.\nHow many passwords are valid according to the new interpretation of the policies?\n\nYour puzzle answer was 114.\n\n--- Part Two ---\n\nNow that the shopkeeper's attention is drawn to the other part of the policies, what new meaning can be assigned to the given examples? \nHow many passwords are valid according to the new interpretation of the policies?\n\nYour puzzle answer was 813.\n\nBoth parts of this puzzle are complete! They provide two gold stars: **\n\nAt this point, you should return to your Advent calendar and try another puzzle.\n\nIf you still want to see it, you can get your puzzle input.\n\nYou can also [Share] this puzzle.\n'''\n'''\n--- Day 4: High-Entropy Passphrases ---\n\n--- Part One ---\n\nThe shopkeeper suddenly realizes that he just accidentally explained the password policy rules from his old job at the sled rental place down the street! The Official Toboggan Corporate Policy actually works a little differently.\n\nEach policy actually describes two positions in the password, where 1 means the first character, 2 means the second character, and so on. (Be careful; Toboggan Corporate Policies have no concept of \"index zero\"!) Exactly one of these positions must contain the given letter. Other occurrences of the letter are irrelevant for the purposes of policy enforcement.\n\nGiven the same example list from above:\n\n1-3 a: abcde is valid: position 1 contains a and position 3 does not.\n1-3 b: cdefg is invalid: neither position 1 nor position 3 contains b.\n2-9 c: ccccccccc is invalid: both position 2 and position 9 contain c.\nHow many passwords are valid according to the new interpretation of the policies?\n\nYour puzzle answer was 35.\n\n--- Part Two ---\n\nNow that the shopkeeper's attention is drawn to the other part of the policies, what new meaning can be assigned to the given examples? \nHow many passwords are valid according to the new interpretation of the policies?\n\nYour puzzle answer was 54.\n\nBoth parts of this puzzle are complete! They provide two gold stars: **\n\nAt this point, you should return to your Advent calendar and try another puzzle.\n\nIf you still want to see it, you can get your puzzle input.\n\nYou can also [Share] this puzzle.\n'''\n'''\n--- Day 4: High-Entropy Passphrases ---\n\n--- Part One ---\n\nThe shopkeeper suddenly realizes that he just accidentally explained the password policy rules from his old job at the sled rental place down the street! The Official Toboggan Corporate Policy actually works a little differently."
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\nassert solution(\"4 5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"3\\n3\\n3\\n3\"\nassert solution(\"2 2\\n1 1\") == \"1\\n1\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n10\n15\n''') == '25'\nassert solution('''5\n10\n15\n''') == '30'\nassert solution('''2\n5\n10\n''') == '10'\nassert solution('''2\n5\n5\n''') == '5'\nassert solution('''2\n0\n5\n''') == '0'\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n5\n10\n15\n''') == '25'\nassert solution('''2\n2\n2\n''') == '0'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"3\\n5\\n10\\n15\\n25\") == \"30\"\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"3\\n10\\n15\") == \"30\"\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n5\\n10\\n15\\n') == '25'\n\"\"\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n5\\n10\\n15') == '25'\nassert solution('3\\n5\\n10') == '30'\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5\\n10\\n15\\n\") == \"25\"\n\nassert solution(\"5\\n10\\n15\\n\") == \"30\"\n\nassert solution(\"1\\n5\\n10\\n15\\n\") == \"0\"\n\nassert solution(\"0\\n5\\n10\\n15\\n\") == \"30\"\n\nassert solution(\"0\\n0\\n5\\n10\\n15\\n\") == \"30\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n5\\n10\\n15') == '25'\nassert solution('2\\n10\\n15') == '25'\nassert solution('1\\n10') == '30'\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"2\\n2\\n2\") == \"0\"\nassert solution(\"3\\n5\\n10\") == \"30\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aabbca') == 2\n\n------\n\nCodeWars solution:"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aabbca\") == 2\n\"\"\"\n\nfrom collections import Counter\nimport unittest"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aabbca') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aabbca') == 2\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aabbca') == 2\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abbca') == 2\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nstdin = sys.stdin.read()\nstdin = stdin.splitlines()"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abcde') == 0\nassert solution('abcabc') == 0\nassert solution('abcdeabc') == 0\nassert solution('abcabcde') == 0\nassert solution('abcabcd') == 1\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aabbca') == 2\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aabbca\") == 2\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aabbca') == 2\nassert solution('abcdef') == 1\nassert solution('abc') == 1\nassert solution('a') == 0\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Rainy') == 'Rainy'\nassert solution('Cloudy') == 'Cloudy'\nassert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Rainy'\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Rainy\"\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Rainy\"\nassert solution(\"Rainy\") == \"Sunny\"\n\"\"\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Rainy'\nassert solution('Rainy') == 'Sunny'\n\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Sunny') == 'Cloudy'\n\nassert solution('Cloudy') == 'Rainy'\n\nassert solution('Rainy') == 'Sunny'\n\nassert solution('Sunny') == 'Cloudy'\n\nassert solution('Cloudy') == 'Rainy'\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\n\"\"\"\n\nS = input()\n\nd = {\"Sunny\": \"Cloudy\", \"Cloudy\": \"Rainy\", \"Rainy\": \"Sunny\"}\n\nprint(d[S])\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('Sunny') == 'Cloudy'\nprint(solution('Sunny'))\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Rainy') == 'Rainy'\nassert solution('Cloudy') == 'Cloudy'\nassert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Rainy'\n\nprint('Success')\n'''"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 17 120\\n') == '119'\n\"\"\""
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 17 120\\n\") == \"119\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 1\\n') == '4'\nassert solution('7 17 120\\n') == '119'"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"7 17 120\"\n) == '119'\n\"\"\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\"\"\"\n\nimport unittest\n\n\nclass Parking_Test(unittest.TestCase):\n    def test_solution_1(self):\n        self.assertEqual(solution(\"7 17 120\"), \"119\")\n\n    def test_solution_2(self):\n        self.assertEqual(solution(\"10 23 34\"), \"34\")\n\n    def test_solution_3(self):\n        self.assertEqual(solution(\"7 8 34\"), \"34\")\n\n    def test_solution_4(self):\n        self.assertEqual(solution(\"8 16 50\"), \"50\")\n\n    def test_solution_5(self):\n        self."
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 17 120') == '119'\n\n\"\"\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 17 120') == '119'\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 17 120\") == \"119\"\nassert solution(\"2 2 2000\") == \"2000\"\n\"\"\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 17 120\\n\") == \"119\"\nassert solution(\"6 10 100\\n\") == \"110\"\nassert solution(\"7 17 120\\n\") == \"119\"\n\"\"\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n7 17 120\n\"\"\") == '119'"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\n\nimport ast"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n\") == \"3800\"\n\"\"\"\n\nfrom sys import stdin\nimport math\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1\\n') == '3800'\n\"\"\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())\nprint((b - a + 1) * (2 * b - a + 1) // 2)\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"1190\"\nassert solution(\"4 4\") == \"3800\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == '3800'\n\"\"\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1900'\n\"\"\"\n\n\nfrom functools import reduce\n\nN, M = map(int, input().split())\n\nlcm = reduce(lambda x, y: x * y // gcd(x, y), range(2, N + 1), 1)\n\nprint(lcm // M)\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"5 1\"\n) == \"3800\"\n\"\"\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"atcoderregularcontest\") == 'b'\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline\n\nfor line in sys.stdin:\n    s = set(line.strip())\n    print('None') if all(x in s for x in range(ord('a'), ord('z') + 1)) else print(chr(min([ord(x) for x in s if ord(x) > ord('z')])))\n    break\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('atcoderregularcontest') == 'b'\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('atcoderregularcontest') == 'b'\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n\ns = stdin.strip()\nfor i in range(97, 123):\n    if chr(i) not in s:\n        print(chr(i))\n        break"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\"\"\"\n\n\"\"\"\n### Solution\n\nInput: N\nOutput: N lines of B_i\nThe i-th line should contain B_i.\n\nfor i in range(int(input())):\n    x = [int(j) for j in input().split(' ')]\n    x = sorted(x)\n    median = (x[len(x) // 2] + x[len(x) // 2 - 1]) / 2\n    print(median)\n\"\"\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\n\nimport math\nfrom typing import List\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\nassert solution(\"4\\n1 2 3 4\") == \"4\\n1\\n1\\n2\"\nassert solution(\"5\\n1 1 2 2 1\") == \"5\\n1\\n1\\n2\\n2\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\n\"\"\""
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\"\"\"\nimport sys"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 4 3\") == \"4 3 3 4\"\n\"\"\"\n\nimport math\nimport typing\nfrom typing import List\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().strip().split()))\nA.sort()\n\nfor i in range(N // 2, N):\n    print(A[i])"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 3 1 2 1 2 2 2 1 3 3 3') == '8'\nassert solution('5 2 1 3 1 1 3 1 1 3') == '0'\nassert solution('4 1 1 1 1 1 1') == '1'\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n3 1 2 4 2 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == '1\\n2'\nassert solution('6\\n1 2 3 4 5 6') == '2\\n2\\n1\\n2'\nassert solution('7\\n2 5 3 4 1 2 3') == '2\\n2\\n1\\n2'\nassert solution('7\\n2 5 3 4 1 2 1') == '2\\n2\\n1\\n2'\nassert solution('6\\n1 2 3 5 6 1') == '0'\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2 4 2 1\") == \"2\"\n\"\"\"\n\n\"\"\"\n* Solution 1\n\"\"\"\n\nn = int(stdin.readline().strip())\nsticks = [int(x) for x in stdin.readline().strip().split()]\nsticks.sort()"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n3 1 2 4 2 1\") == \"2\"\n\nSolution:"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == \"2\"\nassert solution(\"4\\n2 1 3 2\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n3 4\") == '6\\n'\nassert solution(\"4 4\\n2 1 3 1\") == '4\\n'\nassert solution(\"6 1\\n1 1 1 1 1 1\") == '0\\n'\nassert solution(\"6 10\\n1 2 1 2 3 1 2\") == '2\\n'\nassert solution(\"6 10\\n2 1 2 1 3 1 2\") == '2\\n'\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2 4 2 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3\\n') == '2'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7 1 2 5\\n2\\n5\\n10\") == \"8\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 1 1 3 1 2 1\") == \"11\"\nassert solution(\"3 6 1 1 1 1 2 1 1 1 1 2 1 2 2 1 1\") == \"12\"\nassert solution(\"3 5 1 1 2 1 1 1 1 1 2 1 1\") == \"9\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(8)\n\"\"\"\n\nN, D, X = (int(i) for i in input().split())\na = [int(i) for i in input().split()]\nr = 0\nfor i in range(0, N):\n    r += (D - i) * a[i]\nprint(r)\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n7 1\\n2\\n5\\n10') == '8'\n\"\"\"\n\nn = int(input())\nd = int(input())\nx = int(input())\na = [int(input()) for _ in range(n)]\n\ndp = [0] * (d + 1)\ndp[0] = x\nfor day in range(1, d + 1):\n    for i in range(n):\n        dp[day] += dp[day - 1 - a[i]]\nprint(dp[d])"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n7 1\\n2\\n5\\n10\") == \"8\"\n\"\"\"\n\nn, d, x = list(map(int, input().split()))\n\narr = [0] + list(map(int, input().split()))\n\nprint(sum(arr[i] for i in range(1, n + 1) if i % d == 0))\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n7 1\\n2\\n5\\n10\") == '8'\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 7 1 2 5 10') == '8'\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '3\\n7 1\\n2\\n5\\n10'\n) == '8'\nprint('Test passed')\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 7 1 2 5') == '8'\nassert solution('4 10 1') == '10'\nassert solution('7 10 1 1 1') == '10'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 7 1 2 5 10') == '8'\n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2 100\") == \"2\"\nassert solution(\"1 1 1 20\") == \"0\"\nassert solution(\"0 0 0 0\") == \"0\"\n\"\"\""
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == 2\n\"\"\"\n\nfrom fractions import gcd\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution([\"2\", \"2\", \"2\", \"100\"]) == \"2\"\nassert solution([\"2\", \"2\", \"2\", \"100\"]) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\n\"\"\""
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == 2\n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n2\\n2\\n100') == '2'\nassert solution('2\\n2\\n1\\n100') == '1'\nassert solution('2\\n2\\n2\\n100') == '1'\nassert solution('2\\n2\\n2\\n200') == '1'\nassert solution('2\\n2\\n2\\n5') == '0'\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\nassert solution(\"5\\n4\\n3\\n2\") == \"6\"\nassert solution(\"5\\n4\\n1\\n100\") == \"2\"\nassert solution(\"5\\n4\\n3\\n2\") == \"6\"\nassert solution(\"5\\n4\\n1\\n1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == 2\nassert solution(\"2\\n1\\n1\\n100\") == 2\n\n-----Note-----\nThis exercise asks the solution of a problem that is easier to test.\nTherefore, the test function uses input from stdin.\nMake sure you simulate the behavior of stdin with your solution.\n\"\"\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3 2') == 'Yes'\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"3 3 2\") == \"No\"\nassert solution(\"-1 3 1\") == \"No\"\nassert solution(\"-1 -3 1\") == \"Yes\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 3 2''') == 'Yes'\n\n--------\n\n5 2 7\n\n--------\n\n5 2 6\n\n--------\n\n6 5 9\n\n--------\n\n6 7 1\n\n--------\n\n6 6 6\n\n--------\n\n3 7 5\n\n--------\n\n7 8 3\n\n--------\n\n5 1 9\n\n--------\n\n5 6 1\n\n--------\n\n5 7 8\n\n--------\n\n6 7 2\n\n--------\n\n9 8 6\n\n--------\n\n8 4 9\n\n--------\n\n9 1 7\n\n--------\n\n7 8 3\n\n--------\n\n1 6 7\n\n--------\n\n7 6 2\n\n--------\n\n2 5 1\n\n--------\n\n5 1 4\n\n--------\n\n5 2 7\n\n--------\n\n2 4 1\n\n--------\n\n6 8 2\n\n--------\n\n4 7 3\n\n--------\n\n5 8 7\n\n--------\n\n4 1 3\n\n--------\n\n7 8 5\n\n--------\n\n2 5 6\n\n--------\n\n5 3 7\n\n--------\n\n2 1 3\n\n--------\n\n2 3 5\n\n--------\n\n2 3 2\n\n--------\n\n5 5 2\n\n--------\n\n2 3 7\n\n--------\n\n2 7 3\n\n--------\n\n2 7 3\n\n--------\n\n5 7 2\n\n--------\n\n7 5 6\n\n--------\n\n3 6 3\n\n--------\n\n3 7 5\n\n--------\n\n3 3 5\n\n--------\n\n6 7 7\n\n--------\n\n6 7 8\n\n--------\n\n5 3 8\n\n--------\n\n2 4 5\n\n--------\n\n3 6 1\n\n--------\n\n4 7 1\n\n--------\n\n7 7 7\n\n--------\n\n4 7 7\n\n--------\n\n6 7 8\n\n--------\n\n3 7 1\n\n--------\n\n7 3 5\n\n--------\n\n6 7 2\n\n--------\n\n3 7 1\n\n--------\n\n5 3 7\n\n--------\n\n7 5 5\n\n--------\n\n5 7 6\n\n--------\n\n5 4 3\n\n--------\n\n1 7 5\n\n--------\n\n3 6 2\n\n--------\n\n4 7 1\n\n--------\n\n6 7 3\n\n--------\n\n2 5 3\n\n--------\n\n5 2 1\n\n--------\n\n3 3 3\n\n--------\n\n4 1 4\n\n--------\n\n5 3 6\n\n--------\n\n7 7 3\n\n--------\n\n6 7 7\n\n--------\n\n1 7 5\n\n--------\n\n2 3 7\n\n--------\n\n6 7 8\n\n--------\n\n2 3 1\n\n--------\n\n4 5 3\n\n--------\n\n2 4 5\n\n--------\n\n5 2 5\n\n--------\n\n2 6 3\n\n--------\n\n4 7 7\n\n--------\n\n5 3 7\n\n--------\n\n3 4 1\n\n--------\n\n1 2 6\n\n--------\n\n6 2 1\n\n--------\n\n3 2 7\n\n--------\n\n2 2 4\n\n--------\n\n3 5 6\n\n--------\n\n2 7 4\n\n--------\n\n4 5 3\n\n--------\n\n6 1 5\n\n--------\n\n7 1 4\n\n--------\n\n6 7 1\n\n--------\n\n4 2 2\n\n--------\n\n6 2 1\n\n--------\n\n7 7 5\n\n--------\n\n7 3 2\n\n--------\n\n4 6 5\n\n--------\n\n5 1 4\n\n--------\n\n3 4 7\n\n--------\n\n3 1 2\n\n--------\n\n3 4 7\n\n--------\n\n4 7 1\n\n--------\n\n7 7 1\n\n--------\n\n4 7 7\n\n--------\n\n3 6 4\n\n--------\n\n5 3 5\n\n--------\n\n6 2 1\n\n--------\n\n5 1 3\n\n--------\n\n5 7 2\n\n--------\n\n5 3 7\n\n--------\n\n6 3 7\n\n--------\n\n2 4 1\n\n--------\n\n6 1 2\n\n--------\n\n4 7 1\n\n--------\n\n4 3 3\n\n--------\n\n2 4 1\n\n--------\n\n2 2 1\n\n--------\n\n2 1 2\n\n--------\n\n4 3 1\n\n--------\n\n7 6 2\n\n--------\n\n4 4 2\n\n--------\n\n6 7 7\n\n--------\n\n4 6 5\n\n--------\n\n1 1 6\n\n--------\n\n6 7 1\n\n--------\n\n7 4 7\n\n--------\n\n4 1 2\n\n--------\n\n5 5 2\n\n--------\n\n6 1 1\n\n--------\n\n7 2 5\n\n--------\n\n5 4 3\n\n--------\n\n3 5 7\n\n--------\n\n7 7 7\n\n--------\n\n2 7 3\n\n--------\n\n5 4 6\n\n--------\n\n1 2 2\n\n--------\n\n7 5 5\n\n--------\n\n6 2 1\n\n--------\n\n5 4 1\n\n--------\n\n7 2 3\n\n--------\n\n2 5 6\n\n--------\n\n5 4 4\n\n--------\n\n4 6 5\n\n--------\n\n4 1 5\n\n--------\n\n7 3 4\n\n--------\n\n2 4 4\n\n--------\n\n2 4 5\n\n--------\n\n6 4 1\n\n--------\n\n7 7 2\n\n--------\n\n1 1 4\n\n--------\n\n7 2 1\n\n--------\n\n7 1 1\n\n--------\n\n4 4 1\n\n--------\n\n6 6 7\n\n--------\n\n1 1 2\n\n--------\n\n7 2 1\n\n--------\n\n1 1 6\n\n--------\n\n4 3 7\n\n--------\n\n2 5 3\n\n--------\n\n1 2 2\n\n--------\n\n6 7 1\n\n--------\n\n3 6 1\n\n--------\n\n5 1 1\n\n--------\n\n2 1 5\n\n--------\n\n2 1 1\n\n--------\n\n2 5 3\n\n--------\n\n5 3 6\n\n--------\n\n5 2 5\n\n--------\n\n6 7 6\n\n--------\n\n2 6 1\n\n--------\n\n5 6 2\n\n--------\n\n7 7 4\n\n--------\n\n2 2 2\n\n--------\n\n5 7 1\n\n--------\n\n5 7 4\n\n--------\n\n6 6 2\n\n--------\n\n2 7 4\n\n--------\n\n2 7 7\n\n--------\n\n5 2 3\n\n--------\n\n7 5 4\n\n--------\n\n2 7 6\n\n--------\n\n3 6 4\n\n--------\n\n7 5 3\n\n--------\n\n5 5 7\n\n--------\n\n6 2 7\n\n--------\n\n5 1 2\n\n--------\n\n7 1 4\n\n--------\n\n4 7 1\n\n--------\n\n7 6 3\n\n--------\n\n1 2 1\n\n--------\n\n7 3 2\n\n--------\n\n7 2 5\n\n--------\n\n7 1 2\n\n--------\n\n4 4 5\n\n--------\n\n5 7 6\n\n--------\n\n7 4 6\n\n--------\n\n2 1 2\n\n--------\n\n4 4 1\n\n--------\n\n5 2 2\n\n--------\n\n6 2 1\n\n--------\n\n7 6 2\n\n--------\n\n1 4 1\n\n--------\n\n4 1 7\n\n--------\n\n5 1 3\n\n--------\n\n6 1 5\n\n--------\n\n4 7 1\n\n--------\n\n4 6 5\n\n--------\n\n7 1 1\n\n--------\n\n3 1 4\n\n--------\n\n7 1 3\n\n--------\n\n6 7 1\n\n--------\n\n6 6 5\n\n--------\n\n5 5 7\n\n--------\n\n4 7 1\n\n--------\n\n1 1 7\n\n--------\n\n7 7 7\n\n--------\n\n1 1 7\n\n--------\n\n7 6 2\n\n--------\n\n7 5 2\n\n--------\n\n3 1 4\n\n--------\n\n2 7 1\n\n--------\n\n1 7 2\n\n--------\n\n2 7 3\n\n--------\n\n1 1 6\n\n--------\n\n7 6 7\n\n--------\n\n5 1 1\n\n--------\n\n2 7 1\n\n--------\n\n6 6 2\n\n--------\n\n7 1 1\n\n--------\n\n4 7 2\n\n--------\n\n1 1 7\n\n--------\n\n7 1 1\n\n--------\n\n6 2 5\n\n--------\n\n2 1 1\n\n--------\n\n6 2"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3 2') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3 2') == 'Yes'\n\n---\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\nassert solution(\"1 1 3\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\"\n\na, b, c = [int(i) for i in input().split()]"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3 2') == 'Yes'\nassert solution('2 3 1') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"2 2 1\") == \"No\"\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n\"\"\"\n\nimport math\nfrom sys import stdin\n\nfor line in stdin:\n    n, m = map(int, line.split())\n    if m < (n - 1) * n / 2:\n        print(math.ceil((n - 1) / 2))\n    else:\n        print(n - 1)\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\n\"\"\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1000\\n120\\n100\\n140\\n') == '9'\n\"\"\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\nprint(solution(input()))\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n\"\"\"\n\n\"\"\"\nfrom typing import List, Tuple\nfrom utils import *\nimport math"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1000\") == \"6\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"4 5\") == \"0\"\nassert solution(\"3 120\") == \"3\"\nassert solution(\"3 100\") == \"0\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1000\\n120\\n100\\n140\\n') == '9'\n\nassert solution('3 1000\\n100\\n1000\\n1000\\n') == '3'\n\nassert solution('3 100\\n1000\\n100\\n1000\\n') == '0'\n\nassert solution('3 100\\n1000\\n100\\n100\\n') == '1'\n\nassert solution('3 100\\n1000\\n100\\n100\\n') == '1'"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n    3 1000\n    120\n    100\n    140\n    \"\"\"\n) == '9'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(s) == result\nprint(solution(s))\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\napple\\norange\\napple\") == 2\n\"\"\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('apple') == 'apple'\nassert solution('orange') == 'orange'\n\nassert solution('apple') == 'apple'\nassert solution('orange') == 'orange'\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"apple\\norange\\napple\") == '2'\nassert solution(\"apple\\norange\\napple\\napple\") == '3'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"apple\\norange\\napple\") == \"2\"\nassert solution(\"apple\\norange\\napple\\napple\\napple\\napple\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected_result, \"Check your solution\"\n\nIf the solution is correct, you will get the following result:\n\nSample Input 1:\n4\napple\norange\napple\ngrapefruit\n\nSample Output 1:\n2\n\nSample Input 2:\n5\napple\napple\napple\norange\napple\n\nSample Output 2:\n3\n\nSample Input 3:\n5\ngreen\nblue\ngreen\nred\nblue\n\nSample Output 3:\n2\n\"\"\"\n\n\"\"\"\n1)\nS = set()\nn = int(input())\nfor i in range(n):\n    S.add(input())\n\nprint(len(S))\n\"\"\"\n\n\"\"\"\n2)\nn = int(input())\nS = set()\n\nfor _ in range(n):\n    S.add(input())\n\nprint(len(S))\n\"\"\"\n\n\"\"\"\n3)\nn = int(input())\nS = set()\n\nfor _ in range(n):\n    S.add(input())\n\nprint(len(S))\n\"\"\"\n\n\"\"\"\n4)\nn = int(input())\nS = set()\n\nfor _ in range(n):\n    S.add(input())\n\nprint(len(S))\n\"\"\"\n\n\"\"\"\n5)\nn = int(input())\nS = set()\n\nfor _ in range(n):\n    S.add(input())\n\nprint(len(S))\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"apple\\napple\\napple\") == \"3\"\nassert solution(\"apple\\norange\\napple\") == \"2\"\nassert solution(\"apple\\napple\\napple\\napple\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"apple\") == \"apple\"\nassert solution(\"orange\") == \"orange\"\nassert solution(\"banana\") == \"banana\"\nassert solution(\"pineapple\") == \"pineapple\"\nassert solution(\"pineapple\") == \"pineapple\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\napple\\norange\\napple') == '2'\n\"\"\"\nimport sys\n\nclass Solution:\n    def solution(self, stdin):\n        for _ in range(int(stdin.readline())):\n            print(len(set(stdin.readline().strip())))"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('apple\\norange\\napple\\n') == '2'\nassert solution('orange\\napple\\napple\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2100 2500 2700 2700') == '2 2'\nprint('Test pass.')\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2100 2500 2700 2700\") == \"2 2\"\n\n-----Example 3-----\nFor example, if the given input is:\n6\n3400 3450 3450 2500 2100 1800\nThe answer is:\n2 3\n\nThe user with rating 3400 is \"yellow\", and the others are \"red\". There are 2 different colors.\n\nassert solution(\"6 3400 3450 3450 2500 2100 1800\") == \"2 3\"\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2100 2500 2700 2700\\n') == '2 2'\nassert solution('4 2200 2700 2700\\n') == '2 3'\nassert solution('4 2300 2700 2700\\n') == '2 2'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2100 2500 2700 2700') == '2 2'\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"\n\"\"\"\n\nN = int(input())"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2100 2500 2700 2700') == '2 2'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n2100 2500 2700 2700\n\"\"\") == \"2 2\"\n\nprint(solution(\"\"\"\n4\n2100 2500 2700 2700\n\"\"\"))\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == '2 2'\n\"\"\"\n\nfrom collections import Counter\nimport sys\n\nN = int(sys.stdin.readline().strip())\n\nusers = Counter(map(int, sys.stdin.readline().strip().split()))\n\nhighest = users.most_common()[0][1]\nlowest = users.most_common()[-1][1]\n\nprint(highest - lowest, highest)"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n\"\"\") == \"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    stdin=\n\"\"\"\n\"\"\"\n) == \"1 2\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\"\n\nS = stdin\n\nprint(700 + 100 * 2 if S[0] == \"o\" else 700)"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\"\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_is_boiled_egg_present(self):\n        self.assertEqual(is_boiled_egg_present(\"ox\"), True)\n        self.assertEqual(is_boiled_egg_present(\"xo\"), False)\n        self.assertEqual(is_boiled_egg_present(\"xx\"), True)\n        self.assertEqual(is_boiled_egg_present(\"xox\"), True)\n        self."
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('oxo') == 900\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\"\n\nimport re"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('oxo') == 900\n\"\"\"\n\nimport sys\n\nchar_1 = sys.stdin.readline()[0]\nchar_2 = sys.stdin.readline()[0]\nchar_3 = sys.stdin.readline()[0]\n\nprice_1 = 700 + 100\nprice_2 = price_1 * 2"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('oxo') == 900\nassert solution('xo') == 700\nassert solution('oo') == 700\n\n-----Test-----\nimport sys\nimport unittest\nfrom io import StringIO\nfrom unittest.mock import patch\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.held, sys.stdin = sys.stdin, StringIO('oxo')\n    def tearDown(self):\n        sys.stdin = self.held\n\n    def test_solution(self):\n        with patch('__main__.input', create=True) as mocked_input:\n            mocked_input.side_effect = ['oxo']\n            solution()\n            self.assertEqual(sys.stdout.getvalue().strip(), '900')\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('oxo') == 900\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('HH') == 'H'\nassert solution('DD') == 'D'\n\"\"\"\n\na, b = map(lambda x: x.strip(), input().split())\nprint('H' if a == 'H' else 'D' if a == 'D' else 'D' if b == 'H' else 'H')\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"H H\"\n) == \"H\"\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('H H') == 'H'\nassert solution('D D') == 'D'\n\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('HH') == 'H'\nassert solution('DH') == 'D'\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('H H') == 'H'\nassert solution('D D') == 'D'\n\nprint(solution(stdin.read()))\n\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"HH\") == \"H\"\nassert solution(\"HH\") == \"H\"\nassert solution(\"HH\") == \"H\"\nassert solution(\"HH\") == \"H\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"H D\") == \"D\"\nassert solution(\"D H\") == \"D\"\nassert solution(\"D D\") == \"D\"\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"H D\") == \"D\"\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('HH') == 'H'\nassert solution('HD') == 'D'\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"DH\") == \"D\"\nassert solution(\"HHH\") == \"H\"\nassert solution(\"DHH\") == \"D\"\n\"\"\""
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1222') == '1+2+2+2=7'\nprint(solution('1222'))\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1222') == '1+2+2+2=7'\nassert solution('3434') == '3+4+4+4=13'\nassert solution('9297') == '9+9+9+9+7=48'\nassert solution('3236') == '3+2+6+3+6=18'\n\"\"\""
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\nassert solution(\"2334\") == \"2+3+3+3=7\"\nassert solution(\"1222\") == \"1+2+2+2=7\"\nassert solution(\"2334\") == \"2+3+3+3=7\"\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\nassert solution(\"9271\") == \"9-7+1+1=7\"\nassert solution(\"1232\") == \"1-2+2-2=7\""
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\nassert solution(\"1111\") == \"1-1+1+1=1\"\nassert solution(\"2222\") == \"2-2-2-2=0\"\nassert solution(\"9090\") == \"9-9-9-9=0\"\nassert solution(\"9909\") == \"9-9+9-9=0\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1222') == \"1+2+2+2=7\"\nassert solution('1223') == \"1-2+2+3=7\"\nassert solution('1230') == \"1-2+3+0=7\"\nassert solution('1234') == \"1-2+3+4=7\"\n\"\"\""
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\"\"\"\n\ninp = input().split()\ninp = ''.join(inp)\nres = []\n\nfor i in range(10):\n    for j in range(10):\n        for k in range(10):\n            for l in range(10):\n                if int(inp[0]) * i + int(inp[1]) * j + int(inp[2]) * k + int(inp[3]) * l == 7:\n                    res.append('{}{}{}{}=7'.format(i, j, k, l))\nprint(res[0])\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\n\"\"\""
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n1 1 2 2\n''') == '2\\n2\\n0\\n0\\n0'\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n1 1 2 2\n''') == '2\\n2\\n0\\n0\\n0\\n'\n\n-----\nYou are given a data structure of employee information, which includes the employee's unique id, his importance value and his direct subordinates' id.\n\nYou need to return the id of the employee having the largest importance value. If there are multiple employees with the same importance value, return the id of the one having the maximum id.\n\nInput Format\n\nThe first line of input contains an integer,, denoting the number of employees.\nEach of the  subsequent lines contains three space-separated integers,  (where ),, and, respectively.\n\nConstraints\n\n\n\nOutput Format\n\nPrint the id of the employee with the largest importance value.\n\nSample Input 0\n\n6\n1 5 3\n2 3 4\n3 5 6\n4 1 8\n5 4 2\n6 6 5\nSample Output 0\n\n5\nExplanation 0\n\nEmployee with id = 2 has importance value = 3, and he has two direct subordinates: employee 1 with importance value = 5 and employee 4 with importance value = 1.\nBoth these employees have importance value = 3, so the employee with the largest importance value is the employee with id = 5.\n\n\n\n'''"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1 2 2\\n') == '2\\n2\\n0\\n0\\n0'\n\"\"\""
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\\n\"\nassert solution(\"1 1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\\n\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"2\\n2\\n0\\n0\\n0\\n\"\nassert solution(\"7\\n4 3 5 6 1 2 7\\n\") == \"5\\n5\\n0\\n0\\n0\\n\"\nassert solution(\"4\\n4 3 2 1\\n\") == \"3\\n3\\n0\\n0\\n0\\n\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\\n\"\n\"\"\""
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n1 1 2 2\n''') == '2\\n2\\n0\\n0\\n0\\n'\nassert solution('''5\n2 1 2 2\n''') == '2\\n2\\n0\\n0\\n0\\n'\nassert solution('''2\n1 1\n''') == '1\\n0\\n'\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 1 2 2\\n') == '2\\n2\\n0\\n0\\n0\\n'\n\nassert solution('7\\n4 6 5 4 5 3 2\\n') == '5\\n3\\n0\\n0\\n0\\n0\\n'\nassert solution('9\\n2 3 4 4 5 2 6 1 7\\n') == '2\\n0\\n0\\n0\\n0\\n0\\n1\\n2\\n'\nassert solution('12\\n1 3 5 1 1 2 1 1 3 5 3\\n') == '5\\n4\\n0\\n0\\n0\\n0\\n2\\n0\\n0\\n0\\n0\\n0\\n2\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n'\n\n\"\"\""
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 1 2 2\\n') == '2\\n2\\n0\\n0\\n0'\n\"\"\"\nimport sys\n\nassert sys.version_info >= (3, 7)  # make sure we have Python 3.7+\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"3\"\n\"\"\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n\") == \"3\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"3\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n') == '1\\n'\nassert solution('3\\n4\\n') == '3\\n'\nassert solution('6\\n7\\n') == '6\\n'\n\"\"\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"0\"\nassert solution(\"6\") == \"3\"\nassert solution(\"3\") == \"0\"\n\"\"\"\n\nfrom typing import List, Tuple, Union\n\nX: int = int(input())\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n3\") == \"3\"\n\"\"\"\n\nfrom typing import Any, List\n\nfrom solutions.utils.main import read_input\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n\") == \"3\"\n\"\"\"\n\nX = int(input())"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"3\"\n\"\"\"\n\nx = int(stdin)\nprint(2 * x - 2)\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n6\") == \"3\"\n\"\"\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5\") == \"1\"\nassert solution(\"5\\n3\") == \"0\"\nassert solution(\"3\\n2\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1118') == 'Yes'\nprint(solution('1118'))\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1118\") == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('9876') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('2112') == 'No'\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1118\") == \"Yes\"\n\"\"\"\n\nn = input()\nm = n[0]\nfor i in range(1, len(n)):\n    if n[i] == m:\n        if n[i] == n[i-1] or n[i] == n[i+1]:\n            continue\n        else:\n            print(\"No\")\n            exit(0)\n    else:\n        m = n[i]\nprint(\"Yes\")\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1118') == 'Yes'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1118\") == \"Yes\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1111') == 'Yes'\nassert solution('101010') == 'Yes'\nassert solution('111223') == 'Yes'\nassert solution('123') == 'Yes'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1118\") == 'Yes'\nassert solution(\"1117\") == 'No'\n\"\"\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1118\") == 'Yes'"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\\n\") == 3\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections import namedtuple\nfrom itertools import product\nfrom operator import attrgetter\nfrom typing import List, NamedTuple\n\nfrom advent_of_code_puzzle import ProblemParser\n\nAltar = namedtuple(\"Altar\", [\"upper\", \"middle\", \"lower\"])\n\n\nclass AltarBuilder:\n    def __init__(self, parts: List[int]) -> None:\n        self.parts = list(parts)\n\n    def build_altar(self) -> Altar:\n        if len(self.parts)!= 3:\n            raise Exception(\"Incorrect number of parts\")\n\n        def build_altar_helper(first: int, last: int) -> Altar:\n            if first >= last:\n                return Altar(first, first, first)\n            elif last - first == 1:\n                if self.parts[first] <= self.parts[last]:\n                    return Altar(first, last, last)\n                else:\n                    return Altar(last, last, first)\n            else:\n                mid = (last - first) // 2 + first\n                return Altar(\n                    min(build_altar_helper(first, mid).upper, self.parts[mid]),\n                    build_altar_helper(mid, last).middle,\n                    max(build_altar_helper(first, mid).lower, self.parts[mid]),\n                )\n\n        return build_altar_helper(0, len(self.parts) - 1)\n\n    def build_altar_i(self, i: int) -> Altar:\n        return Altar(\n            min(self.build_altar(i).upper, self.parts[i]),\n            self.build_altar(i).middle,\n            max(self.build_altar(i).lower, self.parts[i]),\n        )\n\n\nclass Day14(ProblemParser):\n    def parser(self, line: str) -> None:\n        self.parts.append(int(line))\n\n    def part_one(self, input_str: str) -> str:\n        builder = AltarBuilder(self.parts)\n        return f\"{len(builder.build_altar())}\"\n\n    def part_two(self, input_str: str) -> str:\n        builder = AltarBuilder(self.parts)\n        altars = [builder.build_altar_i(i) for i in range(len(self.parts))]\n        return f\"{len(set(map(attrgetter('upper','middle', 'lower'), altars)))}\"\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n3 6\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '2\\n1 5\\n2 4\\n3 6'\n) == '3'\n\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\n1 5\n2 4\n3 6''') == '3'\nassert solution('''2\n1 1\n2 1\n3 1''') == '0'\n\nassert solution('''3\n1 1 1\n1 2 1\n1 3 2''') == '2'\nassert solution('''3\n1 1 1\n1 2 1\n2 1 1''') == '1'\n\nassert solution('''5\n1 5\n2 4\n3 6\n4 8\n5 10''') == '3'\n'''"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\\n\") == 3\n\"\"\"\n\nimport sys\nfrom collections import namedtuple\n\nAlter = namedtuple(\"Alter\", [\"upper\", \"middle\", \"lower\"])\nPart = namedtuple(\"Part\", [\"size\"])\n\nN = int(sys.stdin.readline())\nparts = [int(size) for size in sys.stdin.readline().split()]\n\naltars = set()\n\nfor i in range(1, N):\n    upper_part = Part(parts[i - 1])\n    middle_part = Part(parts[i])\n    lower_part = Part(parts[i + 1])\n\n    if middle_part.size > upper_part.size and lower_part.size > middle_part.size:\n        altars.add(Alter(upper_part, middle_part, lower_part))\n\nprint(len(altars))\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == 3\n\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 5\\n2 4\\n3 6') == 3\n\"\"\"\n\nn = int(input())\na, b, c = [], [], []\nfor i in range(n):\n    a.append(int(input()))\nfor i in range(n):\n    b.append(int(input()))\nfor i in range(n):\n    c.append(int(input()))\n\nx = 0\nfor i in range(n):\n    if a[i] <= b[i] <= c[i]:\n        x += 1\n    if b[i] <= a[i] <= c[i]:\n        x += 1\n    if c[i] <= b[i] <= a[i]:\n        x += 1\n\nprint(x)\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n3 6\") == 3\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2\\n3 4') == '3'\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('A B') == '<'\nassert solution('A A') == '='\nassert solution('B B') == '='\nassert solution('C D') == '>'\nassert solution('D E') == '<'\n\n------"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('A B') == '<'\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('A B') == '<'\nassert solution('A A') == '='\nassert solution('B A') == '>'\n\"\"\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('A B') == '<'\nassert solution('A C') == '>'\nassert solution('A D') == '='\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"A C\") == \">\"\nassert solution(\"B C\") == \"=\"\n\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"B A\") == \">\"\nassert solution(\"B B\") == \"=\"\nassert solution(\"A B C\") == \"<\"\nassert solution(\"B C A\") == \">\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"C D\") == \">\"\nassert solution(\"E F\") == \"=\"\n\"\"\"\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(solution(\"A B\"), \"<\")\n        self.assertEqual(solution(\"C D\"), \">\")\n        self."
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('A B') == '<'\nassert solution('B A') == '>'\nassert solution('B B') == '='\n\"\"\"\nimport sys"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"A A\") == \"=\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A B\") == \"<\"\n\n\"\"\""
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\nassert solution(\"4 4\\n#..#\\n.#.#\\n#..#\") == \"8989\"\nassert solution(\"4 4\\n#..#\\n#..#\\n#..#\") == \"8899\"\nassert solution(\"3 3\\n.#.\\n#.#\\n.#.\") == \"2799\"\nassert solution(\"5 4\\n.##.\\n#..#\\n#..#\\n#..#\") == \"2799\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".....\\n.#.#.\\n.....\\n\") == \"11211\"\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\n\"\"\""
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\n\"\"\""
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".#.#.#\") == \"11211\"\nassert solution(\"#.#.##\") == \"11122\"\nassert solution(\"#.####\") == \"111122\"\nassert solution(\"#.#.##\") == \"11122\"\nassert solution(\"#####.##\") == \"1111222\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == '11211'\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\""
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5\\n.....\\n.#.#.\\n.....') == '11211'\nassert solution('5 5\\n.##.##\\n#..#.#\\n#.##.#\\n####.#\\n##.###\\n####.#\\n#.#.#.\\n#.##.#\\n
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\nassert solution(\"2 3\\n.#.\\n..\") == \"2#1\"\n\n-----\n\nThe H strings are printed in the rows of the grid, and the i-th row contains the string T_i.\n\nH is the number of rows and W is the number of columns of the grid.\n\nS_i is the i-th string in the H-list.\n\nThe string S_i consists of # and. characters.\n\nThe. character represents an empty square, and # character represents a bomb.\n\nThe string T_i is printed in the column order.\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1 2\\n3 4') == '1'\nassert solution('2 2\\n1 2') == '0'\nassert solution('2 2\\n1\\n2') == '1'\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150\\n') == 3\n\"\"\"\nimport sys\nimport os"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150') == 3\n\"\"\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150') == '3'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == 3\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150') == 3\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(solution.__doc__) == 3\n\"\"\"\n\nn, m, k = map(int, stdin.readline().split())\na, b = map(int, stdin.readline().split())\nc = int(stdin.readline())\n\ncount = 0\nsum_a = a\nsum_b = b\n\nwhile k > 0:\n    if sum_a > c:\n        sum_a -= c\n        count += 1\n    else:\n        sum_a = 0\n        sum_b = b\n        while sum_b > c:\n            sum_b -= c\n            count += 1\n        sum_b = 0\n        sum_a = a\n    k -= 1\n\nprint(count)\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\nassert solution('2 2 1 1') == '4'\n\"\"\"\n\n\nimport math\n\na, b, c, x, y = map(int, input().split())\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\n\"\"\"\n\n\nfrom typing import List\nimport math\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(read_input()) == read_expected()\n\"\"\"\n\nA, B, C, X, Y = list(map(int, input().strip().split()))"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\nprint(\"Passed\")\n\n\"\"\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == '7900'\n\"\"\"\nimport sys\n\nstdin = sys.stdin"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\nassert solution('1 1 1 1 1') == '0'\nassert solution('1 1 1 1') == '1'\nassert solution('1 1') == '0'\nassert solution('4 4') == '1'\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n\n\"\"\"\nSolution:\n\nIt is optimal to buy four AB-pizzas and rearrange them into two A-pizzas and two B-pizzas, then buy additional one A-pizza.\n\nPizza At is a fast food chain and offers three kinds of pizza: \"A-pizza\", \"B-pizza\" and \"AB-pizza\". A-pizza and B-pizza are completely different pizzas, and AB-pizza is one half of A-pizza and one half of B-pizza combined together. The prices of one A-pizza, B-pizza and AB-pizza are A yen, B yen and C yen (yen is the currency of Japan), respectively.\n\nFor example, suppose we want to buy two A-pizza and two B-pizza, then we can buy three AB-pizza. Then we can arrange them into one A-pizza and one B-pizza, then we can also buy one A-pizza for one extra AB-pizza.\n\nTherefore, the answer is 4 * (A + B) - C.\n\n\"\"\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"4\"\nprint(solution(\"3\"))\n\n\n\"\"\""
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n') == '4'\n\"\"\""
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '4'\nassert solution('6') == '4'\nassert solution('10') == '2'\nassert solution('3 10') == '6'\nassert solution('100') == '10'\n\"\"\""
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '4'\nassert solution('3') == '4'\n\"\"\"\n\nimport math\n\nn = int(stdin.readline())\n\nprint(sum([1 if i % 2 == 0 else 2 for i in range(1, math.ceil(n / 2))]))\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == 4\n\"\"\""
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n') == '4'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == 4\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n') == '4'\nprint('Test PASSED')\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"4\"\n\"\"\"\nfrom math import factorial"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '4'\n\"\"\"\n\nN = int(input())\n\ntotal = 1\nfor i in range(1, N + 1):\n    total = total * i\n\ntotal = total % (10**9 + 7)\nprint(total)\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"9\"\nprint(solution(\"10\"))\n\nassert solution(\"1000\") == \"1000\"\nprint(solution(\"1000\"))\n\nassert solution(\"5\") == \"4\"\nprint(solution(\"5\"))\n\nassert solution(\"1\") == \"1\"\nprint(solution(\"1\"))\n\nassert solution(\"3\") == \"2\"\nprint(solution(\"3\"))"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == '9'\n\"\"\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"4\") == \"4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == '9'\nassert solution('9') == '9'\nassert solution('5') == '4'\n\"\"\"\nimport sys\nfrom math import log10, ceil, sqrt"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"9\") == \"4\"\nassert solution(\"10\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == '9'\nassert solution('10') == '9'\nassert solution('15') == '9'\nassert solution('20') == '18'\nassert solution('30') == '27'\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == '9'\nprint(solution('10'))\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '9'\nassert solution('100') == '98'\nassert solution('1000') == '988'\nassert solution('10000') == '9898'\n\nprint(solution('10'))\nprint(solution('100'))\nprint(solution('1000'))\nprint(solution('10000'))\n\n\"\"\"\nfrom math import log\n\nimport sys"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3) == '1'\nassert solution(7) == '4'\nassert solution(8) == '8'\nassert solution(9) == '9'\nassert solution(10) == '9'\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '9'\nassert solution('4') == '4'\nassert solution('8') == '8'\nassert solution('9') == '9'\n\nassert solution('2') == '2'\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == '3'\n\n-------"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\n\nprint(solution(\"4\\n10\\n8\\n8\\n6\"))\n\n\"\"\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n4\n10\n8\n8\n6\n''') == '3'\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\n8\\n8\\n6') == '3'\nassert solution('2\\n4\\n4\\n6') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6\\n') == '3'"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6\\n') == '3'\n\"\"\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == '3'\nprint(solution(stdin))"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n8\\n8\\n6\") == \"3\"\nassert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\n\nprint('Success')"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == '3'\nassert solution('1\\n100') == '1'\n\"\"\"\n\nN, *d = [int(i) for i in stdin.split()]\nd.append(d[0])\n\nl = d[1:]\n\ncounter = 1\nresult = 0\nfor i in range(1, len(l)):\n    if l[i] >= l[i-1]:\n        counter += 1\n        result = max(result, counter)\n    else:\n        counter = 1\n\nprint(result)\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == '3'\n\n\"\"\"\n\n\n\"\"\"\nThe Knapsack problem is a combinatorial optimization problem, in which we select a subset of items from a set of items that are all equally weighted.\nAn item is the element in the set, and the weight of the item is the value of that element. For example, if we are selecting a subset of two items, then we would only have two weights \u2013 the weight of the first item and the weight of the second item. The problem is to find the set of items that will give us the maximum sum. The sum of the items we select is also known as the total weight of the set.\nWe can solve the Knapsack problem using Dynamic Programming, but we will solve it using recursion. We will be using the knapsack problem to solve the all-pairs shortest-path problem. We will be giving a graph and we will be asking it to find the shortest distance between two points. This is known as the all-pairs shortest-path problem.\n\nThe pseudocode is as follows:\nfunction knapsack(W, wt, val, n):\n    if n = 0 or W = 0:\n        return 0\n    if wt[n - 1] > W:\n        return knapsack(W, wt, val, n - 1)\n    else:\n        return max(val[n - 1] + knapsack(W - wt[n - 1], wt, val, n - 1),\n                   knapsack(W, wt, val, n - 1))\n\nThe time complexity of the above algorithm is exponential. It\u2019s exponential because the recursive calls grow exponentially with depth. So the time complexity is O(2^n). The space complexity is also O(2^n).\n\nTime Complexity = O(2^n)\nSpace Complexity = O(2^n)\n\n\"\"\"\n\n\"\"\"\nfunction knapsack(W, wt, val, n):\n    if n = 0 or W = 0:\n        return 0\n    if wt[n - 1] > W:\n        return knapsack(W, wt, val, n - 1)\n    else:\n        return max(val[n - 1] + knapsack(W - wt[n - 1], wt, val, n - 1),\n                   knapsack(W, wt, val, n - 1))"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('QWERTYASDFZXCV') == 5\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == '5'\n\n------\n5\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZXCV\nQWERTYASDFZX"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == 5\n\"\"\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('QWERTYASDFZXCV') == 'ASDFZ'\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('QWERTYASDFZXCV') == 5\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('QWERTYASDFZXCV') == 'ASDFZ'\n\"\"\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == '5'\n\"\"\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n8 12 40') == '2'\n\"\"\"\n\nN = int(input())\narr = list(map(int, input().split()))\ncount = 0\nfor i in range(len(arr)):\n    if arr[i] % 2 == 1:\n        count += 1\n        arr[i] = arr[i] // 2\n        while arr[i] % 2 == 1:\n            count += 1\n            arr[i] = arr[i] // 2\nprint(count)\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 4 3\") == \"1\"\nassert solution(\"8 12 40\") == \"2\"\n\"\"\""
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\"\"\""
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 12 40\\n\") == \"2\"\nassert solution(\"8 12 40\\n8 12 40\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 12 40\\n') == '2'\nassert solution('8 10 12\\n') == '0'\nassert solution('8 10 12 10\\n') == '1'\nassert solution('8 10 12 10 1\\n') == '2'\nassert solution('8 10 12 10 1 2\\n') == '3'\n\nprint('PASSED')\n\nimport pytest\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n8 12 40''') == '2'\nassert solution('''3\n9 12 39''') == '1'\n\"\"\""
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 12 40\") == \"2\"\nprint(\"Test 1 PASSED\")\n\n---\n-----Problem-----\nYou have an initial array of numbers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].\nYou want to perform the following operation:\n - Take any element from the array and replace it by the product of the element and its index (for example, if you take 1, your new element will be 1 * 0 + 1 = 1).\n - Take any element from the array and replace it by the sum of the element and its index (for example, if you take 4, your new element will be 4 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 = 40).\nAfter the operation, you have an array [40, 2, 6, 3, 10, 9, 7, 8, 1, 5].\nFind the minimal number of operations you need to perform on the array in order to obtain a sorted array.\n\n-----Constraints-----\n - 1 \\leq N \\leq 200\n - 1 \\leq A_i \\leq 10^9\n\n-----Input-----\nInitial array of numbers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n-----Output-----\nMinimal number of operations\n\n-----Sample Input-----\n1\n10\n\n-----Sample Output-----\n0"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 12 40\") == 2\n\"\"\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == 6\n\"\"\"\nfrom typing import List, Tuple, Union, Callable\nimport pytest\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n') == 6\n\"\"\"\n\nN = int(stdin.readline())\npower = 1\nfor _ in range(N):\n    power *= _ + 1\n\nprint(power % (10 ** 9 + 7))\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 6\n\"\"\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == 6\nassert solution('2\\n') == 2\nassert solution('1\\n') == 1"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '6'\nassert solution('9') == '33'\nassert solution('10') == '100'\n\"\"\""
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"6\"\nprint(solution(\"3\"))\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '1'\nassert solution('1\\n1') == '2'\nassert solution('2\\n1\\n2') == '4'\nassert solution('2\\n3\\n4') == '18'\n\n\"\"\""
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 1\nassert solution('2') == 2\nassert solution('3') == 6\n'''\n\nn = int(stdin.readline())\n\npow_1 = 1\npow_2 = 1\npow_3 = 1\n\nfor i in range(n):\n    pow_1 *= (i + 1)\n    pow_2 *= (i + 1)\n    pow_3 *= (i + 1)\n\nprint(pow_1)\nprint(pow_2)\nprint(pow_3)"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"6\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == 6\n\"\"\"\n\nn = int(input())\ns = 0\nfor i in range(1, n + 1):\n    s += i\nprint(s)\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3\n''') == '6'\nassert solution('''\n1\n''') == '1'\nassert solution('''\n5\n''') == '11'\nassert solution('''\n7\n''') == '18'\nassert solution('''\n4\n''') == '10'\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('3\\n') == '6'\n\"\"\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n\nn = int(input().strip())\n\nnums = []\nfor i in range(1, n+1):\n    nums.append(i)\n\nprint(sum(nums))\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n') == '6'\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n') == '6'\n\"\"\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"6\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n\nimport sys\nimport math\n\nn = int(sys.stdin.readline())\n\nsum_number = n * (n + 1) / 2\n\nprint(int(sum_number))\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n3 1\") == \"2\"\nassert solution(\"3 2\\n3 1\") == \"1\"\n\"\"\"\n\nn = int(input())\nlst = list(map(int, input().split()))\n\nalice = 0\nbob = 0\nfor i in range(len(lst)):\n    if i % 2 == 0:\n        alice += lst[i]\n    else:\n        bob += lst[i]\n\nprint(alice - bob)"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n3 1') == 2\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3 1\") == \"2\"\n'''"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 1\") == 2\n\"\"\"\n\nimport sys\n\nassert sys.stdin.readline().strip().split() == ['2', '3', '1']\n\nn = int(sys.stdin.readline().strip())\ncards = sys.stdin.readline().strip().split()\na = [int(x) for x in cards]\n\nans = 0\nfor i in range(len(a)):\n    ans += a[i] * i\n\nprint(ans - sum(a))\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == 2\nassert solution('3 2') == 1\nassert solution('3 3') == 0\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"2\"\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n3 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n1 1\") == \"2\"\nassert solution(\"1 2 3\\n4 1\") == \"2\"\nassert solution(\"4 1\\n3 2 4\") == \"3\"\nassert solution(\"2 4\\n3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\nprint(\"Passed\")\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA') == '2 2'\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\"\n\n\"\"\"\n- \u8003\u5bdf:\n    - \u9806\u5217\u3068\u9006\u9806\u306e\u9577\u3055\u3092\u5168\u90e8\u8a08\u7b97\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u9806\u5217\u306e\u6700\u5f8c\u306b\u4f55\u56de\u9006\u9806\u3092\u3084\u3063\u305f\u304b\u3092\u8003\u3048\u308b\u3053\u3068\u3067\u554f\u984c\u3092\u89e3\u304f\n    - \u4e00\u5fdc\u3001\u9006\u9806\u304c\u6700\u5927\u3067\u3082\u4f55\u56de\u9006\u9806\u3092\u3084\u3063\u305f\u304b\u3092\u4fdd\u5b58\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u9006\u9806\u306e\u9577\u3055\u3092\u6570\u3048\u308b\n    - \u9006\u9806\u306e\u65b9\u304c\u9577\u3044\u5834\u5408\u306f\u3001\u9006\u9806\u306e\u307f\u3067\u89e3\u3051\u308b\n\n- \u89e3\u7b54:\n    1. \u9806\u5217\u306e\u9577\u3055\u3092\u8a08\u7b97\n    2. \u9006\u9806\u306e\u65b9\u304c\u9577\u3044\u5834\u5408\u3001\u9006\u9806\u306e\u307f\u3067\u89e3\u3051\u308b\n    3. \u305d\u308c\u4ee5\u5916\u306f\u9006\u9806\u306e\u9006\u9806\u3068\u540c\u3058\n\"\"\"\nfrom typing import List\n\nn, m = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(m)]\n\nanswer = [0] * n\n\nfor i in range(m):\n    if a[i][0] == 1:\n        answer[a[i][1] - 1] += 1\n    else:\n        answer[a[i][1] - 1] += 1\n        answer[a[i][2] - 1] += 1\n\nprint(m - max(answer))\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nn, m = map(int, input().split())\n\nanswer = [0] * n\npenalty = [0] * n\nfor i in range(m):\n    p, s = input().split()\n    p = int(p) - 1\n    if s == \"AC\":\n        answer[p] += 1\n        penalty[p] += answer[p]\n    else:\n        answer[p] += 1\n\nfor i in range(n):\n    print(answer[i], penalty[i])\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\\n\") == \"2 2\"\n\"\"\"\n\nn, m = [int(s) for s in stdin.split()]\n\ns = stdin.split(\"\\n\")\n\nn_correct = 0\nn_penalties = 0\n\nfor i in range(1, m + 1):\n    tmp = s[i].split()\n    if tmp[1] == \"AC\":\n        n_correct += 1\n        n_penalties += int(tmp[0])\n    else:\n        n_penalties += 1\n\nprint(n_correct, n_penalties)\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n'''\n\nn_m_input = input()\nsplitted_input = n_m_input.split()\nn = int(splitted_input[0])\nm = int(splitted_input[1])"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\"\n\nn, m = list(map(int, stdin.readline().split()))\nprint(n, m)\n\nans_score = 0\npenalty_score = 0\npenalty_list = []\nfor i in range(m):\n    p, s = stdin.readline().split()\n    print(p, s)\n    if s == \"AC\":\n        ans_score += 1\n    else:\n        penalty_list.append(int(p))\n\npenalty_score = sum(penalty_list)\n\nprint(ans_score, penalty_score)\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1\\n4 1 5\\n') == '5'\n\"\"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3 1\n4 1 5\n''') == \"5\"\n\nassert solution('''\n3 2\n4 1 5\n''') == \"5\"\n\nassert solution('''\n3 2\n1 1 2\n''') == \"2\"\n\nassert solution('''\n4 2\n2 3 4 1\n''') == \"3\"\n\nassert solution('''\n4 3\n1 1 2 2\n''') == \"3\""
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n\n3\n2\n1\n\n\"\"\"\n\"\"\"\n2\n3\n1 2 3\n\n\"\"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n\"\"\"\n\n\"\"\"\nOptimised Solution\n\nYour task is to code up and run the algorithm from the first step. \nHere are the first few steps of the algorithm. \n\n1. For each monster, calculate how many times it can be won with a single attack. \n   This is calculated as follows:\n   \n   first_step_algorithm(monster) = monster.health / max(monster.attack, monster.special_attack)\n\n2. If one of the monsters can be won with a single attack, \n   then all of them must be, so we can win with a single attack. \n   So we can just keep a counter for how many times Fennec has done a single attack.\n\n3. But it is possible that one of the monsters can't be won with a single attack, \n   because it has more attack points than the maximum attack points that can be done with a single attack. \n   In this case, the monster can be won by doing two consecutive attacks. \n   So we need to count how many times we've done a single attack and how many times we've done two consecutive attacks.\n\n4. Finally, we can just return the minimum of these two counters.\n\n\"\"\""
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 1\n4 1 5''') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 5\\n1 2 3 4\\n\") == \"5\"\n\"\"\"\n\nimport sys\n\nN, K = list(map(int, sys.stdin.readline().split()))\nh = list(map(int, sys.stdin.readline().split()))\n\nh.sort()\n\ni, j = 0, N - 1\nresult = 0\nwhile i < j:\n    while h[i] <= 0:\n        i += 1\n    while h[j] <= 0:\n        j -= 1\n    result += 1\n    h[i] -= 1\n    h[j] -= 1\n    i += 1\n    j -= 1\n\nresult += K // 2\nK %= 2\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 5') == '5'\n\"\"\""
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 1\n4 1 5''') == \"5\"\nassert solution('''2 1\n2 2''') == \"2\"\nassert solution('''2 3\n2 2 1''') == \"1\"\nassert solution('''2 3\n3 2 2''') == \"1\"\n\n\"\"\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n2 1 1\\n1 3 1\") == \"12\"\nassert solution(\"10 10\\n4 4 2\\n5 6 4\\n1 10 1\") == \"14\"\nassert solution(\"7 7\\n4 5 3\\n5 7 1\\n3 7 2\\n1 7 3\\n7 3 4\") == \"9\"\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\n2 3\\n1 2') == '2'\n\"\"\"\n\nfrom queue import PriorityQueue"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 10 2\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n10\\n2\\n') == '4'\n\"\"\"\n\nN, K = map(int, input().split())\n\nresult = 0\n\nfor x in map(int, input().split()):\n    result += abs(x - K)\n\nprint(result)\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 10\") == \"4\"\nassert solution(\"1 10 2\") == \"6\"\n\"\"\"\n\nN, K = map(int, input().split())\ndist = 0\nfor i in range(N):\n    x, y = map(int, input().split())\n    if x == 0:\n        dist += K - y\n    else:\n        dist += K - y + x\nprint(dist)\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 10 1') == '6'\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 10\\n1 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n10\\n2\\n') == 4\n\"\"\"\n\n\"\"\"\nIn this problem, we're given two numbers N and K.\n\nIn this problem, we're given N balls with x-coordinates, y-coordinates and types.\n\nFor example, given N = 3, K = 5, and x_1 = 0, x_2 = 4, x_3 = 8, y_1 = 1, y_2 = 2, y_3 = 4, then we're given three balls with types:\n\ntype 1 : (x_1, y_1)\ntype 2 : (x_2, y_2)\ntype 3 : (x_3, y_3)\n\nWe're given K robots, each robot has two types.\n\ntype A : (0, 1)\ntype B : (K, 2)\n\nEach robot is initially at coordinates (0, 1) or (K, 2).\n\nSnuke will activate a few of the K robots to collect all the balls. Find the minimum possible total distance covered by robots.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq K \\leq 100\n - 0 < x_i < K\n - All input values are integers.\n\n-----Inputs-----\nInput is given from Standard Input in the following format:\nN\nK\nx_1 x_2... x_N\n\n-----Outputs-----\nPrint the minimum possible total distance covered by robots.\n\n-----Sample Input-----\n3\n5\n0 4 8\n1 2 4\n\n-----Sample Output-----\n8\n\nThere are three balls, each ball is initially at coordinates (0, 1), (4, 2), (8, 4).\n\ntype 1 : (0, 1)\ntype 2 : (4, 2)\ntype 3 : (8, 4)\n\nWe're given K = 5 robots, each robot has two types.\n\ntype A : (0, 1)\ntype B : (K, 2)\n\nEach robot is initially at coordinates (0, 1) or (K, 2).\n\nSnuke will activate a few of the K robots to collect all the balls. Find the minimum possible total distance covered by robots.\n\nIt's clear that the robots should move from the ball with the smallest x-coordinate to the ball with the largest x-coordinate.\n\nTo determine the order in which robots should move, Snuke will use the following algorithm.\n\nAlgorithm:\n\n1. Sort balls by x-coordinate from smallest to largest.\n2. Sort robots by type from type A to type B.\n3. Move robots from smallest ball to largest ball.\n\nSince balls are sorted by x-coordinate and robots are sorted by type, the largest ball will always be the ball with the largest x-coordinate.\n\nSo, the ball with the largest x-coordinate is the ball with the largest y-coordinate as well.\n\nSo, the balls are now sorted in descending order according to y-coordinate.\n\nSo, the balls are now sorted in ascending order according to x-coordinate.\n\nThe robots are then sorted in ascending order according to their type.\n\nThe robots are then sorted in ascending order according to their x-coordinate.\n\nThe balls are now sorted in ascending order according to x-coordinate.\n\nAfter the balls are sorted, the robots are now sorted according to their type.\n\nSince robots are sorted by type, the robots with the type A are the ones with smallest x-coordinate.\n\nSo, the robots with type A are now sorted in ascending order according to x-coordinate.\n\nNow, Snuke collects the balls in ascending order of x-coordinate.\n\nSo, the balls are now sorted in ascending order according to x-coordinate.\n\nThe robots with type B are then sorted in ascending order according to x-coordinate.\n\nSo, the robots with type B are now sorted in ascending order according to x-coordinate.\n\nSo, Snuke collects the balls in ascending order of x-coordinate.\n\nThe total distance covered by robots is the sum of x-coordinates of all balls collected.\n\nSo, the total distance covered by robots is 8.\n\nSo, the minimum possible total distance covered by robots is 8."
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 10 2\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 10 2\") == \"4\"\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline())\nk = int(stdin.readline())\n\nxs = [int(x) for x in stdin.readline().split()]\nxs.sort()\n\nmin_dist = abs(xs[0]) + abs(xs[1]) - abs(xs[1] - xs[0])\nfor i in range(n - 1):\n    min_dist = min(min_dist, abs(xs[i] - xs[i + 1]) + abs(xs[i + 1]) - abs(xs[i + 1] - xs[i]))\n\nprint(min_dist)\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('400 300 220 420') == '520'\nassert solution('600 300 220 420') == '520'\nassert solution('600 300 220 400') == '520'\nassert solution('600 300 100 420') == '520'\nassert solution('600 300 100 400') == '520'\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\nprint(\"Test 1 PASSED\")\n\n---"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('600 300 220 420') == '520'\nprint('Test finished.')"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100 300 200 200') == '400'\nassert solution('200 300 200 100') == '400'\nassert solution('200 300 300') == '600'\nassert solution('100 100 100 100') == '400'\nassert solution('600 300 220 420') == '520'\n\"\"\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('600 300 220 420') == '520'\n\"\"\""
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('600 300 220 420') == '520'\n\"\"\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\"\nfrom math import floor, ceil"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('600 300 220 420') == '520'\n\n\"\"\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('600 300 220 420') == '520'\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('600 300 220 420') == '520'\nassert solution('600 300 200 420') == '600 + 300 = 1200'\nassert solution('1 1 1 1') == '4'\nassert solution('1 0 0 0') == '0'\n\n#####################################################"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\nassert solution(\"2\\n4 4 0 2\") == \"4\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4\\n'\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\nl = [int(i) for i in sys.stdin.readline().strip().split()]\nres = 0\nd = {i: (0, 0) for i in range(n)}\nfor i in range(n):\n    if l[i] == 0:\n        d[0] = (0, 0)\n    else:\n        if l[i] == i + 1:\n            d[i] = (1, 1)\n        else:\n            d[i] = (0, 0)\n        j = l[i] - 1\n        while j > 0 and d[j][0]!= 0:\n            d[j] = (d[j][1] + 1, d[j][0] + d[j][1])\n            j -= 1\n            res += 1\nfor i in d.keys():\n    if d[i][0]!= 0:\n        res += 1\nprint(res % (10 ** 9 + 7))\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 4 0 2\\n\") == \"4\"\n\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == '4'\nassert solution(\"5\\n2 4 4 3\") == '0'\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == '4'\nassert solution(\"3\\n2 4 1\") == '0'\n\"\"\"\n\n\"\"\"\na = [2, 2, 2]"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\nassert solution(\"7\\n0 1 2 3 4 6\") == \"6\"\nassert solution(\"9\\n0 7 2 4 1 6 5 8\") == \"7\"\nassert solution(\"4\\n1 0\") == \"0\"\nassert solution(\"1\\n0\") == \"1\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\">\"+\"\".join([str(i)+\" \" for i in range(5)])+\"<\") == \"1 2 4 5 3\"\n\nprint(solution(\"<\"+input()+\">\"))\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 1\") == \"4\"\nassert solution(\"5 0 2 1 0\") == \"10\"\nassert solution(\"5 4 1 3 4 0\") == \"2\"\nassert solution(\"5 1 3 4 1 2\") == \"4\"\nassert solution(\"6 0 2 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\n\"\"\"\n\nfrom collections import defaultdict\n\nMOD = 10 ** 9 + 7\nN = int(stdin.readline())\nA = [int(x) for x in stdin.readline().split()]\n\ncache = defaultdict(int)\nfor i, a in enumerate(A):\n    cache[a] = i\n\nret = 1\nfor i in range(1, N):\n    ret *= cache[i] - cache[i - 1] + 1\n    ret %= MOD\n\nprint(ret)\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 2 5\") == \"84\"\nassert solution(\"20 2 5\") == \"84\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 1 2\") == \"0\"\nassert solution(\"10 1 1\") == \"0\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n20 2 5\n''') == '84'"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 2 5\") == \"84\"\nassert solution(\"20 2 5\") == \"84\"\nassert solution(\"10 20 2 5\") == \"84\"\nassert solution(\"10 20 5 2\") == \"84\"\nassert solution(\"100 2 20\") == \"84\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20 2 5') == '84'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20 2 5') == \"84\"\n\"\"\"\n\n\n\"\"\"\n4 4\n20 5 6\n25 5\n2 3\n3 2\n1 2\n5 1\n8 8\n1 2 3 4\n1 2 3 4 5\n\"\"\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\"\"\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20 2 5\\n') == '84'\n\"\"\"\n\nfrom math import log\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20 2 5') == '84'\nprint(solution('20 2 5'))\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 2 5\") == \"84\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100\") == \"ABC100\"\nassert solution(\"998\") == \"ABC998\"\nassert solution(\"100\") == \"ABC100\"\n\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100') == 'ABC100'\n\"\"\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100') == 'ABC100'"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"\n\nimport sys\n\nN = sys.stdin.readline()"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100\") == \"ABC100\"\nassert solution(\"999\") == \"ABC999\"\n\"\"\"\n\nn = int(stdin.readline().strip())\n\nstr_n = str(n)"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100\") == \"ABC100\"\nassert solution(\"543\") == \"ABC543\"\nassert solution(\"18\") == \"ABC18\"\nassert solution(\"812\") == \"ABC812\"\nassert solution(\"123\") == \"ABC123\"\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100') == 'ABC100'\n\n\"\"\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100') == 'ABC100'\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"\nimport sys\n\na, b = sys.stdin.readlines()\na = int(a)\nb = int(b)\n\ndate_list = []\nfor year in range(2018,2019):\n    for month in range(1,13):\n        for day in range(1,32):\n            if month == a and day == b:\n                date_list.append(\"{}-{}-{}\".format(year,month,day))\nprint(len(date_list))"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"3 4\") == \"0\"\nassert solution(\"4 1\") == \"2\"\nassert solution(\"6 2\") == \"5\"\nassert solution(\"1 5\") == \"6\"\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5') == '5'\nassert solution('4 4') == '0'\nassert solution('1 1') == '0'\nassert solution('2 3') == '0'\nassert solution('3 4') == '1'\n\"\"\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"1 1\") == \"365\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"12 31\") == \"0\"\nassert solution(\"4 4\") == \"90\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5\\n') == '5'\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('2 1') == '1'\nassert solution('1 2') == '-1'\n\n'''\n\nfrom collections import Counter\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"5 31\") == \"5\"\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"6 8\") == \"3\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"1\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n3\\n1\\n2\\n\") == '2'\nassert solution(\"2\\n1\\n1\\n\") == '-1'\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1\\n2\\n') == '2'\nassert solution('3\\n3\\n1\\n') == '-1'\nassert solution('3\\n2\\n1\\n') == '-1'\nassert solution('3\\n3\\n2\\n') == '2'\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1\\n2\\n') == '2'\nassert solution('3\\n1\\n1\\n') == '-1'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\") == '1\\n2'\nassert solution(\"1\\n2\\n3\") == '1\\n2\\n3'\nassert solution(\"1\\n2\\n3\\n2\") == '2'\nassert solution(\"1\\n2\\n3\\n4\") == '2'\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nfrom sys import stdin\n\n\nclass Button:\n    def __init__(self, N: int) -> None:\n        self.N = N\n        self.buttons = [False for i in range(N)]\n\n    def press(self, index: int) -> None:\n        self.buttons[index - 1] = not self.buttons[index - 1]\n\n    def get_lighted(self, index: int) -> bool:\n        return self.buttons[index - 1]\n\n    def get_lighted_count(self) -> int:\n        return sum(self.buttons)\n\n    def get_remaining_count(self) -> int:\n        return self.N - sum(self.buttons)\n\n    def get_remaining_buttons(self) -> list:\n        return [i for i, is_pressed in enumerate(self.buttons, 1) if is_pressed == False]\n\n    def is_lighted_up(self, index: int) -> bool:\n        return self.get_lighted(index) == False\n\n    def is_lighted_up_count(self) -> int:\n        return sum([1 for i in self.buttons if i == False])\n\n    def is_lighted_up_buttons(self) -> list:\n        return [i for i, is_pressed in enumerate(self.buttons, 1) if is_pressed == False]\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n3\\n1\\n2\\n\") == \"2\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1\\n2\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n3\\n1\\n2\\n\") == \"2\"\nassert solution(\"3\\n3\\n1\\n2\\n\") == \"2\"\n\n-----Explanation-----\nIn the first example, Takahashi can press button 2 in the second press.\nIn the second example, Takahashi can press button 2 in the first press and then press button 1 in the second press.\nIn the third example, Takahashi can press button 1 in the first press, then press button 2 in the second press, and then press button 3 in the third press.\nIn the fourth example, Takahashi can press button 1 in the first press, then press button 2 in the second press, and then press button 3 in the third press, and then press button 2 in the fourth press.\nIn the fifth example, Takahashi can press button 1 in the first press, then press button 2 in the second press, and then press button 3 in the third press, and then press button 1 in the fourth press.\nIn the sixth example, Takahashi can press button 1 in the first press, then press button 2 in the second press, and then press button 3 in the third press, and then press button 2 in the fourth press, and then press button 1 in the fifth press.\nTherefore, in the second example, button 2 can be pressed two times, and in the third example, button 2 can be pressed three times, and in the sixth example, button 2 can be pressed five times.\n\n\"\"\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n3\\n1\\n2\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1\\n2\\n\") == \"2\"\nassert solution(\"3\\n2\\n1\\n\") == \"-1\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nnum = [0] + list(map(int, sys.stdin.readline().split()))\n\nbuttons = []\nfor i in range(1, N + 1):\n    if num[i] == 1:\n        buttons.append(i)\n\nresult = float('inf')\nfor i in range(len(buttons) - 1):\n    for j in range(i + 1, len(buttons)):\n        result = min(result, abs(buttons[i] - buttons[j]))\n\nprint(result if result < float('inf') else -1)"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\nassert solution(\"3\\n6\\n2\\n6\\n10\\n11\\n15\\n17\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1\\n3\\n5\\n7\") == \"2\"\nassert solution(\"4\\n1\\n3\\n5\\n7\\n8\\n9\") == \"1\"\nassert solution(\"4\\n1\\n3\\n5\\n7\\n8\\n9\\n10\") == \"0\"\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"\n\nn = int(input())\ncount = 0\nnum = set()\nfor i in range(n):\n    num.add(int(input()))\nfor i in range(n):\n    num.remove(int(input()))\nprint(len(num))\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n6\\n2\\n6') == '1'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\n---\n---\n## **[Try it yourself]**\n\n**4. \u5186\u5468\u7387\u306e\u5c0f\u6570\u70b9\u3092\u542b\u3080\u6574\u6570\u306e\u9593\u306b\u6307\u6570\u8868\u8a18\u3092\u3064\u3051\u308b**\n\n- 1e9 = 1 * 10 ** 9\n\n**\u30d2\u30f3\u30c8**\n\n```python\nfloat(f\"{10**i:.3g}\")"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n2\\n4\\n') == '4'\nassert solution('1\\n2\\n1\\n') == '0'\nassert solution('1\\n2\\n3\\n') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == '1'\nassert solution(\"1\\n1\\n1\\n1\") == '0'\nassert solution(\"1\\n2\\n3\\n4\") == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n6\\n2\\n6') == '1'\nassert solution('3\\n5\\n10\\n20') == '2'\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\nassert solution(\"5\\n4\\n3\\n6\\n1\\n2\\n6\\n4\") == \"2\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\\n4\\n3\\n2\\n1\\n5\\n4\\n3\\n2\\n1\") == \"10\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\\n4\\n3\\n2\\n1\\n5\\n4\\n3\\n2\\n1\") == \"9\"\n\"\"\"\n\n\"\"\"\n\ubaa8\ub4e0 \uc22b\uc790\ub97c \uac01\uac01 \ub9ac\uc2a4\ud2b8\uc5d0 \uc800\uc7a5\ud55c \ud6c4 \ucc98\ub9ac \ud558\ub294 \uac83\uc774 \ud3ec\uc778\ud2b8\uc785\ub2c8\ub2e4.\n\uc2dc\uac04\ubcf5\uc7a1\ub3c4\ub97c \uc904\uc774\uae30 \uc704\ud574 \uc790\ub8cc\uad6c\uc870\ub97c \uc801\ub2f9\ud55c \ud615\ud0dc\ub85c \uc791\uc131\ud558\ub294 \uac83\uc774 \ud3ec\uc778\ud2b8\uc785\ub2c8\ub2e4.\n\n\ub0b4\uc7a5 \uc790\ub8cc\uad6c\uc870\ub85c set\uc744 \uc0ac\uc6a9\ud558\uc600\uc9c0\ub9cc \uc2dc\uac04\ubcf5\uc7a1\ub3c4\uac00 \uae09\uaca9\ud788 \ub298\uc5b4\ub098\ub294 \ubb38\uc81c\ub97c \uc6b0\uc120 \ud655\uc778\ud558\uace0 set\uc744 \uc0ac\uc6a9\ud558\uc600\uc2b5\ub2c8\ub2e4.\n\ubc18\ubcf5\ubb38\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc774\ud130\ub7ec\ube14\ub85c \uc785\ub825\ubc1b\uc740 \uc22b\uc790\ub97c \ud558\ub098\uc529 \uc22b\uc790\ub97c \uaebc\ub0b4\uc11c \ub9ac\uc2a4\ud2b8\ub85c \ubcc0\ud658\ud558\uc5ec \ubaa8\ub450 \uc138\ud305\ud558\ub294 \uac83\uc774 \uac00\uc7a5 \ud6a8\uc728\uc801\uc774\uace0 \ube60\ub974\uac8c \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2 3 4\") == \"2\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == '1'\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 3, \"This program requires exactly two command line arguments\"\n\nn, k = map(int, sys.argv[1:])\na = [int(i) for i in sys.stdin.read().split()]\nassert len(a) == n\n\nprint(k - max(a.count(i) for i in a))\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\"\n\n\"\"\"\nIf there are k different numbers written on the n balls, then this question is easy: we only need to check k numbers.\nFor example, if there are k different numbers written on the n balls, then k <= n.\nTo see that this is an easy problem, we can just try all k integers from 1 to n and check if they are written on the n balls.\nIf we could use the space complexity O(k), then the time complexity is O(nk).\n\nIf we could use the space complexity O(n), then the time complexity is O(n^2).\n\nIf we could use the space complexity O(1), then the time complexity is O(n^3).\n\nSo, if we want to use the space complexity O(1), we need to use the most powerful technique: binary search.\nThe most powerful technique is that we try a number x and see if we can find x - 1 and x + 1 on the n balls.\n\nFor the last three questions, we can use binary search to try k numbers.\n\n\"\"\"\n\n\"\"\"\nk <= n:\nthe number of balls has to be larger than the number of different numbers we can choose from.\nthe number of balls has to be larger than k.\nso the number of balls has to be at least k + 1.\n\nk > n:\nthe number of balls has to be smaller than the number of different numbers we can choose from.\nthe number of balls has to be smaller than n - k.\nso the number of balls has to be at least n - k.\n\nk == n:\nthe number of balls has to be exactly n.\n\nn - k + 1 <= k <= n\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_1) == '1'\nassert solution(test_input_2) == '2'\nassert solution(test_input_3) == '4'\n\n\"\"\"\n\nimport unittest\n\n\nclass SolutionTest(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution(test_input_1), '1')\n\n    def test_2(self):\n        self.assertEqual(solution(test_input_2), '2')\n\n    def test_3(self):\n        self."
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == 1\n\"\"\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"5 2\\n1 1 2 2 5\"\n) == 1\n\"\"\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 4\\n4 6 3\\n0 0 0\") == \"Yes\"\nassert solution(\"5 1 4\\n4 6 3\\n0 0 0\\n0 0 0\") == \"No\"\nassert solution(\"2 1 1\\n0 0 0\") == \"Yes\"\nassert solution(\"2 1 1\\n0 0 0\\n0 0 0\\n0 0 0\") == \"No\"\n\"\"\"\n\nimport math\n\nclass Deer:\n    def __init__(self, x: int, y: int, t: int):\n        self.x = x\n        self.y = y\n        self.t = t\n\nclass Field:\n    def __init__(self, n: int):\n        self.n = n\n        self.deers = []\n        self.time = 1\n        self.initial = 1\n        self.travelled = 0\n        self.pos = (0, 0)\n        self.adjacent = {\n            (0, 0): set(),\n            (0, 1): set(),\n            (1, 0): set(),\n            (0, -1): set(),\n        }\n\n    def add_deer(self, deer: Deer):\n        self.deers.append(deer)\n\n    def move_deer(self, deer: Deer):\n        if deer.t <= self.time:\n            return\n        \n        direction = math.floor((deer.x + deer.y) / 2)\n        self.adjacent[(deer.x, deer.y)].add((deer.x, deer.y, deer.t))\n        self.adjacent[(deer.x, deer.y)].add((deer.x + direction, deer.y + direction, deer.t + 1))\n        self.adjacent[(deer.x, deer.y)].add((deer.x - direction, deer.y - direction, deer.t + 1))\n        deer.x += direction\n        deer.y += direction\n        deer.t += 1\n        self.travelled += 1\n\n    def run(self):\n        while self.time <= self.n:\n            for deer in self.deers:\n                self.move_deer(deer)\n\n            if self.initial == 0:\n                if self.pos not in self.adjacent[self.pos]:\n                    self.pos = (self.pos[0] + 1, self.pos[1] + 1)\n                    self.travelled += 1\n                    if self.pos[0] >= self.n:\n                        self.pos = (0, self.pos[1] + 1)\n                        self.initial = 1\n                    if self.pos[1] >= self.n:\n                        self.pos = (self.pos[0] + 1, 0)\n                        self.initial = 1\n\n            elif self.initial == 1:\n                if self.pos not in self.adjacent[self.pos]:\n                    self.pos = (self.pos[0] - 1, self.pos[1] - 1)\n                    self.travelled += 1\n                    if self.pos[0] < 0:\n                        self.pos = (self.n - 1, self.pos[1] - 1)\n                        self.initial = 0\n                    if self.pos[1] < 0:\n                        self.pos = (self.pos[0] - 1, self.n - 1)\n                        self.initial = 0\n\n            self.time += 1\n\n        return self.travelled"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 2\\n6 1 1') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\\n6 1 1\") == \"Yes\"\nassert solution(\"4 6 3\\n4 6 3\") == \"No\"\nassert solution(\"4 10 4\\n2 5 1\\n2 5 1\") == \"No\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n3 1 2\\n6 1 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 0 0 1\") == \"Yes\"\nassert solution(\"5\\n1 0 0 1 1\") == \"Yes\"\nassert solution(\"6\\n1 0 0 1 1 1\") == \"Yes\"\nassert solution(\"7\\n1 0 0 1 1 1 1\") == \"Yes\"\nassert solution(\"8\\n1 0 0 1 1 1 1 1\") == \"No\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 6\\n3 1 2\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\\n\") == \"Yes\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 1 2\\n5 1 1\\n6 1 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 4 1\") == \"Yes\"\nassert solution(\"4 2 4 2\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3') == 2\n\"\"\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3\\n\") == \"2\"\n\n\"\"\"\n\n\"\"\"\n2. Determine the maximum value of a + b + |a-b|, where a, b are integers.\n\"\"\"\n\na = int(input())\nb = int(input())\n\nprint(a + b + abs(a - b))\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3\") == \"2\"\nprint(solution(\"2 2\"))\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3\") == \"2\"\nassert solution(\"2 4\") == \"4\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == 2\n\"\"\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3') == '2'\nassert solution('3 7') == '4'\n\"\"\"\nimport math"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3') == '2'\n\"\"\"\n\na, b = map(int, stdin.split(' '))\n\nprint(round(a / 2) + b / 2)\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''8 10\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n3 8\n4 7\n4 8\n5 6\n5 7\n''') == '''4'''\n\nassert solution('''5 3\n1 2\n2 3\n3 4\n4 5\n''') == '''0'''\n\nassert solution('''7 10\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n3 8\n4 7\n4 8\n5 6\n''') == '''0'''\n\nassert solution('''8 6\n2 4\n4 5\n4 6\n5 7\n5 8\n''') == '''2'''\n\nassert solution('''8 10\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n3 8\n4 7\n4 8\n5 6\n''') == '''0'''"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n\") == \"4\"\n\"\"\"\nfrom functools import reduce"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n5 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\n''') == '4'\n\nassert solution('''\n5 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\n''') == '0'\n\nassert solution('''\n2 2\n1 2\n2 1\n''') == '0'\n\nassert solution('''\n2 2\n1 2\n2 1\n''') == '1'\n\n\"\"\"\nSolution:\n\nWe use BFS to traverse the graph in levels, starting with the vertices,\nthen moving to the neighbours of those vertices.\n\nWe have to use set() in order to keep track of the visited vertices.\nIf we keep a set of the visited vertices we can be sure that we do not end\nup in a loop with a vertex we have already visited before.\n\nThe time complexity is O(|V| + |E|), where |V| is the number of vertices,\nand |E| is the number of edges.\n\nThe space complexity is O(|V| + |E|), where |V| is the number of vertices,\nand |E| is the number of edges.\n\"\"\"\n\nfrom collections import deque\nfrom typing import Deque, List, Set\nfrom unittest.mock import patch\n\nfrom pytest import raises\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, m = [int(s) for s in stdin.split()]\n        if n == 1 or m == 0:\n            return \"0\"\n        edges: List[List[int]] = [None] * m\n        for i in range(m):\n            edges[i] = [int(s) - 1 for s in stdin.split(\":\")[1].split()]\n        vertices: Set[int] = set()\n        for e in edges:\n            vertices.add(e[0])\n            vertices.add(e[1])\n        if len(vertices) < n:\n            return \"0\"\n        visited: Set[int] = set()\n        q: Deque[int] = deque()\n        for i in range(n):\n            if i not in visited:\n                q.append(i)\n                visited.add(i)\n                while q:\n                    v: int = q.popleft()\n                    for e in edges:\n                        if e[0] == v:\n                            if e[1] not in visited:\n                                visited.add(e[1])\n                                q.append(e[1])\n                        elif e[1] == v:\n                            if e[0] not in visited:\n                                visited.add(e[0])\n                                q.append(e[0])\n        return str(len(edges) - len(visited))\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 3\\n2 3\") == \"4\"\n\"\"\"\n\nfrom typing import List\nimport sys"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('4 5') == ''\nassert solution('1 3') == ''\nassert solution('2 7') == ''\nassert solution('4 6') == ''\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 3\\n2 7') == '4'\nassert solution('7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7') == '4'\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7') == '4'\nassert solution('7 8\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n7 1') == '8'\nassert solution('7 9\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n7 1') == '9'\nassert solution('7 10\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n7 1') == '10'\n\"\"\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 3\") == \"4\"\n\n\"\"\"\n\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\n''') == '4'\n\nassert solution('''\n7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\n''') == '0'\n\nassert solution('''\n7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\n''') == '0'\n\nassert solution('''\n7 7\n1 3\n2 7\n3 4\n4 5\n5 6\n6 7\n''') == '0'\n\nassert solution('''\n8 8\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n7 8\n''') == '0'"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\", 'Test 1'\nassert solution(\"2 2\\n1 2\") == \"0\", 'Test 2'\nassert solution(\"4 2\\n1 4\") == \"1\", 'Test 3'\n\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 7 5') == '5', 'Incorrect output'\nassert solution('1 1 1') == '1', 'Incorrect output'\nassert solution('10 10 10') == '10', 'Incorrect output'\n\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 7 5') == '7'\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 7 5') == '7'\n\"\"\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 5') == '7'\n'''\n\nA, B, C = map(int, input().split())"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 7 5') == '7'\nassert solution('7 7 7') == '7'\nassert solution('5 7 2') == '2'\n\"\"\"\nimport ast"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 7 5\") == \"7\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"5 1 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7 5\") == '7'\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7 5\") == \"7\"\nassert solution(\"5 5 5\") == \"5\"\nassert solution(\"5 5 7\") == \"7\"\nassert solution(\"7 7 7\") == \"7\"\nassert solution(\"7 7 5\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 7 5\") == \"5\"\nassert solution(\"5 6 6\") == \"6\"\nassert solution(\"2 4 6\") == \"6\"\nassert solution(\"2 6 4\") == \"6\"\nassert solution(\"5 6 5\") == \"5\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 5\") == \"7\"\nprint(solution(\"5 7 5\"))\n\n\"\"\""
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n\"\"\"\n\nimport sys\n\nA, B, C, D, E, F = list(map(int, sys.stdin.readline().strip().split()))"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n\"\"\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n\nA, B, C, D, E, F = (int(i) for i in stdin.split())\n\nfor i in range(F, 1, -1):\n    if i <= C:\n        if (E * (A + B) + (100 - i) * C) // 100 * i <= F:\n            break\n    else:\n        if (E * (A + B) + (100 - i) * C) // 100 * i <= F:\n            break\n\nx = (E * (A + B) + (100 - i) * C) // 100 * i"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n\"\"\"\n\n\"\"\"\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\nassert solution('1 1 1 1 1 1') == '-1 -1'\nassert solution('1 2 3 4 5 6') == '-1 -1'\nassert solution('1 2 3 4 5 6 7') == '-1 -1'\n\"\"\"\n\nA, B, C, D, E, F = map(int, stdin.split())\n\nsugar = 100 * B // (A + B)\nwater = (100 * A) // (A + B)\n\nwater += (C * D) // (A + B)\nsugar += (C * D) // (A + B)\n\nwater += (E * F) // (A + B)\nsugar += (E * F) // (A + B)"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\""
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n\"\"\"\n\nimport sys\n\na, b, c, d, e, f = map(int, sys.stdin.read().split())\n\nsugar_water = 100 * (b / (a + b))\nsugar_water_max = max(0, sugar_water - d)\n\nsugar = 0"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == 'i18n'\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\nprint(solution(\"internationalization\"))\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\"\n\ns = input().strip()\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('internationalization') == 'i18n'"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('pot\\ntop') == 'YES'\nassert solution('top\\npot') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"pot\"\n) == \"YES\"\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n\n-----Problem-----\nGiven a string with N lines, each line having length of M, the task is to write a program to rotate the given string by 180 degrees.\n\n-----Solution-----\nrotate_string(s):\n    i=0\n    j=len(s)-1\n    while i<=j:\n        temp=s[i]\n        s[i]=s[j]\n        s[j]=temp\n        i+=1\n        j-=1\n    return s\n\nprint(rotate_string(s))\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('pot\\ntop') == 'YES'\nassert solution('pot\\npot') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"pot\", \"top\") == \"YES\"\nassert solution(\"top\", \"pot\") == \"YES\"\nassert solution(\"grass\", \"top\") == \"NO\"\n\n'''\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"YES\"\nassert solution(\"tsop\") == \"NO\"\nassert solution(\"kpj\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'NO'\n\"\"\"\n\nfrom typing import Tuple\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aaa') == 'a'\nassert solution('ab') == 'a'\nassert solution('aba') == 'b'\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aba') == 'b'\nassert solution('abcb') == 'cb'\nassert solution('abccb') == 'bb'\n\"\"\""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aba') == 'b'\nassert solution('abab') == 'bab'\nassert solution('abcde') == 'bcd'\nassert solution('aabbcc') == 'abcc'\nassert solution('abc') == 'abc'\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"abab\") == \"abab\"\nassert solution(\"abc\") == \"abc\"\n\"\"\"\nimport heapq\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"abac\") == \"bac\"\n\"\"\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == 'b'\nassert solution(\"abaa\") == 'ba'\nassert solution(\"abab\") == 'ab'\n\"\"\""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"b\"\n\"\"\"\n\nimport collections\nimport itertools"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a) == b\n\n\"\"\""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aba') == 'b'\nassert solution('abab') == 'b'\nassert solution('abc') == 'a'\nassert solution('abac') == 'ac'\nassert solution('abaca') == 'ca'\n\"\"\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aba') == 'b'\nassert solution('abab') == 'bab'\nassert solution('a') == 'a'\nassert solution('aaa') == 'aa'\nassert solution('babaa') == 'aba'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 3\\n1 1 1\\n2 2 3\") == \"9\"\n\"\"\"\n\nfrom math import ceil\nfrom typing import Dict, List, Tuple, Set\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\""
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4 2\\n2 1 1\\n3 3 4\\n') == '9'\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\""
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4 2\\n2 1 1\\n3 3 4') == '9'\n\"\"\"\n\nfrom sys import stdin\nfrom collections import deque\n\nstdin = stdin.read().split('\\n')"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\""
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\\n\") == \"9\"\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\\n\") == 9\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n3\n6 5 1\n1 10 1\n''') == '12\\n11\\n0'\n\n\"\"\"\n\nimport math\n\nN = int(input())\n\nc_s_f = [tuple(map(int, input().split(' '))) for _ in range(N - 1)]\nc_s_f.append(tuple(map(int, input().split(' '))))\n\nc_s_f = sorted(c_s_f, key=lambda x: x[1])"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n6 5 1\") == \"12\\n11\\n0\"\n\"\"\"\n\nimport sys\nfrom typing import NamedTuple"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5 1\\n1 10 1\") == \"12\\n11\\n0\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 10 1\\n\") == \"12\\n11\\n0\\n\"\n\"\"\"\n\nn = int(stdin.readline())\nt = []\n\nfor _ in range(n - 1):\n    t.append(list(map(int, stdin.readline().split())))\n\nt.append(list(map(int, stdin.readline().split())))\n\ns, f = [0], [0]\nfor a, b in t:\n    s.append(a + s[-1])\n    f.append((b * f[-1]) % (a * b))\n\nfor i in range(1, n):\n    print((s[i] - s[i - 1]) % (a * b))"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\n\"\"\"\n\n\"\"\"\nSolution Explanation\nhttps://www.youtube.com/watch?v=0V-A_E4X3vI&t=4s&ab_channel=CodeStories\n\nSolution 1\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 5\\n6 9 8\\n\") == \"12\\n11\\n0\"\n\n\"\"\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 0 2\\n0 10 5\") == \"10\"\nassert solution(\"3\\n0 0 0\\n0 10 5\\n0 11 5\") == \"0\"\n\"\"\""
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n6 5 1\n1 10 1\n\"\"\") == '12\\n11\\n0'\nprint(\"Test 1 successful.\")\n\nassert solution(\"\"\"\n4\n10 2 6\n1 10 1\n\"\"\") == '17\\n11\\n0'\nprint(\"Test 2 successful.\")\n\nassert solution(\"\"\"\n7\n4 6 1\n2 10 1\n3 10 1\n4 10 1\n5 10 1\n6 10 1\n7 10 1\n\"\"\") == '24\\n21\\n19\\n18\\n17\\n16\\n15\\n14\\n12\\n11\\n10\\n9\\n8\\n7\\n6\\n5\\n4\\n3\\n2\\n1\\n0'\nprint(\"Test 3 successful.\")\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n1 1\\n3 2\") == '12\\n11\\n0'\n\"\"\"\n\nn = int(input())\narr = []\nfor i in range(n):\n    arr.append(list(map(int, input().split())))\narr.sort(key=lambda x: x[1])\nend = arr[0][1]\ndic = {end: 0}\nfor i in range(1, n):\n    if arr[i][0] > end:\n        dic[arr[i][1]] = arr[i][0] - end\n        end = arr[i][1]\n        dic[end] = 0\n    else:\n        dic[arr[i][1]] = 0\nprint(dic[0] + 1 if dic[0] else 0)\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 10 1\\n\") == \"12\"\nassert solution(\"3\\n6 5 1\\n\") == \"12\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n*\\n.*\") == \"*.\\n*.\"\nprint(solution(\"3 3\\n*\\n*\\n*\\n*\"))\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n*\\n.*') == '*\\n.*\\n.*'\nassert solution('1 1\\n.') == '.'\nassert solution('5 5\\n..*..') == '.**.*'\nassert solution('4 4\\n.**.\\n.*..\\n*.*.') == '*.*.*.\\n*.*.*.'\nassert solution('2 3\\n*\\n.*') == '*.*'\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n*.\\n.*\") == \"*.\\n.*\"\nassert solution(\"3 3\\n.*\\n.*\\n*.\") == \"*.\\n.*\\n.*\\n.*\"\nassert solution(\"3 3\\n.*\\n.*\\n.*\\n.*\") == \".*.\\n.*\\n.*\\n.*\\n.*\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n*\\n.*\") == \"*\\n*\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('AA') == 'AA'\nassert solution('AAA') == 'AAAA'\nassert solution('AAAA') == 'AAAAAA'"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"2 2\n*.\n.*\n\"\"\") == \"\"\"*.\n.*\n\"\"\"\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n.*\\n.') == '.*\\n.*\\n.*\\n.*\\n'\n\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\\n2 2\\n*.\\n.*\") == '\\n*.\\n.*\\n.*\\n.*\\n'\n\"\"\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n*\\n.*') == '*\\n.*\\n.*\\n.*'\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n.*\\n.*\") == \".*\\n.*\"\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n1\n2\n3''') == 'YES'\nassert solution('''5\n2\n4\n6\n1\n3''') == 'YES'\nassert solution('''5\n2\n1\n3\n5\n4''') == 'NO'\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443 s \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0435\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0432 \u0441\u0442\u043e\u043b\u0431\u0438\u043a.\n\n\u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043c\u0435\u0442\u043e\u0434 format.\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"5\\n\"\n    \"2 6 1 4 5\"\n) == \"YES\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n2 6 1 4 5''') == 'YES'\nassert solution('''5\n2 6 1 4 5''') == 'YES'\nassert solution('''5\n2 6 1 4 5''') == 'YES'\nassert solution('''5\n2 6 1 4 5''') == 'YES'\nassert solution('''5\n2 6 1 4 5''') == 'YES'\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 6 1 4 5') == 'YES'\nassert solution('5 6 1 4 5') == 'YES'\nassert solution('2 3 1 4 5') == 'NO'\nassert solution('5 5 5 5') == 'NO'\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == 'YES'\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\nassert solution(\"5\\n2 6 1 4 5 2\") == \"NO\"\nassert solution(\"5\\n2 6 1 5 4\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\nassert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"3\"\nassert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"4\"\nassert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"1\"\nassert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\n\nprint(solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\"))\n\"\"\"\nimport sys\n\n_INPUT_LINES = sys.stdin.read().splitlines()\nINPUT_LINES_COUNTS = len(_INPUT_LINES)\nTEST_CASES = INPUT_LINES_COUNTS // 2"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\") == \"2\"\nassert solution(\"5\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\") == \"4\"\n\"\"\"\n\n\nfrom typing import List, Any\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\\n3\\n4\\n1\\n2\"\n\"\"\"\n\n\nimport math\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '2'\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '3'\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '4'\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '1'\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '2'\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n    \"\"\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '2'\n\nassert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '3'\n\nassert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '4'\n\nassert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '1'\n\nassert solution('5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '2'"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"3\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"4\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"1\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '2'\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '3'\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '4'\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '1'\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '2'\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n8\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\nassert solution(\"5\\n8\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"3\"\nassert solution(\"5\\n8\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"4\"\nassert solution(\"5\\n8\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"1\"\nassert solution(\"5\\n8\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n8\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\nassert solution(\"5\\n8\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"3\"\nassert solution(\"5\\n8\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"4\"\nassert solution(\"5\\n8\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"1\"\nassert solution(\"5\\n8\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\") == \"3\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"22 5\") == \"5\"\nassert solution(\"987 13\") == \"77\"\n\"\"\""
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n4\n7 3\n1 5\n22 5\n987 13\n''') == '3\n1\n5\n77'''\n    return 'Not yet implemented'"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\\n\") == \"3\"\n\"\"\"\n\n\nimport sys\nimport io\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 3\\n1 5\\n22 5\\n987 13\\n') == '3'\nassert solution('7 3\\n1 5\\n22 5\\n987 13\\n') == '1'\nassert solution('7 3\\n1 5\\n22 5\\n987 13\\n') == '5'\nassert solution('7 3\\n1 5\\n22 5\\n987 13\\n') == '77'\nassert solution('7 3\\n1 5\\n22 5\\n987 13\\n') == '3'\n\n\"\"\""
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4\\n5 6\") == '2'\nassert solution(\"1 5\\n22 5\") == '1'\n\"\"\""
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"3\"\nassert solution(\"5 3\\n1 5\\n22 5\\n987 13\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\") == \"3\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"22 5\") == \"5\"\nassert solution(\"987 13\") == \"77\"\n\"\"\""
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"3\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"1\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"5\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"77\"\n\"\"\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '1'\nassert solution('2\\n1') == '2'\nassert solution('2\\n1\\n') == '3'\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 5\\n22 5\\n987 13\") == \"3\"\nassert solution(\"2 2\\n4 5\\n77 5\") == \"1\"\nassert solution(\"11 5\\n1 5\\n11 5\\n121 5\") == \"5\"\n\n\"\"\"\n\n\nfrom math import ceil\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 abca') == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution('4 2 codeforces') == '0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0'\nassert solution('4 2 codefor') == '0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0'\n\nassert solution('10 5 abcde') == '0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0'\nassert solution('10 5 codeforces') == '2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\nassert solution(\"codeforce\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\""
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"2 1 1 2 9 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"26 10 1 2 3 5 10 5 9 4\"\nassert solution(\"10 2 1 3 5 10 5 9 4\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n\n\n\"\"\""
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"26 10 1 2 3 5 10 5 9 4\"\nassert solution(\"codeforces\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n\n\"\"\""
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \"\nassert solution(\"codeforces\") == \"2 1 1 2 9 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2 \"\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"26 10 1 2 3 5 10 5 9 4 \"\n\n\"\"\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 0\"\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\nassert solution(\"10 10 1 2 3 5 10 5 9 4\") == \"26 10 10 1 2 3 5 10 5 9 4\""
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"26 10\"\n\"\"\""
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"codeforces\"\nassert solution(\"abca\") == \"a b c a\"\nassert solution(\"codeforcse\") == \"codeforces\"\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 0\"\nassert solution(\"qwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnmqwertyuiopl"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 6\\n1 999999999\\n2 2 5\") == \"0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4\"\nassert solution(\"1 1 1\\n1 1 1\") == \"0\\n0\\n0\\n0\\n0\"\nassert solution(\"4 3 6\\n4 3 6\") == \"0\\n0\\n0\\n0\\n0\"\nassert solution(\"1 1 1\\n1 1 1\") == \"0\\n0\\n0\\n0\\n0\"\nassert solution(\"3 3 4\\n3 3 4\") == \"0\\n0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 4\\n10 20 30\\n5 5 5\") == \"0\"\nassert solution(\"1 1000000000 1000000000\\n1 1000000000 999999999\") == \"1999999994\"\nassert solution(\"3 2 5\\n3 2 6\") == \"2\"\nassert solution(\"3 3 4\\n10 20 30\\n5 5 5\") == \"0\"\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 2\\n1 2 3\\n1 3 2') == '0\\n0\\n0\\n0'\nassert solution('4 3 2\\n1 2 3\\n1 3 2\\n1 2 3') == '36\\n0\\n0\\n0'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 5\") == \"0\"\nassert solution(\"3 3 4\") == \"36\"\nassert solution(\"1 1000000000 1000000000\") == \"1999999994\"\nassert solution(\"3 2 5\") == \"2\"\nassert solution(\"3 2 6\") == \"4\"\n\nprint(solution(stdin))\n\n\n-----Explanation-----\n\nExample test case #1: The first friend stays at the position $x = 3$ initially. The second friend stays at the position $x = 4$ initially. The third friend stays at the position $x = 5$ initially. The total pairwise distance is $|3 - 4| + |3 - 5| = 0$.\n\nTest case #2: The first friend stays at the position $x = 10$ initially. The second friend stays at the position $x = 20$ initially. The third friend stays at the position $x = 30$ initially. The total pairwise distance is $|10 - 20| + |10 - 30| = 36$.\n\nTest case #3: The first friend stays at the position $x = 5$ initially. The second friend stays at the position $x = 5$ initially. The third friend stays at the position $x = 5$ initially. The total pairwise distance is $|5 - 5| = 0$.\n\nTest case #4: The first friend stays at the position $x = 2$ initially. The second friend stays at the position $x = 4$ initially. The third friend stays at the position $x = 3$ initially. The total pairwise distance is $|2 - 4| + |2 - 3| = 2$.\n\nTest case #5: The first friend stays at the position $x = 1$ initially. The second friend stays at the position $x = 1000000000$ initially. The third friend stays at the position $x = 999999999$ initially. The total pairwise distance is $|1 - 1000000000| + |1 - 999999999| = 1999999994$.\n\nTest case #6: The first friend stays at the position $x = 3$ initially. The second friend stays at the position $x = 2$ initially. The third friend stays at the position $x = 6$ initially. The total pairwise distance is $|3 - 2| + |3 - 6| = 2$.\n\nTest case #7: The first friend stays at the position $x = 3$ initially. The second friend stays at the position $x = 2$ initially. The third friend stays at the position $x = 5$ initially. The total pairwise distance is $|3 - 2| + |3 - 5| = 4$.\n\nTest case #8: The first friend stays at the position $x = 3$ initially. The second friend stays at the position $x = 2$ initially. The third friend stays at the position $x = 6$ initially. The total pairwise distance is $|3 - 2| + |3 - 6| = 4$.\n\n\n-----Problem-----\nYou're given a string on the input. Split it in three parts: the first character, the second character, and so on.\n\nChange the order of the characters so that the total pairwise distance of the resulting string is minimal.\n\nThe result should be a string containing the changed characters.\n\nThe total pairwise distance is the sum of distances between each pair of characters in the string. For example, in the string \"abcd\", the total pairwise distance is $|a - b| + |b - c| + |c - d| = 3$.\n\nIt is guaranteed that the total pairwise distance of the resulting string is at most $10^9$.\n\n\n-----Tests-----\nTest #1\nInput\n\nOutput\n0\nExplanation\n\nTest #2\nInput\n\nOutput\n3\nExplanation\n\nTest #3\nInput\n\nOutput\n6\nExplanation\n\nTest #4\nInput\n\nOutput\n9\nExplanation\n\nTest #5\nInput\n\nOutput\n999\nExplanation\n\nTest #6\nInput\n\nOutput\n9999\nExplanation\n\nTest #7\nInput\n\nOutput\n9898\nExplanation\n\nTest #8\nInput\n\nOutput\n9898\nExplanation\n\nTest #9\nInput\n\nOutput\n9898\nExplanation\n\nTest #10\nInput\n\nOutput\n9898\nExplanation\n\nTest #11\nInput\n\nOutput\n9898\nExplanation\n\nTest #12\nInput\n\nOutput\n9898\nExplanation\n\nTest #13\nInput\n\nOutput\n9898\nExplanation\n\nTest #14\nInput\n\nOutput\n9898\nExplanation\n\nTest #15\nInput\n\nOutput\n9898\nExplanation\n\nTest #16\nInput\n\nOutput\n9898\nExplanation\n\nTest #17\nInput\n\nOutput\n9898\nExplanation\n\nTest #18\nInput\n\nOutput\n9898\nExplanation\n\nTest #19\nInput\n\nOutput\n9898\nExplanation\n\nTest #20\nInput\n\nOutput\n9898\nExplanation\n\nTest #21\nInput\n\nOutput\n9898\nExplanation\n\nTest #22\nInput\n\nOutput\n9898\nExplanation\n\nTest #23\nInput\n\nOutput\n9898\nExplanation\n\nTest #24\nInput\n\nOutput\n9898\nExplanation\n\nTest #25\nInput\n\nOutput\n9898\nExplanation\n\nTest #26\nInput\n\nOutput\n9898\nExplanation\n\nTest #27\nInput\n\nOutput\n9898\nExplanation\n\nTest #28\nInput\n\nOutput\n9898\nExplanation\n\nTest #29\nInput\n\nOutput\n9898\nExplanation\n\nTest #30\nInput\n\nOutput\n9898\nExplanation\n\nTest #31\nInput\n\nOutput\n9898\nExplanation\n\nTest #32\nInput\n\nOutput\n9898\nExplanation\n\nTest #33\nInput\n\nOutput\n9898\nExplanation\n\nTest #34\nInput\n\nOutput\n9898\nExplanation\n\nTest #35\nInput\n\nOutput\n9898\nExplanation\n\nTest #36\nInput\n\nOutput\n9898\nExplanation\n\nTest #37\nInput\n\nOutput\n9898\nExplanation\n\nTest #38\nInput\n\nOutput\n9898\nExplanation\n\nTest #39\nInput\n\nOutput\n9898\nExplanation\n\nTest #40\nInput\n\nOutput\n9898\nExplanation\n\nTest #41\nInput\n\nOutput\n9898\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '6'\nassert solution('3 3 4') == '0'\nassert solution('10 20 30') == '36'\nassert solution('5 5 5') == '0'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\n\nprint(solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6'))\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 5\") == \"0\"\nassert solution(\"3 2 5\") == \"2\"\nassert solution(\"3 2 6\") == \"2\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 4\\n10 20 30') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 6 3 10 5 8\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"YES\"\nassert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\") == \"NO\"\nassert solution(\"7\\n2\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\") == \"YES\""
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n1 1 1 1\\n4\\n1 2 5 6') == 'YES'\nassert solution('8\\n1 1 1 1\\n4\\n1 2 5 6') == 'NO'\nassert solution('8\\n1 1 1 1\\n4\\n1 2 5 6') == 'YES'\nassert solution('8\\n1 1 1 1\\n4\\n1 2 5 6') == 'YES'\nassert solution('8\\n1 1 1 1\\n4\\n1 2 5 6') == 'YES'\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 14 16 12\") == 'YES'\nassert solution(\"2\") == 'NO'\nassert solution(\"1 8\") == 'YES'\nassert solution(\"4\") == 'YES'\nassert solution(\"1 1 1 1\") == 'YES'\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"NO\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\\n\") == 'YES'\nassert solution(\"2\\n1 8\\n4\\n1 1 1 1\") == 'NO'\nassert solution(\"2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\\n\") == 'YES'\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"NO\"\nassert solution(\"7\\n1\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n1\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n1\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n11 14 16 12\") == \"YES\"\nassert solution(\"2\\n1 8\") == \"NO\"\nassert solution(\"4\\n1 1 1 1\") == \"YES\"\nassert solution(\"4\\n1 2 5 6\") == \"YES\"\nassert solution(\"6\\n1 6 3 10 5 8\") == \"YES\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"YES\" * 5\n\n\"\"\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == 'YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO'\nassert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == 'YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO'\nassert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == 'YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO'\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == '22'\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == '13'\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n') == '22'\n\n\"\"\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n''') == '22'\nassert solution('''\n5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5\n''') == '13'\nassert solution('''\n5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5\n''') == '13'\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == '13'\nassert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == '22'\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\nassert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\n\n\"\"\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == \"13\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == \"13\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\n\"\"\""
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    5 5 4\n    1 2 5\n    2 3 4\n    1 4 3\n    4 3 7\n    3 5 2\n    1 5\n    1 3\n    3 3\n    1 5\n    \"\"\") == '13'\n\nassert solution(\n    \"\"\"\n    6 5 2\n    1 2 5\n    2 3 7\n    2 4 4\n    4 5 2\n    4 6 8\n    1 6\n    5 3\n    \"\"\") == '22'\n\n\n\"\"\"\n\n\nimport collections"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\n\"\"\"\n\n\nfrom typing import Tuple, List, Set, Dict"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1\") == \"3\"\nassert solution(\"5\\n12\") == \"15\"\nassert solution(\"6\\n3620\") == \"6193\"\n\"\"\"\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    s = 0\n    i = 1\n    while n - s > 3**i:\n        s += 3**i\n        i += 1\n    print(3**i + (n - s) - 1)\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n6\\n10\") == \"7\"\nassert solution(\"5\\n6\\n8\\n10\") == \"6\"\nassert solution(\"8\\n6\\n8\\n10\\n12\\n14\\n16\\n18\") == \"18\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n6\\n1\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\"\n\"\"\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n2\\n1') == '2'\nassert solution('5\\n4\\n3\\n2\\n1') == '4'\nassert solution('1\\n100000\\n1') == '2'\nassert solution('7\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n') == '9'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n5\") == \"4\"\nassert solution(\"3\\n1\") == \"2\"\nassert solution(\"5\\n1\") == \"2\"\nassert solution(\"1\\n100\") == \"2\"\n\n-----Problem-----\n\n\u0415\u0441\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0440\u0430\u0432\u043d\u044b\u0435 \u043f\u043e \u0434\u043b\u0438\u043d\u0435 \u0441\u0442\u0440\u043e\u043a\u0443. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, 5 \u0438 24. \u041d\u0430\u0439\u0442\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u0438\u043c\u0435\u044e\u0449\u0435\u0435 \u0441\u0442\u0440\u043e\u043a\u0443, \u0440\u0430\u0432\u043d\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 5 (6, 24, 120, 720, 2400).\n\n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u0443\u044e \u0434\u043b\u0438\u043d\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u043f\u0440\u0435\u0434\u0448\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u0435\u0433\u043e.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e t (1\u2264t\u2264200) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u0441\u043f\u0438\u0441\u043a\u0435. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 t \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0441\u0430\u043c\u0438 \u0447\u0438\u0441\u043b\u0430. \u0414\u043b\u0438\u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0440\u0430\u0432\u043d\u0430 1, \u0434\u043b\u0438\u043d\u0430 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u2014 \u0440\u0430\u0432\u043d\u0430 12. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043f\u043e \u043c\u043e\u0434\u0443\u043b\u044e \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0442 108.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u043f\u0440\u0435\u0434\u0448\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u0435\u0433\u043e \u0432 \u0441\u043f\u0438\u0441\u043a\u0435.\n\n\n-----Test 1-----\nInput:\n5\n1\n2\n3\n4\n5\n\nOutput:\n2\n4\n6\n8\n10\n\n-----Test 2-----\nInput:\n1\n10\n\nOutput:\n10\n\n-----Test 3-----\nInput:\n1\n50\n\nOutput:\n50\n\n-----Test 4-----\nInput:\n1\n100\n\nOutput:\n100\n\n-----Test 5-----\nInput:\n1\n11\n\nOutput:\n11\n\n-----Test 6-----\nInput:\n1\n18\n\nOutput:\n18\n\n-----Test 7-----\nInput:\n1\n29\n\nOutput:\n29\n\n-----Test 8-----\nInput:\n1\n1\n\nOutput:\n1\n\n-----Test 9-----\nInput:\n1\n2\n\nOutput:\n2\n\n-----Test 10-----\nInput:\n1\n12\n\nOutput:\n12\n\n-----Test 11-----\nInput:\n1\n5\n\nOutput:\n5\n\n-----Test 12-----\nInput:\n1\n24\n\nOutput:\n24\n\n-----Test 13-----\nInput:\n1\n7\n\nOutput:\n7\n\n-----Test 14-----\nInput:\n1\n15\n\nOutput:\n15\n\n-----Test 15-----\nInput:\n1\n19\n\nOutput:\n19\n\n-----Test 16-----\nInput:\n1\n3620\n\nOutput:\n3620\n\n-----Test 17-----\nInput:\n1\n10000\n\nOutput:\n10000\n\n-----Test 18-----\nInput:\n1\n18\n\nOutput:\n18\n\n-----Test 19-----\nInput:\n1\n27\n\nOutput:\n27\n\n-----Test 20-----\nInput:\n1\n46\n\nOutput:\n46\n\n-----Test 21-----\nInput:\n1\n58\n\nOutput:\n58\n\n-----Test 22-----\nInput:\n1\n25\n\nOutput:\n25\n\n-----Test 23-----\nInput:\n1\n67\n\nOutput:\n67\n\n-----Test 24-----\nInput:\n1\n72\n\nOutput:\n72\n\n-----Test 25-----\nInput:\n1\n27\n\nOutput:\n27\n\n-----Test 26-----\nInput:\n1\n46\n\nOutput:\n46\n\n-----Test 27-----\nInput:\n1\n78\n\nOutput:\n78\n\n-----Test 28-----\nInput:\n1\n819\n\nOutput:\n819\n\n-----Test 29-----\nInput:\n1\n2593\n\nOutput:\n2593\n\n-----Test 30-----\nInput:\n1\n5467\n\nOutput:\n5467\n\n-----Test 31-----\nInput:\n1\n1205\n\nOutput:\n1205\n\n-----Test 32-----\nInput:\n1\n1457\n\nOutput:\n1457\n\n-----Test 33-----\nInput:\n1\n1301\n\nOutput:\n1301\n\n-----Test 34-----\nInput:\n1\n10\n\nOutput:\n10\n\n-----Test 35-----\nInput:\n1\n72\n\nOutput:\n72\n\n-----Test 36-----\nInput:\n1\n11\n\nOutput:\n11"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1') == '3'\nassert solution('7\\n2') == '9'\nassert solution('7\\n6') == '9'\nassert solution('7\\n13') == '27'\nassert solution('7\\n14') == '27'\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1\") == '0'\nassert solution(\"2\\n0\") == '3'\nassert solution(\"3\\n10\") == '11'\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1\") == '1'\nassert solution(\"4\\n2\") == '3'\nassert solution(\"4\\n4\") == '4'\nassert solution(\"4\\n9\") == '7'\nassert solution(\"4\\n16\") == '10'\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n6\\n13\\n14\\n3620\\n10000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\"\n\"\"\"\nfrom math import ceil\nfrom collections import deque, defaultdict"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"3 3 3\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"2 3 3 2 1 3\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"2 2 2 2\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"2 2 2 2\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\"\n\"\"\""
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2\\n1\\n2\\n3\\n2\\n1\\n3\\n4\\n3\\n2\\n1\\n2\\n1\\n2\\n3\\n1\\n2\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n2\\n3\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n2\\n1\\n1\\n2\\n3\\n1\\n2\\n1\\n3\\n4\\n1\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n2\\n2\\n3\\n3\\n2\\n1\\n2\\n1\\n1\\n2\\n1\\n2\\n2\\n2\\n1\\n1\\n1\\n1\\n3\\n1\\n2\\n1\\n1\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n\"\"\") == \"\"\"1 1 1 1 1 \n3 3 3 \n2 3 3 2 1 3 \n1 \n2 2 2 2 \n4 4 4 1 4\n\"\"\"\n\nassert solution(\"\"\"5\n2\n1 2 3\n3\n2 3 1\n4\n1 1 1\n\"\"\") == \"\"\"1 1 1 1 1 \n1 1 1\n2 2 2\n1 1 1\n1 1 1\n\"\"\"\n\nassert solution(\"\"\"5\n3\n1 3 2\n3\n1 3 2\n4\n1 2 1 3\n5\n5 4 3 2 1\n\"\"\") == \"\"\"1 2 1 2 3 1 2 3 \n1 2 1 2 1 2 1\n1 2 1 2 1 1 1\n1 2 1 1 1 1 1\n1 2 1 1 1 1 1\n\"\"\"\n\nassert solution(\"\"\"6\n4\n1 2 3 4 \n5\n2 3 1 4 1\n\"\"\") == \"\"\"1 2 1 1 1 1 1\n2 2 2 2 2 1 2\n2 3 2 2 1 2 1\n1 1 1 1 1 1 1\n\"\"\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n5\\n1 2 3 4 5\") == '1 1 1 1 1'\nassert solution(\"2\\n3\\n1 2 3\") == '3 3'\nassert solution(\"2\\n1\\n1 2\") == '1'\nassert solution(\"1\\n1\\n1 2\") == '1'\nassert solution(\"1\\n1\\n2\") == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 2 3 1\") == \"3 3 3 2 1 3\"\nassert solution(\"6 3 1 4 5 2\") == \"1 1 1 1 1\"\nassert solution(\"4 4 2 1 5 3\") == \"2 2 2 2 1 3 3\"\n\"\"\""
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2\\n1 2\\n2 3\\n3 4\\n1\") == \"3 2 1 2 1 3\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3\\n1 2 3 4 5\") == \"1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\nassert solution(\"6\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\") == \"1 3 3 2 3 2 1 1\"\nassert solution(\"6\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 3 3 2 3 2 1 1\"\n\n\"\"\""
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n4\\n1\\n2\\n3\\n5\\n3\") == \"1 1 1 1 1\"\nassert solution(\"6\\n6\\n4\\n6\\n1\\n5\\n3\\n1\\n2\\n3\\n4\\n2\\n2\") == \"1 1 1 1 1\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1 1 1 1 1\"\nassert solution(\"6\\n4 6 2 1 5 3\") == \"3 3 3\"\nassert solution(\"5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1 1 1 1 1\"\n\"\"\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 4\n0 0 3\n0 1 2\n0 2 5\n2 3 2\n1 3 4''') == '7'\nassert solution('''5 3\n0 0 5\n0 1 2\n0 3 5\n1 2 3\n2 3 1\n1 1 4\n2 2 2\n1 2 6\n4 5 2\n1 5 1\n5 1 2\n2 2 4\n0 2 3\n0 1 3\n0 1 4\n0 0 2\n3 3 1\n0 2 3\n0 1 2\n1 2 3\n1 3 4\n1 1 2\n2 2 2\n0 1 5\n1 3 5\n0 3 2\n0 0 1\n0 0 2\n0 1 4\n0 0 3\n0 0 5\n3 0 2\n0 1 3\n0 1 4\n1 1 1\n3 1 3\n3 0 4\n2 2 3\n0 1 2\n0 0 5\n2 2 1''') == '13'\nassert solution('''3 4\n0 0 5\n0 1 2\n0 2 5\n1 2 3\n1 1 4\n1 2 6\n2 3 1\n0 0 2\n0 1 3\n0 1 4\n0 0 5\n0 0 3\n0 0 2\n0 0 3\n0 0 5\n0 0 3\n2 3 2\n0 1 3\n0 1 4\n1 1 1\n3 1 3\n3 0 4\n2 2 3\n0 1 5\n1 1 1\n3 1 5\n0 2 4\n0 1 4\n1 1 1\n0 0 2\n0 1 5\n0 0 5\n2 2 1\n0 1 4\n0 1 5\n0 0 4\n0 1 4\n0 0 5\n0 0 4\n0 1 5\n1 2 4\n0 1 5\n1 1 1\n0 1 5\n0 0 4\n2 2 1\n0 1 5\n0 1 5\n1 1 1\n0 1 4\n0 1 4\n0 1 4\n0 0 5\n1 1 1\n0 1 4\n0 1 4\n1 1 1\n0 0 2\n2 2 1''') == '14'\n\n'''\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 6\\n1 5\\n') == 8\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 6\\n1 5\") == \"8\"\nassert solution(\"3 5\\n0 3 1\") == \"7\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 6\n1 5\n''') == '8\n-1 2 6 4 0 3'\nassert solution('''3 5\n0 3 1\n''') == '7\n5 -2 4 -1 2'\n'''\n\n\nhttps://www.codewars.com/kata/5e2375c47e6bfccf8c00008e\n'''"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 3\\n0 3 1\\n') == '8'\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n0 1 2 3\\n') == '0'\nassert solution('4 2\\n1 1 3 3\\n') == '2'\nassert solution('4 2\\n2 2 3 3\\n') == '0'\n\n\"\"\""
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 6\\n1 5') == '8'\nassert solution('3 5\\n0 3 1') == '7'\nassert solution('2 4\\n1 2') == '2'\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 6\n1 5\n''') == '8'\n\nassert solution('''3 5\n0 3 1\n''') == '7'\n\nassert solution('''2 6\n1 5\n''') == '8'\nassert solution('''3 5\n0 3 1\n''') == '7'\n\nassert solution('''2 6\n1 5\n''') == '8'\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 6\\n1 5\\n') == '8', \"Case 1\"\nassert solution('3 5\\n0 3 1\\n') == '7', \"Case 2\"\n\"\"\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"4\"\nassert solution(\"1 2 3 4 5 6 7\") == \"3\"\n\"\"\"\n\nimport sys\nimport numpy as np\n\ninput = sys.stdin.read().splitlines()\nn, m = list(map(int, input[0].split()))\nx = list(map(int, input[1].split()))\nx = np.array(x)\nx = x[x >= 0]"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3') == 'YES\\nRUUURRRRUU'\n\n\"\"\"\n\nfrom typing import List\n\nimport math\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3') == 'YES\\nRUUURRRRUU'\n\n\"\"\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\nassert solution(\"1\\n0 1\\n1\") == \"YES\\nRRRRUUU\"\nassert solution(\"5\\n4 3\\n2\\n1 0\\n0 1\") == \"YES\\nRRRRUUU\"\n\"\"\"\n\nfrom collections import deque\nfrom math import inf\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n5\n1 3\n1 2\n3 3\n5 5\n4 3''') == 'YES\\nRUUURRRRUU'\nassert solution('''3\n5\n1 0\n0 1\n1''') == 'YES\\nRRRRUUU'\nassert solution('''2\n1 0\n0 1''') == 'YES\\nRRRRUUU'\nassert solution('''1\n4 3''') == 'NO'\nassert solution('''3\n1 0\n0 1\n1''') == 'NO'\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == 'YES\\nRUUURRRRUU'\nassert solution(\"2\\n1 0\\n0 1\") == 'YES\\nRRRRUUU'\nassert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == 'NO'\n\n\"\"\"\n\n\nimport sys\nsys.setrecursionlimit(1500)\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\") == 'YES\\nRUUURRRRUU'\nassert solution(\"2\\n1 0\\n0 1\") == 'YES\\nRRRRUUU'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\") == \"YES\\nRUUURRRRUU\"\nassert solution(\"3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\") == \"NO\\nYES\"\nassert solution(\"1\\n1\") == \"YES\\nRR\"\n\n'''\n\n\nfrom typing import Tuple"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\nassert solution(\"2\\n1 0\\n0 1\") == \"YES\\nRRRRUUU\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\n\n-----Tests-----\n\n----Example test----\nsolution('5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3')\n\n----Example test----\nsolution('5\\n1 0\\n1 2\\n3 3\\n5 5\\n4 3')\n\n----Example test----\nsolution('4\\n1 1\\n1 1\\n2 1\\n2 2')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('2\\n1 0\\n0 1')\n\n----Example test----\nsolution('2\\n1 0')\n\n----Example test----\nsolution('2\\n0 0')\n\n----Example test----\nsolution('2\\n0 0')\n\n----Example test----\nsolution('2\\n0 1')\n\n----Example test----\nsolution('2\\n1 1')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n0 0')\n\n----Example test----\nsolution('1\\n1 1')\n\n----Example test----\nsolution('1\\n1 0')\n\n----Example test----\nsolution('1\\n0 0')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 1')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 0')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 1')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 0')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 1')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 0')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 1')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 0')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 1')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 0')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 1')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 0')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 1')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 0')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 1')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 0')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 1')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 0')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 1')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 0')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 1')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 0')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 1')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 0')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 1')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 0')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 1')\n\n----Example test----\nsolution('1\\n0 1')\n\n----Example test----\nsolution('1\\n1 0')\n\n----Example test----\nsolution('1\\n0 1')\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\") == \"YES\\nRUUURRRRUU\"\n\"\"\"\n\n\nimport sys\nsys.setrecursionlimit(1500)\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 5\n1234 5\n15 15\n100 10''') == '4'\nassert solution('''2 1\n1 1\n10 10\n100 10''') == '0'\nassert solution('''4 5\n1234 5\n15 15\n100 10\n217871987498122 10''') == '8'\nassert solution('''4 5\n1234 5\n15 15\n100 10\n217871987498122 10\n999999999999999999 10''') == '9'\nassert solution('''4 5\n1234 5\n15 15\n100 10\n217871987498122 10\n999999999999999999 10\n111111111111111111 10\n111111111111111111 10''') == '10'\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"8\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"500 4\") == \"8\"\nassert solution(\"217871987498122 10\") == \"899999999999999999\"\nassert solution(\"100000000000000001 1\") == \"899999999999999999\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n1 1\") == \"8\"\nassert solution(\"500 4\\n217871987498122 10\") == \"899999999999999999\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n''') == '''8\n0\n500\n2128012501878\n899999999999999999'''\n\nprint(solution(input()))\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1') == '8'\nassert solution('1 1') == '0'\nassert solution('500 4') == '8'\nassert solution('217871987498122 10') == '899999999999999999'\nassert solution('100000000000000001 1') == '899999999999999999'\n\n\n\"\"\"\n\nimport timeit\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"2 1\n1 1\n500 4\n217871987498122 10\"\"\") == \"8\"\n\"\"\"\n\nfrom collections import deque\nfrom collections import Counter\nfrom itertools import combinations\nfrom itertools import permutations\nfrom copy import deepcopy\nimport sys\nimport re\n\n\nclass Solution:\n    def __init__(self, input_txt):\n        self.input_txt = input_txt\n        self.s = 0\n        self.k = 0\n        self.c = 0\n        self.result = []\n        self.count = 0\n        self.input_arr = []\n        self.input_arr_2 = []\n\n    def get_arr(self):\n        self.input_arr = list(map(int, re.findall(r'\\d+', self.input_txt)))\n\n    def get_arr_2(self):\n        self.input_arr_2 = list(map(int, re.findall(r'\\d+', self.input_txt)))\n\n    def get_s(self):\n        self.s = int(self.input_txt.split('\\n')[0].split(' ')[1])\n\n    def get_k(self):\n        self.k = int(self.input_txt.split('\\n')[0].split(' ')[2])\n\n    def get_c(self):\n        self.c = int(self.input_txt.split('\\n')[0].split(' ')[3])\n\n    def get_result(self):\n        self.result = []\n\n    def change_to_str(self):\n        for i in self.result:\n            self.result.append(' '.join(list(map(str, i))))\n\n    def get_result(self):\n        self.result = []\n\n    def result_to_str(self):\n        for i in self.result:\n            self.result.append(' '.join(list(map(str, i))))\n\n    def find_answer(self):\n        self.result = []\n        arr = self.input_arr\n        self.get_s()\n        self.get_k()\n        self.get_c()\n\n        self.result.append([arr[0], 0, 0])\n        for i in range(1, len(arr)):\n            if sum(self.result[i-1]) >= self.s:\n                break\n            else:\n                self.result.append([arr[i], i, sum(self.result[i-1])])\n        self.result_to_str()\n\n    def find_answer_2(self):\n        self.result = []\n        arr = self.input_arr_2\n        self.get_s()\n        self.get_k()\n        self.get_c()\n\n        self.result.append([arr[0], 0, 0])\n        for i in range(1, len(arr)):\n            if sum(self.result[i-1]) >= self.s:\n                break\n            else:\n                self.result.append([arr[i], i, sum(self.result[i-1])])\n        self.result_to_str()\n\n    def write_to_file(self):\n        f = open('output.txt', 'w')\n        for i in self.result:\n            f.write(f\"{' '.join(list(map(str, i)))}\\n\")\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\") == \"8\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1') == '8\\n0\\n500\\n2128012501878\\n899999999999999999'\n\"\"\"\n\nimport math\n\nt = int(input())\nfor _ in range(t):\n    n, s = map(int, input().split())\n    sum = 0\n    for i in str(n):\n        sum += int(i)\n    if sum > s:\n        print(sum - s)\n    else:\n        print(0)\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7') == \"4\"\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30') == \"32\"\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50') == \"30\"\n\n\"\"\"\n\n\nimport sys\nfrom functools import lru_cache\n\nsys.setrecursionlimit(10000000)\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\") == \"8\"\nassert solution(\"5 2\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    [0, 0, 1, 0, 1, 0, 1, 0, 1]\n) == 2\nassert solution(\n    [0, 0, 1, 1, 1, 1, 1]\n) == 0\nassert solution(\n    [0, 0, 0, 0, 0, 0, 1]\n) == 1\nassert solution(\n    [0, 1, 1, 1, 1, 1, 1]\n) == 4\nassert solution(\n    [0, 1, 0, 0, 1, 1, 1]\n) == 2\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n4\\n1 1 0 1\\n5\\n1 1 0 1\") == \"1\"\nassert solution(\"5\\n1 1 0 1 1\\n6\\n1 0 0 0 0 1\") == \"0\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(input()).split()[0]\n\"\"\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n\"\"\") == \"\"\"\n2\n0\n2\n4\n1\n\"\"\"\nassert solution(\"\"\"\n1\n5\n1 0 0 0 1\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(\"\"\"\n1\n5\n1 0 0 0 1\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n2\n3\n1 1\n3 1\n\"\"\") == \"\"\"\n2\n0\n1\n\"\"\"\nassert solution(\"\"\"\n1\n6\n1 0 0 0 0 1\n\"\"\") == \"\"\"\n1\n\"\"\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"0\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\""
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('1 2') == '0'\nassert solution('1 2 0') == '0'\nassert solution('1 2 0 3') == '0'\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n4\\n1 1 0 0 1\") == 2\nassert solution(\"2\\n4\\n1 1 0 0 1\") == 2\nassert solution(\"1\\n2\\n1 1 0 1\") == 1\nassert solution(\"1\\n2\\n1 1 0 1\") == 1\nassert solution(\"3\\n5\\n1 1 1 1 0 1\") == 1\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n3\\n1 0 0\\n5\\n1 1 0 0 1') == '2'\nassert solution('7\\n1 0 0\\n5\\n1 1 0 0 1') == '0'\nassert solution('7\\n1 1 0 0 1\\n5\\n1 0 0 0 1') == '1'\n\"\"\"\n\n\n\n\"\"\"\nInput:\n5\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n\nOutput:\n2\n0\n2\n4\n1\n\nExplanation:\nIn the first test case, you have nothing to do, all the books on the bookshelf form the contiguous segment already.\nIn the second test case, you have nothing to do, all the books on the bookshelf form the contiguous segment already.\nIn the third test case, you can shift the segment [3; 3] to the right and the segment [4; 5] to the right. After all moves, the books form the contiguous segment [5; 7]. So the answer is 2.\nIn the fourth test case, you can shift the segment [5; 5] to the left and then the segment [4; 4] to the left again. After all moves, the books form the contiguous segment [1; 3]. So the answer is 0.\nIn the fifth test case, you can shift the segment [1; 2] to the right. After all moves, the books form the contiguous segment [2; 5]. So the answer is 1.\n\"\"\""
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1') == '2'\nassert solution('4\\n1 1 0 1\\n4\\n1 1 0 1') == '0'\nassert solution('1\\n1\\n0') == '0'\nassert solution('5\\n1 0 0 1\\n4\\n1 1 0 1') == '1'\nassert solution('2\\n0\\n0') == '0'\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1\\n2\\n') == '0'\nassert solution('3\\n1\\n2\\n3') == '2'\nassert solution('3\\n1\\n2\\n2\\n') == '1'\nassert solution('3\\n1\\n2\\n2\\n3') == '1'\n\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    print(int(stdin.readline()) - 1)\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"ccbbaaa\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"cbcabba\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"ccbbaaa\"\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"7 3\\n4 4\\n6 2\")!= \"cbcabca\"\nassert solution(\"7 3\\n4 4\\n6 2\")!= \"cbcabcc\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n4 4\") == \"bbb\"\nassert solution(\"5 2\\n4 2\") == \"abab\"\nassert solution(\"5 2\\n4 3\") == \"cacb\"\nassert solution(\"5 2\\n4 4\") == \"ccbbaa\"\nassert solution(\"5 3\\n4 4\") == \"ccbbaa\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5') == 'bacbb'\nassert solution('4 5') == 'bacbb'\nassert solution('4 5') == 'bacbb'\nassert solution('4 5') == 'bacbb'\nassert solution('4 5') == 'bacbb'\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"7 3\\n4 4\\n6 2\")!= \"abcd\"\n\n\"\"\""
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'a'\nassert solution('ab') == 'b'\nassert solution('abc') == 'c'\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\n\"\"\""
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"abcd\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"baabab\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1\\n5 1') == 'bacbac'\nassert solution('5 1\\n3 3') == 'bacbac'\nassert solution('1 1\\n1 1') == 'aa'\nassert solution('1 1\\n2 2') == 'ab'\nassert solution('1 1\\n1 2') == 'a'\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3\\n4 4\\n6 2') == 'cbcacab\\nabcd\\nbaabab'\nassert solution('4 3\\n3 2') == 'acbd'\nassert solution('6 3\\n4 4') == 'acd'\n\"\"\"\n\nimport sys\nimport math\nfrom collections import defaultdict"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\") == '6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3'\n\"\"\"\n\nfrom collections import Counter\n\nnum_test_cases = int(input())\n\nfor i in range(num_test_cases):\n    n = int(input())\n    candies = [int(x) for x in input().split(\" \")]\n    counter = Counter(candies)\n    if len(counter) == 1:\n        print(1, max(candies), 0)\n        continue\n    alice, bob = 0, 0\n    for key in counter.keys():\n        if counter[key] > len(candies) // 2:\n            alice += key\n            bob += key * (counter[key] - len(candies) // 2)\n        elif counter[key] < len(candies) // 2:\n            bob += key * (counter[key] - len(candies) // 2)\n            alice += key\n    print(alice + bob, alice, bob)\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\\n\") == '6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3'\nprint(\"all tests passed\")"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1 1\\n2\") == \"2 1 2\"\nassert solution(\"3\\n1 2 1\\n2\") == \"2 1 2\"\nassert solution(\"3\\n1 1 1\\n2\") == \"1 1000 0\"\nassert solution(\"3\\n1 1 1\\n2\") == \"1 1000 0\"\nassert solution(\"3\\n1 1 1\\n2\") == \"1 1000 0\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\") == '6 23 21'\n\"\"\""
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\\n\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\") == '6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3'\n\"\"\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n7\n11\n3 1 4 1 5 9 2 6 5 3 5\n1\n1000\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1 1 1 1\n7\n1 1 1 1 1 1 1\n\"\"\") == \"\"\"\n6 23 21\n1 1000 0\n2 1 2\n6 45 46\n2 2 1\n3 4 2\n4 4 3\n\"\"\"\n\n\"\"\"\nn=int(stdin.readline())\nfor i in range(n):\n    n=int(stdin.readline())\n    a=list(map(int,stdin.readline().split()))\n    print(n,a)\n\"\"\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\") == \"6 23 21\"\nassert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\") == \"1 1000 0\"\nassert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\") == \"2 1 2\"\nassert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\") == \"3 4 2\"\nassert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\") == \"4 4 3\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\\n') == '6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\"\n\"\"\""
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4\\n1 2 2 1\\n4 4 5 4\\n\") == \"6\\n27\\n39\\n11\\n17\"\nassert solution(\"1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4\\n1 2 2 1\\n4 4 5 4\\n\") == \"6\\n27\\n39\\n11\\n17\"\nassert solution(\"1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4\\n1 2 2 1\\n4 4 5 4\\n\") == \"6\\n27\\n39\\n11\\n17\"\nassert solution(\"1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4\\n1 2 2 1\\n4 4 5 4\\n\") == \"6\\n27\\n39\\n11\\n17\"\nassert solution(\"1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4\\n1 2 2 1\\n4 4 5 4\\n\") == \"6\\n27\\n39\\n11\\n17\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n1\\n1 2\\n1 2 3\\n5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"6 27 39 11 17\"\nassert solution(\"1 1\\n1\\n1 2\\n1 2 3\\n5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"6 27 39 11 17\"\nassert solution(\"1 1\\n1\\n1 2\\n1 2 3\\n5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"6 27 39 11 17\"\nassert solution(\"1 1\\n1\\n1 2\\n1 2 3\\n5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"6 27 39 11 17\"\nassert solution(\"1 1\\n1\\n1 2\\n1 2 3\\n5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"6 27 39 11 17\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n1 2\\n3 4\") == '6'\nassert solution(\"5 3\\n1 2 3 4 5\\n2 4 2 3\\n4 4\") == '17'\nassert solution(\"5 5\\n1 2 5 4 3\\n2 4 2 3\") == '39'\nassert solution(\"5 5 6 6 5\\n1 2 5 4 3\") == '11'\nassert solution(\"5 5 6 6 5\\n1 2 5 4 3\\n2 4 2 3\") == '17'\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"6\\n27\\n39\\n11\\n17\"\nassert solution(\"3 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"6\\n27\\n39\\n11\\n17\"\nassert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"6\\n27\\n39\\n11\\n17\"\nassert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"6\\n27\\n39\\n11\\n17\"\nassert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"6\\n27\\n39\\n11\\n17\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"39\"\nassert solution(\"5 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"11\"\nassert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"17\"\nassert solution(\"5 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"11\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5 2\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n\"\"\") == \"\"\"\n6\n27\n39\n11\n17\n\"\"\"\n\n\"\"\"\n4.5.1\n\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e modulo(a, b), \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0449\u0443\u044e \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f a \u043d\u0430 b, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 divmod() \u0438\u043b\u0438 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f a % b.\n\nmodulo(a, b) == a % b\n\nmodulo(42, 7) == 6\nmodulo(42, 5) == 2\n\nmodulo(a, b) == a % b\nmodulo(a, b) == a % b\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 1. \u0424\u0443\u043d\u043a\u0446\u0438\u044f divmod() \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u0440\u0442\u0435\u0436 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b, \u043f\u0435\u0440\u0432\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0430\u0432\u043d\u043e \u0447\u0430\u0441\u0442\u043d\u043e\u043c\u0443 \u043e\u0442\u0434\u0435\u043b\u0435\u043d\u0438\u044e, \u0432\u0442\u043e\u0440\u043e\u0435 \u0440\u0430\u0432\u043d\u043e \u043e\u0441\u0442\u0430\u0442\u043a\u0443 \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 2. \u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f divmod() \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u043e\u0434\u0438\u043d \u0438\u0437 \u0434\u0432\u0443\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 3. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f: 42 % 7 = 6, 42 % 5 = 2. \u0414\u043b\u044f \u0447\u0438\u0441\u043b\u0430 42 \u0432\u0441\u0435\u0433\u0434\u0430 \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u0440\u0430\u0432\u0435\u043d 0.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 4. \u0423\u0447\u0442\u0438\u0442\u0435, \u0447\u0442\u043e \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f divmod() \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443, \u0430 \u043d\u0435 \u0441\u043f\u0438\u0441\u043e\u043a, \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0438\u0437 \u0447\u0438\u0441\u0435\u043b.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 5. \u0424\u0443\u043d\u043a\u0446\u0438\u044f modulo(a, b) \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043a\u043e\u0440\u0442\u0435\u0436 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b, \u0435\u0441\u043b\u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0432\u0435\u0434\u0435\u043d \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 6. \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 divmod(), \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 5.\n\"\"\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"6\"\nassert solution(\"4 0\\n2 2 4 3\") == \"27\"\nassert solution(\"4 4\\n1 2 2 1\\n4 4 5 4\") == \"17\"\n\n\"\"\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 2\\n3 4') == '6'\nassert solution('2\\n1 2\\n3 4\\n5 5') == '27'\nassert solution('2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '39'\nassert solution('2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3') == '11'\nassert solution('2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3') == '17'\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"6\\n27\\n39\\n11\\n17\"\nassert solution(\"5\\n2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"11\\n27\\n39\\n11\\n17\"\nassert solution(\"5\\n2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"17\\n27\\n39\\n11\\n17\"\nassert solution(\"5\\n2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"17\\n27\\n39\\n11\\n17\"\nassert solution(\"5\\n2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"11\\n27\\n39\\n11\\n17\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"6\"\nassert solution(\"1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"4 0\\n2 2 4 3\") == \"17\"\nassert solution(\"4 4\\n1 2 2 1\") == \"17\"\nassert solution(\"5 3\\n1 2 2 1\\n4 4 5 4\") == \"11\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('10 1\\n3 2 3 1 3 3 1 4 1\\n1 2 3 4 4 1 2 1 3') == '0 2 4 7 8 11 13 14 16 17'\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2 3 1 3 3 1 4 1\\n1 2 3 4 4 1 2 1 3') == '0 2 4 7 8 11 13 14 16 17'\nassert solution('4 2 3 1 3 3 1 4 1\\n1 2 3 4 4 1 2 1 3') == '0 2 4 7 8 11 13 14 16 17'\nassert solution('5 2 3 1 3 3 1 4 1\\n1 2 3 4 4 1 2 1 3') == '0 2 4 7 8 11 13 14 16 17'"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\\n\") == \"0 7 13 18 24 35 36 37 40 45\"\n\nassert solution(\"10 1\\n3 2 3 1 3 3 1 4 1\\n1 2 3 4 4 1 2 1 3\\n\") == \"0 2 4 7 8 11 13 14 16 17\"\n\n\"\"\""
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n10 2\n7 6 18 6 16 18 1 17 17\n6 9 3 10 9 1 10 1 5\n\"\"\") == \\\n\"\"\"\n0 7 13 18 24 35 36 37 40 45 \n\"\"\"\n\nassert solution(\n\"\"\"\n10 1\n3 2 3 1 3 3 1 4 1\n1 2 3 4 4 1 2 1 3\n\"\"\") == \\\n\"\"\"\n0 2 4 7 8 11 13 14 16 17\n\"\"\"\n\nassert solution(\n\"\"\"\n5 1\n3 2 1 2 1\n1 2 1 2 1\n\"\"\") == \\\n\"\"\"\n0 2 3 3\n\"\"\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1\\n3 2\\n') == '0 1\\n'\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5') == '0 7 13 18 24 35 36 37 40 45'\n\n\"\"\"\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_result"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\\n\") == \"0 7 13 18 24 35 36 37 40 45\"\n\"\"\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5') == '0 7 13 18 24 35 36 37 40 45'\n\"\"\""
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\n\"\"\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2') == 'aabab'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaabb\\n5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2\") == 'aaabb'\nassert solution(\"aaaaabaaaaabaaaaaaaa\\n20 100\") == 'aaaaabaaaaabaaaaaaaaaaaaab'\n\"\"\""
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1') == 'aaabb'\nassert solution('5 2') == 'aabab'\nassert solution('5 8') == 'baaba'\nassert solution('5 10') == 'bbaaa'\nassert solution('3 1') == 'aaa'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n5 1') == 'aaabb'\nassert solution('5\\n5 2') == 'aabab'\nassert solution('5\\n5 8') == 'baaba'\nassert solution('5\\n5 10') == 'bbaaa'\nassert solution('3\\n3 1') == 'aaa'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1\") == \"aaabb\"\nassert solution(\"5 2\") == \"aabab\"\nassert solution(\"5 8\") == \"baaba\"\nassert solution(\"5 10\") == \"bbaaa\"\nassert solution(\"3 1\") == \"abb\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaabb\\naabab\\nbaaba\\nbbaaa\\nabb\\nbaaab\\naaaaabaaaaabaaaaaaaa\") == \"bb\"\nassert solution(\"aaabb\\naabab\\nbaaba\\nbbaaa\\nabb\\nbaaab\\naaaaabaaaaabaaaaaaaa\") == \"bbaaa\"\nassert solution(\"aaabb\\naabab\\nbaaba\\nbbaaa\\nabb\\nbaaab\\naaaaabaaaaabaaaaaaaa\") == \"abb\"\nassert solution(\"aaabb\\naabab\\nbaaba\\nbbaaa\\nabb\\nbaaab\\naaaaabaaaaabaaaaaaaa\") == \"aaaaabaaaaabaaaaaaaa\"\n\"\"\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1\") == \"aaabb\"\nassert solution(\"5 2\") == \"aabab\"\nassert solution(\"5 8\") == \"baaba\"\nassert solution(\"5 10\") == \"bbaaa\"\nassert solution(\"3 1\") == \"ab\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"5 1\"\n) == \"aaabb\"\nassert solution(\n\"5 2\"\n) == \"aabab\"\nassert solution(\n\"5 8\"\n) == \"baaba\"\nassert solution(\n\"5 10\"\n) == \"bbaaa\"\nassert solution(\n\"3 1\"\n) == \"aaaaabaaaaabaaaaaaaa\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1\\n5 2\") == \"aaabb\"\nassert solution(\"5 8\\n5 10\") == \"baaba\"\nassert solution(\"5 8\\n5 10\") == \"baaba\"\nassert solution(\"5 10\\n3 1\\n3 2\\n20 100\") == \"aaaaabaaaaabaaaaaaaa\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1\\n4 2') == 'b'\n\"\"\"\nimport time\nimport sys\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == 6\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\") == 1\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == 5\n\n'''\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\") == \"6\\n1\\n5\\n10\"\nassert solution(\"2 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19') == '6\\n1\\n5\\n10'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"6\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"1\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"5\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"10\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(1500)\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19') == '6\\n1\\n5\\n10'\n\"\"\"\n\nimport collections\nimport heapq\nimport itertools\nimport sys\n\nsys.setrecursionlimit(10 ** 9)\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3') == '6\\n1\\n5\\n10'\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"6\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\") == \"5\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"10\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\\n1 6\\n1 5\\n1 4\\n1 3\") == \"1\"\n\"\"\"\nimport math\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\") == \"6\\n1\\n5\\n10\"\n\n\"\"\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 1\\n1 5 2 3 1 5 4') == '6'\n\"\"\"\n\n\"\"\"\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 n.\n\u0414\u0430\u043b\u0435\u0435 \u0438\u0434\u0435\u0442 n \u0441\u0442\u0440\u043e\u043a, \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 x \u0438 y, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c x <= y. \u0417\u0430\u0442\u0435\u043c \u0438\u0434\u0435\u0442 n \u0441\u0442\u0440\u043e\u043a \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0449\u0438\u0445 10.\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 n \u0441\u0442\u0440\u043e\u043a, \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430\u043c\u0438, \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u043c\u043e\u0433 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043a\u0430\u043a \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c\u0438 \u0438\u0437 \u044d\u0442\u0438\u0445 \u0447\u0438\u0441\u0435\u043b.\n\nSample Input:\n5\n2 5\n1 1\n5 1\n5 3\n1 5\n\nSample Output:\n1 1\n1 1\n1 1\n3 3\n1 1\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0412 \u043e\u0431\u0449\u0435\u043c \u0438 \u0447\u0430\u0441\u0442\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0431\u0449\u0438\u0439 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c \u0434\u043b\u044f \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u043f\u0440\u0438\u043c\u0435\u0440\u0430. \u0422\u0430\u043a \u043a\u0430\u043a \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043f\u0430\u0440\u0443 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f gcd (https://www.geeksforgeeks.org/find-greatest-common-divisor-two-numbers/) \u0434\u043b\u044f \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u043e\u0431\u0449\u0435\u0433\u043e \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f.\n\n\u0414\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u0432\u0443\u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a.\n\"\"\"\n\nimport math\nimport unittest\nimport random"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == '6\\n1\\n5\\n10'\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\\n\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\\n\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\\n\"\n\n\"\"\""
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\"\n\"\"\""
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\\n') == '1\\n2\\n3\\n3\\n4\\n4\\n7\\n'\nassert solution('4 3\\n1\\n2\\n1\\n2\\n') == '0\\n0\\n0\\n0\\n'\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\nassert solution(\"4 3\") == \"0\\n0\\n0\\n0\""
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n1\\n1\\n1\\n') == '0'\n\"\"\""
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\\n\"\n\nassert solution(\"4 3\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\\n\"\n\nassert solution(\"4 3\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\\n\"\n\nassert solution(\"4 3\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\\n\"\n\nassert solution(\"4 3\\n0\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\\n\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1\\n2\\n1\\n2\\n') == '0\\n0\\n0\\n0'\nassert solution('4 3\\n0\\n0\\n0\\n0') == '0\\n0\\n0\\n0'\nassert solution('2 2\\n0\\n1') == '0\\n1'\nassert solution('1 10\\n0') == '1'\nassert solution('1 1\\n0') == '0'\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7'\n\n\"\"\"\n\nimport sys\nimport math\nimport random"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\nprint(solution(stdin))\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\n2 1 3\n''') == '2 1 3', 'wrong result'\nassert solution('''\n5\n2 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n''') == '26 32 20 38 44 50', 'wrong result'\n\nprint('Success')\n'''\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5 3 8') == '3 8'\nassert solution('5 20 50') == '20 50'\nassert solution('6 20 50') == '20 50'\nassert solution('5 1 49') == '1 49'\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '2 1'\nassert solution('2\\n1 1') == '1 1'\nassert solution('1\\n1 1') == '1 1'\nassert solution('1\\n1 2') == '2 1'\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2 3\") == \"1 2 3 4\"\n\"\"\""
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7\"\n\"\"\"\n\nt = int(input())\nfor _ in range(t):\n    n, x, y = map(int, input().split())\n    x_s = str(x)\n    y_s = str(y)\n    for i in range(n):\n        for j in range(i+1, n):\n            if int(str(i+1)+y_s) > int(x_s+str(j+1)):\n                print(str(i+1)+x_s, str(j+1)+y_s)\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2 1 5\") == \"1 5\"\nassert solution(\"2\\n2 1 5\") == \"2 5\"\nassert solution(\"3\\n2 1 5\") == \"1 5\"\nassert solution(\"4\\n2 1 5\") == \"1 5\"\nassert solution(\"5\\n2 1 5\") == \"1 5\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\nassert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1 2\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\nassert solution('1 1 1') == '1'\nassert solution('1') == '1'\nassert solution('2 3 5 1 3 5 4') == '1 2 3 3 4 5 5'\nassert solution('5 5 4 3 3 2 1') == '1 2 3 3 4 5'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n\"\"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n\"\"\"\n\n\"\"\"\n\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435:\n\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e reversed(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440 \u043f\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u043c\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\ninp_str = 'Hello world'\nprint(''.join(reversed(inp_str)))"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '1 3 2'\nassert solution('5 1 3 2 4') == '1 2 3 4 5'\nassert solution('5 5 5 5 5') == '1 5 5 5 5'\nassert solution('10 10 10 10 10') == '1 10 10 10 10 10 10 10 10 10'\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\nassert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('0 0') == '0 0'\nassert solution('0 1') == '0 1'\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"1 2 3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"4 5 6 7\") == \"4 5 6 7\"\nassert solution(\"1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"1 2 3\") == \"1 2 3\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2\\n3\\n4\\n2 2 8 8\") == \"YES\"\nassert solution(\"3\\n3\\n3\\n4\\n5 5 5 5\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3\\n1 1 1 1\") == \"NO\"\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n4\\n2 2 8 8\") == \"YES\"\nassert solution(\"3 3 3\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"1 1 1 1\\n4\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 2 8 8\\n3') == 'NO'\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 2 8 8\") == 'NO'\nassert solution(\"4\\n3 3 3\") == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2 3\") == \"YES\"\nassert solution(\"3\\n3 3 3\") == \"NO\"\nassert solution(\"4\\n5 5 5 5\") == \"NO\"\nassert solution(\"5\\n1 1 1 1\") == \"YES\"\nassert solution(\"5\\n1 1 1 1\") == \"NO\"\n\n-----\n3\n1 1 1\n2\n3 3\n3\n1 1 1\n2\n1 2 1\n3\n2 2 2\n3\n3 3 3\n2\n1 2\n1\n1\n2\n\n3\n1 1 1\n2\n1 2 1\n3\n2 2 2\n2\n1 2\n1\n1\n2\n\n3\n1 1 1\n2\n1 2 1\n3\n1 2 1\n2\n2 2 2\n1\n1\n2\n1\n1\n2\n1\n2\n2\n2\n\n3\n1 1 1\n2\n2 2 2\n1\n1\n1\n1\n2\n2\n1\n2\n1\n1\n2\n1\n1\n2\n1\n1\n1\n2\n2\n1\n1\n1\n1\n1\n\n2\n1 2\n1\n2\n1\n1\n1\n1\n2\n2\n2\n2\n1\n1\n2\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n\n4\n2 2 2 2\n2\n1 2\n1\n1\n1\n1\n2\n2\n2\n2\n2\n2\n\n2\n1 2\n1\n1\n1\n1\n1\n2\n2\n1\n1\n1\n1\n1\n\n2\n1 2\n1\n1\n1\n1\n1\n1\n1\n2\n1\n2\n1\n1\n1\n1\n1\n\n1\n1\n1\n1\n2\n2\n2\n2\n2\n1\n1\n1\n1\n1\n1\n\n3\n1 1 1\n2\n1 2 1\n2\n1 2 1\n1\n2 1\n2\n2 2\n1\n1\n1\n1\n1\n1\n1\n\n3\n1 1 1\n2\n1 2 1\n2\n1 2 1\n1\n2 1\n2\n2 2\n1\n1\n1\n2\n1\n1\n1\n\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n\n4\n1 1 1 1\n2\n1 2 1\n2\n1 2 1\n1\n1 1 1\n1\n1 1 1\n1\n1 1 1\n2\n1 2 1\n1\n1 1 1\n2\n1 2 1\n1\n1 1 1\n2\n1 2 1\n2\n1 2 1\n1\n1 1 1\n1\n1 1 1\n1\n1 1 1\n1\n1 1 1\n2\n\n1\n1\n1\n1\n1\n1\n1\n1\n2\n2\n2\n2\n1\n1\n1\n2\n\n4\n1 1 1 1\n2\n1 2 1\n1\n1 1 1\n1\n1 1 1\n1\n1 1 1\n1\n1 1 1\n1\n1 1 1\n1\n1 1 1\n2\n\n1\n1\n1\n1\n1\n1\n1\n1\n2\n2\n2\n1\n1\n1\n1\n\n2\n1 2\n1\n2\n1\n1\n1\n1\n2\n1\n1\n1\n2\n1\n2\n1\n\n4\n1 2 1\n1 1 1\n1 2 1\n1 2 1\n1 1 1\n1 2 1\n1 2 1\n1 1 1\n2 1\n1 1 1\n2 2\n1 1 1\n1 1 1\n\n2\n1 2\n1\n1 1\n1\n1 1\n1\n2\n2\n2\n\n1\n1\n2\n2\n2\n1\n1\n1\n\n3\n1 1 1\n1 1 1\n2\n1 2 1\n1 1 1\n1 1 1\n1 2 1\n2 2 2\n2 1\n1 1 1\n1 1 1\n\n1\n1\n1\n1\n1\n2\n2\n1\n2\n2\n1\n\n1\n2\n1\n1\n1\n2\n\n3\n1 1 1\n1 2 1\n1 1 1\n1 2 1\n1 1 1\n1 2 1\n1 2 1\n1 2 1\n\n2\n1 2\n1\n1 1\n1\n1 1\n1\n2\n2\n2\n\n3\n1 1 1\n1 2 1\n1 2 1\n1 1 1\n1 2 1\n1 2 1\n1 1 1\n1 1 1\n\n2\n1 2\n1\n1 1\n1\n2\n\n1\n2\n1\n1\n1\n2\n\n3\n1 2 1\n1 2 1\n1 2 1\n2 1 1\n1 1 1\n1 2 1\n2 1 1\n\n2\n2 2 2\n2 2 2\n1 2\n2 1\n2 1\n\n3\n1 1 1\n1 2 1\n1 1 1\n1 2 1\n1 1 1\n1 2 1\n1 1 1\n\n3\n1 2 1\n1 1 1\n1 1 1\n1 2 1\n2 2 2\n\n1\n1\n1\n1\n1\n1\n1\n2\n2\n1\n\n1\n2\n1\n1\n1\n2\n\n3\n1 1 1\n2\n1 1 1\n2 1 1\n2 1 1\n1 2 1\n1 2 1\n1 1 1\n\n2\n2 2 2\n1 1 1\n1 1 1\n\n3\n1 2 1\n1 2 1\n2 2 2\n1 2 1\n\n1\n1\n1\n2\n2\n1\n2\n\n3\n1 1 1\n2 1 1\n2 1 1\n\n1\n1\n1\n1\n1\n1\n1\n\n2\n1 2\n1\n1 1\n1\n\n1\n1\n1\n1\n\n3\n1 2 1\n1 1 1\n1 1 1\n1 1 1\n1 2 1\n1 2 1\n\n2\n1 2\n1\n1 1\n1\n1 1\n\n1\n2\n1\n1 1\n\n1\n2\n1\n1 1\n1\n\n3\n2 1 1\n2 2 2\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n\n2\n2 2 2\n1 1 1\n1 1 1\n\n3\n2 1 1\n1 2 1\n1 1 1\n2 1 1\n\n1\n2\n1\n1 1\n1\n1\n1\n\n2\n1 2\n2 2 2\n1 1 1\n\n1\n1\n1\n1\n\n2\n1 2\n1 1 1\n1 1 1\n\n3\n1 1 1\n1 1 1\n1 1 1\n\n2\n1 1\n1 1\n1 1\n\n1"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2 3\\n4\\n2 2 8 8\") == \"YES\"\nassert solution(\"3\\n3 3 3\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"1\\n1 1 1 1\\n\") == \"YES\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(output())\n\n\n-----Instructions-----\n\nIn each test case, print YES if it is possible to obtain the array with an odd sum of elements, and NO otherwise.\n\nThe input format is as described above. The output format is as described above.\n\nYou can print each character of the string in upper case in the output.\n'''\n\nimport sys"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1') == 'YES'\nassert solution('2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1') == 'NO'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n2 3\\n4\\n2 2 8 8\") == \"YES\"\n\nassert solution(\"3\\n3 3 3\\n4\\n5 5 5 5\") == \"NO\"\n\nassert solution(\"4\\n1 1 1 1\\n4\") == \"NO\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\n\n-----\n1: 4 10\n2: 4 2\n3: 4 3\n4: 4 4\n5: 4 5\n6: 4 6\n7: 4 7\n8: 4 8\n9: 4 9\n10: 4 10\n\n10: 4 1 3 5 2 6 10 7 8 9 4\n-1\n\n3: 4 3\n4: 4 4\n5: 4 5\n6: 4 6\n7: 4 7\n8: 4 8\n9: 4 9\n10: 4 10\n\n9: 4 1 5 2 7 3 6 10 8 4\n-1\n\n5: 4 5\n6: 4 6\n7: 4 7\n8: 4 8\n9: 4 9\n10: 4 10\n\n9: 4 1 7 2 8 3 6 10 5 4\n-1\n\n6: 4 6\n7: 4 7\n8: 4 8\n9: 4 9\n10: 4 10\n\n9: 4 1 6 5 3 7 2 8 10 4\n-1\n\n7: 4 7\n8: 4 8\n9: 4 9\n10: 4 10\n\n9: 4 1 8 3 7 2 6 10 5 4\n-1\n\n8: 4 8\n9: 4 9\n10: 4 10\n\n9: 4 1 9 2 8 3 7 6 10 5 4\n-1\n\n7: 4 7\n8: 4 8\n9: 4 9\n10: 4 10\n\n9: 4 1 9 2 8 3 7 6 10 5 4\n-1\n\n6: 4 6\n7: 4 7\n8: 4 8\n9: 4 9\n10: 4 10\n\n9: 4 1 7 2 6 10 3 5 4 8 9\n-1\n\n5: 4 5\n6: 4 6\n7: 4 7\n8: 4 8\n9: 4 9\n10: 4 10\n\n9: 4 1 7 2 8 3 6 10 5 4\n-1\n\n4: 4 4\n5: 4 5\n6: 4 6\n7: 4 7\n8: 4 8\n9: 4 9\n10: 4 10\n\n9: 4 1 6 3 7 2 5 10 4 8\n-1\n\n3: 4 3\n4: 4 4\n5: 4 5\n6: 4 6\n7: 4 7\n8: 4 8\n9: 4 9\n10: 4 10\n\n9: 4 1 7 2 5 3 6 10 8 4\n-1\n\n2: 4 2\n3: 4 3\n4: 4 4\n5: 4 5\n6: 4 6\n7: 4 7\n8: 4 8\n9: 4 9\n10: 4 10\n\n9: 4 1 6 3 5 2 7 4 8 10\n-1\n\n1: 4 1\n2: 4 2\n3: 4 3\n4: 4 4\n5: 4 5\n6: 4 6\n7: 4 7\n8: 4 8\n9: 4 9\n10: 4 10\n\n9: 4 1 6 3 5 2 7 4 8 10\n-1\n\n0: 4\n1: 4\n2: 4\n3: 4\n4: 4\n\n9: 4 1 7 2 8 3 6 10 5 4\n-1\n\n-----\n'''\n\nfrom itertools import permutations\n\ntest = int(input())\n\nfor i in range(test):\n    num = int(input())\n    list_1 = []\n\n    for k in range(1, num+1):\n        list_1.append(k)\n\n    list_2 = []\n    count = 1\n    list_3 = []\n\n    for j in permutations(list_1):\n        list_2.append(list(j))\n        list_3.append(count)\n        count += 1\n\n    list_4 = []\n\n    for i in list_2:\n        for j in range(0, num-1):\n            if abs(i[j+1] - i[j]) <= 3 and abs(i[j] - i[j+1]) <= 3:\n                list_4.append(i)\n\n    if not list_4:\n        print(-1)\n    else:\n        for i in list_4:\n            print(' '.join([str(k) for k in i]))\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n6') == '9 6 10 8 4 7 3 1 5 2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n4\\n6\\n7\\n13\") == \"9 6 10 8 4 7 3 1 5 2\"\n\"\"\"\n\nfrom queue import Queue\nfrom typing import List\nimport sys\n\nclass Solution:\n    def __init__(self):\n        self.max = None\n        self.min = None\n        self.permutation = []\n        self.permutations = []\n        self.result = None\n\n    def process(self, line: str) -> None:\n        line = int(line)\n        if self.max is None or self.max < line:\n            self.max = line\n        if self.min is None or self.min > line:\n            self.min = line\n\n    def find_permutation(self):\n        while not self.queue.empty():\n            element = self.queue.get()\n            if element == \"1\":\n                self.permutation.append(1)\n            elif element == \"2\":\n                self.permutation.append(2)\n            elif element == \"3\":\n                self.permutation.append(3)\n            elif element == \"4\":\n                self.permutation.append(4)\n            elif element == \"5\":\n                self.permutation.append(5)\n            elif element == \"6\":\n                self.permutation.append(6)\n            elif element == \"7\":\n                self.permutation.append(7)\n            elif element == \"8\":\n                self.permutation.append(8)\n            elif element == \"9\":\n                self.permutation.append(9)\n            elif element == \"0\":\n                self.permutation.append(0)\n\n    def generate_permutations(self, line: str) -> None:\n        line = int(line)\n        if line <= 9:\n            self.permutation.append(line)\n        else:\n            for i in range(1, line + 1):\n                if i == 1:\n                    self.queue.put(\"1\")\n                elif i == 2:\n                    self.queue.put(\"2\")\n                elif i == 3:\n                    self.queue.put(\"3\")\n                elif i == 4:\n                    self.queue.put(\"4\")\n                elif i == 5:\n                    self.queue.put(\"5\")\n                elif i == 6:\n                    self.queue.put(\"6\")\n                elif i == 7:\n                    self.queue.put(\"7\")\n                elif i == 8:\n                    self.queue.put(\"8\")\n                elif i == 9:\n                    self.queue.put(\"9\")\n                elif i == 0:\n                    self.queue.put(\"0\")\n\n    def find_permutation_brute_force(self):\n        for line in sys.stdin:\n            if len(self.permutation) == 9:\n                self.permutations.append(self.permutation[:])\n            self.generate_permutations(line)\n            self.find_permutation()\n\n    def permute(self, nums: List[int]) -> None:\n        \"\"\"\n        1. Enqueue '1' to self.queue\n        2. Enqueue '2' to self.queue\n        3. Enqueue '3' to self.queue\n        4. Enqueue '4' to self.queue\n        5. Enqueue '5' to self.queue\n        6. Enqueue '6' to self.queue\n        7. Enqueue '7' to self.queue\n        8. Enqueue '8' to self.queue\n        9. Enqueue '9' to self.queue\n        10. Enqueue '0' to self.queue\n        11. Use self.queue.queue.get() to get the element of self.queue.\n        12. Do the same for all elements in the self.queue.\n        13. Reset the self.queue\n        \"\"\"\n        self.queue = Queue()\n        self.permutation = []\n        self.permutations = []\n        self.result = None\n        self.find_permutation_brute_force()\n        self.permutations.sort()\n        self.result = self.permutations[0]\n        for i in range(1, len(self.permutations)):\n            if self.permutations[i]!= self.result:\n                self.result = -1\n                break\n\n    def test(self):\n        assert self.permute(\"2\\n4\\n6\\n7\\n13\") == \"9 6 10 8 4 7 3 1 5 2\"\n\n\nsolution = Solution()\nsolution.test()\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n3\") == \"7 3\"\nassert solution(\"8\\n6\") == \"8 6\"\nassert solution(\"8\\n7\") == \"-1\"\nassert solution(\"8\\n8\") == \"8 8\"\nassert solution(\"9\\n5\") == \"9 5\"\n\n\"\"\""
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('4') == '4'\nassert solution('4 3 1 2') == '4 3 1 2'\n\nassert solution('1 2 3 4') == '4 3 1 2'\nassert solution('1 2 3 4 5') == '4 3 1 2 5'\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('2\\n') == '2'\nassert solution('4\\n') == '4'\nassert solution('6\\n') == '6'\nassert solution('7\\n') == '7'\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n10\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"2\\n4\") == \"-1\"\nassert solution(\"4\\n6\") == \"5 3 6 2 4 1\"\nassert solution(\"7\\n13\") == \"5 1 3 6 2 4 7\""
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n4\\n6\\n7\\n13\\n') == '9 6 10 8 4 7 3 1 5 2\\n-1\\n3 1 4 2\\n5 3 6 2 4 1\\n5 1 3 6 2 4 7'\nassert solution('1\\n2\\n3\\n4\\n5\\n') == '1 2 3 4 5\\n-1\\n1 2 3 4 5'\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"9 6 10 8 4 7 3 1 5 2\"\n\nsolution(stdin.readlines())\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '-1'\nassert solution('3\\n') == '3 1 2'\nassert solution('4\\n') == '1 4 2 3'\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n3 2 6') == '1'\nassert solution('1\\n7') == '-1'\nassert solution('4\\n4 9 2 1 18 3 0') == '0'\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '-1'\nassert solution('2\\n1\\n') == '0'\nassert solution('3\\n1\\n') == '1'\nassert solution('4\\n2\\n') == '0'\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\") == '2\\n1\\n-1\\n0'"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\") == \"2\\n1\\n-1\\n0\"\n\"\"\"\nfrom sys import stdin\n\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    i, j = 0, 1\n    c = 0\n    while i < n - 1:\n        if a[i] % 2 == a[j] % 2:\n            i += 1\n            j += 1\n            continue\n\n        k, l = i + 1, j + 1\n        while k < j and l < n:\n            if a[k] % 2 == a[l] % 2:\n                break\n            k += 1\n            l += 1\n\n        if l == n:\n            c = -1\n            break\n\n        c += j - i\n        a[i], a[j] = a[j], a[i]\n        i = j\n        j += 1\n\n    print(c)\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_00) == 2\nassert solution(test_01) == 1\nassert solution(test_02) == -1\nassert solution(test_03) == 0\nassert solution(test_04) == -1\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\") == 2\n\"\"\"\n\nfrom collections import Counter\n\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    count = Counter(a)\n    flag = False\n    for i in range(n):\n        if i % 2 == 0 and count[a[i]] % 2!= 0:\n            flag = True\n            break\n        elif i % 2!= 0 and count[a[i]] % 2!= 0:\n            flag = True\n            break\n    print(-1) if flag else print(sum(a))\n    t -= 1\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\") == '2'\nassert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n4 9 2 1 18 3 0\") == '2'\nassert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n4 9 2 1 18 3 0\") == '1'\n\"\"\"\nimport math\nimport sys\n\nsys.setrecursionlimit(1000000)\n\nDEBUG = False\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 2 7 6\") == '2'\nassert solution(\"3\\n3 2 6\") == '1'\nassert solution(\"1\\n7\") == '-1'\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n1\n1\n\"\"\") == '-1'\nassert solution(\n\"\"\"\n1\n3\n0 1 2\n\n2\n0 2 1\n\n4\n0 1 2 3\n\n0\n0 1 2 3\n\"\"\") == '0'\nassert solution(\n\"\"\"\n1\n3\n0 1 2\n\n2\n0 2 1\n\n4\n0 1 2 3\n\n0\n0 1 2 3\n\"\"\") == '1'\nassert solution(\n\"\"\"\n2\n4\n0 1 2 3\n\n4\n0 1 2 3\n\n4\n0 1 2 3\n\n0\n0 1 2 3\n\"\"\") == '-1'\n\nassert solution(\n\"\"\"\n1\n3\n0 1 2\n\n2\n0 2 1\n\n4\n0 1 2 3\n\n0\n0 1 2 3\n\"\"\") == '2'\n\"\"\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n\") == \"2\\n1\\n-1\\n0\"\n\"\"\"\nimport sys\nimport copy\n\nDEBUG = False"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\") == \"0 -1 1 -1\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1\""
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\") == \"0 -1 1 -1\""
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1\"\nassert solution(\"6\\n1 2\\n2 3\\n2 4\\n2 5\\n1 6\\n1 7\\n1 8\\n1 9\\n\") == \"0 -1 1 -1 2 2 2 2\"\n\n\"\"\"\n\nimport sys\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n') == '2 2 2 2 2 1 1 0 2'\nassert solution('4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n') == '0 -1 1 -1'\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('2 2 2 2 2 1 1 0 2') == '2 2 2 2 2 1 1 0 2'\nassert solution('0 0 1 0') == '0 -1 1 -1'\nassert solution('0 0 0 0') == '0 -1 1 -1'\nassert solution('0 1 1 1 0 0 0 0 1') == '0 -1 1 -1 2 2 2 2 1'\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n0 1 1 1\\n1 2\\n1 3\\n1 4\\n') == '0 -1 1 -1\\n'\nassert solution('4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n') == '0 -1 1 -1\\n'\nassert solution('4\\n0 0 1 1\\n1 2\\n1 3\\n1 4\\n') == '0 -1 1 -1\\n'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''9\n0 1 1 1 0 0 0 0 1\n1 2\n1 3\n3 4\n3 5\n2 6\n4 7\n6 8\n5 9''') == '2 2 2 2 2 1 1 0 2'\n\"\"\""
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n\") == \"2 2 2 2 2 1 1 0 2\"\n\"\"\""
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n0 1 1 1\\n1 2\\n1 3\\n1 4') == '2 2 2 2 1 1 0 2'"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1\") == \"0\"\nassert solution(\"3\\n1\") == \"2\"\nassert solution(\"12\\n1\") == \"36\"\nassert solution(\"12345\\n1\") == \"12\"\nassert solution(\"15116544\\n1\") == \"36\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n12\\n12345\\n15116544\\n387420489\\n\") == \"0\\n-1\\n2\\n-1\\n-1\\n12\\n36\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2') == '-1'\nassert solution('3') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\") == '1\\n-1'\nassert solution(\"3\\n5\") == '3\\n-1'\nassert solution(\"7\\n12\") == '7\\n-1'\nassert solution(\"1\\n7\") == '1\\n3'\nassert solution(\"2\\n10\") == '2\\n6'\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\") == \"1\"\nassert solution(\"2\\n3\") == \"1\"\nassert solution(\"2\\n12\") == \"2\"\nassert solution(\"2\\n123\") == \"2\"\nassert solution(\"2\\n1234\") == \"2\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('15116544') == '-1'\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"7\") == \"3\"\nassert solution(\"8\") == \"3\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('2') == '1'\nassert solution('12345') == '4'\nassert solution('15116544') == '12'\nassert solution('387420489') == '-1'\n\"\"\"\n\nimport sys\nimport collections\nimport heapq\nfrom typing import Dict, List, Union, Optional, Set\n\nsys.stdin = open(\"input.txt\")\n\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.children: Dict[int, Union[Node, int]] = dict()\n        self.visited: bool = False\n        self.min_parent: Union[Node, int] = None\n\n    def __repr__(self):\n        return str(self.value)\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\") == \"0\"\nassert solution(\"8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\") == \"4\"\nassert solution(\"7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\") == \"2\"\nassert solution(\"6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\") == \"0\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"8\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"15116544\") == \"36\"\nassert solution(\"12345\") == \"-1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"RBRGR\") == 3\nassert solution(\"BBBRR\") == 0\n\"\"\""
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RGBRGBRGB\") == \"RRRRRRRRRRRRRRRRRRRRRRRR\"\nassert solution(\"B\") == \"BB\"\nassert solution(\"RRRRRRRRRRRRRRRRRRRRRRRR\") == \"RRRRRRRRRRRRRRRRRRRRRRRR\"\nassert solution(\"BBB\") == \"BBBBB\"\nassert solution(\"BBBBB\") == \"BBBBBBBBBBBBBBBBBBBBBBBBBB\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"RBRGR\") == 3\nassert solution(\"BBBRR\") == 0\nprint(solution(\"BGGGG\"))\nprint(solution(\"RBRGR\"))\nprint(solution(\"BBBRR\"))\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"GBRGB\") == \"R\"\nassert solution(\"RBRGB\") == \"RRR\"\nassert solution(\"RGBG\") == \"BB\"\nassert solution(\"GBBB\") == \"B\"\n\nprint(\"Example tests\")\nprint(solution(\"GBRGB\"))\nprint(solution(\"RBRGB\"))\nprint(solution(\"RGBG\"))\nprint(solution(\"GBBB\"))\nprint(solution(\"RRRR\"))\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")\n\n\"\"\"\n\nimport unittest\n\nclass SolutionTests(unittest.TestCase):\n    def test_1(self):\n        assert solution(\"GBRGB\") == \"R\"\n    def test_2(self):\n        "
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RBRGR\") == 3\nassert solution(\"BBBBR\") == 2\nassert solution(\"RBRGRGB\") == 3\nassert solution(\"RRRRRRRR\") == 0\nassert solution(\"GBGGBBB\") == 5\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BBBGGGG\") == \"3\"\nassert solution(\"BGGGGG\") == \"1\"\nassert solution(\"BBBRRR\") == \"3\"\nassert solution(\"RRRRRR\") == \"0\"\nassert solution(\"RRGGBB\") == \"1\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RBRGR\") == 3\nassert solution(\"BBBB\") == 0\nassert solution(\"BBRRR\") == 2\n\"\"\"\n\nfrom typing import Callable, List\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RRRRRRRRRRRRRRRR\") == \"8\"\nassert solution(\"RBRRRRRRRRRRRRRRR\") == \"3\"\nassert solution(\"BBRRRRRRRRRRRRRRR\") == \"3\"\nassert solution(\"RRRRRRRRRRRRRRRRR\") == \"8\"\nassert solution
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"RBRGR\") == 3\nassert solution(\"BBBRR\") == 0\n\n\"\"\"\nfrom typing import List, Set, Tuple"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('B') == ''\nassert solution('BB') == ''\nassert solution('RRR') == ''\nassert solution('RRRR') == ''\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 1 2 1\\n1 1 1 2 1\\n\") == \"3\"\nassert solution(\"3\\n2 3 1 2 1\\n1 1 1 2 1\\n\") == \"3\"\nassert solution(\"3\\n1 2 3 2 1\\n2 1 1 2 1\\n\") == \"2\""
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2') == '3\\n3'\n\"\"\"\n\n\"\"\"\nIf we could use any base then we could use 36 because in base 36 \nwe will have numbers from 0 to 36. We can solve this problem by using base 10.\nWe can find the sum of all digits in any number.\n\"\"\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10\\n') == 3\nassert solution('1 1 1 1 1 2 2\\n') == 3"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n1 1 1 1 1 2 2\") == \"3\"\nassert solution(\"5\\n3 1 2 3 1\") == \"3\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5\\n3 1 2 3 1\") == 3\nassert solution(\"2\\n7\\n1 1 1 1 1 2 2\") == 3\nassert solution(\"2\\n3\\n1 1 1\") == 1\nassert solution(\"1\\n3\\n1 1 1\") == 1\n\n-----\n\nhttps://www.codewars.com/kata/54eb33e5bc1a25440d000891/train/python\n\n5\n3\n1 2 3 1\n7\n1 1 1 1 1 2 2\n3\n1 1 1\n\n\n3\n2\n1 1 1\n3\n1 1 1\n4\n1 1 1 1\n\n1\n2\n1 1 1\n\n\n3\n2\n1 1 1\n3\n1 1 1\n\n3\n2\n1 1 1\n\n3\n1\n1 1 1\n\n3\n1\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n2\n1 1 1\n\n\n1\n4\n1 1 1 1\n\n1\n3\n1 1 1\n\n4\n1 1 1 1\n\n2\n1 1 1\n\n\n3\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n1\n2\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n2\n1 1 1\n\n1\n1\n1 1 1\n\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n1\n1\n1 1 1\n\n4\n1 1 1 1\n\n2\n1 1 1\n\n1\n1\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n2\n1 1 1\n\n1\n1\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n3\n1 1 1\n\n3\n1 1 1\n\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n1\n2\n1 1 1\n\n3\n2\n1 1 1\n\n1\n2\n1 1 1\n\n2\n2\n1 1 1\n\n1\n2\n1 1 1\n\n2\n2\n1 1 1\n\n2\n1\n1 1 1\n\n1\n1\n1 1 1\n\n4\n1\n1 1 1\n\n3\n1\n1 1 1\n\n1\n2\n1 1 1\n\n3\n1\n1 1 1\n\n1\n1\n1 1 1\n\n4\n1\n1 1 1\n\n1\n1\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n1\n1\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n1\n2\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n1\n3\n1 1 1\n\n3\n3\n1 1 1\n\n1\n2\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n1\n2\n1 1 1\n\n4\n1\n1 1 1\n\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n1\n1\n1 1 1\n\n4\n1\n1 1 1\n\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n1\n2\n1 1 1\n\n1\n2\n1 1 1\n\n1\n1\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n1\n3\n1 1 1\n\n1\n1\n1 1 1\n\n4\n1\n1 1 1\n\n1\n1\n1 1 1\n\n3\n1\n1 1 1\n\n1\n1\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n1\n1\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n3\n1 1 1\n\n2\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n3\n1 1 1\n\n3\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n2\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n3\n1 1 1\n\n4\n1 1 1 1\n\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n1\n2\n1 1 1\n\n4\n1\n1 1 1\n\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n1\n3\n1 1 1\n\n1\n1\n1 1 1\n\n4\n1\n1 1 1\n\n1\n1\n1 1 1\n\n4\n1\n1 1 1\n\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n1\n2\n1 1 1\n\n4\n1\n1 1 1\n\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n1\n2\n1 1 1\n\n3\n2\n1 1 1\n\n2\n1\n1 1 1\n\n3\n1\n1 1 1\n\n3\n1\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n3\n1 1 1\n\n1\n2\n1 1 1\n\n5\n5\n1 1 1 1 2 2\n3\n1 1 1\n\n1\n1\n1 1"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\"\nassert solution(\"4\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\"\n\"\"\"\nfrom collections import deque, Counter\n\nimport sys\n\nsys.setrecursionlimit(10000)\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = deque(a)\n    count = Counter()\n    count[0] = 1\n\n    def solve(n, a):\n        if n < 0:\n            return -1\n        if n == 0:\n            return 1\n        if n in count:\n            return count[n]\n        res = 0\n        for i in range(len(a) - 1, -1, -1):\n            if n >= a[i]:\n                res += solve(n - a[i], a)\n        count[n] = res\n        return res\n\n    print(solve(n, a))\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\"\nassert solution(\"5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\"\nassert solution(\"3\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\"\nassert solution(\"3\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\"\nassert solution(\"5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\"\n\n'''"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n1 1 1 1 1 2 2\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\nassert solution(\"4\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\n\"\"\"\n\n\nfrom typing import List, Tuple, Union"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\"\nassert solution(\"5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\"\nassert solution(\"5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n5\\n4 1 3 2') == '1 5 2 4 3'\n\"\"\"\n\nfrom typing import List, Dict, Tuple\nfrom collections import defaultdict\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1') == '1 5 2 4 3'\nassert solution('4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3') == '1 2 3 4'\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('3\\n2 1') == '2 1'\nassert solution('5\\n5 4 1 3 2') == '1 5 2 4 3'\n\nassert solution('7\\n1 4 5 3 2 7 6') == '1 4 5 2 3 7 6'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4\"\nassert solution(\"4\\n1\\n1\") == \"1\"\nassert solution(\"4\\n4 3 2 1\") == \"1 2 3 4\"\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\n\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4\"\n\nassert solution(\"1\\n1\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n5\\n5 4 1 3 2') == '1 5 2 4 3'\nassert solution('4\\n4\\n1 2 4 3') == '1 2 3 4'\nassert solution('1\\n1\\n1') == '1'\nassert solution('2\\n3\\n1 2 3') == '1 2 3'\n\n\"\"\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\n\"\"\"\nimport sys\nfrom typing import Dict, List\n\nfrom utils import (\n    get_n_permutations,\n    random_permutation_of_n_elements,\n    random_permutation_of_n_elements_with_repeats,\n)"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\n\"\"\"\n\n\nfrom math import sqrt\nimport copy\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\") == \"1 5 2 4 3 \"\nassert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 3 4\") == \"1 2 3 4 \"\n\"\"\"\nfrom math import factorial"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1') == '1 5 2 4 3\\n1 2 3 4\\n1\\n1 4 3 2'\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3\\n1 2 3 4\") == \"YES\"\nassert solution(\"5\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\\n\") == \"YES\"\n\"\"\"\n\nimport collections\nimport itertools\nimport math\nimport sys\n\nsys.setrecursionlimit(10 ** 9)\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\") == \"YES\"\nassert solution(\"5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\"\nassert solution(\"5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\"\nassert solution(\"5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4') == 'YES'\nassert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4') == 'NO'\n\"\"\"\n\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'YES\\nYES\\nNO\\nYES\\nYES'\n\n-----\n\n| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"YES\\nNO\\nYES\\nYES\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\") == \"YES\"\n\"\"\"\n\nimport sys\nfrom math import gcd\n\ntest_input = \"\"\"\n5\n4\n1 2 3 4\n3\n1 3 2\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4\n\"\"\"\n\nassert solution(test_input) == \"YES\\nYES\\nNO\\nYES\\nYES\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\n* if there is only one child, then he gets the minimum number of candies\n* if there are 2 or more children, then he needs to distribute candies among them.\n* the number of candies to distribute between children is equal to the maximum number of candies Santa can give to one child divided by 2.\n* if there is only one child, then he gets the minimum number of candies\n* if there are 2 or more children, then he needs to distribute candies among them.\n* the number of candies to distribute between children is equal to the maximum number of candies Santa can give to one child divided by 2.\n\"\"\"\n\nimport sys\nimport math\nfrom typing import List, Tuple\n\nT = int(input())\nfor _ in range(T):\n    n, k = list(map(int, input().split()))\n    print(math.floor(n / 2))\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5 18 10 6 75015\"\nassert solution(\"2 2\\n1 1\") == \"0\"\nassert solution(\"1 1\\n1\") == \"0\"\n\nimport ast"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"5\"\nassert solution(\"19 4\") == \"18\"\nassert solution(\"12 7\") == \"10\"\nassert solution(\"6 2\") == \"6\"\nassert solution(\"100000 50010\") == \"75015\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"5\\n5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\n\"\"\"\nfrom math import floor\n\nassert floor(2) == 2\nassert floor(2.0) == 2\nassert floor(2.5) == 2\nassert floor(0.5) == 0\n\nt = int(input())\nfor _ in range(t):\n    n, k = list(map(int, input().split()))\n    b = n - 1\n    s = floor((k + 1) / 2)\n    a = max(floor(n / 2), s)\n    print(max(b - a + 1, 0))\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2') == '5\\n18'\nassert solution('19 4') == '19\\n32'\nassert solution('12 7') == '10\\n26'\nassert solution('6 2') == '6\\n15'\nassert solution('100000 50010') == '75015\\n75015'\n\n-----\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n5\n5 2"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\nassert solution(\"2 1\\n3 2\\n2 1\\n1 1\\n1 1\\n1 1\") == \"2\\n3\\n2\\n1\\n1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1\\n2 1\\n2 1\") == \"2\\n2\"\nassert solution(\"1 1\\n2 1\\n2 1\\n2 1\\n2 1\") == \"2\\n2\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5\\n2\\n19\\n12\\n6\\n100000 50010') == '5'\nassert solution('5\\n2\\n19\\n12\\n6\\n100000 50010') == '18'\nassert solution('5\\n2\\n19\\n12\\n6\\n100000 50010') == '10'\nassert solution('5\\n2\\n19\\n12\\n6\\n100000 50010') == '6'\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5\\n18\\n10\\n6\\n75015'\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\nassert solution(\"6 2\\n11 1\\n6 2\\n1 1\") == \"6\\n6\\n6\\n6\\n6\"\n\"\"\"\n\nfrom math import floor\n\nt = int(input())\nfor _ in range(t):\n    n, k = list(map(int, input().split(\" \")))\n    assert n > 0 and k > 0\n    # k - 1 because we want minimum number of kids\n    print(floor((k - 1) * 2 + n / k))\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 4\") == \"YES\"\nassert solution(\"100 4\") == \"NO\"\nassert solution(\"8 7\") == \"YES\"\nassert solution(\"97 2\") == \"NO\"\nassert solution(\"8 8\") == \"YES\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n3\\n3\\n') == 'YES\\n1 2 3\\nNO\\n'\n\"\"\""
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 4\") == \"YES\"\nassert solution(\"10 3\") == \"4 2 4\"\nassert solution(\"100 4\") == \"YES\"\nassert solution(\"8 7\") == \"YES\"\nassert solution(\"97 2\") == \"NO\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\") == \"YES\\n4 2 4\"\nassert solution(\"1000000000 9\\n10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\") == \"YES\\n1 1 1 1 1 1 1 1\"\nassert solution(\"1000000000 9\\n10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\") == \"YES\\n55 5 5 35\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"NO\"\nassert solution(\"3 2\") == \"YES\"\nassert solution(\"4 2\") == \"YES\"\nassert solution(\"4 3\") == \"NO\"\n\"\"\"\n\nimport re\nfrom typing import List\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_data) == test_result\n-----------------PYTHON------------------\n\nt = int(input())\n\nfor i in range(t):\n    n, k = map(int, input().split())\n    if k % 2 == 0:\n        x = k // 2\n        if n >= k:\n            print(\"YES\")\n            print(x, x, x, x, x, x, x, x, x)\n        else:\n            print(\"NO\")\n    else:\n        x = (k + 1) // 2\n        if n >= x:\n            print(\"YES\")\n            print(x, x, x, x, x, x, x, x, x)\n        else:\n            print(\"NO\")\n\n\n-----"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n3 1\\n\") == \"YES\\n4 2 4\"\nassert solution(\"4 1\\n1 1\\n\") == \"YES\\n1 1 1 1 1\"\nassert solution(\"7 1\\n3 1\\n\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 3') == '4 2 4'\nassert solution('100 4') == 'YES'\nassert solution('8 7') == 'YES'\nassert solution('97 2') == 'YES'\nassert solution('8 8') == 'NO'\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 3\") == \"YES\"\nassert solution(\"7 4 5\") == \"NO\"\nassert solution(\"19 8 11\") == \"YES\"\nassert solution(\"1 1 1 1 1 1 1 1\") == \"NO\"\nassert solution(\"1 1 1 1 1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"4\n    1 3 4\n    1 10 100\n    10000000000000000 10000000000000000 10000000000000000\n    23 34 45\"\"\") == \"\"\"4\n    55\n    15000000000000000\n    51\"\"\"\nprint(solution(input()))\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n') == '4\\n55\\n15000000000000000\\n51'\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\n\nassert solution('4\\n3 2 4\\n3 2 4\\n3 2 4') == '4\\n8\\n12'\n\nassert solution('4\\n3 2 4\\n3 2 4\\n3 2 4') == '4\\n8\\n12'\n\nassert solution('4\\n3 2 4\\n3 2 4\\n3 2 4') == '4\\n8\\n12'\n\nassert solution('4\\n1 0 0\\n1 0 0\\n1 0 0') == '4\\n0\\n0'\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 3 4\\n1 10 100') == '4'\nassert solution('1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '55'\n\"\"\""
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45''') == '''4\n55\n15000000000000000\n51'''\n\nassert solution('''4\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45''') == '''4\n55\n15000000000000000\n51'''\n\nassert solution('''4\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45''') == '''4\n55\n15000000000000000\n51'''\n\nassert solution('''2\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45''') == '''2\n4\n9000000000000000'''\n\nassert solution('''2\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45''') == '''2\n4\n9000000000000000'''"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\""
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nassert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nassert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nassert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nassert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\n\n-----Explanation-----\nThe first query asks how many candies there are in the first pile, Alice can take all of them, Bob can take none. Then, in the second query, Alice takes the second pile, and Bob takes the first one, so Alice has 3 candies and Bob has 4 candies. Next query asks how many candies are in the third pile, and Bob can take the whole pile, Alice must take the whole pile too.\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n\") == \"4\\n55\\n15000000000000000\\n51\"\nprint(solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n\"))\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\n\"\"\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\\nabcbac\") == \"6\"\nassert solution(\"3 6\\naaa\") == \"3\"\nassert solution(\"7 1000\\nabczgyo\") == \"7\"\nassert solution(\"5 4\\nababa\") == \"4\"\nassert solution(\"20 10\\naaebdbabdbbddaadaadc\") == \"15\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stub) == stub_output"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\neccedececacbcbccbdec\\n\") == \"6\\n3\\n5\\n4\\n15\\n10\"\n\"\"\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3\\naabcbac\\n3 6\\naaa\") == 6\nassert solution(\"6 3\\naabcbac\\n3 6\\naaa\") == 3\nassert solution(\"6 3\\nabcbac\\n3 6\\naaa\") == 3\nassert solution(\"6 3\\nabcbac\\n3 6\\naaa\") == 3\nassert solution(\"6 3\\nabcbac\\n3 6\\naaa\") == 3\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(beads, k) == answer\n\n\"\"\"\n\nfrom typing import Dict, List, Tuple\n\nimport sys\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6\") == '3'\nassert solution(\"5 4\") == '5'\nassert solution(\"7 1000\") == '7'\nassert solution(\"20 10\") == '20'\n\n\"\"\"\n\nimport math\n\nt = int(input())\nans = []\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    s = input()\n    L = []\n    for i in range(k-1):\n        L.append(s[i])\n    d = {}\n    for l in L:\n        d[l] = d.get(l, 0) + 1\n    if k == 1:\n        ans.append(1)\n    else:\n        ans.append(max([len(l) for l in d.keys()]))\nfor a in ans:\n    print(a)\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\\n\") == '6\\n3\\n5\\n4\\n15\\n10'\n\n'''\n\nimport sys\nimport string"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 ababa\") == 3\nassert solution(\"1 1 aaa\") == 0\nassert solution(\"1 1 bbb\") == 1\nassert solution(\"1 1 ccc\") == 0\nassert solution(\"2 1 ccc\") == 0\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3\\nabcbac\") == '6'\nassert solution(\"3 6\\naa\") == '3'\nassert solution(\"7 1000\\nabczgyo\") == '7'\nassert solution(\"5 4\\nababa\") == '4'\nassert solution(\"20 10\\naaebdbabdbbddaadaadc\") == '15'\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('aa') == 'aa'\nassert solution('aabb') == 'aabb'\nassert solution('bac') == 'a'\nassert solution('ababa') == 'ababa'\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == 'NO'\nassert solution(\"2 3 4 5 6\") == 'YES'\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == 'NO'\nassert solution(\"3 1 1\") == 'YES'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 5)\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 2 3 4') == 'NO'\nassert solution('2 2\\n1 2') == 'NO'\nassert solution('3 3\\n1 2 3') == 'YES\\n1 2 3'\nassert solution('5 4\\n3 4 5 6 7') == 'NO'\nassert solution('5 3\\n1 2 3 4 5') == 'YES\\n1 2 3'\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 3\n7 18 3 14 1''') == 'YES\\n1 3 5'\nassert solution('''5 4\n1 2 3 4 5''') == 'NO'\nassert solution('''5 2\n1 2 3 4 5''') == 'NO'\nassert solution('''5 4\n1 2 3 4 5''') == 'YES\\n1 3 5'\nassert solution('''6 2\n1 2 8 4 10 2''') == 'NO'\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n1 2 3 4 5\") == \"YES\\n1 3 5\"\nassert solution(\"4 4\\n1 2 3 4 5\") == \"NO\"\nassert solution(\"6 4\\n1 2 3 4 5 6\") == \"NO\"\nassert solution(\"4 5\\n2 3 4 5\") == \"YES\\n1 2 3 4 5\"\nassert solution(\"6 5\\n1 2 3 4 5 6\") == \"NO\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"YES\\n1 3 5\\nNO\"\nassert solution(\"5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"YES\\n1 3 5\\nNO\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'NO'\nassert solution('1 2 3 4 5\\n5 3') == 'YES\\n1 3 5'\nassert solution('1 2 3 4 5\\n4 3') == 'NO'\nassert solution('1 2 3 4 5\\n3 3') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n7 18 3 14 1\") == 'YES\\n1 3 5'\nassert solution(\"5 4\\n1 2 3 4 5\") == 'NO'\nassert solution(\"6 2\\n1 2 8 4 10 2\") == 'NO'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2 3 4 5\\n\") == \"YES\\n1 2\\nNO\\nNO\"\nassert solution(\"4 3\\n1 2 3 4 5\\n\") == \"YES\\n1 2\\nNO\\nNO\"\nassert solution(\"4 3\\n1 2 3 4 5\\n\") == \"YES\\n1 2\\nNO\\nNO\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\\n7 18 3 14 1\") == \"YES\\n1 3 5\"\nassert solution(\"5 4\\n1 2 3 4 5\") == \"NO\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('00000000000000000000000000001011') == '101011111101111111111111111111111'\nassert solution('111111111111111111111111111111101') == '101111111111111111111111111111011'\n\"\"\"\n\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        ret = 0\n        power = 31\n        while power >= 0:\n            ret <<= 1\n            if n & (1 << power):\n                ret |= 1\n            power -= 1\n        return ret\n        "
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('111111111111111111111111111111101') == '3221225471'\nassert solution('00000010100101000001111010011100') == '964176192'\nassert solution('111111111111111111111111111111110') == '3221225471'\nassert solution('111111111111111111111111111111101') == '3221225471'\nassert solution('1111111111111111111111111111111010') == '3221225471'\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(bin(3)[2:]) == \"11\"\nassert solution(bin(5)[2:]) == \"101\"\nassert solution(bin(10)[2:]) == \"1010\"\nassert solution(bin(15)[2:]) == \"1011111\"\nassert solution(bin(32)[2:]) == \"1011110110111101\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1101101101101110111101111011011') == '10110111101101111011011110110110'\n\n\"\"\"\n\nimport unittest\n\nclass SolutionTestCase(unittest.TestCase):\n    def test_solution(self):\n        assert solution('1101101101101110111101111011011') == '10110111101101111011011110110110'\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(0b10010) == 0b111110110110\nassert solution(0b101010) == 0b11111111111110110\nassert solution(0b101010) == 0b11111111111110110\nassert solution(0b101010) == 0b11111111111110110\n\nassert solution(0b100010) == 0b11111110110110\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('111001011111111111111111111111101') == 3221225471\nassert solution('111001011111111111111111111111110') == 3221225473\nassert solution('111001011111111111111111111111111') == 3221225472\nassert solution('111111111111111111111111111111101') == 4294967293\nassert solution('111111111111111111111111111111110') == 4294967294\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(bin(964176192)) == '00111001011110000010100101000000'\nassert solution(bin(3221225471)) == '10111111111111111111111111111111'\n\"\"\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1101') == '1011'\nassert solution('11101') == '101010'\nassert solution('11100101') == '101100101'\nassert solution('1100100') == '101010110'\n\"\"\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"00000010100101000001111010011100\") == \"964176192\"\nassert solution(\"111111111111111111111111111111101\") == \"3221225471\"\nassert solution
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == [\n    [1],\n    [1, 1],\n    [1, 2, 1],\n    [1, 3, 3, 1],\n    [1, 4, 6, 4, 1]\n]\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\nassert solution('4') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(5) == [\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\nassert solution(3) == [\n    [1],\n    [1,1],\n   [1,2,1]\n]"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\"\nassert solution(\"6\") == \"[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\"\nassert solution(\"8\") == \"[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1], [1, 7, 21, 35, 35, 21, 7, 1]]\""
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == [\n    [1],\n    [1,1],\n    [1,2,1],\n    [1,3,3,1],\n    [1,4,6,4,1]\n]\n\"\"\"\n\nfrom typing import List\n\n\"\"\"\nThis problem is a variation of the Triangle Numbers Problem. \nThe idea is to add two numbers in the triangle number sequence. \nSo we will iterate over the first row, and add the first two numbers to the answer. \nThen we iterate over the second row, and add the first two numbers to the answer. \nThis continues until we have iterated through the entire triangle number sequence. \nThe number of steps in each row is equal to the number of steps in the previous row. \nThis means that the length of the final triangle array is equal to the number of rows we iterate through, \nsince the entire number sequence is repeated in each row. \n\nWe can go from the bottom row to the top row by adding the last two numbers in the array \nfrom the previous row, so the base case for the function is an empty array, and the recursive case is adding the first two numbers from the previous row. \nWe can return the answer once we are done iterating through all of the rows. \n\nThis solution is O(n) in time and O(n) in space.\n\"\"\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == [\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == '''[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]'''\nassert solution('10') == '''[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1],\n [1,5,10,10,5,1],\n [1,6,15,20,15,6,1],\n [1,7,21,35,35,21,7,1],\n [1,8,28,56,70,56,28,8,1],\n [1,9,36,84,126,126,84,36,9,1]\n]'''\nassert solution('3') == '''[\n     [1],\n    [1,1],\n    [1,2,1]\n]'''\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == [\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\nassert solution(\"4\") == [\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1]\n]\nassert solution(\"1\") == [[1]]\n\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == [\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]]\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\na\\nb\\n\") == ['a.b@x.com', 'a@x.com']\nassert solution(\"0\\n10\\n0\\n20\\n0\\n30\\n0\\n40\\n0\\n50\\n0\\n60\\n0\\n70\\n0\\n80\\n0\\n90\\n0\\n100\\n0\\n110\\n0\\n120\\n0\\n130\\n0\\n140\\n0\\n150\\n0\\n160\\n0\\n170\\n0\\n180\\n0\\n190\\n0\\n200\\n0\\n210\\n0\\n220\\n0\\n230\\n0\\n240\\n0\\n250\\n0\\n260\\n0\\n270\\n0\\n280\\n0\\n290\\n0\\n300\\n0\\n310\\n0\\n320\\n0\\n330\\n0\\n340\\n0\\n350\\n0\\n360\\n0\\n370\\n0\\n380\\n0\\n390\\n0\\n400\\n0\\n410\\n0\\n420\\n0\\n430\\n0\\n440\\n0\\n450\\n0\\n460\\n0\\n470\\n0\\n480\\n0\\n490\\n0\\n500\\n0\\n510\\n0\\n520\\n0\\n530\\n0\\n540\\n0\\n550\\n0\\n560\\n0\\n570\\n0\\n580\\n0\\n590\\n0\\n600\\n0\\n610\\n0\\n620\\n0\\n630\\n0\\n640\\n0\\n650\\n0\\n660\\n0\\n670\\n0\\n680\\n0\\n690\\n0\\n700\\n0\\n710\\n0\\n720\\n0\\n730\\n0\\n740\\n0\\n750\\n0\\n760\\n0\\n770\\n0\\n780\\n0\\n790\\n0\\n800\\n0\\n810\\n0\\n820\\n0\\n830\\n0\\n840\\n0\\n850\\n0\\n860\\n0\\n870\\n0\\n880\\n0\\n890\\n0\\n900\\n0\\n910\\n0\\n920\\n0\\n930\\n0\\n940\\n0\\n950\\n0\\n960\\n0\\n970\\n0\\n980\\n0\\n990\\n0\\n1000\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\n1010\\n0\\"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 qwertyuiopasdfghjklzxcvbnm@hackerrank.com qwertyuiopasdfghjklzxcvbnm@hackerrank.com\\nqwertyuiopasdfghjklzxcvbnm@hackerrank.com\\nqwertyuiopasdfghjklzxcvbnm@hackerrank.com\\nqwertyuiopasdfghjklzxcvbnm@hackerrank.com\\nqwertyuiopasdfghjklzxcvbnm@hackerrank.com\") == ['qwertyuiopasdfghjklzxcvbnm@hackerrank.com', 'qwertyuiopasdfghjklzxcvbnm@hackerrank.com', 'qwertyuiopasdfghjklzxcvbnm@hackerrank.com', 'qwertyuiopasdfghjklzxcvbnm@hackerrank.com', 'qwertyuiopasdfghjklzxcvbnm@hackerrank.com']\nassert solution(\"3 abc@hackerrank.com\\nxyz@hackerrank.com\\nwww@hackerrank.com\") == ['abc@hackerrank.com', 'xyz@hackerrank.com', 'www@hackerrank.com']\nassert solution(\"1 qwertyuiopasdfghjklzxcvbnm@hackerrank.com\") == ['qwertyuiopasdfghjklzxcvbnm@hackerrank.com']\nassert solution(\"1 abc@hackerrank.com\\n1 xyz@hackerrank.com\\n1 qwertyuiopasdfghjklzxcvbnm@hackerrank.com\") == ['abc@hackerrank.com', 'xyz@hackerrank.com', 'qwertyuiopasdfghjklzxcvbnm@hackerrank.com']\n=======\nfor line in stdin:\n    print(\"YES\")\n\n>>>>>>> bb4dee632fcefe8027f491b4f8e81220ebe1e350\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 abc@xyz.com\\n2 abc@test.com\") == ['abc@xyz.com', 'abc@test.com']\nassert solution(\"1 abc@xyz.com\\n2 xyz@test.com\") == ['xyz@test.com']\nassert solution(\"1 xyz@test.com\\n2 abc@test.com\") == ['xyz@test.com', 'abc@test.com']\nassert solution(\"1 xyz@test.com\\n2 abc@test.com\\n1 abc@test.com.com\") == ['abc@test.com', 'xyz@test.com']\n\nSample Input\n\n3\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\nSample Output\n\n['britts_54@hackerrank.com', 'brian-23@hackerrank.com', 'lara@hackerrank.com']\n'''\nimport re"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 abc@xyz.com abc@xyz.com abc@xyz.com') == ['abc@xyz.com']\nassert solution('2 a@b.com c@d.com a@b.com') == ['a@b.com', 'c@d.com']\nassert solution('2 e@f.com g@h.com a@b.com') == ['e@f.com', 'g@h.com']\n\n=====Notes=====\nIt's always a good practice to test your code.\n\"\"\"\n\nn = int(input())\n\nfor _ in range(n):\n    value = input()\n    if \"@\" in value:\n        l = value.split()\n        if len(l[1]) <= 3 and l[0].replace(\".\", \"\").replace(\"-\", \"\").replace(\"_\", \"\").isalnum() and l[1].replace(\".\", \"\").replace(\"-\", \"\").replace(\"_\", \"\").isalnum() and l[0][0]!= '.' and l[0][0]!= '-' and l[0][0]!= '_':\n            print(value)"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\ninvalid\\nvalid\\n') == ['valid']\nassert solution('1\\nvalid\\n') == ['valid']\nassert solution('3\\ninv@alid.com\\nanother-inv@alid.com\\nlast-inv@alid.com\\n') == ['inv@alid.com', 'another-inv@alid.com', 'last-inv@alid.com']\nassert solution('2\\nfirst.email+alex@leetcode.com\\nsecond.email+bob.cathy@leetcode.com\\nthird.email+david@lee.tcode.com\\n') == ['first.email@leetcode.com','second.email@leetcode.com', 'third.email@leetcode.com']\n\n==================\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\naaa@naa.aa bbb@naa.bb\\n\\n\") == ['\"aaa\"@\"naa\".\"aa\"', '\"bbb\"@\"naa\".\"bb\"']\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 abc@gmail.com,1 xyz@gmail.com,2 aaaaaa@gmail.com,3 abc@outlook.com\") == ['abc@outlook.com', 'abc@gmail.com', 'abc@gmail.com', 'aaaaaa@gmail.com']\nassert solution(\"2 aaaaaa@gmail.com,3 abc@outlook.com,1 xyz@gmail.com\") == ['abc@outlook.com', 'aaaaaaa@gmail.com']\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\nMasha\\nPetya') == ['Petya', 'Masha']\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\\n    d@google.com\\\n    j@google.com\\\n    d@gmail.com\\\n    j@gmail.com\") == [\"d@gmail.com\", \"j@gmail.com\"]\nassert solution(\"3\\\n    j@google.com\\\n    k@google.com\\\n    d@gmail.com\") == [\"d@gmail.com\", \"j@google.com\", \"k@google.com\"]\n=====\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\nDora Adnan\\nRafiq Ali\") == [\"Dora Adnan\", \"Rafiq Ali\"]\nassert solution(\"1\\nDora Adnan\") == [\"Dora Adnan\"]\nassert solution(\"0\\n\") == []\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == [0, 1, 1, 8]\nassert solution('5') == [0, 1, 1, 8, 27]\n\n=====Test Case 0=====\n    3\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    [[0, 1, 1], [1, 4, 9], [1, 8, 27], [4, 27, 64]]\n    [[0, 1, 1], [1, 4, 9], [1, 8, 27], [4, 27, 64]]\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    [[0, 1, 1], [1, 4, 9], [1, 8, 27], [4, 27, 64]]\n\n=====Test Case 1=====\n    2\n    [[1, 2], [3, 4]]\n    [[1, 4], [9, 16]]\n    [[1, 2], [3, 4]]\n    [[1, 4], [9, 16]]\n    [[1, 2], [3, 4]]\n\n=====Test Case 2=====\n    5\n    [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]]\n    [[1, 8, 27, 64, 125], [4, 64, 216, 729, 1458], [16, 216, 729, 1764, 3375], [32, 729, 1764, 3375, 6561], [64, 729, 1764, 3375, 6561]]\n\n=====Test Case 3=====\n    1\n    [[0]]\n\n=====Test Case 4=====\n    10\n    [[0, 1, 1, 8, 27, 64, 125, 216, 729, 1458, 3375]]\n\n=====Test Case 5=====\n    0\n    []\n\"\"\""
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == [0, 1, 1, 8, 27]\n\nSolution"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == [1, 8, 27, 64]\nassert solution('10') == [0, 1, 1, 8, 27, 64, 125, 216, 343, 512]"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == [0, 1, 1, 8]\nprint(solution(input()))\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == [0, 1, 1, 8, 27]\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == [0, 1, 1, 8]"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '0'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '8'\nassert solution('4') == '27'\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == [0, 1, 1, 8]\n\nprint(solution(\"4\"))\n\n'''\nimport math"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == [0, 1, 1, 8]\n\nNOTE: The Fibonacci sequence is the series of numbers:\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144...\n\nUse a for loop to generate Fibonacci numbers until you reach the Nth Fibonacci number.\n\nFor example, on input 4, you have to output [0, 1, 1, 8]. To generate the Fibonacci sequence, you can use the following function:"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == [0, 1, 1, 8]\n>>>>>>> cca1e23d1dcf5a1f7b81d7930d7b3c8f599c8866\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('<data>'\n' <info>'\n'  <name>Chuck</name>'\n'  <phone type=\"intl\">'\n'   +1 734 303 4456'\n'  </phone>'\n'  <email hide=\"yes\" />'\n' </info>'\n' <address>'\n'  <hide type=\"yes\"/>'\n' </address>'\n'</data>') == 3\nassert solution('<data>'\n' <info>'\n'  <name>Chuck</name>'\n'  <phone type=\"intl\">'\n'   +1 734 303 4456'\n'  </phone>'\n'  <email hide=\"yes\" />'\n' </info>'\n' <info>'\n'  <name>Chuck</name>'\n'  <phone type=\"intl\">'\n'   +1 734 303 4456'\n'  </phone>'\n'  <email hide=\"yes\" />'\n' </info>'\n' <info>'\n'  <name>Chuck</name>'\n'  <phone type=\"intl\">'\n'   +1 734 303 4456'\n'  </phone>'\n'  <email hide=\"yes\" />'\n' </info>'\n' <address>'\n'  <hide type=\"yes\"/>'\n' </address>'\n'</data>') == 2\nassert solution('<data>'\n' <info>'\n'  <name>Chuck</name>'\n'  <phone type=\"intl\">'\n'   +1 734 303 4456'\n'  </phone>'\n'  <email hide=\"yes\" />'\n' </info>'\n' <info>'\n'  <name>Chuck</name>'\n'  <phone type=\"intl\">'\n'   +1 734 303 4456'\n'  </phone>'\n'  <email hide=\"yes\" />'\n' </info>'\n' <info>'\n'  <name>Chuck</name>'\n'  <phone type=\"intl\">'\n'   +1 734 303 4456'\n'  </phone>'\n'  <email hide=\"yes\" />'\n' </info>'\n' <address>'\n'  <hide type=\"yes\"/>'\n' </address>'\n'</data>') == 1\nassert solution('<data>'\n' <info>'\n'  <name>Chuck</name>'\n'  <phone type=\"intl\">'\n'   +1 734 303 4456'\n'  </phone>'\n'  <email hide=\"yes\" />'\n' </info>'\n' <info>'\n'  <name>Chuck</name>'\n'  <phone type=\"intl\">'\n'   +1 734 303 4456'\n'  </phone>'\n'  <email hide=\"yes\" />'\n' </info>'\n' <info>'\n'  <name>Chuck</name>'\n'  <phone type=\"intl\">'\n'   +1 734 303 4456'\n'  </phone>'\n'  <email hide=\"yes\" />'\n' </info>'\n' <info>'\n'  <name>Chuck</name>'\n'  <phone type=\"intl\">'\n'   +1 734 303 4456'\n'  </phone>'\n'  <email hide=\"yes\" />'\n' </info>'\n' <address>'\n'  <hide type=\"yes\"/>'\n' </address>'\n'</data>') == 0\nassert solution('<data>'\n' <info>'\n'  <name>Chuck</name>'\n'  <phone type=\"intl\">'\n'   +1 734 303 4456'\n'  </phone>'\n'  <email hide=\"yes\" />'\n' </info>'\n' <info>'\n'  <name>Chuck</name>'\n'  <phone type=\"intl\">'\n'   +1 734 303 4456'\n'  </phone>'\n'  <email hide=\"yes\" />'\n' </info>'\n' <info>'\n'  <name>Chuck</name>'\n'  <phone type=\"intl\">'\n'   +1 734 303 4456'\n'  </phone>'\n'  <email hide=\"yes\" />'\n' </info>'\n' <info>'\n'  <name>Chuck</name>'\n'  <phone type=\"intl\">'\n'   +1 734 303 4456'\n'  </phone>'\n'  <email hide=\"yes\" />'\n' </info>'\n' <address>'\n'  <hide type=\"yes\"/>'\n' </address>'\n'</data>') == 0\n\n=====\n// Output\n\n4\n// Explanation\n// There are 4 levels of nesting.\n// The maximum level of nesting is 2.\n\n// Run this test runner to check if your solution works.\n// Source code: http://www.codeskulptor.org/#user45_4V7JG7kpnU_3.py\n// Time: 2.45 s.\n// Memory: 7.5 MB.\n// ----------------------------------------------------------------------\n\"\"\"\n\nimport unittest\nimport xml.etree.ElementTree as etree\n\n\nclass MaxNesting(object):\n    \"\"\"\n    Class to hold max nesting information.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Constructor to initialize the MaxNesting object.\n        \"\"\"\n        self._max_nesting = 0\n        self._root = None\n\n    def max_nesting(self, root):\n        \"\"\"\n        Return the maximum level of nesting in the given xml document.\n\n        :param root: An xml document\n        :return: The maximum level of nesting in the xml document.\n        \"\"\"\n        self._root = root\n        self._max_nesting = 0\n        self._build_tree(self._root)\n        return self._max_nesting\n\n    def _build_tree(self, element, level=0):\n        \"\"\"\n        Traverse the tree to calculate the maximum level of nesting.\n\n        :param element: The current xml node\n        :param level: The current level of nesting\n        :return:\n        \"\"\"\n        if level > self._max_nesting:\n            self._max_nesting = level\n        for child in element:\n            self._build_tree(child, level + 1)\n\n\nclass TestMaxNesting(unittest.TestCase):\n    \"\"\"\n    Class to test the MaxNesting object.\n    \"\"\"\n\n    def setUp(self):\n        self._max_nesting = MaxNesting()\n\n    def test_max_nesting(self):\n        \"\"\"\n        Test the max_nesting() method.\n        \"\"\"\n        self."
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('<data>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '</row>'\n                 '</row>'\n                 '</data>') == 3\n\nassert solution('<data>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '</row>'\n                 '</row>'\n                 '</row>'\n                 '</data>') == 4\n\n'''\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 1\nassert solution(\n'''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 2\nassert solution(\n'''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 2\nassert solution(\n'''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <title>Challenge 001</title>\n        <content type='html'>&lt;p&gt;</content>\n    </entry>\n</feed>\n''') == 4\nassert solution(\n'''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <title>Challenge 001</title>\n        <content type='html'>&lt;p&gt;</content>\n    </entry>\n    <entry>\n        <title>Challenge 001</title>\n        <content type='html'>&lt;p&gt;</content>\n    </entry>\n</feed>\n''') == 4\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 3\nassert solution(\"\"\"\n<html>\n<head>\n    <title>HTML</title>\n</head>\n<object type=\"application/x-flash\" \n  data=\"your-file.swf\" \n  width=\"0\" height=\"0\">\n  <!-- <param name=\"movie\"  value=\"your-file.swf\" /> -->\n  <param name=\"quality\" value=\"high\"/>\n</object>\n\"\"\") == 2\nassert solution(\"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>HTML</title>\n</head>\n<body>\n    <h1>HTML</h1>\n    <object type=\"application/x-flash\" \n      data=\"your-file.swf\" \n      width=\"0\" height=\"0\">\n        <param name=\"movie\" value=\"your-file.swf\" />\n        <param name=\"quality\" value=\"high\"/>\n    </object>\n</body>\n</html>\n\"\"\") == 2\n\nIn the first line, print the integer value of the maximum level of nesting in the XML document.\nIn the second line, print the maximum level of nesting in the XML document.\nThe third line, contains the maximum level of nesting in the XML document.\nSample Input 0\n\n6\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\nSample Output 0\n\n1\n1\n1\n\nSample Input 1\n\n9\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>&lt;p&gt;Serialization&lt;/p&gt; is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.&lt;br /&gt;&lt;p&gt;Design an algorithm to serialize an XML document.&lt;/p&gt;</description>\n        <rating>5.0</rating>\n    </entry>\n</feed>\n\nSample Output 1\n\n3\n3\n3\n\"\"\"\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 2\n\n\"\"\")\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == '1'\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == '0'\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\"\"\") == '1'\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\"\"\") == '1'\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\"\"\") == '2'\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('<data>' + '\\n<row>'*6 + '</row>' + '\\n</data>') == 3\nassert solution('<data>' + '\\n<row>'*7 + '</row>' + '\\n</data>') == 3\n\n=====Input=====\n<data>\n <row>\n  <row>\n   <row>\n    <row>\n     <row>\n      <row>\n       <row>\n        <row>\n         <row>\n          <row>\n           <row>\n            <row>\n             <row>\n              <row>\n               <row>\n                <row>\n                 <row>\n                  <row>\n                   <row>\n                    <row>\n                     <row>\n                      <row>\n                       <row>\n                        <row>\n                         <row>\n                         </row>\n                       </row>\n                      </row>\n                     </row>\n                    </row>\n                  </row>\n                 </row>\n               </row>\n              </row>\n             </row>\n           </row>\n          </row>\n         </row>\n        </row>\n       </row>\n      </row>\n     </row>\n    </row>\n   </row>\n  </row>\n </row>\n</data>\n\n=====Output=====\n3\n\n=====Test 1=====\nInput:\n<data>\n <row>\n  <row>\n   <row>\n    <row>\n     <row>\n      <row>\n       <row>\n        <row>\n         <row>\n          <row>\n           <row>\n            <row>\n             <row>\n              <row>\n               <row>\n                <row>\n                 <row>\n                  <row>\n                   <row>\n                    <row>\n                     <row>\n                      <row>\n                       <row>\n                        <row>\n                         <row>\n                         </row>\n                       </row>\n                      </row>\n                     </row>\n                    </row>\n                  </row>\n                 </row>\n               </row>\n              </row>\n             </row>\n           </row>\n          </row>\n         </row>\n        </row>\n       </row>\n      </row>\n     </row>\n    </row>\n   </row>\n  </row>\n </row>\n</data>\n\nOutput:\n3\nExplanation:\nWe have the following XML document::\n\n<data>\n  <row>\n    <row>\n      <row>\n        <row>\n          <row>\n          </row>\n        </row>\n      </row>\n    </row>\n  </row>\n</data>\n\nWe can see that max nesting level is 3.\n\n=====Test 2=====\nInput:\n<data>\n  <customers>\n    <customer>\n      <name>Jack</name>\n      <phone type=\"intl\">\n        +1 734 303 4456\n      </phone>\n      <email hide=\"yes\"/>\n    </customer>\n    <customer>\n      <name>Jill</name>\n      <phone type=\"intl\">\n        +1 734 303 4456\n      </phone>\n      <email hide=\"yes\"/>\n    </customer>\n  </customers>\n</data>\n\nOutput:\n1\nExplanation:\nIn the XML document above, the max nesting level is 1.\n\n=====Test 3=====\nInput:\n<data>\n  <customers>\n    <customer hide=\"yes\"/>\n    <customer hide=\"yes\"/>\n    <customer>\n      <name>Jill</name>\n      <phone type=\"intl\">\n        +1 734 303 4456\n      </phone>\n      <email hide=\"yes\"/>\n    </customer>\n    <customer hide=\"yes\"/>\n    <customer>\n      <name>Jack</name>\n      <phone type=\"intl\">\n        +1 734 303 4456\n      </phone>\n      <email hide=\"yes\"/>\n    </customer>\n  </customers>\n</data>\n\nOutput:\n0\nExplanation:\nThere is no customer information at all, so we return 0.\n\n=====Test 4=====\nInput:\n<data>\n  <customers>\n    <customer hide=\"yes\"/>\n    <customer hide=\"yes\"/>\n    <customer>\n      <name>Jill</name>\n      <phone type=\"intl\">\n        +1 734 303 4456\n      </phone>\n      <email hide=\"yes\"/>\n    </customer>\n    <customer hide=\"yes\"/>\n    <customer>\n      <name>Jack</name>\n      <phone type=\"intl\">\n        +1 734 303 4456\n      </phone>\n      <email hide=\"yes\"/>\n    </customer>\n  </customers>\n</data>\n\nOutput:\n0\nExplanation:\nThere are 3 customers, but all are hidden, so we return 0.\n\"\"\""
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"<feed xmlns='http://www.w3.org/2005/Atom'><title type='text'>HackerRank</title><subtitle type='html'>&lt;p&gt;A website for coders.&lt;/p&gt;</subtitle><link rel='alternate' type='text/html' href='http://hackerrank.com/'></link></feed>\"\"\") == 3\nassert solution(\"\"\"<feed xmlns='http://www.w3.org/2005/Atom'><title type='text'>HackerRank</title><subtitle type='html'>&lt;p&gt;A website for coders.&lt;/p&gt;</subtitle><link rel='alternate' type='text/html' href='http://hackerrank.com/' /><entry><id>http://hackerrank.com/</id><updated>2013-12-25T12:00:00</updated><title type='text'>HackerRank</title><content type='html'>&lt;p&gt;A website for coders.&lt;/p&gt;</content></entry></feed>\"\"\") == 2\nassert solution(\"\"\"<feed xmlns='http://www.w3.org/2005/Atom'><title type='text'>HackerRank</title><subtitle type='html'>&lt;p&gt;A website for coders.&lt;/p&gt;</subtitle><link rel='alternate' type='text/html' href='http://hackerrank.com/' /><entry><id>http://hackerrank.com/</id><updated>2013-12-25T12:00:00</updated><title type='text'>HackerRank</title><content type='html'>&lt;p&gt;A website for coders.&lt;/p&gt;</content></entry></feed>\"\"\") == 1\n\"\"\"\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 1\n\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 1\n\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 1\n\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 1\n\nassert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 1"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n<data>\n    <country name=\"Liechtenstein\">\n        <rank updated=\"yes\">1</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n        <neighbor name=\"Austria\" direction=\"E\"/>\n    </country>\n    <country name=\"Singapore\">\n        <rank updated=\"yes\">4</rank>\n        <year>2011</year>\n        <gdppc>59900</gdppc>\n        <neighbor name=\"Malaysia\" direction=\"N\"/>\n    </country>\n    <country name=\"Panama\">\n        <rank updated=\"yes\">68</rank>\n        <year>2011</year>\n        <gdppc>13600</gdppc>\n        <neighbor name=\"Costa Rica\" direction=\"W\"/>\n        <neighbor name=\"Colombia\" direction=\"E\"/>\n    </country>\n</data>\n\"\"\") == 3\nassert solution(\"\"\"\n<data>\n    <country name=\"Liechtenstein\">\n        <rank updated=\"yes\">1</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n    </country>\n    <country name=\"Singapore\">\n        <rank updated=\"yes\">4</rank>\n        <year>2011</year>\n        <gdppc>59900</gdppc>\n    </country>\n    <country name=\"Panama\">\n        <rank updated=\"yes\">68</rank>\n        <year>2011</year>\n        <gdppc>13600</gdppc>\n    </country>\n</data>\n\"\"\") == 2\nassert solution(\"\"\"\n<data>\n    <country name=\"Liechtenstein\">\n        <rank updated=\"yes\">1</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n    </country>\n    <country name=\"Singapore\">\n        <rank updated=\"yes\">4</rank>\n        <year>2011</year>\n        <gdppc>59900</gdppc>\n    </country>\n    <country name=\"Panama\">\n        <rank updated=\"yes\">68</rank>\n        <year>2011</year>\n        <gdppc>13600</gdppc>\n    </country>\n</data>\n\"\"\") == 1\n\n=====Constraints=====\n1 <= N <= 5 * 10^5\n\n1 <= length of each line <= 10^4\n\n1 <= length of each tag <= 10^4\n\nEach tag is always named.\n\n1 <= number of attributes <= 10^5\n\nEach attribute has length in range [1, 10^4]\n\nEach attribute has an equal number of quotes (\").\n\n1 <= number of values <= 10^5\n\nEach value is always a number.\n\n1 <= length of each attribute's value <= 10^4\n\n=====Sample Test Case=====\n\nCase 1:\n\nInput\n\n6\n\n<stuff>\n    <users>\n        <user x=\"2\">\n            <id>001</id>\n            <name>Chuck</name>\n        </user>\n        <user x=\"7\">\n            <id>009</id>\n            <name>Brent</name>\n        </user>\n    </users>\n</stuff>\n\nOutput\n\n1\n\nCase 2:\n\nInput\n\n6\n\n<stuff>\n    <data>\n        <country name=\"Liechtenstein\">\n            <rank updated=\"yes\">1</rank>\n            <year>2008</year>\n            <gdppc>141100</gdppc>\n        </country>\n        <country name=\"Singapore\">\n            <rank updated=\"yes\">4</rank>\n            <year>2011</year>\n            <gdppc>59900</gdppc>\n        </country>\n        <country name=\"Panama\">\n            <rank updated=\"yes\">68</rank>\n            <year>2011</year>\n            <gdppc>13600</gdppc>\n        </country>\n    </data>\n</stuff>\n\nOutput\n\n3\n\n=====Testing=====\n\n=====Time Complexity=====\nThe time complexity of the solution is O(N)O(N), where NN is the number of lines of XML input.\n\n=====Space Complexity=====\nThe space complexity of the solution is O(N)O(N)O(N), the space used by data and attributes.\n\n=====Runtime=====\nThe runtimes of the solutions are as follows.\n\nSolution:\n    Runtime: 40 ms, faster than 73.35% of Python3 online submissions for Maximum Nesting Depth of the XML.\n    Memory Usage: 12.7 MB, less than 100.00% of Python3 online submissions for Maximum Nesting Depth of the XML.\n\n'''"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"(123) 456-7890\") == \"YES\"\nassert solution(\"(1111)5556666\") == \"NO\"\nassert solution(\"(098) 123 456\") == \"YES\"\nassert solution(\"(123)456-7890\") == \"NO\"\nassert solution(\"(123)456-7890\") == \"YES\"\n=====Test Case 1=====\nInput\n\n2\n(123)456-7890\n0981234567\nOutput\n\nYES\nNO\nExplanation\n\nIn the first test case, the number is valid because it has the right length and starts with a 7, 8, or 9.\nIn the second test case, the number is invalid because it doesn't start with a 7, 8, or 9.\n\"\"\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '72345678') == 'YES\\n'\nassert solution(\n    '82345678') == 'YES\\n'\nassert solution(\n    '92345678') == 'YES\\n'\nassert solution(\n    '12345678') == 'NO\\n'\nassert solution(\n    '22345678') == 'NO\\n'\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7348642846\") == \"YES\"\nassert solution(\"6352851456\") == \"YES\"\nassert solution(\"7736284628\") == \"NO\"\nassert solution(\"90919284628\") == \"NO\"\nassert solution(\"846282919\") == \"NO\""
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7805236941') == 'YES\\n'\nassert solution('780043406') == 'YES\\n'\nassert solution('78052369414') == 'NO\\n'\nassert solution('7805236943') == 'NO\\n'\nassert solution('7805236942') == 'NO\\n'\n\n=============================================================\nWrite a function that accepts an integer N and returns the Nth even Fibonacci number.\n\nThe nth even Fibonacci number F(n) is defined by the following formula:\n\nF(0) = 0, F(1) = 1, F(2) = 1, F(n) = F(n - 2) + F(n - 1) if n >= 3\n\nInput Format\nThe input consists of a single integer N.\n\nOutput Format\nOutput a single integer denoting the Nth even Fibonacci number.\n\nSample Input\n3\n\nSample Output\n2\n\nExplanation\nThe 3rd Fibonacci number is 2, because F(2) = F(1) + F(0) = 1 + 0 = 1.\n\n=============================================================\nWrite a function that accepts an integer N and returns the Nth even Fibonacci number.\n\nThe nth even Fibonacci number F(n) is defined by the following formula:\n\nF(0) = 0, F(1) = 1, F(2) = 1, F(n) = F(n - 2) + F(n - 1) if n >= 3\n\nInput Format\nThe input consists of a single integer N.\n\nOutput Format\nOutput a single integer denoting the Nth even Fibonacci number.\n\nSample Input\n2\n\nSample Output\n1\n\nExplanation\nThe 2nd Fibonacci number is 1, because F(2) = F(1) + F(0) = 1 + 0 = 1.\n\n=============================================================\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7123456789') == 'YES'\nassert solution('81234567890') == 'NO'\nassert solution('91234567890') == 'YES'\nassert solution('72233344556677') == 'NO'\nassert solution('722333344556677') == 'NO'\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7123456789') == 'YES'\nassert solution('91 123 456 789') == 'YES'\nassert solution('(91) 123 456 789') == 'YES'\nassert solution('91-123-456-789') == 'YES'\nassert solution('(91)123456789') == 'NO'\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"71234567891\") == \"YES\"\nassert solution(\"73816549811\") == \"YES\"\nassert solution(\"789\") == \"NO\"\nassert solution(\"123\") == \"NO\"\nassert solution(\"77\") == \"NO\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(    \"73567837656\") == \"YES\"\nassert solution(    \"73667837656\") == \"NO\"\nassert solution(    \"(023)4567-8\") == \"YES\"\nassert solution(    \"(023)456-78\") == \"NO\"\nassert solution(    \"(023)456-78x\") == \"NO\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('97798') == 'YES', 'Wrong output for 97798'\nassert solution('98797') == 'YES', 'Wrong output for 98797'\nassert solution('98898') == 'NO', 'Wrong output for 98898'\nassert solution('9998') == 'NO', 'Wrong output for 9998'\nassert solution('998') == 'NO', 'Wrong output for 9998'\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"(010)234-5678\") == \"YES\"\nassert solution(\"(0123) 456-7890\") == \"NO\"\nassert solution(\"(123) 456-7890\") == \"NO\"\nassert solution(\"(1111)111-1111\") == \"YES\"\nassert solution(\"(01111)111-1111\") == \"NO\"\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n2 4 5 9\n4\n2 4 11 12''') == '''5\n9\n11\n12'''\nassert solution('''4\n2 4 11 12\n4\n2 4 5 9''') == '''5\n9\n11\n12'''\nassert solution('''4\n2 4 11 12\n4\n2 4 5 9''') == '''5\n9\n11\n12'''\nassert solution('''5\n2 4 11 12 23\n4\n2 4 5 9''') == '''5\n9\n11\n12\n23'''\nassert solution('''5\n2 4 11 12 23\n5\n2 4 5 9''') == '''5\n9\n11\n12\n23'''\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 4 5 9 12\\n4\\n2 4 11 12\") == '5\\n9\\n12'\n=====Test Input=====\n5\n2 4 5 9 12\n4\n2 4 11 12\n=====Test Output=====\n5\n9\n12"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 4 6 8\\n4\\n2 3 6 8 9') == '6\\n8\\n9'\nassert solution('4\\n2 4 6 8\\n4\\n2 3 6 7') == '6\\n7'\n=====Solution====="
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n2 4 5 9\n4\n2 4 11 12''') == '''5\n9\n12'''\nassert solution('''4\n2 4 11 12\n4\n2 4 5 9''') == '''5\n9\n12'''\nassert solution('''6\n2 4 11 12 29\n4\n2 4 5 9 30''') == '''5\n9\n12\n30'''\nassert solution('''8\n2 4 11 12 29 13 14 31\n4\n2 4 5 9 30 17 32\n8\n2 4 11 12 29 13 14 31 17 32''') == '''5\n9\n12\n17\n13\n14\n30\n31'''\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 4 5 9\\n4\\n2 4 11 12') == '12 9\\n11'\n\n---- END OF FILE ----\n\nimport io\nimport os\nimport sys\nimport unittest"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 4 6 8\\n4\\n2 4 11 12') == '12 11 9 8'\n\"\"\""
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 3 6 7\\n3\\n1 2 4 5') == '6 5'\nassert solution('4\\n2 3 6 7\\n3\\n1 2 4 5\\n') == '1 2 5'\nassert solution('5\\n3 5 4 2\\n2\\n1 3\\n2 3') == '3 5'\nassert solution('5\\n3 5 4 6\\n2\\n1 3\\n2 3') == '3 5'\nassert solution('5\\n3 5 5\\n2\\n1 3\\n2 3') == '3 4'\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '2 4 6'\nassert solution('1 2 3 4 5 6') == '2 4 5 6'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '2 3 4 5 6 7 8 9 10'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12') == '2 3 5 6 7 8 9 10 11 12'\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 4 6 8\\n4\\n2 4 11 12') == '6\\n8\\n11'\n=====END OF CONTEXT=====\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3 6 7\\n3\\n1 2 4 7') == '2\\n4\\n6\\n7','solution'\nassert solution('4\\n2 3 6 7\\n3\\n1 2 4 5') == '1\\n2\\n5\\n6\\n7','solution'\nassert solution('4\\n2 3 6 7\\n3\\n1 2 4 5\\n5\\n4') == '1\\n2\\n3\\n6\\n7','solution'\nassert solution('4\\n2 3 6 7\\n3\\n1 2 3') == '','solution'\nassert solution('4\\n2 3 6 7\\n3\\n1 2 4 7\\n7\\n5') == '1\\n2\\n5','solution'\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == \"78.00\"\nassert solution(\"2\\nMARKS\\nCLASS\\nNAME\\nID\\n\") == \"67.50\"\n\n=====Sample Input=====\n5\nID\nMARKS\nCLASS\nNAME\n12345\n90 80 90 78 93\n91 92 85 89 90\n77 65 89 86 76\n90 85 74 90 81\n91 64 89 90 76\n\n=====Sample Output=====\n90.00\n'''\n\nfrom collections import namedtuple\nimport re"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\nID,MARKS,CLASS,NAME\\n1,91,12,John\\n2,92,16,Ben\\n3,80,15,Jenny\\n4,67,13,Kris\\n5,99,10,Arun\\n6,45,9,Sneha\") == '78.00'\nassert solution(\"5\\nMARKS,CLASS,NAME,ID\\n92,12,John,1\\n82,14,Jenny,2\\n91,7,Kris,3\\n74,6,Arun,4\\n62,4,Ben,5\") == '69.50'\nassert solution(\"5\\nID,MARKS,CLASS,NAME\\n1,91,12,John\\n2,92,16,Ben\\n3,80,15,Jenny\\n4,67,13,Kris\\n5,99,10,Arun\") == '82.00'\n\"\"\"\nfrom collections import namedtuple\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'MARKS\\tCLASS\\tNAME\\n'\n'9\\t'\n'2\\t'\n'Mathew\\n'\n'9\\t'\n'3\\t'\n'Teddy\\n'\n'9\\t'\n'4\\t'\n'Teddy\\n'\n'9\\t'\n'5\\t'\n'Teddy\\n'\n'9\\t'\n'6\\t'\n'Teddy\\n'\n'9\\t'\n'7\\t'\n'Mathew') == '8.75'\nassert solution(\n'MARKS\\tCLASS\\tNAME\\n'\n'2\\t'\n'9\\t'\n'Mathew\\n'\n'7\\t'\n'9\\t'\n'Teddy\\n'\n'9\\t'\n'2\\t'\n'Teddy\\n'\n'9\\t'\n'3\\t'\n'Teddy\\n'\n'9\\t'\n'4\\t'\n'Teddy\\n'\n'9\\t'\n'5\\t'\n'Teddy\\n'\n'9\\t'\n'6\\t'\n'Teddy\\n'\n'9\\t'\n'7\\t'\n'Mathew') == '7.50'\nassert solution(\n'MARKS\\tCLASS\\tNAME\\n'\n'2\\t'\n'9\\t'\n'Mathew\\n'\n'7\\t'\n'9\\t'\n'Teddy\\n'\n'9\\t'\n'2\\t'\n'Teddy\\n'\n'9\\t'\n'3\\t'\n'Teddy\\n'\n'9\\t'\n'4\\t'\n'Teddy\\n'\n'9\\t'\n'5\\t'\n'Teddy\\n'\n'9\\t'\n'6\\t'\n'Teddy\\n'\n'9\\t'\n'7\\t'\n'Mathew') == '6.75'\nassert solution(\n'MARKS\\tCLASS\\tNAME\\n'\n'2\\t'\n'9\\t'\n'Mathew\\n'\n'7\\t'\n'9\\t'\n'Teddy\\n'\n'9\\t'\n'2\\t'\n'Teddy\\n'\n'9\\t'\n'3\\t'\n'Teddy\\n'\n'9\\t'\n'4\\t'\n'Teddy\\n'\n'9\\t'\n'5\\t'\n'Teddy\\n'\n'9\\t'\n'6\\t'\n'Teddy\\n'\n'9\\t'\n'7\\t'\n'Mathew') == '6.75'\nassert solution(\n'MARKS\\tCLASS\\tNAME\\n'\n'2\\t'\n'9\\t'\n'Mathew\\n'\n'7\\t'\n'9\\t'\n'Teddy\\n'\n'9\\t'\n'2\\t'\n'Teddy\\n'\n'9\\t'\n'3\\t'\n'Teddy\\n'\n'9\\t'\n'4\\t'\n'Teddy\\n'\n'9\\t'\n'5\\t'\n'Teddy\\n'\n'9\\t'\n'6\\t'\n'Teddy\\n'\n'9\\t'\n'7\\t'\n'Mathew') == '6.75'\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\nID\\nMARKS\\nCLASS\\nNAME\\n') == '78.00'\n=====Sample Input=====\n\n5\nID         MARKS      NAME       CLASS     \n1          97         Raymond    7         \n2          50         Steven     4         \n3          91         Adrian     9         \n4          72         Stewart    5         \n5          80         Peter      6   \n\n=====Sample Output=====\n\n78.00\n\n'''\nfrom collections import namedtuple\n\nn = int(input())\nfields = input().split()\nStudent = namedtuple('Student',fields)\n\ntotal = 0\n\nfor _ in range(n):\n    student = Student(*input().split())\n    total += int(student.MARKS)\n\nprint('{:.2f}'.format(total/n))\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_01) == test_output_01"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(text) == expected\n\"\"\"\nimport collections\nfrom typing import Tuple, List, NamedTuple"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == '\"Average marks of the list\" should be: 0.00'\nassert solution(\"2\\nMARKS\\nCLASS\\nNAME\\nID\\n\") == '\"Average marks of the list\" should be: 0.67'\nassert solution(\"3\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == '\"Average marks of the list\" should be: 0.67'\nassert solution(\"4\\nCLASS\\nNAME\\nID\\nMARKS\\n\") == '\"Average marks of the list\" should be: 0.67'\nassert solution(\"5\\nID\\nNAME\\nCLASS\\nMARKS\\n\") == '\"Average marks of the list\" should be: 0.67'\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin_lines) == expected_output\n\n=====Sample Test Cases=====\nTest Case 1\nInput\n\n5\nID         MARKS      NAME       CLASS     \n1          97         Raymond    7         \n2          50         Steven     4         \n3          91         Adrian     9         \n4          72         Stewart    5         \n5          80         Peter      6   \n\nOutput\n\n78.00\n\nTest Case 2\nInput\n\n5\nMARKS      CLASS      NAME       ID        \n92         2          Calum      1         \n82         5          Scott      2         \n94         2          Jason      3         \n55         8          Glenn      4         \n82         2          Fergus     5\n\nOutput\n\n81.00\n\nTest Case 3\nInput\n\n5\nCLASS      MARKS      NAME       ID        \n9          2          Fergus     1         \n7          2          Scott      2         \n6          2          Jason      3         \n10        2          Glenn      4         \n6          2          Fergus     5\n\nOutput\n\n78.00\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\nID,MARKS,CLASS,NAME\\n1,91,12,john,A,50,L,58,python,99,john,C,67,python,89,python,python,78,john,A,90,l,76,john,C,99,python,java,95,l,python\\n') == '78.00'\nassert solution('1\\nMARKS,CLASS,NAME,ID\\n91,12,john,1,50,L,58,python,99,john,C,67,python,89,python,python,78,john,A,90,l,76,john,C,99,python,java,95,l,python\\n') == '78.00'\n================================================\nimport collections"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5\") == 3.0\n\n=====Sample Input=====\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          80         Peter      6\n\nSample Output\n90.00\n\n=====Explanation=====\nMarks      = [97, 50, 91, 72, 80]\nTotal students = 5\nAverage = 90.00 / 5 = 18.00\n\n=====Function Description=====\nComplete the function average in the editor below.\naverage has the following parameters:\nint marks[n]: an array of integers representing the marks array\nReturns\nfloat: the average of the list corrected to 2 decimal places\nThe code stub will call the function.\n\n=====Challenge=====\nCan you average the entire class?\n\n\"\"\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == 'Not Weird'\nassert solution('20') == 'Weird'\nassert solution('2') == 'Not Weird'\nassert solution('4') == 'Not Weird'\n\nassert solution('3') == 'Not Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == \"Not Weird\"\nassert solution('4') == \"Not Weird\"\nassert solution('6') == \"Weird\"\nassert solution('20') == \"Weird\"\nassert solution('22') == \"Not Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 'Not Weird'\nassert solution('3') == 'Weird'\nassert solution('4') == 'Not Weird'\nassert solution('20') == 'Weird'\nassert solution('21') == 'Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3) == 'Weird'\nassert solution(24) == 'Not Weird'\nassert solution(19) == 'Weird'\nassert solution(1) == 'Not Weird'\n\n======Solution=======\nn = int(input())\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == 'Weird'\nassert solution('3') == 'Weird'\nassert solution('4') == 'Not Weird'\nassert solution('5') == 'Weird'\nassert solution('6') == 'Not Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == 'Not Weird'\nassert solution('24') == 'Weird'\nassert solution('23') == 'Not Weird'\nassert solution('7') == 'Not Weird'\nassert solution('19') == 'Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Weird\"\nassert solution(\"2\") == \"Not Weird\"\nassert solution(\"3\") == \"Weird\"\nassert solution(\"4\") == \"Not Weird\"\nassert solution(\"5\") == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(2) == \"Not Weird\"\nassert solution(3) == \"Weird\"\nassert solution(4) == \"Not Weird\"\nassert solution(5) == \"Weird\"\nassert solution(6) == \"Not Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(2) == \"Not Weird\"\nassert solution(14) == \"Weird\"\nassert solution(20) == \"Weird\"\nassert solution(106) == \"Not Weird\"\nassert solution(15) == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(2) == \"Not Weird\"\nassert solution(15) == \"Weird\"\nassert solution(24) == \"Weird\"\nassert solution(23) == \"Not Weird\"\nassert solution(4) == \"Not Weird\"\n\n==[Code 2]=="
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n  <title>HackerRank</title>\n  <subtitle lang='en'>Programming challenges</subtitle>\n  <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n  <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 5\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n  <title>HackerRank</title>\n  <subtitle lang='en'>Programming challenges</subtitle>\n</feed>\n\"\"\") == 0\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n  <title>HackerRank</title>\n  <subtitle lang='en'>Programming challenges</subtitle>\n  <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n  <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 10\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n  <title>HackerRank</title>\n  <subtitle lang='en'>Programming challenges</subtitle>\n  <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n  <updated>2013-12-25T12:00:00</updated>\n  <entry>\n    <author gender='male'>Harsh</author>\n    <question type='hard'>XML 1</question>\n    <description type='text'>This is related to XML parsing</description>\n  </entry>\n</feed>\n\"\"\") == 6\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n  <title>HackerRank</title>\n  <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n  <updated>2013-12-25T12:00:00</updated>\n  <entry>\n    <author gender='male'>Harsh</author>\n    <question type='hard'>XML 1</question>\n    <description type='text'>This is related to XML parsing</description>\n  </entry>\n  <entry>\n    <author gender='male'>Harsh</author>\n    <question type='hard'>XML 2</question>\n    <description type='text'>This is related to XML parsing</description>\n  </entry>\n</feed>\n\"\"\") == 12"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 30\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n</feed>\n\"\"\") == 0\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n</feed>\n\"\"\") == 0\n=====Test Case=====\nInput Format\n\nThe first line of input contains an integer N.  N lines follow.  Each line contains a string s.\n\nConstraints\n\n1 <= N <= 10\n\n1 <= |s| <= 104\n\nOutput Format\n\nA single line containing the integer score of the given XML document.\n\n=====Sample Input=====\n4\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nSample Output\n\n30\nExplanation\n\nHere, the following n=4 elements have attributes.\n\nfeed - 4 attributes\ntitle - 1 attribute\nsubtitle - 2 attributes\nlink - 1 attribute\nupdated - 1 attribute\n\nHence, the total score is 4+1+2+1+1=10.\n\n=====Sample Input=====\n2\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n</feed>\n<feed xml:lang='en'>\n    <![CDATA[Sample input]]>\n</feed>\nSample Output\n\n0\n2\nExplanation\n\nHere, the first two elements have attributes.\n\nfeed - 2 attributes\ntitle - 1 attribute\nsubtitle - 2 attributes\n\nHence, the total score is 2.\n\nThe third element has no attributes.\n\nThe forth element has one attribute.\n\nHence, the total score is 2.\n\"\"\"\nfrom xml.dom import minidom\nimport sys"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"<feed xml:lang='en'>\n<title>HackerRank</title>\n<subtitle lang='en'>Programming challenges</subtitle>\n<link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n<updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == 25\n=====Test 1=====\nInput\n\n2\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\nOutput\n\n25\n15\nExplanation\n\nThe feed element has two attributes, lang and title.\nThe lang attribute appears once and its value is 'en'.\nThe title attribute also appears once and its value is 'HackerRank'.\nThe updated attribute also appears once and its value is '2013-12-25T12:00:00'.\nThe sum of their attributes is 5.\n'''\n\nimport xml.etree.ElementTree as etree\n\nmaxdepth = 0\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('<elem>text<sub>text<a>text<sub>text</sub></a>text</sub>text</elem>') == 6\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('<a></a>') == 0\nassert solution('<a><b/></a>') == 0\nassert solution('<a><b attr=\"val\"/></a>') == 1\nassert solution('<a><b attr=\"val\"/><c/></a>') == 2\nassert solution('<a><b attr=\"val\"/><b attr=\"val\"/></a>') == 2\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n<feed xml:lang=\\\"en\\\">\\n  <title>HackerRank</title>\\n</feed>\\n') == 5\nassert solution('5\\n<feed xml:lang=\\\"en\\\">\\n  <title>HackerRank</title>\\n  <subtitle lang=\\\"en\\\">Programming challenges</subtitle>\\n  <link rel=\\\"alternate\\\" type=\\\"text/html\\\" href=\\\"http://hackerrank.com/\\\"/>\\n</feed>\\n') == 10\nassert solution('5\\n<feed xml:lang=\\\"en\\\">\\n  <title>HackerRank</title>\\n  <subtitle lang=\\\"en\\\">Programming challenges</subtitle>\\n  <link rel=\\\"alternate\\\" type=\\\"text/html\\\" href=\\\"http://hackerrank.com/\\\"/>\\n  <updated>2013-12-25T12:00:00</updated>\\n</feed>\\n') == 15\nassert solution('5\\n<feed xml:lang=\\\"en\\\">\\n  <title>HackerRank</title>\\n  <subtitle lang=\\\"en\\\">Programming challenges</subtitle>\\n  <link rel=\\\"alternate\\\" type=\\\"text/html\\\" href=\\\"http://hackerrank.com/\\\"/>\\n  <updated>2013-12-25T12:00:00</updated>\\n  <entry>\\n    <author gender=\\\"male\\\">Harsh</author>\\n    <question type=\\\"hard\\\">XML 1</question>\\n  </entry>\\n  <entry>\\n    <author gender=\\\"male\\\">Bhavya</author>\\n    <question type=\\\"hard\\\">XML 2</question>\\n  </entry>\\n</feed>\\n') == 16\n\n======SAMPLE INPUT 0======\n5\n<feed xml:lang='en'>\n  <title>HackerRank</title>\n  <subtitle lang='en'>Programming challenges</subtitle>\n  <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n  <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n======SAMPLE OUTPUT 0======\n5\n\n=====Test Case 0=====\n\n=====SAMPLE INPUT 1=====\n10\n<feed xml:lang='en'>\n  <title>HackerRank</title>\n  <subtitle lang='en'>Programming challenges</subtitle>\n  <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n  <updated>2013-12-25T12:00:00</updated>\n  <entry>\n    <author gender='male'>Harsh</author>\n    <question type='hard'>XML 1</question>\n  </entry>\n  <entry>\n    <author gender='male'>Bhavya</author>\n    <question type='hard'>XML 2</question>\n  </entry>\n  <entry>\n    <author gender='male'>Harsh</author>\n    <question type='hard'>XML 3</question>\n  </entry>\n  <entry>\n    <author gender='male'>Bhavya</author>\n    <question type='hard'>XML 4</question>\n  </entry>\n  <entry>\n    <author gender='male'>Harsh</author>\n    <question type='hard'>XML 5</question>\n  </entry>\n  <entry>\n    <author gender='male'>Bhavya</author>\n    <question type='hard'>XML 6</question>\n  </entry>\n</feed>\n\n=====Test Case 1=====\n\n=====SAMPLE OUTPUT 1=====\n10\n\n=====Test Case 2=====\n\n=====SAMPLE INPUT 2=====\n16\n<feed xml:lang='en'>\n  <title>HackerRank</title>\n  <subtitle lang='en'>Programming challenges</subtitle>\n  <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n  <updated>2013-12-25T12:00:00</updated>\n  <entry>\n    <author gender='male'>Harsh</author>\n    <question type='hard'>XML 1</question>\n  </entry>\n  <entry>\n    <author gender='male'>Bhavya</author>\n    <question type='hard'>XML 2</question>\n  </entry>\n  <entry>\n    <author gender='male'>Harsh</author>\n    <question type='hard'>XML 3</question>\n  </entry>\n  <entry>\n    <author gender='male'>Bhavya</author>\n    <question type='hard'>XML 4</question>\n  </entry>\n  <entry>\n    <author gender='male'>Harsh</author>\n    <question type='hard'>XML 5</question>\n  </entry>\n  <entry>\n    <author gender='male'>Bhavya</author>\n    <question type='hard'>XML 6</question>\n  </entry>\n  <entry>\n    <author gender='male'>Harsh</author>\n    <question type='hard'>XML 7</question>\n  </entry>\n  <entry>\n    <author gender='male'>Bhavya</author>\n    <question type='hard'>XML 8</question>\n  </entry>\n  <entry>\n    <author gender='male'>Harsh</author>\n    <question type='hard'>XML 9</question>\n  </entry>\n  <entry>\n    <author gender='male'>Bhavya</author>\n    <question type='hard'>XML 10</question>\n  </entry>\n  <entry>\n    <author gender='male'>Harsh</author>\n    <question type='hard'>XML 11</question>\n  </entry>\n  <entry>\n    <author gender='male'>Bhavya</author>\n    <question type='hard'>XML 12</question>\n  </entry>\n  <entry>\n    <author gender='male'>Harsh</author>\n    <question type='hard'>XML 13</question>\n  </entry>\n  <entry>\n    <author gender='male'>Bhavya</author>\n    <question type='hard'>XML 14</question>\n  </entry>\n  <entry>\n    <author gender='male'>Harsh</author>\n    <question type='hard'>XML 15</question>\n  </entry>\n  <entry>\n    <author gender='male'>Bhavya</author>\n    <question type='hard'>XML 16</question>\n  </entry>\n</feed>\n\n=====Test Case 2=====\n\n=====SAMPLE OUTPUT 2=====\n16\n\nProblem Statement\nYou are given a valid XML document, and you have to print its score. The score is calculated by the sum of the score of each element. For any element, the score is equal to the number of attributes it has.\n\nInput Format\nThe first line contains N, the number of lines in the XML document.\nThe next N lines follow containing the XML document.\n\nOutput Format\nOutput a single line, the integer score of the given XML document.\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('<elem>value</elem>') == 6\nassert solution('<root>'\n                '<element key=\"value\">text</element>'\n                '<element>text</element>'\n                '</root>') == 10\nassert solution('<root><element>text</element><element key=\"value\">text</element></root>') == 12\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 10\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 0\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 3\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 3\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 3\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"<feed xml:lang='en'>\n<title>HackerRank</title>\n<subtitle lang='en'>Programming challenges</subtitle>\n<link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n<updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") ==\n\"5\"\nassert solution(\"\"\"<feed xml:lang='en'>\n<title>HackerRank</title>\n<subtitle lang='en'>Programming challenges</subtitle>\n</feed>\"\"\") ==\n\"0\"\nassert solution(\"\"\"<feed xml:lang='en'>\n<title>HackerRank</title>\n<subtitle lang='en'>Programming challenges</subtitle>\n<link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n<updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") ==\n\"3\"\nassert solution(\"\"\"<feed xmlns='http://www.w3.org/2005/Atom' xml:lang='en'>\n<link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n<updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") ==\n\"1\"\nassert solution(\"\"\"<feed xmlns='http://www.w3.org/2005/Atom' xml:lang='en'>\n<link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n<link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n<updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") ==\n\"2\"\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n  <title>HackerRank</title>\n  <subtitle lang='en'>Programming challenges</subtitle>\n  <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n  <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 30\n=====Test Case 1=====\nTest case 1\nInput:\n\n2\n<feed xml:lang='en'>\n  <title>HackerRank</title>\n  <subtitle lang='en'>Programming challenges</subtitle>\n  <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n  <updated>2013-12-25T12:00:00</updated>\n</feed>\n<feed xml:lang='en'>\n  <title>HackerRank</title>\n  <subtitle lang='en'>Programming challenges</subtitle>\n  <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n  <updated>2013-12-25T12:00:00</updated>\n</feed>\nOutput:\n\n2\nExplanation:\n\nThe feed element has two title and two subtitle attributes. So, the output is 2.\n\n=====Test Case 2=====\nTest case 2\nInput:\n\n2\n<feed xml:lang='en'>\n  <title>HackerRank</title>\n  <subtitle lang='en'>Programming challenges</subtitle>\n  <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n  <updated>2013-12-25T12:00:00</updated>\n</feed>\n<feed xml:lang='en'><!-- Sample feed with invalid XML tag -->\n  <title>HackerRank</title>\n  <subtitle lang='en'>Programming challenges</subtitle>\n  <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n  <updated>2013-12-25T12:00:00</updated>\n</feed>\nOutput:\n\n0\nExplanation:\n\nWe must skip the first invalid XML element and hence, the output is 0.\n\n=====Test Case 3=====\nTest case 3\nInput:\n\n1\n<feed xml:lang='en'>\n  <title>HackerRank</title>\n  <subtitle lang='en'>Programming challenges</subtitle>\n  <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n  <updated>2013-12-25T12:00:00</updated>\n</feed>\nOutput:\n\n6\nExplanation:\n\nThe feed tag has 5 title and 5 subtitle attribute. So, the output is 5.\n\"\"\""
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n'''"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 -4 5') == '131.11'\nassert solution('4 3 -7 6') == '252.12'\nassert solution('-1 1 1 1') == '360.00'\nassert solution('0 0 0 0') == '0.00'\nassert solution('10 10 10 10') == '0.00'\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 0 1 1') == 90.0\nassert solution('1 1 1 1') == 45.0\nassert solution('0 0 -1 1') == 0.0\nassert solution('-1 -1 -1 -1') == -180.0\nassert solution('0 0 0 0') == 0.0\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 -1 0') == '40.0'\n\"\"\""
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == '90'\n\"\"\"\nimport math"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.0 1.0 2.0 3.0\") == \"8.3944\"\nassert solution(\"2.0 3.0 4.0 5.0\") == \"33.4556\"\nassert solution(\"4.0 5.0 7.0 7.0\") == \"0.7860\"\nassert solution(\"1.0 3.0 4.0 5.0\") == \"0.3090\"\nassert solution(\"1.0 2.0 4.0 5.0\") == \"3.1415\"\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1.0 4.0 2.0 3.0') == 45.0\n\n=====Test Case=====\nInput\n1.0 4.0 2.0 3.0\nOutput\n45.00\n\nInput\n1.0 4.0 2.0 3.0\nOutput\n45.00\n\"\"\"\nimport math\n\nclass Point:\n    def __init__(self, x: float, y: float, z: float):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __repr__(self):\n        return f'Point({self.x}, {self.y}, {self.z})'\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y and self.z == other.z\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y, self.z + other.z)\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def __mul__(self, other):\n        return Point(self.x * other, self.y * other, self.z * other)\n\n    def __truediv__(self, other):\n        return Point(self.x / other, self.y / other, self.z / other)\n\n    def __neg__(self):\n        return Point(-self.x, -self.y, -self.z)\n\n    def __abs__(self):\n        return math.sqrt(self.x ** 2 + self.y ** 2 + self.z ** 2)\n\n    def cross_product(self, other):\n        return Point(\n            self.y * other.z - self.z * other.y,\n            self.z * other.x - self.x * other.z,\n            self.x * other.y - self.y * other.x\n        )\n\n    def dot_product(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\n\n    def angle(self, other, deg=False):\n        ab = self - other\n        ab_norm = abs(ab)\n        bc = other - self\n        bc_norm = abs(bc)\n\n        angle = math.acos(ab.dot_product(bc) / (ab_norm * bc_norm))\n\n        if deg:\n            return angle * 180 / math.pi\n        else:\n            return angle\n\n    def unit(self):\n        return self / abs(self)"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == '90.00'\n\nstdin_lines = [x for x in stdin.split('\\n') if x]\n\n=====Test Case=====\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 1 1') == '90.0'\n\"\"\"\nimport math\na, b, c, d = tuple(map(float, stdin.split()))\nab = (b - a)\nbc = (c - b)\ncd = (d - c)\n\ncross = ab[0] * bc[1] - bc[0] * ab[1]\ncross += ab[1] * cd[0] - cd[1] * ab[0]\ncross += ab[2] * bc[0] - bc[2] * ab[0]\ncross += ab[0] * cd[1] - cd[0] * ab[1]\n\nnorm = math.sqrt(cross[0] ** 2 + cross[1] ** 2 + cross[2] ** 2)\nnorm = norm ** -1\n\nprint(round(math.degrees(math.acos(cross[2] / norm)), 2))\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1.0 3.0 2.0 4.0\") == \"90.0\", f\"Solution {solution('1.0 3.0 2.0 4.0')} should be 90.0\"\nassert solution(\"1.0 2.0 2.0 4.0\") == \"0.0\", f\"Solution {solution('1.0 2.0 2.0 4.0')} should be 0.0\"\nassert solution(\"2.0 2.0 1.0 4.0\") == \"180.0\", f\"Solution {solution('2.0 2.0 1.0 4.0')} should be 180.0\"\n\n=====\nWrite a code to find the angle between three points. The angle should be between 0 and 180. The points are defined by the coordinates of the cartesian plane.\n\n>>> point_a = (1, 0, 0)\n>>> point_b = (1, 0, 0)\n>>> point_c = (0, 1, 0)\n>>> angle = 180.0\n>>> expected = 180.0\n>>> print(f\"angle: {angle}, expected: {expected}\")\nangle: 180.0, expected: 180.0\n>>> print(f\"my solution: {solution('1.0 2.0 2.0 4.0')}\")\n90.0\n>>> print(f\"my solution: {solution('2.0 2.0 1.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('2.0 2.0 1.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('1.0 2.0 2.0 4.0')}\")\n90.0\n>>> print(f\"my solution: {solution('1.0 1.0 1.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('1.0 1.0 1.0 4.0')}\")\n0.0\n>>> print(f\"my solution: {solution('2.0 2.0 2.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('2.0 2.0 2.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('0.0 2.0 2.0 4.0')}\")\n0.0\n>>> print(f\"my solution: {solution('0.0 2.0 2.0 4.0')}\")\n0.0\n>>> print(f\"my solution: {solution('0.0 2.0 2.0 4.0')}\")\n0.0\n\n>>> print(f\"my solution: {solution('1.0 2.0 2.0 4.0')}\")\n90.0\n>>> print(f\"my solution: {solution('1.0 1.0 1.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('1.0 1.0 1.0 4.0')}\")\n0.0\n>>> print(f\"my solution: {solution('2.0 2.0 2.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('2.0 2.0 2.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('0.0 2.0 2.0 4.0')}\")\n0.0\n>>> print(f\"my solution: {solution('0.0 2.0 2.0 4.0')}\")\n0.0\n>>> print(f\"my solution: {solution('0.0 2.0 2.0 4.0')}\")\n0.0\n\n>>> print(f\"my solution: {solution('1.0 1.0 1.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('1.0 2.0 2.0 4.0')}\")\n90.0\n>>> print(f\"my solution: {solution('1.0 2.0 2.0 4.0')}\")\n90.0\n>>> print(f\"my solution: {solution('1.0 1.0 1.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('1.0 1.0 1.0 4.0')}\")\n0.0\n>>> print(f\"my solution: {solution('2.0 2.0 2.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('2.0 2.0 2.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('0.0 2.0 2.0 4.0')}\")\n0.0\n>>> print(f\"my solution: {solution('0.0 2.0 2.0 4.0')}\")\n0.0\n>>> print(f\"my solution: {solution('0.0 2.0 2.0 4.0')}\")\n0.0\n\n>>> print(f\"my solution: {solution('2.0 2.0 2.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('2.0 2.0 2.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('2.0 2.0 2.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('2.0 2.0 2.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('2.0 2.0 2.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('0.0 2.0 2.0 4.0')}\")\n0.0\n>>> print(f\"my solution: {solution('0.0 2.0 2.0 4.0')}\")\n0.0\n>>> print(f\"my solution: {solution('0.0 2.0 2.0 4.0')}\")\n0.0\n>>> print(f\"my solution: {solution('1.0 2.0 2.0 4.0')}\")\n90.0\n>>> print(f\"my solution: {solution('1.0 1.0 1.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('1.0 1.0 1.0 4.0')}\")\n0.0\n>>> print(f\"my solution: {solution('1.0 1.0 1.0 4.0')}\")\n0.0\n>>> print(f\"my solution: {solution('2.0 2.0 2.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('2.0 2.0 2.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('2.0 2.0 2.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('2.0 2.0 2.0 4.0')}\")\n180.0\n>>> print(f\"my solution: {solution('0.0 2.0 2.0 4.0')}\")\n0.0\n>>> print(f\"my solution: {solution('0.0 2.0 2.0 4.0')}\")\n0.0\n>>> print(f\"my solution: {solution('0.0 2.0 2.0 4.0')}\")\n0.0\n\n>>> print(f\"my solution: {solution('0.0 2.0 2.0 4.0')}"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 one two three five six seven eight nine ten\") == \"10\"\nassert solution(\"five\") == \"2\"\nassert solution(\"3 apple 4 orange 5 pear\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7, abbbbbbbb, 9, ab, ababababa\") == 9\nassert solution(\"2, a, aa\") == 3\nassert solution(\"1, abc, 1\") == 2\nassert solution(\"1, abc\") == 1\nassert solution(\"1, ab\") == 2\n\"\"\""
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('aa bb cc dd ee ff gg') == '0'\nassert solution('zz aa bb cc dd ee ff gg') == '6'\nassert solution('aaa bbb ccc ddd eee ffff ggggg') == '12'\n=====Test Case=====\nTest case 1\nInput\n5\nlist1\nword1\nword2\nword3\nword4\nOutput\n2\n0\n1\n4\n10\nExplanation\n5 words are read from input. Here are the words in the input:\nlist1\nword1\nword2\nword3\nword4\nOnly word1 has an even number of vowels and the score of word1 is 2.\nNo other word has an even number of vowels and the score of that word is 1.\nThe score of the list of words is the sum of the scores of all words.\nThe output is 2.\nTest case 2\nInput\n1\nword1\nOutput\n0\nExplanation\nOnly word1 has an even number of vowels and the score of word1 is 0.\nNo other word has an even number of vowels and the score of that word is 1.\nThe score of the list of words is the sum of the scores of all words.\nThe output is 0.\n\"\"\"\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 davlatlar va avtomobillar\") == \"6 6 6 6 6\", \"Davlatlar va avtomobillar\"\nassert solution(\"2 musbat davlatlar va barcha avtomobilllar\") == \"4 4 4 4 4 4\", \"Musbat davlatlar va barcha avtomobilllar\"\nassert solution(\"2 musbat davlatlar va barcha avtomobilllar\") == \"2 2 2 2 2 2\", \"Musbat davlatlar va barcha avtomobilllar\"\nassert solution(\"2 musbat davlatlar va barcha avtomobilllar\") == \"2 2 2 2 2 2\", \"Musbat davlatlar va barcha avtomobilllar\"\n\n\"\"\""
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 abc 9 9 9 1 qwerty') == 3\nassert solution('2 qwerty 1 abc 9 9 9 1 qwerty') == 5\nassert solution('3 qwerty 2 qwerty 1 abc 9 9 9 1 qwerty') == 6\nassert solution('4 qwerty 3 qwerty 2 qwerty 1 abc 9 9 9 1 qwerty') == 7\nassert solution('5 qwerty 4 qwerty 3 qwerty 2 qwerty 1 abc 9 9 9 1 qwerty') == 8"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 abc a b c') == 6\nassert solution('3 abc b c') == 5\nassert solution('2 ab abc abd') == 2\nassert solution('3 a ab abc bcd') == 5\nassert solution('1 a ab abc bcd') == 1\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abciiidef suggest') == 6\nassert solution('yinyang yin rin') == 0\nassert solution('aeiou') == 5\nassert solution('yinyang yin rin') == 0\nassert solution('aeioum') == 0\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20') == 'A', '20: got \"{}\" expected \"A\"'\nassert solution('11') == 'B', '11: got \"{}\" expected \"B\"'\nassert solution('1') == 'B', '1: got \"{}\" expected \"B\"'\n\"\"\"\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aeiyou') == 2\nassert solution('aeiouu') == 2\nassert solution('aeiouy') == 4\nassert solution('y') == 1\n\n=====Test Data=====\nYou can find the sample test files for the correct solution in the drop-down in the top right of the Code Template.\n\n=====Note=====\nThe locked code stub will only contain function names, but not positional or keyword arguments.\n'''"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'No score'\nassert solution('eyuio') == 'No score'\nassert solution('aei') == '2'\nassert solution('aeiaeiou') == '2'\nassert solution('aeiou') == '5'\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"X\") == True\nassert solution(\"XX\") == False\nassert solution(\"XXX\") == False\nassert solution(\"XL\") == True\nassert solution(\"CDXLIII\") == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == False, 'Empty string'\nassert solution('I') == True, 'I'\nassert solution('V') == True, 'V'\nassert solution('X') == True, 'X'\nassert solution('L') == True, 'L'\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(solution(\">A<C#^D\") == True\nassert solution(solution(\">A<C#>D\") == False\n\nassert solution(solution(\">A<C#\") == True\nassert solution(solution(\">A<C\") == False\n\nassert solution(solution(\">A<\") == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('XXI') == True\nassert solution('XXX') == False\nassert solution('XL') == True\nassert solution('IV') == True\nassert solution('XCIX') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('X') == True, 'wrong output'\nassert solution('XX') == False, 'wrong output'\nassert solution('CDXXI') == True, 'wrong output'\nassert solution('MMMDCCCLXXXVIII') == True, 'wrong output'\nassert solution('MMMDCCCLXXXIX') == True, 'wrong output'\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('X') == True\nassert solution('XX') == False\nassert solution('CDXXI') == True\nassert solution('CDXXII') == False\nassert solution('CDXXIII') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == False\nassert solution('I') == True\nassert solution('V') == True\nassert solution('X') == True\nassert solution('L') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"X\") == True\nassert solution(\"XXX\") == False\nassert solution(\"XL\") == True\nassert solution(\"CDXLIII\") == True\nassert solution(\"MMMDCCCLXXXVIII\") == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('X') == False\nassert solution('IV') == True\nassert solution('CDXCIX') == True\nassert solution('MMMCMXCIX') == True\nassert solution('DLVI') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('I') == True\nassert solution('XXI') == True\nassert solution('CDXCIX') == True\nassert solution('CMXCIX') == True\nassert solution('MCDLXXVI') == True\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n9587456281\\n1334567823\\n9556324580\\n9299886936\\n929988401\\n9459852934\") == \\\n    \"+91 78954 5281\\n+91 36584 2338\\n+91 93345 6783\\n+91 9999 8869\\n+91 98985 2934\"\nprint(\"Success\")\n\n=====Test Cases=====\nInput            Output\n5               +91 78954 5281\n8              +91 98765 4321\n6              +91 9876 5432\n3             +91 9876 5432\n8              +91 98765 4321\n3             +91 9876 5432\n'''\nimport math"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8989572645') == '+91 985 72645'\nassert solution('5489572645') == '+91 549 72645'\nassert solution('8900546745') == '+91 89 72645'\nassert solution('8989572645') == '+91 985 72645'\nassert solution('4234234234') == '+91 4234 234'\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9085398527\") == \"085398527\"\nassert solution(\"9198005392\") == \"998005392\"\nassert solution(\"919900539\") == \"99900539\"\nassert solution(\"9199005\") == \"999005\"\nassert solution(\"919900\") == \"99900\"\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''9\n727629511\n9255676215\n8562585210\n6121358133\n5723155557\n9619592896\n727629511\n727629511\n9255676215\n7396997711\n5723155557\n9619592896\n727629511\n727629511\n9255676215\n9255676215\n5723155557\n9619592896\n727629511\n727629511\n9255676215\n8562585210\n6121358133\n5723155557\n9619592896\n727629511\n9255676215\n727629511\n9255676215\n9255676215\n8562585210\n6121358133\n5723155557\n9619592896\n727629511\n727629511\n9255676215\n9255676215\n8562585210\n6121358133\n5723155557\n9619592896\n727629511\n727629511\n9255676215\n9255676215\n8562585210\n6121358133\n5723155557\n9619592896\n727629511\n727629511\n9255676215\n9255676215\n5723155557\n96195928lc''') == '''+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888\n+91 7877 8888888"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n0783456789\\n9123456789\\n5678912345\\n01234 56789\\n9123456789') == '\\n0783456789\\n9123456789\\n01234 56789\\n5678912345\\n'\nprint('Test pass.')\n\n=====Question=====\nLet's dive into decorators! You are given N mobile numbers. Sort them in ascending order then print them in the standard format shown below:\n+91 xxxxx xxxxx\n\nThe given mobile numbers may have +91, 91 or 0 written before the actual 10 digit number. Alternatively, there may not be any prefix at all. Alternatively, there may not be any prefix at all.\n\n=====Input Format=====\nThe first line of input contains an integer N, the number of mobile phone numbers. N lines follow each containing a mobile number.\n\n=====Output Format=====\nPrint N mobile numbers on separate lines in the required format.\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n07895462130\n919875641230\n9195969878\n''') == '''+91 78954 62130\n+91 91959 69878\n+91 98756 41230\n'''\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"91 654 321 564\") == \\\n    \"+91 654 321 564\\n\" \\\n    \"91 654 321 564\\n\" \\\n    \"91 654 321 564\\n\"\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1234') == '+91 1234'\nassert solution('87563847465') == '+91 8765432167'\nassert solution('8675309') == '+1 8675309'\n\n=====Test Case By:=====\nSOLUTION:\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('+91801234567') == '+91 801234567'\nassert solution('81801234567') == '+91 81801234567'\nassert solution('91801234567') == '+91 91801234567'\n'''"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9587456281\") == \"+9235628100\"\nassert solution(\"9354824835\") == \"+9234824835\"\nassert solution(\"9354824835\") == \"+9234824835\"\nassert solution(\"9354824835\") == \"+9234824835\"\nassert solution(\"9587456281\") == \"+9235628100\"\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a a a'): '100.00'\nassert solution('alpha beta beta gamma gamma gamma delta delta'): '50.00'\n\"\"\"\nimport math"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nHelen 100\\nRobert 100\\nMaria 200\\nWilliam 100\\nDorothea 350\") == \"150.00\"\nassert solution(\"3\\nMike 100\\nLucia 200\\nCesar 300\") == \"200.00\"\n'''\n\nimport math"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\t2 3\\n4\") == '2.00'\nassert solution(\"2\\t4 5\\n5\") == '3.50'\nassert solution(\"3\\t3 3\\n5\") == '3.00'\nassert solution(\"3\\t3\\n\") == '0.00'\nassert solution(\"4\\t4 4\\n4\") == '2.50'\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a': [20, 30, 40]) == 20.00\nassert solution('b': [30, 50, 70]) == 35.00\nassert solution('a': [20, 30, 40]) == 20.00\nassert solution('c': [10, 20, 30]) == 15.00\n\n\"\"\"\n\nimport os\nimport sys\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\nalpha mark:20\nbeta mark:30\ngamma mark:50\ndelta mark:70\nbeta mark:90\") == \"50.00\"\nassert solution(\"3\nalpha mark:20\nbeta mark:30\ngamma mark:50\") == \"33.33\"\nassert solution(\"5\nalpha mark:20\nbeta mark:30\ngamma mark:50\ndelta mark:70\nepsilon mark:90\nquery_name:beta\") == \"50.00\"\nassert solution(\"5\nalpha mark:20\nbeta mark:30\ngamma mark:50\ndelta mark:70\nepsilon mark:90\nquery_name:gamma\") == \"50.00\"\nassert solution(\"5\nalpha mark:20\nbeta mark:30\ngamma mark:50\ndelta mark:70\nepsilon mark:90\nquery_name:alpha\") == \"33.33\"\n=====Test 1=====\nTests whether your code correctly answers the test case.\n\n=====Test 2=====\nTests whether your code correctly handles an empty list of marks for a particular student.\n\n=====Test 3=====\nTests whether your code handles an empty list of students.\n\n=====Test 4=====\nTests whether your code handles the first test case correctly (whether it handles an empty list of students when given no students).\n\n=====Test 5=====\nTests whether your code handles the second test case correctly (whether it handles an empty list of marks for a particular student when given no marks).\n\n=====Test 6=====\nTests whether your code handles the third test case correctly (whether it handles an empty list of students when given no students).\n\n=====Test 7=====\nTests whether your code handles the fourth test case correctly (whether it handles an empty list of marks for a particular student when given no marks).\n\n=====Test 8=====\nTests whether your code handles the first test case correctly (whether it handles an empty list of students when given no students).\n\n=====Test 9=====\nTests whether your code handles the second test case correctly (whether it handles an empty list of marks for a particular student when given no marks).\n\n=====Test 10=====\nTests whether your code handles the third test case correctly (whether it handles an empty list of students when given no students).\n\n=====Test 11=====\nTests whether your code handles the fourth test case correctly (whether it handles an empty list of marks for a particular student when given no marks).\n\n=====Test 12=====\nTests whether your code handles the first test case correctly (whether it handles an empty list of students when given no students).\n\n=====Test 13=====\nTests whether your code handles the second test case correctly (whether it handles an empty list of marks for a particular student when given no marks).\n\n=====Test 14=====\nTests whether your code handles the third test case correctly (whether it handles an empty list of students when given no students).\n\n=====Test 15=====\nTests whether your code handles the fourth test case correctly (whether it handles an empty list of marks for a particular student when given no marks).\n\n=====Test 16=====\nTests whether your code handles the first test case correctly (whether it handles an empty list of students when given no students).\n\n=====Test 17=====\nTests whether your code handles the second test case correctly (whether it handles an empty list of marks for a particular student when given no marks).\n\n=====Test 18=====\nTests whether your code handles the third test case correctly (whether it handles an empty list of students when given no students).\n\n=====Test 19=====\nTests whether your code handles the fourth test case correctly (whether it handles an empty list of marks for a particular student when given no marks).\n\n=====Test 20=====\nTests whether your code handles the first test case correctly (whether it handles an empty list of students when given no students).\n\n=====Test 21=====\nTests whether your code handles the second test case correctly (whether it handles an empty list of marks for a particular student when given no marks).\n\n=====Test 22=====\nTests whether your code handles the third test case correctly (whether it handles an empty list of students when given no students).\n\n=====Test 23=====\nTests whether your code handles the fourth test case correctly (whether it handles an empty list of marks for a particular student when given no marks).\n\n=====Test 24=====\nTests whether your code handles the first test case correctly (whether it handles an empty list of students when given no students).\n\n=====Test 25=====\nTests whether your code handles the second test case correctly (whether it handles an empty list of marks for a particular student when given no marks).\n\n=====Test 26=====\nTests whether your code handles the third test case correctly (whether it handles an empty list of students when given no students).\n\n=====Test 27=====\nTests whether your code handles the fourth test case correctly (whether it handles an empty list of marks for a particular student when given no marks).\n\n=====Test 28=====\nTests whether your code handles the first test case correctly (whether it handles an empty list of students when given no students).\n\n=====Test 29=====\nTests whether your code handles the second test case correctly (whether it handles an empty list of marks for a particular student when given no marks).\n\n=====Test 30=====\nTests whether your code handles the third test case correctly (whether it handles an empty list of students when given no students).\n\n=====Test 31=====\nTests whether your code handles the fourth test case correctly (whether it handles an empty list of marks for a particular student when given no marks).\n\n=====Test 32=====\nTests whether your code handles the first test case correctly (whether it handles an empty list of students when given no students).\n\n=====Test 33=====\nTests whether your code handles the second test case correctly (whether it handles an empty list of marks for a particular student when given no marks).\n\n=====Test 34=====\nTests whether your code handles the third test case correctly (whether it handles an empty list of students when given no students).\n\n=====Test 35=====\nTests whether your code handles the fourth test case correctly (whether it handles an empty list of marks for a particular student when given no marks).\n\n=====Test 36=====\nTests whether your code handles the first test case correctly (whether it handles an empty list of students when given no students).\n\n=====Test 37=====\nTests whether your code handles the second test case correctly (whether it handles an empty list of marks for a particular student when given no marks).\n\n=====Test 38=====\nTests whether your code handles the third test case correctly (whether it handles an empty list of students when given no students).\n\n=====Test 39=====\nTests whether your code handles the fourth test case correctly (whether it handles an empty list of marks for a particular student when given no marks).\n\n=====Test 40=====\nTests whether your code handles the first test case correctly (whether it handles an empty list of students when given no students).\n\n=====Test 41=====\nTests whether your code handles the second test case correctly (whether it handles an empty list of marks for a particular student when given no marks).\n\n=====Test 42=====\nTests whether your code handles the third test case correctly (whether it handles an empty list of students when given no students).\n\n=====Test 43=====\nTests whether your code handles the fourth test case correctly (whether it handles an empty list of marks for a particular student when given no marks).\n\n=====Test 44=====\nTests whether your code handles the first test case correctly (whether it handles an empty list of students when given no students).\n\n=====Test 45=====\nTests whether your code handles the second test case correctly (whether it handles an"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('alpha beta beta gamma gamma gamma delta delta x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\nJeff\\n20 50\\n3\\nRay\\n20 50\\n5') == 'Jeff: 47.50'\nassert solution('3\\nGeorge\\n20 50\\n3\\nPeter\\n20 50\\n5') == 'George: 33.33'\nassert solution('3\\nGeorge\\n20 50\\n3\\nPeter\\n20 50\\n5') == 'George: 33.33'\n'''\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\nHarry\\n37.21\\nBerry\\n37.21\\nTina\\n37.2\\nAkriti\\n41\\nHarsh\\n39') == 'Berry'\n'''\nimport math"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\nJeff\\t73\\nBob\\t83\\nMike\\t93\\nWill\\t45\\nLarry\\t86\\nScott\\t68') == 'Jeff\\t69.67'\n\n=====Test Case======\nExpected Output\n\n3\nJeff\n73\nBob\n83\nMike\n93\nWill\n45\nLarry\n86\nScott\n68\n\n2\nJeff\n86\nWill\n86\n\n3\nJeff\n73\nBob\n83\nMike\n93\nWill\n45\nLarry\n86\nScott\n68\n\n5\nJeff\n73\nBob\n83\nMike\n93\nWill\n45\nLarry\n86\nScott\n68\nLarry\n86\nExpected Output\n\n86\n86\n86\n86\n86\n\n87.5\n87.5\n87.5\n87.5\n87.5\n87.5\n87.5\n87.5\n87.5\n87.5\n87.5\n87.5\n\n'''\nn = int(input())\ndict = {}\nfor i in range(n):\n    list = list(input().split())\n    marks = list[1:]\n    marks = list(map(float, marks))\n    avg = sum(marks)/len(marks)\n    dict[list[0]] = avg\nquery_name = input()\nprint('%.2f' % dict[query_name])\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\nArun 70 70 70 Dev 100') == 'Dev'\nassert solution('2\\nHarsh 25 26.5 28') == '26.50'"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Albert|King|25|M\") == \"Mr. Albert King\"\nassert solution(\"Alice|Smith|23|F\") == \"Ms. Alice Smith\"\nassert solution(\"David|Durst|31|M\") == \"Mr. David Durst\"\nassert solution(\"John|Doe|73|M\") == \"Mr. John Doe\"\n\nprint(solution(\"Albert|King|25|M\"))\nprint(solution(\"Alice|Smith|23|F\"))\nprint(solution(\"David|Durst|31|M\"))\nprint(solution(\"John|Doe|73|M\"))\n\n----"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('Henry Davids 12 M Mary George 22 F') == 'Mr. Henry Davids\\nMs. Mary George'\n=====\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\nMike Thomson 20 M\\nRobert Bustle 32 M\\n\") == \\\n    \"Mr. Mike Thomson\\nMs. Robert Bustle\"\n    \nassert solution(\"3\\nMike Thomson 20 M\\nRobert Bustle 32 M\\nPaul Lockwood 38 M\\n\") == \\\n    \"Mr. Mike Thomson\\nMs. Robert Bustle\\nMr. Paul Lockwood\"\n    \nassert solution(\"1\\nPaul Lockwood 38 M\\n\") == \\\n    \"Ms. Paul Lockwood\"\n    \nassert solution(\"2\\nGeorge Floyd 30 M\\nJane Doe 39 F\\n\") == \\\n    \"Ms. Jane Doe\\nMr. George Floyd\"\n\n\"\"\"\n\nimport unittest\n\n\nclass TestFirstNames(unittest.TestCase):\n    def test_solution(self):\n        pass"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\nMike Thomson 20 M\nRobert Bustle 32 M\nAndria Bustle 30 F''') == '''Mr. Mike Thomson\nMs. Andria Bustle\nMr. Robert Bustle'''\n\nassert solution('''4\nHolly Clark 18 F\nPeter Cercutti 27 M\nCristina Duval 30 F\nAnne O'Connor 38 F''') == '''Mr. Peter Cercutti\nMs. Cristina Duval\nMs. Anne O'Connor\nMr. Holly Clark'''\n\nprint('Success')\n'''\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Jeff, Bill, 20, M\\n, Fred, Bill, 31, M\\n, Henry, Joe, 20, M\\n, Mary, Jane, 20, F\\n') == 'Mr. Henry Joe\\nMr. Bill Fred\\nMs. Jane Mary\\n'\nassert solution('Jeff, Bill, 20, M\\n, Fred, Bill, 31, M\\n, Henry, Joe, 20, M\\n, Mary, Jane, 20, F\\n') == 'Mr. Henry Joe\\nMr. Bill Fred\\nMs. Jane Mary\\n'\nassert solution('Jeff, Bill, 20, M\\n, Fred, Bill, 31, M\\n, Henry, Joe, 20, M\\n, Mary, Jane, 20, F\\n') == 'Mr. Henry Joe\\nMr. Bill Fred\\nMs. Jane Mary\\n'\nassert solution('Jeff, Bill, 20, M\\n, Fred, Bill, 31, M\\n, Henry, Joe, 20, M\\n, Mary, Jane, 20, F\\n') == 'Mr. Henry Joe\\nMr. Bill Fred\\nMs. Jane Mary\\n'\n\nassert solution('Jeff, Bill, 20, M\\n, Fred, Bill, 31, M\\n, Henry, Joe, 20, M\\n, Mary, Jane, 20, F\\n') == 'Mr. Henry Joe\\nMr. Bill Fred\\nMs. Jane Mary\\n'\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Rosie Aaron 14 M\") == \"Mr. Rosie Aaron\\nMs. Rosie Aaron\"\nassert solution(\"Sue Anderson 16 F\") == \"Ms. Sue Anderson\\nMr. Sue Anderson\"\nassert solution(\"Huck Black 15 M\") == \"Mr. Huck Black\\nMs. Huck Black\"\n\"\"\"\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"James Davids 17 M\") == \"Mr. James Davids\\nMs. James Davids\"\nassert solution(\"Jennifer Davids 17 F\") == \"Ms. Jennifer Davids\\nMr. Jennifer Davids\"\nassert solution(\"John George 17 M\") == \"Mr. John George\\nMs. John George\"\nassert solution(\"Mary George 17 F\") == \"Ms. Mary George\\nMr. Mary George\"\nassert solution(\"Willy Will 16 M\") == \"Mr. Willy Will\\nMs. Willy Will\"\n\n=====Tests=====\nimport io, pytest\nfrom solutions.problem034 import solution\n\n@pytest.mark.parametrize(\"stdin, expected\", [\n    (\"James Davids 17 M\", \"Mr. James Davids\\nMs. James Davids\"),\n    (\"Jennifer Davids 17 F\", \"Ms. Jennifer Davids\\nMr. Jennifer Davids\"),\n    (\"John George 17 M\", \"Mr. John George\\nMs. John George\"),\n    (\"Mary George 17 F\", \"Ms. Mary George\\nMr. Mary George\"),\n    (\"Willy Will 16 M\", \"Mr. Willy Will\\nMs. Willy Will\"),\n])\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Henry Davids Mary George') == 'Mr. Henry Davids\\nMs. Mary George'"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"George\\nWashington\\n1789\\nM\\n1789\\nM\\n1793\\nF\\n1797\\nM\\n1799\\nF\\n1801\\nM\\n1805\\nM\\n1809\\nF\\n1815\\nF\\n1816\\nF\\n1820\\nM\\n1825\\nF\\n1832\\nM\\n1837\\nM\\n1843\\nM\\n1845\\nM\\n1847\\nM\\n1851\\nM\\n1855\\nF\\n1857\\nM\\n1859\\nF\\n1867\\nM\\n1871\\nM\\n1873\\nF\\n1879\\nM\\n1881\\nM\\n1893\\nF\\n1897\\nM\\n1899\\nM\\n1901\\nF\\n1907\\nM\\n1909\\nM\\n1913\\nM\\n1931\\nF\\n1933\\nF\\n1937\\nM\\n1943\\nM\\n1947\\nM\\n1953\\nF\\n1957\\nM\\n1963\\nF\\n1967\\nM\\n1969\\nF\\n1971\\nF\\n1973\\nF\\n1979\\nM\\n1983\\nM\\n1989\\nM\\n1991\\nM\\n1997\\nF\\n1999\\nF\\n2003\\nM\\n2007\\nF\\n2009\\nF\\n2011\\nF\\n2017\\nF\\n2027\\nM\\n2029\\nF\\n2039\\nF\\n2053\\nF\\n2059\\nM\\n2063\\nM\\n2069\\nF\\n2079\\nF\\n2081\\nM\\n2083\\nF\\n2087\\nM\\n2089\\nF\\n2099\\nF\\n2107\\nM\\n2113\\nF\\n2129\\nF\\n2131\\nM\\n2137\\nM\\n2141\\nM\\n2143\\nF\\n2153\\nM\\n2161\\nF\\n2179\\nM\\n2191\\nF\\n2197\\nF\\n2203\\nM\\n2209\\nF\\n2221\\nF\\n2223\\nM\\n2229\\nF\\n2233\\nM\\n2239\\nM\\n2243\\nF\\n2259\\nM\\n2263\\nF\\n2267\\nF\\n2269\\nM\\n2273\\nM\\n2281\\nF\\n2287\\nF\\n2297\\nM\\n2309\\nM\\n2311\\nF\\n2317\\nF\\n2333\\nF\\n2339\\nF\\n2341\\nF\\n2347\\nM\\n2351\\nM\\n2357\\nF\\n2371\\nF\\n2377\\nF\\n2383\\nM\\n2389\\nM\\n2397\\nM\\n2409\\nF\\n2427\\nF\\n2431\\nM\\n2433\\nM\\n2437\\nF\\n2441\\nM\\n2447\\nF\\n2459\\nF\\n2473\\nF\\n2477\\nF\\n2503\\nM\\n2509\\nM\\n2519\\nM\\n2531\\nM\\n2539\\nM\\n2543\\nM\\n2549\\nF\\n2551\\nM\\n2557\\nM\\n2579\\nM\\n2591\\nF\\n2593\\nF\\n2609\\nM\\n2617\\nM\\n2621\\nF\\n2633\\nM\\n2641\\nM\\n2651\\nM\\n2657\\nM\\n2659\\nM\\n2663\\nM\\n2671\\nF\\n2677\\nM\\n2683\\nM\\n2691\\nF\\n2697\\nM\\n2701\\nM\\n2707\\nM\\n2719\\nF\\n2729\\nF\\n2731\\nM\\n2741\\nM\\n2749\\nM\\n2753\\nF\\n2767\\nM\\n2777\\nF\\n2789\\nM\\n2791\\nF\\n2803\\nF\\n2819\\nM\\n2833\\nM\\n2837\\nM\\n2843\\nM\\n2851\\nM\\n2857\\nM\\n2861\\nM\\n2879\\nM\\n2887\\nF\\n2897\\nM\\n2909\\nF\\n2917\\nF\\n2927\\nM\\n2941\\nM\\n2951\\nF\\n2957\\nM\\n2963\\nF\\n2969\\nF\\n2971\\nF\\n2999\\nM\\n3001\\nF\\n3011\\nF\\n3019\\nM\\n3023\\nM\\n3037\\nM\\n3041\\nM\\n3049\\nF\\n3067\\nM\\n3079\\nM\\n3083\\nM\\n3089\\nF\\n3109\\nF\\n3121\\nM\\n3137\\nM\\n3163\\nF\\n3167\\nF\\n3169\\nF\\n3181\\nM\\n3187\\nF\\n3191\\nM\\n3199\\nF\\n3203\\nF\\n3209\\nM\\n3217\\nM\\n3221\\nF\\n3229\\nF\\n3241\\nF\\n3247\\nM\\n3253\\nM\\n3257\\nM\\n3259\\nM\\n3271\\nM\\n3299\\nF\\n3307\\nF\\n3313\\nM\\n3319\\nF\\n3323\\nF\\n3329\\nM\\n3333\\nF\\n3353\\nF\\n3367\\nF\\n3369\\nF\\n3373\\nM\\n3379\\nM\\n3381\\nM\\n3391\\nM\\n3407\\nF\\n3413\\nM\\n3421\\nM\\n3433\\nM\\n3441\\nM\\n3461\\nM\\n3467\\nF\\n3469\\nF\\n3473\\nM\\n3491\\nM\\n3497\\nM\\n3517\\nF\\n3527\\nM\\n3529\\nM\\n3533\\nM\\n3539\\nM\\n3541\\nF\\n3547\\nM\\n3551\\nM\\n3559\\nM\\n3583\\nM\\n3593\\nM\\n3607\\nM\\n3613\\nM\\n3619\\nM\\n3623\\nM\\n3637\\nM\\n3643\\nM\\n3659\\nF\\n3667\\nF\\n3671\\nF\\n3673\\nM\\n3677\\nM"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('Henry Davids 12 M') == 'Mr. Henry Davids'\nassert solution('Mary George 12 F') == 'Ms. Mary George'\n\"\"\""
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\"\n\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(0, 0, 0, 0) == 0, \"0\"\nassert solution(1, 1, 1, 0) == 0, \"1\"\nassert solution(1, 1, 1, 1) == 0, \"2\"\nassert solution(1, 1, 1, 2) == 2, \"3\"\nassert solution(1, 1, 1, 3) == 3, \"4\"\n=====Output Format=====\nPrint the list of lists in lexicographic increasing order, where each inner list represents the coordinates of a point on the cuboid and the elements of the inner list are the respective coordinates of that point.\n\n=====Sample Test Case=====\nINPUT\n1\n1\n1\n2\nOUTPUT\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 2], [0, 2, 1], [1, 0, 1], [1, 1, 0], [1, 1, 2], [1, 2, 0], [1, 2, 1], [2, 0, 0], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\n>>>>>>> c47f88ddb3f8a5e6a49cad5d7bf6be5e80f9a4d\n\"\"\"\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4 5') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 0, 3], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 1, 3], [3, 0, 0], [3, 0, 1], [3, 0, 2], [3, 0, 3], [3, 1, 0], [3, 1, 1], [3, 1, 2], [3, 1, 3], [3, 2, 0], [3, 2, 1], [3, 2, 2], [3, 2, 3]]'\n\nassert solution('1 1 2 3') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 0, 3], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 1, 3], [3, 0, 0], [3, 0, 1], [3, 0, 2], [3, 0, 3], [3, 1, 0], [3, 1, 1], [3, 1, 2], [3, 1, 3], [3, 2, 0], [3, 2, 1], [3, 2, 2], [3, 2, 3]]'\n\nassert solution('1 1 1 1') == '[[0, 0, 0], [1, 0, 0], [0, 1, 0], [1, 1, 0], [0, 0, 1], [1, 0, 1], [0, 1, 1], [1, 1, 1]]'\nassert solution('2 2 2 3') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 2, 0], [0, 2, 1], [0, 2, 2], [0, 2, 3], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 0, 3], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 2, 0], [2, 2, 1], [2, 2, 2], [2, 2, 3]]'\n\n=====Output Format=====\nPrint the list in lexicographic increasing order.\n\"\"\""
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"1,3,2,4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\nassert solution(\"1 2 3\") == [[0, 0, 0], [0, 0, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\n\n=====Output Format=====\nPrint the list of lists in lexicographic increasing order, where each inner list represents a solution.\n\n=====Sample Test Cases=====\nInput:\n1\n1\n1\n2\nOutput:\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\n\nInput:\n1\n2\n1\n2\nOutput:\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 1, 1]]\n\nInput:\n2\n2\n2\n2\nOutput:\n[[0, 0, 0], [1, 0, 0], [1, 1, 0], [1, 1, 1]]\n\nInput:\n2\n2\n3\n2\nOutput:\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 0], [1, 1, 1]]\n\nInput:\n1\n1\n1\n1\nOutput:\n[[0, 0, 0]]\n\nInput:\n1\n2\n2\n2\nOutput:\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 1, 1]]\n\nSolution:\n=====Code=====\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 1], [0, 1, 1], [0, 1, 2], [1, 0, 2], [1, 1, 2]]\nassert solution(\"1 2 3\") == [[0, 0, 0], [1, 0, 0], [0, 1, 0], [1, 1, 1], [0, 1, 1], [0, 1, 2], [1, 0, 2], [1, 1, 2]]\nassert solution(\"1 1 1 1\") == [[0, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 1], [0, 0, 2], [0, 1, 2], [0, 1, 2], [0, 2, 2], [1, 0, 0], [1, 1, 0], [1, 0, 1], [1, 1, 1], [1, 0, 2], [1, 1, 2], [1, 2, 2]]\n\"\"\""
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 2]]\"\nassert solution(\"1 2 3\") == \"[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 2]]\"\nassert solution(\"1 1 1 1\") == \"[[0, 1, 0], [1, 0, 0], [1, 1, 1]]\"\nassert solution(\"1 2 3 4\") == \"[[0, 0, 0], [0, 1, 0], [1, 0, 0], [1, 1, 1], [1, 0, 2], [0, 1, 2], [1, 1, 2]]\"\nassert solution(\"1 2 3\") == \"[[0, 0, 0], [0, 1, 0], [1, 0, 0], [1, 1, 2]]\"\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n1\\n2\\n3\") == \"0 0 0\\n1 1 0\\n1 1 1\\n0 2 0\\n1 2 1\\n0 2 1\\n0 0 2\\n1 0 2\\n1 1 2\"\n\"\"\"\n\nx = int(input())\ny = int(input())\nz = int(input())\nn = int(input())\n\nprint([[a,b,c] for a in range(x+1) for b in range(y+1) for c in range(z+1) if a+b+c!=n])\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 2 3') == \\\n       [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2],\n       [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n\nassert solution('1 2 3 4') == \\\n       [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 0], [0, 1, 1],\n       [0, 1, 2], [0, 1, 3], [0, 2, 0], [0, 2, 1], [0, 2, 2], [0, 2, 3],\n       [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 1, 0], [1, 1, 1],\n       [1, 1, 2], [1, 1, 3], [1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3]]\n\nassert solution('3 4 2 1') == \\\n       [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 0], [0, 1, 1],\n       [0, 1, 2], [0, 1, 3], [0, 2, 0], [0, 2, 1], [0, 2, 2], [0, 2, 3],\n       [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 1, 0], [1, 1, 1],\n       [1, 1, 2], [1, 1, 3], [1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3],\n       [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 0, 3], [2, 1, 0], [2, 1, 1],\n       [2, 1, 2], [2, 1, 3], [2, 2, 0], [2, 2, 1], [2, 2, 2], [2, 2, 3],\n       [3, 0, 0], [3, 0, 1], [3, 0, 2], [3, 0, 3], [3, 1, 0], [3, 1, 1],\n       [3, 1, 2], [3, 1, 3], [3, 2, 0], [3, 2, 1], [3, 2, 2], [3, 2, 3]]\n\nassert solution('1 3 1 1') == \\\n       [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 0], [0, 1, 1],\n       [0, 1, 2], [0, 1, 3], [0, 2, 0], [0, 2, 1], [0, 2, 2], [0, 2, 3],\n       [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 1, 0], [1, 1, 1],\n       [1, 1, 2], [1, 1, 3], [1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3],\n       [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 0, 3], [2, 1, 0], [2, 1, 1],\n       [2, 1, 2], [2, 1, 3], [2, 2, 0], [2, 2, 1], [2, 2, 2], [2, 2, 3],\n       [3, 0, 0], [3, 0, 1], [3, 0, 2], [3, 0, 3], [3, 1, 0], [3, 1, 1],\n       [3, 1, 2], [3, 1, 3], [3, 2, 0], [3, 2, 1], [3, 2, 2], [3, 2, 3]]\n\nassert solution('4 1 5 5') == \\\n       [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4],\n       [0, 0, 5], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3],\n       [0, 1, 4], [0, 1, 5], [0, 2, 0], [0, 2, 1], [0, 2, 2],\n       [0, 2, 3], [0, 2, 4], [0, 2, 5], [0, 3, 0], [0, 3, 1],\n       [0, 3, 2], [0, 3, 3], [0, 3, 4], [0, 3, 5], [0, 4, 0],\n       [0, 4, 1], [0, 4, 2], [0, 4, 3], [0, 4, 4], [0, 4, 5],\n       [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 0, 4],\n       [1, 0, 5], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3],\n       [1, 1, 4], [1, 1, 5], [1, 2, 0], [1, 2, 1], [1, 2, 2],\n       [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 3, 0], [1, 3, 1],\n       [1, 3, 2], [1, 3, 3], [1, 3, 4], [1, 3, 5], [1, 4, 0],\n       [1, 4, 1], [1, 4, 2], [1, 4, 3], [1, 4, 4], [1, 4, 5],\n       [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 0, 3], [2, 0, 4],\n       [2, 0, 5], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 1, 3],\n       [2, 1, 4], [2, 1, 5], [2, 2, 0], [2, 2, 1], [2, 2, 2],\n       [2, 2, 3], [2, 2, 4], [2, 2, 5], [2, 3, 0], [2, 3, 1],\n       [2, 3, 2], [2, 3, 3], [2, 3,"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == '1 1 1\\n1 1 2\\n1 1 3\\n1 1 4\\n1 2 1\\n1 2 2\\n1 2 3\\n1 2 4\\n1 3 1\\n1 3 2\\n1 3 3\\n1 3 4\\n1 4 1\\n1 4 2\\n1 4 3\\n1 4 4\\n2 1 1\\n2 1 2\\n2 1 3\\n2 1 4\\n2 2 1\\n2 2 2\\n2 2 3\\n2 2 4\\n2 3 1\\n2 3 2\\n2 3 3\\n2 3 4\\n2 4 1\\n2 4 2\\n2 4 3\\n2 4 4\\n3 1 1\\n3 1 2\\n3 1 3\\n3 1 4\\n3 2 1\\n3 2 2\\n3 2 3\\n3 2 4\\n3 3 1\\n3 3 2\\n3 3 3\\n3 3 4\\n3 4 1\\n3 4 2\\n3 4 3\\n3 4 4\\n4 1 1\\n4 1 2\\n4 1 3\\n4 1 4\\n4 2 1\\n4 2 2\\n4 2 3\\n4 2 4\\n4 3 1\\n4 3 2\\n4 3 3\\n4 3 4\\n4 4 1\\n4 4 2\\n4 4 3\\n4 4 4'\n=====Output Format=====\nPrint the list in lexicographically increasing order. Each element should be printed on a new line.\n\nSAMPLE INPUT \n1\n1\n1\n2\nSAMPLE OUTPUT \n1 1 1\n1 1 2\n1 1 3\n1 1 4\n1 2 1\n1 2 2\n1 2 3\n1 2 4\n1 3 1\n1 3 2\n1 3 3\n1 3 4\n1 4 1\n1 4 2\n1 4 3\n1 4 4\n2 1 1\n2 1 2\n2 1 3\n2 1 4\n2 2 1\n2 2 2\n2 2 3\n2 2 4\n2 3 1\n2 3 2\n2 3 3\n2 3 4\n2 4 1\n2 4 2\n2 4 3\n2 4 4\n3 1 1\n3 1 2\n3 1 3\n3 1 4\n3 2 1\n3 2 2\n3 2 3\n3 2 4\n3 3 1\n3 3 2\n3 3 3\n3 3 4\n3 4 1\n3 4 2\n3 4 3\n3 4 4\n4 1 1\n4 1 2\n4 1 3\n4 1 4\n4 2 1\n4 2 2\n4 2 3\n4 2 4\n4 3 1\n4 3 2\n4 3 3\n4 3 4\n4 4 1\n4 4 2\n4 4 3\n4 4 4\n\nSolution\n\"\"\"\nx = int(input())\ny = int(input())\nz = int(input())\nn = int(input())"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.1 + 2.2i\") == \"3.3 + 4.4i\"\nassert solution(\"1 + 2i\") == \"1 + 2i\"\nassert solution(\"1.1 + 2.2i\") == \"3.3 + 4.4i\"\nassert solution(\"1 + 2i\") == \"1 + 2i\"\nassert solution(\"0.0 + 2.1i\") == \"2.1 + 0.0i\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"3.00+4.00i\"\n\nassert solution(\"1+1i\") == \"0.00+2.00i\"\n\nassert solution(\"1+2i\") == \"3.00+4.00i\"\n\nassert solution(\"1+-1i\") == \"0.00-2.00i\"\n\nassert solution(\"0+0i\") == \"0.00+0.00i\""
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2') == '3 4'\nassert solution('5 6') == '11 2'"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4') == '7.00+7.00i'\nassert solution('1 5') == '2.24+11.11i'\nassert solution('0 6') == '0.00+12.00i'\nassert solution('0 0') == '0.00+0.00i'\n\n----Solution (Python 3)----"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"0.00+2.00i\"\nassert solution(\"0 1\") == \"0.00+1.00i\"\nassert solution(\"0 0\") == \"0.00+0.00i\"\nassert solution(\"0 0 1\") == \"0.00+0.00i\"\nassert solution(\"1 0 1\") == \"0.00+2.00i\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1') == '2.00+2.00i'\nassert solution('0 1') == '0.00-1.00i'\nassert solution('0 0') == '0.00+0.00i'\n\"\"\"\nimport re\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == '2.00+2.00i'\nassert solution('0 5') == '2.23+0.38i'\nassert solution('0 6') == '5.00+0.00i'\nassert solution('0 0') == '0.00+0.00i'\nassert solution('1 -1') == '0.00+4.00i'"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\") == \"4+5i\"\nassert solution(\"-1 1\") == \"-1-1i\"\nassert solution(\"3 0\") == \"3+0i\"\nassert solution(\"4 0\") == \"4+0i\"\nassert solution(\"0 1\") == \"0+1i\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 + 2i') == '3i'\nassert solution('2 + 1i') == '3i'\nassert solution('3 - 4i') == '1 - 5i'\nassert solution('1 + 1i') == '0i'\nassert solution('0 - 1i') == '-1i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"0.00+1.00i\"\nassert solution(\"0 1\") == \"0.00+1.00i\"\nassert solution(\"1.1 1.1\") == \"0.01+0.01i\"\nassert solution(\"0 1.1\") == \"0.00+1.10i\"\nassert solution(\"1. 1.1\") == \"0.01+0.01i\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abc') == 'abc'\nassert solution('xyz') == 'xaybzc'\n\"\"\"\n\nimport io\nimport sys"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\"\n\"\"\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\"\nassert solution(\"mnop\") == \"xaybzc\"\nassert solution(\"qrst\") == \"xaybzc\"\nassert solution(\"uvw\") == \"xaybzc\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('xyz') == 'xaybzc'\n\nprint(solution('xyz'))\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n\"\"\""
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xyz\") == \"xaybzc\""
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"aBc\") == \"aBc\"\nassert solution(\"a1Bc\") == \"a1Bc\"\nassert solution(\"a1aBc\") == \"a1aBc\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"xaybzc\") == \"xaybzc\"\n\"\"\"\n\nimport sys\n\nsys.stdin = open('input.txt')"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"01B0\"\n) == \"00\"\n\nassert solution(\n    \"10101\"\n) == \"11\"\n\nassert solution(\n    \"100101101010\"\n) == \"10\"\n\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('01B0') == '0'\nassert solution('1') == '1'\nassert solution('101') == '11'\nassert solution('101101') == '1111'\nassert solution
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('01B0') == '00'\nassert solution('10B10B0') == '101010'\n\"\"\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == \"00\"\n\"\"\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('01B') == '0'\nassert solution('010') == '0'\nassert solution('101') == '1'\nassert solution('010B') == '0'\nassert solution('101B') == '1'\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"01B0\") == \"00\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('01B010') == '001'"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1010\") == \"10\"\nassert solution(\"01B0\") == \"00\"\nassert solution(\"101B0\") == \"10\"\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"01B0\") == \"00\"\nassert solution(\"01B10\") == \"101\"\nassert solution(\"01B11\") == \"101\"\nassert solution(\"01B0B\") == \"00\"\nassert solution(\"11B0\") == \"10\"\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\"\n\nimport unittest\nimport sys\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\n\"\"\"\n\nN = int(stdin.readline().rstrip())\nA = [int(x) for x in stdin.readline().rstrip().split(' ')]\nA.append(0)\nA.append(0)\nA.sort()\ntot = 0\nc = 1\nfor i in range(N + 2):\n    if A[i] == A[i + 1]:\n        c += 1\n    else:\n        tot += c * A[i]\n        c = 1\nprint(tot)\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 1 5 4 3') == 4\nprint('Test pass.')\n\n-------------"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 1 5 4 3') == 4\n\"\"\""
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\n\"\"\"\n\nimport sys\nimport queue"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n5\\n3\\n2\\n1') == '3'\nassert solution('5\\n3\\n5\\n2\\n3\\n1') == '4'\nassert solution('3\\n2\\n1') == '0'\nassert solution('5\\n4\\n3\\n2\\n1') == '1'\n\"\"\""
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 1 5 4 3\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1 5 4 3') == '4'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == 4\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'A'\nassert solution('a') == 'B'\nassert solution('ca') == 'B'\nassert solution('aca') == 'C'\nassert solution('aac') == 'C'\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aca\\naccc\\nca\") == \"A\"\n\"\"\"\n\na, b, c = stdin.split(\"\\n\")\n\ncount = 0\nwhile len(a)!= 0 and len(b)!= 0 and len(c)!= 0:\n    if a[0] == \"A\" and count == 0:\n        print(\"A\")\n        count += 1\n    elif a[0] == \"B\" and count == 1:\n        print(\"B\")\n        count += 1\n    elif a[0] == \"C\" and count == 2:\n        print(\"C\")\n        count += 1\n    a = b\n    b = c\n    c = a"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aca\") == 'A'\nassert solution(\"accc\") == 'C'\nassert solution(\"ca\") == 'B'\n\"\"\"\n\nclass CardGame:\n    def __init__(self, s_a, s_b, s_c):\n        self.s_a = s_a\n        self.s_b = s_b\n        self.s_c = s_c\n\n\n    def play_game(self):\n        a = self.s_a\n        b = self.s_b\n        c = self.s_c\n\n        while len(a) > 0 and len(b) > 0 and len(c) > 0:\n            if a[0] < b[0] and a[0] < c[0]:\n                return 'A'\n            elif b[0] < a[0] and b[0] < c[0]:\n                return 'B'\n            else:\n                return 'C'\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aca\\ncacc\") == \"A\"\n\"\"\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aca') == 'A'\nassert solution('accc') == 'C'\nassert solution('ca') == 'B'\n\"\"\"\n\ns_a, s_b, s_c = map(lambda x: x.strip(), stdin.readlines())\n\nfor i in range(100):\n    s_b = s_b.replace(s_b[0], '')\n    s_c = s_c.replace(s_c[0], '')"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"B\"\n\n---Problem---\n\n746. Min Cost Climbing Stairs\nYou are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.\nYou can either start from the step with index 0, or the step with index 1.\nReturn the minimum cost to reach the top of the floor.\n\n----Example----\nInput: cost = [10,15,20]\nOutput: 15\nExplanation: Cheapest is: start on cost[1], pay that cost, and go to the top.\n\n-----Constraints-----\n - cost.length == 3\n - 1 \u2264 cost[i] \u2264 1000\n\n-----Input-----\nThe first line of input contains an integer t, the number of test cases.\nEach test case consists of a single line containing a string s.\n\n-----Output-----\nFor each test case, output the minimum cost to reach the top of the floor.\n\n----Sample Input----\n3\n10 15 20\n30 34 50\n4 12 12\n\n----Sample Output----\n20\n32\n12\n\n----Explanation----\nTest Case 0:\nThe cheapest is: start on cost[0], pay that cost, and go to the top.\n\nTest Case 1:\nThe cheapest is: start on cost[0], pay that cost, and go to the top.\n\nTest Case 2:\nThe cheapest is: start on cost[0], pay that cost, and go to the top.\n\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass\nfrom typing import List\n\nfrom collections import deque\n\n@dataclass\nclass MinCostStackNode:\n    cost: int\n    index: int\n\n@dataclass\nclass MinCostStack:\n    values: List[MinCostStackNode]\n\n@dataclass\nclass Solution:\n    min_cost: int\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aca\\naccc\\nca') == 'A'\nassert solution('ccc\\nca\\ncc') == 'C'\nassert solution('cca\\nccc\\nca\\ncc') == 'B'\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"B\"\n\"\"\"\n\nS_A = stdin.split(\"\\n\")[0]\nS_B = stdin.split(\"\\n\")[1]\nS_C = stdin.split(\"\\n\")[2]\n\nprint(S_A)\nprint(S_B)\nprint(S_C)"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"C\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"C\"\n\n\"\"\""
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5 7\\n') == 'YES'\nassert solution('7 5 7\\n') == 'NO'\nassert solution('5 5 5\\n') == 'NO'\n\n\"\"\"\nimport sys\n\nA, B, C = sys.stdin.readline().split()\nA, B, C = int(A), int(B), int(C)"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"5 5 7\"\n) == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"7 5 5\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5 7\\n') == 'YES'\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 5 7\\n') == 'YES'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"4 6 9\") == \"NO\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5 7\") == 'YES'\nassert solution(\"2 2 2\") == 'NO'\n\n\"\"\"\nimport sys\nimport itertools"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5 7') == 'YES'\nassert solution('3 2 3') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '5 5 7'\n) == 'YES'\n\n'''"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n') == '11'\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '3'\nassert solution('3\\n') == '4'\nassert solution('4\\n') == '7'\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n') == '11'\n\n\"\"\"\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        assert solution('5\\n') == '11'\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == '11'\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\nimport pytest\n\n@pytest.mark.parametrize(\n    (\"input_str\", \"expected\"),\n    [\n        (\"5\", \"11\"),\n    ],\n)\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n\") == \"11\"\nassert solution(\"4\\n\") == \"7\"\nassert solution(\"3\\n\") == \"4\"\nassert solution(\"2\\n\") == \"1\"\nassert solution(\"1\\n\") == \"2\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\""
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n\nfrom __future__ import annotations\n\nimport unittest\n\n\nclass TestCase(unittest.TestCase):\n    def test_solution(self) -> None:\n        self.assertEqual(solution(\"5\"), \"11\")\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == '11'\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 2') == '7'\n\"\"\"\n\n\"\"\"\n\u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0434 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u043e\u0439 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439 \u0440\u0435\u0431\u0435\u043d\u043e\u043a \u0437\u0430\u043f\u043e\u043c\u043d\u0438\u043b \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430, \u0442\u043e \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u043f\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c: \u043f\u043e \u0434\u0432\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u0442\u043e\u0438\u0442 \u043e\u0434\u043d\u0430 \u0438\u043b\u0438 \u043e\u0431\u0435 \u0442\u043e\u0447\u043a\u0438, \u043f\u043e \u0434\u0440\u0443\u0433\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043c\u0435\u043d\u044c\u0448\u0435, \u0438 \u043f\u043e \u0432\u044b\u0441\u043e\u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0441\u0442\u043e\u0440\u043e\u043d \u0431\u043e\u043b\u044c\u0448\u0435.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u0442\u043e\u0440\u043e\u043d\u044b 3, 4, 5, \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u0432\u044b\u0441\u043e\u0442\u044b 6 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432.\n\u0422\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u043d\u0435\u0441\u0443\u0449\u0438\u0439 \u043e\u0431\u0449\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0441 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:\ns = \u221ap(p \u2212 a)(p \u2212 b)(p \u2212 c)\n\u0433\u0434\u0435 p = (a + b + c) / 2\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u0442\u043e\u0440\u043e\u043d\u044b 3, 4, 5, \u0432\u044b\u0441\u043e\u0442\u0430 6 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a, \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0440\u0430\u0432\u043d\u0430:\n1\n\u221a37\u00d718\u00d729\n= 678.5\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u043e\u0440\u043e\u043d \u0438 \u0432\u044b\u0441\u043e\u0442\u044b \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0447\u0438\u0441\u0435\u043b:\n1\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n4\\n2\") == \"7\"\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 2') == '7'\nassert solution('3 5 2') == '10'\nassert solution('10 7 2') == '35'\n\"\"\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4\\n2\") == \"7\"\nassert solution(\"9\\n10\\n20\") == \"36\"\nassert solution(\"100\\n99\\n98\") == \"988\"\nassert solution(\"50\\n25\\n20\") == \"1000\"\n\nprint(\"All test cases passed.\")"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n4\n2''') == '7'\n\nassert solution('''3\n4\n2''') == '7'\n\nassert solution('''3\n4\n2''') == '7'\n\nassert solution('''2\n2\n3''') == '2'\n\nassert solution('''2\n2\n3''') == '2'"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 2\") == 7\n\"\"\"\na, b, h = list(map(int, input().split()))\nprint(a+b+h)\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 2\") == '7'\n\"\"\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 2\") == \"7\"\n\"\"\"\n\na, b, h = [int(i) for i in stdin.split(' ')]\nprint((a+b)*h/2)\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 2\") == \"7\""
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n4\\n2\\n') == '7'\n\"\"\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\"\n\nN = int(input())\n\nA = list(map(int, input().split()))\n\ns = 0\n\nfor i in range(1, N):\n    for j in range(i+1, N):\n        s += A[i] * A[j]\n        s %= (10 ** 9 + 7)\n\nprint(s)\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3\\n') == '11'\n\"\"\"\n\nimport sys\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2\\n3\\n4') == '20\\n\nassert solution('2\\n1\\n3') == '6\\n\nassert solution('2\\n3\\n1') == '6\\n\n\n\"\"\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3, '1 2 3') == 11\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline().strip())\na_list = list(map(int, sys.stdin.readline().strip().split(\" \")))\n\nprint(sum(a_list[i] * a_list[j] for i in range(n) for j in range(n) if i < j))\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"11\"\n\"\"\"\nfrom sys import stdin\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(answer)\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import combinations"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"1 2 1\") == \"NO\"\nassert solution(\"9 9 9\") == \"YES\"\nassert solution(\"4 3 2\") == \"YES\"\nassert solution(\"4 3 4\") == \"YES\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 2') == 'YES'\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2\") == 'YES'\nassert solution(\"1 2 3\") == 'NO'\n\n-----\n### Question 2\nIf a given string contains n letters in ascending order of their ASCII values, your task is to complete the given function to find out whether the string is a valid ASCII string or not.\n\nAscii value of A = 65, B = 66 and so on...\n\nSo, in a string of length m, the first character should be in the range of A to Z (both inclusive) and the last character should be in the range of a to z (both inclusive).\n\nIf the length of the string is less than 1 or greater than 26*m, your function should return false. If the string is in the range of A to Z, the string is valid.\n\nExample: If the input string is \"TIOAT\", then input string is valid.\n\nInput Format:\nThe first line of the input contains the string s.\n\nOutput Format:\nThe only line of the output should print YES or NO.\n\nExample:\nInput:\nTIOAT\n\nOutput:\nYES"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nassert solution(\"2 2 1\") == \"NO\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 4\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'NO'\nassert solution('1 1 1') == 'NO'\nassert solution('3 3 3') == 'YES'\nassert solution('4 3 2') == 'YES'\nassert solution('4 3 2') == 'YES'\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(123) == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 11\\n1') == '30'\n\"\"\"\nimport sys\n\nA, B, C = [int(x) for x in sys.stdin.readline().split()]\nK = int(sys.stdin.readline())\n\nsum = A\nfor i in range(K):\n    if sum == A:\n        sum = B\n    else:\n        sum = C\n    if sum == 0:\n        break\n    sum = sum * 2\n\nprint(sum)\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 11\") == \"30\"\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 3 11''') == '30'\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 11\\n1') == '30'\nassert solution('1\\n1') == '1'\nassert solution('5 3 11\\n4') == '30'\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(solution) == 30\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 11\") == \"30\"\n\"\"\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 11') == '30'\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\nprint(\"Hooray!\")"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abaccaba') == 'Yes'\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('aaabbbbc') == 'No'"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"aabbcc\") == \"No\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('aabbbb') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"abccba\") == \"No\"\nprint('Success')\n\n-----\n3\n1 2 3\n\n4\n1 1 3 1\n\n-----\n3\n1 1 1\n\n4\n1 2 3\n\n-----\n2\n3 1\n\n3\n1 1\n\n-----\n4\n1 2 1\n\n3\n1 1\n\n-----\n7\n5 6 3 2 4 6\n\n11\n1 2 1 1 1 2 3 1\n\n-----\n10\n5 3 2 1 4 6 1 1 1\n\n8\n1 1 1 1 1 1 1 1\n\n-----\n10\n2 2 2 1 1 2 3 1 1\n\n5\n1 2 2 1 1\n\n-----\n12\n1 2 2 3 4 5 6 7 8 9 10\n\n-----\n16\n1 2 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1\n\n-----\n4\n1 1 1 1\n\n4\n1 1 1 1\n\n-----\n8\n1 1 1 1 1 1 1 1\n\n8\n1 1 1 1 1 1 1 1\n\n-----\n6\n1 1 2 2 3\n\n2\n1 2\n\n-----\n10\n1 1 1 2 2 1 1 1 1\n\n10\n1 2 2 2 2 1 1 1 1 1\n\n-----\n7\n1 2 2 2 2 1 1 1\n\n2\n1 2\n\n-----\n9\n1 1 1 2 2 3 2\n\n0\n1 2 3\n\n-----\n12\n1 1 1 2 2 3 2 2 2\n\n1\n1 1 1 1 1 1 1 1\n\n-----\n15\n1 1 1 1 1 2 2 2 2 1\n\n4\n1 2 1 2\n\n5\n1 1 2 1 2\n\n6\n1 1 1 1 1 1\n\n7\n1 1 1 1 1\n\n8\n1 2 3 2 2 1 1 1 1\n\n-----\n6\n1 2 2 1 1 2\n\n1\n1 1 1 1 1\n\n-----\n4\n1 1 2 3\n\n4\n1 1 2 3\n\n-----\n8\n1 2 2 1 1\n\n1\n1 1 1 1\n\n-----\n6\n1 1 1 2 3\n\n6\n1 2 1 1 2\n\n-----\n2\n1 2\n\n2\n1 2\n\n-----\n6\n1 2 1 1 1 1\n\n7\n1 1 1 1 1\n\n-----\n4\n1 2 1 2\n\n4\n1 1 1 1\n\n-----\n3\n1 1 1\n\n3\n1 1 1\n\n-----\n9\n1 1 1 1 1 1 1 1 1\n\n1\n1 1 1 1 1 1 1 1\n\n-----\n5\n1 1 1 1 1\n\n5\n1 1 1 1 1\n\n-----\n12\n1 1 1 1 1 1 1 1 1 1\n\n1\n1 1 1 1 1 1 1 1\n\n-----\n5\n1 2 2 1 1\n\n1\n1 1 1 1\n\n-----\n4\n1 1 2 3\n\n4\n1 2 2 2\n\n-----\n5\n1 1 1 1\n\n4\n1 1 1 1\n\n-----\n6\n1 1 1 2 2\n\n3\n1 1 1 2\n\n-----\n8\n1 2 2 1 1 1 1 1 1 1 1 1\n\n6\n1 1 1 1 1 1 1 1 1\n\n-----\n3\n1 2 2\n\n1\n1 1 1\n\n-----\n5\n1 1 1 1 1\n\n3\n1 1 1 1\n\n-----\n10\n1 1 1 1 1 1 1 1 1 1 1 1 1\n\n10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n-----\n13\n1 2 2 3 2 1 1 1 1 1 1 1 1 1 1 1\n\n9\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n-----\n6\n1 1 1 1 1 2 2\n\n5\n1 1 1 1 1 1 1\n\n-----\n9\n1 1 1 1 2 2 1 1 1 2 1 1\n\n6\n1 1 1 1 1 1 1 1 1 1 1 1\n\n-----\n10\n1 1 1 1 1 1 1 1 2 2 1 1\n\n1\n1 1 1 1 1 1 1 1 1 1 1 1\n\n-----\n10\n1 2 2 1 1 1 1 1 1 1 1 1\n\n2\n1 1 1 1 1 1 1 1 1 1 1 1\n\n-----\n10\n1 2 1 1 1 2 2 1 1 1 1 2\n\n1\n1 1 1 1 1 1 1 1 1 1 1 1\n\n-----\n7\n1 1 1 1 1 1 1 1 1 1 1 1\n\n4\n1 1 1 1 1\n\n0\n1 1 1 1 1\n\n-----\n5\n1 2 1 1 1\n\n1\n1 1 1 1\n\n-----\n11\n1 2 2 2 1 2 2 1 1 1 2 1\n\n8\n1 2 1 1 1 2 1 2 2 1 1 1\n\n-----\n5\n1 1 2 1 1 1\n\n5\n1 1 1 1 1\n\n-----\n4\n1 2 1 2\n\n2\n1 2 1 1\n\n3\n1 1 1 1\n\n-----\n4\n1 1 2 1\n\n3\n1 1 1 1\n\n-----\n8\n1 1 1 2 2 2 1 1 1 1 1 1\n\n7\n1 1 1 1 1 1 1 1 1 1 1 1\n\n-----\n4\n1 1 1 1\n\n0\n1 1 1 1\n\n-----\n11\n1 2 2 2 1 2 2 1 1 1 2 1\n\n9\n1 1 1 1 1 1 1 1 1 1 1 1\n\n-----\n8\n1 2 1 1 1 2 1 1 1 1 1 1\n\n3\n1 2 1 1 1\n\n1\n1 1 1 1\n\n-----\n5\n1 1 1 1 1\n\n1\n1 1 1 1\n\n-----\n3\n1 1 1 1\n\n3\n1 1 1 1\n\n-----\n1\n1 1 1\n\n0\n1 1 1 1\n\n-----\n6\n1 1 1 1 1 1\n\n2\n1 1 1 1 1\n\n-----\n8\n1 1 1 2 2 2 1 1 1 1 1 1\n\n7\n1 1 1 1 1 1 1 1 1 1 1 1\n\n-----\n4\n1 1 2 2\n\n2\n1 1 2 1\n\n1\n1 1 1 1\n\n-----\n7\n1 2 1 1 2 1 1 1 1 2 1\n\n0\n1 1 1 1 1 1 1 1 1 1 1\n\n-----\n2\n1 2 1\n\n0\n1 1 1\n\n-----\n3\n1 1 1\n\n2\n1 1 1\n\n-----\n8\n1 1 1 1 1 1 1 1 1 1 1 1\n\n3\n1 1 1 1 1 1 1 1 1 1 1 1\n\n-----\n9\n1 1 1 1 1 1 1 1 1 1 1 1\n\n2\n1 1 1 1 1 1 1 1 1 1 1 1\n\n-----\n7\n1 1 1 1 1 1 1 1 1 1 1 1\n\n3\n1 1 1 1 1 1 1 1 1 1 1 1\n\n-----\n3\n1 1 1\n\n2\n1 1 1\n\n-----\n4\n1 1 1 1\n\n0\n1 1 1 1\n\n-----\n3\n1 1 1 1\n\n0\n1 1 1 1\n\n-----\n3\n1 1 1 1\n\n0\n1 1 1 1\n\n-----\n3\n1 1 1 1\n\n1\n1 1 1 1\n\n-----\n7\n1 1 1 1 1 1 1 1 1 1 1 1\n\n4\n1 1 1 1 1\n\n0\n1 1 1 1 1\n\n-----\n3\n1 1 1 1\n\n3\n1 1 1 1\n\n-----\n3\n1 1 1 1\n\n0\n1 1 1 1\n\n-----\n8\n1 1 1 1 1 1 1 1 1 1 1 1\n\n0\n1 1 1 1 1 1 1 1 1 1 1 1\n\n-----\n9\n1 1 1 1 1 1 1 1 1 1 1 1\n\n0\n1 1 1 1 1 1 1 1 1 1 1 1\n\n-----\n5\n1 1 1 1 1\n\n0\n1 1 1 1 1"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"abcdef\") == \"No\"\nassert solution(\"z\") == \"No\"\n\"\"\"\n\n\"\"\"\nGiven an array of N strings, you need to find if there is a way to choose a non-empty subarray of strings from the array such that all strings in the subarray are of the same length and the subarray has all strings of the same letter case.\n\nInput Format:\nThe first and the only argument of input contains an integer array A of strings, where A[i] is the ith string of the array.\n\nOutput Format:\nReturn an array of size 2 where the first element is a string of True if a subarray exists and it has all strings of the same letter case and False if no subarray exists.\n\nExample:\n\nInput 1:\n    A = [\"ab\", \"a\", \"b\"]\n\nOutput 1:\n    [True, False]\n\nExplanation 1:\n    It's possible to extract subarrays \"ab\" and \"a\" from A[0] and A[1].\n\nInput 2:\n    A = [\"ab\", \"a\", \"bb\", \"bbb\"]\n\nOutput 2:\n    [True, False]\n\nExplanation 2:\n    It's possible to extract subarrays \"ab\", \"bb\" and \"bbb\" from A[0], A[1], A[2] respectively.\n\nInput 3:\n    A = [\"aa\", \"bb\", \"aabb\", \"cc\"]\n\nOutput 3:\n    [True, False]\n\nExplanation 3:\n    It's possible to extract subarrays \"aa\", \"bb\" and \"aabb\" from A[0], A[1], A[2], A[3] respectively.\n\"\"\""
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abaccaba') == 'Yes'"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"abccbc\") == \"No\"\nassert solution(\"a\") == \"Yes\"\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aabbcc') == 'Yes'\nassert solution('abccba') == 'No'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 1\\n2 2\\n3 3\\n\") == 3\n\"\"\"\nimport sys\nfrom typing import List\n\nclass Solution:\n    def solve(self, stdin: List[str]):\n        n, k = list(map(int, stdin[0].split(\" \")))\n        array = list(map(int, stdin[1].split(\" \")))\n        k = k-1\n        array.sort()\n        return array[k]"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 1\\n2 2\\n3 3\\n\") == \"3\"\n\"\"\"\n\nn, k = list(map(int, input().split()))\narr = list(map(int, input().split()))\n\narr.sort()\nprint(arr[k-1])\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 1\\n2 2\\n3 3\") == '3'\nassert solution(\"5 3\\n1 2\\n2 3\\n3 4\\n4 5\") == '3'\n\"\"\""
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 1\\n') == '2'\nassert solution('1 1\\n') == '1'\nassert solution('1 1\\n2 2\\n') == '1'\n\n\"\"\"\n\nfrom math import inf\nfrom typing import List\n\n\nclass Node:\n    def __init__(self, value=None):\n        self.value = value\n        self.left = None\n        self.right = None\n\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, value):\n        if self.root is None:\n            self.root = Node(value)\n        else:\n            self._insert(value, self.root)\n\n    def _insert(self, value, cur_node):\n        if value < cur_node.value:\n            if cur_node.left is None:\n                cur_node.left = Node(value)\n            else:\n                self._insert(value, cur_node.left)\n        elif value > cur_node.value:\n            if cur_node.right is None:\n                cur_node.right = Node(value)\n            else:\n                self._insert(value, cur_node.right)\n        else:\n            print('Value is already in the tree')\n\n    def in_order_traversal(self):\n        if self.root is None:\n            return []\n        return self._in_order_traversal(self.root, [])\n\n    def _in_order_traversal(self, cur_node, array):\n        if cur_node is None:\n            return array\n        self._in_order_traversal(cur_node.left, array)\n        array.append(cur_node.value)\n        self._in_order_traversal(cur_node.right, array)\n        return array\n\n    def pre_order_traversal(self):\n        if self.root is None:\n            return []\n        return self._pre_order_traversal(self.root, [])\n\n    def _pre_order_traversal(self, cur_node, array):\n        if cur_node is None:\n            return array\n        array.append(cur_node.value)\n        self._pre_order_traversal(cur_node.left, array)\n        self._pre_order_traversal(cur_node.right, array)\n        return array\n\n    def post_order_traversal(self):\n        if self.root is None:\n            return []\n        return self._post_order_traversal(self.root, [])\n\n    def _post_order_traversal(self, cur_node, array):\n        if cur_node is None:\n            return array\n        self._post_order_traversal(cur_node.left, array)\n        self._post_order_traversal(cur_node.right, array)\n        array.append(cur_node.value)\n        return array\n\n    def find_node(self, value):\n        if self.root is None:\n            return None\n        return self._find_node(value, self.root)\n\n    def _find_node(self, value, cur_node):\n        if value < cur_node.value and cur_node.left is not None:\n            return self._find_node(value, cur_node.left)\n        if value > cur_node.value and cur_node.right is not None:\n            return self._find_node(value, cur_node.right)\n        if value == cur_node.value:\n            return cur_node\n        return None\n\n    def remove_node(self, value):\n        if self.root is None:\n            return None\n        self._remove_node(self.root, value)\n\n    def _remove_node(self, cur_node, value):\n        if cur_node is None:\n            return None\n        if value < cur_node.value and cur_node.left is not None:\n            cur_node.left = self._remove_node(cur_node.left, value)\n        elif value > cur_node.value and cur_node.right is not None:\n            cur_node.right = self._remove_node(cur_node.right, value)\n        elif value == cur_node.value:\n            if cur_node.left is None and cur_node.right is None:\n                return None\n            elif cur_node.left is None:\n                return cur_node.right\n            elif cur_node.right is None:\n                return cur_node.left\n            else:\n                current = cur_node.right\n                while current.left is not None:\n                    current = current.left\n                cur_node.value = current.value\n                cur_node.right = self._remove_node(cur_node.right, current.value)\n        return cur_node\n\n    def find_kth_smallest_element(self, k):\n        return self._find_kth_smallest_element(self.root, k)\n\n    def _find_kth_smallest_element(self, cur_node, k):\n        if cur_node is None:\n            return -inf\n        left_count = self._get_node_count(cur_node.left)\n        if left_count + 1 == k:\n            return cur_node.value\n        elif left_count + 1 > k:\n            return self._find_kth_smallest_element(cur_node.left, k)\n        else:\n            return self._find_kth_smallest_element(cur_node.right, k - left_count - 1)\n\n    def _get_node_count(self, node):\n        if node is None:\n            return 0\n        return 1 + self._get_node_count(node.left) + self._get_node_count(node.right)\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == \"3\"\nassert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == \"3\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4\\n1 1\\n2 2\\n3 3') == '3'\n\"\"\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4\\n1 1\\n2 2\\n3 3\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 4\n1 1\n2 2\n3 3''') == 3\n\n-----\n3 4\n1 1\n2 2\n3 3\n\n-----\n3 5\n1 2\n2 2\n3 3\n\n-----\n1 1\n2 1\n3 1\n\n-----\n''') == 3"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n2 2\\n3 3') == '3', 'wrong result'"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 2''') == '2'\nassert solution('''2 1''') == '1'\nassert solution('''1 1''') == '1'\nassert solution('''2 3''') == '0'\nassert solution('''2 4''') == '0'\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1, 1) == 2\n\n-------\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"2\"\n\"\"\"\n\nfrom functools import lru_cache\nfrom operator import mul\n\nfrom typing import Iterable, NamedTuple, Tuple\n\nimport sys\n\nimport numpy as np\n\n\nclass Args(NamedTuple):\n    N: int\n    K: int\n\n\nclass Result(NamedTuple):\n    count: int\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n0 1\") == \"2\"\n\n-----\n1. Divide and Conquer\n2. Dynamic Programming\n3. Greedy\n\n-----\nThis is a classic dynamic programming problem.\nWe first attempt to find a solution that tries to fill in every position.\nWe can probably reduce the problem to a smaller version by fixing one color.\nWe use Dynamic Programming to solve this problem.\nIn the worst case we have N colors to choose from, and K is small enough, so that we can find the number of the ways to paint them each.\nThe length of the solution is N*K.\nIf we have a solution that has N positions,\nwe can choose to paint the balls in position i in color 0.\nIn this case we have to fill in the rest of the positions with colors 1 to K-1.\nWe can combine the two solutions and obtain the number of the ways to paint the balls.\nWe need to compare K-1 colors, and the number of the solutions that have K-1 colors.\nWe can compute this from the solutions with K colors.\n\nclass Solution {\npublic:\n    int solution(vector<int>& balls, int colors) {\n        // How many colors are there?\n        int k = balls.size();\n        // Dynamic programming data\n        vector<vector<int>> count(k, vector<int>(colors+1, 0));\n        // Base case\n        count[0][0] = 1;\n        for (int i = 1; i <= k; i++)\n            for (int j = 1; j <= colors; j++)\n                count[i][j] = count[i-1][j-1] + count[i-1][j];\n        // Compute\n        int ans = 0;\n        for (int i = 1; i <= k; i++) {\n            for (int j = 0; j <= colors; j++)\n                ans += count[k-i][j];\n        }\n        return ans;\n    }\n};\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"2\"\n\"\"\"\n\n\"\"\"\nOther solution"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == 2\nassert solution('2 3') == 3\nassert solution('2 4') == 5\nassert solution('2 5') == 8\nassert solution('2 6') == 14\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == 2\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n0 1') == '2'\nassert solution('2 2\\n1 0') == '2'\n\"\"\"\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 10 16') == '9'\n\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\n\"\"\"\n\nimport sys\nimport math\n\nK, N = map(int, sys.stdin.readline().split())\nhouses = list(map(int, sys.stdin.readline().split()))\ndistance = 0\n\nfor i in range(1, len(houses)):\n    houses[i] = houses[i] - houses[i - 1]"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10 15\") == \"10\"\n\"\"\"\n\n\"\"\"\nChecks if a string is a palindrome\nInput: String\nOutput: Boolean\n\"\"\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\n\"\"\"\nimport sys\nimport os\nimport time"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n5 10 15\") == \"10\""
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"20 3\\n5 10 15\") == \"10\"\n\"\"\"\n\nK, N = [int(i) for i in stdin.readline().split()]\nA = [int(i) for i in stdin.readline().split()]\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"3\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"5 1\") == \"5\"\nassert solution(\"5 2\") == \"8\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3\\n1 2\\n2 3\\n3 4') == '8'\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\n\"\"\""
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 3\\n5 10 15\") == \"10\"\n\"\"\"\n\nimport sys\n\nK, N = map(int, sys.stdin.readline().split())\narr = list(map(int, sys.stdin.readline().split()))\n\narr.sort()\n\ndist = 0\nfor i in range(0, N):\n    dist += arr[i] * (N - i)\n\nprint(dist % K)\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 2 7') == '15'\nprint('Test succeeded')\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 2 7\") == '15'\n\nimport sys\n\nA, B, C, D = map(int, sys.stdin.readline().strip().split())"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n\"\"\"\n\nimport sys\nimport math\nimport re\n\nregex = r\"([0-9]+)\\s([0-9]+)\\s([0-9]+)\\s([0-9]+)$\"\n\nfor line in sys.stdin:\n    if re.match(regex, line):\n        a, b, c, d = map(int, re.findall(regex, line)[0])\n    else:\n        print(\"Error!\")\n        exit(0)\n    if a + b > c + d:\n        print(a * c + b * d)\n    elif a + b < c + d:\n        print(a * b + c * d)\n    elif a == c and b == d:\n        print(a * b)\n    elif a == c or b == d:\n        print(a * b)\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"1 1 2 2\") == \"2\"\nassert solution(\"2 3 4 5\") == \"12\"\nassert solution(\"3 5 6 7\") == \"30\"\nassert solution(\"1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5 2 7') == '15'\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 7 3 4') == '19'\n\"\"\""
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5 2 7') == '15'\n\"\"\""
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 5 2 7''') == '15'\nassert solution('''1 1 1 1''') == '1'\nassert solution('''0 0 0 0''') == '0'\nassert solution('''0 0 0 0\n0 0 0 0''') == '0'\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 2 7') == '15'\n\"\"\"\n\nfrom typing import NamedTuple\n\n\nclass Rectangle(NamedTuple):\n    a: int\n    b: int\n    c: int\n    d: int\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\nassert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\nAC\\nWA\\nAC\\nWA\\nAC\\nWA\\nTLE\\nAC\\nWA\\nAC\\nWA\\nAC\\nWA\\nTLE\\nAC\\nWA\\nAC\\nWA\\nAC\\nWA\\nTLE\\nAC\\nWA\\nAC\\nWA\\nAC\\nWA\\nTLE\\nAC\\nWA\\nAC\\nWA\\nAC\\nWA\\nTLE\\nAC\\nWA\\nAC\\nWA\\nAC\\nWA\\nTLE\\nAC\\nWA\\nAC\\nWA\\nAC\\nWA\\nTLE\\nAC\\nWA\\nAC\\nWA\\nAC\\nWA\\nTLE\\nAC\\nWA\\nAC\\nWA\\nAC\\nWA\\nTLE') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\nassert solution('AC\\nWA\\nTLE\\nAC\\nAC\\nWA\\nTLE') == 'AC x 2\\nWA x 1\\nTLE x 1\\nRE x 0'\nassert solution('AC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\nAC\\nAC\\nWA\\"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AC\") == \"AC x 3\"\nassert solution(\"WA\") == \"WA x 1\"\nassert solution(\"TLE\") == \"TLE x 2\"\nassert solution(\"RE\") == \"RE x 0\"\n\"\"\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AC\\nTLE\") == \"AC x 2\\nTLE x 1\"\n\"\"\"\n\n\"\"\"\nHINT 1\nYou can use the count method to count the number of times that a substring appears in the given string.\n\nHINT 2\nUse a for loop to loop through each test case.\n\nHINT 3\nYou can use the count method to count the number of times that a substring appears in the given string.\n\"\"\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\nassert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\nassert solution('AC\\nWA\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\nassert solution('AC\\nWA\\nAC\\nAC\\nWA\\nTLE\\n') == 'AC x 2\\nWA x 2\\nTLE x 1\\nRE x 0'\nassert solution('AC\\nWA\\nAC\\nAC\\nWA\\nAC\\n') == 'AC x 2\\nWA x 3\\nTLE x 0\\nRE x 0'\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\n\"\"\"\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('21') == '27'\n\"\"\"\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"21\") == \"27\"\nprint(solution(\"21\"))\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('21') == '27'\nassert solution('13') == '19'\nassert solution('0') == '0'\nassert solution('23') == '1'\nassert solution('12') == '12'\n\"\"\""
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('21') == '27'\n\n\"\"\""
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\nassert solution('21') == '27'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\nimport sys\nimport calendar"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('23') == '21'\n\"\"\""
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('21') == '27'\n\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 3') == '9'\nassert solution('1 2') == '3'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 3') == '9'\nassert solution('4 4') == 'error'\nassert solution('1 9') == 'error'\n\nprint(\"All tests passed.\")\n\n----\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3\") == \"9\"\n\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 3') == '9'\n\n\"\"\"\n\nfrom ast import literal_eval\n\ninput_data = stdin.readline()\nA, B = literal_eval(input_data)\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\">10\") == \"error\"\nassert solution(\"5 6\") == \"11\"\nassert solution(\"1 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"8\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"3 2\") == \"5\"\nassert solution(\"2 2\") == \"error\"\nassert solution(\"10 30\") == \"error\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 3') == '9'\nassert solution('1 2') == 'error'\nassert solution('3 5') == '8'\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 3\\n') == '9'\n\"\"\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 3') == '9'\nassert solution('9 3') == 'error'\nassert solution('1 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3\") == \"9\"\nassert solution(\"10 3\") == \"error\"\n\"\"\"\n\n\"\"\"\nComplexity Analysis\n\nTime complexity: O(1)\n\nSpace complexity: O(1)\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\nassert solution(\"5\\n3 2 8 1 7\") == \"3\"\n\n---------------------------------------------------\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 3 7 9') == '7'\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    4\n    2 3 7 9\n    \"\"\") == \"7\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 3 7 9') == '7'\nassert solution('3\\n1 3 1') == '2'\n\n\"\"\"\nfrom math import sqrt\nfrom typing import List"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 7 9\\n') == '7'\n\"\"\"\n\n\"\"\"\nimport math\nimport sys\nimport unittest"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 3 7 9') == '7'\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 3 7 9') == '7'\nassert solution('1\\n3') == '3'\nassert solution('3\\n3 4 5') == '6'\n\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3 7 9') == '7'\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2') == 'No'\nassert solution('1 3') == 'Yes'\nassert solution('1 3\\n4 5') == 'No'\nassert solution('1 1\\n1 1') == 'Yes'\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"No\"\nassert solution(\"1 3\") == \"Yes\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3\") == \"Yes\"\nassert solution(\"2 4\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3\") == \"Yes\"\n\"\"\"\n\na = [1, 2, 3]\nb = [4, 5, 6]\nc = [7, 8, 9]\nd = [10, 11, 12]\n\nx, y = list(map(int, stdin.split()))"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3\\n') == 'Yes'\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(1 3) == 'Yes'\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3\\n3 1\\n') == 'Yes'\n\"\"\""
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3\\n') == 'Yes'\n\nassert solution('2 5\\n') == 'No'\n\nassert solution('1 9\\n') == 'No'\n\nassert solution('1 6\\n') == 'Yes'\n\nassert solution('6 12\\n') == 'Yes'"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''1 3''') == 'Yes'\nassert solution('''2 3''') == 'No'\nassert solution('''1 2''') == 'No'\n'''\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\n') == 'Even'\n\n------Test Input----\n2 9\n\n------Expected Output----\nOdd\n\n------Test Input----\n5 2\n\n------Expected Output----\nEven\n\"\"\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4\\n') == 'Even'\nassert solution('1 2\\n') == 'Odd'"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"3 4\"\n) == \"Even\"\n\"\"\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4') == 'Even'\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n\") == \"Even\"\nassert solution(\"3 5\\n\") == \"Odd\"\n\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4') == 'Even'\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\"\"\"\n\nstdin = input().split()\n\na = int(stdin[0])\nb = int(stdin[1])"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n\") == \"Even\"\nassert solution(\"1 1\\n\") == \"Even\"\nassert solution(\"1 2\\n\") == \"Odd\"\n\"\"\"\n\nfrom typing import Any, List\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 6\\n') == '2'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 2\\n\") == 2\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n\nN, M = map(int, input().split())\n\nS_pieces = N\nC_pieces = M\n\ngroups = 0\n\nwhile S_pieces > 0 and C_pieces > 0:\n    if S_pieces >= C_pieces + 1:\n        groups += 1\n        S_pieces -= 2\n        C_pieces -= 1\n    else:\n        groups += 1\n        S_pieces -= 1\n        C_pieces -= 2\n\nprint(groups)\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 6\\n') == 2\n'''"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 6\\n') == '2'\n\"\"\"\nimport itertools"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 6\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8\\n4 8\\n1 4\\n1 4\\n2 3\\n2 3\") == \"4\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"1\"\n\"\"\"\n\nN, M = map(int, input().split())"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n1 6\n''') == 2\n\n'''\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 6\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 1 4\\n2\\n1 1\\n2 3') == '6\\n9'\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\n\"\"\""
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\":\\n1\\n2\\n3\\n4\\n5\\n\") == \"1, 2, 6, 3, 9, 7\"\nassert solution(\":\\n2\\n1\\n1\\n2\\n3\\n\") == \"1, 4, 2, 3, 7, 5\"\nassert solution(\":\\n1\\n2\\n3\\n1\\n2\\n3\\n\") == \"3, 3, 3, 1, 4, 3\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 1 4\\n2\\n1 1\\n2 3') == '6\\n9'\nprint('Test passed')\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\nassert solution(\"4\\n1 2 3 4\\n2\\n1 1\") == \"4\\n3\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n2 1 4\n2\n1 1\n2 3''') == '6\\n9'\n\n\"\"\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n\nfrom typing import Dict\n\nN: int = int(input())\n\nt_arr: [int] = [int(t) for t in input().split()]\n\nM: int = int(input())\n\nx_arr: [int] = [int(x) for x in input().split()]\n\nt_arr: Dict[int, int] = {t_arr[i]: i for i in range(0, N)}\n\nres_arr: [int] = [0] * M\n\nfor i in range(0, M):\n    res_arr[i] = sum([(N - i) * t_arr[x_arr[i]] for i in range(0, N)])\n\nfor r in res_arr:\n    print(r)\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\"\n\nimport sys\nfrom itertools import permutations\n\nN, K = [int(i) for i in sys.stdin.readline().split()]\nD = [int(i) for i in sys.stdin.readline().split()]"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n\n\"\"\"\n\nimport sys\nfrom collections import Counter\nimport numpy as np\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == '2000'"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 7') == '20'\nassert solution('1000 8') == '2000'\n\"\"\"\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\nlst = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\nassert solution('1000 8\\n1 3 4 5 6 7 8 9\\n0 2 0 2 0 2 0 2 0 2') == '2000'\n\"\"\"\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1000 8\n1 3 4 5 6 7 8 9''') == '2000'\nassert solution('''1000 9\n0 3 5 7 8 9''') == '3000'\nassert solution('''1000 1\n0 3 5 7 8 9''') == '4000'\nassert solution('''1000 2\n0 1 2 3 4 5 6 7 8 9''') == '5000'\nassert solution('''1000 0\n0 1 2 3 4 5 6 7 8 9''') == '1000'"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\"\n\nN, K = map(int, input().split())\nD = list(map(int, input().split()))\nans = N\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1000 8\n1 3 4 5 6 7 8 9''') == '2000'\n\n\"\"\"\n\nimport sys\n\nN, K = list(map(int, sys.stdin.readline().split()))\nD = list(map(int, sys.stdin.readline().split()))\n\nD.sort()\n\nminimum = 10 ** (K - 1)\nfor digit in range(K):\n    if D[digit] == 0 or D[digit] == 2:\n        minimum += 2 ** digit * N - N * digit\n        break\n    minimum += 2 ** digit * N\n    \n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\\n\") == \"2000\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n4 3\n1 2 3 4\n1 3\n2 3\n2 4\n\"\"\"\n) == '2'\n\nassert solution(\n\"\"\"\n2 2\n1 1\n1 1\n\"\"\"\n) == '0'\n\nassert solution(\n\"\"\"\n3 3\n1 2 3\n1 2\n1 3\n\"\"\"\n) == '1'\n\nassert solution(\n\"\"\"\n4 4\n1 2 3 4\n1 3\n2 3\n2 4\n1 4\n\"\"\"\n) == '1'\n\nassert solution(\n\"\"\"\n5 6\n1 2 3 4 5\n1 3\n2 3\n2 4\n2 5\n3 4\n3 5\n\"\"\"\n) == '3'"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 3\n1 2 3 4\n1 3\n2 3\n2 4\n''') == '2'\n\"\"\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('2\\n1 1\\n1 2\\n2 2') == '1'\nassert solution('3\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3') == '2'\nassert solution('4\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n4 4') == '2'\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nH = list(map(int, sys.stdin.readline().split()))\n\nA, B = map(int, sys.stdin.readline().split())\n\nG = [[] for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, sys.stdin.readline().split())\n    a -= 1\n    b -= 1\n    G[a].append(b)\n    G[b].append(a)\n\n\nclass GoodObserver:\n    def __init__(self, e, obs, road):\n        self.e = e\n        self.obs = set(obs)\n        self.road = road\n\n    def add_observer(self, e, obs, road):\n        self.e = e\n        self.obs = set(obs)\n        self.road = road\n\n    def __repr__(self):\n        return f'{self.e} {self.obs} {self.road}'\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == 2\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\nh = list(map(int, stdin.readline().split()))\n\na = set()\nb = set()\nfor i in range(m):\n    x, y = map(int, stdin.readline().split())\n    a.add(x)\n    b.add(y)\n\nprint(len(a.symmetric_difference(b)))\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == '2'\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\nE = [int(e) for e in sys.stdin.readline().split()]\nF = [[int(e) for e in sys.stdin.readline().split()] for _ in range(M)]\ngood_observatories = set()\n\nfor i in range(N):\n    lowest_elevation = float('inf')\n    for f in F:\n        if i in f:\n            if E[i] < lowest_elevation:\n                lowest_elevation = E[i]\n    if lowest_elevation!= float('inf'):\n        good_observatories.add(i)\n\nprint(len(good_observatories))\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\n\"\"\"\nimport itertools\nimport collections"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'''4 3\n1 2 3 4\n1 3\n2 3\n2 4\n''') == '2'\n\nassert solution(\n'''5 4\n1 2 3 4 5\n1 2\n2 3\n2 4\n3 4\n''') == '0'\n\nassert solution(\n'''10 10\n0 9 1 10 2 8 6 3 7 5 4\n1 2\n3 4\n5 6\n7 8\n9 10\n''') == '8'\n\nassert solution(\n'''10 10\n0 9 1 10 2 8 6 3 7 5 4\n1 2\n3 4\n5 6\n7 8\n9 10\n''') == '10'\n\nassert solution(\n'''5 5\n1 2 3 4 5\n1 2\n2 3\n2 4\n3 4\n''') == '0'"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3') == '10'\nassert solution('10 3') == '10'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3') == '10'\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n') == '10'\nassert solution('4 3\\n') == '10'\nassert solution('4 3\\n') == '10'\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n') == '10'\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"10\"\nassert solution(\"4 2\") == \"5\"\nassert solution(\"5 1\") == \"5\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"2 5\") == \"7\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3') == '10'\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"4\\n3\"\n) == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3') == '10'\n\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\n\nmin_ = 1\nmax_ = 10 ** 6\n\nwhile min_ < max_:\n    mid = (min_ + max_) // 2\n    result = 1\n    count = 0\n    for i in range(1, n + 1):\n        result *= mid // i\n        if result >= k:\n            count += 1\n\n    if count >= n:\n        max_ = mid\n    else:\n        min_ = mid + 1\n\nprint(min_)\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open('sample_input.txt', 'r').read()) == open('sample_output.txt', 'r').read()\nassert solution(open('input.txt', 'r').read()) == open('output.txt', 'r').read()\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"1\"\nassert solution(\"0.5\") == \"0\"\nassert solution(\"0.1\") == \"0\"\nassert solution(\"0.05\") == \"0\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\"\"\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(1) == 0\nassert solution(0) == 1\n\n\"\"\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(0) == \"0\"\nassert solution(1) == \"1\"\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1) == '0'\nassert solution(0) == '1'\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('123') == 6\nassert solution('1+23') == 24\nassert solution('123+') == 6\nassert solution('+1+2+3+') == 10\nassert solution('1+2+3+') == 6\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('125') == '176'\n\"\"\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"125\") == \"176\"\nprint(solution(\"125\"), \"176\")\nassert solution(\"1+2+3\") == \"7\"\nassert solution(\"1+2+3+5\") == \"12\"\nassert solution(\"1+2+3+5+6\") == \"24\"\nassert solution(\"1+2+3+4+5+6\") == \"55\"\n\"\"\"\nfrom itertools import combinations"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('125') == '176'\nassert solution('9+3') == '12'\nassert solution('7+8+7+6+9+6+5') == '135'\n\n-------\nInput\n9+9\nOutput\n18\nExplanation\n9+9=18\n\"\"\""
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"123\") == \"229\"\nassert solution(\"11\") == \"12\"\nassert solution(\"21\") == \"11\"\nassert solution(\"12\") == \"6\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('125') == '176'\n\"\"\""
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"125\") == \"176\"\n\"\"\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"125\") == \"176\"\nprint(solution(\"125\"))\n\n\"\"\"\n\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"125\") == \"176\"\nprint(solution(\"125\"))\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"125\") == \"176\"\n\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == '1'\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''6\n1 2 3 4 5 6''') == '1'\n\n------Problem 019 / 015 (Medium)------\nGiven a list of numbers, determine whether the sum of its elements is odd or even.\n\nGive your answer as a string matching \"odd\" or \"even\".\n\nIf the input array is empty consider it as: [0] (array with a zero).\n\nExample:\nodd_or_even([0])          ==  \"even\"\nodd_or_even([0, 1, 4])    ==  \"odd\"\nodd_or_even([0, -1, -5])  ==  \"even\"\n\n------Constraints------\n1 \\leq N \\leq 10^5\n\n------Input Format------\nThe first line contains N.\nThe second line contains N integer numbers separated by a single space.\n\n------Output Format------\nThe first line contains \"odd\" if the sum of the numbers is odd, otherwise it contains \"even\".\n\n------Sample Input------\n4\n0 1 2 3\n\n------Sample Output------\nodd\n\n----Problem 017 / 018 (Easy)----\nGiven a list of numbers, find their range.\n\nFrom a list [2, 4, 8, 16], return [2, 16].\n\n-----Constraints-----\n - 10 \\leq N \\leq 10^5\n - -10^{9} \\leq a_i \\leq 10^{9}\n - a_i is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 a_2... a_{N}\n\n-----Output-----\nPrint the range of the list.\n\n-----Sample Input-----\n4\n4 2 1 3\n\n-----Sample Output-----\n[2, 3]\n\n-----Sample Input-----\n8\n4 2 2 8 16 32 32 64\n\n-----Sample Output-----\n[2, 64]\n\n-----Sample Input-----\n8\n0 0 0 0 0 0 0 0\n\n-----Sample Output-----\n[0, 0]"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n1 2 3 4 5 6') == '1'\n\"\"\"\n\n\"\"\"\nHint 1\nChoose the card number that is the maximum.\n\"\"\"\n\n\"\"\"\nSolution Approach\n\n\"\"\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n1 2 3 4 5 6') == '1'\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20\") == \"15800\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20') == '15800'\n\"\"\"\nimport sys"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n10\n\"\"\"\n    ) == \"15800\"\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20\") == \"15800\"\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"1000\"\nassert solution(\"1\") == \"200\"\nassert solution(\"2\") == \"400\"\nassert solution(\"3\") == \"600\"\nassert solution(\"4\") == \"800\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"10\"\nassert solution(\"20\") == \"15800\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20') == '15800'\nprint(solution('20'))\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20\") == \"15800\"\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"20\") == \"15800\"\n\"\"\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('4') == '400'\nassert solution('20') == '15800'\nassert solution('30') == '21800'\nassert solution('100') == '45000'\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\nassert solution(\"taco\") == \"taco\"\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\"\"\"\n\nimport unittest\nfrom collections import OrderedDict"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\nassert solution(\"dbe\") == \"bcd\"\nassert solution(\"bae\") == \"bcda\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\"\"\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\nassert solution(\"\") == \"\"\n\"\"\"\n\nimport unittest\nfrom typing import Any, List\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        grid = stdin.split('\\n')\n        d = [[c for c in row] for row in grid]\n        h = len(grid)\n        w = len(grid[0])\n        for i in range(1, h):\n            for j in range(1, w):\n                if i == j:\n                    d[i][j] = d[i-1][j-1]\n                else:\n                    d[i][j] = 'x'\n        output = ''.join([''.join(row) for row in d])\n        return output\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n    def test_solution(self):\n        self.assertEqual(self.solution.solve(\"ant\"), \"abc\")\n        self."
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\nassert solution(\"wreca\") == \"abc\"\n\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"101\") == 2\n\"\"\"\n\n\"\"\"\nAs it is stated in the problem, we can assume that each square is either 1 or 0.\nSo, if a player places a marble on a square, they will always win the game.\n\nAs such, the only squares that could potentially have a marble placed on them\nare those whose contents are 1.\n\nWe can iterate through the input string, determining whether or not the next\ncharacter is a 1 or not. If it is a 1, then we can assume that the character\nwill be placed on the next available square. This is because, if a marble is\nplaced on a square, then its contents will always be 1.\n\nWe can then simply print the number of available squares, which is equal to the\nnumber of 1s in the input string.\n\"\"\"\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('101') == '2'\nprint(solution('101'))\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('101') == 2\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('101') == '2'\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101\") == \"3\"\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101\") == 2\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101') == 2\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(101) == 2\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101\") == 2\nassert solution(\"101110\") == 3\n\"\"\"\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"101\") == \"2\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n10000\\n9000\\n\") == \"48000\"\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"\n\"\"\""
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3\\n10000\\n9000\\n') == '48000'\n\"\"\"\n\nN, K, X, Y = map(int, stdin.read().split('\\n'))\n\ntotal = 0\nfor i in range(K):\n    total += X\nfor i in range(1, N - K + 1):\n    total += Y\nprint(total)\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n1\\n10000\\n9000\") == \"10000\\n9000\\n10000\\n10000\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 10000 9000\") == \"48000\"\n\"\"\"\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3\\n10000\\n9000\") == \"48000\"\nassert solution(\"7\\n1\\n1\\n1\\n1\\n1\\n100\\n1\") == \"100\"\n\n\"\"\""
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n3\\n10000\\n9000') == '48000'\n\"\"\"\n\nN, K, X, Y = [int(c) for c in input().split('\\n')]\n\nprint(K * X + (N - K) * Y)\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\\n\") == \"48000\"\n\"\"\""
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n3\\n10000\\n9000\\n') == '48000'\n\"\"\"\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n3\\n10000\\n9000\\n') == '48000'\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nprint(solution(\"1 + 2\"))\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\"\nimport re"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"1 + 2\"\n) == \"3\"\nassert solution(\n    \"0 - 2\"\n) == \"0\"\nassert solution(\n    \"1 + 2 + 3\"\n) == \"6\"\nassert solution(\n    \"2 - 2\"\n) == \"0\"\nassert solution(\n    \"1 + 2 - 3\"\n) == \"0\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 + 2') == '3'\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\"\n\nfrom typing import Tuple\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 + 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nassert solution(\"1 - 2\") == \"-1\"\nassert solution(\"1 * 2\") == \"2\"\nassert solution(\"1 + 2 - 3 * 2 + 3 - 2\") == \"1\"\nassert solution(\"3 + 2 - 4 - 1 + 3\") == \"-1\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000\") == \"ABC\"\n\n-------Problem-------\nAtCoder Beginner Contest (ABC) is held at 2020/01/02. You have a rating of X and you will participate in the contest if you have a better rating than 12,000.\n\nAtCoder Regular Contest (ARC) is held at 2020/01/03. You have a rating of X and you will participate in the contest if you have a better rating than X.\n\nSmeke will participate in the contest if his current rating is less than 1200, and participate in the contest otherwise.\n\nGiven the rating of Smeke, find out whether he will participate in the contest or not.\n\n-------Solution-------\n\nx = int(stdin.readline())\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000\") == \"ABC\"\nassert solution(\"1337\") == \"ARC\"\nassert solution(\"1333\") == \"ABC\"\nassert solution(\"1200\") == \"ARC\"\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('1456') == 'ARC'\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('1200') == 'ARC'\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000\") == \"ABC\"\nprint(solution(\"1000\"))\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000\") == \"ABC\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('1200') == 'ARC'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('700 600 780') == '1300'\n\"\"\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a=700, b=600, c=780) == \"1300\"\n\"\"\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\nassert solution(\"600 600 780\") == \"1380\"\nassert solution(\"700 780 780\") == \"1480\"\n\n-----"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('700 600 780') == '1300'\n\"\"\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('700 600 780') == '1300'\n\n\"\"\"\n\n\"\"\"\na = int(stdin.readline().split()[0])\nb = int(stdin.readline().split()[0])\nc = int(stdin.readline().split()[0])"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'700 600 780') == '1300'\n\n\"\"\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n\nfrom math import gcd\nfrom functools import reduce"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''700 600 780\n''') == '1300'\n\n\"\"\"\nCreate a function that takes a list of integers as its parameter and,\nreturning a Boolean, returns whether all elements in the list are equal.\n\n\"\"\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#abc#\\n#arc#\\n#####\"\n\n\"\"\"\nGiven a string representing a text, you need to check whether it is a valid Roman numeral or not.\n\nA valid Roman numeral is defined as follows:\n\nIt is a string containing only the characters I, V, X, L, C, D and M.\n\nIt does not contain any other characters.\n\nIt is written in the upper or lower case.\n\nInput Format\n\nA single line of input containing the string S.\n\nConstraints\n\n1 \u2264 |S| \u2264 12\n\nOutput Format\n\nPrint 'YES' or 'NO' depending on whether the string is a valid Roman numeral or not.\n\nSample Input 0\n\nCDXXI\nSample Output 0\n\nYES\nExplanation 0\n\nCDXXI is a valid Roman numeral, because it only contains valid characters and is written in the upper or lower case.\n\nSample Input 1\n\nCDXXX\nSample Output 1\n\nNO\nExplanation 1\n\nCDXXX is not a valid Roman numeral, because it contains an invalid character.\n\n\"\"\"\n\n\"\"\"\nWe use the following algorithm to determine whether the given string is a valid Roman numeral or not.\n\nFirst, the string is converted to uppercase and the whitespaces are removed.\n\nNext, we split the string into a list of characters.\n\nNext, we check for the validity of the first character.\n\nIf the first character is equal to I or V or X or L or C or D or M, we continue the validity check for the remaining characters.\n\nIf the first character is not valid, we print NO on a new line.\n\nOtherwise, we check for the validity of the second character.\n\nIf the second character is equal to I, then the validity check is carried out with the remaining characters.\n\nIf the second character is equal to V, then the validity check is carried out with the remaining characters.\n\nIf the second character is equal to X, then the validity check is carried out with the remaining characters.\n\nIf the second character is equal to L, then the validity check is carried out with the remaining characters.\n\nIf the second character is equal to C, then the validity check is carried out with the remaining characters.\n\nIf the second character is equal to D, then the validity check is carried out with the remaining characters.\n\nIf the second character is equal to M, then the validity check is carried out with the remaining characters.\n\nIf the second character is not valid, we print NO on a new line.\n\nOtherwise, we print YES on a new line.\n\nSample Input\n\nCDXXI\nSample Output\n\nYES\nExplanation\n\nCDXXI is a valid Roman numeral, because it only contains valid characters and is written in the upper or lower case.\n\n\"\"\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 3\nabc\narc''') == '#####\\n#abc#\\n#arc#\\n#####'\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\nassert solution(\"ab\\nac\") == \"####\\n#a#\\n#b#\\n#c#\\n####\""
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\nabc\\narc') == '#####\\n#abc#\\n#arc#\\n#####'\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\nab\\nc') == '####\\n#ab#\\n#c#\\n####'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\nprint(solution(\"abc\\narc\"))"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"\"\"#####\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\nprint(\"Tests passed.\")"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\nabc\\narc') == '#####\\n#abc#\\n#arc#\\n#####'\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\nIIDID\\n') == '2'\n\"\"\""
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"IIDID\") == 2\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"IIDID\") == \"2\"\nassert solution(\"IDIDI\") == \"3\"\nassert solution(\"III\") == \"0\"\n\"\"\""
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"IIDID\") == 2\nassert solution(\"DDIIDI\") == 2\nassert solution(\"IIDIDID\") == 2\nassert solution(\"DDDIDDIID\") == 3\nassert solution(\"DDDDIDDIIDID\") == 4\n\"\"\""
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"IIDID\") == 2\n\"\"\"\nfrom collections import deque\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input())\n\nnum = deque(map(int, input().split()))\n\nresult = 0\nwhile num:\n    if num[0] == max(num):\n        result += num[0]\n        num.popleft()\n    else:\n        num.append(num.popleft())\n\nprint(result)\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"IIDID\") == 2\n\"\"\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"IIDID\") == \"2\"\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline().strip())\nS = sys.stdin.readline().strip()\n\nmax_value = 0\nx = 0\n\nfor i in range(N):\n    if S[i] == \"I\":\n        x += 1\n    else:\n        x -= 1\n    max_value = max(max_value, x)\n\nprint(max_value)\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n5\nIIDID\n\"\"\"\n) == '2'\nassert solution(\n\"\"\"\n5\nDIDDI\n\"\"\"\n) == '1'\nassert solution(\n\"\"\"\n4\nDIDID\n\"\"\"\n) == '1'\n\"\"\"\nExplanation:\n\nOperation 1: x=0, S=I.\nOperation 2: x=1, S=ID.\nOperation 3: x=1, S=IDD.\nOperation 4: x=1, S=DID.\nOperation 5: x=1, S=DIDD.\n\"\"\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"IIDID\") == 2\n\"\"\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"IIIIDID\") == 1\nassert solution(\"DDIDI\") == 4\nassert solution(\"IDID\") == 0\n\"\"\"\n\nn = int(input())\ns = input()\n\nprint(s.count(\"I\") - s.count(\"D\"))\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''11009 11332''') == 4\nprint(solution(stdin))\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11009 11332\") == \"4\"\n\"\"\"\n\n\"\"\"\nTesting:\n    python3 -m doctest -v palindromic_numbers.py\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11009 11332\") == 4\nprint(solution(\"11009 11332\"))\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(11111111) == 4\nassert solution(11111112) == 0\nassert solution(11331111) == 4\n\"\"\"\n\nA, B = map(int, input().split())"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"11009 11332\") == 4\nassert solution(\n    \"10101 10101\") == 6\nassert solution(\n    \"12345 12321\") == 0\nassert solution(\n    \"12121 12121\") == 6\nassert solution(\n    \"1222 1221\") == 4\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11009 11332\") == 4\n\n\"\"\"\n\nimport sys\n\n\"\"\"\nThe solution is a bit tricky. We keep a palindromes_count counter and iterate through the range. For each number, we remove the digits from the end of the number.\nWe check if the resulting number is palindrome and add one to the counter if it is. We continue till all the digits have been removed from the number.\nOnce we remove all the digits, we add 1 to the counter because it is the number we started with.\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 1\\n2 2 3') == '3'\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 2 1\") == \"2\"\nassert solution(\"3 3 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 4') == '3'\n\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4\n-----\n3 1 4"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 4') == 3\nassert solution('3 1 2') == 0\nassert solution('3 1 1') == 1\n\n---Problem 2---\nAtCoDeer is planning to paint his fence for the upcoming spring. He remembers that he purchased three different types of paint, named blue, green and red, in that order.\nHe has to paint the fence for three different colors, so he needs three different containers of paint. AtCoDeer decided that he will choose colors in the following order:\nblue, green, red, blue, green, blue, red,...\n\nFor example, if the first color purchased was blue, then the second color purchased must be green, the third color purchased must be red, and so on.\n\nAtCoDeer has just purchased the first color, so the first color he has in his possession is blue.\n\nIn order to know how many paint cans he needs, he has to figure out how many containers of each color he needs, in order.\n\nWrite a program that takes the color of each container of paint purchased and tells AtCoDeer the number of cans he needs.\n\n-----Constraints-----\n - AtCoDeer bought exactly one color of paint\n - 1\u2266a,b,c\u2266100\n\n-----Input-----\nThe input is given from Standard Input in the following format:\na b c\n\n-----Output-----\nPrint the number of containers of each color.\n\n-----Sample Input-----\n1 1 1\n\n-----Sample Output-----\n3\n\nThere are three different colors: 1, 1, and 1.\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"3\"\nassert solution(\"3 3 3\") == \"1\"\nassert solution(\"3 3 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 1 4''') == '3'\nassert solution('''3 2 2''') == '0'\nassert solution('''3 3 3''') == '1'"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 4\") == \"3\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 4\") == \"3\"\n\"\"\"\n\nfrom itertools import groupby\n\nimport sys"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 4\") == \"3\"\n\n\"\"\"\n\na, b, c = input().split()\n\na = int(a)\nb = int(b)\nc = int(c)\n\nlist = [a, b, c]\nlist.sort()\nprint(list.count(list[0]))"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 3\n1 2 3 4 5''') == '12'\n\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2 3 4\") == \"7\"\nassert solution(\"2 2\\n2 3\") == \"6\"\n\"\"\"\n\nfrom typing import List, Dict\nfrom pprint import pprint\nfrom collections import Counter\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5\") == 12\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 2\\n1\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3') == '6'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n1\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '12'\nprint('Test passed\\n')\n\n-----Explanation-----\nWe have N = 5 sticks, K = 3, and the lengths of the sticks are given as\nl_1 = 1\nl_2 = 2\nl_3 = 3\nl_4 = 4\nl_5 = 5\n\nThe maximum length we can achieve is the sum of the maximum of sticks [1, 2, 3] and [4, 5]\n\n12\n\nThe maximum length we can achieve by joining sticks of lengths\n1 = 1\n2 = 2\n3 = 3\n4 = 4\n5 = 5\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n1 2 3') == 6\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3\\n4 5 6') == 12\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 2 7''') == 'B'\nassert solution('''7 8 3''') == 'A'\nassert solution('''13 18 6''') == 'B'\n'''\n-------Task 2-------\n\n'''\n\n-----Constraints-----\n - 1 \\leq n \\leq 1000\n - 1 \\leq a_i, b_i \\leq 1000\n - a_i, b_i are pairwise distinct.\n - 1 \\leq a_i + b_i \\leq 2000\n - 1 \\leq a_i \\leq b_i\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\na_1 b_1\na_2 b_2\n...\na_n b_n\n\n-----Output-----\nPrint n lines.\nOn the i-th line, print the sum of the distances between Snuke's residence and the store a_i + b_i.\n\n-----Sample Input-----\n5\n1 2\n1 3\n2 4\n2 5\n3 6\n\n-----Sample Output-----\n3\n6\n5\n5\n7\n\nThe distances between Snuke's residence and the stores are (1+2) = 3, (1+3) = 3, (2+4) = 2, (2+5) = 3, (3+6) = 4.\nWe print the sum of these distances on the first five lines.\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 7') == 'B'\n\"\"\"\n\nx, a, b = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\"\n\nfrom functools import reduce\n\nx, a, b = map(int, input().split())\n\nd = abs(a - x) + abs(b - x)\nprint(min(a, b) if d == 0 else max(a, b))\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 7') == 'B'\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\"\n\nx, a, b = list(map(int, stdin.readlines()[0].strip().split()))"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\n\"\"\"\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\n-----Solution-----\n\nfrom sys import stdin\n\na, b, x = map(int, stdin.read().strip().split())\n\nprint('B' if abs(a - x) < abs(b - x) else 'A')"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 7') == 'B'\n\n-----\n1. Open file \"input.txt\" in read-only mode.\n2. Iterate over all lines of the file.\n3. Evaluate the expression on each line to obtain x, a, b, where x, a and b are integers.\n4. If a <= b, print A; if a > b, print B.\n5. Close the file.\n-----\nIn the first step, the program opens the file in read-only mode.\nIn the second step, the program reads the file line by line, iterating over all of its lines.\nIn the third step, the program evaluates the expression on each line to obtain x, a, b, where x, a and b are integers.\nIn the fourth step, the program compares a and b and prints the appropriate string according to the result.\nThe last step is to close the file.\n-----\nOn the first line of input, the program receives the value of x.\nOn the second line, the program receives the values of a and b, where a and b are integers.\n\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/5ee6d3bcc4ed975f65000dec/train/python"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(sys.stdin.read())) == str(sys.stdin.read())\n\"\"\"\n\nimport sys\n\na = sys.stdin.readline().strip().split(\" \")\n\nx = int(a[0])\na = int(a[1])\nb = int(a[2])"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2017/01/07') == '2018/01/07'"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\"\"\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\nprint(solution(\"2017/01/07\"))\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\nprint(solution(\"2017/01/07\"))\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2017/01/01') == '2018/01/01'\nassert solution('2017/01/02') == '2018/01/02'\nassert solution('2017/01/03') == '2018/01/03'\nassert solution('2017/01/04') == '2018/01/04'\nassert solution('2017/01/05') == '2018/01/05'\n\nprint(solution('2017/01/01'))\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"\n\"\"\"\n\nfrom collections import defaultdict, Counter\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"cbaa\") == \"aac\"\nassert solution(\"daacc\") == \"caa\"\nassert solution(\"acacac\") == \"caa\"\n\"\"\"\n\nimport sys\n\nlines = []\nfor line in sys.stdin:\n    lines.append(line.strip('\\n'))"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"cbaa\") == \"aac\"\nassert solution(\"daacc\") == \"aac\"\nassert solution(\"acacac\") == \"caa\"\n\n----\nSolution 1\n----\n\na, b, c = stdin.split(\"\\n\")\nb = sorted(set(b))\nprint(*[s for s in c if c.count(s) > 1], sep=\"\")\n\n----\nSolution 2\n----\n\nn = int(stdin)\nb = sorted(set(stdin.split()))\nprint(*sorted(set(c for c in stdin.split() if stdin.split().count(c) > 1)), sep=\"\")\n\n----\nSolution 3\n----\n\nfrom collections import Counter\n\nn = int(stdin)\nb = sorted(set(stdin.split()))\nprint(*sorted(s for s in set(c for c in stdin.split()) if Counter(stdin.split())[s] > 1), sep=\"\")\n\n----\nSolution 4\n----\n\nn = int(stdin)\nb = sorted(set(stdin.split()))\nprint(*sorted([s for s in b if b.count(s) > 1]))\n\n----\nSolution 5\n----\n\nn = int(stdin)\ns = stdin.split()\nprint(*sorted([s[i] for i in range(len(s)) if s.count(s[i]) > 1]))\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcde\") == \"abcd\"\nassert solution(\"cba\") == \"cba\"\nassert solution(\"baa\") == \"baa\"\nassert solution(\"aa\") == \"aa\"\nassert solution(\"aac\") == \"aca\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\\n\") == 'aac'\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aaaa') == 'a'\nassert solution('aaaaa') == 'aaa'\nassert solution('baa') == 'aa'\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('abc') == 'abc'\nassert solution('aaaa') == 'aaaa'\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3\ncbaa\ndaacc\nacacac\"\"\") == 'aac'\n\n\"\"\""
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cbaa\\ndaacc\\nacacac\") == 'aac'"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 24 30\\n') == '7'\nprint(solution(stdin))\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"4\\n1 2\\n3 4\\n5 6\\n7 8\\n\"\n) == \"3\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 24 30\\n\") == \"7\"\n\n\"\"\"\nimport os\nimport sys\nfrom io import StringIO\nimport unittest\nimport logging"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n24 30') == '7'\nassert solution('2\\n1 30') == '1'\nassert solution('3\\n1 30') == '1'\nassert solution('4\\n1 30') == '2'\nassert solution('5\\n1 30') == '3'\n\"\"\"\n\nn = int(input())\nlst = []\nfor _ in range(n):\n    lst.append(list(map(int, input().split())))\n\nres = 0\nfor i in range(n):\n    res += sum(range(lst[i][0], lst[i][1] + 1))\nprint(res)"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 24 30\") == 7\nassert solution(\"3 9 29\") == 10\nassert solution(\"3 0 10\") == 0\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n15 20\n:\n24 30''') == '7'\n\nassert solution('''2\n15 20\n:\n24 30''') == '2'\n\nassert solution('''2\n15 20\n:\n24 30''') == '2'\n\nassert solution('''1\n15 20\n:\n24 30''') == '1'\n\nassert solution('''1\n15 20\n:\n24 30''') == '1'"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\n\n\"\"\"\n\nn = int(stdin.readline())\nlst = [stdin.readline().split() for i in range(n)]\nlst = [list(map(int, l)) for l in lst]\ncnt = 0\nfor i in range(1, n + 1):\n    l, r = lst[i - 1]\n    cnt += (r - l + 1)\nprint(cnt)\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 24 30\\n\") == 7\nassert solution(\"2 10 12\\n\") == 4\nassert solution(\"4 26\\n\") == 0\n\"\"\""
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 24 30\") == \"7\"\nassert solution(\"2 24 30\") == \"3\"\nassert solution(\"3 24 30\") == \"1\"\nassert solution(\"1 24 24 30\") == \"6\"\nassert solution(\"2 24 24 30\") == \"3\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\n\"\"\"\n\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n') == 6\n\"\"\"\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4') == '6'\n'''\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"6\"\n\"\"\"\n\nfrom unittest import TestCase"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2 3') == 'There are 6 blocks'\n\"\"\""
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n\"\"\"\nimport sys\n\nn, m = map(int, sys.stdin.readline().strip().split())\nprint(n * m - 1)\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4') == '6'\n\nimport sys"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n'''\n\nimport os\nimport sys\nimport io"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('5') == '3,3,2,1'\nassert solution('10') == '6,5,4,3,2,1'\nassert solution('15') == '6,5,4,3,2,1'\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4') == '6'\n\"\"\"\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6\") == \"6\"\n\"\"\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5') == 'Possible'\n\"\"\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n9 9 9\") == \"Possible\"\nassert solution(\"2 3\\n1 2 1\") == \"Impossible\"\n\n\"\"\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'Impossible'\nassert solution('1 3') == 'Impossible'\nassert solution('1 2') == 'Impossible'\nassert solution('2 3') == 'Possible'\nassert solution('3 3') == 'Possible'\n\n---\nYou have got a very simple idea of some cookies. Each cookie has a quantity of 1. Let's now try to increase the quantity of the cookies.\n\nYou have been given a couple of cookies (1 and 2) which you can trade. You have to buy a third cookie. Now, you have got the following two choices:\n1. You buy the third cookie for 2 cookies. You will have 1 cookie, 1 cookie and 2 cookies in the end.\n2. You buy the third cookie for 3 cookies. You will have 1 cookie, 2 cookies and 1 cookie in the end.\nNow, you want to get the maximum number of cookies for which you have the same number of cookies.\n\nIt seems you are interested in this problem. Let's try to solve it.\n\n---\nThere is a simple observation that can help you. If you have two cookies and you want to make the same number of cookies as before, you can exchange one of them for 1.\n\nSo, you can make 2+1 cookies for 3 cookies and 1+2 cookies for 4 cookies and so on. If you have n cookies and you want to make the same number of cookies as before, then you can make n cookies by using exactly 1 cookie.\n\nThus, we can try to reduce the problem into two sub-problems.\n\nIf we have three cookies, then the maximum number of cookies for which we have the same number of cookies is the maximum number of cookies for which we have 2 cookies.\nIf we have four cookies, the maximum number of cookies for which we have the same number of cookies is the maximum number of cookies for which we have 3 cookies.\nThe above is clearly a recurrence relation.\n\nLet's look at the base case. We have only one cookie, the maximum number of cookies for which we have the same number of cookies is 1.\n\nIf we have two cookies, then the maximum number of cookies for which we have the same number of cookies is 2.\n\nIf we have three cookies, then the maximum number of cookies for which we have the same number of cookies is 3.\n\nIf we have four cookies, then the maximum number of cookies for which we have the same number of cookies is 4.\n\nThus, we can write a recurrence relation for the maximum number of cookies for which we have the same number of cookies as n cookies."
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\") == \"Possible\"\nassert solution(\"2 2\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5') == 'Possible'\n\"\"\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\"\"\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5') == 'Possible'\n\"\"\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\"\"\"\n\nimport sys\n\nA, B = [int(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"Possible\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5') == 'Possible'\nassert solution('1 1') == 'Impossible'\nassert solution('1 10') == 'Impossible'\nassert solution('1 1') == 'Possible'\nassert solution('5 7') == 'Impossible'\n\"\"\""
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoder\") == \"atcoder\"\nassert solution(\"ctcoder\") == \"ctcoder\"\nassert solution(\"bcoder\") == \"bcoder\"\nassert solution(\"ztcoder\") == \"ztcoder\"\nassert solution(\"a?\") == \"a\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('tc????') == 'atcoder'\n\n-------\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoder\") == \"atcoder\"\nassert solution(\"bcoder\") == \"atcoder\"\nassert solution(\"coder\") == \"atcoder\"\nassert solution(\"d\") == \"UNRESTORABLE\"\nassert solution(\"atcoder\") == \"atcoder\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"?tc????\") == \"atcoder\"\nassert solution(\"cc??t\") == \"UNRESTORABLE\"\nassert solution(\"?c??t\") == \"atcoder\"\n\"\"\""
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('coder') == 'atcoder'\nassert solution('coder?coder') == 'atcoder'\nassert solution('?coder') == 'UNRESTORABLE'\nassert solution('coder??coder') == 'UNRESTORABLE'\nassert solution('t?c??') == 'UNRESTORABLE'\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('?tc????') == 'atcoder'\nassert solution('coder') == 'coder'\nassert solution('???') == 'UNRESTORABLE'\nassert solution('ab??') == 'UNRESTORABLE'\nassert solution('t?c??') == 'UNRESTORABLE'\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('atcoder') == 'atcoder'\n\"\"\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == UNRESTORABLE\nassert solution('t') == UNRESTORABLE\nassert solution('ct') == UNRESTORABLE\nassert solution('c') == 'a'\nassert solution('b') == 't'\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('?tc????') == 'atcoder'\n\"\"\""
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"atcoder\") == \"atcoder\"\nassert solution(\"coder\") == \"ctcoder\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2002\\n2017') == '2032'"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2002\\n2017') == '2032'\n\n-----\n\nimport re"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2000 100\") == \"1\", \"Error\"\nassert solution(\"2 5\") == \"4\", \"Error\"\nassert solution(\"2000\") == \"0\", \"Error\"\nassert solution(\"2000 100 1\") == \"5\", \"Error\"\nprint(\"You're all set!\")\n\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    R, G = map(int, line.split())\n    print(round(sum([R, G])/2))\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2002 2017\") == \"2032\"\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\"\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\nimport sys"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2002 2017') == '2032'\n\"\"\"\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\n\"\"\"\n\nimport numpy as np\nfrom sys import stdin\n\nfor line in stdin:\n    r,g = map(int,line.split())\n    print(np.mean([r,g]))\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aa\") == \"0\"\nassert solution(\"aaa\") == \"1\"\nassert solution(\"aaaaaaaa\") == \"0\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"0\"\nassert solution(\"abcdea\") == \"1\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"assesses\") == 1\n\"\"\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"string\") == 4\n\"\"\"\n\n\nclass Node:\n    def __init__(self, value: int, next_node: 'Node' = None):\n        self.value = value\n        self.next = next_node\n\n    def __str__(self):\n        return f'{self.value} -> {self.next}'\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('string') == '4'\nassert solution('letter') == '2'\nassert solution('aaaaaa') == '0'\nassert solution('uncopyrightable') == '13'\nassert solution('ambidextrously') == '12'\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\nassert solution(\"assesses\") == 1\nassert solution(\"string\") == 4\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"string\") == \"4\"\nassert solution(\"letter\") == \"2\"\nassert solution(\"aaaaaa\") == \"0\"\nassert solution(\"uncopyrightable\") == \"13\"\nassert solution(\"ambidextrously\") == \"12\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"string\") == \"4\"\nassert solution(\"letter\") == \"2\"\nassert solution(\"aaaaaa\") == \"0\"\nassert solution(\"uncopyrightable\") == \"13\"\nassert solution(\"ambidextrously\") == \"12\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('string') == 4\nassert solution('letter') == 2\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('ambidextrously') == 12\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10001 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100000000 500 3\\n\") == \"TLE\"\nassert solution(\"100000000 50 3\\n\") == \"AC\"\nassert solution(\"100000000 10001 5\\n\") == \"TLE\"\nassert solution(\"100000000 10000 5\\n\") == \"AC\"\nassert solution(\"19931568 1000000 6\\n\") == \"TLE\"\n\"\"\"\n\nimport math\n\nm, n, t = [int(i) for i in input().split()]"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n\"\"\""
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\n\"\"\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'AC'\nassert solution('100000000 0 0') == 'AC'\nassert solution('100000000 0 1') == 'AC'\nassert solution('100000000 0 2') == 'AC'\nassert solution('100000000 1 0') == 'AC'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100000000 500 3\\n') == 'TLE'\nassert solution('100000000 50 3\\n') == 'AC'\nassert solution('100000000 10001 5\\n') == 'TLE'\nassert solution('100000000 10000 5\\n') == 'AC'\nassert solution('19931568 1000000 6\\n') == 'TLE'\n\n\"\"\"\n\nimport os\nimport sys\nimport ast\nimport time\nimport math\nimport random\nimport argparse\nfrom pathlib import Path\nfrom functools import wraps\nfrom collections import defaultdict\nfrom pprint import pprint\n\nsys.setrecursionlimit(15000)"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('19931568 1000000 6') == 'TLE'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n\n\"\"\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n\n\"\"\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0') == '4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1') == '2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64'\nassert solution('2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0') == '4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0'\n\nSample Input 5\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n0\nSample Output 5\n4 4 8 0\n8 4 0 0\n32 32 0 0\n32 32 32 0\n\nSample Input 6\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n2\nSample Output 6\n0 0 0 4\n4 16 8 2\n2 64 32 4\n0 0 2048 64\n\nSample Input 7\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n2\nSample Output 7\n0 0 0 4\n4 16 8 2\n2 64 32 4\n0 0 2048 64\n\nSample Input 8\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n3\nSample Output 8\n2 16 8 4\n4 64 32 4\n2 1024 64 0\n1024 0 0 0\n\nSample Input 9\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n2\nSample Output 9\n0 0 0 4\n4 16 8 0\n2 64 32 4\n0 0 2048 64\n\nSample Input 10\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n2\nSample Output 10\n2 16 8 4\n4 64 32 4\n2 1024 64 0\n1024 0 0 0\n\nSample Input 11\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n2\nSample Output 11\n2 16 8 4\n4 64 32 4\n2 1024 64 0\n1024 0 0 0\n\nSample Input 12\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n3\nSample Output 12\n2 16 8 4\n4 64 32 4\n2 1024 64 0\n1024 0 0 0\n\nSample Input 13\n0 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n0\nSample Output 13\n4 16 8 2\n2 64 32 4\n2 1024 64 0\n1024 0 0 0\n\nSample Input 14\n0 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n3\nSample Output 14\n4 16 8 0\n2 64 32 4\n2 1024 64 0\n1024 0 0 0\n\nSample Input 15\n0 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n3\nSample Output 15\n4 16 8 2\n2 64 32 4\n2 1024 64 0\n1024 0 0 0\n\nSample Input 16\n0 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n1\nSample Output 16\n2 16 8 0\n4 64 32 4\n2 1024 64 0\n1024 0 0 0\n\nSample Input 17\n0 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n2\nSample Output 17\n4 16 8 0\n2 64 32 4\n2 1024 64 0\n1024 0 0 0\n\nSample Input 18\n0 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n3\nSample Output 18\n0 0 0 4\n4 16 8 0\n2 64 32 4\n0 0 2048 64\n\nSample Input 19\n0 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n3\nSample Output 19\n0 0 0 4\n4 16 8 0\n2 64 32 4\n0 0 2048 64\n\nSample Input 20\n0 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n2\nSample Output 20\n0 0 0 4\n4 16 8 0\n2 64 32 4\n0 0 2048 64\n\nSample Input 21\n0 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n3\nSample Output 21\n0 0 0 4\n4 16 8 0\n2 64 32 4\n0 0 2048 64\n\nSample Input 22\n0 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n1\nSample Output 22\n0 0 0 4\n4 16 8 2\n2 64 32 4\n0 0 2048 64\n\nSample Input 23\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n0\nSample Output 23\n4 16 8 0\n8 4 0 0\n32 32 0 0\n32 32 32 0\n\nSample Input 24\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n2\nSample Output 24\n4 16 8 0\n8 4 0 0\n32 32 0 0\n32 32 32 0\n\nSample Input 25\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n2\nSample Output 25\n0 0 0 4\n4 16 8 0\n2 64 32 4\n0 0 2048 64\n\nSample Input 26\n0 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n2\nSample Output 26\n0 0 0 4\n4 16"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(input_a), end = '\\n\\n')\n\"\"\""
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\") == \"2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n4\") == \"2 16 8 0\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n0\n''') == '''4 0 0 0\n8 16 8 2\n2 64 32 4\n2048 64 0 0\n'''\nprint(solution('''2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n0\n'''))\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\n\"\"\""
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n8 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\\n\") == \\\n    \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\\n\") == \\\n    \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\\n\") == \\\n    \"0 0 0 4\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\\n\") == \\\n    \"2 0 0 0\\n4 16 8 4\\n2 64 32 4\\n0 0 2048 64\\n\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0') == '4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0'\nassert solution('2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0') == '8 4 0 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0'\n\"\"\"\nimport time\n\nfrom util.parser import parse_stdin_single_line\n\nassert parse_stdin_single_line('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0') == [[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]]\nassert parse_stdin_single_line('2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0') == [[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]]\nassert parse_stdin_single_line('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2') == [[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]]\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 8 16\") == \"2 4 8 0\"\nassert solution(\"4 0 4 4\") == \"4 16 8 0\"\nassert solution(\"16 16 16 16\") == \"16 32 16 0\"\nassert solution(\"32 16 16 32\") == \"32 32 0 0\"\nassert solution(\"2 4 8\") == \"4 0 0\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n2\") == \"0 0 0 4\\n4 16 16 2\\n8 32 16 0\"\n\"\"\"\n\nimport sys\n\nN = 4\nSTART = [0, 0, 0, 0]"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"6\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('H2O') == '0'\nassert solution('H2C3O') == '0'\nassert solution('H2O2') == '2'\nassert solution('H2O2C3') == '2'\nassert solution('C2H3O2') == '0'\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"C6H6OCH2O 10\") == '0'\nassert solution(\"C6H14 10\") == '12'\nassert solution(\"CH3OH 1\") == '1'\nassert solution(\"C2H6 10\") == '0'\nassert solution(\"CH4\") == '0'\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"C2H6 10\") == \"0\"\nassert solution(\"C6H6OCH2O 10\") == \"6\"\nassert solution(\"C6H14 10\") == \"12\"\n\"\"\"\n\nfrom collections import Counter\nimport re"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"H2O 3\") == \"0\"\nassert solution(\"CH3OH 1\") == \"1\"\nassert solution(\"CH4 0\") == \"0\"\nassert solution(\"C6H6OCH2O 10\") == \"12\"\nassert solution(\"C5H10 0\") == \"0\"\n\"\"\""
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"6\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"CH3OH 1\") == 1\nassert solution(\"C2H6 10\") == 6\nassert solution(\"C3H8\") == 0\nassert solution(\"C6H6OCH2O 10\") == 0\nassert solution(\"C6H14 10\") == 12\n\"\"\""
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"H2O 5\") == \"0\"\nassert solution(\"H2O\") == \"0\"\nassert solution(\"CH4 1\") == \"1\"\nassert solution(\"CH4 0\") == \"0\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"0\"\nassert solution(\"C6H6OCH2O 10\") == \"12\"\nassert solution(\"CH3OH 1\") == \"1\"\nassert solution(\"C6H14 10\") == \"12\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"0\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n\n\"\"\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\n\"\"\""
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\"\"\""
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\"\"\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n([] [] ]\") == \"]\"\nassert solution(\"13\\n(([] [[]] ())\") == \"ok so far\"\nassert solution(\"21\\n[ { { () () () () } ]\") == \"]\"\nassert solution(\"27\\n[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n([] [] ]') == '] 7'\nassert solution('13\\n(([] [[]] ())') == 'ok so far'\nassert solution('21\\n[ { { () () () () } ]') == '] 20'\nassert solution('27\\n[ { [[()]] (({})) } ] () {}') == 'ok so far'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[ { { () () () () } } ] () {}\") == \"]\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\nassert solution(\"[[[[()]] (({})) ]] () {}\") == \"ok so far\"\n\"\"\""
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'ok so far'\nassert solution('()[(])') == ']'\nassert solution('()[]{}') == ']'\nassert solution('()') == ')'\nassert solution('([])') == ')'\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n([] [] ]\\n') == '] 7'\nassert solution('13\\n(([] [[]] ())\\n') == 'ok so far'\nassert solution('21\\n[ { { () () () () } } ]\\n') == '] 20'\nassert solution('27\\n[ { [[()]] (({})) } ] () {}\\n') == 'ok so far'\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"([] [] )\") == \"]\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[ { { ( ) ( ) ( ) ( ) } ]\") == \"]\"\nassert solution(\"[ { { ( ) ( ) ( ) ( } ]\") == \")\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('([] [] ]') == '] 3'\nassert solution('[ { { () () () () } } ] () {}') == '] 19'\nassert solution('[ { [[()]] (({})) } ] () {}') == 'ok so far'\nassert solution('([] [] )') == 'ok so far'\n\n\"\"\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"(([] [] ])\\n\") == \"]\"\nassert solution(\"(([] [[]] ())\\n\") == \"ok so far\"\nassert solution(\"(([] [[]] ())\\n\") == \"ok so far\"\n\nassert solution(\"[ { { () () () () } } ]\\n\") == \"]\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\\n\") == \"ok so far\"\n\"\"\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n([] [] ]\\n\") == \"]\"\nassert solution(\"13\\n(([] [[]] ())\\n\") == \"ok so far\"\nassert solution(\"21\\n[ { { () () () () } ]\\n\") == \"]\"\nassert solution(\"27\\n[ { [[()]] (({})) } ] () {}\\n\") == \"ok so far\"\nassert solution(\"5\\n[[()]]\\n\") == \"]\"\n\"\"\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"[ { { () () () () } ]\") == \"]\"\nassert solution(\"([] [] ]\") == \"]\"\nassert solution(\"([] [] ]\") == \"]\"\nassert solution(\"([] [] ]\") == \"]\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\napple\\near\\nreal\\nletters\\nstyle') == 'Fair Game'\nassert solution('3\\napple\\nextra\\napple') == 'Player 1 lost'\nassert solution('2\\napple\\nneat') == 'Player 2 lost'\n\"\"\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\napple\nextra\napple\n\"\"\") == \"Player 2 lost\"\nassert solution(\"\"\"\n2\napple\nneat\n\"\"\") == \"Player 1 lost\"\nassert solution(\"\"\"\n5\napple\near\nreal\nletters\nstyle\n\"\"\") == \"Fair Game\"\n\n\"\"\"\nThis problem was asked by Quora.\n\nGiven a string, find the palindrome that can be made by inserting the fewest number of characters as possible anywhere in the word. If there is more than one palindrome of minimum length that can be made, return the lexicographically earliest one (the first one alphabetically).\n\nFor example, given the string \"race\", you should return \"ecarace\", since we can add three letters to it (which is the smallest amount to make a palindrome). There are seven other palindromes that can be made from \"race\" by adding three letters, but \"ecarace\" comes first alphabetically.\n\nAs another example, given the string \"google\", you should return \"elgoogle\".\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"5\\n\"\n    \"apple\\n\"\n    \"ear\\n\"\n    \"real\\n\"\n    \"letters\\n\"\n    \"style\\n\"\n) == \"Fair Game\"\n\nassert solution(\n    \"3\\n\"\n    \"apple\\n\"\n    \"extra\\n\"\n    \"apple\\n\"\n) == \"Player 1 lost\"\n\nassert solution(\n    \"2\\n\"\n    \"apple\\n\"\n    \"neat\\n\"\n) == \"Player 2 lost\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(solution) == \"Fair Game\"\n\n\"\"\"\nimport os\nfrom pathlib import Path\nfrom typing import List, Tuple\n\nBASE_DIR = Path(__file__).resolve().parent\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\napple\\napple\\napple\\napple') == 'Fair Game'\nassert solution('3\\neat\\nneat\\nneat') == 'Player 1 lost'\nassert solution('2\\napple\\neat') == 'Player 2 lost'\n\"\"\""
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\\n\") == \"Fair Game\"\nassert solution(\"3\\napple\\nextra\\napple\\n\") == \"Player 1 lost\"\nassert solution(\"2\\napple\\nneat\\napple\\n\") == \"Player 2 lost\"\n\"\"\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\"\nassert solution(\"3\\napple\\nextra\\napple\") == \"Player 1 lost\"\nassert solution(\"2\\napple\\nneat\") == \"Player 2 lost\"\n\"\"\"\n\nn = int(stdin.readline().strip())\nd = {}\nfor i in range(n):\n    w = stdin.readline().strip()\n    if w not in d:\n        d[w] = None\n    else:\n        d[w] = \"Player \" + str(i + 1) + \" lost\"\n\nfor k, v in d.items():\n    if v is None:\n        print(k)\n        break\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\napple\\near\\nreal\\nletters\\nstyle\\n') == 'Fair Game'\nassert solution('3\\napple\\nextra\\napple\\n') == 'Player 1 lost'\nassert solution('2\\napple\\nneat\\napple\\n') == 'Player 2 lost'\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"apple\\neat\\napple\\nneat\") == \"Player 2 lost\"\nassert solution(\"apple\\napple\\napple\\neat\\nneat\\nneat\") == \"Fair Game\"\nassert solution(\"apple\\napple\\napple\\napple\\neat\\nneat\\nneat\\nneat\\nneat\") == \"Player 1 lost\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\\n\") == 'Fair Game'\nassert solution(\"3\\napple\\nextra\\napple\\n\") == 'Player 1 lost'\nassert solution(\"2\\napple\\nneat\\napple\\n\") == 'Player 2 lost'\n\"\"\"\nfrom collections import deque\n\nn = int(input())\n\nd = deque()\n\nfor i in range(n):\n    word = input()\n    d.append(word)\n\nplayer = 1\n\nwhile d:\n    word = d.popleft()\n    if player == 1:\n        if len(d) == 0:\n            break\n        if word[0]!= d[0][-1]:\n            print(f\"Player {player} lost\")\n            break\n        else:\n            player = 2\n    elif player == 2:\n        if len(d) == 0:\n            break\n        if word[0] == d[0][0]:\n            player = 1\n        else:\n            print(f\"Player {player} lost\")\n            break"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 * 100') == '100000'\nassert solution('10000 + 10') == '1010'\n\"\"\""
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 * 10\") == '10000'\nassert solution(\"1000 + 10\") == '1010'"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 * 10\") == \"10000\"\nassert solution(\"10000 + 10\") == \"1010\"\nassert solution(\"10000 + 1000\") == \"10100\"\nassert solution(\"1 + 10\") == \"11\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1000\n*\n100\n''') == '100000'\nassert solution('''1000\n+\n100\n''') == '1010'\nassert solution('''1000\n*\n10\n''') == '1010'\nassert solution('''10\n+\n1000\n''') == '1010'\nassert solution('''1\n+\n1000\n''') == '1001'\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 * 10 + 1\") == \"1010\"\nassert solution(\"10000 * 1000 + 1000\") == \"10010001010\"\nassert solution(\"10 * 1000 + 1\") == \"10001010\"\n\"\"\""
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"1010\"\nassert solution(\"10\\n+\\n1000\") == \"1010\"\nassert solution(\"0\\n+\\n0\") == \"0\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000\\n*\\n100') == '100000'\nassert solution('10000\\n+\\n10') == '10010'\nassert solution('10\\n+\\n1000') == '1010'\n\"\"\""
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000 * 100') == '100000'\nassert solution('10000 + 10') == '10010'\nassert solution('10 + 1000') == '1010'\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000*\\n*\\n100\") == \"100000\"\nassert solution(\"10000+\\n+\\n10\") == \"10010\"\n\"\"\""
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000*10\") == \"100010\"\nassert solution(\"10000+1000\") == \"100110\"\nassert solution(\"10+1000\") == \"1010\"\n\nprint(solution(\"1000*10\"))\nprint(solution(\"10000+1000\"))\nprint(solution(\"10+1000\"))\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\nprint(solution(\"8 out\"))\nprint(solution(\"8 in\"))\nprint(solution(\"52 out\"))\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 out\") == \"3\\n\"\nassert solution(\"8 in\") == \"6\\n\"\nassert solution(\"52 out\") == \"8\\n\"\nassert solution(\"52 in\") == \"8\\n\"\nassert solution(\"2 out\") == \"1\\n\"\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 out\") == '3'\nassert solution(\"8 in\") == '6'\nassert solution(\"52 out\") == '8'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\"\nfrom math import ceil\nfrom collections import deque"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('ab') == 'aab'\nassert solution('abc') == 'abcc'\nassert solution('abcd') == 'abcd'\nassert solution('abcde') == 'abcde'\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\"\n\n\"\"\"\nGiven a name, Y, and a parent name, P, the function should take two inputs, Y and P, and return the extended name, which should be a string.\n\"\"\"\n\nimport re"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == result\n\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''menolaxios mox''') =='menolaxiosexmox'\nassert solution('''alemaxe maxos''') == 'alemaxexmaxos'\nassert solution('''pamoli toxes''') == 'pamolextoxes'\n'''\n\n---------------------\n|    i'm ready    |\n---------------------\n'''\n\nfrom itertools import product\nimport string"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\nassert solution(\"2100\") == \"yes\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\""
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'\n\"\"\"\nimport collections\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\nassert solution('4 0 0 0 4 0 0 0 0 4') == '0'\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10 10 20 0 10 10 10 10 10\") == '1820000'\n\"\"\"\n\n\"\"\"\nProblem: Strictly Increasing Order\nInput: Non-negative integers\nOutput: Number of ways of using K cards to form a strictly increasing sequence.\nConstraints: 0 \u2264 K \u2264 10\n\nApproach: \n    1.\n\"\"\""
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'\nassert solution('4 0 0 0 4 0 0 0 0 4') == '64'\nassert solution('10 10 10 20 0 10 10 10 10 10') == '0'\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"0\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\""
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\\n\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\\n\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\\n\") == \"0 0\"\nprint(\"Well done!\")\n\n\"\"\"\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\\n\") == \"2 330\"\n\"\"\"\n\nN, p = input().split()\nN, p = int(N), int(p)\n\nprob = [int(i) for i in input().split()]\n\nprob_order = []\n\nfor i in range(N):\n    prob_order.append(i)\n\nfor i in range(p):\n    prob_order.remove(p)\n\nprob_order.sort()\n\nfor i in range(N):\n    print(prob[prob_order[i]], end=\" \")\n\nprint()\n\nfor i in range(N):\n    print(prob[p], end=\" \")\n\nprint()"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a) == b\nprint(solution(a))\n\n-----Problem-----\nThe ACM International Collegiate Programming Contest (ICPC) is one of the most prestigious contests for academic-level programmers. After completing two rounds of judging in a team competition, the teams are ranked and each team is awarded a certain number of points. A team is also rewarded if it has a better average score among all the teams. After the first round, the contest is decided based on these points and average score.\n\nHowever, the ICPC rules cannot be used in the second round of judging: if the average score of the team is better than that of another team, then the team will be awarded more points than the other team. The contest is decided if after the first round the two teams have the same number of points.\n\nConsider $n$ the number of teams and $k$ the number of rounds of judging, say, $k=2$. A team is awarded points $p_1$ and another team is awarded points $p_2$ if the average score of the team is better than the average score of the other team. If the team with the better average score has a better average score in all the rounds, then the team with the better average score wins the competition and is awarded more points than the team with the worse average score. If the two teams have the same average score in the second round, then the team which earned more points in the first round wins the competition and is awarded more points than the other team.\n\nIn this problem, your task is to find the maximum possible number of points that a team can earn in the ICPC. Since the contest is decided according to the average score of all the teams after the first two rounds, the team with the higher average score wins the first round, and the other team wins the second round.\n\n-----Constraints-----\n$1 \\leq n \\leq 10^5$\n$0 \\leq k \\leq 2^n - 1$\n$0 \\leq p_1, p_2 \\leq 10^6$\n$0 \\leq a_1, a_2,..., a_k \\leq 10^5$\n\n-----Test Case-----\nSample Input 1:\n7 1\n30 270 995 996 997 998 999\nSample Output 1:\n0\n\nSample Input 2:\n7 1\n30 270 995 996 997 998 999\nSample Output 2:\n2\n\nSample Input 3:\n7 2\n30 270 995 996 997 998 999\nSample Output 3:\n2\n\nSample Input 4:\n10 2\n6 6 2 5 1 2 6 7 1 6\nSample Output 4:\n4\n\"\"\"\n\nn, k = [int(c) for c in input().split(\" \")]\nscores = [int(c) for c in input().split(\" \")]"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7 0\n30 270 995 996 997 998 999\n''') == '2 330'\nprint(solution(input_)))\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\n\"\"\"\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n1 1\\n1 1\") == \"0 0\"\nassert solution(\"2 2\\n1 2\\n1 2\") == \"1 2\"\nassert solution(\"3 1\\n1 1\\n1 1\") == \"0 0\"\nassert solution(\"3 2\\n1 2\\n1 2\") == \"1 2\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\n\n-----\n\n'''\n\nimport math\n\nn,p = tuple(map(int,input().split()))\na = list(map(int,input().split()))\n\nd = [0] * n\ns = [0] * n\nans = [0] * n\nc = 0\nd[p] = 300\ns[p] = a[p]\nfor i in range(n-1):\n    d[i] = a[i]\n    s[i] = d[i]\n\nfor i in range(n):\n    if i == p:\n        continue\n    s[i] -= 1\n    ans[i] += 1\n    if s[i] < d[i]:\n        ans[i] += (d[i]-s[i])\n        c += (d[i]-s[i])\n\nprint(*ans, c)\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\\n\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\\n\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\\n\") == \"0 0\"\nprint(\"Success\")\n\"\"\""
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\n\nprint(solution(input()))\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\n\n\"\"\""
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\n\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n\nprint(\"All tests passed.\")\n\n-------------------------"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abcaabcbabca') == 3\nassert solution('abcdef') == 6\nassert solution('abccabba') == 3\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\nprint('Passed')\n\n\"\"\"\nimport numpy"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\nassert solution(\"ababab\") == 3\nassert solution(\"abcde\") == 5\n\"\"\""
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n\"\"\""
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aaaaaaaa') == '1'\nassert solution('abbaabbaabba') == '2'\nassert solution('abcdef') == '6'\n\nprint('all tests passed.')\n\n\n\"\"\"\n\n\nimport unittest\n\n\nclass Solution:\n    def test(self, input, output):\n        pass\n\n    def __init__(self):\n        self.period_length = 1\n\n    def get_period_length(self, input):\n        \"\"\"\n        Return the period length of the input string.\n        \"\"\"\n        last_char = input[0]\n        for c in input[1:]:\n            if c!= last_char:\n                self.period_length += 1\n                break\n            last_char = c\n        return self.period_length\n\n    def get_period_length(self, input):\n        \"\"\"\n        Return the period length of the input string.\n        \"\"\"\n        input_length = len(input)\n        for k in range(input_length, 0, -1):\n            rotations = input_length // k\n            if rotations * k == input_length:\n                return k\n        return 0\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test(self):\n        pass\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n') == '2\\n1 2\\n'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\\n') == '1\\n1\\n'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30\\n') == '0\\n1\\n'\n\nimport subprocess"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\\n4 5 6\") == \"2\\n1 2\"\nassert solution(\"1 2 4\\n6 8 10\") == \"0\\n1 2\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\\n') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30\\n') == '0\\n1'\n\"\"\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 12\n1 2 4 5\n6 8 12 18 26 28 30 34 36 37 39 40\n''') == '2\\n1 2'\nassert solution('''5 10\n1 2 3 4 5\n0 1 2 3 4 5 6 7 8 9\n''') == '1\\n1'\nassert solution('''3 6\n1 2 4\n11 12 15 19 24 30\n''') == '0\\n1 1'\nprint('Test pass.')\n\n\"\"\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n\") == \"2\\n1 2\\n\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\\n\") == \"1\\n1\\n\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\\n\") == \"0\\n1\\n\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 12\n1 2 4 5\n6 8 12 18 26 28 30 34 36 37 39 40''') == '''2\n1 2\n'''\nassert solution('''5 10\n1 2 3 4 5\n0 1 2 3 4 5 6 7 8 9''') == '''1\n1\n'''\nassert solution('''3 6\n1 2 4\n11 12 15 19 24 30''') == '''0\n1\n'''\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 12\n1 2 4 5\n6 8 12 18 26 28 30 34 36 37 39 40''') == '2\\n1 2', 'Falla la primera'\nassert solution('''5 10\n1 2 3 4 5\n0 1 2 3 4 5 6 7 8 9\n''') == '1\\n1', 'Falla la segunda'"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n\nimport os\nimport sys\ncurrent_dir = os.path.dirname(os.path.realpath(__file__))\nsys.path.append(os.path.join(current_dir, \"./solutions\"))\nfrom solution import solution"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n\"\"\""
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0\n\"\"\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0\n\n\"\"\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n\nprint('Hooray!')\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5551212\") == \"1\"\nassert solution(\"5551212\") == \"1\"\nassert solution(\"5551212\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5551212\") == 1\nassert solution(\"5519876\") == 0\nassert solution(\"5055555\") == 0\nassert solution(\"1\") == 1\nassert solution(\"0\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5551212\") == 1\nassert solution(\"5519876\") == 0\nassert solution(\"5055555\") == 0\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5551212\") == 1\nassert solution(\"5519876\") == 0\nassert solution(\"5055555\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\n\"\"\"\n\nimport fractions\nimport typing as t"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(32/1) == '0/1'\nassert solution(33/1) == '5/9'\nassert solution(-40/1) == '-40/1'\n\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n\nprint(\"Successfully tested.\")\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\nprint(\"PASSED\")\n\n-----\n8/16\n\n8/1\n0/1\n3/1\n4/1\n12/1\n2/1\n7/1\n1/1\n\n-----\n-8/16\n\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n-8/1\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\n\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\n\nassert solution('3\\nC E G\\nD F# A') == 'Transposition'\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\n\"\"\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\n\nprint(solution(stdin))\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Nonsense\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\n\n\"\"\"\n\nimport unittest\nfrom collections import Counter\nfrom string import ascii_uppercase\n\nclass Solution:\n    def check_relation(self, s1, s2):\n        diff = 0\n        for i in range(len(s1)):\n            diff += abs(ascii_uppercase.index(s1[i]) - ascii_uppercase.index(s2[i]))\n        if diff == 0:\n            return 'Transposition'\n        elif diff == len(s2):\n            return 'Retrograde'\n        elif len(s2) == 1 and len(s1) > 1:\n            return 'Inversion'\n        else:\n            return 'Nonsense'\n\n    def get_relation(self, s1, s2):\n        if s1 == s2:\n            return ''\n        elif s1 in s2:\n            return 'Transposition'\n        elif s2 in s1:\n            return 'Retrograde'\n        elif s2 in s1[len(s1) // 2:]:\n            return 'Inversion'\n        else:\n            return 'Nonsense'\n\n\nclass TestSolution(unittest.TestCase):\n    def test_case_1(self):\n        sol = Solution()\n        self.assertEqual(sol.check_relation('3\\nC E G\\nD F# A', '3\\nC E G\\nD F# A'), 'Transposition')\n\n    def test_case_2(self):\n        sol = Solution()\n        self.assertEqual(sol.check_relation('7\\nC C G G A A G\\nC C F F D# D# F', '7\\nC C F F D# D# F'), 'Inversion')\n\n    def test_case_3(self):\n        sol = Solution()\n        self."
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\""
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\nassert solution(\"7\\nB A C D E F G\\nG F E D C B A\") == \"Nonsense\"\nassert solution(\"7\\nA C D E F G\\nG F E D C B A\") == \"Nonsense\"\n\"\"\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\nassert solution('5\\nA B C D E F\\nG F E D C B A') == 'Nonsense'\n\"\"\"\n\nimport math\n\nn = int(input())\n\nnotes = input().split()\n\ncount = 0\n\nfor i in range(1, n):\n    if abs(notes.index(notes[0]) - notes.index(notes[i]))!= i:\n        count += 1\n\nprint(['Inversion', 'Transposition', 'Retrograde'][count%3])"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\n-----Problem-----\nGiven a string in the input, translate it to Nimionese.\n-----Solution-----\nTODO\n-----Test Case-----\nSample Input 1:\nI love ba-na-na\nSample Output 1:\nGah kove bababa\n\nSample Input 2:\nCat-a-pil-lar\nSample Output 2:\nCatacillar\n\nSample Input 3:\nCo-ding is the best\nSample Output 3:\nCociccah gs the bestuh\n\n\"\"\"\n\nfrom solutions import util"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"\n\nfrom collections import defaultdict\nimport re\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\nassert solution(\"The quick brown fox jumps over the lazy dog\") == \"The quick brown fox jumps over the lazy dog\"\nassert solution(\"We promptly judged antique ivory buckles for the next prize\") == \"We promptly judged antique ivory buckles for the next prize\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\n\"\"\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\n\"\"\""
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\""
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\n\"\"\"\n\n\nimport re\nimport sys\nimport string\nimport copy\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n') == '6'\nassert solution('4\\n') == '16'\nassert solution('3\\n') == '14'\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '16'\nassert solution('2') == '6'\nassert solution('1') == '6'\nassert solution('0') == '6'\nassert solution('6') == '31'\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\n\"\"\"\n\nv = int(input())\nprint((v*v + (v-1)*(v-1)) * 2)\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == 6\nassert solution(\"4\") == 16\nassert solution(\"3\") == 14\nassert solution(\"10\") == 140\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"4\") == \"16\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 6\nassert solution('4') == 16\nassert solution('3') == 14\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == 6\nassert solution(\"1\") == 2\nassert solution(\"2\") == 6\nassert solution(\"3\") == 14\nassert solution(\"4\") == 16\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"4\") == \"16\"\nassert solution(\"3\") == \"14\"\n\"\"\"\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '14'\nassert solution('1') == '6'\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == '16'\nassert solution('3') == '14'\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"5 6\\n1 2 3 4 5\"\n) == \"3\"\nassert solution(\n    \"5 10\\n4 8 1 9 7\"\n) == \"2\"\nassert solution(\n    \"4 10\\n1 3 1 7\"\n) == \"4\"\n\n\"\"\""
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == \"3\"\nassert solution(\"5 10\\n4 8 1 9 7\\n\") == \"2\"\nassert solution(\"4 10\\n1 3 1 7\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 6\\n1 2 3 4 5\\n') == '3'\n\n\"\"\""
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 10\\n4 8 1 9 7') == '2'\nassert solution('5 6\\n1 2 3 4 5') == '3'\nassert solution('5 10\\n4 8 1 9 7') == '2'"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\") == \"3\"\nassert solution(\"5 10\\n4 8 1 9 7\") == \"2\"\nassert solution(\"4 10\\n1 3 1 7\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 6\n1 2 3 4 5\n''') == '3'\nassert solution('''5 10\n4 8 1 9 7\n''') == '2'\nassert solution('''4 10\n1 3 1 7\n''') == '4'\n\n\"\"\"\n\nfrom typing import List\n\nn, X = map(int, stdin.readline().split())\nprices = list(map(int, stdin.readline().split()))\n\nprices.sort(reverse=True)"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n1 2 3 4 5\\n') == '3'\nassert solution('5 10\\n4 8 1 9 7\\n') == '2'\nassert solution('4 10\\n1 3 1 7\\n') == '4'\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 10\\n1 3 1 7') == '4'\nassert solution('5 10\\n4 8 1 9 7') == '2'\nassert solution('5 10\\n4 8 1 9 7') == '2'\n\"\"\"\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == \"3\"\nassert solution(\"5 10\\n4 8 1 9 7\\n\") == \"2\"\nassert solution(\"4 10\\n1 3 1 7\\n\") == \"4\""
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 10\\n1 3 1 7') == '4'\nassert solution('5 10\\n4 8 1 9 7') == '2'\nassert solution('5 10\\n1 3 1 7') == '3'\n\n\"\"\""
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"2 2\\n0 1 1\\n1 0 1\") == \"impossible\"\nassert solution(\"2 2\\n1 0 1\\n0 1 1\") == \"impossible\"\nassert solution(\"2 2\\n0 0 1\\n1 1 0\") == \"possible\"\nassert solution(\"3 3\\n0 1 2\\n1 0 0\\n2 0 0\") == \"possible\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n1 0 0\\n0 1 0\\n1 0 1\") == \"possible\"\nassert solution(\"1 2\\n1 0 0\\n0 1 1\") == \"impossible\"\nassert solution(\"1 2\\n0 1 0\\n1 0 1\") == \"impossible\"\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\\n\") == 'possible'\nassert solution(\"1 2\\n1 0 1\\n0 0 0\\n\") == 'impossible'\nassert solution(\"1 2\\n0 1 1\\n0 0 1\\n\") == 'impossible'\n\"\"\""
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1 2\n0 1 1\n1 0 0\n''') == 'possible'\nassert solution('''1 2\n0 1 0\n1 0 1\n''') == 'impossible'\n'''\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n1 0 0\\n0 1 0\") == \"impossible\"\n\n\"\"\""
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == 'possible'\n\"\"\""
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n0 1 1\\n1 0 0\\n') == 'possible'\nassert solution('1\\n2\\n0 1 0\\n1 0 1\\n') == 'impossible'\n\n\"\"\"\n\nfrom collections import Counter\n\nfor _ in range(int(stdin.readline())):\n    capacity, stations = list(map(int, stdin.readline().split()))\n    c = Counter(map(int, stdin.readline().split()))\n    if any(c[key]!= value for key, value in zip(c.keys(), c.values())):\n        print('impossible')\n    else:\n        print('possible')\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == 'possible'\nassert solution(\"1 2\\n0 1 1\\n1 0 0\") == 'impossible'\nassert solution(\"1 2\\n1 0 0\\n0 1 0\") == 'impossible'\nassert solution(\"1 2\\n1 0 1\\n0 0 0\") == 'possible'\n\"\"\""
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\\n\") == \"possible\"\nassert solution(\"1 2\\n1 0 0\\n0 1 0\\n\") == \"impossible\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\nassert solution('4 3\\n') == '2.0'\n\nprint(\"Tests passed.\")\n\n\"\"\""
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n\nSample Case 0\n\nSample Input 1:\n6 6\nSample Output 1:\n5.0\nSample Input 2:\n6 2\nSample Output 2:\n4.0\nSample Input 3:\n2 3\nSample Output 3:\n1.5\n\nSample Case 1\n\nSample Input 1:\n3 3\nSample Output 1:\n2.0\nSample Input 2:\n3 3\nSample Output 2:\n2.0\nSample Input 3:\n4 4\nSample Output 3:\n2.25\n'''\nfrom typing import List\nfrom math import factorial\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n\"\"\"\n\nfrom math import factorial\n\nfrom helpers import checkValue\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n\"\"\""
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nn, k = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\nprint(solution(input()))\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\n\"\"\""
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\"\nassert solution(\"1 10\") == \"1.2857142857142856\"\nassert solution(\"10 10\") == \"1.0\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(s) == ans_s\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 1 0''') == '0 0'\nassert solution('''4 2 7''') == '1 4'\nassert solution('''3 0 0''') == '1 6'\n'''\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 7\") == \"1 4\"\nassert solution(\"1 1 0\") == \"0 0\"\n\"\"\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\"\"\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n\"\"\""
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\nprint(\"Passed.\")\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 0\\n\") == \"0 0\"\nassert solution(\"4 2 7\\n\") == \"1 4\"\nassert solution(\"3 0 0\\n\") == \"1 6\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\"\"\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(print('{} {}'.format(a, b)))\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 0\\n\") == \"0 0\"\nassert solution(\"4 2 7\\n\") == \"1 4\"\nassert solution(\"3 0 0\\n\") == \"1 6\"\n\"\"\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\\n\") == \"1\"\nassert solution(\"6\\nBWWB\\nWBWB\\nWBBW\\nBBWB\\nBWWB\\nWWBW\") == \"0\"\n\"\"\""
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n4\nWBBW\nWBWB\nBWWB\nBWBW\n''') == '1'\nassert solution('''\n4\nBWWB\nBWBB\nWBBW\nWBWW\n''') == '0'\nassert solution('''\n6\nBWBWWB\nWBWBWB\nWBBWBW\nBBWBWW\nBWWBBW\nWWBWBB\n''') == '0'\n\"\"\""
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\nWBBW\nWBWB\nBWWB\nBWBW''') == '1'\nassert solution('''4\nBWWB\nBWBB\nWBBW\nWBWW''') == '0'\nassert solution('''6\nBWWBBW\nWBWBWB\nWBBWBW\nBBWBWW\nWBBWWB\nWWBWBB''') == '0'\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW') == '1'\nassert solution('4\\nWBWWB\\nWBWBW\\nBWWBW\\nBBWBW') == '0'\nassert solution('6\\nBWWBWW\\nWBWBWW\\nWBBWBB\\nBBWBWW\\nWWBWBB') == '0'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"WWWWB\") == 1\nassert solution(\"WBBWB\") == 0\nassert solution(\"BWBWWB\") == 0\nassert solution(\"BBWWBB\") == 1\nassert solution(\"BWWWWW\") == 0\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('WWWWWWB\\nWWWBWB\\nWWBWBW\\nWWWWWW\\nWBWBWW\\nWWWWBB\\nBWWBWB\\nWBBWBW\\nWWBWBW\\nWWWWBB\\nWBBBWB\\nWWBWBW\\nBWWWWB\\nWBWBWW\\nWWBWBW\\nBWBWBW\\nBWWBWB\\nWBWBWW\\nWWBWBW\\nWBWBWW\\nWWBWBW\\nWBBBWB\\nBWWBWB\\nWWWBWB\\nWBBWBW\\nWWBWBW\\nWWWWBB\\nWBWBWW\\nWWBWBW\\nWWWWBB\\nWWWBWW\\nWWBWBW\\nWBBBWB\\nWWBWBW\\nWBWBWW\\nWWWBWB') == '1'\nassert solution('WBBBBB\\nBBBBWB\\nWBWBWB\\nBWWBBB\\nBBBBWB\\nWBWBWB\\nBBBBWB\\nBWWBBB\\nWBWBWB\\nWBBBBB\\nBBBBWB\\nWBWBWB\\nBWWBBB\\nBBBBWB\\nWBWBWB\\nBWWBBB\\nBBBBWB\\nWBWBWB\\nBWWBBB\\nBBBBWB\\nWBWBWB\\nBWWBBB\\nBBBBWB\\nWBWBWB\\nWBBBBB\\nBBBBWB\\nWBWBWB\\nWBBBBB\\nBBBBWB\\nWBWBWB\\nWBBBBB\\nBBBBWB\\nWBWBWB\\nWBBBBB\\nBBBBWB\\nWBWBWB\\nWBBBBB\\nBBBBWB\\nWBWBWB\\nWBBBBB\\nBBBBWB\\nWBWBWB\\nWBBBBB\\nBBBBWB\\nWBWBWB\\nWBBBBB\\nBBBBWB\\nWBWBWB\\nWBBBBB\\nBBBBWB\\nWBWBWB\\nWBBBBB') == '0'\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nWBWB\\nBWWB\\nWBBW\\nBWBW\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\") == \"1\"\n\n\"\"\"\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nWBWB\\nBWBB\\nWBBW\\nBWBW\") == \"1\"\nassert solution(\"4\\nBWWB\\nBWBB\\nWBBW\\nBWBW\") == \"0\"\nassert solution(\"6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nWWBWBB\") == \"0\"\n\nprint('Success')"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"BWWB\") == \"0\"\nassert solution(\"WBBW\") == \"1\"\nassert solution(\"WBWWB\") == \"0\"\nassert solution(\"BWBWWB\") == \"0\"\nassert solution(\"WWBWBB\") == \"0\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 6 3 4') == '1 2'\nassert solution('1 2 1 2') == '2 6'\nassert solution('1 2 1 3') == '3 7'\nassert solution('1 4 5 8') == '3 2'\n\n\"\"\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n') == '2 1\\n3 4\\n3 2\\n1 2\\n3 7'\n\"\"\"\n\n\nfrom math import ceil, sqrt\nimport os\n\nDEBUG = False\ndata_folder = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'data')\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"2 1\"\n\n\"\"\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8''') == '''2 1\n3 4\n3 2\n1 2\n3 7'''\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 5 3\\n3 6 7') == '1 2\\n2 3'\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n') == '2 1\\n3 4\\n3 2\\n1 2\\n3 7'\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\"\n\nimport sys\nimport collections\nimport math\nfrom typing import List\nfrom collections import defaultdict\n\n\nclass SegmentTree:\n    def __init__(self, array):\n        self.tree = [0] * (len(array) + 1)\n        self.array = array\n        self.size = len(array)\n        self.lazy = [0] * (len(array) + 1)\n        self.size = len(array)\n        self.init_tree(array, 1, 0, self.size - 1)\n\n    def init_tree(self, a, v, l, r):\n        if l == r:\n            self.tree[v] = self.array[l]\n            return\n\n        m = (l + r) // 2\n        self.init_tree(a, v * 2, l, m)\n        self.init_tree(a, v * 2 + 1, m + 1, r)\n        self.tree[v] = self.tree[v * 2] + self.tree[v * 2 + 1]\n\n    def lazy_update(self, v, l, r):\n        if self.lazy[v] == 0:\n            return\n        if l == r:\n            self.tree[v] += self.lazy[v]\n            self.lazy[v * 2] += self.lazy[v]\n            self.lazy[v * 2 + 1] += self.lazy[v]\n            self.lazy[v] = 0\n            return\n        m = (l + r) // 2\n        self.lazy_update(v * 2, l, m)\n        self.lazy_update(v * 2 + 1, m + 1, r)\n        self.tree[v] = self.tree[v * 2] + self.tree[v * 2 + 1]\n\n    def update(self, v, l, r, x, y, val):\n        if x <= l and r <= y:\n            self.tree[v] += val\n            if l!= r:\n                self.lazy[v] += val\n                self.lazy_update(v, l, r)\n            return\n\n        if y < l or r < x:\n            return\n\n        self.update(v * 2, l, r, x, y, val)\n        self.update(v * 2 + 1, l, r, x, y, val)\n        self.tree[v] = self.tree[v * 2] + self.tree[v * 2 + 1]\n\n    def query(self, v, l, r):\n        if l <= l and r >= r:\n            return self.tree[v]\n\n        if r < l or r < 0 or l < 0:\n            return 0\n\n        self.lazy_update(v, l, r)\n        return self.query(v * 2, l, r) + self.query(v * 2 + 1, l, r)\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 4\\n2 3 1 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8') == '3 4\\n3 2\\n1 2\\n3 7'\nassert solution('5\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n5 9 7 3') == '1 2\\n3 7\\n3 4\\n5 9'\n\"\"\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nfor _ in range(n):\n    l1, r1, l2, r2 = map(int, sys.stdin.readline().split())\n    print(max(l1, r2) + min(r1, l2))\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 6 3 4\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8') == '2 1\\n3 4\\n3 2\\n1 2\\n3 7'\n\"\"\"\n\nfrom typing import List, Tuple\n\nfrom icontract import require, ensure\n\nfrom correct_programs.common import Lines\n\nNUMBER_TO_CHAR_MAP: dict[int, str] = {\n    1: 'A',\n    2: 'B',\n    3: 'C',\n    4: 'D',\n    5: 'E',\n    6: 'F',\n    7: 'G',\n    8: 'H',\n    9: 'I',\n    10: 'J',\n}\n\nNUMBER_TO_CHAR_MAP_REVERSE: dict[str, int] = {\n    v: int(k) for k, v in NUMBER_TO_CHAR_MAP.items()\n}\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('[3,2,0,-4]') == 'true'\nassert solution('[1,2]') == 'true'\nassert solution('[1]') == 'false'\nassert solution('[2,0,4]') == 'true'\nassert solution('[2,0,2]') == 'true'\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"[3,2,0,-4]\",1) == \"true\"\nassert solution(\"[1,2]\",0) == \"true\"\nassert solution(\"[1]\",-1) == \"false\"\n\"\"\"\n\n\nclass Node:\n    def __init__(self, value, next=None):\n        self.value = value\n        self.next = next\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3,2,0,-4\") == True\nassert solution(\"1,2\") == True\nassert solution(\"1\") == False\nassert solution(\"3,2,0,-4\") == True\nassert solution(\"3,2,0,-4\") == True\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3,2,0,-4') == True\nassert solution('1,2') == True\nassert solution('1') == True\nassert solution('1,2,3') == False\nassert solution('1,2,3,4,5') == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3,2,0,-4') == True\nassert solution('1,2') == True\nassert solution('1') == True\nassert solution('1,2,3,4') == False\nassert solution('1,2,3,4,5,2,3') == True\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 0 -4\") == True\nassert solution(\"1 2\") == True\nassert solution(\"1\") == False\nassert solution(\"1 2\") == True\nassert solution(\"1 2 3\") == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\""
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3,2,0,-4') == True\nassert solution('1,2') == True\nassert solution('1') == False\nassert solution('-1') == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"[3,2,0,-4]\\n1\") == True\nassert solution(\"[1,2]\\n0\") == True\nassert solution(\"[1]\\n-1\") == False\n\"\"\"\nimport math\n\n\nclass Node:\n    def __init__(self, value, next=None):\n        self.value = value\n        self.next = next\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"[3,2,0,-4]\\n1\") == True\nassert solution(\"[1,2]\\n0\") == True\nassert solution(\"[1]\\n-1\") == False\nassert solution(\"[1]\\n0\") == False\nassert solution(\"[1]\\n1\") == False\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2,7,11,15) == [0,1]\n\nprint(solution(2,7,11,15))"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 1 2 3 4\") == \"0 1\"\nassert solution(\"1 1 2 3\") == \"1 2\"\nassert solution(\"0 1 2 3\") == \"0 1\"\nassert solution(\"1 2 1 3\") == \"2 1\"\nassert solution(\"0 1 2 3 4\") == \"0 1\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 7 11 15\") == [0, 1]\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str([2, 7, 11, 15])) == '0 1'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution([2, 7, 11, 15]) == [0, 1]\nprint(solution([2, 7, 11, 15]))\n\n\"\"\"\n\n\n\"\"\"\nNotes\n\nInitial thoughts:\n\nStore value -> index in dictionary\n\nThis doesn't work because it doesn't allow duplicates.\n\n\"\"\"\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 7 11 15') == '0 1'\nassert solution('2,7,11,15') == '0 1'\nassert solution('2,11,7,15') == '1 2'\nassert solution('2,11,15,7') == '1 3'\nassert solution('0,7,7,15') == '0 3'\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 7 11 15') == '[0, 1]'\nassert solution('2 7 11 9') == '[0, 1]'\nassert solution('2 7 11 8') == '[0, 1]'\n\nassert solution('2 7 11 15') == '[0, 1]'\nassert solution('2 7 11 9') == '[0, 1]'\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution([2, 7, 11, 15]) == [0, 1]\n\n\"\"\""
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(None) == None\n\nassert solution(\"1 1\") == '0'\nassert solution(\"2 2\") == '0'\nassert solution(\"3 3\") == '0'\nassert solution(\"3 3\\n2 2\") == '0'\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"nums = [2, 7, 11, 15], target = 9\") == [0, 1]\nassert solution(\"nums = [2, 7, 11, 15], target = 7\") == [0, 2]\nassert solution(\"nums = [2, 7, 11, 15], target = 15\") == [0, 3]\nassert solution(\"nums = [2, 7, 11, 15], target = 4\") == [1, 3]\n\n\"\"\"\n\nnums = [2, 7, 11, 15]\ntarget = 9\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '1'\n\"\"\"\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '1'\nassert solution('6') == '2'\n\"\"\"\n\nimport numpy as np\n\nn = int(input())\n\nintersections = np.zeros((n, n))\nfor i in range(n):\n    for j in range(n):\n        # print(i, j)\n        intersections[i, j] = np.sum(np.arange(i, j + 1)) * (j - i + 1)\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == 1\nassert solution('3') == 0\n\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1 1 1\\n2 1 2\\n3 1 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n\") == \"0\\n\"\nassert solution(\"4\\n\") == \"1\\n\"\n\"\"\"\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n2') == '0'\nassert solution('2\\n3') == '0'\nassert solution('2\\n4') == '1'\nassert solution('6\\n6') == '0'\nassert solution('3\\n4') == '1'\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '1'\nassert solution('6') == '0'\n\"\"\"\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '1'\n\"\"\"\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n4') == '1'\nassert solution('3\\n6') == '2'\nassert solution('3\\n6\\n4') == '0'\nassert solution('3\\n6\\n4\\n4') == '1'\n\nprint('Success')"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\nprint(solution(input()))\n\nprint(solution('''1\n2 1 1 2 1'''))\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\n\"\"\"\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\"\"\""
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\nassert solution('2\\n1 2') == 'impossible'"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\"\"\""
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\nassert solution('5\\n2 2 3 1 1 2') == 'impossible'\nassert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\nimport pytest\nfrom solution import solution\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\"\"\""
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\n\"\"\"\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\"\"\""
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''184 1''') == '180'\nassert solution('''123450995 1''') == '123451000'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('184 1') == '180'\n\"\"\"\nimport sys\n\nC, K = map(int, sys.stdin.readline().split())\nmoney = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]\nresult = 0\n\nfor i in money:\n    if C == 0:\n        break\n    else:\n        result += C // i\n        C = C % i\n\nprint(result)\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('184 1\\n') == '180'\n\"\"\"\n\na, b = stdin.split('\\n')\na, b = int(a), int(b)\nc = 0\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'\n\"\"\""
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(    '184 1') == '180'\nassert solution(    '123450995 1') == '123451000'\n\"\"\"\n\nimport sys\n\na, b = [int(i) for i in sys.stdin.readline().split()]\n\nprint(int(str(a)[:b]))\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'\n\"\"\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(12345) == 12300\n\"\"\"\n\nimport sys\n\nK = int(sys.stdin.readline())\nwhile K!= 0:\n    C = int(sys.stdin.readline())\n    C = C * (K * 10)\n    C = int(C / 10)\n    print(C)\n    K = int(sys.stdin.readline())\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\"\"\"\n\nimport sys\n\nC, K = sys.stdin.readline().split()\nC = int(C)\nK = int(K)"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 1\\n1 0\\n1 1\") == \"0.0\"\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\") == \"0.000000\"\n\"\"\""
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n2 2\\n3 3') == '0.000000'\n\nassert solution('1 1\\n2 2\\n3 3\\n1 1\\n2 2\\n3 3') == '0.000000'\n\nassert solution('1 1\\n2 2\\n3 3\\n4 4\\n1 1\\n2 2\\n3 3\\n4 4') == '0.000000'\n\nassert solution('1 1\\n2 2\\n3 3\\n4 4\\n1 1\\n2 2\\n3 3\\n4 4\\n1 1\\n2 2\\n3 3\\n4 4') == '0.000000'"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == '0.0'\n\"\"\"\n\n\n\"\"\"\nMy solution 1\n\"\"\"\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\n\nprint(solution(input()))"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n3 4\") == \"0.400\"\nassert solution(\"2 3\\n4 5\") == \"0.400\"\nassert solution(\"3 3\\n4 4\\n5 5\") == \"0.500\"\n\nassert solution(\"2 0\\n3 4\") == \"0.500\"\nassert solution(\"1 1\\n2 0\") == \"0.500\"\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\ncoordinates = [list(map(int, sys.stdin.readline().strip().split())) for _ in range(n)]"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\") == \"0.000000\"\n\"\"\""
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n2 2\\n3 3') == '0'\nassert solution('0 1\\n1 0\\n1 1') == '0.0'\n\"\"\""
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\") == \"0.000000\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1 2 4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1 2 6 8\"\nassert solution(\"4\\n4\\n2 1 2\\n2 2 1\\n2 3 4\") == \"1 2 3 4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1 2 6 8\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == '1\\n2\\n4'\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == '1\\n2\\n6\\n8'\n\n################################################################################\n\nGiven a number of sticks of varying length, return all possible ways to cut them\ninto smaller sticks such that no 2 sticks have the same length.\n\n-----Input-----\nThe first line of input contains an integer $N$, $1 \\leq N \\leq 10^5$.\n\nThe next line contains $N$ space-separated integers $A_1, \\dots, A_N$\n(where $1 \\leq A_i \\leq 10^6$), the lengths of the $N$ sticks.\n\n-----Output-----\nPrint all possible ways of cutting the sticks, sorted lexicographically.\n\n-----Examples-----\nSample Input 1:\n7\n1 2 2 4 5 8 9\nSample Output 1:\n[[1, 2, 2, 4], [1, 4, 5, 8], [1, 5, 9]]\n\nSample Input 2:\n8\n4 6 3 3 2 4 6 2\nSample Output 2:\n[[3, 2, 2, 4], [3, 3, 4], [3, 6], [4, 4], [4, 6]]"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2\\n1 2 2\\n3 2 3 4\\n3 4 2 1\") == \"1\\n2\\n4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input) == expected_output"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == '1\\n2\\n4'\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == '1\\n2\\n6\\n8'\nassert solution(\"7\\n4\\n5 1 3 6\\n2 3 5\\n3 4 5 7\\n2 3 4\\n5 7 1 8\\n2 5 8\\n3 6 8\") == '1\\n2\\n5\\n7'\nassert solution(\"10\\n3\\n2 5 6\\n1 2 8\\n9 10 11 12\\n2 3 7\\n9 11 12\\n12 1\\n3 4 5\\n10 9\\n5 7\\n6 8\\n4\") == '1\\n2\\n3\\n5\\n7\\n8\\n10'\nassert solution(\"10\\n3\\n1 2 8\\n9 10 11 12\\n2 3 7\\n9 11 12\\n12 1\\n3 4 5\\n10 9\\n5 7\\n6 8\\n4\") == '1\\n2\\n3\\n5\\n7\\n8\\n10'\n\n\"\"\"\n\nimport numpy as np\n\nstdin = open(\"../stdin.txt\", \"r\")\n\nN = int(stdin.readline())\nE = int(stdin.readline())"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a b') == 'b a'\nassert solution('a b c') == 'c b a'\nassert solution('a b c d') == 'd c b a'\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1 2 4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1 2 6 8\"\n\nprint(\"Tests passed.\")\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1\\n2\\n4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\n\"\"\"\n\nfrom typing import List, Tuple\nimport math\n\nn = int(input())\n\nevening_list: List[int] = []\nlast_evening: List[int] = []\n\nfor _ in range(int(input())):\n    tmp = input().split()\n    evening_list.append(tmp[1:])\n    last_evening.append(tmp[0])\n\nevening_list = list(map(list, zip(*evening_list)))\n\nknow_all_songs = []\nknow_all_songs_index = []\n\nfor even in evening_list:\n    know_all_songs.append(len(set(even)))\n\nknow_all_songs.sort()\n\nfor even in evening_list:\n    if know_all_songs.count(len(set(even))) == len(set(even)):\n        know_all_songs_index.append(even.index(last_evening[evening_list.index(even)]))\n\nknow_all_songs_index.sort()\n\nfor i in know_all_songs_index:\n    print(i+1)"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3\\n2 1 2\\n3 2 3 4') == '1 2 4'\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n\"\"\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\nassert solution(\"3 4 2\") == \"12\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\nassert solution(\"2 3 5\") == \"44\"\n\"\"\"\n\n\"\"\"\nThere are a total of $N$ eye designs, $T$ nose designs, and $M$ mouth designs. These are stacked up in $N \\times T \\times M$ dimensions. There are a total of $N \\cdot T \\cdot M$ possible designs, with order.\n\nThere are $N$ * $T$ * $M$ permutations of eye designs, with order.\n\nFor a given permutation, there is also a permutation of nose designs with order.\n\nThere are $N \\cdot T \\cdot M!$ unique permutations of nose designs.\n\nEach nose design can be paired with $N$ unique eye designs.\n\nFor a given permutation, there is also a permutation of mouth designs with order.\n\nThere are $N \\cdot T \\cdot M!$ unique permutations of mouth designs.\n\nEach mouth design can be paired with $N$ unique eye designs.\n\nFor a given permutation, there is also a permutation of eye, nose, and mouth designs with order.\n\nFor a given permutation, there is also a permutation of eye, nose, and mouth designs with order.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is $N \\cdot T \\cdot M!$.\n\nThe total number of unique permutations of eye, nose, and mouth designs is"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\nassert solution('1 1 1') == '1'\n\n\"\"\""
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3 4 5) == \"60\"\nassert solution(2 2 2) == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\n\nprint(\"Passed all tests...\")\n\"\"\"\n\n\"\"\"\nTo solve this problem, you will be given three integers N,T,M on one line and then, in the next N lines, you will be given the possible eye colors for the Jack-O-lanterns. For every line that has an eye color, you must use one eye. The same goes for the nose and mouth.\n\nYour task is to find the number of unique designs, meaning the number of unique eye colors, nose colors and mouth colors.\n\nExample:\nInput:\n3 4 5\nbrown\nblack\nblue\nbrown\nblack\nblue\ngreen\nOutput:\n15\n\nYou would have to use all the eyes three times (brown, black, blue) and all the nose colors three times (black, blue, green) and all the mouth colors three times (brown, blue, green). That would be a total of 15 unique Jack-O-lanterns.\n\nSample Input 2:\n2 2 2\nred\nblue\nred\nyellow\nOutput:\n6\n\nYou would use the red eye twice, the blue eye twice and the yellow eye twice to make 6 unique designs.\n\"\"\"\n\nN, T, M = input().split()\n\nN = int(N)\nT = int(T)\nM = int(M)"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\nassert solution('1 1 1') == '1'\nassert solution('5 4 3') == '15'\nassert solution('2 1 1') == '2'\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\nprint(\"Passed\")\n\"\"\""
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\nassert solution('1 1 1') == '1'\nassert solution('2 1 1') == '1'"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n\"\"\""
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 -1 4\") == \"2.5\"\n\nSample Case #1:\n\nGiven the sample input, the first at-bat resulted in a triple ($3$\u00a0bases), strikes out ($0$\u00a0bases), and a double ($2$\u00a0bases). A total of $5$ at-bats resulted in a slugging percentage of $\\frac{3+0+2}{5} \\approx 0.85$.\n\nSample Case #2:\n\nGiven the sample input, the first at-bat resulted in a walk (-1\u00a0base), a single ($1$\u00a0base), a home run ($4$\u00a0bases), and a triple ($3$\u00a0bases). A total of $6$ at-bats resulted in a slugging percentage of $\\frac{1 + 4}{6} \\approx 0.5$.\n\nExplanation:\n\nIn this at-bat, the batter walked (-1\u00a0base), struck out (0\u00a0bases), hit a home run (4\u00a0bases) and hit a triple (3\u00a0bases).\n\"\"\""
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 0 2\") == '1.6666666666666667'\nassert solution(\"3 -1 4\") == '2.5'\nassert solution(\"5 -3 4\") == '2.6666666666666665'\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n0 2 -1 4') == '2.5'\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n3 0 2\\n') == '1.6666666666666667'\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3\\n1 -1 4\") == \"2.5\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 1 2\") == \"2.0\"\n\"\"\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n3 0 2') == '1.6666666666666667'\n\"\"\"\n\nn = int(input())\nvalues = list(map(int, input().split()))\n\ntotal = 0\nfor v in values:\n    if v > 0:\n        total += v\n\ntotal_at_bats = sum(values)"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3\\n1 -1 4\") == \"2.5\"\n\"\"\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 0 2') == '1.6666666666666667'\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n3 0 2\") == \"1.6666666666666667\"\n\"\"\""
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\") == '6'\nassert solution(\"15 12\") == '7'"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3\\n') == '6'\nassert solution('15 12\\n') == '7'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3\\n1 2 3 5 7 9 11') == '3'\nassert solution('15 12\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15') == '7'\n\"\"\""
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\") == \"6\"\nassert solution(\"15 12\") == \"7\"\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\ni = 2\nwhile k > 1:\n    k -= 1\n    i += 1\n    if n % i == 0:\n        continue\n    else:\n        print(i)\n        break\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3\\n') == '6'\nassert solution('15 12\\n') == '7'\nprint('The string above should be \"6\"')\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\") == \"6\"\n\"\"\"\n\nN, K = input().split()\nfor i in range(1, int(N) + 1):\n    if i % int(K) == 0 and i!= int(K):\n        print(i)\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 3\\n') == '6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '1'\nassert solution('1 2 3 4 5') == '4'\nassert solution('2 1 3 4 5') == '2'\nassert solution('2 1 3 4 5 6') == '5'\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3\\n') == '6'\n\"\"\""
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123864 123865\") == 1\nassert solution(\"198765 198769\") == 0\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123864 123865\") == '1'\nassert solution(\"198765 198769\") == '0'\n\nprint(solution(stdin))\n\nimport sys\nL, H = [int(x) for x in stdin.read().strip().split(' ')]\nprint((((H-L+1)*(H-L))//2) * 6)\n\n-----Problem-----\n\nIn a given string, if you can replace a sequence of k digits with another sequence of p digits, what is the maximum possible sum of the replaced sequence.\n\nExample:\n\nGiven the string '1234', you can replace a sequence of digits from 1 to 4 with another sequence of digits from 1 to 9, in which the 1 and 9 have been excluded. The new string is '123', and the sum of the numbers after converting it is 12+3=15.\n\nSolution:\n\nIn the above example, the sum of numbers in new sequence is max(1+2+3+4, 1+2+3+9, 1+2+6+4, 1+2+6+9, 1+3+4+9, 1+3+6+4, 1+3+6+9, 1+4+4+9, 1+4+6+4, 1+4+6+9) = 36.\n\nNote that the sum of the numbers in the new sequence will always be <= sum of numbers in the original string because the digits, 1 and 9, are excluded.\n\nNow, the question is how do you compute the sum of numbers in the new sequence?\n\nFirst, note that the sum of numbers in original string is defined as sum of digits in the original string.\n\nFor example, if the original string is '1234', then sum of numbers in the original string is 1 + 2 + 3 + 4 = 10.\n\nNow, if you replace the sequence of 4 digits with another sequence of digits, say {1, 2, 3, 6}, then sum of numbers in the new string is 10 + 1 + 2 + 3 + 6 = 25.\n\nSo, the maximum possible sum of the new sequence is sum of numbers in the original string - (sum of numbers in the original string - sum of numbers in the new string) = 10 - (10 - 25) = 5.\n\nWe can generalize the above solution for the new sequence. If we replace the original string with a new string, where digits in the original string are replaced by digits in the new string, then the sum of numbers in the new string is defined as (sum of digits in the new string - sum of digits in the original string).\n\nSo, we just need to take the sum of digits in the new string and the sum of digits in the original string.\n\nSo, the maximum possible sum of the new sequence is sum_new_string + sum_old_string - 2 * sum_old_string = sum_new_string + sum_old_string - 2 * sum_old_string = sum_new_string.\n\nSo, the maximum possible sum of the new sequence is the sum of the new string.\n\nThe maximum possible sum of the new sequence can also be calculated by subtracting the sum of the old string from the sum of the new string.\n\nsum_old_string = sum_new_string = sum_new_string = sum_old_string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nThe maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string.\n\nSo, the maximum possible sum of the new sequence is the sum of the old string."
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123456 123456\") == 1\n\n\"\"\"\n\nimport sys\nfrom itertools import product\nfrom functools import reduce"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('123864 123865') == 1\nassert solution('198765 198769') == 0\n\"\"\"\n\nimport math\nfrom itertools import permutations"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'\n\nprint('Success')\n\na, b = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123864 123865\") == 1\nassert solution(\"198765 198769\") == 0\nassert solution(\"123864 123867\") == 0\nassert solution(\"100100 100101 100111 100119\") == 0\nassert solution(\"123864 123864\") == 1\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('123864 123865') == 1\nassert solution('198765 198769') == 0\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n') == '0.50000000'\nassert solution('3\\n') == '0.66666667'\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1\") == \"0.5\"\nassert solution(\"3\\n1\") == \"0.66666667\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n') == '0.50000000'\nassert solution('3\\n') == '0.66666667'\n\n-----Explanation-----\nIn this example, the first line of input corresponds to the number $N = 2$.\n\nIn the first year, there are 2 citizens to give gifts to.\n\nIn the first year, there are 2 possible outcomes of the shuffle:\n\n1. The first citizen sends to her/his neighbor.\n2. The second citizen sends to his/her neighbor.\n\nSo, out of $2$ possibilities, the first year, one of the outcomes occurred.\n\nIn the second year, the same number of outcomes will happen, so the probability of sending to the neighbor is $2/2 = 1$.\n\nIn the third year, the same number of outcomes will happen, so the probability of sending to the neighbor is $2/2 = 1$.\n\nSo, the probability of a neighbor receiving a gift from a neighbor in the first year is $2/2 = 1$; in the second year, it is $2/2 = 1$; and in the third year, it is $2/2 = 1$.\n\nIn the end, the probability of a neighbor receiving a gift from a neighbor is $1/2 = 0.5$.\n\nSample Input 1 corresponds to the first example.\n\nSample Input 2 corresponds to the second example.\n\nSample Input 2 is harder because the number of people is larger.\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"0.50000000\"\nassert solution(\"3\") == \"0.66666667\"\n\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'\n\"\"\"\n\nfrom math import factorial as fac\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2\") == \"0.5\"\nassert solution(\"3\\n3\") == \"0.66666667\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'\n\nfrom math import gcd\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n1') == '0.5'\nassert solution('1\\n2\\n3\\n3\\n4\\n4') == '0.75'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7') == '0.83333333'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8') == '0.875'\n\n\"\"\"\n\nfrom math import sqrt\nfrom decimal import Decimal\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n') == '0.50000000'\nassert solution('3\\n') == '0.66666667'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2') == '0.50000000'\nassert solution('1\\n1') == '0.0'\nassert solution('2\\n2') == '0.50000000'\nassert solution('2\\n3') == '0.83333333'\nassert solution('4\\n4') == '1.0'\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"180\") == \"triple 20\\ntriple 20\\ntriple 20\"\n\"\"\""
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('180') == 'triple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\"\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\nassert solution('1') == 'impossible'\nassert solution('0') == 'impossible'\nassert solution('101') == 'impossible'\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(180) == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution(96) == 'triple 19\\ndouble 15\\nsingle 9'"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"180\") == \"triple 20\\ntriple 20\\ntriple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"\n\"\"\"\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"180\") == \"triple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\""
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\nassert solution('1') == 'impossible'\nassert solution('5') == 'impossible'\nassert solution('20') == 'impossible'\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"180\") == \"triple 20\\ntriple 20\\ntriple 20\"\nassert solution(\"96\") == \"triple 19\\ntriple 19\\ndouble 15\\n\"\nassert solution(\"40\") == \"impossible\"\nassert solution(\"40\") == \"impossible\"\nassert solution(\"80\") == \"impossible\"\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('180') == 'triple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 1 3\") == \"2\"\n\nprint('Success')\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 7 5') == '36'"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"10 4 7\n\"\"\"\n) == \"168\"\nprint(\"Test passed.\")"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1, 2') == '2'\nassert solution('1, 2, 3') == '6'\nassert solution('1, 2, 3, 4') == '20'\nassert solution('1, 2, 3, 4, 5') == '60'\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"10 4 7\") == '168'\nassert solution(\n\"5 2 2\") == '36'\n\n\"\"\"\n\na, b, c = map(int, stdin.split())\n\nvolume = a * b * c * 4\n\nprint(volume)\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 6 8\\n2 4 6') == '48'\nassert solution('3 7 5\\n1 2 3') == '35'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 2') == '36'\nassert solution('10 4 7') == '168'\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4 7\") == '168'\n\"\"\"\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\nassert solution(\"1 5 2\") == \"15\"\n\nassert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n3\\n2\\n1\\n1\\n1\\n1\\n\") == \"1\"\nassert solution(\"4\\n3\\n3\\n3\\n3\\n3\\n3\\n\") == \"7\"\nassert solution(\"5\\n9\\n7\\n3\\n3\\n1\\n9\\n7\\n\") == \"1\"\n\nprint(solution(stdin=stdin))\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n3 10\\n5 8\") == \"7\"\n\nimport sys\nimport os"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10\") == \"7\"\nassert solution(\"2 3 8\") == \"1\"\n\"\"\"\n\nn = int(stdin.readline())\ningredients = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n\nsourness, bitterness = 1e9, 0\nfor a, b in ingredients:\n    s, b = min(a, b), max(a, b)\n    sourness *= s\n    bitterness += b\n\nprint(sourness - bitterness)\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\") == \"7\"\nassert solution(\"2 3 8\") == \"1\""
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 4') == '2'\nassert solution('4\\n1 2 3 4') == '2'\n\"\"\"\n\nfrom collections import namedtuple\n\nIngredients = namedtuple('Ingredients', ['sourness', 'bitterness'])"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"6\"\nassert solution(\"3\\n1 1 1\") == \"0\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 10\") == \"2\"\nassert solution(\"4 10\") == \"5\"\nassert solution(\"5 10\") == \"6\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n10\n15\n18''') == '7'\nassert solution('''2\n3 8\n5 8''') == '1'\n\"\"\"\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10\\n3 10\") == \"1\"\nassert solution(\"5 8\\n5 8\") == \"1\"\nassert solution(\"1 1\\n1 1\") == \"0\"\n\"\"\"\nfrom tools import timing\n\nFILE_DIR = __file__.rsplit(\"/\", 1)[0]\nINPUT_FILE = FILE_DIR + \"/input.txt\"\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n4 1\\n8 9\\n7 3\\n3 8\\n9 8\\n1 1\\n2 2\\n5 5\") == '1'\n\nassert solution(\"3\\n8 1\\n7 2\\n5 3\") == '7'\n\nassert solution(\"4\\n6 5\\n9 7\\n7 3\\n3 8\\n9 8\\n1 1\\n2 2\\n5 5\") == '1'\n\nprint(\"Success\")\n\n-----Problem-----\nThe International Marsden Cup is going to be held today.\n\nThis contest consists of $N$ competitors, who have each one their own flag. Each competitor has to choose one of the flags to be their team flag. Since each team must have its own colour, it is possible to choose multiple flags for each competitor.\n\nThe flag consists of a red stripe on the left and a blue stripe on the right. The stripes on the left and right sides have the same length, equal to the length of the flag. The length of the stripe on the left side is also equal to the length of the stripe on the right side, but they can have a different length.\n\nFor example, the flag could be:\n\n.\n.\n.\n\nThe colours on the left and right sides are such that it is possible to place them on top of each other.\n\nAn example of how to choose a team flag could be:\n\n.\n.\n.\n\n.\n\n-----Task-----\nYou are given the length of the stripes on the left and right sides, as well as the length of the stripes on the left and right sides of the flag you need to choose for the contest.\n\nYour task is to find the minimum possible length of the stripes on the left and right sides of the flag such that you can place them on top of each other.\n\n-----Constraints-----\n$1 \\leq N \\leq 10^5$\n\n$0 \\leq stripes \\leq 1 \\cdot 10^5$\n\n$0 \\leq stripesLeft \\leq stripesRight \\leq 1 \\cdot 10^5$\n\n$0 \\leq flag \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagLeft \\leq flagRight \\leq 1 \\cdot 10^5$\n\n$0 \\leq stripesLeft \\leq flagLeft \\leq 1 \\cdot 10^5$\n\n$0 \\leq stripesRight \\leq flagRight \\leq 1 \\cdot 10^5$\n\n$0 \\leq flag \\leq 1 \\cdot 10^5$\n\n$0 \\leq stripes \\leq flag \\leq 1 \\cdot 10^5$\n\n$0 \\leq stripesLeft \\leq stripesRight \\leq flagLeft \\leq flagRight \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagLeft \\leq flagRight \\leq 1 \\cdot 10^5$\n\n$0 \\leq stripes \\leq flag \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagLeft \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagRight \\leq 1 \\cdot 10^5$\n\n$0 \\leq flag \\leq 1 \\cdot 10^5$\n\n$0 \\leq stripesLeft \\leq 1 \\cdot 10^5$\n\n$0 \\leq stripesRight \\leq 1 \\cdot 10^5$\n\n$0 \\leq stripes \\leq 1 \\cdot 10^5$\n\n$0 \\leq stripes \\leq flag \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagLeft \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagRight \\leq 1 \\cdot 10^5$\n\n$0 \\leq flag \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagLeft \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagRight \\leq 1 \\cdot 10^5$\n\n$0 \\leq flag \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagLeft \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagRight \\leq 1 \\cdot 10^5$\n\n$0 \\leq flag \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagLeft \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagRight \\leq 1 \\cdot 10^5$\n\n$0 \\leq flag \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagLeft \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagRight \\leq 1 \\cdot 10^5$\n\n$0 \\leq flag \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagLeft \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagRight \\leq 1 \\cdot 10^5$\n\n$0 \\leq flag \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagLeft \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagRight \\leq 1 \\cdot 10^5$\n\n$0 \\leq flag \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagLeft \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagRight \\leq 1 \\cdot 10^5$\n\n$0 \\leq flag \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagLeft \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagRight \\leq 1 \\cdot 10^5$\n\n$0 \\leq flag \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagLeft \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagRight \\leq 1 \\cdot 10^5$\n\n$0 \\leq flag \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagLeft \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagRight \\leq 1 \\cdot 10^5$\n\n$0 \\leq flag \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagLeft \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagRight \\leq 1 \\cdot 10^5$\n\n$0 \\leq flag \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagLeft \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagRight \\leq 1 \\cdot 10^5$\n\n$0 \\leq flag \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagLeft \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagRight \\leq 1 \\cdot 10^5$\n\n$0 \\leq flag \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagLeft \\leq 1 \\cdot 10^5$\n\n$0 \\leq flagRight \\leq 1 \\cdot 10^5$\n\n$0 \\le"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\nSimon says smile.\\n') =='smile.'\nassert solution('3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n') == 'raise your right hand.\\nraise your left hand.'\n\n--------------------\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\nSimon says smile.\\n') =='smile.\\n'\nassert solution('3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n') == 'raise your right hand.\\n raise your left hand.\\n'\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.') == 'Simon says raise your left hand.'\nassert solution('1\\nSimon says smile.\\n') == ''"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\nSimon says smile.\\n\") == \"smile.\"\nassert solution(\"3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n\") == \"raise your right hand.\\nraise your left hand.\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\nSimon says smile.\\n') =='smile.'\nassert solution('3\\nSimon says raise your right hand.\\n'\n                 'Lower your right hand.\\n'\n                 'Simon says raise your left hand.\\n') == 'raise your left hand.'\n\n\"\"\""
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\nSimon says smile.\n\n2\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\n\"\"\") == \"\"\"\nsmile.\n\nraise your right hand.\nlower your right hand.\n\"\"\"\n\nprint('Success')\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\nSimon says smile.\\n') =='smile.\\n'\nassert solution('2\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n') == 'raise your left hand.\\n'\n\"\"\"\n\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\nSimon says smile.\\n') =='smile.\\n'\nassert solution('2\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n') == 'raise your right hand.\\nraise your left hand.\\n'\n'''"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\nSimon says smile.\n\"\"\") == \"smile.\"\nassert solution(\"\"\"\n2\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\") == \"raise your right hand.\\nraise your left hand.\"\nassert solution(\"\"\"\n3\nSimon says smile.\nSimon says smile again.\nSimon says smile better.\n\"\"\") == \"smile.\\nsmile again.\\nsmile better.\"\nassert solution(\"\"\"\n4\nSimon says smile.\nSimon says smile better.\nSimon says smile again.\nSimon says smile.\n\"\"\") == \"smile.\\nsmile better.\\nsmile again.\\nsmile.\"\n\"\"\""
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\nSimon says smile.\\n\") == \"smile.\"\n\nassert solution(\"3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n\") == \"raise your right hand.\\nraise your left hand.\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\"\"\"\n\nfrom typing import List, Dict, Union, Tuple\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\n\"\"\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\"\"\"\n\nimport sys\n\nnumbers = list(map(int, sys.stdin.readline().split()))\n\nm = []\nfor i in range(len(numbers)):\n    if i < 7:\n        m.append(i + 1)\n    else:\n        m.append(0)\n\nd = [0,0,0,0]"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\nassert solution(\"1 2 3 4 5 6 7 8\") == \"8\"\n\"\"\"\n\n\"\"\"\n#### Explanation\n\nA few things you should note about this problem:\n\n    - Registers are stored modulo some prime number, so we can only increment them with multiples of that prime number\n    - Any overflow of a register modulo the prime number is reset to zero, and the register increments by one\n    - You can only perform increments on registers where the value is less than the size of the register, so if the size is 3 and the value is 4, it cannot be incremented\n    - In order to avoid an infinite loop, the registers should always have a value less than their size, so we don't have to worry about the case where the value is equal to the size\n    - You have to perform the increment as many times as possible, so the largest possible increment is the difference between the value and the size, as this is the largest increment you can perform without blowing up the computer\n    - Any increment that does not go exactly to the size of the register will not cause a register overflow, so you do not need to take account of that case\n\n\n#### Solution\n\nLet's take a look at the solution first:\n\n    - In order to handle the cases where the size of a register is greater than the value of the register, we can consider the size of the register as $2^n$ and the value of the register as $2^n - 1$\n    - When incrementing a register, we need to check whether the increment is a multiple of the prime number that is a factor of the register size. If it is, we can increment the register by the increment itself. Otherwise, we need to check if the increment is a multiple of a prime number that is a factor of the register size, and if it is, we can increment the register by the increment modulo that prime number. Otherwise, we can't increment the register\n    - Therefore, we need to check whether the increment is a multiple of the prime number that is a factor of the register size, and if it is, we need to check whether the increment is a multiple of the prime number that is a factor of the register size. The first condition is true if and only if the increment is greater than or equal to the difference between the value of the register and the size of the register. In this case, we can just increment the register by the difference\n    - For the second case, we need to check if the increment is a multiple of the prime number that is a factor of the register size, and if it is, we need to check whether the increment is greater than or equal to the difference between the value of the register and the size of the register. In this case, we can just increment the register by the difference modulo that prime number, and if the increment is larger than the difference, we can also increment the register by the increment\n\nThe solution is simple:\n\n\"\"\"\n\n\"\"\"\n#### Solution: Python"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n\"\"\"\n\nfrom itertools import cycle"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''0 0 4 6 10 12 16 18''') == '5'\nassert solution('''0 1 2 3 4 5 6 7 8''') == '0'\nassert solution('''0 1 2 3 4 5 6 7 8''') == '0'\nassert solution('''0 1 2 3 4 5 6 7 8''') == '0'\nassert solution('''0 1 2 3 4 5 6 7 8''') == '0'\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n\"\"\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3'\n\"\"\"\n\nimport sys\n\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.children = {}\n        self.weight = 0"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected_stdout\nprint(solution(stdin))\n\n----\nfor line in stdin.split(\"\\n\"):\n    if line.strip():\n        n,k = [int(i) for i in line.strip().split(\" \")]\n        for i in range(n):\n            for j in range(i+1,n):\n                if hamming(stdin[i],stdin[j]) == k:\n                    print(i,j)\n                    break\n        else:\n            print(\"Impossible\")\n        break\n----\nimport sys\nn, k = [int(i) for i in sys.stdin.readline().split()]\nfor i in range(n):\n    for j in range(i + 1, n):\n        if hamming(sys.stdin[i], sys.stdin[j]) == k:\n            print(i, j)\n            break\n    else:\n        print(\"Impossible\")\n        break\n----\nimport sys\n\nn, k = [int(i) for i in sys.stdin.readline().split()]\n\nfor i in range(n):\n    for j in range(i+1, n):\n        if hamming(sys.stdin[i], sys.stdin[j]) == k:\n            print(i, j)\n            break\n    else:\n        print(\"Impossible\")\n        break\n----"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n0 2\\n0 3\"\n\n\"\"\"\n\n\nimport math\nimport sys\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3\\n0 1\\n1 2\\n2 3'\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nn, k = [int(x) for x in stdin.readline().split()]\ntree = [[]]\nfor i in range(n):\n    tree.append([])\n    for j in range(n):\n        tree[i].append(k*k)\n    if i > 0:\n        tree[i][i-1] = 1\n    if i < n-1:\n        tree[i][i+1] = 1\n    for j in range(i-1):\n        tree[j][i] = 1\n    for j in range(i+2, n):\n        tree[j][i] = 1\nans = min(tree[0])\nfor i in range(n-1):\n    for j in range(n-i-1):\n        if ans >= tree[j+1+i][j]:\n            ans = min(ans, tree[j+1+i][j])\nprint(ans)\n\n\"\"\"\nSolution 2\n\"\"\"\n\nn, k = [int(x) for x in stdin.readline().split()]\nans = k*k\ntree = [[]]\nfor i in range(n):\n    tree.append([])\n    for j in range(n):\n        tree[i].append(k*k)\n    if i > 0:\n        tree[i][i-1] = 1\n    if i < n-1:\n        tree[i][i+1] = 1\n    for j in range(i-1):\n        tree[j][i] = 1\n    for j in range(i+2, n):\n        tree[j][i] = 1\nfor j in range(n):\n    if ans > min(tree[j]):\n        ans = min(tree[j])\nprint(ans)"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\nGC\\nAC\") == \"3\"\nassert solution(\"4 1\\nGCCCCCCT\\nCGGCCCCG\\nGGCCCCGC\\nGCCCCCCG\") == \"0\"\nassert solution(\"5 2\\nCCTGC\\nGGCGT\\nCGTGC\\nCCGTC\\nCGGCC\") == \"2\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n0 2\\n0 3\"\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\\n0 1\\n0 2\\n0 3\"\n\"\"\"\n\nimport sys\nimport string"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\\n\") == \"3\\n0 1\\n1 2\\n2 3\\n\"\nprint(\"It is all good. Let's check it now\")\nassert solution(\"4 1\\nA\\nA\\nG\\nT\\n\") == \"2\\n0 1\\n0 2\\n0 3\\n\"\nprint(\"Another test run. It is fine. Carry on.\")\n\nprint(\"Test passed successfully.\")\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AA\\nAT\\nTT\\nTC\") == '3'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n1 2\\n2 3\"\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\\n0 1\\n0 2\\n0 3\"\n\n\"\"\""
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n1 2\\n2 3\"\n\n\"\"\"\n\nfrom collections import defaultdict, deque"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == -1\nassert solution('abc') == 'c'\nassert solution('abcba') == 'ab'\nassert solution('abbc') == 'ab'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == -1\nassert solution('ba') == 'b'\nassert solution('aabbb') == 'a'\nassert solution('ab') == -1\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"bbbb\") == \"b\"\nassert solution(\"abab\") == \"-1\"\nassert solution(\"abb\") == \"b\"\nassert solution(\"aabb\") == \"a\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'a'\nassert solution('aa') == 'a'\nassert solution('ab') == '-1'\nassert solution('aaa') == 'a'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == '-1'"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == -1\nassert solution('bbb') == 'b'\nassert solution('abbb') == 'b'\nassert solution('bbbba') == 'b'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == -1\nassert solution('aab') == 'a'\nassert solution('babb') == 'b'\nassert solution('abbabbbbb') == 'b'\n\"\"\""
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == '-1'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == -1"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bbabab\") == \"bba\"\nassert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == \"-1\"\nassert solution(\"a\") == \"a\"\nassert solution(\"ba\") == \"-1\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('2 3') == 'Dr. Chaz needs 1 more piece of chicken!'\nassert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('4 100') == 'Dr. Chaz needs 8 pieces of chicken!'\nassert solution('1 1') == 'Dr. Chaz needs 1 more piece of chicken!'\n\n'''\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n\nSample Output 1:\nDr. Chaz will have 80 pieces of chicken left over!\n\nSample Output 2:\nDr. Chaz needs 1 more piece of chicken!\n\"\"\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz needs 1 more piece of chicken!'\n\"\"\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20 100\\n2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\"\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 100\\n2 3') == 'Dr. Chaz will have 3 piece[s] of chicken left over!'\nassert solution('10 1000\\n5 100') == 'Dr. Chaz needs 4 piece[s] of chicken!'"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\"\n\"\"\"\n\n\"\"\"\nN, M = map(int, stdin.readline().split())\nl = [i for i in range(N) if M % i == 0]\nprint(\"Dr. Chaz will have\", l[-1], \"piece[s] of chicken left over!\" if M > l[-1] else \"Dr. Chaz needs\", M - l[-1], \"more piece[s] of chicken!\")\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20 100\\n2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\nprint('Success')\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"-2\"\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == \"0\"\n\n'''\n\n\n\n'''\nGiven the dimensions of $n$ boxes, find the one with the largest volume. You may assume that the width and height of each box are given in distinct lines.\n\n-----Input-----\nThe first line contains an integer $n$, the number of boxes.\n\nThe next $n$ lines each contain three space-separated integers, $l$, $w$, and $h$, each in the range $1 \\leqslant l,w,h < 2^31$, each specifying the length, width, and height, respectively, of the corresponding box.\n\n-----Output-----\nPrint the length, width, and height of the box with the largest volume, each on its own line. If there are multiple boxes with the same largest volume, you may output any of them.\n\n-----Examples-----\nSample Input 1:\n3\n1 2 2\n3 2 1\n2 3 1\nSample Output 1:\n2 3 2\nSample Input 2:\n4\n3 2 5\n1 5 1\n4 1 2\n3 1 3\nSample Output 2:\n4 3 5\n\n'''"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 10\n1 1 2\n2 2 2\n3 2 1''') == '-2'\nassert solution('''3 980\n10 10 10\n10 5 2\n5 3 2\n90 5 2''') == '20'"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 10\\n1 1 1\\n5 2 3\\n5 2 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 10\\n1 1 2\\n2 2 2\\n3 2 1') == '-2'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10\") == \"-2\"\nassert solution(\"3 30\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"-2\"\nassert solution(\"3 10\\n1 1 1\\n5 2 3\\n5 2 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == -2\n\"\"\"\n\nimport sys\n\nV = int(sys.stdin.readline().strip().split()[1])\n\nboxes = []\nfor i in range(int(sys.stdin.readline().strip().split()[0])):\n    boxes.append(tuple(map(int, sys.stdin.readline().strip().split())))\n\nboxes.sort(key=lambda x: x[0] * x[1] * x[2], reverse=True)\n\ndiffs = [b[0] * b[1] * b[2] - V for b in boxes]"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == '-2'\nassert solution(\"3 10\\n5 2 3\\n5 2 1\") == '0'\n\"\"\"\nfrom collections import namedtuple\nimport math\n\n\nclass Box(namedtuple('Box', ('l', 'w', 'h'))):\n    def __mul__(self, other):\n        return Box(self.l * other, self.w * other, self.h * other)\n\n\nBox.volume = lambda self: self.l * self.w * self.h\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10\") == \"0\"\nassert solution(\"4 980\") == \"20\"\nassert solution(\"4 5\") == \"20\"\nassert solution(\"4 1\") == \"1\"\nassert solution(\"3 1\") == \"-2\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"0\"\nassert solution(\"4 991\\n1 1 1\\n5 2 3\\n5 2 1\\n90 5 2\") == \"-2\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 4\nluka\no#a#\nkula\ni#a#''') == 'kala'\nassert solution('''4 4\nluka\no#a#\nkula\ni#as''') == 'as'\n'''\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\nassert solution('2 2\\nx\\n#') == 'x'\n\"\"\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#s') =='s'\nassert solution('4 4\\n#a#\\n#a#\\n#a#\\n#a#') == 'a'\nassert solution('4 4\\n#a#\\nluka\\n#a#\\nkula\\ni#s') == 'as'\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"as\"\n\nprint(solution(stdin))\n\nSample Input 3:\n4 3\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\\n\") == 'kala'\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\\n\") == 'as'"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\n\n\"\"\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == 'kala'\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == 'as'\nassert solution(\"1 1\\nA\") == 'A'\nassert solution(\"4 2\\nax#x#\\ny#a#\") == 'ay'\n\"\"\"\n\nimport sys\n\n\nclass Crossword:\n    def __init__(self, rows, cols, blocks, words):\n        self.rows = rows\n        self.cols = cols\n        self.blocks = blocks\n        self.words = words\n\n    def get_min_len_word(self):\n        min_len_word = None\n        for word in self.words:\n            if min_len_word is None or len(min_len_word) > len(word):\n                min_len_word = word\n        return min_len_word\n\n    def get_min_lexicographic_word(self):\n        min_lexicographic_word = None\n        for word in self.words:\n            if min_lexicographic_word is None or word < min_lexicographic_word:\n                min_lexicographic_word = word\n        return min_lexicographic_word\n\n    def is_solution(self):\n        return True if self.get_min_lexicographic_word() == self.get_min_len_word() else False\n\n    def get_block_at(self, row, col):\n        return self.blocks[row * self.cols + col]\n\n    def print_crossword(self):\n        for row in range(self.rows):\n            for col in range(self.cols):\n                if self.get_block_at(row, col) == '#':\n                    print('#', end='')\n                else:\n                    print(self.get_min_lexicographic_word()[row * self.cols + col], end='')\n            print()\n\n    def get_words_in_block(self, block):\n        words_in_block = []\n        for word in self.words:\n            if block in word:\n                words_in_block.append(word)\n        return words_in_block\n\n    def get_words_in_row(self, row):\n        return self.get_words_in_block(self.get_block_at(row, 0))\n\n    def get_words_in_col(self, col):\n        return self.get_words_in_block(self.get_block_at(0, col))\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#\\n') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as\\n') == 'as'\n\nprint(solution('4 4\\nluka\\no#a#\\nkula\\ni#a#\\n'))"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(SENTENCE) == EXPECTED\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"WNEENWEENEENE\") == 10\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('WNEENWEENEENE') == 10\n\"\"\""
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"WNEENWESW\") == 10\nassert solution(\"NSEW\") == 4\nassert solution(\"NESWNESEENWNWWWSEWNWWWNWESW\") == 13\n\"\"\""
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('W') == 'EN'\nassert solution('WEN') == 'EN'\nassert solution('WENES') == 'EN'\nassert solution('WENESWE') == 'EN'\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"WNEENWEENEENE\") == \"10\"\nassert solution(\"NSEW\") == \"4\"\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"WNW\") == \"WNWM\"\nassert solution(\"NSENWNEENWNWNSWNWNWNWNSENWNWNSWNW\") == \"NSWN\"\n\"\"\""
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"NSEW\") == 4\nassert solution(\"NNWWWEWNWSWENWSEWNW\") == 10\n\"\"\""
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WNEENWEENEENE\") == 10\nassert solution(\"NSEW\") == 4\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WNEENWEENEENE\") == 10"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n'\nassert solution('0 2 2 2') == 'problems ahead\\n'\nassert solution('2 2 2 2') == 'problems ahead\\n'\nassert solution('1 1 1 1') == 'problems ahead\\n'\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"problems ahead\\n0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2'\n\nThe scientists have managed to locate a group of asteroids that could support the fusion reactor.\n\nAll the asteroids have been discovered to have the same dimensions, but each has its own unique identifier.\n\nEach asteroid has a single integer, $x$, assigned to it. It is not known how the asteroids were arranged, and so one or more integers, $a$, $b$, $c$ and $d$, are assigned to each asteroid.\n\nNow, the scientists want to check the following hypotheses:\n\n    $a+b+c+d=x$,\n    $a+b=x$,\n    $a=x-c$,\n    $b=x-d$,\n    $a-b=c-d$,\n    $a+d=b+c$.\n\nTo test the hypotheses, they want to check whether the given values of $a$, $b$, $c$ and $d$ satisfy these hypotheses.\n\n---Problem Statement---\nFor each of the 6 hypotheses, print all the possible values of the parameters for which the hypothesis is satisfied.\n\nConstraints\nThe parameters of the given equations are non-negative integers.\n\nThe length of the string representing the values of the parameters is at least 6.\n\nIt is guaranteed that there is at least one value for each parameter that satisfies the hypothesis.\n\nThe given equations are well-formed.\n\nSample Input\n1 2 3 4\n3 5 7 8\n\nSample Output\n1 2 3 4\n1 5 7 8\n\"\"\"\n\nx, a, b, c, d = map(int, input().split())\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead'\n\nprint(solution('1 2 3 4'))\nprint(solution('0 4 2 2'))\n\"\"\""
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n\"\nassert solution(\"0 4 2 2\") == \"problems ahead\\n\"\n\"\"\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n'\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"\"\"1 - 2 = 3 - 4\n1 / 2 = 3 / 4\"\"\"\nassert solution(\"0 4 2 2\") == \"problems ahead\"\nassert solution(\"10 50 20 30\") == \"\"\"10 - 50 = -40\n10 - 20 = -10\n10 + 50 = 60\n10 + 20 = 30\n10 / 50 = 0\n10 / 20 = 0\"\"\"\n\n'''\nThe challenge in this problem was to combine the expressions so that it would be possible to divide each side by the other. This was done by adding the negative values before the positive value for each operator. This was done by first building a list of the possible solutions, then comparing them to see if they were equal and were valid.\n'''"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n\"\nassert solution(\"1 1 1 1\") == \"problems ahead\\n\"\nassert solution(\"0 0 0 0\") == \"problems ahead\\n\"\nassert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\"\n\"\"\"\nimport sys\nfrom typing import Tuple"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \"\"\"\n.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....\n\"\"\", solution(\"BANANA PIDZAMA\")\nassert solution(\"MAMA TATA\") == \"\"\"\n.T..\nMAMA\n.T..\n.A..\n\"\"\", solution(\"MAMA TATA\")\n\n\"\"\"\nimport re"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \"\"\"\n.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....\n\"\"\"\n\"\"\"\nassert solution(\"MAMA TATA\") == \"\"\"\n.T..\nMAMA\n.T..\n.A..\n\"\"\"\nassert solution(\"ABBA\") == \"\"\"\nABBA\n.B..\n\"\"\"\n\"\"\"\n\nSample Output 1:\n.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....\n\nSample Output 2:\n.T..\nMAMA\n.T..\n.A..\n\"\"\"\n\"\"\"\nSolution\n\nInput:\nA B\nOutput:\nABCD\nABBA\nCBAB\n\nInput:\nPIDZAMA BANANA\nOutput:\nPIDZAMA\n.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....\n\n\"\"\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABBA CCCB') == '4\\n' \\\n    '..C..\\n' \\\n    '..C..\\n' \\\n    'ABBA\\n' \\\n    '..B..\\n'\n\nassert solution('NANANA PIZZA') == '3\\n' \\\n    'N..\\n' \\\n    'A..\\n' \\\n    'N..\\n' \\\n    'N..\\n' \\\n    'A..\\n'\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('BANANA PIDZAMA') == '''\n.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....\n'''\nassert solution('MAMA TATA') == '''\n.T..\nMAMA\n.T..\n.A..\n'''\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('BANANA PIDZAMA') == '''\n.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....\n'''\nassert solution('MAMA TATA') == '''\n.T..\nMAMA\n.T..\n.A..\n'''\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('BANANA PIDZAMA') == \\\n    'P....\\nI....\\nD....\\nZ....\\nBANANA\\nM....\\nA....'\nassert solution('MAMA TATA') == \\\n    'T..\\nMAMA\\nT..\\nA..'\n\nprint(\"Successfully passed!\")\n\"\"\""
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(A) == B, f'Expected: {B}, got: {solution(A)}'\nassert solution(B) == A, f'Expected: {A}, got: {solution(B)}'\nprint('All tests passed.')\n\"\"\""
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    'BANANA PIDZAMA'\n) == '''\n.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....\n'''\nassert solution(\n    'MAMA TATA'\n) == '''\n.T..\nMAMA\n.T..\n.A..\n'''\nassert solution(\n    'HALO MARRY'\n) == '''\n.H..\n.A..\n.L..\n.O..\n.M..\n.R..\n'''\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('BANANA PIDZAMA') == \"\"\"\\\n.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....\n\"\"\"\nassert solution('MAMA TATA') == \"\"\"\\\n.T..\nMAMA\n.T..\n.A..\n\"\"\"\n\"\"\"\nFor example, if $A$ is \\texttt{ABBA} and $B$ is \\texttt{CCBB}, then the output should be\n\n.C..\n.C..\nABBA\n.B..\n\n.C..\n.C..\n.C..\n.C..\n.C..\n.C..\n.C..\n.B..\n.B..\n\n\"\"\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\") == \"365\"\n\"\"\""
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == 10\nassert solution(\"2\\n1 365\\n20 28\") == 365"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n10 14\n13 17\n25 26''') == '10'\nassert solution('''2\n1 365\n20 28''') == '365'\n\n'''\nInput:\n3\n10 14\n13 17\n25 26\n\nOutput:\n10\n'''\n'''\nInput:\n2\n1 365\n20 28\n\nOutput:\n365\n'''\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\") == \"365\"\n\"\"\""
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n10 20\") == 10\nassert solution(\"2\\n1 365\") == 365\nassert solution(\"4\\n10 10\\n20 20\\n30 30\\n40 40\") == 20\nassert solution(\"4\\n10 10\\n20 20\\n30 30\\n40 40\\n5 5\\n7 7\\n9 9\\n1 1\") == 1\nassert solution(\"3\\n10 14\\n13 17\") == 14\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\\n\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\\n\") == \"365\"\n\nprint(\"Successfully passed the test\")\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26') == '10'\nassert solution('2\\n1 365\\n20 28') == '365'\n\nprint('Success')\n\n'''\n\nn = int(input())\n\nevents = list()\nfor i in range(n):\n    events.append(list(map(int, input().split())))\n\ndays_served = 0\nfor event in events:\n    day_start = event[0]\n    day_end = event[1]\n    days_served += day_end - day_start + 1\n\nprint(days_served)\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26') == 10\n\nassert solution('2\\n1 365\\n20 28') == 365\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\") == 0\nassert solution(\"7 8\") == 0\nassert solution(\"7 9\") == 3\nassert solution(\"7 10\") == 1\nassert solution(\"7 10 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 100 100\") == 365\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\") == \"365\"\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2 3\"\n\"\"\"\n\n\n\nk = int(input())\nb, a = 0, 0\nfor _ in range(k):\n    if a == 0:\n        b += 1\n    a, b = b, a\nprint(a, b)\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '2 3'"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"2 3\"\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"2 3\"\nprint(\"Cool!\")\n\nSample Input 3:\n3\nSample Output 3:\n0 0\n\"\"\"\n\nk = int(stdin.readline())\n\na = 0\nb = 0\n\nfor i in range(k):\n    if i % 3 == 0:\n        a += 1\n    else:\n        b += 1\n\nprint(a, b)\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '2 3'\nassert solution('1') == '0 1'\nassert solution('2') == '1 0'\nassert solution('3') == '2 1'\nassert solution('4') == '3 2'\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n') == '0 1'\nassert solution('2\\n') == '1 2'\nassert solution('4\\n') == '2 3'\nassert solution('5\\n') == '3 4'\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    K = int(line)\n    \n    \n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"0 1\"\nassert solution(\"4\") == \"2 3\"\n\"\"\"\n\nK = int(input())\n\na = \"A\"\nb = \"B\"\n\nfor _ in range(K):\n    a, b = b, a + b\n\nprint(len(a), len(b))"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '0 1'\nassert solution('3') == '2 3'\n\"\"\"\n\nK = int(input())\nA = 0\nB = 0\nfor _ in range(K):\n    if A > 0 and B > 0:\n        A -= 1\n        B -= 1\n    elif A > 0:\n        A -= 1\n        B += 1\n    elif B > 0:\n        B -= 1\n        A += 1\n    else:\n        A += 1\n        B += 1\nprint(A, B)\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0 1\"\nassert solution(\"4\") == \"2 3\""
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(2) == '0 1'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98') == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\n\"\"\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\nassert solution(\"5 3\\n1 1000 200\\n2 100 100\\n3 100 50\\n4 100 99\\n3 100 100\") == \"B 100 99\\nA 2 100\"\nassert solution(\"5 3\\n1 1000 200\\n2 100 99\\n3 100 50\\n4 100 99\\n3 100 99\") == \"B 100 99\\nA 2 100\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\"\n) == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nprint(\"Passed!\")\n\n\"\"\"\nimport io, sys"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\\n\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\\n\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\""
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98') == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\nassert solution(\"5 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\nassert solution(\"5 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\nassert solution(\"5 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5 3\n1 100 200\n2 100 99\n3 100 50\n3 100 50\n2 100 98\n''') == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\nprint('Test pass.')\n\n---"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 3\n1 100 200\n2 100 99\n3 100 50\n3 100 50\n2 100 98''') == 'B 100 49'\nassert solution('''4 4\n3 100 99\n2 100 99\n1 100 99\n4 100 99''') == 'A 0 99'\nassert solution('''4 4\n3 100 99\n2 100 99\n1 100 99\n4 100 99\n5 100 100\n''') == 'A 0 99'\nassert solution('''2 3\n1 100 99\n2 100 99\n3 100 100\n4 100 99\n5 100 99\n''') == 'A 0 99'\nassert solution('''1 1\n1 100 99''') == 'A 0 99'\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2\\n1\\n4\\n3\\n5') == '168'\n\"\"\""
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n5\n2\n7''') == '27'\nprint(solution(input()))\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('2\\n1') == '1'\nassert solution('1\\n2') == '2'\nassert solution('2\\n1\\n1') == '1'\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 1 4 3 5\\n1 1') == 168\nassert solution('4\\n2 1 4 3') == 36\n\n\"\"\""
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\") == \"6\"\nassert solution(\"5\\n2\\n1\\n4\\n3\") == \"168\"\n\"\"\"\n\nn = int(input().strip())\nlst = list(map(int, input().strip().split()))\nres = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        res = max(res, lst[i] * lst[j] + (lst[i] + lst[j]) ** 2)\nprint(res)\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1\\n1\\n') == '1'\nassert solution('5\\n2\\n1\\n4\\n3\\n5\\n') == '168'\n\n\"\"\"\n\nimport sys\n\n\"\"\"\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n2\n1\n4\n3\n5''') == '168'\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2\\n1\\n4\\n3\\n5\\n') == '168'\nassert solution('2\\n1\\n1\\n') == '1'\n\"\"\"\nimport sys"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == \"168\"\nassert solution(\"2\\n1\\n1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5\n2\n1\n4\n3\n5\"\"\") == 168\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\nassert solution(\"3 3\\nDEF\\nABC\\n2\") == \"DBECAF\"\nassert solution(\"3 3\\nXYZ\\nVWN\\n0\") == \"XYZVWN\"\nassert solution(\"3 3\\nXYZ\\nVWX\\n0\") == \"VWXXYZ\"\nassert solution(\"2 3\\nXY\\nYZ\\n0\") == \"XYZ\"\n\"\"\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2') == 'CDBEAF'\nassert solution('1 1\\nA\\n0') == 'A'\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(4, 3, \"ABCDEF\") == \"CBADEF\", \"Sample Input 1\"\nassert solution(5, 3, \"ABCDEF\") == \"CBADEFE\", \"Sample Input 2\"\n\n\"\"\"\n\nfrom collections import defaultdict\nimport itertools\nimport math"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n0\") == \"CBADEF\"\nassert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\n\"\"\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438\u0437 \u0446\u0435\u043b\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043c\u0435\u043d\u044c\u0448\u0435\u0435 1 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u0443\u043c\u043c\u0443 \u0435\u0433\u043e \u0446\u0438\u0444\u0440.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0421\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u043e\u0434\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435\u0435 1.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0421\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u0440\u0430\u0432\u043d\u043e\u0435 \u0441\u0443\u043c\u043c\u0435 \u0432\u0441\u0435\u0445 \u0446\u0438\u0444\u0440 \u0447\u0438\u0441\u043b\u0430, \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435:\n\u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0439 \u0446\u0438\u0444\u0440\u044b, \u0442\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 0.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 1. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u0446\u0438\u043a\u043b for.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 2. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 sum \u0438 len.\n\nSample Input 1:\n\n3\nSample Output 1:\n\n3\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n0') == 'CBADEF'\nassert solution('3 3\\nABC\\nDEF\\n2') == 'CDBEAF'\n\"\"\""
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\nprint(\"Passed\")\n\nassert solution(\"3 3\\nABC\\nDEF\\n0\") == \"CBADEF\"\nprint(\"Passed\")\n\nassert solution(\"3 3\\nBCA\\nDEF\\n0\") == \"BCACDEF\"\nprint(\"Passed\")\n\nassert solution(\"3 3\\nDEF\\nBCA\\n0\") == \"CDEBAF\"\nprint(\"Passed\")\n\nassert solution(\"3 3\\nBCA\\nBCA\\n0\") == \"BCACBAC\"\nprint(\"Passed\")"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\nassert solution(\"3 3\\nABC\\nDEF\\n0\") == \"CBADEF\"\nassert solution(\"3 3\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\nZYXWVUTSRQPONMLKJIHGFEDCBA\\n10\") == \"KJIHGFEDCBAZYXWVUTSRQPONMLK\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\n\"\"\""
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\nassert solution(\"5 4\\nLBNF\\nIFXE\\nKLOP\\nMNRQ\\n0\") == \"BMQKNLFDXZP\"\nassert solution(\"3 3\\nBXNQ\\nDXJW\\n0\") == \"BXNQDXJW\"\nassert solution(\"5 5\\nQRMB\\nQJMX\\nIBFK\\nZFAB\\n0\") == \"QRMBQJMXIBFKZFAB\"\nassert solution(\"3 3\\nSDFE\\nFEKX\\n0\") == \"SDFEFEKX\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\nassert solution('2\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '2'\n\"\"\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('5') == '5'\nassert solution('7') == '7'\n\"\"\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n5\n100 T\n100 N\n100 T\n100 T\n100 N\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n5\n100 T\n100 N\n100 T\n100 T\n100 N\n\"\"\") == \"3\"\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\nT') == '1'\n\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\nN') == '9'\n\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\nT') == '1'\n\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\nN') == '9'\n\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\nT') == '1'"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\nassert solution('1\\n5\\n20 N\\n50 T\\n80 T\\n50 T\\n30 T') == '2'\nassert solution('1\\n5\\n20 N\\n50 T\\n80 T\\n50 T\\n30 P') == '3'\nassert solution('1\\n5\\n20 N\\n50 T\\n80 T\\n50 T\\n30 P') == '4'\nassert solution('1\\n5\\n20 N\\n50 T\\n80 N\\n50 T\\n30 P') == '2'\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"5\"\n\"\"\"\n\nK = input()\nN = int(input())\n\nfor _ in range(N):\n    t, z = input().split()\n    t = int(t)\n    if t <= 3 * 30 + 30:\n        if z == \"T\":\n            K = (int(K) + 1) % 8\n    else:\n        if z == \"P\":\n            K = (int(K) + 1) % 8\nprint(K)\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open('in/5.in').read()) == '3'\nprint(solution(open('in/5.in').read()))\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\n''') == '5'\n\nassert solution('''\n1\n5\n100 T\n100 N\n100 T\n100 T\n100 N\n''') == '4'\n\nassert solution('''\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\n''') == '4'\n\nassert solution('''\n1\n5\n20 T\n100 N\n100 T\n100 N\n100 T\n''') == '1'\n\nassert solution('''\n1\n5\n100 N\n100 T\n100 N\n100 T\n''') == '1'"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"5\"\nassert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"4\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"1\"\n\n\"\"\"\n\nfrom collections import deque\nimport heapq\n\nimport sys\n\ninp = sys.stdin.read()\ntestcases = int(inp.split(\"\\n\")[0])\n\nfor i in range(1, testcases + 1):\n    n = int(inp.split(\"\\n\")[i].split(\" \")[0])\n    score = [0] * 8\n    for j in range(n):\n        time, answer = inp.split(\"\\n\")[i].split(\" \")[1], inp.split(\"\\n\")[i].split(\" \")[2]\n        score[ord(answer) - ord('T')] += int(time)\n\n    print(8 - score.index(max(score)))\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n5\\n100 T\\n100 T\\n100 N\\n100 T\\n100 N\\n') == '4'\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n6 8\") == \"22\"\nassert solution(\"4 3\\n5 4\") == \"13\"\nassert solution(\"4 3\\n1 2\") == \"5\"\nassert solution(\"4 3\\n1 2\\n1 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == '2'\nassert solution('2 2\\n') == '0'\nassert solution('3 3\\n') == '2'\nassert solution('1 2\\n') == '1'\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"6\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n6 8') == '22'\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(4,3) == 6\nassert solution(6,8) == 22\n\"\"\"\n\nn, m = [int(i) for i in input().split()]\nlst = [0 for i in range(n)]\ns = 0\nfor i in range(m):\n    c, e = [int(i) for i in input().split()]\n    lst[c-1] += e\n    s += e\nfor i in range(n):\n    print(s - lst[i])\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n4 3') == '6'\nassert solution('6 8\\n6 8') == '22'\n\"\"\"\n\nn, m = map(int, stdin.readline().strip().split())\n\ncities = n\nroads = m\n\nprint(cities * roads // 2)\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n4 2\") == \"6\"\nassert solution(\"6 8\\n6 5\\n4 3\\n3 2\\n3 1\") == \"22\"\n\"\"\""
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n2 3 6\\n1 4\\n2 3\\n1 2\") == 6\n\"\"\"\n\nimport sys\nimport heapq\n\nstdin = sys.stdin\nn, m = map(int, stdin.readline().split())\nroads = list(map(int, stdin.readline().split()))\nheapq.heapify(roads)\n\nfor _ in range(m):\n    roads[heapq.heappop(roads)] = roads[heapq.heappop(roads)] + 1\n    heapq.heappush(roads, roads[-1] + 1)\n\nprint(sum(roads))"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == '6'\n\nassert solution(\"6 8\") == '22'\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n\") == 6\n\"\"\"\nimport sys\n\ninput = sys.stdin.readlines()\nn, m = list(map(int, input[0].split()))\nroads = list(map(int, input[1].split()))\nroads.sort()\ncount = 0\ncost = 0\ncur_cost = 0\nfor i in range(len(roads)):\n    if roads[i] >= cur_cost:\n        cost += roads[i]\n        count += 1\n        cur_cost = roads[i]\n    if count == n - 1:\n        break\nprint(cost)\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == 1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\\n\") == \"1\"\nassert solution(\"2 2\\n1 2\\n1 2\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\nassert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '0'\nassert solution('1 4\\n4 3 2 1') == '0'\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\nassert solution(\"1 4\\n4 3 2 1\") == \"0\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\") == \"0\"\nassert solution(\"2 2\\n1 1\\n1 1\\n1 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == '1'\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 3\n1 2 3\n6 5 4\n7 8 9''') == '1'\nassert solution('''1 4\n4 3 2 1''') == '0'\nassert solution('''4 6\n1 2 3 4 5 6\n7 8 9 10 11 12\n13 14 15 16 17 18\n19 20 21 22 23 24''') == '4'\nassert solution('''3 3\n1 2 3\n6 5 4\n7 8 9''') == '0'\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10\\n3\\n4\\n6\\n2\\n') == '28'\n\n\"\"\"\n\nfrom sys import stdin\n\nX = int(stdin.readline())\nN = int(stdin.readline())\np = list(map(int, stdin.readlines()))"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"\n\"\"\"\n\nX = int(input())\nN = int(input())\n\ntotal = 0\nfor i in range(N):\n    total += X - int(input())\nprint(total)"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n3\\n4\\n6\\n2\") == \"28\"\nassert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n1') == '2'\nassert solution('1\\n2') == '3'\nassert solution('2\\n1') == '3'\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('10\\n3\\n10\\n2\\n12') == '16'\n\n\"\"\"\n\nX = int(input())\nN = int(input())\nfor _ in range(N):\n    X += int(input())\n\nprint(X)"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n3\\n4\\n6\\n2\") == \"28\"\nassert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12\\n') == '16'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12') == '16'\n\nSolution\n\nInput\n\n4\n3\n4\n6\n2\nOutput\n\n28\n\"\"\""
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('hiss') == 'hiss'\nassert solution('ihgpwlah') == 'hiss'\nassert solution('siu') == 'no hiss'\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\n\"\"\"\n\n\"\"\"\nSolution Approach:\n\nThis problem can be solved with a simple function in O(n).\n\nA simple solution is to check if the characters follow the pattern \"sss\" if so, then we return \"hiss\".\n\nHowever, this does not work because of the case when \"s\" appears in the middle of the word and not at the beginning or end.\n\nWe can solve this problem by using two pointers, one at the beginning and another at the end.\n\nOnce we find the first character which is not \"s\", then we can switch the two pointers.\n\nHowever, this does not work as well as the previous solution.\n\nThe previous solution works because the left pointer always moves to the left and the right pointer always moves to the right.\n\nThe new solution, however, does not work because the left pointer moves towards the left and the right pointer moves towards the right.\n\nSo, we need to check if the right pointer has reached the end of the word or not.\n\nIf the right pointer is at the end of the word, then we need to check if the left pointer is at the beginning or not.\n\nIf the left pointer is at the beginning, then we need to check if the left and right pointers are consecutive or not.\n\nIf yes, then we need to output \"hiss\".\n\n\"\"\""
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\n\n\"\"\""
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('hello') == 'hiss'\nassert solution('world') == 'no hiss'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('mississippi') == 'hiss'\nassert solution('amississippi') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('hiss') == 'hiss'\nassert solution('piss') == 'no hiss'\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('kiss') == 'no hiss'\nassert solution('hiss') == 'hiss'"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\n\nprint(solution('amiss'))\nprint(solution('octopuses'))\n\n-----Solution-----\n\"\"\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"amiss\") == \"hiss\"\n\"\"\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"amiss\") == \"hiss\"\nassert solution(\"abbbb\") == \"hiss\"\nassert solution(\"mississippi\") == \"hiss\"\nassert solution(\"aabbsss\") == \"hiss\"\n\"\"\"\n\nimport re\n\npattern = r'(?=([^s]*[s]{2}[^s]*))'"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nc++\\nC++\\nC\\nC#\\n\") == 3\n\nassert solution(\"5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux\\n\") == 5\n\n\"\"\"\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('c++') == 'c++'\nassert solution('C++') == 'c++'\nassert solution('c') == 'c'\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\nc++\\nC++\\nc\\nc#') == 3\n\"\"\""
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nc++\\nC++\\nc\\nc#') == '3'\nassert solution('5\\nc++\\nC++\\nArtificial intelligence\\nMachine Learning\\nLinux') == '5'\n\"\"\"\n\nn = int(input())\nword_set = set()\n\nfor _ in range(n):\n    word_set.add(input())\n\ncounter = 0\n\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        x = ''.join(word_set[i].lower().split('-'))\n        y = ''.join(word_set[j].lower().split('-'))\n        if x == y:\n            counter += 1\n\nprint(counter)\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nc++\\nC++\\nC\\nC#\\n') == '3'\n\"\"\"\n\nn = int(input())\nwords = [input() for _ in range(n)]\n\nres = []\nfor i in range(n):\n    for j in range(n):\n        if i < j:\n            if words[i] == words[j]:\n                res.append(words[j])\n\nprint(len(res))"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\nC++\\nC\\nc#\\n') == '3'\nassert solution('5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux\\n') == '5'\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\nc++\\nC++\\nc\\nc#') == '3'\nprint(solution(stdin.readline()))\n\n-----Notes-----\n* Assume all characters are ASCII characters.\n* Assume all strings are lowercase.\n\n\"\"\""
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\nc++\nC++\nc\nc#\") == \"3\"\n\"\"\"\n\nclass Solution:\n    def countSimilarKeys(self, n: int) -> int:\n        keywords = set()\n        for _ in range(n):\n            keywords.add(input().replace(\"-\",\" \").lower())\n        return len(keywords)"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\nc++\\nC++\\nc\\nC#') == 3\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"TCGCTC\") == 9\n\"\"\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\n\"\"\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('TCC') == '9'\nassert solution('CCT') == '9'\nassert solution('GTC') == '13'\nassert solution('CGT') == '12'\nassert solution('GGT') == '15'\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"TCGTT\") == 21\nassert solution(\"CCG\") == 9\n\"\"\"\n\nstdin = \"TCGTTC\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\n\"\"\"\n\nimport sys\nimport math\n\nstdin = list(sys.stdin.readlines())\n\nresults = {\n    \"T\": 1,\n    \"C\": 2,\n    \"G\": 3,\n}"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"TCGTTC\") == \"21\"\nassert solution(\"CCCC\") == \"9\"\nassert solution(\"GG\") == \"0\"\nassert solution(\"TTCCCT\") == \"7\"\nassert solution(\"TCCTCCCCT\") == \"15\"\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"CCCG\") == 9\nassert solution(\"TCGTTTCGTT\") == 21\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('T') == 1\nassert solution('TCGTTC') == 21\nassert solution('TTTTTTTTTT') == 0\nassert solution('CCCCCCCCCC') == 36\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"TCGTTC\") == \"21\"\nassert solution(\"CCC\") == \"9\"\n\"\"\""
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\nassert solution(\"0\\n360\") == \"0\"\nassert solution(\"45\\n315\") == \"90\"\nassert solution(\"180\\n45\") == \"90\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('315') == '90'\nassert solution('45') == '90'\nassert solution('180') == '-180'\nassert solution('180') == '180'"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"315 45\") == \"90\"\nassert solution(\"180 270\") == \"90\"\nassert solution(\"45 180\") == \"90\"\nassert solution(\"0 90\") == \"180\"\n\"\"\""
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\n\"\"\""
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\nassert solution(\"45\\n315\") == \"180\"\n\"\"\""
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('315\\n45') == '90'\n\nsolution(\"315\\n45\") == '90'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('315 45') == '90'\nassert solution('180 270') == '90'\nassert solution('180 -270') == '90'\nassert solution('-180 -270') == '90'\nassert solution('-180 -90') == '180'"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\n\"\"\"\n\nimport math\nimport unittest\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n1 = int(stdin.split(\"\\n\")[0])\n        n2 = int(stdin.split(\"\\n\")[1])\n        diff = n1 - n2\n\n        if diff < -180:\n            diff = 360 + diff\n        elif diff > 180:\n            diff = 360 - diff\n        return str(diff)\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution().solution\n\n    def test_should_return_the_angle_in_degrees_when_given_0_as_the_current_angle_and_45_as_the_correct_angle(self):\n        expected = \"45\"\n        actual = self.solution(\"0\\n45\")\n        self.assertEqual(expected, actual)\n\n    def test_should_return_the_angle_in_degrees_when_given_45_as_the_current_angle_and_45_as_the_correct_angle(self):\n        expected = \"0\"\n        actual = self.solution(\"45\\n45\")\n        self.assertEqual(expected, actual)\n\n    def test_should_return_the_angle_in_degrees_when_given_180_as_the_current_angle_and_270_as_the_correct_angle(self):\n        expected = \"180\"\n        actual = self.solution(\"180\\n270\")\n        self.assertEqual(expected, actual)\n\n    def test_should_return_the_angle_in_degrees_when_given_270_as_the_current_angle_and_270_as_the_correct_angle(self):\n        expected = \"90\"\n        actual = self.solution(\"270\\n270\")\n        self."
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"315\", \"45\") == \"90\"\nassert solution(\"180\", \"270\") == \"90\"\nassert solution(\"0\", \"360\") == \"0\"\nassert solution(\"180\", \"0\") == \"180\"\nassert solution(\"0\", \"180\") == \"0\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('315\\n45') == '90'\n\"\"\""
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\nassert solution('5\\n11\\n20\\n33\\n40\\n55') == '1'\nassert solution('5\\n11\\n33\\n20\\n13\\n55') == '2'\nassert solution('5\\n11\\n33\\n55\\n20\\n13') == '2'\n\nfrom collections import Counter\n\nstdin = '5\\n1\\n23\\n18\\n13\\n99'\nstdin = stdin.split('\\n')\nk = int(stdin[0])\n\nlst = [int(x) for x in stdin[1:]]\nprint(Counter(lst))\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\\n\") == \"3\"\nassert solution(\"5\\n11\\n20\\n33\\n40\\n55\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n1\n23\n18\n13\n99''') == '3'\nassert solution('''5\n1\n23\n18\n13\n99''') == '1'\nassert solution('''5\n11\n20\n33\n40\n55''') == '1'\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\nassert solution(\"5\\n11\\n20\\n33\\n40\\n55\") == \"1\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == 3\n\n\"\"\""
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\nassert solution(\"5\\n1\\n23\\n18\\n13\\n99\\n42\") == \"1\"\nassert solution(\"10\\n19\\n28\\n38\\n48\\n58\\n68\\n78\\n88\\n98\") == \"1\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\\n\") == \"3\"\n\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\nassert solution('5\\n11\\n20\\n33\\n40\\n55') == '1'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == 3\n\"\"\""
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWBBBW') == '1'\n\nprint(solution(stdin.readline().strip()))\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWBWBWBW') == '1'\nassert solution('WWBBBWBW') == '0'\n\nprint('All tests passed.')\n\n------"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBWBWBW\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBBWWW\") == \"1\"\nassert solution(\"BBBWWWWW\") == \"1\"\nassert solution(\"BBBWWBBWWW\") == \"0\"\nassert solution(\"BBBWWBWBWBW\") == \"0\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWBWBWWW') == '1'\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWWWBBBWWWW\") == \"0\"\nassert solution(\"WWWWBBWBWW\") == \"1\"\nassert solution(\"WWWWBBWBBW\") == \"1\"\nassert solution(\"WWWWBBWBBB\") == \"1\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"WWWWBBW\") == 0\nassert solution(\"WWBBWW\") == 1\nassert solution(\"WWBWBWB\") == 0\nassert solution(\"WWWWBWBWW\") == 0\nassert solution(\"WWWWBBBW\") == 0\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('WWWWBBW') == 0\nassert solution('WWBBWWWW') == 1\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WWWWBBW\") == 0\nassert solution(\"WWBBWBWBW\") == 1\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBWBB\") == \"1\"\n\"\"\"\n\n\n\"\"\"\nInput:\nWWWWBBW\n\nOutput:\n1\n\nInput:\nWWWWBBB\n\nOutput:\n0\n\"\"\"\n\n\"\"\"\n\u041c\u0430\u0440\u0433\u0430\u0440\u0438\u0442\u0430 \u0438 \u041d\u0435\u0441\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u0435\u0441\u044c \u0442\u0435\u043a\u0441\u0442 \u043f\u043e\u0432\u0435\u0440\u0445 \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0430 \u0432 \u043e\u0434\u043d\u043e\u043c \u0432\u0438\u0434\u0435.\n\n\u0421\u0442\u043e\u044f\u0442 \u0434\u0432\u0435 \u0432\u0435\u0440\u0448\u0438\u043d\u044b (\u043f\u043e\u0434 \u043d\u043e\u043c\u0435\u0440\u0430\u043c\u0438 0 \u0438 1).\n\n\u0422\u0435\u043a\u0441\u0442 \u0438\u0437\u0432\u0435\u0441\u0442\u0435\u043d \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443.\n\n\u0412\u0435\u0441 \u0441\u043b\u043e\u0432\u0430 - \u044d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0443\u043a\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442.\n\n\u0414\u0430\u043d \u043d\u043e\u043c\u0435\u0440 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u043b\u043e\u0432\u0430.\n\n\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u0441\u043b\u043e\u0432\u043e \u0432\u0435\u0440\u043d\u043e \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u0442\u044c \u043d\u0430 \u0432\u0435\u0440\u0448\u0438\u043d\u0435.\n\n\u041e\u0431\u0449\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0432\u0435\u0441\u044c \u0442\u0435\u043a\u0441\u0442 \u0432 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u0441\u043b\u043e\u0432\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443.\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u0432\u0435\u0440\u0448\u0438\u043d\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u043e\u043c\u0435\u0440 0.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\u0414\u0430\u043d\u044b \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 $n$ \u0438 $w$, \u0433\u0434\u0435 $n$ - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u0448\u0438\u043d \u0432 \u0433\u0440\u0430\u0444\u0435, $w$ - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432. \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0438\u0434\u0435\u0442 $n$ \u0447\u0438\u0441\u0435\u043b, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0432\u0435\u0440\u0448\u0438\u043d. \u0414\u0430\u043b\u0435\u0435 \u0438\u0434\u0443\u0442 $w$ \u0441\u0442\u0440\u043e\u043a \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u0441\u043b\u043e\u0432.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e $1$ \u0438\u043b\u0438 $0$, \u0435\u0441\u043b\u0438 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u043b\u043e\u0432 \u0432\u0435\u0440\u043d\u043e.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0422\u0435\u0441\u0442 1\n>>> 4\n>>> 1 3 2 1\n>>> 2\n>>> 3\n>>> 1\n>>> 3\n1\n\u0422\u0435\u0441\u0442 2\n>>> 5\n>>> 1 2 3 4 1\n>>> 1\n>>> 3\n>>> 1 2\n>>> 3 4\n1\n\u0422\u0435\u0441\u0442 3\n>>> 6\n>>> 1 2 3 4 5 1\n>>> 2\n>>> 3\n>>> 1\n>>> 5\n1\n\u0422\u0435\u0441\u0442 4\n>>> 7\n>>> 2 1 3 1 4 1\n>>> 2\n>>> 1\n>>> 1 3\n>>> 2 4\n2\n\u0422\u0435\u0441\u0442 5\n>>> 8\n>>> 1 2 1 1 1 1 1 1 1\n>>> 2\n>>> 1\n>>> 3\n1\n\u0422\u0435\u0441\u0442 6\n>>> 9\n>>> 1 2 1 1 1 1 1 1 1\n>>> 1\n>>> 1 2\n>>> 1 3\n>>> 2 4\n1\n\u0422\u0435\u0441\u0442 7\n>>> 10\n>>> 1 2 1 1 1 1 1 1 1\n>>> 1\n>>> 1 2\n>>> 2 3\n>>> 1 4\n>>> 1 5\n1\n\u0422\u0435\u0441\u0442 8\n>>> 11\n>>> 1 2 1 1 1 1 1 1 1\n>>> 1\n>>> 2\n>>> 1 3\n>>> 2 4\n>>> 1 5\n>>> 1 6\n>>> 1 7\n>>> 1 8\n>>> 1 9\n>>> 1 10\n>>> 1 11\n1\n\"\"\"\n\n\n\n\"\"\"\n\u041c\u0430\u0440\u0433\u0430\u0440\u0438\u0442\u0430 \u0438 \u041d\u0435\u0441\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u0435\u0441\u044c \u0442\u0435\u043a\u0441\u0442 \u043f\u043e\u0432\u0435\u0440\u0445 \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0430 \u0432 \u043e\u0434\u043d\u043e\u043c \u0432\u0438\u0434\u0435.\n\n\u0421\u0442\u043e\u044f\u0442 \u0434\u0432\u0435 \u0432\u0435\u0440\u0448\u0438\u043d\u044b (\u043f\u043e\u0434 \u043d\u043e\u043c\u0435\u0440\u0430\u043c\u0438 0 \u0438 1).\n\n\u0422\u0435\u043a\u0441\u0442 \u0438\u0437\u0432\u0435\u0441\u0442\u0435\u043d \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443.\n\n\u0412\u0435\u0441 \u0441\u043b\u043e\u0432\u0430 - \u044d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0443\u043a\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442.\n\n\u0414\u0430\u043d \u043d\u043e\u043c\u0435\u0440 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u043b\u043e\u0432\u0430.\n\n\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u0441\u043b\u043e\u0432\u043e \u0432\u0435\u0440\u043d\u043e \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u0442\u044c \u043d\u0430 \u0432\u0435\u0440\u0448\u0438\u043d\u0435.\n\n\u041e\u0431\u0449\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0432\u0435\u0441\u044c \u0442\u0435\u043a\u0441\u0442 \u0432 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u0441\u043b\u043e\u0432\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443.\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u0432\u0435\u0440\u0448\u0438\u043d\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u043e\u043c\u0435\u0440 0.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"3 3 3 3\"\n) ==     9\nassert solution(\n\"1 2 1 1\"\n) ==     1.299038105676658\nassert solution(\n\"1 0 1 1\"\n) ==     1.0\nassert solution(\n\"2 2 2 2\"\n) ==     8\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"3 3 3 3\"\n) == \"9\"\nassert solution(\n\"1 2 1 1\"\n) == \"1.299038105676658\"\n\"\"\"\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 3 3 3''') == '9'\nassert solution('''1 2 1 1''') == '1.299038105676658'\n\"\"\"\n\nfrom math import sqrt, fabs\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1 1\") == \"1.299038105676658\"\nassert solution(\"3 3 3 3\") == \"9\"\n\n\"\"\"\n\nimport collections\nimport math"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n\"\"\"\n\nfrom math import fsum"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"roooooooooobert\") == \"robert\"\nassert solution(\"rooooooobert\") == \"robert\"\nassert solution(\"roooooooobert\") == \"robert\"\n\nassert solution(\"roooooooooobert\") == \"robert\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooooobert') == 'robert'\nassert solution('rooooooobert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'\n\"\"\""
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"rrrooobbbert\") == \"robert\"\nassert solution(\"rrrrrrrrrbbbterrrrrrrrrrrrr\") == \"robert\""
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'\nassert solution('roooobert') == 'robert'\nassert solution('rrrooobbet') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('roobet') == 'robo'\n\nassert solution('rrrooobbbert') == 'robert'\nassert solution('rrroobert') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution( \"robert\") == \"robert\"\nassert solution( \"rooobert\") == \"robert\"\nassert solution( \"roobertr\") == \"robert\"\nassert solution( \"roobert\") == \"robert\"\nassert solution( \"roobertq\") == \"robert\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('robert') == 'robert'\nassert solution('roooobert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'\nassert solution('robertrrrrr') == 'robert'\nassert solution('rrrrrrrrrrrrrrrrrr') == 'rrr'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('roooobert') == 'robert'\nassert solution('roooobertbbb') == 'robert'\n\nassert solution('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"rrooobert\") == \"robert\"\nassert solution(\"rrrooobert\") == \"robert\"\nassert solution(\"rrrrroobert\") == \"robert\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'\nassert solution('aaaaaaaaa') == ''\nassert solution('abcdefghijklmnopqrstuvwxyz') == ''\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000 9 7\\n') == '108 4'\nassert solution('1000 900 7\\n') == 'Impossible'\nassert solution('1000 9 100\\n') == 'Impossible'\nassert solution('10000 9 100\\n') == 'Impossible'\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000 9 7\\n') == '108 4'\nassert solution('1000 900 7\\n') == 'Impossible'\nassert solution('2 2 1\\n') == '2 0'\nassert solution('123 45 6\\n') == 'Impossible'\nassert solution('0 1 0\\n') == '0 0'\n\"\"\"\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nprint(solution(input()))\n\n-----Problem-----\nPeter has a new shipment of oil and is trying to store the oil in two containers. But he has a few problems:\n\nThe container with the largest volume is always bigger than the other.\nPeter doesn\u2019t have enough money to buy these containers, so the number of the smaller container must be at least as large as the number of the larger container.\nPeter wants to make the largest possible number of containers. The cost of a container is defined as:\n\n$cost(v) = v^2 + v + 2$, where $v>=0$ is the volume.\nYour task is to compute the minimal possible value of $cost(v_1) + cost(v_2)$.\n\nInput\nThe input consists of a single line containing three positive integers $s, v_1, v_2$, where $s \\leq 10^6$ is the volume of the shipment, $v_1, v_2 \\leq 10^6$, and $v_1 > v_2$.\n\nOutput\nOutput a single line containing three integers $v_1$, $v_2$, and $cost(v_1) + cost(v_2)$.\n\nConstraints\n$1 \\leq v_1 \\leq 10^6$,\n$1 \\leq v_2 \\leq 10^6$,\n$v_1 > v_2$,\n$s \\leq 10^6$.\n\n-----Sample Input-----\nSample Input 1:\n1000 9 7\nSample Output 1:\n108 4\n\nSample Input 2:\n1000 900 7\nSample Output 2:\nImpossible\n-----Sample Input-----\nSample Input 1:\n1000 9 7\nSample Output 1:\n108 4\n\nSample Input 2:\n1000 900 7\nSample Output 2:\nImpossible\n\n-----Explanation-----\n\"\"\""
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000 9 7\\n') == '108 4'\nassert solution('1000 900 7\\n') == 'Impossible'\n\nimport sys\n\nsys.setrecursionlimit(1500)"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\""
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000 9 7\\n') == '108 4'\nassert solution('1000 900 7\\n') == 'Impossible'\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000 9 7') == '108 4'\nassert solution('1000 900 7') == 'Impossible'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline()\na, b, c = map(int, input.split())"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Impossible'\n\n---Problem 2 ---\nPeter has a lot of money, but is always balancing his budget. Today he wants to give his money to one person, but wants to give the same amount to each person.\n\nIn particular, he wants to give $n$ amount of money to each person in the following way:\n - the first person receives $n / k$, where $k$ is the number of people to whom he has given the money\n - the second person receives $n / k$, where $k$ is the number of people to whom he has given the money\n - the third person receives $n / k$, where $k$ is the number of people to whom he has given the money\n - the fourth person receives $n / k$, where $k$ is the number of people to whom he has given the money\n - the fifth person receives $n / k$, where $k$ is the number of people to whom he has given the money\n - the sixth person receives $n / k$, where $k$ is the number of people to whom he has given the money\n - the seventh person receives $n / k$, where $k$ is the number of people to whom he has given the money\n - the eighth person receives $n / k$, where $k$ is the number of people to whom he has given the money\n\nPeter is planning to give away all of his money to the people. But he doesn\u2019t want to give more money to the first person than he can give to the second person, and so on.\n\nHelp Peter in the above process by giving him the correct amount of money.\n\n-----Input-----\nThe input consists of a single line containing three integers $n$, $k$, and $m$, where $0 \\leq k \\leq m \\leq n$.\n\n-----Output-----\nPrint a single line containing the correct amount of money, where $0 \\leq k \\leq m \\leq n$.\n\n---Example Input---\n10 3 2\n---Example Output---\n5\n\n---Problem 3 ---\nOnce upon a time, in a kingdom far, far away, there lived a King Byteasar II. There was an enormous palace with a great many gold coins inside. The King Byteasar II decided to divide the coins equally between his little brother and his sister. But unfortunately, the King Byteasar II was very bad at the coin counting, so he counted them one by one.\n\nWhen he had counted all the coins, he got an enormous number. He knew that the number of the coins is too big, and the only way to make sure that the numbers on the coins will be equal is to start with the largest coin and then subtract the amount of the coin from the next biggest coin until the number on the coins is zero.\n\nHelp the King Byteasar II by telling him the answer to the coin counting.\n\n-----Input-----\nThe input consists of a single line containing one integer $n$ (1 \\leq n \\leq 109).\n\n-----Output-----\nPrint the answer to the coin counting.\n\n---Examples Input---\n10\n---Examples Output---\n5\n\n---Problem 4---\nThe average life expectancy of a woman is 78 years. If a man dies at the age of 38, his expected life expectancy is reduced by 3.5 years. So if there is a child born every month for the next 17 years, then he will have a total life expectancy of 38 \u00d7 12 = 488 years.\n\nWhat is the expected life expectancy of a child in our society (3.5 points), if the number of months a child is born is a Poisson random variable with mean 125, and the life expectancy of a child is a Gaussian random variable with mean 78 and standard deviation 5?\n\n-----Input-----\nThe input consists of a single line containing two real numbers $p$ and $q$.\n\n-----Output-----\nPrint the answer to the question in the format: \"The expected life expectancy of a child in our society is:\" and then round the answer to two decimal places.\n\n---Examples Input---\n0.1 0.2\n---Examples Output---\nThe expected life expectancy of a child in our society is: 5.0\n\n---Problem 5---\nWe have a company of 8 workers, and the number of tasks of each worker is a Poisson random variable with mean 8.\n\nA set of statistics on the tasks of the workers shows that the average number of tasks of each worker is 1.25. What is the expected value of the number of tasks of the 8 workers?\n\n---Input-----\nThe input consists of a single line containing one real number $p$.\n\n-----Output-----\nPrint the answer to the question in the format: \"The expected value of the number of tasks of the 8 workers is:\" and then round the answer to two decimal places.\n\n---Examples Input---\n0.5\n---Examples Output---\nThe expected value of the number of tasks of the 8 workers is: 1.0\n\n---Problem 6---\nFor the given data, we can construct the following joint probability density function:\n\n$$\nP(X_1, X_2, X_3, X_4, X_5, X_6) = \\frac{1}{\\sqrt{2 \\pi 3}} \\big( \\frac{1}{2} \\big)^6\n$$\n\nTo compute the expectation of the function $P$ with respect to $X_6$, we know that we can just compute the expectation of $X_1$ and $X_5$, because $X_2$, $X_3$ and $X_4$ are identically distributed.\n\nIn order to compute the expectation of $X_6$, we want to compute the expectation of $X_1$, which is computed as follows:\n$$\n\\mathbb{E}(X_6) = \\mathbb{E}(X_1) = \\frac{1}{2} \\frac{1}{\\sqrt{2 \\pi 3}}\n$$\n\nSubstituting this in the previous equation gives us:\n$$\n\\mathbb{E}(X_6) = \\frac{1}{2} \\frac{1}{\\sqrt{2 \\pi 3}} = 2.39\n$$\n\nThis can be calculated as the solution of a system of linear equations (from the fact that $X_1, X_2, X_3, X_4, X_5$ are identically distributed), which is:\n$$\nX_2 = 2.39 \\pm \\sqrt{2.39^2 - 3} = 0.39, \\\\\nX_3 = 2.39 \\pm \\sqrt{2.39^2 - 3} = 0.39, \\\\\nX_4 = 2.39 \\pm \\sqrt{2.39^2 - 3} = 0.39, \\\\\nX_5 = 2.39 \\pm \\sqrt{2.39^2 - 3} = 0.39, \\\\\nX_6 = 2.39.\n$$\n\nAlso, we can compute the probability of $X_6$ by multiplying the probabilities of $X_1$, $X_2$ and $X_3$. The probability for $X_6$ is $0.39^6 = 5.42e-5$.\n\nIn the same way, we can compute the expectations of $X_2$, $X_3$ and $X_5$ by replacing $X_6$ in the previous equation.\n\nFinally, we can compute the expectation of $X_1$ by substituting $X_5$ in the previous equation:\n$$\n\\mathbb{E}(X_1) = \\frac{1}{2} \\frac{1"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\n\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\n\nassert solution(\"4 4\\n..#.\\n..#.\\n..#.\\n..#.\\n\") == \"1\\n1\\n1\\n1\\n0\"\n\nassert solution(\"4 4\\n#...\\n#...\\n#...\\n#...\\n\") == \"4\\n0\\n0\\n0\\n0\"\n\nassert solution(\"4 4\\n#X#.\\n#.##\\n#.#X\\n#..#\\n\") == \"9\\n0\\n0\\n0\\n0\""
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\n\"\"\""
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n#..\\n..X\\n..X\\n#XX\\n\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\\n\") == \"9\\n0\\n0\\n0\\n0\"\n\"\"\"\n\nimport math\nfrom collections import Counter\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\n\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\n\nassert solution(\"4 4\\n....\\n....\\n...#\\n....\") == \"8\\n0\\n0\\n0\\n0\"\n\n\"\"\"\n\nfrom math import factorial\n\nR, C = map(int, stdin.readline().split())\narr = [list(stdin.readline()) for _ in range(R)]\n\nmax_cars = 0\nmax_cars_squashed = 0\n\nfor r in range(R):\n    for c in range(C):\n        if arr[r][c] == \"#\":\n            continue\n        else:\n            cars = 0\n            if r > 0:\n                if arr[r-1][c] == \"X\":\n                    cars += 1\n                if c > 0:\n                    if arr[r-1][c-1] == \"X\":\n                        cars += 1\n                if c < C-1:\n                    if arr[r-1][c+1] == \"X\":\n                        cars += 1\n            if r < R-1:\n                if arr[r+1][c] == \"X\":\n                    cars += 1\n                if c > 0:\n                    if arr[r+1][c-1] == \"X\":\n                        cars += 1\n                if c < C-1:\n                    if arr[r+1][c+1] == \"X\":\n                        cars += 1\n            if c > 0:\n                if arr[r][c-1] == \"X\":\n                    cars += 1\n            if c < C-1:\n                if arr[r][c+1] == \"X\":\n                    cars += 1\n            max_cars = max(cars, max_cars)\n            max_cars_squashed = max(cars, max_cars_squashed)\n\nprint(factorial(max_cars)//(factorial(max_cars_squashed) * factorial(max_cars - max_cars_squashed)))"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n#..\\n..X\\n..X\\n#XX\\n\") == \"1\\n1\\n2\\n1\\n0\\n\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\\n\") == \"9\\n0\\n0\\n0\\n0\\n\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n#..#\\n..X.\\n..X.\\n#XX#') == '1 1 2 1 0'\n\"\"\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n...\\n...\\n...\\n...') == '1\\n1\\n2\\n1\\n0'\nassert solution('4 4\\n#.\\n..\\n...\\n.#') == '9\\n0\\n0\\n0\\n0'\nassert solution('3 3\\n...\\n...\\n#..') == '6\\n0\\n0\\n0\\n0'\nassert solution('3 3\\n#.\\n...\\n#..') == '6\\n0\\n0\\n0\\n0'\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\n\n\"\"\""
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"\\n\") == \"\"\nassert solution(\"1\\n\") == \"1\"\nassert solution(\"1\\n212\\n1253\\n\") == \"212 + 1253\"\nassert solution(\"2\\n212\\n1253\\n\") == \"212 + 1253\"\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n212\\n1253\") == \"1953566\"\n\"\"\""
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n212\\n1253\\n') == '1953566'\nprint(solution('5\\n23\\n17\\n43\\n52\\n22\\n'))\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n') == '1+2+3+4+5'\nassert solution('2\\n7\\n8\\n9\\n0\\n') == '7+8+9+0'\nassert solution('4\\n12\\n29\\n15\\n39\\n') == '12+29+15+39'\nassert solution('5\\n12\\n29\\n15\\n39\\n') == '12+29+15+39'\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '2\\n'\n    '212\\n'\n    '1253\\n') == '1953566'\n\nprint('Hooray!')\n\n\"\"\"\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n212\\n1253\") == \"1953566\"\nassert solution(\"5\\n23\\n17\\n43\\n52\\n22\") == \"102\"\n\n\"\"\""
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"212\\n1253\") == \"1953566\"\nprint(solution(\"212\\n1253\"))"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n212\\n1253') == '1953566'\nassert solution('5\\n23\\n17\\n43\\n52\\n22') == '102'\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n212\\n1253') == '1953566'\nassert solution('5\\n23\\n17\\n43\\n52\\n22') == '102'\n\"\"\""
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1234567891011121314151617181920) == \"1910111121314151\"\n\n\"\"\""
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10 10\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\") == \"0.0 3.0 6.0\"\nassert solution(\"1 1 1\") == \"0.0 0.0 0.0\"\nassert solution(\"2 2 2\") == \"0.0 0.0 0.0\"\n\n\"\"\"\n\nimport math\nfrom decimal import Decimal\n\nA, B, C = [int(num) for num in input().split(' ')]\nI, J, K = [int(num) for num in input().split(' ')]\n\norange = math.floor(A / I)\napple = math.floor(B / J)\npineapple = math.floor(C / K)\n\ntotal_juice = orange + apple + pineapple\n\norange_leftover = math.floor(orange - (total_juice * I))\napple_leftover = math.floor(apple - (total_juice * J))\npineapple_leftover = math.floor(pineapple - (total_juice * K))\n\nprint(orange_leftover, apple_leftover, pineapple_leftover)\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 10 10\\n3 3 3\\n') == '0.000000 0.000000 0.000000'\nassert solution('9 9 9\\n3 2 1\\n') == '0.000000 3.000000 6.000000'\n\nprint('Test passed')\n\n\"\"\"\n\nimport sys\nfrom math import floor\nfrom fractions import Fraction\n\nstdin = sys.stdin"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 10 10\\n3 2 1\") == \"0.0 0.0 0.0\"\n\n\"\"\"\n\n\"\"\"\nRelevant link: https://edabit.com/challenge/KZt4Jxmjbx5Zj6pnq"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 10 10\\n3 3 3') == '0.0 0.0 0.0'\nassert solution('9 9 9\\n3 2 1') == '0.0 3.0 6.0'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.000000 0.000000 0.000000\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.000000 3.000000 6.000000\"\n\nSample Input 3:\n15 20 20\n7 7 7\nSample Output 3:\n0.800000 0.800000 0.800000\n\nSample Input 4:\n9 10 10\n2 2 2\nSample Output 4:\n0.735294 0.735294 0.735294\n\nSample Input 5:\n20 20 20\n2 2 2\nSample Output 5:\n0.750000 0.750000 0.750000\n\nSample Input 6:\n50 50 50\n2 2 2\nSample Output 6:\n0.866667 0.866667 0.866667\n\nSample Input 7:\n30 30 30\n3 3 3\nSample Output 7:\n0.924273 0.924273 0.924273\n\nSample Input 8:\n10 10 10\n5 5 5\nSample Output 8:\n0.799997 0.799997 0.799997\n\nSample Input 9:\n20 20 20\n8 8 8\nSample Output 9:\n0.865296 0.865296 0.865296\n\nSample Input 10:\n40 40 40\n4 4 4\nSample Output 10:\n0.848214 0.848214 0.848214\n\nSample Input 11:\n100 100 100\n4 4 4\nSample Output 11:\n0.848214 0.848214 0.848214\n\nSample Input 12:\n20 20 20\n10 10 10\nSample Output 12:\n0.848214 0.848214 0.848214\n\nSample Input 13:\n20 20 20\n7 7 7\nSample Output 13:\n0.848214 0.848214 0.848214\n\nSample Input 14:\n30 30 30\n6 6 6\nSample Output 14:\n0.848214 0.848214 0.848214\n\nSample Input 15:\n10 10 10\n4 4 4\nSample Output 15:\n0.848214 0.848214 0.848214\n\nSample Input 16:\n200 200 200\n1 1 1\nSample Output 16:\n0.848214 0.848214 0.848214\n\nSample Input 17:\n10 10 10\n5 5 5\nSample Output 17:\n0.848214 0.848214 0.848214\n\nSample Input 18:\n10 10 10\n3 3 3\nSample Output 18:\n0.750000 0.750000 0.750000\n\nSample Input 19:\n10 10 10\n0 0 0\nSample Output 19:\n0.0 0.0 0.0\n\nSample Input 20:\n10 10 10\n6 6 6\nSample Output 20:\n0.750000 0.750000 0.750000\n\"\"\""
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == '0.0 0.0 0.0'\nassert solution(\"9 9 9\\n3 2 1\") == '0.0 3.0 6.0'\n\"\"\"\n\nimport ast\n\na, b, c = [int(n) for n in ast.literal_eval(input())]\ni, j, k = [int(n) for n in ast.literal_eval(input())]\n\nprint('%.4f' % (i * a), '%.4f' % (j * b), '%.4f' % (k * c))"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10 10\\n3 2 1\") == \"0.000000 3.000000 6.000000\""
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 10 10\\n3 3 3') == '0.0 0.0 0.0'\nassert solution('9 9 9\\n3 2 1') == '0.0 3.0 6.0'\n\n\"\"\""
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('0 0 0') == '0.0 0.0 0.0'\nassert solution('0 10 10') == '0.0 10.0 10.0'\nassert solution('5 5 5') == '0.0 0.0 0.0'\nassert solution('5 5 4') == '0.0 0.0 4.0'\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n\"\"\""
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\""
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n\nprint(solution(\"a<bc<\"))\nprint(solution(\"foss<<rritun\"))\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\nprint(\"All cases passed!\")"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n\"\"\""
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\nassert solution('qwe<>rty<>uio<>') == 'qwerty'\nassert solution('<>') == ''\nassert solution('a<>bc<>') == 'abc'\n\nprint(\"All test cases passed.\")\n\nSample Input 1:\na<bc<\nSample Output 1:\nb\n\nSample Input 2:\nfoss<<rritun\nSample Output 2:\nforritun\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('a<bc<') == 'b'\nassert solution('a<a<a<bc<') == 'b'\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\nassert solution('\u041b\u043e\u0440\u0435\u043d\u0441-\u041c\u0430\u0440\u043a\u043e') == 'LM'\nassert solution('\u0424\u0440\u0430\u043d\u043a\u043b\u0438\u043d-\u041f\u0440\u0438\u043d\u0441\u0444\u0438\u043b\u044c\u0434') == 'FP'\nassert solution('\u0428\u0435\u043a\u043b\u0443\u0440-\u0413\u0430\u043d\u043d\u0438') == 'SG'\n\nprint('Success')\n\n-----\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('KMP') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\n\"\"\""
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\nassert solution(\"Jules-Verne\") == \"JV\"\nassert solution(\"Marvin-Derrick\") == \"MD\"\nassert solution(\"Elisabeth-Charlotte\") == \"EC\"\n\"\"\""
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\nassert solution(\"RSA\") == \"RSA\"\nassert solution(\"M-A-S-H-H-O-R-S\") == \"M-A-S-H-H-O-R-S\"\nassert solution(\"H-E-L-L-O\") == \"HELLO\"\n\"\"\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('KMP') == 'KMP'\nassert solution('K-M-P') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\nassert solution('M-s-l-v-k-o') == 'MS'\nassert solution('Mirko-Slavko-Slavko-Slavko') == 'M-S-L-V-K'"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\nassert solution(\"-M-s-p-r-o-m-i-n-g\") == \"MS\"\nassert solution(\"-N-m-s-o-r-k-h-u-n-t\") == \"KMP\"\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\n\"\"\"\n\nimport re\n\ns = stdin[0]\n\nr1 = re.compile('[A-Z][-A-Z]*')\nr2 = re.compile('[A-Z][-A-Z][-A-Z]*')"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n\"\"\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n\n\"\"\"\n\nfrom collections import Counter\n\nimport unittest\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"3 1 1\") == \"Province or Silver\"\n\nimport numpy as np"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''0 1 0''') == 'Estate or Copper'\nassert solution('''2 1 0''') == 'Province or Gold'\nassert solution('''3 0 0''') == 'Province or Silver'\n\nSample Input 3:\n0 0 0\nSample Output 3:\nCopper\n\nSample Input 4:\n0 0 2\nSample Output 4:\nProvince\n'''"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"1 1 1\") == \"Province or Gold\"\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n\n\"\"\"\nfrom itertools import permutations, combinations"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('1 1 0') == 'Province or Gold'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('0 2 1') == 'Estate or Silver'\nassert solution('2 2 1') == 'Province or Gold'\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 3\\n80 90\\n') == '75.7142857'\n\"\"\""
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n70 50') == '90.00'\n\"\"\"\n\nn, k = map(int, input().split())\n\nd, s = map(int, input().split())\n\nprint(d*k - s*n)\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open(\"test_input.txt\").read()) == open(\"test_output.txt\").read()\nprint(\"\ud14c\uc2a4\ud2b8 \ud1b5\uacfc!\")\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 3\\n80 90') == '75.7142857'\nprint(solution(stdin))\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 1') == 'impossible'\nassert solution('2 1') == 'impossible'\nassert solution('2 2') == 'impossible'\nassert solution('2 1\\n10 10') == '30.00'\n\n\"\"\"\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.0\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\n\"\"\"\n\nimport sys\n\nn, k = [int(i) for i in sys.stdin.readline().strip().split()]\nd, s = [int(i) for i in sys.stdin.readline().strip().split()]"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\n70 50') == '90.00'\nassert solution('10 3\\n80 90') == '75.7142857'\n\"\"\"\n\nn, k = [int(s) for s in stdin.readline().split()]\nd, s = [int(s) for s in stdin.readline().split()]"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n70 50') == '90.00'\n\"\"\"\n\n\"\"\"\nIn mathematics, the harmonic number is a function which gives the number of ways that a number can be expressed as the sum of integers, or equivalently, the number of subexpressions of the expression which evaluate to integer values. \n\nFor example, the harmonic number of the number of ways that two students can be seated next to each other in a row of four is four because there are four ways to seat two students next to each other in a row of four: one student sitting next to the left, one student sitting next to the right, two students facing each other, and no student sitting next to anyone.\n\nHere is a table of the first few harmonic numbers:\n\nHarmonic number    \n1    1    1\n2    1    1\n3    1    1\n4    2    1\n5    2    1\n6    3    1\n7    3    1\n8    4    1\n9    5    1\n10    5    1\n\nWrite a program to find the $n^{th}$ harmonic number.\n\n-----Input-----\nA single line containing an integer $n$.\n\n-----Output-----\nThe $n^{th}$ harmonic number, or \"impossible\" if $n > 10^{6}$.\n\n-----Examples-----\nSample Input 1:\n2\nSample Output 1:\n1.0\nSample Input 2:\n3\nSample Output 2:\n1.3333333333333333333333333333333333333333333333333333333333\n\n-----Hint-----\nThe harmonic number $H(n)$ can be computed using the following recursive formula:\n\n$H(n) = \\frac{1}{n} + \\frac{1}{n-1} + \\frac{1}{n-2} + \\cdots + \\frac{1}{1} = \\frac{1}{1} + \\frac{1}{2} + \\frac{1}{3} + \\cdots + \\frac{1}{n}$.\n\nTo compute the denominator of this expression, use the fact that $n$ is a positive integer.\n\"\"\""
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1\\n70 50') == '90.00'\n\"\"\""
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n70 50') == '90.00'\nassert solution('10 3\\n80 90') == '75.714285'"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1 5 4 7 6\") == \"4\"\nassert solution(\"1 2 3 4 5\") == \"5\"\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'\nassert solution('5\\n1 2 3 4 5') == '5\\n1 2 3 4 5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(print(Solution().solution(input())))\n\n\"\"\"\n\n\nclass Solution:\n    def gis(self, A: List[int]) -> List[int]:\n        \"\"\"\n        find the maximum value\n        \"\"\"\n        val = A[0]\n        res = []\n        for i in range(1, len(A)):\n            if A[i] > val:\n                res.append(A[i])\n                val = A[i]\n        return res\n\n\nclass Solution:\n    def gis(self, A: List[int]) -> List[int]:\n        \"\"\"\n        O(N)\n        \"\"\"\n        A = sorted(A)\n        res = [A[0]]\n        for i in range(1, len(A)):\n            if A[i] > res[-1]:\n                res.append(A[i])\n        return res\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 1 5 4 7 6') == '2 3 5 7'\nassert solution('1 2 3 4 5') == '1 2 3 4 5'\n\"\"\"\nfrom typing import List\n\nclass Solution:\n    def gis(self, A: List[int]) -> List[int]:\n        N = len(A)\n        gis_list = [None] * N\n        gis_list[0] = A[0]\n        for i in range(1, N):\n            gis_list[i] = A[i]\n            for j in range(i):\n                if A[j] < A[i]:\n                    if gis_list[j] > A[i]:\n                        gis_list[i] = gis_list[j]\n                        break\n            if gis_list[i] == None:\n                gis_list[i] = A[i]\n        \n        return gis_list\n    \n    def gis_list(self, A: List[int]) -> List[int]:\n        N = len(A)\n        gis_list = [None] * N\n        gis_list[0] = A[0]\n        for i in range(1, N):\n            gis_list[i] = gis_list[i - 1]\n            for j in range(i):\n                if A[j] < A[i]:\n                    if gis_list[j] > A[i]:\n                        gis_list[i] = gis_list[j]\n                        break\n            if gis_list[i] == None:\n                gis_list[i] = A[i]\n        \n        return gis_list\n        \n    def main(self) -> None:\n        n = int(input())\n        A = list(map(int, input().split()))\n        gis_list = self.gis(A)\n        print(len(gis_list))\n        print(*gis_list)\n    \n    def test(self) -> None:\n        pass"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 1 5 4 7 6') == '4'\nassert solution('1 2 3 4 5 6 7') == '5'\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 1 5 4 7 6\") == '4'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2 1 5 4 7 6\") == \"4 2 3 5 7\"\n\"\"\"\n\nimport sys\nfrom typing import List\n\n\nclass Solution:\n    def gis(self, seq: List[int]) -> List[int]:\n        \"\"\"\n        :type seq: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return [seq[0]]\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10\") == \"9 25\"\n\"\"\"\n\ntime = stdin.split()\nH, M = time[0], time[1]\nH = int(H[0]) * 10 + int(H[1])\nM = int(M[0]) * 10 + int(M[1])\nH = (45 - H) % 24\nM = (45 - M) % 60\n\nprint(str(H) + \" \" + str(M))\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n\"\"\"\n\nstdin = input().split()\n\nh, m = stdin\nh = int(h)\nm = int(m)\n\nh -= 45\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 10\") == \"9 25\"\n\nassert solution(\"0 30\") == \"23 45\"\nprint(solution(\"10 10\"))\nprint(solution(\"0 30\"))"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 10\") == \"9 25\"\n\nassert solution(\"0 30\") == \"23 45\"\n\"\"\""
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output()"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10\") == \"9 25\"\n\"\"\""
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\nassert solution(\"12 30\") == \"23 45\"\n\"\"\"\n\nh, m = map(int, input().split())\nh = (h - 45) % 24\nm = (m + 45) % 60\nprint(h, m)\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\"\"\"\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\nassert solution(\"23 45\") == \"10 10\"\nassert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\"\"\"\n\nimport sys\n\nH, M = map(int, sys.stdin.readline().split())\n\nM -= 45\nH = (H + M // 60) % 24\nM = M % 60\n\nprint(H, M)\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2.0) == '1.414213', 'Test 1'\nassert solution(1.0) == '1.0', 'Test 2'\nassert solution(0.0) == '0.0', 'Test 3'\nassert solution(0.36788) == '0.367879', 'Test 4'\nassert solution(2.718281) == '2.718281', 'Test 5'\n\nSample Input 1:\n1.000000\nSample Output 1:\n1.0\n\nSample Input 2:\n0.0\nSample Output 2:\n0.0\n\nSample Input 1:\n0.36788\nSample Output 1:\n0.367879\n\nSample Input 2:\n2.718281\nSample Output 2:\n1.414213\n\nSample Input 1:\n2.000000\nSample Output 1:\n1.414213\n\nSample Input 2:\n3.0\nSample Output 2:\n1.732050807568877\n\nSample Input 1:\n3.36788\nSample Output 1:\n1.732050807568877\n\nSample Input 2:\n3.718281\nSample Output 2:\n1.839721701014896\n\nSample Input 1:\n3.0\nSample Output 1:\n1.732050807568877\n\nSample Input 2:\n4.0\nSample Output 2:\n2.0\n\nSample Input 1:\n4.36788\nSample Output 1:\n2.0\n\nSample Input 2:\n4.718281\nSample Output 2:\n2.0\n\nSample Input 1:\n4.0\nSample Output 1:\n2.0\n\nSample Input 2:\n5.0\nSample Output 2:\n2.23606797749979\n\nSample Input 1:\n5.36788\nSample Output 1:\n2.23606797749979\n\nSample Input 2:\n5.718281\nSample Output 2:\n2.23606797749979\n\nSample Input 1:\n5.0\nSample Output 1:\n2.23606797749979\n\nSample Input 2:\n6.0\nSample Output 2:\n2.449489742783178\n\nSample Input 1:\n6.36788\nSample Output 1:\n2.449489742783178\n\nSample Input 2:\n6.718281\nSample Output 2:\n2.449489742783178\n\nSample Input 1:\n6.0\nSample Output 1:\n2.449489742783178\n\nSample Input 2:\n7.0\nSample Output 2:\n2.64575131106459\n\nSample Input 1:\n7.36788\nSample Output 1:\n2.64575131106459\n\nSample Input 2:\n7.718281\nSample Output 2:\n2.64575131106459\n\nSample Input 1:\n7.0\nSample Output 1:\n2.64575131106459\n\nSample Input 2:\n8.0\nSample Output 2:\n2.82842712474619\n\nSample Input 1:\n8.36788\nSample Output 1:\n2.82842712474619\n\nSample Input 2:\n8.718281\nSample Output 2:\n2.82842712474619\n\nSample Input 1:\n8.0\nSample Output 1:\n2.82842712474619\n\nSample Input 2:\n9.0\nSample Output 2:\n2.938191512799122\n\nSample Input 1:\n9.36788\nSample Output 1:\n2.938191512799122\n\nSample Input 2:\n9.718281\nSample Output 2:\n2.938191512799122\n\nSample Input 1:\n9.0\nSample Output 1:\n2.938191512799122\n\nSample Input 2:\n10.0\nSample Output 2:\n3.0\n\nSample Input 1:\n10.36788\nSample Output 1:\n3.0\n\nSample Input 2:\n10.718281\nSample Output 2:\n3.0\n\nSample Input 1:\n10.0\nSample Output 1:\n3.0\n\nSample Input 2:\n11.0\nSample Output 2:\n3.0\n\nSample Input 1:\n11.36788\nSample Output 1:\n3.0\n\nSample Input 2:\n11.718281\nSample Output 2:\n3.0\n\nSample Input 1:\n11.0\nSample Output 1:\n3.0\n\nSample Input 2:\n12.0\nSample Output 2:\n3.0\n\nSample Input 1:\n12.36788\nSample Output 1:\n3.0\n\nSample Input 2:\n12.718281\nSample Output 2:\n3.0\n\nSample Input 1:\n12.0\nSample Output 1:\n3.0\n\nSample Input 2:\n13.0\nSample Output 2:\n3.0\n\nSample Input 1:\n13.36788\nSample Output 1:\n3.0\n\nSample Input 2:\n13.718281\nSample Output 2:\n3.0\n\nSample Input 1:\n13.0\nSample Output 1:\n3.0\n\nSample Input 2:\n14.0\nSample Output 2:\n3.0\n\nSample Input 1:\n14.36788\nSample Output 1:\n3.0\n\nSample Input 2:\n14.718281\nSample Output 2:\n3.0\n\nSample Input 1:\n14.0\nSample Output 1:\n3.0\n\nSample Input 2:\n15.0\nSample Output 2:\n3.0\n\nSample Input 1:\n15.36788\nSample Output 1:\n3.0\n\nSample Input 2:\n15.718281\nSample Output 2:\n3.0\n\nSample Input 1:\n15.0\nSample Output 1:\n3.0\n\nSample Input 2:\n16.0\nSample Output 2:\n3.0\n\nSample Input 1:\n16.36788\nSample Output 1:\n3.0\n\nSample Input 2:\n16.718281\nSample Output 2:\n3.0\n\nSample Input 1:\n16.0\nSample Output 1:\n3.0\n\nSample Input 2:\n17.0\nSample Output 2:\n3.0\n\nSample Input 1:\n17.36788\nSample Output 1:\n3.0\n\nSample Input 2:\n17.718281\nSample Output 2:\n3.0\n\nSample Input 1:\n17.0\nSample Output 1:\n3.0\n\nSample Input 2:\n18.0\nSample Output 2:\n3.0\n\nSample Input 1:\n18.36788\nSample Output 1:\n3.0\n\nSample Input 2:\n18.718281\nSample Output 2:\n3.0\n\nSample Input 1:\n18.0\nSample Output 1:\n3.0\n\nSample Input 2:\n19.0\nSample Output 2:\n3.0\n\nSample Input 1:\n19.36788\nSample Output 1:\n3.0"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2.000000') == '1.414214'\n\"\"\"\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0.36788\") == \"1.414214\"\n\nassert solution(\"2.718281\") == \"1.999999\"\n\nassert solution(\"1\") == \"1\"\n\nassert solution(\"1.000000\") == \"1.000000\"\n\nassert solution(\"2.000000\") == \"1.414214\"\n\n\"\"\"\nimport math\n\nN = float(input())"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2.0\") == \"1.41\"\nassert solution(\"2.71828\") == \"1.414\"\n\n-----Solution-----\n\n\"\"\"\n\nn = float(stdin.read())\na = 1\nwhile 1 + 1 / a < n:\n    a += 1\nprint(a)\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\n\nSolution:\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2.000000') == '1.414214'\n\n\"\"\"\n\nimport sys\n\nN = float(sys.stdin.readline().rstrip())\n\nprint(abs(1 + N - 1 - (1/N)) < 0.00001)\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1.000000') == '1.000000'\nassert solution('2.718281') == '1.414214'\nassert solution('0.36788') == '1.414214'\nassert solution('0.07788') == '1.414214'\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\nassert solution('0.36788') == '0.482557'\nassert solution('3.87915') == '0.778465'\nassert solution('6.95879') == '0.097155'\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2.1') == '1.709925'\nassert solution('2.2') == '1.709925'\nassert solution('2.3') == '1.714040'\nassert solution('2.4') == '1.714040'\nassert solution('2.5') == '1.714040'\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2.71828') == '1.414214'\nassert solution('0.36788') == '1.414214'\n\"\"\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '3: \\n2,1'\nassert solution('50') == '50: \\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25'\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def stars(self, n: int, pattern: List[int]) -> str:\n        if n == 1:\n            return str(n)\n        rows = pattern[0]\n        stars = pattern[1]\n        return f'{n}:{rows},' + '\\n'.join(\n            f'{rows},{stars}'\n            for rows in range(1, stars+1)\n        )\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '3:', f'Expected: 3: Actual: {solution(\"3\")}'\nassert solution('50') == '50:', f'Expected: 50: Actual: {solution(\"50\")}'\n\nassert solution('-3') == '3:', f'Expected: 3: Actual: {solution(\"-3\")}'\nassert solution('-50') == '50:', f'Expected: 50: Actual: {solution(\"-50\")}'\n\nassert solution('0') == '0:', f'Expected: 0: Actual: {solution(\"0\")}'\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3:\", \"WA\"\nassert solution(\"50\") == \"50:\", \"WA\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '3:'\nassert solution('2,1') == '2,1:'\nassert solution('2,2') == '2,2:'\nassert solution('3,2') == '3,2:'\nassert solution('5,4') == '5,4:'\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3''') == '''3:\n2,1\n'''\nassert solution('''50''') == '''50:\n2,1\n2,2\n3,2\n5,4\n5,5\n6,5\n10,10\n13,12\n17,16\n25,25\n'''\nprint('Hooray!')\n\n-----Notes-----\n- For this problem, every line printed must be exactly one character long. \n- No other characters or tabs are permitted.\n\"\"\""
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3:\", \"WA\"\nassert solution(\"50\") == \"50:\", \"WA\""
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"3: \\n2,1\\n\"\nassert solution(\"50\") == \"50: \\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\\n\"\n\nprint(\"Successfully passed all test cases!\")\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '3:', \"WA for case #1\"\nassert solution('50') == '50:', \"WA for case #2\"\n\n-----Notes-----\nThe output is just the string representation of the compact representation of the stars.\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '3: \\n2,1\\n'\nassert solution('50') == '50: \\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\\n'\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '3:', 'Expected solution(3) to be 3: but got {}'.format(solution(3))\nassert solution('50') == '50:', 'Expected solution(50) to be 50: but got {}'.format(solution(50))\n\"\"\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"THE RAIN IN SPAIN\"\n) == \"yes\"\nassert solution(\n    \"IN THE RAIN AND THE SNOW\"\n) == \"no\"\nprint(\"Success!\")\n\n\"\"\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\n\"\"\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('THE RAIN IN SPAIN') == \"yes\"\nassert solution('IN THE RAIN AND THE SNOW') == \"no\"\nassert solution('THE RAIN IN SPAIN IN THE PLAIN') == \"yes\"\nassert solution('AAA') == \"yes\"\nassert solution('ABBA') == \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == 'yes'\nassert solution(\"IN THE RAIN AND THE SNOW\") == 'no'\n\"\"\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\nassert solution(\"RLLRRLLR\") == \"HKHKH\"\n\"\"\"\nimport collections\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RRRRRRRRRRRRRR\") == \"S\"\nassert solution(\"RRRRRLLRLLRLL\") == \"S\"\nassert solution(\"RRRRRRLLLRRRRR\") == \"S\"\nassert solution(\"LLRLLRLLRLLRRR\") == \"S\"\n\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\nassert solution(\"RBRRBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RRRRBBLLLRR\") == \"SSKKKKKHHHSS\"\nassert solution(\"RBRBBRLLRRRRR\") == \"CHCCCS\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\nprint('Test pass.')\n\n---\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\""
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\n\"\"\"\n\nimport unittest\n\nimport collections\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        return self.solution_01(stdin)\n\n    def solution_01(self, stdin: str) -> str:\n        return self.solution_02(stdin)\n\n    def solution_02(self, stdin: str) -> str:\n        return self.solution_03(stdin)\n\n    def solution_03(self, stdin: str) -> str:\n        if not stdin:\n            return ''\n\n        result = []\n        for move in stdin:\n            if move == 'R':\n                result.append('S')\n            elif move == 'B':\n                result.append('K')\n            elif move == 'L':\n                result.append('H')\n            else:\n                raise ValueError('Invalid move.')\n\n        if len(result) < 2:\n            return result[0]\n        result.append('C')\n        return ''.join(result)\n\n    def solution_04(self, stdin: str) -> str:\n        if not stdin:\n            return ''\n\n        result = []\n        counter = collections.defaultdict(int)\n        for move in stdin:\n            counter[move] += 1\n            if counter[move] > 2:\n                result.append('C')\n                counter[move] = 1\n        if not result:\n            return ''\n\n        if result[-1] == 'C':\n            result.pop()\n            return ''.join(result)\n\n        for move in stdin[::-1]:\n            if move == 'R':\n                result.append('S')\n            elif move == 'B':\n                result.append('K')\n            elif move == 'L':\n                result.append('H')\n            else:\n                raise ValueError('Invalid move.')\n\n        if not result:\n            return ''\n\n        if result[-1] == 'C':\n            result.pop()\n            return ''.join(result)\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual('SSKKKHHS', Solution().solution_01('RRBBBLLR'))\n        self.assertEqual('CHCS', Solution().solution_01('RBLLLBRR'))\n        self.assertEqual('SSKKKHHS', Solution().solution_02('RRBBBLLR'))\n        self."
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\n\"\"\""
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 7\") == \"\"\"1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7\"\"\"\nassert solution(\"2 4 7\") == \"\"\"1\nFizz\n3\nFizzBuzz\n5\nFizz\n7\"\"\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7'\n\n\"\"\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7'\nassert solution('2 4 7') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 7\\n\") == \"\"\"1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7\n\"\"\"\nassert solution(\"2 4 7\\n\") == \"\"\"1\nFizz\n3\nFizzBuzz\n5\nFizz\n7\n\"\"\"\n\nprint(\"Passed!\")\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(expected_result)\n\nprint(solution(str(input())))\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 7\\n\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n\"\nassert solution(\"2 4 7\\n\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 3 7''') == '''1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7'''\nprint('PASS' if solution('''2 3 7''') == '''1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7''' else 'FAIL')\n\nassert solution('''2 4 7''') == '''1\nFizz\n3\nFizzBuzz\n5\nFizz\n7'''\nprint('PASS' if solution('''2 4 7''') == '''1\nFizz\n3\nFizzBuzz\n5\nFizz\n7''' else 'FAIL')\n\nassert solution('''2 5 4''') == '''1\nFizz\n2\nFizzBuzz\n3\nFizz\n4'''\nprint('PASS' if solution('''2 5 4''') == '''1\nFizz\n2\nFizzBuzz\n3\nFizz\n4''' else 'FAIL')\n\nassert solution('''3 1 7''') == '''1\nFizz\n3\nFizz\n5\nFizz\n7'''\nprint('PASS' if solution('''3 1 7''') == '''1\nFizz\n3\nFizz\n5\nFizz\n7''' else 'FAIL')\n\nassert solution('''1 2 7''') == '''1\nFizz\n2\nFizz\n3\nFizz\n4'''\nprint('PASS' if solution('''1 2 7''') == '''1\nFizz\n2\nFizz\n3\nFizz\n4''' else 'FAIL')"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 7\\n\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"\nprint(\"Test finished.\")\n\n\"\"\""
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\"\nassert solution(\"2 3 3\") == \"1\\n2\\nFizz\\n4\\nFizzBuzz\"\nassert solution(\"2 3 6\") == \"1\\n2\\nFizz\\n4\\nFizzBuzz\\n6\"\nassert solution(\"2 3 5\") == \"1\\n2\\nFizz\\n4\\nFizzBuzz\\n5\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\"\"\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\n\"\"\""
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\n\"\"\"\n\nfrom functools import reduce\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\""
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\n\"\"\""
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\n\"\"\"\nimport math"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(solution.test_cases) == solution.test_cases_results\nprint(\"All tests passed.\")\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\nimport math\nimport sys\nimport unittest\n\nclass Solution:\n    def solution(self, stdin):\n        n, dm = map(int, stdin.readline().split())\n        d = [int(stdin.readline()) for _ in range(n)]\n        \n        prev = None\n        l = []\n        for i in range(n - 1, 0, -1):\n            if d[i] < dm and d[i] > prev:\n                prev = d[i]\n                l.append(i)\n\n        if l:\n            print(\"It hadn't snowed this early in {} years!\".format(len(l)))\n        else:\n            print(\"It hadn't snowed this early in 0 years!\")"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 2') == '2'\nassert solution('10 10') == '7'\nassert solution('10 10') == '7'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2\") == 2\nassert solution(\"10 10\") == 7\nassert solution(\"15 8\") == 1\nassert solution(\"22 12\") == 7\nassert solution(\"22 13\") == 1\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 2\") == \"2\"\n\nassert solution(\"10 10\") == \"7\""
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"10 10\") == \"7\"\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 1\n'''\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2\\n\") == 2\nassert solution(\"10 10\\n\") == 7\n\"\"\"\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"10 10\") == \"7\"\n\nprint(\"All test cases passed.\")"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''6 5\n''') == \"2\"\nassert solution('''10 10\n''') == \"5\"\nassert solution('''3 3\n''') == \"1\"\nassert solution('''2 2\n''') == \"1\"\n'''\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 2') == '2'\nassert solution('10 10') == '7'\nassert solution('10 10') == '7'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 10\") == \"7\"\n\"\"\""
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\"\"\"\n\n\n\nimport numpy as np"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\nassert solution('gfqx') == 'gfqx'\nassert solution('dnmjdzncnvw') == 'dnmjdzncnvw'\nassert solution('cjhqfohv') == 'cjhqfohv'"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\n\nprint(solution(stdin))\n'''"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\"\"\""
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"bkb\") == \"bkb\"\nassert solution(\"fk\") == \"fk\"\nassert solution(\"bkfoio\") == \"bkfoio\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\nassert solution('ibonusuuladici') == 'bombonisuuladici'\n\nSample Input 3:\nz\n\nSample Output 3:\nz\n\"\"\""
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"pqpqqf\") == \"pqpqqf\"\nassert solution(\"abcd\") == \"abcd\"\n\nprint(\"Success!\")\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"xoozt\") == \"xoowt\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\"\"\""
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"8 2\"\nassert solution(\"7\") == \"8 3\"\n\"\"\""
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6') == '8 2'\nassert solution('7') == '8 3'\nassert solution('8') == '8 4'\n\"\"\""
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6') == '8 2'\nassert solution('7') == '8 3'\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6') == '8 2'\nassert solution('7') == '8 3'\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"8 2\"\n\nimport sys\n\nsys.stdin.readline().strip()\n\nfor i in range(int(sys.stdin.readline().strip())):\n    print(int(sys.stdin.readline().strip()) // 2, int(sys.stdin.readline().strip()) - int(sys.stdin.readline().strip()) // 2)\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\") == \"8 2\"\nprint(\"Test finished.\")\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n8') == '8 2'\nassert solution('7\\n8') == '8 3'\nassert solution('9\\n10') == '16 6'\nassert solution('18\\n21') == '22 7'"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\") == '8 2'\n\"\"\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6') == '8 2'\n\nassert solution('7') == '8 3'\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\") == \"8 3\"\nassert solution(\"6\") == \"8 2\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''S\n1\nerres airs ears ares aires\neet eat\n2\napples and pears\nplates of meat\n2\ntasty sprout\ndifficult route\nworried and frenecious\nforever in doubt\napples and pears\n''') == '''YES\nYES\nYES\nYES\nNO'''\n\nassert solution('''S\n1\nerres airs ears ares aires\neet eat\n2\napples and pears\nplates of meat\n2\ntasty sprout\ndifficult route\nworried and frenecious\nforever in doubt\napples and pears\n''') == '''YES\nYES\nYES\nYES\nNO'''\n\nassert solution('''S\n1\nerres airs ears ares aires\neet eat\n2\napples and pears\nplates of meat\n2\ntasty sprout\ndifficult route\nworried and frenecious\nforever in doubt\napples and pears\n''') == '''YES\nYES\nYES\nYES\nNO'''\n\nassert solution('''S\n1\nerres airs ears ares aires\neet eat\n2\napples and pears\nplates of meat\n2\ntasty sprout\ndifficult route\nworried and frenecious\nforever in doubt\napples and pears\n''') == '''YES\nYES\nYES\nYES\nNO'''\n\nassert solution('''S\n1\nerres airs ears ares aires\neet eat\n2\napples and pears\nplates of meat\n2\ntasty sprout\ndifficult route\nworried and frenecious\nforever in doubt\napples and pears\n''') == '''YES\nYES\nYES\nYES\nNO'''"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"shelves\") == \"YES\"\nassert solution(\"truck\") == \"NO\"\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"stairs\", 2, [\"erres\", \"airs\", \"aires\", \"ais\"], [\"eet\", \"eat\"], 2, [\"apples\", \"and\", \"pears\"], [\"plates\", \"of\", \"meat\"], [\"tasty\", \"sprout\", \"difficult\", \"route\", \"worried\", \"and\", \"fraught\", \"forever\", \"in\", \"doubt\"], [\"apples\", \"and\", \"pears\"], [\"aught\", \"ought\", \"aut\", \"acht\", \"aught\", \"outte\", \"out\", \"oute\"]) == \"YES\\nNO\\nYES\\nYES\\nNO\"\nassert solution(\"drought\", 2, [\"aught\", \"ought\", \"aut\", \"acht\", \"aught\", \"outte\", \"out\", \"oute\"], [], 5, [\"tasty\", \"sprout\", \"difficult\", \"route\", \"worried\", \"and\", \"fraught\", \"forever\", \"in\", \"doubt\"], [\"apples\", \"and\", \"pears\"], [\"apples\", \"and\", \"pars\"], [\"aught\", \"ought\", \"aut\", \"acht\", \"aught\", \"outte\", \"out\", \"oute\"]) == \"NO\\nYES\\nNO\\nNO\\nNO\"\nassert solution(\"drought\", 2, [\"aught\", \"ought\", \"aut\", \"acht\", \"aught\", \"outte\", \"out\", \"oute\"], [], 5, [\"tasty\", \"sprout\", \"difficult\", \"route\", \"worried\", \"and\", \"fraught\", \"forever\", \"in\", \"doubt\"], [\"apples\", \"and\", \"pears\"], [\"apples\", \"and\", \"pars\"], [\"aught\", \"ought\", \"aut\", \"acht\", \"aught\", \"outte\", \"out\", \"oute\"]) == \"NO\\nNO\\nNO\\nNO\\nNO\"\n\"\"\""
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('drought') == 'NO'\nassert solution('stairs') == 'NO'\nassert solution('apples and pears') == 'YES'\nassert solution('tasty sprout') == 'YES'\nassert solution('difficult route') == 'YES'\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"apples\") == \"YES\"\nassert solution(\"drought\") == \"NO\"\nassert solution(\"rotten\") == \"YES\"\n\n\"\"\"\n\nimport re\n\nfrom util import *\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('stairs\\n2\\nerres\\nairs\\n\\nears\\naires\\n\\n\\neet\\n\\n\\neat\\n\\n\\n2\\n\\apples\\n\\n\\n\\n\\n\\n\\npears\\n\\n\\n\\n\\n\\n\\n\\n\\ntasty\\n\\n\\n\\ndifficult\\n\\n\\nworried\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\napples\\n\\n\\n\\n\\n\\n\\n\\n\\npears') == '\\nYES\\nNO\\nYES\\n\\nNO\\nYES\\n\\n\\nYES\\n\\n\\nNO\\n\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\nYES\\nYES\\nNO\\"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('stairs', 2, 'erres airs ears ares aires', 'eet eat', 2, 'apples and pears', 'plates of meat', 'tasty sprout', 'difficult route', 'worried and frantic', 'forever in doubt', 'apples and pears') == 'YES\\nNO\\nYES\\nNO\\nYES\\nNO'\nassert solution('drought', 2, 'aught ought aut acht', 'ought oubt outte out oute', 5, 'tasty sprout', 'difficult route', 'worried and frantic', 'forever in doubt', 'apples and pears') == 'YES\\nYES\\nYES\\nYES\\nNO'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('stairs\\n2\\nerres airs ears ares aires\\neet eat\\n2\\napples and pears\\nplates of meat\\n2\\ntasty sprout\\ndifficult route\\nworried and\\nforever in doubt\\napples and pears\\n') == 'YES\\nNO\\nYES\\nYES\\nNO'\n\n\"\"\""
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"stairs\") == \"YES\"\n\"\"\"\n\nwith open(\"/Users/haolinz/Documents/CSci-442/inputs/assign10_input.txt\") as file:\n    \n    line = file.readline()\n    while line!= \"\":\n        S = line.rstrip()\n        E = int(file.readline().rstrip())\n        endings = []\n        for i in range(E):\n            endings.append(file.readline().rstrip())\n        P = int(file.readline().rstrip())\n        phrases = []\n        for i in range(P):\n            phrases.append(file.readline().rstrip())\n        \n        if \"\".join(S) == \"\".join(S.upper()):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        line = file.readline()\n        \n    file.close()\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n\n''') == '''\n'''\n\nassert solution('''\n\n''') == '''\n'''\n\nassert solution('''\n\n''') == '''\n'''\n\nassert solution('''\n\n''') == '''\n'''\n\nassert solution('''\n\n''') == '''\n'''"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'WIN'\nassert solution('BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'LOSE'\n\"\"\"\n\nimport collections\nimport itertools\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\nassert solution('FRANCISCO') == 'LOSE'\nassert solution('ALBALA') == 'LOSE'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n') == 'WIN'\nassert solution('BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n') == 'LOSE'\n\"\"\""
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'LOSE'\nassert solution('A') == 'WIN'\nassert solution('CAB') == 'LOSE'\nassert solution('ACB') == 'WIN'\nassert solution('ABC') == 'LOSE'\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''HANGMAN\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n''') == 'WIN'\n\nassert solution('''BANANA\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n''') == 'LOSE'\nprint(solution(stdin.read()))\n\n'''\n\ubb38\uc81c \uc124\uba85\n\ubb38\uc790\uc5f4\ub85c \uc8fc\uc5b4\uc9c4 \ub2e8\uc5b4\ub97c \uac00\uc9c0\uace0 \uc788\ub294\ub370, \uc774 \ub2e8\uc5b4\uc5d0\uc11c \uc911\ubcf5\uc744 \uc81c\uac70\ud558\uace0 \uc54c\ud30c\ubcb3 \uc21c\uc11c\ub85c \uc815\ub82c\ud55c \ubb38\uc790\uc5f4\uc744 \ub9ac\ud134\ud558\ub294 \ud568\uc218 solution\uc744 \uc644\uc131\ud558\uc138\uc694. \uc8fc\uc5b4\uc9c4 \ubb38\uc790\uc5f4\uc740 \ubaa8\ub450 \uc18c\ubb38\uc790\ub85c \uc8fc\uc5b4\uc9d1\ub2c8\ub2e4.\n\n\uc81c\ud55c \uc0ac\ud56d\n\ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub294 3 \uc774\uc0c1 10 \uc774\ud558\uc774\uba70, \uc218\ubc15\uc218\ubc15\uc218\ubc15\uc218...\uc640 \uac19\uc774 \uc5f0\uc18d\ud574\uc11c \ubc18\ubcf5\ub418\ub294 \ubb38\uc790\uac00 \uc788\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc785\ucd9c\ub825 \uc608 #1\nsolution('HANGMAN')\n'HANGMAN'\n\uc785\ucd9c\ub825 \uc608 #2\nsolution('BANANA')\n'BANAN'\n'''\n\n'''\n\uc785\ucd9c\ub825 \uc608 #1\n'HANGMAN'\ub294 \uc8fc\uc5b4\uc9c4 \ub2e8\uc5b4\ub85c \uc2dc\uc791\ud558\ubbc0\ub85c, \ubb38\uc790\uc5f4\uc758 \uccab \ubc88\uc9f8 \ubb38\uc790\ub294 H, \ub450 \ubc88\uc9f8 \ubb38\uc790\ub294 A, \uc138 \ubc88\uc9f8 \ubb38\uc790\ub294 N, \ub124 \ubc88\uc9f8 \ubb38\uc790\ub294 M\uc774 \ub429\ub2c8\ub2e4.\n'HANGMAN'\ub294 \uc911\ubcf5\uc744 \uc81c\uac70\ud558\uc5ec \uc54c\ud30c\ubcb3 \uc21c\uc11c\ub85c \uc815\ub82c\ud558\uc5ec 'HANGMAN'\uc785\ub2c8\ub2e4.\n\uc785\ucd9c\ub825 \uc608 #2\n'BANANA'\ub294 \uc8fc\uc5b4\uc9c4 \ub2e8\uc5b4\ub85c \uc2dc\uc791\ud558\ubbc0\ub85c, \ubb38\uc790\uc5f4\uc758 \uccab \ubc88\uc9f8 \ubb38\uc790\ub294 B, \ub450 \ubc88\uc9f8 \ubb38\uc790\ub294 A, \uc138 \ubc88\uc9f8 \ubb38\uc790\ub294 N, \ub124 \ubc88\uc9f8 \ubb38\uc790\ub294 A, \uc5ec\uc12f \ubc88\uc9f8 \ubb38\uc790\ub294 N\uc774 \ub429\ub2c8\ub2e4.\n'BANAN'\ub294 \uc911\ubcf5\uc744 \uc81c\uac70\ud558\uc5ec \uc54c\ud30c\ubcb3 \uc21c\uc11c\ub85c \uc815\ub82c\ud558\uc5ec 'BANANA'\uc785\ub2c8\ub2e4.\n'''\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\n\"\"\""
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\nassert solution('A') == 'WIN'\nassert solution('B') == 'LOSE'\nassert solution('C') == 'WIN'\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == \"DECREASING\"\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == \"NEITHER\"\n'''\n\n'''\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5\nJOE\nBOB\nANDY\nAL\nADAM\"\"\") == \"DECREASING\"\nassert solution(\"\"\"11\nHOPE\nALI\nBECKY\nJULIE\nMEGHAN\nLAUREN\nMORGAN\nCARLI\nMEGAN\nALEX\nTOBIN\"\"\") == \"NEITHER\"\nassert solution(\"\"\"12\nTOM\nGRIE\nRAM\nHEN\nJOE\nANNE\nJACK\nNONE\nRIA\nNANI\nJAC\nGAL\nMARI\nMIR\nKIRK\nFARI\nNINO\nCLEM\"\"\") == \"INCREASING\"\nassert solution(\"\"\"15\nRENE\nNINE\nMATTE\nNOONAN\nJOAN\nGOW\nKALI\nVIOLET\nHEN\nNONE\nBAL\nRON\nKIRK\nWADE\nMARI\nJACK\nMIR\nJANI\nGAL\nZARY\"\"\") == \"NEITHER\""
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\n\"\"\"\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\nprint('Success')\n\nhttps://www.codewars.com/kata/554b4ac871d6813a03000035/train/python\n\"\"\"\n\nimport re"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('\\n'.join([\n    '5',\n    'JOE',\n    'BOB',\n    'ANDY',\n    'AL',\n    'ADAM'\n])) == 'DECREASING'\nassert solution('\\n'.join([\n    '11',\n    'HOPE',\n    'ALI',\n    'BECKY',\n    'JULIE',\n    'MEGHAN',\n    'LAUREN',\n    'MORGAN',\n    'CARLI',\n    'MEGAN',\n    'ALEX',\n    'TOBIN'\n])) == 'NEITHER'\n\"\"\"\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'INCREASING'\nassert solution('JOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('JOE\\nBOB\\nANDY\\nAL\\nADAM\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'INCREASING'\nassert solution('a\\n b\\n c\\n') == 'INCREASING'\nassert solution('a\\n a\\n a\\n') == 'DECREASING'\nassert solution('a\\n b\\n c\\n d\\n') == 'NEITHER'\nassert solution('z\\n y\\n x\\n w\\n v\\n u\\n t\\n s\\n r\\n q\\n p\\n o\\n n\\n m\\n l\\n k\\n j\\n i\\n h\\n g\\n f\\n e\\n d\\n c\\n b\\n a') == 'DECREASING'\n\n------BEST SOLUTION------\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\nprint('Passed')\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\nassert solution(\"2\\nBOB\\nJOE\") == \"INCREASING\"\nassert solution(\"2\\nJOE\\nBOB\") == \"INCREASING\"\nassert solution(\"3\\nHOPE\\nALI\\nBECKY\") == \"DECREASING\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10 13\") == \"George wins!\"\nassert solution(\"4 10 13\") == \"Nina wins!\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nJess wins!\\nNina wins!\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == 'No winner!'\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == 'Nina wins!'\n\n\"\"\""
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\"\n\nassert solution(\"3 10 13\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nJess 2\\nNina 1\\nJess 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Jess wins!\\nNina wins!\\nJess wins!\"\n\nassert solution(\"3 10 13\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nJess 2\\nNina 1\\nJess 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"No winner!\"\n\nassert solution(\"3 10 13\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nJess 2\\nNina 1\\nJess 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"No winner!\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"3 10 13\nJohn\nKelly\nGeorge\nKelly 1\nGeorge 2\nKelly 1\nJohn 2\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nGeorge 3\nKelly 1\"\"\") == \"George wins!\\nNina wins!\\nJess wins!\\nNina wins!\\n\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 10 13') == 'George wins!\\nKelly wins!\\nNo winner!\\n'\nassert solution('4 10 13') == 'Nina wins!\\nJess wins!\\nNina wins!\\nJess wins!\\nNo winner!\\n'\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 10 13\nJohn\nKelly\nGeorge\nKelly 1\nGeorge 2\nKelly 1\nJohn 2\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nKelly 3\nKelly 1''') == '''George wins!\nNina wins!\nJess wins!'''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10 13\") == \"George wins!\\nKelly wins!\\nNo winner!\"\n\n\"\"\"\n\nimport collections\nimport sys\n\nlines = sys.stdin.readlines()\nn, p, m = map(int, lines[0].split())\n\npoints = collections.defaultdict(int)\n\nfor i in range(1, n + 1):\n    player = lines[i]\n    points[player[:-1]] = points.get(player[:-1], 0) + int(player[-1])\n\nordered = sorted(points.items(), key=lambda x: x[1], reverse=True)"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10 13\") == \"\"\"George wins!\nNina wins!\nJess wins!\n\"\"\"\nassert solution(\"4 10 13\") == \"\"\"Nina wins!\nJess wins!\nBob wins!\n\"\"\"\n\"\"\"\nn, p, m = map(int, stdin.readline().strip().split())\nmtrx = [stdin.readline().strip().split() for _ in range(m)]"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\"\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\"\nassert solution(\"7 9 13\\nCameron\\nAlex\\nCameron 2\\nAlex 2\\nAlex 3\\nCameron 3\\nCameron 1\\nAlex 3\\nCameron 1\\nAlex 2\\nAlex 1\") == \"No winner!\"\nassert solution(\"5 9 13\\nCameron\\nAlex\\nCameron 3\\nAlex 2\\nAlex 3\\nCameron 1\\nAlex 2\\nAlex 3\\nCameron 1\\nAlex 2\\nAlex 1\") == \"No winner!\"\nassert solution(\"3 10 13\\nCameron\\nAlex\\nCameron 2\\nAlex 3\\nCameron 3\\nAlex 2\\nAlex 3\\nCameron 1\\nAlex 2\\nAlex 1\") == \"Cameron wins!\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 0 0 5 4') == '2.0'\n\"\"\""
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3 0 0 5 4\") == '2.0'\nassert solution(\"6 0 0 2 7 6\") == '2.0'\n\"\"\""
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3 0 0 5 4\") == '2.0'\nassert solution(\"6 0 0 2 7 6\") == '2.0'\n\"\"\"\n\nfrom math import *\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\n\"\"\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'\n\n\"\"\"\n\n\"\"\"\n\n7.4 \u2013 Animais: Crie uma lista com cinco animais diferentes. Percorra a lista com um la\u00e7o e mostre uma frase para cada animal, por exemplo, Um cachorro seria um \u00f3timo animal de estima\u00e7\u00e3o.\n\n-----Input-----\nOs dados de entrada ser\u00e3o 5 nomes de animais, sendo eles: gato, cachorro, cobra, vaca, p\u00e1ssaro.\n\n-----Output-----\nA sa\u00edda dever\u00e1 conter uma frase para cada animal, por exemplo, Um cachorro seria um \u00f3timo animal de estima\u00e7\u00e3o.\n\n-----Examples-----\nSample Input 1:\ngato\ncachorro\ncobra\nvaca\np\u00e1ssaro\nSample Output 1:\nUm cachorro seria um \u00f3timo animal de estima\u00e7\u00e3o.\n\nSample Input 2:\ncachorro\ngato\ncobra\nvaca\np\u00e1ssaro\nSample Output 2:\nUm gato seria um \u00f3timo animal de estima\u00e7\u00e3o.\n\n\"\"\"\n\n\"\"\"\n\n7.5 \u2013 Jogo da forca:\nCrie um programa onde o computador vai \u201cpensar\u201d em um n\u00famero inteiro entre 0 e 10. O jogador vai tentar adivinhar qual n\u00famero foi escolhido at\u00e9 acertar, mostrando no final quantos palpites foram necess\u00e1rios para vencer.\n\n-----Input-----\nA entrada cont\u00e9m um \u00fanico valor inteiro $K$, representando o n\u00famero a ser adivinhado.\n\n-----Output-----\nA sa\u00edda cont\u00e9m um valor inteiro representando a quantidade de palpites necess\u00e1rios para vencer.\n\n-----Examples-----\nSample Input 1:\n8\nSample Output 1:\n1\n\nSample Input 2:\n5\nSample Output 2:\n3\n\nSample Input 3:\n3\nSample Output 3:\n1\n\n\"\"\"\n\n\"\"\"\n\n7.6 \u2013 Vendedor ambulante: Escreva um algoritmo em PORTUGOL que receba dois n\u00fameros inteiros, $x$ e $y$, e que calcule e mostre:\na) o menor n\u00famero inteiro positivo;\nb) a m\u00e9dia aritm\u00e9tica dos n\u00fameros inteiros $x$ e $y$;\nc) a soma dos n\u00fameros inteiros $x$ e $y$;\nd) o n\u00famero m\u00faltiplo de $x$ que mais se aproxima do n\u00famero m\u00e9dio;\ne) o menor n\u00famero inteiro positivo que \u00e9 divis\u00edvel por $x$;\nf) o menor n\u00famero inteiro positivo que \u00e9 divis\u00edvel por $y$.\n\n-----Input-----\nDois n\u00fameros inteiros, $x$ e $y$, s\u00e3o fornecidos na sa\u00edda como n\u00fameros reais.\n\n-----Output-----\nAs sa\u00eddas dever\u00e3o ser impressas na mesma linha, separadas por um espa\u00e7o em branco.\n\nExemplos:\na) O menor n\u00famero inteiro positivo;\nb) A m\u00e9dia aritm\u00e9tica dos n\u00fameros inteiros $x$ e $y$;\nc) A soma dos n\u00fameros inteiros $x$ e $y$;\nd) O n\u00famero m\u00faltiplo de $x$ que mais se aproxima do n\u00famero m\u00e9dio;\ne) O menor n\u00famero inteiro positivo que \u00e9 divis\u00edvel por $x$;\nf) O menor n\u00famero inteiro positivo que \u00e9 divis\u00edvel por $y$.\n\n-----Examples-----\nSample Input 1:\n2 4\nSample Output 1:\na) 1\nb) 2.5\nc) 5\nd) 2\ne) 0\nf) 2\n\nSample Input 2:\n3 2\nSample Output 2:\na) 0\nb) 1.5\nc) 3\nd) 0\ne) 1\nf) 0\n\nSample Input 3:\n5 7\nSample Output 3:\na) 0\nb) 3.5\nc) 14\nd) 3\ne) 0\nf) 0\n\n\"\"\"\n\n\"\"\"\n\n7.7 \u2013 Animais: Crie uma lista com cinco animais diferentes. Percorra a lista com um la\u00e7o e mostre uma frase para cada animal, por exemplo, Um cachorro seria um \u00f3timo animal de estima\u00e7\u00e3o.\n\n-----Input-----\nOs dados de entrada ser\u00e3o 5 nomes de animais, sendo eles: gato, cachorro, cobra, vaca, p\u00e1ssaro.\n\n-----Output-----\nA sa\u00edda dever\u00e1 conter uma frase para cada animal, por exemplo, Um cachorro seria um \u00f3timo animal de estima\u00e7\u00e3o.\n\n-----Examples-----\nSample Input 1:\ngato\ncachorro\ncobra\nvaca\np\u00e1ssaro\nSample Output 1:\nUm cachorro seria um \u00f3timo animal de estima\u00e7\u00e3o.\n\nSample Input 2:\ncachorro\ngato\ncobra\nvaca\np\u00e1ssaro\nSample Output 2:\nUm gato seria um \u00f3timo animal de estima\u00e7\u00e3o.\n\n\"\"\"\n\n\"\"\"\n\n7.8 \u2013 Criando sua pr\u00f3pria vers\u00e3o do jogo da forca:\nCrie um programa que tenha a mesma fun\u00e7\u00e3o que o jogo da forca, por\u00e9m aplicado a textos.\n\n-----Input-----\nA entrada cont\u00e9m um \u00fanico valor inteiro $K$, representando o n\u00famero de letras da palavra.\n\n-----Output-----\nA sa\u00edda cont\u00e9m a mensagem \u201cPerdeu\u201d se o jogador n\u00e3o conseguir acertar a palavra, ou a palavra completa caso o jogador acerte a palavra e conseguir fazer um palpite para vencer.\n\n-----Examples-----\nSample Input 1:\n5\nSample Output 1:\nPalavra: longa palavra larga\nTentativas: 5\nAcertou a palavra? Sim\nTentativas: 4\nAcertou a palavra? Sim\nTentativas: 3\nAcertou a palavra? Sim\nTentativas: 2\nAcertou a palavra? Sim\nTentativas: 1\nPerdeu! A palavra era 'larga'.\n\nSample Input 2:\n3\nSample Output 2:\nPalavra: larga\nTentativas: 1\nAcertou a palavra? Sim\nTentativas: 0\nPalavra: paz\nTentativas: 1\nAcertou a palavra? Sim\nTentativas: 0\nPerdeu! A palavra era 'paz'.\n\nSample Input 3:\n4\nSample Output 3:\nPalavra: abacate\nTentativas: 1\nAcertou a palavra? Sim\nTentativas: 0\nPalavra: banana\nTentativas: 1\nAcertou a palavra? Sim\nTentativas: 0\nPerdeu! A palavra era 'banana'.\n\n\"\"\"\n\n\"\"\"\n\n7.9 \u2013 Jo\u00e3o Papo-de-Pescador: Escreva um programa em Python que recebe a quantidade de quilos que o pescador pegou na c"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '330'\n) == '0'\nassert solution(\n    '156'\n) == '165'\nassert solution(\n    '0'\n) == '0'\nassert solution(\n    '990'\n) == '999'\nassert solution(\n    '9999999'\n) == '9999999'\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('123') == '134'\nassert solution('099') == '100'\nassert solution('999') == '1000'\nassert solution('101010') == '111000'\nassert solution('101010') == '111000'\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('330') == '0'\nassert solution('156') == '165'\n\"\"\""
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'\nassert solution('833') == '835'\nassert solution('666') == '0'\nassert solution('3') == '4'\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('156') == '165'\n\"\"\"\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"330\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"33\") == \"33\"\nassert solution(\"11\") == \"11\"\nassert solution(\"99\") == \"99\"\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"156\") == \"165\"\nassert solution(\"330\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'\nprint('Test passed')\n\n\"\"\""
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n\") == \"3\"\n\n----------------------\n\nimport sys"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n') == '4'\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n') == '3'"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n') == '4'\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n') == '3'\n\n\"\"\"\n\nimport time"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n') == '4'\n\"\"\""
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\") == 4\n\nprint(solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\"))\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\") == '4'\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\") == '3'\n\"\"\"\n\na, b = map(int, input().split())\ntask_times = list(map(int, input().split()))\nquiet_times = list(map(int, input().split()))\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000') == 4\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000') == 3\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\") == '3'\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000''') == '4'\nassert solution('''4 4\n180000 185000 199999 100000\n199999 180000 170000 120000''') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10''') == '10'\nassert solution('''42\n84\n252\n420\n840\n126\n42\n84\n420\n126''') == '1'\nassert solution('''0\n0\n0\n0\n0\n0\n0\n0\n0\n0''') == '0'\nassert solution('''39\n40\n41\n0\n1\n2\n40\n41\n0\n1''') == '6'\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n0\") == \"1\"\nassert solution(\"0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\") == \"6\"\nassert solution(\"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\") == \"1\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n0\\n0\") == \"1\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\n\"\"\""
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '10\\n'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\\n') == '1\\n'\nassert solution('1\\n0\\n1\\n0\\n1\\n0\\n1\\n0\\n1\\n0\\n') == '6\\n'\n\"\"\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\nassert solution(\"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10') == '10'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '10'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '10'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '10'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '10'\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\nassert solution('0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0') == '1'\n\n\"\"\""
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\nassert solution(\"1\\n42\\n42\\n42\\n1\") == \"1\"\nassert solution(\"1\\n42\\n42\\n42\\n1\\n2\\n42\\n42\\n1\") == \"6\"\nassert solution(\"1\\n42\\n42\\n42\\n1\\n2\\n42\\n42\\n1\\n2\") == \"5\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\nassert solution('0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0') == '0'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '1'\n\n\"\"\"\n\nA = input()\nB = input()\nC = input()\nD = input()\nE = input()\nF = input()\nG = input()\nH = input()\nI = input()\nJ = input()\nprint(max(set([int(A), int(B), int(C), int(D), int(E), int(F), int(G), int(H), int(I), int(J)])))\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('1 1') == 'no'\nassert solution('5 3') == 'no'\nassert solution('5 4') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == 'yes'\nassert solution('1 10') == 'no'\nassert solution('10 1') == 'yes'\nassert solution('10 10') == 'no'\nassert solution('100 50') == 'yes'\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('5 3') == 'no'\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\n\nSample Input 1:\n13 3\nSample Output 1:\nno\n\nSample Input 2:\n14 3\nSample Output 2:\nno\n\"\"\""
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''13 3''') == 'yes'\nassert solution('''1 0''') == 'yes'\n'''\nSample Output 2\n\nExplanation: \n\nA naive solution is to compress all the files into one. This will not work for example in the following case, where the only possible compression is to compress each file into a file of size 1:\n\n$N = 13$\n$\\sum_i^13 1000 = 1000^13$\n$\\sum_i^13 = 1$\n\n$N = 1$\n$1000 = 1000^1$\n$1 = 1$\n\n'''\nassert solution('''13 3''') == 'yes'\nassert solution('''1 0''') == 'yes'\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\">?>\") == \"yes\"\nassert solution(\">>\") == \"yes\"\nassert solution(\"<>\") == \"yes\"\nassert solution(\"<<<<>\") == \"yes\"\nassert solution(\"<<<<\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('1 10') == 'no'\nassert solution('1 10') == 'no'\n\nimport sys\nimport math\n\nstdin = sys.stdin\nstdout = sys.stdout\n\na = list(map(int, stdin.readline().split()))\nn, b = a[0], a[1]\n\nfor i in range(1, n + 1):\n    if math.log2(i) + 1 < b:\n        stdout.write('yes')\n        break\n    else:\n        stdout.write('no')\n        break\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13 3\\n') == 'yes'\nassert solution('1 0\\n') == 'yes'\nassert solution('13 1\\n') == 'no'\n\nprint(solution(stdin))"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''13 3''') == 'yes'\nassert solution('''1 0''') == 'yes'\n'''\nGiven:\n13 3\nOutput:\nyes\nGiven:\n1 0\nOutput:\nyes\n'''\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\nprint('The code ran Correctly')\n-----\n\"\"\"\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"H02H10P11H02\") == \"GRESKA\"\nassert solution(\"P01K02H03H04\") == \"12 12 11 13\"\n\"\"\""
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin='P01K02H03H04') == '12 12 11 13'\nassert solution(stdin='H02H10P11H02') == 'GRESKA'\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\nprint('Passed!')\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('H02H10P11H02') == 'GRESKA'\nassert solution('P01K02H03H04') == '12 12 11 13'\n\"\"\"\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('P09P09P09P09P09P09') == '0 0 0 0 0'\nassert solution('P02H01H12H03H02H10P11H02') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\nprint('Success')\n\na = \"P01K02H03H04\"\nprint(a[0])\nprint(a[1])\nprint(a[2])\nprint(a[3])\nprint(a[4])"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\""
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\nprint('The solution is correct!')\n\n\"\"\"\n\ns = input()\np = ''.join([i for i in s if i.isalpha()])\np_num = [int(i) for i in p if i.isdigit()]\np_n = ''.join([str(i) for i in p_num if i >= 1 and i <= 13])\np_suit = [i for i in p if not i.isdigit()]\np_suit_num = [i for i in p if i.isdigit()]"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('H02H10P11H02') == 'GRESKA'\n\"\"\"\n\nimport collections\n\ndeck = [x for x in stdin.split(' ')]\ndeck_dict = collections.defaultdict(int)\n\nfor card in deck:\n    if len(card) == 2:\n        deck_dict[card[0]] += 1\n    elif len(card) == 3:\n        deck_dict[card[0] + card[1]] += 1\n\nsuits = ['P', 'K', 'H', 'T']\nanswer = []\n\nfor suit in suits:\n    answer.append(12 - deck_dict[suit])\n\nprint(' '.join([str(x) for x in answer]))\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\\n\") == \"1\"\n\"\"\"\n\nrows, cols, max_racket_size = map(int, stdin.readline().split())\n\npicture = []\n\nfor i in range(rows):\n    row = stdin.readline()\n    picture.append(row)"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(s) == s\n\"\"\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 3\\n.*.*.*\\n.....\\n.*.*.*\\n\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n\") == \"2\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == \"2\"\n\"\"\"\n\nimport numpy as np\n\nR, S, K = map(int, input().split())\nfield = np.array([list(input()) for _ in range(R)])\nprint(int(np.sum(field == \"*\") / K))\nprint(*[\"\".join([\"-\" if i == \".\" else \"|\" if i == \"*\" else \"+\" for i in line]) for line in field], sep=\"\\n\")\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\n\"\"\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\\n.*.*.\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == \"2\"\nassert solution(\"7 8 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == \"0\""
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 3\", \".....\\n.*.*.\\n.....\") == '1'\nassert solution(\"7 6 4\", \"......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == '2'\nassert solution(\"1 1 1\", \"*\") == '1'\nassert solution(\"4 6 3\", \"....\\n....\\n....\\n....\\n....\\n....\\n....\") == '5'\n\n\"\"\""
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2'\n\"\"\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == \"2\"\nassert solution(\"4 5 3\\n.*.\\n.*.\\n.*.\\n.+.\\n.+.\") == \"0\"\nassert solution(\"4 5 2\\n.+.\\n.+\\n..\\n.+\\n.+.\") == \"0\"\nassert solution(\"4 4 2\\n.+.\\n.+\\n..\\n.+\\n.+.\") == \"0\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2'\n\nimport sys; readline = sys.stdin.readline\nR, S, K = map(int, readline().split())\ndp = [[0] * (S + 1) for _ in range(R + 1)]\ndp[0][0] = 1\nfor r in range(R):\n    for c in range(S):\n        if c + K >= S:\n            break\n        dp[r + 1][c + K] += dp[r][c]\n        dp[r + 1][c + K] %= 10000007\nfor r in range(R):\n    print(*dp[r], sep='\\n')\n\nassert dp[0][0] == 1\nassert dp[1][0] == 0\nassert dp[2][0] == 0\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n\"\"\"\n\nimport re\n\nregex = re.compile(r\"([A-Z])([a-z]+)\")"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('AC AD AH AS KD') == '4'\nassert solution('2C 4D 4H 2D 2H') == '3'\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('AC AD AH AS KD') == '4'\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('AC AH AS KD') == '4'\nassert solution('2C 4D 4H 2D 2H') == '3'\nassert solution('AS AH AC 3D 3S KS') == '3'\nassert solution('3S 5C 3D 5H KC') == '3'\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    'AC AD AH AS KD'\n) == '4'\nassert solution(\n    '2C 4D 4H 2D 2H'\n) == '3'\nassert solution(\n    '5C 7C 5D 8C 2D'\n) == '3'\nassert solution(\n    '3C 3D 3H 2S 2D'\n) == '4'\nassert solution(\n    '2S 9S 9D 9C KC'\n) == '2'\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AC AD AH AS KD') == 4\nassert solution('2C 4D 4H 2D 2H') == 3\nassert solution('3S 9S KS AS QH') == 10\nassert solution('3C 6D 7D 3S KH') == 7\nassert solution('2C 2D 4C 4D 4S') == 4\n\"\"\"\n\n\n\nfrom collections import Counter"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1 1 0 1\") == 5\n\"\"\"\n\nimport math\n\nc, p = [int(n) for n in input().split()]\nh = [int(n) for n in input().split()]\n\nh.sort(reverse=True)\n\nresult = 0"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1\\n0 0 0 0 0\\n') == 7\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n3 1 2 1 0') == '2'\nassert solution('4 3\\n0 0 0 0 1') == '2'\nassert solution('4 3\\n0 0 0 1 0') == '4'\nassert solution('4 3\\n1 0 0 1 0') == '4'\nassert solution('4 3\\n0 1 0 1 0') == '1'\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 5\\n2 1 1 1 0 1') == '5'\nassert solution('5 1\\n0 0 0 0 0') == '7'"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1 1 0 1\") == \"5\"\n\"\"\""
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"4 4\") == \"0\"\nassert solution(\"3 5\") == \"0\"\nassert solution(\"10 10\") == \"3628800\"\n\"\"\"\nfrom collections import Counter\nimport math\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1\\n0 0 0 0 0\") == \"7\"\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1\\n0 0 0 0') == '7'\n\"\"\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 5\\n2 1 1 1 0 1') == '5'\nassert solution('6 5\\n2 1 1 1 0 1\\n2 1 1 1 0 1') == '5'\nassert solution('6 5\\n2 1 1 1 0 1\\n2 1 1 1 1 1') == '7'\nassert solution('6 5\\n2 1 1 1 0 1\\n2 1 1 1 1 1\\n2 1 1 1 1 1') == '14'\nassert solution('6 5\\n2 1 1 1 0 1\\n2 1 1 1 1 1\\n2 1 1 1 1 1\\n2 1 1 1 1 1') == '110'\n\n---Problem---\n\nIn many computer games, the field consists of $C$ columns and an unlimited number of rows. In one move, one of the following seven pieces is dropped into the field:\n\nWhen dropping a piece, the player is free to rotate the piece $90$, $180$ or $270$ degrees and to move it left or right, as long as the piece stays entirely in the field. The piece then falls until it settles on the bottom of the field or on already occupied squares. In our variant of Tetris the piece must fall so that all parts of the piece are on the bottom of the field or on already occupied squares. In other words, after the piece has fallen there must not be a free square such that some square above it is occupied.\n\nFor example, let the field be six columns wide with initial heights (the number of already occupied squares in each column) $2$, $1$, $1$, $1$, $0$ and $1$. Piece number $5$ can then be dropped into the field in five different ways:\n\nYou are given the initial heights of all columns and the figure to be dropped into the field.\n\nWrite a program that calculates the number of different ways to do this, i.e., the number of different field configurations that can be achieved by dropping the piece.\n\n-----Input-----\nThe first line contains two integers $C$ and $P$, $1 \\le C \\le 100$, $1 \\le P \\le 7$, the number of columns and the number of the piece to be dropped.\n\nThe second line contains $C$ integers separated by single spaces, each between $0$ and $100$, inclusive. These are the initial heights of the columns.\n\n-----Output-----\nOutput on a single line the number of different ways to drop the piece in the field.\n\n-----Examples-----\nSample Input 1:\n6 5\n2 1 1 1 0 1\nSample Output 1:\n5\n\nSample Input 2:\n5 1\n0 0 0 0 0\nSample Output 2:\n7\n\nSample Input 3:\n6 5\n2 1 1 1 0 1\n1 1 1 1 0 1\nSample Output 3:\n14\n\nSample Input 4:\n6 5\n2 1 1 1 0 1\n2 1 1 1 1 1\n2 1 1 1 1 1\n2 1 1 1 1 1\nSample Output 4:\n110\n\n---Problem---\n\nIn many computer games, the field consists of $C$ columns and an unlimited number of rows. In one move, one of the following seven pieces is dropped into the field:\n\nWhen dropping a piece, the player is free to rotate the piece $90$, $180$ or $270$ degrees and to move it left or right, as long as the piece stays entirely in the field. The piece then falls until it settles on the bottom of the field or on already occupied squares. In our variant of Tetris the piece must fall so that all parts of the piece are on the bottom of the field or on already occupied squares. In other words, after the piece has fallen there must not be a free square such that some square above it is occupied.\n\nFor example, let the field be six columns wide with initial heights (the number of already occupied squares in each column) $2$, $1$, $1$, $1$, $0$ and $1$. Piece number $5$ can then be dropped into the field in five different ways:\n\nYou are given the initial heights of all columns and the figure to be dropped into the field.\n\nWrite a program that calculates the number of different ways to do this, i.e., the number of different field configurations that can be achieved by dropping the piece.\n\n\"\"\""
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6 5\n2 1 1 1 0 1''') == '5'\n\nassert solution('''6 5\n0 0 0 0 0''') == '7'\n\nassert solution('''6 5\n2 1 1 1 0 1\n2 1 1 1 0 1\nSample Output:\n5\n\nSample Input 1:\n7 5\n0 0 0 0 0\nSample Output 1:\n7\n\nSample Input 2:\n5 2\n0 0 0 0 0\nSample Output 2:\n0\n\nSample Input 3:\n5 3\n0 0 0 0 0\nSample Output 3:\n0''') == '0'\n\nSample Input 4:\n6 4\n0 0 0 0 0\nSample Output 4:\n1\n\nSample Input 5:\n5 2\n0 0 0 0 0\nSample Output 5:\n0\n\nSample Input 6:\n5 5\n0 0 0 0 0\nSample Output 6:\n1''') == '1'\n\nassert solution('''8 6\n0 0 0 0 0 0\nSample Output 6:\n1''') == '1'\n\nassert solution('''8 8\n0 0 0 0 0 0 0 0\nSample Output 6:\n0''') == '0'"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.\\n'\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@\\'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'][\\'[-]?\\n'\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `][\\'0 |_|$.\\n', 'incorrect result'\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@\\'][''$ `][\\'[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'][\\'[-]?\\n', 'incorrect result'\n\n\"\"\"\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Hello World!\") == \"-3110 \\\\/\\/0|Z1|)!\", \"Error\"\nprint(\"Passed\")\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\""
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''All your base are belong to us.\n''') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.\nassert solution('''What's the Frequency, Kenneth?\n''') == '\\/\\/[-]@\\'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\nassert solution('   ') =='  '\nassert solution('''  All your base are belong to us.   ''') ==' @11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.   '\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(all your base are belong to us) == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.\\n'\nassert solution(what's the frequency, kenneth?) == '\\/\\/[-]@'`][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n'\n\"\"\"\nimport unittest\nfrom enum import Enum\n\n\nclass Case(Enum):\n    UPPER = 1\n    LOWER = 2\n\n\nclass Solution:\n    def __init__(self):\n        self.case = Case.UPPER\n\n    def translate_to_new_alphabet(self, symbol):\n        if self.case is Case.UPPER:\n            if symbol == \"A\":\n                return \"@\"\n            elif symbol == \"B\":\n                return \"8\"\n            elif symbol == \"C\":\n                return \"(\"\n            elif symbol == \"D\":\n                return \"|)\"\n            elif symbol == \"E\":\n                return \"3\"\n            elif symbol == \"F\":\n                return \"|Z\"\n            elif symbol == \"G\":\n                return \"6\"\n            elif symbol == \"H\":\n                return \"[-\"\n            elif symbol == \"I\":\n                return \"1\"\n            elif symbol == \"J\":\n                return \"|_|\"\n            elif symbol == \"K\":\n                return \"|<\"\n            elif symbol == \"L\":\n                return \"1\"\n            elif symbol == \"M\":\n                return \"[]\\/[]\"\n            elif symbol == \"N\":\n                return \"|!|\"\n            elif symbol == \"O\":\n                return \"0\"\n            elif symbol == \"P\":\n                return \"|D\"\n            elif symbol == \"Q\":\n                return \",\"\n            elif symbol == \"R\":\n                return \"|Z\"\n            elif symbol == \"S\":\n                return \"$\"\n            elif symbol == \"T\":\n                return \"']['\"\n            elif symbol == \"U\":\n                return \"|_|\"\n            elif symbol == \"V\":\n                return \"\\/\"\n            elif symbol == \"W\":\n                return \"\\/\\/\"\n            elif symbol == \"X\":\n                return \"}{\"\n            elif symbol == \"Y\":\n                return \"`/\"\n            elif symbol == \"Z\":\n                return \"2\"\n            elif symbol == \" \":\n                return \" \"\n            else:\n                return symbol\n        elif self.case is Case.LOWER:\n            if symbol == \"a\":\n                return \"@\"\n            elif symbol == \"b\":\n                return \"8\"\n            elif symbol == \"c\":\n                return \"(\"\n            elif symbol == \"d\":\n                return \"|)\"\n            elif symbol == \"e\":\n                return \"3\"\n            elif symbol == \"f\":\n                return \"|Z\"\n            elif symbol == \"g\":\n                return \"6\"\n            elif symbol == \"h\":\n                return \"[-\"\n            elif symbol == \"i\":\n                return \"1\"\n            elif symbol == \"j\":\n                return \"|_|\"\n            elif symbol == \"k\":\n                return \"|<\"\n            elif symbol == \"l\":\n                return \"1\"\n            elif symbol == \"m\":\n                return \"[]\\/[]\"\n            elif symbol == \"n\":\n                return \"|!|\"\n            elif symbol == \"o\":\n                return \"0\"\n            elif symbol == \"p\":\n                return \"|D\"\n            elif symbol == \"q\":\n                return \",\"\n            elif symbol == \"r\":\n                return \"|Z\"\n            elif symbol == \"s\":\n                return \"$\"\n            elif symbol == \"t\":\n                return \"']['\"\n            elif symbol == \"u\":\n                return \"|_|\"\n            elif symbol == \"v\":\n                return \"\\/\"\n            elif symbol == \"w\":\n                return \"\\/\\/\"\n            elif symbol == \"x\":\n                return \"}{\"\n            elif symbol == \"y\":\n                return \"`/\"\n            elif symbol == \"z\":\n                return \"2\"\n            elif symbol == \" \":\n                return \" \"\n            else:\n                return symbol\n\n    def translate(self, text):\n        result = \"\"\n        for symbol in text:\n            result += self.translate_to_new_alphabet(symbol)\n        return result\n\n\nclass Test(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution()\n\n    def test_solution(self):\n        self.assertEqual(\n            self.solution.translate(\"All your base are belong to us\"),\n            \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\",\n        )\n        self.assertEqual(\n            self.solution.translate(\"What's the Frequency, Kenneth?\"),\n            \"\\/\\/[-]"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n\"\"\"\nimport re\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.\\n'\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@\\'][\\'$ \\'][\\'[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'][\\'[-]?\\n'\n\"\"\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\n\"\"\""
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2') == 'Bob'\nassert solution('2\\n1') == 'Alice'\nassert solution('2\\n3') == 'Alice'\nassert solution('3\\n1') == 'Bob'\nassert solution('3\\n2') == 'Bob'\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"3\") == \"Alice\"\nassert solution(\"4\") == \"Bob\"\nassert solution(\"5\") == \"Bob\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\") == \"Alice\"\nassert solution(\"2\\n1\") == \"Bob\"\n\n\"\"\""
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n') == 'Alice'\nassert solution('2\\n') == 'Bob'\nassert solution('3\\n') == 'Alice'\nassert solution('4\\n') == 'Bob'\nassert solution('5\\n') == 'Alice'\n\n\"\"\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\nassert solution('3') == 'Alice'\nassert solution('4') == 'Bob'\nassert solution('5') == 'Alice'\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"5\") == \"Alice\"\nassert solution(\"4\") == \"Bob\"\nassert solution(\"11\") == \"Bob\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"3\") == \"Alice\"\nassert solution(\"4\") == \"Bob\"\nassert solution(\"5\") == \"Alice\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1) == \"Alice\"\nassert solution(2) == \"Bob\"\n\n\"\"\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"$ is the number of letters here\") == \"thirty is the number of letters here\"\n\"\"\"\n\n\"\"\"\nMy solution:\n\"\"\""
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\nthis\\nsentence\\nhas\\n$\\nletters') == 'this sentence has $ letters'\nassert solution('7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere') == 'thirty is the number of letters here'\n\"\"\""
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\nthis\\nsentence\\nhas\\n$\\nletters') == 'this sentence has thirtyone letters'\nassert solution('7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere') == 'thirty is the number of letters here'\n\"\"\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('this sentence has thirtyone letters') == 'this sentence has $ letters'\nassert solution('blah blah seventeen') == 'blah blah seventeen'\nassert solution('9876') == 'ninehundredseventyseven'\nassert solution('85') == 'eighthundredfive'\n\"\"\"\n\nimport re\nimport unittest\n\nclass Solution:\n    def solution(self, stdin):\n        n = int(stdin)\n        for i in range(n):\n            word = stdin.split()[i]\n            word = word.replace('$', '')\n            print(self.name_from_digit(word))\n            \n    def name_from_digit(self, digits):\n        if len(digits) == 1:\n            return self.tens_to_one_digit(digits)\n        elif len(digits) == 2:\n            return self.ones_to_two_digit(digits)\n        elif len(digits) == 3:\n            return self.tens_to_three_digit(digits)\n        elif len(digits) > 3:\n            return self.hundreds_to_digit(digits)\n            \n    def name_from_digit_or_zero(self, digits):\n        if digits == '0':\n            return 'zero'\n        else:\n            return self.name_from_digit(digits)\n            \n    def tens_to_one_digit(self, tens):\n        tens = str(int(tens))\n        if tens == '10':\n            return 'ten'\n        elif tens == '11':\n            return 'eleven'\n        elif tens == '12':\n            return 'twelve'\n        elif tens == '13':\n            return 'thirteen'\n        elif tens == '14':\n            return 'fourteen'\n        elif tens == '15':\n            return 'fifteen'\n        elif tens == '16':\n            return'sixteen'\n        elif tens == '17':\n            return'seventeen'\n        elif tens == '18':\n            return 'eighteen'\n        elif tens == '19':\n            return 'nineteen'\n            \n    def ones_to_two_digit(self, ones):\n        ones = str(int(ones))\n        if int(ones) < 10:\n            return ones\n        else:\n            ones = ones[1]\n            ones = int(ones)\n            if ones == 0:\n                return ones\n            else:\n                return self.tens_to_one_digit(ones)\n            \n    def tens_to_three_digit(self, tens):\n        tens = str(int(tens))\n        tens = tens[1]\n        ones = str(int(tens))\n        ones = ones[1]\n        if int(tens) == 0 and int(ones) == 0:\n            return 'hundred'\n        elif int(tens) == 0:\n            return self.name_from_digit_or_zero(ones)\n        else:\n            return self.name_from_digit(str(int(tens))) + 'hundred' + self.name_from_digit_or_zero(ones)\n            \n    def hundreds_to_digit(self, hundreds):\n        hundreds = str(int(hundreds))\n        hundreds = hundreds[1]\n        tens = str(int(hundreds))\n        tens = tens[1]\n        ones = str(int(hundreds))\n        ones = ones[1]\n        hundreds = self.name_from_digit_or_zero(str(int(hundreds)))\n        tens = self.name_from_digit_or_zero(str(int(tens)))\n        ones = self.name_from_digit_or_zero(str(int(ones)))\n        if int(hundreds) == 0 and int(tens) == 0 and int(ones) == 0:\n            return 'thousand'\n        elif int(hundreds) == 0 and int("
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\n\n\"\"\""
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"one\") == \"one\"\nassert solution(\"twenty\") == \"twenty\"\nassert solution(\"thirty\") == \"thirty\"\nassert solution(\"ninety\") == \"ninety\"\nassert solution(\"onehundred\") == \"onehundred\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\nthis\\nsentence\\nhas\\n$\\nletters') == 'this sentence has $ letters'\nassert solution('7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere') == 'thirty is the number of letters here'"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"this sentence has $ letters\"\nassert solution(\"7\") == \"thirty is the number of letters here\"\n\"\"\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\nthis\\nsentence\\nhas\\n$\\nletters') == 'this sentence has thirtyone letters'\nassert solution('7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere') == 'thirty is the number of letters here'\n\n\"\"\"\n\nimport string\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"this sentence has thirtyone letters\") == \"this sentence has one letters\"\nassert solution(\"this sentence has oneone letters\") == \"this sentence has oneone letters\"\nassert solution(\"this sentence has oneoneone letters\") == \"this sentence has oneoneoneletters\"\nassert solution(\"this sentence has oneoneoneone letters\") == \"this sentence has oneoneoneoneoneletters\"\nassert solution(\"this sentence has oneoneoneoneoneone letters\") == \"this sentence has oneoneoneoneoneoneoneletters\"\n\"\"\"\n\n\nimport re\n\nN = int(input())\n\npattern = r'(\\w+\\s+)+'\nresult = []\nfor _ in range(N):\n    word = input()\n    matches = re.findall(pattern, word)\n    result.append(matches[0])\n\nprint(' '.join(result))\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Abcd\") == 0\nassert solution(\"EaEbFabG\") == 5\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('Abcd') == 0\nassert solution('EaEbFabG') == 5\nprint(solution(stdin))"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Abcd\") == 0\nassert solution(\"EaEbFabG\") == 5\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Abcd\") == 0\nassert solution(\"EaEbFabG\") == 5\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'\n\"\"\""
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Abcd\") == 0\nassert solution(\"EaEbFabG\") == 5\n\n\"\"\""
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n3 3') == 'Odd 6'\nassert solution('3 3\\n2 3') == 'Even 6'\nassert solution('3 4\\n3 3') == 'Even 6'\nassert solution('3 3\\n3 3') == 'Even 6'\nassert solution('3 2\\n3 2') == 'Even 6'\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"1 1\") == \"Not a moose\"\nassert solution(\"1 0\") == \"Even 0\"\nassert solution(\"0 0\") == \"Not a moose\"\n\"\"\"\n\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n3 3') == 'Odd 6'\nassert solution('3 3\\n3 3') == 'Even 6'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open('input.txt').read()) == open('output.txt').read()\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\n\"\"\""
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('1 2') == 'Not a moose'\nassert solution('0 5') == 'Not a moose'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 3\n3 3\n''') == 'Odd 6'\nassert solution('''2 3\n3 2\n''') == 'Even 6'\nassert solution('''2 3\n1 1\n''') == 'Not a moose'\n\n---\nSample Input 3:\n4 5\n3 5\n''') == 'Even 10'\nassert solution('''4 5\n3 5\n''') == 'Odd 12'\nassert solution('''4 5\n4 4\n''') == 'Even 8'\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('0 0') == 'Not a moose'\nassert solution('1 1') == 'Not a moose'\nassert solution('2 2') == 'Not a moose'\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('4 4') == 'Even 6'\nassert solution('2 5') == 'Odd 10'\nassert solution('3 5') == 'Not a moose'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\ntomo\\nmono\\ndak\\n6666\") == 1\n\"\"\"\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('23') == 'abc'\nassert solution('234') == 'def'\nassert solution('2345') == 'ghi'\nassert solution('23456') == 'jkl'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"123\"\nassert solution(\"4 5 6\") == \"456\"\n\"\"\""
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"234\") == 4\nassert solution(\"233\") == 5\nassert solution(\"1\") == 4\n\n-----Constraints-----\n$1 \\leq N \\leq 1000$\n$1 \\leq |S| \\leq 1000$\nAll words are composed of lowercase letters of the English alphabet.\n-----Note-----\n$N$ and $S$ are strings containing digits from the English alphabet, without any leading or trailing whitespaces."
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('tomo') == 'tomo'\nassert solution('mono') =='mono'\nassert solution('dak') == 'dak'\nassert solution('6666') == '6666'\nassert solution('ja') == 'ja'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\ntomo\\nmono\\ndak\\n6666') == '1\\n2\\n'\nassert solution('2\\nja\\nla\\n52') == '2\\n'\n\"\"\""
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('tomo') == '1'\nassert solution('mono') == '1'\nassert solution('dak') == '1'\nassert solution('6666') == '2'\nassert solution('ja') == '2'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'a'\nassert solution('aba') == 'a'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('123') == 'abc'\nassert solution('7777') == 'tuvwxyz'\n\n\"\"\""
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('tomo') == '1'\nassert solution('mono') == '1'\nassert solution('dak') == '1'\n\nassert solution('6666') == '2'"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\nassert solution(\"ABCD\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.A.#.B.*.C.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\nassert solution(\"AWESOME\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.W.#.E.*.S.*.O.*.M.*.E.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\nassert solution(\"CHOCOLATE\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.C.#.H.*.O.*.C.*.H.*.E.*.T.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'\n\"\"\""
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'\n\nprint('All tests passed.')\n\n-----\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'\n\"\"\"\n\nimport sys\nimport unittest\n\n\nclass TestStringMethods(unittest.TestCase):\n    def test_upper(self):\n        self.assertEqual(solution('A'), '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..')\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n\"\"\""
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A\") == \"\"\"..#..\n.#.#.\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A\") == \"...#...\\n.#.#.#.\\n#.A.#.\\n.#.#.#.\\n...#...\\n\"\nassert solution(\"DOG\") == \"...#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n...#...#...*..\\n\""
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\""
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A\") == \"...#...\\n#.#.#.\\n.A.##.\\n.##.#.\\n...#...\\n\"\nassert solution(\"DOG\") == \"...#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n...#...#...*..\\n\"\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == '3.141593'\nassert solution(\"21\") == '1385.442360'\n\n\"\"\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"21\") == \"1385.442360\"\n\nprint(solution(\"1\"))\nprint(solution(\"21\"))\n\n\"\"\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"3.141592653589793\"\nassert solution(\"21\") == \"1385.442360\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"21\") == \"1385.442360\"\nassert solution(\"10000\") == \"4.189725\"\n\"\"\"\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"3.14159\"\nassert solution(\"1\\n2\") == \"1.414214\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"1\") == \"3.141593\"\nassert solution(\"0\") == \"0.000000\"\nassert solution(\"1\") == \"3.141593\"\nassert solution(\"1\") == \"3.141593\"\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '3.141593\\n2.000000'\nassert solution('21') == '1385.442360\\n882.000000'\n\"\"\"\n\nimport math\n\nR = float(stdin.readline().rstrip('\\n'))\nprint(2 * R * math.pi)\nprint(2 * R**2)\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"30.285714\"\nassert solution(\"10000\") == \"114514.49056\"\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n-2 3') == '2'\nassert solution('5\\n129 44 394 253 147') == '0'\nassert solution('2\\n-2 3') == '2'\nassert solution('4\\n3 -2 3') == '1'\nassert solution('6\\n-2 -4 -6 3') == '0'\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\n\nSample Input 1:\n3\n1 -2 3\nSample Output 1:\n2\n\nSample Input 2:\n5\n129 44 394 253 147\nSample Output 2:\n0\n\nSample Input 1:\n4\n2 -2 0 -1\nSample Output 1:\n-1\n\nSample Input 2:\n5\n99 43 -97 -72 -4\nSample Output 2:\n-121\n\nSample Input 1:\n4\n3 -2 1 -1\nSample Output 1:\n-3\n\nSample Input 2:\n4\n-1 -1 -1 -1\nSample Output 1:\n0\n\nSample Input 1:\n6\n-1 -1 -1 0 -1 -1\nSample Output 1:\n0\n\nSample Input 2:\n5\n0 0 0 -1 0\nSample Output 2:\n0\n\nSample Input 1:\n4\n-1 -1 -1 -1\nSample Output 1:\n0\n\nSample Input 2:\n4\n-1 -1 -1 0\nSample Output 2:\n0\n\nSample Input 1:\n3\n-1 -1 1\nSample Output 1:\n0\n\nSample Input 2:\n3\n-1 -1 2\nSample Output 2:\n-1\n\nSample Input 1:\n4\n0 0 0 0\nSample Output 1:\n0\n\nSample Input 2:\n2\n0 -1 0\nSample Output 2:\n0\n\nSample Input 1:\n2\n0 -1\nSample Output 1:\n0\n\nSample Input 2:\n2\n1 -1\nSample Output 2:\n-1\n\nSample Input 1:\n3\n0 0 0\nSample Output 1:\n0\n\nSample Input 2:\n3\n0 0 -1\nSample Output 2:\n-1\n\nSample Input 1:\n2\n0 -1\nSample Output 1:\n0\n\nSample Input 2:\n2\n-1 -1\nSample Output 2:\n-1\n\nSample Input 1:\n3\n1 -1 0\nSample Output 1:\n-1\n\nSample Input 2:\n3\n1 -1 0\nSample Output 2:\n-1\n\nSample Input 1:\n4\n2 -1 0 0\nSample Output 1:\n2\n\nSample Input 2:\n2\n-1 -1\nSample Output 2:\n-1\n\nSample Input 1:\n3\n0 0 0\nSample Output 1:\n0\n\nSample Input 2:\n2\n0 -1\nSample Output 2:\n0\n\nSample Input 1:\n5\n1 -1 -1 0 0\nSample Output 1:\n0\n\nSample Input 2:\n2\n-1 -1\nSample Output 2:\n-1\n\nSample Input 1:\n5\n-1 -1 -1 0 0\nSample Output 1:\n0\n\nSample Input 2:\n5\n-1 -1 0 -1 -1\nSample Output 2:\n0\n\nSample Input 1:\n2\n1 -1\nSample Output 1:\n-1\n\nSample Input 2:\n3\n1 -1 0\nSample Output 2:\n-1\n\nSample Input 1:\n3\n0 0 0\nSample Output 1:\n0\n\nSample Input 2:\n3\n0 -1 0\nSample Output 2:\n-1\n\nSample Input 1:\n3\n0 -1 0\nSample Output 1:\n-1\n\nSample Input 2:\n1\n1 1\nSample Output 2:\n0\n\nSample Input 1:\n2\n0 -1\nSample Output 1:\n0\n\nSample Input 2:\n1\n-1\nSample Output 1:\n0\n\nSample Input 1:\n2\n0 -1\nSample Output 1:\n0\n\nSample Input 2:\n1\n-1\nSample Output 1:\n0\n\nSample Input 1:\n3\n-1 -1 -1\nSample Output 1:\n0\n\nSample Input 2:\n0\nSample Output 2:\n0\n\nSample Input 1:\n3\n1 -1 -1\nSample Output 1:\n0\n\nSample Input 2:\n2\n-1 -1\nSample Output 2:\n-1\n\nSample Input 1:\n3\n1 -1 0\nSample Output 1:\n-1\n\nSample Input 2:\n2\n-1 -1\nSample Output 2:\n-1\n\nSample Input 1:\n4\n1 -1 0 -1\nSample Output 1:\n0\n\nSample Input 2:\n3\n1 -1 0\nSample Output 1:\n-1\n\nSample Input 2:\n4\n0 -1 -1 -1\nSample Output 1:\n0\n\nSample Input 2:\n2\n0 -1\nSample Output 1:\n0\n\nSample Input 1:\n3\n1 -1 0\nSample Output 1:\n-1\n\nSample Input 2:\n2\n0 -1\nSample Output 1:\n0\n\nSample Input 1:\n3\n0 0 -1\nSample Output 1:\n-1\n\nSample Input 2:\n2\n0 -1\nSample Output 1:\n0\n\nSample Input 1:\n3\n1 0 -1\nSample Output 1:\n0\n\nSample Input 2:\n0\nSample Output 2:\n0\n\nSample Input 1:\n2\n1 -1\nSample Output 1:\n-1\n\nSample Input 2:\n1\n-1\nSample Output 1:\n0\n\nSample Input 1:\n1\n1\nSample Output 1:\n0\n\nSample Input 2:\n2\n0 0\nSample Output 1:\n0\n\nSample Input 1:\n2\n0 0\nSample Output 1:\n0\n\nSample Input 2:\n2\n-1 -1\nSample Output 1:\n-1\n\nSample Input 1:\n1\n1\nSample Output 1:\n0\n\nSample Input 2:\n0\nSample Output 2:\n0\n\nSample Input 1:\n2\n-1 -1\nSample Output 1:\n-1\n\nSample Input 2:\n1\n0\nSample Output 1:\n0\n\nSample Input 1:\n2\n0 -1\nSample Output 1:\n0\n\nSample Input 2:\n0\nSample Output 2:\n0\n\nSample Input 1:\n1\n1\nSample Output 1:\n0\n\nSample Input 2:\n0\nSample Output 2:\n0\n\nSample Input 1:\n0\nSample Output 1:\n0\n\nSample Input 2:\n1\n1\nSample Output 1:\n0\n\nSample Input 1:\n2\n0 -1\nSample Output 1:\n0\n\nSample Input 2:\n1\n-1\nSample Output 1:\n0\n\nSample Input 1:\n3\n0 -1 -1\nSample Output 1:\n0\n\nSample Input 2:\n2\n-1 -1\nSample Output 1:\n-1\n\nSample Input 1:\n4\n0 -1 -1 -1\nSample Output 1:\n0\n\nSample Input 2:\n1\n1\nSample Output 1:\n1\n\nSample Input 1:\n3\n1 -1 0\nSample Output 1:\n-1\n\nSample Input 2:\n0\nSample Output 2:\n0\n\nSample Input 1:\n2\n-1 -1\nSample Output 1:\n-1\n\nSample Input 2:\n-1\nSample Output 1:\n0\n\nSample Input 1:\n2\n-1 1\nSample Output 1:\n0\n\nSample Input 2:\n0\nSample Output 2:\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n-2 3\n''') == '2'\nassert solution('''5\n129 44 394 253 147\n''') == '0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 -2 3') == '2'\n\"\"\"\n\nimport sys\n\nN = int(input())\nnums = list(map(int, sys.stdin.readline().split()))\n\nsum_ = 0\nfor num in nums:\n    sum_ += num\nprint(sum_)"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 -2 3\") == 2\nassert solution(\"5\\n129 44 394 253 147\") == 0\n\"\"\"\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 -2 3') == 2\nassert solution('5\\n129 44 394 253 147') == 0\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 -2 3\\n') == 2\nassert solution('5\\n129 44 394 253 147\\n') == 0"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 2 2') == '6'\n\"\"\"\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 1 2') == '7'\nassert solution('3\\n2 2 1') == '8'\n\"\"\"\nfrom math import gcd\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"3\\n4 1 2\") == \"8\""
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 2\\n3') == '6'\nassert solution('3 1 2\\n2') == '8'\nassert solution('1 1 1\\n2') == '4'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nschedule = list(map(int, sys.stdin.readline().split()))\nschedule.sort()\nschedule.append(schedule[-1] + schedule[0])\n\nres = 0\nfor i in range(n):\n    res += (schedule[i+1] - schedule[i])\n\nprint(res)\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'\n\"\"\"\nimport sys"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"3\\n4 1 2\") == \"8\"\n\n-----Explanation-----\nIn the first test, there are 3 teams, so the required time is $3 * (2 + 2 + 2) = 12$ units.\n\nIn the second test, there are 3 teams, so the required time is $3 * (4 + 1 + 2) = 18$ units.\n\nThere's also an additional pause of $1$ unit between each team. That makes the required time $3 * (3 + 1 + 2) + 1 = 18 + 1 = 19$ units.\n\n\"\"\"\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 2 2\") == 6\nassert solution(\"3\\n4 1 2\") == 8\n\nassert solution(\"6\\n4 2 2 3 1 3 2\\n2 3 2 2 1 2 3 1\\n4 3 2 1 4 3 1\\n3 1 3 3 1 1 1\\n3 2 3 1 2 2 2\\n3 2 3 2 2 1 2\\n2 3 2 2 1 3 2\") == 28\nassert solution(\"3\\n1 1 1\\n3 2 3\\n3 1 3\") == 3\nassert solution(\"6\\n3 3 3 1 2 1 2\\n3 2 2 1 4 3 1\\n2 3 1 1 4 3 1\\n3 1 3 1 2 2 2\\n3 2 3 2 2 1 2\\n2 3 2 2 1 3 2\") == 8\n\n\"\"\"\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 2 2') == '6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"3\\n4 1 2\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == '2'\n\n\"\"\"\n\nt, n, m = map(int, stdin.readline().split())\n\ngrid = [[0 for _ in range(m)] for _ in range(n)]\n\nfor i in range(n):\n    grid[i] = list(stdin.readline().strip())\n\nstart_x, start_y = None, None\n\nfor i in range(n):\n    if 'S' in grid[i]:\n        start_x, start_y = i, grid[i].index('S')"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == '2'\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == 'NOT POSSIBLE'\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\\n0L11\") == 'NOT POSSIBLE'\n\n-----Explanation-----\nThe grid is shown as following:\n\n1111\n1S01\n1011\n0U11\n\nThe minimum number of zones to escape is 2:\n\n1111\n1S01\n1011\n0U11\n\n1111\n1S01\n1011\n0L11\n\nWe can see that the escape route will go through 2 zones.\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom collections import namedtuple\n\n\"\"\"\n2 4 4\n1111\n1S01\n1011\n0U11\n\"\"\"\n\nSolution = namedtuple(\"Solution\", [\"is_possible\", \"number_of_zones\"])\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open(\"input.txt\").read()) == \"NOT POSSIBLE\"\nprint(\"PASSED\")\n\n---QUESTIONS---\n\n1. How do we know if we can escape the grid?\n    A. If there is a 'S' in the grid, then it is possible to escape. Otherwise, it is not possible to escape.\n\n2. How do we move in the grid?\n    A. We can move up, down, left, or right one tile at a time.\n\n3. What data structure do we use to represent the grid?\n    A. The grid should be represented as an array of arrays. The first line of the input will have 3 integers denoting the dimensions of the grid. We use an array of arrays because we can access a grid element using two indices:"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\nassert solution('2 4 4\\n1111\\n1S01\\n1011\\n0L11') == 'NOT POSSIBLE'\nassert solution('2 4 4\\n1111\\n1S01\\n1011\\n0R11') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom itertools import product"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\nassert solution('2 4 4\\n1111\\n1S01\\n1011\\n0L11') == 'NOT POSSIBLE'\n\"\"\""
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"NOT POSSIBLE\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0R11\") == \"2\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0R11\") == \"NOT POSSIBLE\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == expected_result\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\"\n\"\"\"\n\nimport sys\nimport time\n\nfrom collections import deque\n\n\"\"\"\nWe start by assuming that it is possible to escape.\n\nIf we reach the end of the grid before the time t, then it is possible to escape.\nIf we reach the start before the time t, it is not possible to escape.\nOtherwise, we can examine each direction, and see if it is possible to escape.\n\"\"\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\n\"\"\"\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\n\"\"\"\n\nn, c = map(int, input().split(' '))\nweights = list(map(int, input().split(' ')))\n\nweights.sort()\n\nindex = 0\neaten = 0\nwhile index < len(weights):\n    if eaten + weights[index] <= c:\n        eaten += weights[index]\n        index += 1\n    else:\n        break\n\nprint(index)\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n1 5 4 3 2 1 1') == '3'\nassert solution('5 5\\n1 5 4 3 2 1 1') == '5'\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == 4\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\n'''"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == \"4\"\n\"\"\"\nimport unittest\nfrom collections import Counter\n\nclass SolutionTests(unittest.TestCase):\n    def test_solution(self):\n        input1 = \"5 5\\n3 1 2 1 1\"\n        input2 = \"7 5\\n1 5 4 3 2 1 1\"\n        self.assertEqual(solution(input1), \"4\")\n        self.assertEqual(solution(input2), \"3\")"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1 1 1 1 1 1') == '1'\nassert solution('1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 1 1 2 1 2 2 2 1 1 1 1 2 1 2 1 1 1 1 2 1 1 2 1 2 1 1 2 1 1 1 1 1 2 1 1 1 1 2 2 1 1 1 1 1 1 1 1 2 1 1 1 2 1 2 1 1 2 1 1 1 2 2 2 2 2 2 1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 1 1 2 2 1 2 1 1 2 2 1 2 1 1 1 1 1 2 1 1 2 1 1 1 2 1 1 1 1 2 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\n\"\"\""
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\n\"\"\"\n\nn, c = map(int, input().split())"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\n\nimport math\nimport sys\n\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nweights = list(map(int, input().split()))\ndp = [0 for _ in range(m + 1)]\n\nfor weight in weights:\n    for j in range(m, weight - 1, -1):\n        dp[j] = max(dp[j], dp[j - weight] + 1)\n\nprint(dp[m])"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\\n15\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\nSSPPR\\n1\\nSSPPR') == '5\\n10'\nassert solution('5\\nSSPPR\\n2\\nPPRRS\\nRRSSP') == '10\\n15'"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\\n\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\\n\"\n\n---------------------------------------------------------------------------------------------------------------------------------------\n\n\u201cNo one knows the value of $P$ until the game has started. \nThe game starts when all players have shown their symbol. \nAt that point, each of them can decide to change their symbol. \nIn other words, the game can start when all players have at least one of the following symbols: $S$, $P$, or $R$.\n\nIn this problem we are given a sequence of symbols $(s_1, s_2, \\dots, s_R)$, where each symbol is either:\n\n1. one of $S$, $P$, or $R$;\n2. the empty string.\n\nOur goal is to find the maximum possible score for any valid game configuration, i.e. \nfor any valid initial configuration of the game.\n\nIf player 1 has chosen the symbol $S$, then it\u2019s the opponent\u2019s turn to play. \nIf player 1 has chosen the symbol $P$, then the player 2 plays. \nOtherwise, the player 2 plays.\n\nIf the symbol that player 1 plays equals to the symbol that the player 2 plays, \nthen both players get one point. Otherwise, player 1 gets two points.\n\nNote that the initial configuration of the game does not determine the final score of the game.\n\nThe players play the game until one of the players wins $S$ or $R$.\n\nIn this problem we are given a sequence of symbols $(s_1, s_2, \\dots, s_R)$, where each symbol is either:\n\n1. one of $S$, $P$, or $R$;\n2. the empty string.\n\nOur goal is to find the maximum possible score for any valid game configuration, i.e. \nfor any valid initial configuration of the game.\n\nIf player 1 has chosen the symbol $S$, then it\u2019s the opponent\u2019s turn to play. \nIf player 1 has chosen the symbol $P$, then the player 2 plays. \nOtherwise, the player 2 plays.\n\nIf the symbol that player 1 plays equals to the symbol that the player 2 plays, \nthen both players get one point. Otherwise, player 1 gets two points.\n\nNote that the initial configuration of the game does not determine the final score of the game.\n\nThe players play the game until one of the players wins $S$ or $R$.\n\nIn this problem we are given a sequence of symbols $(s_1, s_2, \\dots, s_R)$, where each symbol is either:\n\n1. one of $S$, $P$, or $R$;\n2. the empty string.\n\nYour task is to find the maximum possible score for any valid game configuration, i.e. \nfor any valid initial configuration of the game.\n\nFor example, given the sequence $(s_1, s_2, \\dots, s_R)$ with $S$ on position $1$, $P$ on position $3$, and $R$ on position $5$, \nthe function should return $6$.\n\nIf all the symbols are $S$, then the score is $0$. \nIf all the symbols are $P$, then the score is $2$. \nOtherwise, the score is $4$.\n\nIn this problem we are given a sequence of symbols $(s_1, s_2, \\dots, s_R)$, where each symbol is either:\n\n1. one of $S$, $P$, or $R$;\n2. the empty string.\n\nYour task is to find the maximum possible score for any valid game configuration, i.e. \nfor any valid initial configuration of the game.\n\nFor example, given the sequence $(s_1, s_2, \\dots, s_R)$ with $S$ on position $1$, $P$ on position $3$, and $R$ on position $5$, \nthe function should return $6$.\n\nIf all the symbols are $S$, then the score is $0$. \nIf all the symbols are $P$, then the score is $2$. \nOtherwise, the score is $4$.\n\nIn this problem we are given a sequence of symbols $(s_1, s_2, \\dots, s_R)$, where each symbol is either:\n\n1. one of $S$, $P$, or $R$;\n2. the empty string.\n\nYour task is to find the maximum possible score for any valid game configuration, i.e. \nfor any valid initial configuration of the game.\n\nFor example, given the sequence $(s_1, s_2, \\dots, s_R)$ with $S$ on position $1$, $P$ on position $3$, and $R$ on position $5$, \nthe function should return $6$.\n\nIf all the symbols are $S$, then the score is $0$. \nIf all the symbols are $P$, then the score is $2$. \nOtherwise, the score is $4$.\n\nIn this problem we are given a sequence of symbols $(s_1, s_2, \\dots, s_R)$, where each symbol is either:\n\n1. one of $S$, $P$, or $R$;\n2. the empty string.\n\nYour task is to find the maximum possible score for any valid game configuration, i.e. \nfor any valid initial configuration of the game.\n\nFor example, given the sequence $(s_1, s_2, \\dots, s_R)$ with $S$ on position $1$, $P$ on position $3$, and $R$ on position $5$, \nthe function should return $6$.\n\nIf all the symbols are $S$, then the score is $0$. \nIf all the symbols are $P$, then the score is $2$. \nOtherwise, the score is $4$.\n\nIn this problem we are given a sequence of symbols $(s_1, s_2, \\dots, s_R)$, where each symbol is either:\n\n1. one of $S$, $P$, or $R$;\n2. the empty string.\n\nYour task is to find the maximum possible score for any valid game configuration, i.e. \nfor any valid initial configuration of the game.\n\nFor example, given the sequence $(s_1, s_2, \\"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n2\") == '5\\n10'\nprint(\"Passed\")\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"SSPPR\") == \"5\"\nassert solution(\"SSPPR\\n1\\nSSPPR\") == \"5\"\nassert solution(\"SSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"\nprint(solution(\"5\\nSSPPR\\n1\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\"))"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\nSSPPR\\n1\\nSSPPR\\n') == '5\\n10'\nassert solution('5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n') == '10\\n15'\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"SSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == '5\\n10'\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == '10\\n15'"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"\nprint(\"Successfully passed!\")\n\n\"\"\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n11\\n\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n7\\n11\\n\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\"\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3) =='still running'\nassert solution(1) == '4'\n\nfrom typing import List"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n7\\n11\\n2\\n5\\n9\\n10\\n17') =='still running'\nassert solution('5\\n2\\n5\\n9\\n10\\n17') == '4'\n\nassert solution('4\\n7\\n11\\n2\\n5\\n9\\n10\\n17') =='still running'\nassert solution('5\\n2\\n5\\n9\\n10\\n17') == '4'\n\nassert solution('4\\n7\\n11\\n2\\n5\\n9\\n10\\n17') =='still running'\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n7\\n11\\n\") == \"still running\"\nassert solution(\"4\\n7\\n11\\n\") == \"still running\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\"\nassert solution(\"4\\n7\\n11\\n\") == \"still running\"\nassert solution(\"4\\n7\\n11\\n\") == \"still running\"\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n7\\n11\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\n\"\"\"\n\nimport sys\nimport os\nfrom io import StringIO\nfrom time import sleep\n\nfrom typing import NamedTuple, List\n\nfrom utils import measure_time\n\n\nclass ButtonSequence(NamedTuple):\n    ticks: List[int]\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n7\\n11\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    2\n    7\n    11\n    \"\"\"\n) == \"4\"\nassert solution(\n    \"\"\"\n    5\n    2\n    5\n    9\n    10\n    17\n    \"\"\"\n) == \"still running\"\n\n\"\"\"\n[Analysis]\nThe given problem is a variant of a classical problem called the \"staircase problem\":\n\nhttps://en.wikipedia.org/wiki/Staircase_problem\n\nThe idea is to run a \"stopwatch\" with a single button and alternate between starting and stopping it.\n\nThe only difference is that the button is pressed at different times, but the difference between consecutive presses is always 1. The stopwatch always shows the time elapsed.\n\nThis is a classical problem that we can solve using a variation of the classic \"ticking bottle\" problem.\n\nThe idea is to start the stopwatch with a non-zero time elapsed. We also keep track of the time elapsed during the last press of the button. When the button is pressed again, the difference between the current and previous time elapsed is 1. \n\nIf the difference is non-zero and the button was not pressed before, then we've started the stopwatch and the current time elapsed is now 0. Otherwise, if the difference is zero, then we're just stopping the stopwatch, so the current time elapsed is the same as the previous one.\n\nAt the end of the first line of input, the stopwatch shows the number of seconds elapsed.\n\nWe need to take into account that, after the first press of the button, the stopwatch was already on. This means that after the first button press, the difference between consecutive presses of the button must be 1. This means that the difference between the current and previous time elapsed is 1.\n\nAt the end of the second line of input, the stopwatch shows the number of seconds elapsed.\n\n\"\"\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n7\\n11\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\n\nimport io\n\nassert solution(io.StringIO(\"5\\n2\\n5\\n9\\n10\\n17\")) == \"still running\"\nassert solution(io.StringIO(\"2\\n7\\n11\")) == \"4\"\n\nimport pytest\n\n@pytest.mark.parametrize(\n    \"s, expected\",\n    [\n        (\"2\\n7\\n11\", \"4\"),\n        (\"5\\n2\\n5\\n9\\n10\\n17\", \"still running\"),\n    ]\n)\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\nassert solution('2\\n2 2') == 'impossible'\nassert solution('3\\n3 3 3') == '0.4'\n\nprint('Success')\n\n-----Time Limit-----\n1 second\n'''"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2\\n2 2\") == \"impossible\"\n\"\"\"\n\nimport math\nimport sys\nimport re"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1 3 2 2 3\") == '0.6'\nassert solution(\"2 2\") == 'impossible'\n\"\"\""
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2 2\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\nassert solution('2\\n2 2') == 'impossible'\nassert solution('2\\n1 1') == 'impossible'\nassert solution('2\\n1 2') == '1.0'\nassert solution('2\\n2 1') == '0.5'\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\nassert solution('2\\n2 2') == 'impossible'\nassert solution('6\\n5 3 2') == 'impossible'\nassert solution('5\\n2 1 2 3') == 'impossible'"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2 2\") == \"impossible\"\nassert solution(\"4 4\") == \"1.0\"\nassert solution(\"4 4 4\") == \"impossible\"\nassert solution(\"1 1\") == \"impossible\"\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n6 1 3 2 2 3\") == '0.6'\n\"\"\""
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'impossible'\nassert solution('\\n6 1 3 2 2 3\\n') == '0.6'\n'''\n\nimport sys"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\nassert solution('2\\n2 2') == 'impossible'\n\n\"\"\"\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"\n\nSample Input 3:\n8 8 8 8\n7 7 7 7\nSample Output 3:\nGunnar\n\nSample Input 4:\n4 4 4 4\n1 2 3 4\nSample Output 4:\nTie\n\nSample Input 5:\n1 6 1 6\n1 10 1 10\nSample Output 5:\nGunnar\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"\nassert solution(\"2 2 4 2\\n3 3 4 3\") == \"Gunnar\"\nassert solution(\"8 8 4 8\\n3 3 4 3\") == \"Tie\"\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    1 4 1 4\n    1 6 1 6\n    \"\"\") == \"Emma\"\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 4 1 4') == 'Emma'\nassert solution('1 8 1 8') == 'Tie'\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\n\"\"\"\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 4 1 4', '1 6 1 6') == 'Emma'\nassert solution('1 8 1 8', '1 10 2 5') == 'Tie'\nassert solution('1 3 2 4', '5 6 1 4') == 'Gunnar'\nassert solution('4 2 4 4', '6 4 4 4') == 'Tie'\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"\nassert solution(\"1 10 10 10\\n1 10 10 10\") == \"Tie\"\nassert solution(\"1 3 1 3\\n1 3 1 3\") == \"Gunnar\"\nassert solution(\"1 6 1 6\\n1 10 2 5\") == \"Tie\"\n\"\"\"\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == \"Emma\"\nassert solution('1 8 1 8\\n1 10 2 5') == \"Tie\"\n\"\"\"\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == 'Emma'\n\nassert solution(input()) == 'Tie'\n\"\"\"\n\nimport numpy as np\n\na, b, c, d = map(int, input().split())\ne, f, g, h = map(int, input().split())"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\nprint(\"Success!\")\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\\n\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\\n\") == \"something is fishy\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\nprint(solution(\"5\\n1 2 3 mumble 5\"))\nprint(solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\"))\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\n\"\"\"\n\n\"\"\"\nMY SOLUTION\n\"\"\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\nassert solution('1 2 3 mumble mumble 7 mumble 8') =='makes sense'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 mumble 5') == \"makes sense\"\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') == \"something is fishy\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\nassert solution('1\\n1 2 3 mumble mumble 7 mumble 8') =='makes sense'\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\nprint(solution(input()))"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 2 3 mumble 5\") =='makes sense'\nassert solution(\"5 1 2 3 mumble mumble 7 mumble 8\") =='something is fishy'\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\""
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n\n\"\"\""
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n\"\"\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 9 25 49 81\\n') == '2 121'\nassert solution('5 3 6 9 12 15\\n') == '1 18'\nassert solution('5 4 3 2 1\\n') == '1 2'\n\"\"\"\n\n\nfrom sys import stdin\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 9 25 49 81') == '2 121'\nassert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\nassert solution('5 3 6 9 12 15') == '1 18'\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n\"\"\"\n\n\"\"\"\nGiven\n\na sequence of n positive integers\n\nsuch that\n\nthe difference between consecutive elements are equal\n\nwhere a and b are positive integers\n\nthe function should output the degree of the polynomial\n\nand the value of the polynomial when evaluated at the\n\nnext input value\n\"\"\""
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 6 9 12 15\\n') == '1 18'\nassert solution('4 9 25 49 81\\n') == '2 121'\nassert solution('10 4 6 2 4 6 8 10 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\""
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('5\\n6 3\\n4 0\\n2 3\\n4 5\\n0 1\\n2 0\\n7 3\\n5 6\\n6 5\\n4 6\\n0 1\\n0 4\\n7 7\\n3 6\\n2 5\\n4 6\\n0 1\\n2 3\\n3 0\\n0 7\\n5 3\\n0 1\\n1 2\\n1 0\\n1 6\\n3 6\\n6 7\\n3 7\\n2 3\\n3 6\\n4 5\\n4 6\\n0 1\\n0 4\\n6 6\\n6 5\\n4 4\\n4 6\\n3 0\\n0 5\\n5 3\\n1 2\\n1 6\\n1 0\\n0 1\\n2 0\\n1 5\\n0 5\\n6 2\\n3 6\\n0 7\\n2 6\\n6 6\\n0 4\\n0 6\\n0 0\\n0 7\\n0 4\\n0 5\\n6 1\\n6 0\\n0 4\\n0 3\\n0 0\\n0 0\\n0 0\\n2 3\\n0 1\\n0 0\\n0 4\\n0 5\\n0 4\\n0 0\\n0 0\\n0 0\\n0 1\\n2 3\\n0 7\\n0 0\\n0 7\\n0 1\\n1 2\\n2 0\\n0 1\\n3 0\\n0 7\\n0 5\\n0 1\\n1 2\\n0 7\\n2 0\\n2 0\\n0 4\\n0 0\\n0 1\\n0 0\\n0 1\\n0 7\\n0 1\\n0 6\\n0 7\\n0 4\\n0 6\\n0 6\\n0 7\\n2 6\\n0 7\\n0 6\\n0 7\\n0 0\\n0 1\\n0 2\\n0 4\\n0 0\\n0 1\\n0 0\\n0 0\\n0 0\\n0 7\\n0 0\\n0 0\\n0 2\\n0 0\\n0 2\\n0 2\\n0 0\\n0 0\\n0 0\\n0 2\\n0 0\\n0 0\\n0 0\\n0 2\\n0 0\\n0 0\\n0 0\\n1 2\\n1 6\\n0 4\\n0 6\\n1 2\\n2 6\\n0 2\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n1 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n\") == \"CORRECT\"\nassert solution(\"8\\n2 3\\n1 0\\n0 2\\n3 1\\n\") == \"CORRECT\"\nassert solution(\"8\\n2 3\\n1 0\\n0 2\\n3 1\\n\") == \"CORRECT\"\nassert solution(\"8\\n2 3\\n1 0\\n0 2\\n3 1\\n\") == \"CORRECT\"\nassert solution(\"8\\n2 3\\n1 0\\n0 2\\n3 1\\n\") == \"CORRECT\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\n\"\"\""
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2\\n2\\n1\\n0') == 'CORRECT'\nassert solution('3\\n0\\n1\\n2') == 'CORRECT'\nassert solution('3\\n1\\n0\\n1') == 'INCORRECT'\nassert solution('3\\n1\\n0\\n0') == 'INCORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n\"\"\""
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\nassert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\n\"\"\"\nimport sys"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\\n\") == \"CORRECT\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"8\\n4 3\\n1 0\\n0 2\\n3 1\\nSample Output 2: \\nCORRECT\") == \"CORRECT\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n') == 'CORRECT'\nassert solution('4\\n2 3\\n1 0\\n0 2\\n3 1\\n') == 'CORRECT'\nassert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n') == 'CORRECT'\nassert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n') == 'CORRECT'\nassert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n') == 'CORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\nassert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\n\nimport sys"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n0 1 1\n1 0 1\n1 1 0''') == '1 1 1'\n\nassert solution('''5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0''') == '1 2 3 1 11'"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n0 1 1\n1 0 1\n1 1 0''') == '1 1 1'\n\nassert solution('''5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0''') == '1 2 3 1 11'\n\nassert solution('''1000\n0 0 1 1 1 1\n0 0 2 0 2 2\n1 2 0 1 3 3\n1 0 1 0 1 1\n1 2 3 1 0 1''') == '1 2 3 1 11'\n\nassert solution('''1000\n0 0 1 1 1 1 1\n0 0 2 0 2 2 2\n1 2 0 1 3 3 3\n1 0 1 0 1 1 1\n1 2 3 1 0 1 1''') == '1 2 3 1 11'\n\nassert solution('''1000\n0 0 1 1 1 1 1 1\n0 0 2 0 2 2 2 2 2\n1 2 0 1 3 3 3 3 3\n1 0 1 0 1 1 1 1 1\n1 2 3 1 0 1 1 1 1''') == '1 2 3 1 11'"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\\n\") == \"1 2 3 11\"\nassert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\\n\") == \"1 1 1\"\nassert solution(\"1\\n0\\n\") == \"0\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\n\nA = [[0 for _ in range(N)] for _ in range(N)]\nfor i in range(N):\n    line = sys.stdin.readline().rstrip().split()\n    for j in range(N):\n        A[i][j] = int(line[j])\n\nfor i in range(N):\n    for j in range(N):\n        if A[i][j]!= 0:\n            break\n    if A[i][j] == 0:\n        break\n\nres = [0 for _ in range(N)]\n\nfor j in range(j, N):\n    if A[i][j]!= 0:\n        for k in range(j, N):\n            if A[i][k]!= 0:\n                res[i] ^= A[i][k]\n                break\n\nprint(' '.join([str(r) for r in res]))\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == solution('3\\n0 1 1\\n1 0 1\\n1 1 0') == '1 1 1'\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1\\n1\\n0\\n2\\n0\\n0\\n0\\n0\") == \"1 1 1\"\nassert solution(\"2\\n1\\n1\\n0\\n2\\n0\\n0\\n0\\n0\") == \"1 1 1\"\nassert solution(\"3\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\nassert solution(\"3\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\""
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 11\"\n\"\"\""
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n\"\"\"\n\nN = int(stdin.readline())\nmatrix = [[int(i) for i in stdin.readline().split()] for _ in range(N)]"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n0 1 1\n1 0 1\n1 1 0''') == '1 1 1'\nassert solution('''5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0''') == '1 2 3 1 11'\n'''\n10    0\n1\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n7"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"1 1\") == \"Thursday\"\nassert solution(\"1 1\") == \"Thursday\"\nassert solution(\"1 1\") == \"Thursday\"\nassert solution(\"1 1\") == \"Thursday\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n\"\"\""
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(solution.__doc__.split(\"\\n\")[0]) == 'Thursday'\n\"\"\"\n\nimport datetime"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('1 2') == 'Sunday'\nassert solution('0 12') == 'Sunday'\nassert solution('10 11') == 'Monday'\nassert solution('1 1') == 'Thursday'\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('16 2') == 'Sunday'\nassert solution('17 1') == 'Saturday'\nassert solution('4 1') == 'Tuesday'\nassert solution('1 4') == 'Saturday'\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('2 12') == 'Sunday'\nassert solution('9 1') == 'Sunday'\nassert solution('8 3') == 'Sunday'\nassert solution('7 7') == 'Saturday'\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n\nSample Input 1:\n6 11\nSample Output 1:\nFriday\nSample Input 2:\n12 31\nSample Output 2:\nSunday"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n\"\"\""
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"17 1\") == \"Saturday\"\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1') == 'Thursday'\n\"\"\"\nimport datetime\n\nd, m = map(int, stdin.split())\nx = datetime.datetime(2009, m, d)\nprint(x.strftime(\"%A\"))"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\nprint(\"Test 1 OK\")\nassert solution(\"100\\n500\\n12\\n\") == \"129\\n480\"\nprint(\"Test 2 OK\")\n\n\"\"\"\n\nfrom math import ceil, floor\n\nL = int(input())\nD = int(input())\nX = int(input())\nL_MIN = ceil(L / 10) * 10\nL_MAX = floor(D / 10) * 10\nwhile L_MIN > L_MAX:\n    L_MAX += 1\n\nfor i in range(L_MIN, L_MAX):\n    if sum(map(int, str(i))) == X:\n        print(i)\n        print(i + 1)\n        break\nelse:\n    print(\"Impossible\")\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\nassert solution('1\\n100\\n12\\n') == '129\\n480'\nassert solution('100\\n500\\n12\\n') == '129\\n480'\n\nprint('Hooray!')"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n100\\n4\\n') == \"4\\n40\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n100\\n4\\n12') == '4\\n129'\nassert solution('1\\n10\\n1\\n6') == '1\\n6'\n\"\"\""
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\nassert solution(\"100\\n500\\n12\\n\") == \"129\\n480\"\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\nprint(solution('1\\n100\\n4\\n'))\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\nprint('Test pass.')\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\\n\"\n\"\"\""
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n100\\n4\\n12\") == \"129\\n480\"\nprint(\"Well done!\")\n\n------------\n\nimport sys"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n100\\n4\\n12\") == \"129\\n480\"\n\nprint(solution(\"4\\n100\\n4\\n12\"))\n\"\"\"\n\nimport sys\nimport os\nimport re\nfrom collections import Counter\n\nsys.path.append(os.path.join(os.path.dirname(__file__), \"../..\"))\n\nfrom utils import time_me\n\nLIMIT = 10000"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"6.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\n\"\"\"\n\nstdin = \"\"\"1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4\"\"\"\n\nfrom math import atan2, hypot"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1\\n3 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\\n\") == \"6.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\\n\") == \"4.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\\n\") == \"6.0\\n3\"\n\"\"\"\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"6.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\n\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '4.0 3'\n\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0 3'\n\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0 3'\n\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0 3'\n\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0 3'"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '4.0\\n3'\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0\\n3'\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0\\n3'\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0\\n3'\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0\\n3'\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"6.0\\n3\"\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043d\u0430 \u0432\u0445\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0430\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u0432 \u0432\u0438\u0434\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a,\n\u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u043e\u0439, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0439 \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a\u0443 \"end\" (\u0431\u0435\u0437 \u043a\u0430\u0432\u044b\u0447\u0435\u043a)\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0442\u043e\u0433\u043e \u0436\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 i, j \u0440\u0430\u0432\u0435\u043d\n\u0441\u0443\u043c\u043c\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043d\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u044f\u0445 (i-1, j), (i+1, j), (i, j-1), (i, j+1).\n\u0423 \u043a\u0440\u0430\u0439\u043d\u0438\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0441\u043e\u0441\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0441 \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u043f\u043e\u043b\u043e\u0436\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u043c\u0430\u0442\u0440\u0438\u0446\u044b.\n\n\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438/\u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u0430\u043c \u0441\u0435\u0431\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043e\u0441\u0435\u0434\u043e\u043c \u043f\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u043c\u0443 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044e.\n\nSample Input:\n9 5\ng0 6 7 2 8\n0 3 9 4 5\n1 4 3 8 9\nend\nSample Output:\n13 21 22\n32 44 46\n55 78 90\n\n\"\"\""
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\\n\") == \"4.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\\n\") == \"6.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\\n\") == \"6.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\\n\") == \"6.0\\n3\""
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4') == '4.0\\n3', 'Input 1'\nassert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4') == '6.0\\n3', 'Input 2'\n\"\"\""
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\") == '4.0\\n3'\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == '6.0\\n3'\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == '6.0\\n3'\nassert solution(\"1 1\\n5 1\\n3 3\\n4\") == '4.0\\n3'"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '4.0\\n3'\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0\\n3'\nassert solution('''0 0\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '3.0\\n0'\n\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '4.0\\n3'\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0\\n3'\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3''') == '2'\n\"\"\"\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(5) == 2\nassert solution(10) == 2\nassert solution(15) == 3\nassert solution(100) == 5\nassert solution(1000) == 11\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\n'''"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\nassert solution('21') == '4'\n\"\"\"\n\nimport math\n\nn = int(input())"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1') == '1'\nassert solution('N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1') == 'HE GOT AWAY!'\n\"\"\"\n\nimport re\n\nfor line in stdin:\n    pattern = re.compile(r'^(?P<cia>[A-Z0-9-]{2,11})-(?P<name>[A-Z]+)(\\d{4,5})?$')\n    match = pattern.match(line)\n    if match:\n        print(match.group('cia'))\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\n3\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\n\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n\nSample Case 0\n\nSample Input 1:\nN-FBI1\n9A-USKOK\nI-NTERPOL\nG-MI6\nRF-KGB1\nSample Output 1:\n1\n\nSample Input 2:\nN-FBI1\n9A-USKOK\nI-NTERPOL\nG-MI6\nRF-KGB1\nSample Output 2:\n1\n\nSample Case 1\n\nSample Input 1:\nN-FBI1\n9A-USKOK\nI-NTERPOL\nG-MI6\nRF-KGB1\nSample Output 1:\n1\n\nSample Input 2:\nN321-CIA\nF3-B12I\nF-BI-12\nOVO-JE-CIA\nKRIJUMCAR1\nSample Output 2:\nHE GOT AWAY!\n\nSample Case 2\n\nSample Input 1:\nN-FBI1\n9A-USKOK\nI-NTERPOL\nG-MI6\nRF-KGB1\nSample Output 1:\n1\n\nSample Input 2:\nN321-CIA\nF3-B12I\nF-BI-12\nOVO-JE-CIA\nKRIJUMCAR1\nSample Output 2:\nHE GOT AWAY!\n\nSample Case 3\n\nSample Input 1:\nN-FBI1\n9A-USKOK\nI-NTERPOL\nG-MI6\nRF-KGB1\nSample Output 1:\n1\n\nSample Input 2:\nN321-CIA\nF3-B12I\nF-BI-12\nOVO-JE-CIA\nKRIJUMCAR1\nSample Output 2:\nHE GOT AWAY!\n\nSample Case 4\n\nSample Input 1:\nN-FBI1\n9A-USKOK\nI-NTERPOL\nG-MI6\nRF-KGB1\nSample Output 1:\n1\n\nSample Input 2:\nN321-CIA\nF3-B12I\nF-BI-12\nOVO-JE-CIA\nKRIJUMCAR1\nSample Output 2:\nHE GOT AWAY!\n\nSample Case 5\n\nSample Input 1:\nN-FBI1\n9A-USKOK\nI-NTERPOL\nG-MI6\nRF-KGB1\nSample Output 1:\n1\n\nSample Input 2:\nN321-CIA\nF3-B12I\nF-BI-12\nOVO-JE-CIA\nKRIJUMCAR1\nSample Output 2:\nHE GOT AWAY!\n\nSample Case 6\n\nSample Input 1:\nN-FBI1\n9A-USKOK\nI-NTERPOL\nG-MI6\nRF-KGB1\nSample Output 1:\n1\n\nSample Input 2:\nN321-CIA\nF3-B12I\nF-BI-12\nOVO-JE-CIA\nKRIJUMCAR1\nSample Output 2:\nHE GOT AWAY!\n\nSample Case 7\n\nSample Input 1:\nN-FBI1\n9A-USKOK\nI-NTERPOL\nG-MI6\nRF-KGB1\nSample Output 1:\n1\n\nSample Input 2:\nN321-CIA\nF3-B12I\nF-BI-12\nOVO-JE-CIA\nKRIJUMCAR1\nSample Output 2:\nHE GOT AWAY!\n\nSample Case 8\n\nSample Input 1:\nN-FBI1\n9A-USKOK\nI-NTERPOL\nG-MI6\nRF-KGB1\nSample Output 1:\n1\n\nSample Input 2:\nN321-CIA\nF3-B12I\nF-BI-12\nOVO-JE-CIA\nKRIJUMCAR1\nSample Output 2:\nHE GOT AWAY!\n\nSample Case 9\n\nSample Input 1:\nN-FBI1\n9A-USKOK\nI-NTERPOL\nG-MI6\nRF-KGB1\nSample Output 1:\n1\n\nSample Input 2:\nN321-CIA\nF3-B12I\nF-BI-12\nOVO-JE-CIA\nKRIJUMCAR1\nSample Output 2:\nHE GOT AWAY!\n\nSample Case 10\n\nSample Input 1:\nN-FBI1\n9A-USKOK\nI-NTERPOL\nG-MI6\nRF-KGB1\nSample Output 1:\n1\n\nSample Input 2:\nN321-CIA\nF3-B12I\nF-BI-12\nOVO-JE-CIA\nKRIJUMCAR1\nSample Output 2:\nHE GOT AWAY!\n\nSample Case 11\n\nSample Input 1:\nN-FBI1\n9A-USKOK\nI-NTERPOL\nG-MI6\nRF-KGB1\nSample Output 1:\n1\n\nSample Input 2:\nN321-CIA\nF3-B12I\nF-BI-12\nOVO-JE-CIA\nKRIJUMCAR1\nSample Output 2:\nHE GOT AWAY!\n\nSample Case 12\n\nSample Input 1:\nN-FBI1\n9A-USKOK\nI-NTERPOL\nG-MI6\nRF-KGB1\nSample Output 1:\n1\n\nSample Input 2:\nN321-CIA\nF3-B12I\nF-BI-12\nOVO-JE-CIA\nKRIJUMCAR1\nSample Output 2:\nHE GOT AWAY!\n\nSample Case 13\n\nSample Input 1:\nN-FBI1\n9A-USKOK\nI-NTERPOL\nG-MI6\nRF-KGB1\nSample Output 1:\n1\n\nSample Input 2:\nN321-CIA\nF3-B12I\nF-BI-12\nOVO-JE-CIA\nKRIJUMCAR1\nSample Output 2:\nHE GOT AWAY!\n\nSample Case 14\n\nSample Input 1:\nN-FBI1\n9A-USKOK\nI-NTERPOL\nG-MI6\nRF-KGB1\nSample Output 1:\n1\n\nSample Input 2:\nN321-CIA\nF3-B12I\nF-BI-12\nOVO-JE-CIA\nKRIJUMCAR1\nSample Output 2:\nHE GOT AWAY!\n\nSample Case 15\n\nSample Input 1:\nN-FBI1\n9A-USKOK\nI-NTERPOL\nG-MI6\nRF-KGB1\nSample Output 1:\n1\n\nSample Input 2:\nN321-CIA\nF3-B12I\nF-BI-12\nOVO-JE-CIA\nKRIJUMCAR1\nSample Output 2:\nHE GOT AWAY!\n\nSample Case 16\n\nSample Input 1:\nN-FBI1\n9A-USKOK\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n\"\"\""
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1') == '1\\n1\\nHE GOT AWAY!'\nassert solution('N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1') == 'HE GOT AWAY!'\n\"\"\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\\n\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\\n\") == \"HE GOT AWAY!\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\n\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\\n\"\n\n\"\"\""
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\n2\\n3\\n4\\n\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\\n\"\n\"\"\"\n\nreg_code_list = [input().split() for _ in range(5)]\nreg_code_list.sort(key=lambda x: x[0])\n\nfor reg_code in reg_code_list:\n    if 'FBI' in reg_code:\n        print(reg_code_list.index(reg_code)+1)\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == 'HE GOT AWAY!'\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"2\n3 3 3\n4 5 4\"\"\") == '6.843530573929037'\nprint(\"Test pass.\")"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 2\\n4 5 6\\n1 2 3') == '5.551115123125783'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5 3 2') == '5.8'\n'''\n\n\nfrom math import sqrt\n\nclass Triangle:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n    \n    def get_area(self):\n        s = (self.a + self.b + self.c) / 2\n        return sqrt(s * (s - self.a) * (s - self.b) * (s - self.c))"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 3 3\\n4 5 4\") == \"8.0\"\n\"\"\"\n\n\nfrom math import sqrt"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n3 3 3\\n4 5 4') == '6.843530573929037'\n\"\"\""
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n3 3 3\\n4 5 4') == '8.0'\nassert solution('2\\n3 3 3\\n4 4 5') == '6.843530573929037'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n3 3 3\\n4 5 4') == '6.843530573929037'\nassert solution('2\\n5 4 6\\n3 4 4') == '8.0'\nassert solution('2\\n1 1 1\\n2 3 4') == '2.0'\nassert solution('1\\n5 1 1\\n2 3 4') == '2.0'\nassert solution('1\\n10 1 1\\n2 3 4') == '6.843530573929037'\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3 3 3\\n4 5 4\") == '8.0'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2 3 4\\n1 2 3') == '6.0'\nassert solution('1\\n3 3 3\\n4 5 6') == '8.0'\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\nassert solution('100') == '101'\nassert solution('10000000') == '1000000001'\nassert solution('9') == '10'\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\nassert solution(\"100000000\") == \"100000000\"\n\"\"\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\nprint('Test pass.')"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\nassert solution(\"100\") == \"101\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\""
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\nassert solution(\"1+2+3+4+5+6+7+8+9+8+7+6+5+4+3+2+1\") == \"8172746\"\n\"\"\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1+9+8+4\") == 7\n\"\"\"\nimport math\nimport sys\nimport os\n\n_MAX_SIZE = 18\n\n\nclass String:\n    def __init__(self, data: str):\n        self.data = data\n\n    def __add__(self, other: 'String') -> 'String':\n        if len(self.data) > _MAX_SIZE or len(other.data) > _MAX_SIZE:\n            raise Exception(\"String cannot be more than 18 characters\")\n        return String(self.data + other.data)\n\n    def __len__(self) -> int:\n        return len(self.data)\n\n    def __str__(self) -> str:\n        return self.data\n\n    def __eq__(self, other: 'String') -> bool:\n        return self.data == other.data\n\n    def __hash__(self) -> int:\n        return hash(self.data)\n\n    def __repr__(self) -> str:\n        return self.__str__()\n\n    def __lt__(self, other: 'String') -> bool:\n        return self.data < other.data\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4+5+6+7+8+9+0') == '188'\nprint('Success')"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\n\n\"\"\"\n\nimport sys\nimport re\n\np = re.compile(\"[0-9]+\\s*\\+\\s*[0-9]+\\s*\")\n\nfor line in sys.stdin.readlines():\n    numbers = list(map(int, p.findall(line)))\n    print(sum(numbers))"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1+9+8+4') == '7'\n\"\"\"\n\nimport sys\nimport re\n\nregex = r'(?<!\\d)\\d+\\+'\n\nfor line in sys.stdin:\n    res = re.findall(regex, line)\n    print(len(set(res)))\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\n\"\"\"\nimport random"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"1+2+3+4+5+6+7+8+9\") == \"188\"\nassert solution(\n    \"1+9+8+4\") == \"7\"\nassert solution(\n    \"1+9+8+4\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5 2\\n\") == \"2 5\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\nassert solution(\"3 -2 -2 1\") == \"1 -1 -1 2\"\nassert solution(\"4 -1 4 1\") == \"1 1 4 6\"\nassert solution(\"5 1 1 1 1\") == \"3 4 4 4 4\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"2 1\"\nassert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"1 2\") == \"2 1\"\nassert solution(\"1 5 2\") == \"2 5\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\nassert solution(\"2 3 -2 2\") == \"3 1 2\"\nassert solution(\"1 1\") == \"0 0\"\nassert solution(\"1 2 3\") == \"0 0 0\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\n\n\"\"\"\nimport math\nfrom collections import deque\nimport sys\n\nimport pytest\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 -4 5\") == '5 -2 4'\n\nassert solution(\"2 2 -4 5\")!= '5 -2 5'\n\nassert solution(\"1 5 2\") == '2 5'\n\nassert solution(\"2 2 -4 5\") == '5 -2 4'\n\nassert solution(\"1 1 1\") == '1'"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 -3 5') == '2 -3 5'\nassert solution('1 5 2') == '5 -2'\n\"\"\"\n\nimport re\nfrom typing import List"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5 2\\n') == '2 5'\nassert solution('2 2 -4 5\\n') == '5 -2 4'\nassert solution('3 3 4 5\\n') == '10 8 7'\nassert solution('1 5 1\\n') == '1'\nassert solution('5 5 1\\n') == '5 5'\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 5 2') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'\nassert solution('3 -1 2 -2 3') == '-2 -3 1 3'\nassert solution('4 5 6 -3 -2') == '-3 -5 6 5'\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\n\"\"\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"5 2\\n\"\n\"2 1 2 1 2\"\n) == \"2 2 2 1 1\"\n\"\"\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\n\"\"\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\n\"\"\"\n\nfrom math import inf\nfrom collections import Counter"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 2\n2 1 2 1 2''') == '2 2 2 1 1'\nassert solution('''9 3\n1 3 3 3 2 2 2 1 1''') == '1 1 1 3 3 3 2 2 2'\nprint('Success')\n\n\"\"\"\nfrom typing import List, Tuple, Callable\nfrom collections import defaultdict"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n2 1 2 1 2') == '2 2 2 1 1'\n\"\"\""
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n2 1 2 1 2\\n') == '2 2 2 1 1'\n\nwith open('input.txt', 'r') as input_txt, open('output.txt', 'w') as output_txt:\n    print(solution(input_txt.read()), file=output_txt)\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\\n\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\\n\") == \"1 1 1 3 3 3 2 2 2\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\\n\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\\n\") == \"1 1 1 3 3 3 2 2 2\"\n\"\"\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\\n\") == \"2 2 2 1 1\"\n\"\"\"\n\nimport sys\nimport statistics"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"24 38\") == \"875\"\n\"\"\"\n\na, b = [int(x) for x in input().split()]\n\nprint((b - 1) // a + 1)\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 100\") == \"100\"\nassert solution(\"1 100\") == \"100\"\nassert solution(\"2 100\") == \"100\"\nassert solution(\"3 100\") == \"100\"\nassert solution(\"1 2\") == \"2\"\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 100') == '100'\nprint(solution(input()))\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"38 24\") == \"875\"\n\"\"\""
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('38 24\\n') == '875'\nassert solution('1 100\\n') == '100'\nassert solution('40 26\\n') == '0'\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"6\"\nassert solution(\"1 100\") == \"100\"\n\n\"\"\""
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n1 2 3 4 5\") == \"100\"\nassert solution(\"2 2\\n1 1\") == \"0\"\nassert solution(\"6 13\\n1 2 3 4 5 6 7 8 9 10\") == \"26\"\n\"\"\"\n\nimport math\n\n_, n, i = [int(x) for x in input().split()]"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('38 24') == '875'\n\"\"\"\n\na, i = [int(s) for s in input().split()]\nc = (i // a) + 1\nprint(i - a * (c - 1))"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"./data/input1.txt\") == \"875\"\nassert solution(\"./data/input2.txt\") == \"100\"\n\"\"\""
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('38 24') == '875'\nassert solution('1 100') == '100'\nprint(solution([int(input())]))\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'734 893') == '437'\nassert solution(\n'221 231') == '132'\n\nprint('Hooray!')\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '734 893') == '437'\nassert solution(\n    '221 231') == '132'\nassert solution(\n    '543 98') == '543'\nassert solution(\n    '98 543') == '543'\nassert solution(\n    '897 1') == '897'\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\"\"\"\n\nimport sys\nfrom typing import Iterator"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\nassert solution(\"111 222\") == \"222\"\nassert solution(\"333 222\") == \"333\"\nassert solution(\"111 1 1\") == \"111\"\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\nassert solution('345 678') == '543'\n\nprint(\"Code looks fine. Let's check it!\")"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n\"\"\"\n\nfrom operator import xor"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n\"\"\"\n\na = input().split()\na = list(a)\na.reverse()\na = int(''.join(a))\nb = input().split()\nb = list(b)\nb.reverse()\nb = int(''.join(b))\nprint(max(a, b))\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\nprint('Success')\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\"\"\"\n\nimport math\n\na, b = map(int, input().split())\n\nls = set()\nfor i in range(a, b + 1):\n    if i < 2:\n        continue\n    for j in range(2, i):\n        if i % j == 0:\n            break\n    else:\n        ls.add(i)\n\nfor i in ls:\n    if b % i == 0:\n        print(f'{i} {b // i}')\n        break\nelse:\n    print('impossible')"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11 131') == 'programming', 'Incorrect solution'\nassert solution('7 96') == 'contest', 'Incorrect solution'\n\nprint('Hooray!')\nSample Output 2:\nHooray!\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\n\n\"\"\"\n\nl, w = [int(x) for x in input().split()]\n\nfor i in range(26):\n    for j in range(26):\n        for k in range(26):\n            if l * i + j * j + k * k == w:\n                print(''.join([chr(ord('a') + i), chr(ord('a') + j), chr(ord('a') + k)]))\n                exit(0)\n\nprint(\"impossible\")\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\n\nSample Input 3:\n8 148\nSample Output 3:\nimpossible\n\"\"\""
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 131') == 'programming'\n\nassert solution('7 96') == 'contest'\n\n\"\"\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\n\"\"\"\n\nl, w = input().split()\nl = int(l)\nw = int(w)\n\nwords = []\nfor i in range(26):\n    for j in range(i + 1):\n        if (i + j) == l:\n            words.append(chr(97 + i) + chr(97 + j))"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\n:param stdin: Input string\n:return: Output string\n\"\"\""
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\nassert solution('1 131') == 'impossible'\nassert solution('0 1') == 'impossible'\n\n\"\"\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''11 131''') == '''programming'''\nassert solution('''7 96''') == '''contest'''\n\nprint(solution(input()))"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\nassert solution(\"2 1\") == \"impossible\"\n\nprint(solution(\"11 131\"))\nprint(solution(\"7 96\"))\nprint(solution(\"2 1\"))\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 'X'\\nX^\\n--\\n\\n.X\\n--\\n\") == \".^\\n--\\n\\n\"\nassert solution(\"3 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\") == \"BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n\""
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2 \\'X\\'\\n'\n    'X^\\n'\n    '--\\n\\n'\n    '.X\\n'\n    '--\\n\\n'\n    '3 12 \\'A\\'\\n'\n    'ABABABABABAC\\n'\n    'BABABABABABB\\n'\n    'ABABABABABAB\\n'\n    '\\n'\n    'BABABABABABA\\n'\n    'BBABABABABAB\\n'\n    'BABABABABABA\\n\\n') == '.^\\n'\n    '--\\n\\n'\n    'BBABABABABAC\\n'\n    'BBBABABABABA\\n'\n    'BBABABABABAB\\n\\n'\n    '3 12 \\'A\\'\\n'\n    'ABABABABABAC\\n'\n    'BABABABABABB\\n'\n    'ABABABABABAB\\n'\n    '\\n'\n    'BABABABABABA\\n'\n    'BBABABABABAB\\n'\n    'BABABABABABA\\n\\n'\n    '3 12 \\'A\\'\\n'\n    'ABABABABABAC\\n'\n    'BABABABABABB\\n'\n    'ABABABABABAB\\n'\n    '\\n'\n    'BABABABABABA\\n'\n    'BBABABABABAB\\n'\n    'BABABABABABA\\n\\n'\n    '3 12 \\'A\\'\\n'\n    'ABABABABABAC\\n'\n    'BABABABABABB\\n'\n    'ABABABABABAB\\n'\n    '\\n'\n    'BABABABABABA\\n'\n    'BBABABABABAB\\n'\n    'BABABABABABA\\n\\n')\n    \n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 \\'X\\nX^\\n--\\n\\n.X\\n--\\n') == '.^\\n--\\n'\nassert solution('3 12 \\'A\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n') == 'BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n'\n\nprint('Success')\n\n----"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 \"X\"'\n                 ) == 'X^\\n--\\n'\nassert solution('3 12 \"A\"'\n                 ) == 'ABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n'\nassert solution('3 12 \"A\"') == 'ABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n'\n\"\"\""
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 \\'X\\nX^\\n--\\n.X\\n--') == '.^\\n--\n\nassert solution('3 12 \\'A\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\nABABABABABAB') == 'BBABABABABAC\nBBBABABABABA\nBBABABABABAB\nBBABABABABAB\nSample Input 1:\n2 2 'X'\nX^\n--\n\n.X\n--\nSample Output 1:\n.^\n--\n\nSample Input 2:\n3 12 'A'\nABABABABABAC\nBABABABABABB\nABABABABABAB\n\nBABABABABABA\nBBABABABABAB\nABABABABABAB\nSample Output 2:\nBBABABABABAC\nBBBABABABABB\nBBABABABABAB\n\"\"\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 \"X\"'\n    ) == '.X'\nassert solution('3 12 \"A\"'\n    ) == 'ABAABABABABAC'\nassert solution('3 12 \"A\"'\n    ) == 'ABAABABABABA'\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 'X'\\nX^\\n--\\n\\n.X\\n--\") == \".X\\n--\\n\\n.\"X\nassert solution(\"3 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABA\\nBBABABABABAB\\nABABABABABAB\\n\") == \"BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n\"\n\"\"\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 'X'\\nX^\\n--\\n.X\\n--\\n\") == \".X\\n--\\n\"\nassert solution(\"3 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\") == \"BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n\"\n\"\"\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 X\\nX^\\n--\\n.X\\n--\\n') == '.^\\n--\\n'\nassert solution('3 12 A\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n') == 'BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n'\n\"\"\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"2 2 2 10\") == \"impossible\"\nassert solution(\"4 5 5 15\") == \"1 1 2\\n1 2 1\\n2 0 2\\n2 1 0\\n4 0 1\\n4 1 0\\n5 0 0\\n7 0 0\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n\n\"\"\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nprint(solution(\"100 80 60 240\"))\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n\"\"\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 14\") == \"1 0 3\"\nassert solution(\"2 4 4 14\") == \"1 1 2\"\nassert solution(\"100 80 60 240\") == \"0 0 4\"\n\"\"\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n\nassert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\nassert solution('50 70 60 240') == 'impossible'"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n3 0 2\\n3 1 1\\n5 0 1\\n7 0 0'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n\"\"\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4 4 14') == \"\"\"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\"\"\"\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0'\n\"\"\"\n\nNew Yearly Contest\n\n2020.11.04.    (\"%d+%d=%d?\")\n2020.11.05.    (\"%d+%d=%d?\")\n2020.11.06.    (\"%d+%d=%d?\")\n2020.11.07.    (\"%d+%d=%d?\")\n\n\"\"\"\n\n\"\"\"\n1-2. If you had a string with embedded numbers, how would you access them?\n3. Write a function that can calculate the factorial of a number. \nTry this from the empty string. How would you access the factorial of the last number in the string?\n\n\"\"\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nprint(solution(\"2 4 4 14\"))\n\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nprint(solution(\"100 80 60 240\"))\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2\\n4\\n6\\n7\\n8\\n9\\n10\") == \"1\\n3\\n6\\n12\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"1\\n2\\n3\\n4\\n6\\n7\\n9\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\") == \"1\\n2\\n3\\n4\\n7\\n9\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\") == \"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\"\n\nIn [1]: %history -f solution.py\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\nsolution.py:5: UserWarning: Using a generator expression with a predicate function is deprecated and will be removed in Python 3.10.\n  stdin = list(map(int, stdin.split('\\n')))\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'good job'\nassert solution('2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13') == '3\\n6\\n12'\n\n\"\"\"\n\nn = int(stdin.readline())\nnumbers = set([int(x) for x in stdin.read().split('\\n')])\n\nnumbers = sorted(list(numbers))\n\nfor i in range(1, len(numbers)):\n    if numbers[i]!= i + 1:\n        if numbers[i] - 1 == i:\n            print(i + 1)\n        else:\n            print(numbers[i] - 1)\n        break\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9\") == \"1 3 6\"\nassert solution(\"1 2 3 4 5 6 7 9 8\") == \"1 3 6 8\"\nassert solution(\"1 2 3 4 5 6 7 8 10\") == \"1 3 6 8\"\nassert solution(\"1 2 3 5 7 8 9 10\") == \"1 3 6 8 10\"\nassert solution(\"1 2 3 4 5 7 8 9 10\") == \"1 3 6 8 10\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13') == 'good job'\nassert solution('1\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13') == '1\\n3\\n6\\n12'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13') == '1\\n2\\n3\\n6\\n7\\n9\\n10\\n11\\n12\\n13'\n\n\"\"\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3\\n1\\n5\\n9\\n7\\n6\\n4\\n2\") == \"1\\n6\\n3\\n4\"\nassert solution(\"7\\n3\\n1\\n5\\n9\\n7\\n6\\n4\\n2\") == \"2\\n4\\n6\"\nassert solution(\"8\\n3\\n1\\n5\\n9\\n7\\n6\\n4\\n2\") == \"2\\n4\\n6\\n8\"\n\"\"\""
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''9\n2\n4\n5\n7\n8\n9\n10\n11\n13''') == 'good job'\nassert solution('''9\n2\n4\n5\n7\n8\n9\n10\n11\n13''') == '1\\n3\\n6'\nassert solution('''6\n3\n1\n2\n4\n5\n7''') == '1\\n2\\n3\\n4\\n5\\n6'\nassert solution('''8\n2\n4\n5\n7\n8\n9\n10\n11\n13''') == '1\\n3\\n6'\nassert solution('''10\n2\n4\n5\n7\n8\n9\n10\n11\n13''') == '1\\n3\\n6'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"good job\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"\"\"1\n3\n6\n12\"\"\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n') == 'good job'\nassert solution('5\\n2\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n') == '1\\n3\\n6\\n12'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n') == 'good job'\nassert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n') == '1\\n3\\n6\\n12'\nassert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n') == '1\\n3\\n6\\n12\\n14'\nassert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n') == '1\\n3\\n6\\n12\\n14'\n\nassert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n') == '1\\n3\\n6\\n12\\n14'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n2\\n4\\n5\\n7\\n8\\n9\\n10\") == \"good job\"\nassert solution(\"6\\n2\\n4\\n5\\n7\\n8\\n9\\n10\") == \"1\\n3\\n6\\n12\""
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nfrom math import log, sqrt, pi"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\nassert solution(\"5 6.1 2.5 2 2\") == \"2.45000000 2.85999999\"\n\n---Problem 641---\nSean and Lori are planning to travel by private boat on a vacation. The boat can hold a maximum of 40 people, but there is a rule: the maximum number of people that can travel in a boat is a multiple of 8. Sean and Lori now want to seat N people and they want to find a way to seat them that is as close to a multiple of 8 as possible. Given N and the number of passengers that Sean and Lori are planning to seat, return the maximum number of people that can travel in the boat.\n\nFor example, given N = 5, the passengers are 5, 8, 9, 11 and 25. Since there are two multiples of 8 in these numbers, and the maximum number of passengers in a boat is 40, we return 40.\n\nGiven N = 10, the passengers are 10, 12, 14, 16, 18, 20, 22, 24 and 26. The maximum number of passengers is 40, so we return 40."
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\n\"\"\"\n\nfrom math import log, sqrt, pi\nimport numpy as np"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nimport math\nimport sys\nfrom typing import Tuple, List, Union\n\nPRECISION = 10 ** -6\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\nassert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\nassert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\nassert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\nassert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\n\"\"\"\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(123) == \"3\"\nassert solution(5) == \"2\"\nassert solution(7) == \"4\"\n\"\"\"\n\n\nimport pytest\n\n\n@pytest.mark.parametrize('input_, expected', [\n    (0, 0),\n    (1, 0),\n    (2, 1),\n    (3, 2),\n    (4, 3),\n    (5, 4),\n    (6, 6),\n    (7, 13),\n    (8, 22),\n    (9, 33),\n    (10, 44),\n    (11, 55),\n    (12, 66),\n    (13, 77),\n    (14, 88),\n    (15, 99),\n    (16, 110),\n    (17, 121),\n    (18, 132),\n    (19, 143),\n    (20, 154),\n    (21, 165),\n    (22, 176),\n    (23, 187),\n    (24, 198),\n    (25, 209),\n    (26, 220),\n    (27, 231),\n    (28, 242),\n    (29, 253),\n    (30, 264),\n])\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('1') == 0\nassert solution('2') == 1\nassert solution('3') == 2\nassert solution('4') == 3\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '4'\n\"\"\"\n\nfrom functools import lru_cache"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '2'\nassert solution('8') == '3'\n\"\"\"\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"5\"\nassert solution(\"5\") == \"10\"\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 1\nassert solution('3') == 4\n\"\"\"\n\n\"\"\"\nThe book, play, movie, novel, and game characters are all presented in the same order. In addition, the relationships between the characters are presented in the same order. For each character, we will draw a line to their future or past, and so we can see where they will end up.\n\nThe problem is simply to figure out how many lines we need to draw.\n\nIf there are no characters or only one character, no relationships need to be explored. If there are two characters, there is one relationship. If there are three characters, there are four relationships: the ones between each pair of characters, and finally the relationship when all three are together. In general, the relationship between all subsets of at least two characters must be explored.\n\nHowever, we don\u2019t need to draw all the lines! If we only draw the lines between the first and second character, then we only need to draw two lines.\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\n\n-------"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == 3\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == 3\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == \"3\"\nassert solution(\"5\\nA\\nA\\nA\\nB\\nC\") == \"3\"\nassert solution(\"5\\nA\\nA\\nA\\nB\\nD\") == \"0\"\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('A\\nA\\nA\\nA') == '3'\nassert solution('A\\nB\\nA\\nA') == '1'\nassert solution('A\\nB\\nC\\nA') == '0'\nassert solution('A\\nB\\nC\\nD') == '0'\nassert solution('A\\nA\\nB\\nC') == '3'\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == \"3\"\nassert solution(\"4\\nA\\nB\\nA\\nA\") == \"0\"\nassert solution(\"4\\nA\\nA\\nB\\nA\") == \"2\"\n\"\"\"\n\nn = int(input())\nres = 0\nfor i in range(n):\n    if input() == \"A\":\n        res += 1\nprint(res)\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == '3'\n\"\"\"\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('A\\nA\\nA\\nA') == '3'\nassert solution('A\\nB\\nC\\nD') == '0'\nassert solution('A\\nA\\nA\\nA') == '3'\n\nSample Input:\n4\nA\nA\nB\nB\nSample Output:\n0\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == 3\nassert solution(\"3\\nA\\nB\\nC\\nD\") == 0\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == \"3\"\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == 3\n\"\"\"\n\nn = int(input())\nnums = []\nfor i in range(n):\n    nums.append(input())\n\nscore = 0\nfor i in range(n):\n    if nums[i] == 'A':\n        score += 4 - (i % 4)\nprint(score)\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\\n\") == \"..xx..\\nxx..xx\\n..xx..\\n\"\nassert solution(\"4 4 1 2\\n.x.\\nx.x\\n.x.\\nx.\\n\") == \"xxxx\\n.xx.\\nx.xx\\nxxxx\\n\"\nassert solution(\"2 2 1 2\\nx.\\nx.\\n\") == \"x.xx\\nxxxx\\n\"\nassert solution(\"4 2 1 2\\n.x.\\nx.\\nx.\\nx.\\n\") == \"xxxx\\nx..x\\nxxxx\\n\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\\n\") == \"..xx..\\nxx..xx\\n..xx..\\n\"\nassert solution(\"1 1 3 1\\n.x.\\nx.x\\n.x.\\n\") == \"x.x.x.\\n\"\nassert solution(\"1 2 3 3\\n.x.\\nx.x\\n.x.\\n\") == \".x.x.x.\\n\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n3 3 1 2\n.x.\nx.x\n.x.\n\"\"\"\n) == \"\"\"\n.xx..\nxx..x\n..xx.\n\"\"\"\nassert solution(\n\"\"\"\n3 3 2 2\n.x.\nx.x\n.x.\n\"\"\"\n) == \"\"\"\n.xx..\nxx..x\n.xx.\n\"\"\"\n\"\"\"\nNote\nPlease take this article in the form of an array of strings, where the $i$-th string contains $R_i$ characters.\n\"\"\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 3 1 2\n.x.\nx.x\n.x.\n''') == '..xx..\\nxx..xx\\n..xx..\\n'\n\nassert solution('''2 3 1 2\n.x.\nx.x\n.x.\n''') == '..x..\\nxx..x\\n..x..\\n'\n\nassert solution('''5 2 1 2\n.x.\nx.x\n.x.\n.x.\n.x.\n''') == '..x..\\n..x..\\n..x..\\n..x..\\n..x..\\n'\n'''"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 1 2\\n.x.\\nx.x\\n.x.') == '..xx..\\nxx..xx\\n..xx..', 'Test failed. Should have been..xx..\\nxx..xx\\n..xx..'\nassert solution('3 2 1 1\\nx.\\n.x\\nx.') == '..x..\\nxx..\\n..x.', 'Test failed. Should have been..x..\\nxx..\\n..x.'\nassert solution('1 1 2 3\\n.\\n.\\n.\\n') == '..\\n..\\n..\\n', 'Test failed. Should have been..\\n..\\n..'\nassert solution('1 1 1 1\\n.\\n.\\n.\\n') == '..\\n..\\n..\\n', 'Test failed. Should have been..\\n..\\n..'\n\n------Solution------\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"...xx..\\nxx..xx\\n..xx..\\n\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('.x.') == '..xx..'\nassert solution('x.x') == 'xx..xx'\nassert solution('.x.') == '..xx..'\nassert solution('x.x') == 'xx..xx'\nassert solution('..x..') == '..xx..'\n\"\"\"\n\nfrom itertools import chain"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\n\n------ Hints ------\n- Your task is to enlarge the matrix by replicating each character in it.\n- Use the scan function to enlarge the matrix.\n\"\"\""
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".x.\") == \"..x..\", \"The result must be..x..\"\nassert solution(\"x.x\") == \"x..x\", \"The result must be x..x\"\nassert solution(\".x.\") == \"..x..\", \"The result must be..x..\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nprint(solution(\"F 60 13 20\"))\n\nassert solution(\"B 60 13 20\") == \"7 20\"\nprint(solution(\"B 60 13 20\"))\n\nassert solution(\"F 0 1 10\") == \"2 10\"\nprint(solution(\"F 0 1 10\"))\n\nassert solution(\"F 1 10 24\") == \"3 10\"\nprint(solution(\"F 1 10 24\"))\n\nassert solution(\"F 1 10 25\") == \"4 10\"\nprint(solution(\"F 1 10 25\"))"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nprint(solution(\"F 60 13 20\"))\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('F 60 13 20') == '14 20'\n\"\"\""
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\n\"\"\"\nimport math"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\nwith open(\"input.txt\", \"r\") as f:\n    print(solution(f.read()))"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"B 60 13 20\") == \"16 20\"\nassert solution(\"F 60 13 50\") == \"14 50\"\nassert solution(\"B 60 13 50\") == \"16 50\"\n\nassert solution(\"F 60 13 50\") == \"14 50\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\"\"\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"F601320\") == \"1420\"\nprint(solution(\"F601320\"))\nassert solution(\"B601320\") == \"0 20\"\nprint(solution(\"B601320\"))\nassert solution(\"F601320\") == \"1420\"\nprint(solution(\"F601320\"))\nassert solution(\"F601320\") == \"1420\"\nprint(solution(\"F601320\"))\nassert solution(\"F601320\") == \"1420\"\nprint(solution(\"F601320\"))\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"F 60 13 20\\nF 60 13 20\") == \"14 20\\n14 20\"\nassert solution(\"F 60 13 20\\nF 60 13 20\\nF 60 13 20\") == \"14 20\\n14 20\\n14 20\"\n\"\"\""
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('F60 13 20') == '14 20'\nassert solution('F601320') == '14 20'\nassert solution('F601320F') == '14 20'\nassert solution('F601320F60 13 20') == '14 20'\nassert solution('F601320F60 13 20F') == '14 20'\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"FEB 9\") == \"nope\"\nassert solution(\"MAY 1\") == \"nope\"\nassert solution(\"OCT 31, FEB 9\") == \"nope\"\nassert solution(\"MAY 31, FEB 9\") == \"nope\"\n\"\"\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('DEC 25') == 'nope'\nassert solution('JAN 1') == 'nope'\nassert solution('MAY 31') == 'nope'\nassert solution('SEP 31') == 'nope'\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\n\nassert solution(\"SEP 12\") == \"nope\"\n\nassert solution(\"JAN 1\") == \"nope\"\n\nassert solution(\"NOV 32\") == \"nope\"\n\nassert solution(\"OCT 32\") == \"yup\""
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('JAN 17') == 'nope'\nassert solution('SEP 9') == 'nope'\nassert solution('MAR 10') == 'nope'\nassert solution('FEB 18') == 'yup'\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('OCT 32') == 'nope'\nassert solution('FEB 9') == 'nope'\n\n\"\"\"\n\nimport calendar\nfrom datetime import datetime\n\nimport pytest\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('OCT 32') == 'nope'\n\nprint(solution(stdin))\n\n\n\n\nWrite 5 lines of code to test the correctness of solution:\nHiQ recently got an assignment from a client to create a clone of the immensely popular website https://IsItHalloween.com. The website is a very simple one. People will visit the site occasionally to see if it is Halloween. Whenever it is, the website should print out yup, otherwise it should print out nope on the screen.\n\nSince HiQ is such a popular firm, they don't have time to complete this assignment right now. Their frontend engineers have already programmed the frontend of the website that prints out yup or nope, but not the backend microservice that determines whether it is indeed Halloween or not. Do you have time to help them?\n\nThe behaviour of the server should be as follows: it gets as input the current date in the format FEB 9, where FEB is the month given in three letters (JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC) and 9 is the day of the month starting at 1. It should then determine if this date represents October 31 or December 25 (since $31_8 = 25_{10}$).\n\n-----Input-----\nThe input consists of a single line containing a date of the format FEB 9, with the month and date separated by a single space.\n\n-----Output-----\nIf the date is October 31 or December 25, output yup. Otherwise, output nope.\n\n-----Examples-----\nSample Input:\nOCT 31\nSample Output:\nyup\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'nope'\nassert solution('JAN 1') == 'nope'\nassert solution('JAN 32') == 'nope'\nassert solution('OCT 32') == 'yup'\nassert solution('JAN 13') == 'nope'\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"OCT 30\") == \"nope\"\nassert solution(\"OCT 32\") == \"nope\"\nassert solution(\"SEP 30\") == \"nope\"\nassert solution(\"SEP 31\") == \"yup\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('SEP 24') == 'nope'\nassert solution('NOV 30') == 'nope'\n\nprint(solution(input()))\n\nhttps://www.codewars.com/kata/554ca54ffa7d91b236000023/train/python\n\n\"\"\""
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('OCT 32') == 'nope'\nassert solution('NOV 31') == 'yup'\nassert solution('NOV 32') == 'nope'\nassert solution('JAN 30') == 'nope'\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 2 2\") == \"#.#.#.#\\n.#.#.#.#\\n.#.honi#\\n.#.nera#\\n#.irak#\\n#.#.#.#\\n#.#.#.#\"\n\nassert solution(\"2 2 2 2\") == \"##\\n#h\\n##\\n#n\\n##\\n#i\\n##\\n#r\\n##\\n#a\\n##\"\n\nassert solution(\"4 3 2 2\") == \"###\\n#.#\\n###\\n#h\\n###\\n#n\\n###\\n#i\\n###\\n#r\\n###\\n#a\\n###\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"##\\n##\\n#honi#\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n#oker#\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n#nera#\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n#irak#\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n##\\n\"\n\n\"\"\"\n\nfrom typing import List, TextIO\nimport sys\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass Word:\n    index: int\n    chars: List[str]\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\n2 2 2 2\\nhoni\\noker\\nera\\nnera\\nirak') == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.'\n\nassert solution('3 3\\n2 1 3\\nirak\\nhoni\\noker') == '#.irak\\n#.honi#\\n#.oker#'\n\nassert solution('3 4\\n2 1 4\\nhoni\\nnera\\nirak\\nnera\\n') == '#.honi#\\n#nera#.\\n#.irak#\\n#.nera#.\\n#.#.#.#'\n\nassert solution('3 3\\n2 3 1\\nhoni\\nnera\\nirak') == '#.honi#\\n#nera#\\n#.irak#'\n\nassert solution('3 2\\n1 2 1\\nhoni\\nnera\\nirak') == '#.honi#\\n#nera#\\n#irak#'"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \\\n\"\"\"#.#.#.#.\n.#.#.#.#\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\\n\") == \"###.###.\\n##.#.#.#\\n###honi###\\n###.#.#.#\\n##.###.#\\n#.#irak#.#\\n#.#.#.#.#\\n##.###.#\\n###.###.\"\n\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(50000)\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 4\n2 2 2 2\nhoni\noker\nnera\nirak''') == '''#.#.#.#.\n.#.#.#.#\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak') == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.'\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"#####\\n#####\\n#honi#\\n#####\\n#oker#\\n#####\\n#nera#\\n#####\\n#irak#\\n#####\\n#####\"\n\n\"\"\"\n\nimport sys\nimport string"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"\"\"#.#.#.#.\n.#.#.#.#\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\n\"\n    \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\n\"\n) == \"+---+---+---+---+---+---+---+---+\\n\" \\\n    \"|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n\" \\\n    \"+---+---+---+---+---+---+---+---+\\n\" \\\n    \"|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n\" \\\n    \"+---+---+---+---+---+---+---+---+\\n\" \\\n    \"|...|:::|.n.|:::|...|:::|...|:p:|\\n\" \\\n    \"+---+---+---+---+---+---+---+---+\\n\" \\\n    \"|:::|...|:::|...|:::|...|:::|...|\\n\" \\\n    \"+---+---+---+---+---+---+---+---+\\n\" \\\n    \"|...|:::|...|:::|.P.|:::|...|:::|\\n\" \\\n    \"+---+---+---+---+---+---+---+---+\\n\" \\\n    \"|:P:|...|:::|...|:::|...|:::|...|\\n\" \\\n    \"+---+---+---+---+---+---+---+---+\\n\" \\\n    \"|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n\" \\\n    \"+---+---+---+---+---+---+---+---+\\n\" \\\n    \"|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n\" \\\n    \"+---+---+---+---+---+---+---+---+\\n\"\n\nassert solution(\n    \"White: Kb1,Qb1,Rb1,Nc1,Bc1,Bb1,Kb1,a2,b3,b3,Ra1,b5,Kb1,Ra1,b4,Ra1,b3,a3\\n\" \\\n    \"Black: Kb8,Qb8,Rb8,Kb8,Bb8,Bb8,Kb8,Kb8,Ra8,Ra8,a8,Ra8,Ra8,a8,Ra8,Ra8,a8,Ra8\\n\"\n) == \"+---+---+---+---+---+---+---+---+\\n\" \\\n    \"|.b.|:b:|.q.|:b:|.k.|.b.|:b:|.k.|\\n\" \\\n    \"+---+---+---+---+---+---+---+---+\\n\" \\\n    \"|:b:|.b:|.b:|.b:|.b:|.b:|.b:|.b:|\\n\" \\\n    \"+---+---+---+---+---+---+---+---+\\n\" \\\n    \"|a8|a8|a8|a8|a8|a8|a8|a8|a8|a8|a8|\\n\" \\\n    \"+---+---+---+---+---+---+---+---+\\n\" \\\n    \"|...|:b:|:b:|:b:|:b:|:b:|:b:|:b:|\\n\" \\\n    \"+---+---+---+---+---+---+---+---+\\n\" \\\n    \"|:R:|Kb1|Rb1|Rb1|Rb1|Rb1|Kb1|Rb1|Rb1|\\n\" \\\n    \"+---+---+---+---+---+---+---+---+\\n\" \\\n    \"|.n.|:r:|:n:|:n:|:n:|:n:|:n:|:r:|\\n\" \\\n    \"+---+---+---+---+---+---+---+---+\\n\"\n\nassert solution(\n    \"White: Kb1,Qb1,Rb1,Nc1,Bc1,Bb1,Kb1,a2,b3,b3,Ra1,b5,Kb1,Ra1,b4,Ra1,b3,a3\\n\" \\\n    \"Black: Kb8,Qb8,Rb8,Kb8,Bb8,Bb8,Kb8,Kb8,Ra8,Ra8,a8,Ra8,Ra8,a8,Ra8,Ra8,a8,Ra8\\n\"\n) == \"+---+---+---+---+---+---+---+---+\\n\" \\\n    \"|.b.|:b:|.q.|:b:|.k.|.b.|:b:|.k.|\\n\" \\\n    \"+---+---+---+---+---+---+---+---+\\n\" \\\n    \"|:b:|.b:|.b:|.b:|.b:|.b:|.b:|.b:"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Black: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \\\n    \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\nassert solution(\"White: Ra1,Qh1,Kh1,a3,b3,c3,e3,f3,g3,h3,i3,a4,b4,c4,d4,e4,f4,g4,h4,i4,a5,b5,c5,d5,e5,f5,g5,h5,i5\") == \\\n    \"Black: Ra1,Qh1,Kh1,a3,b3,c3,e3,f3,g3,h3,i3,a4,b4,c4,d4,e4,f4,g4,h4,i4,a5,b5,c5,d5,e5,f5,g5,h5,i5\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \\\n    \"Black: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\nassert solution(\"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \\\n    \"White: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \\\n    \"Black: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6''') == '''+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+'''\nassert solution('''White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6''') == '''+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+'''\nassert solution('''White: e2,e4,d4,f4,g4,h4,h3,e1,e3\nBlack: e7,e6,e5,e4,d6,d5,d4,f6,f5,f4,e9,e8,e7\n''') == '''+---+---+---+---+---+---+---+---+\n|.e.|.e.|.e.|.e.|.e.|.e.|.e.|.e.|\n+---+---+---+---+---+---+---+---+\n|e1.|.e.|.e.|.e.|.e.|.e.|.e.|.e.|\n+---+---+---+---+---+---+---+---+\n|.e.|.d.|.d.|.d.|.d.|.d.|.d.|.d.|\n+---+---+---+---+---+---+---+---+\n|d1.|.d.|.d.|.d.|.d.|.d.|.d.|.d.|\n+---+---+---+---+---+---+---+---+\n|.d.|.d.|.d.|.d.|.d.|.d.|.d.|.d.|\n+---+---+---+---+---+---+---+---+\n|d1.|.d.|.d.|.d.|.d.|.d.|.d.|.d.|\n+---+---+---+---+---+---+---+---+\n|.d.|.f.|.f.|.f."
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(help_me_with_the_game_input) == help_me_with_the_game_output, f\"Answer is incorrect. Actual: {solution(help_me_with_the_game_input)}, Expected: {help_me_with_the_game_output}\""
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == 'Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4'\nassert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == 'Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4'\nassert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == 'Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4'\nassert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == 'Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4'\nassert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == 'Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4'\n\n-----Problem-----\nAll of the chess cards have been reversed. The goal now is to return them to their original form. The input is given as a string of the form:\n\n.P.P.P..P....P.P..P.P.P.P.P.P.P.P.P\n.P...P.P..P....P.P..P.P.P.P.P.P\n.P...P.P.P...P.P..P.P.P.P.P.P.P\n.P...P.P.P...P.P.P.P.P.P.P.P.P\n.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P\n.P..P..P..P..P..P..P.P.P.P.P.P.P\n..P....P...P....P...P...P...P...P...P\n.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P\n.P...P.P.P...P.P...P.P...P.P...P.P\n..P....P...P....P...P...P...P...P...P\n.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P\n.P...P.P.P...P.P...P.P...P.P...P.P\n."
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\") == \"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\"\n\nassert solution(\n\"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\") == \"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == '+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n'\nassert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: p1,p2,p3,p4,p5,p6,p7,p8,q1,q2,q3,q4,q5,q6,q7,q8\\nBlack: e1,e2,e3,e4,e5,e6,e7,e8\\nWhite: Kd1,Kf1,Kg1,Kh1,Cd1,Cf1,Cg1,Ch1\\nBlack: Kd8,Kf8,Kg8,Kh8,Cd8,Cf8,Cg8,Ch8') == '+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n'\nassert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: p1,p2,p3,p4,p5,p6,p7,p8,q1,q2,q3,q4,q5,q6,q7,q8\\nBlack: e1,e2,e3,e4,e5,e6,e7,e8\\nWhite: Kd1,Kf1,Kg1,Kh1,Cd1,Cf1,Cg1,Ch1\\nBlack: Kd8,Kf8,Kg8,Kh8,Cd8,Cf8,Cg8,Ch8\\nWhite: p"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n\n\"\"\"\n\ninput_data = input()\ninput_data = input_data.split(\"\\n\")\nwhite_pieces = input_data[0].split(\",\")\nblack_pieces = input_data[1].split(\",\")\n\nfor white_piece in white_pieces:\n    if white_piece[0] == \"P\":\n        print(\"+---+---+---+---+---+---+---+---+\")\n        print(\"|.P.|.P.|.P.|.P.|.P.|.P.|.P.|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n        print(\"|.P.|.P.|.P.|.P.|.P.|.P.|.P.|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n        print(\"|.P.|.P.|.P.|.P.|.P.|.P.|.P.|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n        print(\"|.P.|.P.|.P.|.P.|.P.|.P.|.P.|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n        print(\"|:P:|.P.|.P.|.P.|.P.|.P.|.P.|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n        print(\"|.P.|.P.|.P.|.P.|.P.|.P.|.P.|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n    elif white_piece[0] == \"R\":\n        print(\"+---+---+---+---+---+---+---+---+\")\n        print(\"|.R.|:::|.R.|.R.|:::|.R.|.R.|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n        print(\"|.R.|:::|.R.|.R.|:::|.R.|.R.|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n        print(\"|.R.|:::|.R.|.R.|:::|.R.|.R.|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n        print(\"|.R.|:::|.R.|.R.|:::|.R.|.R.|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n        print(\"|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n    elif white_piece[0] == \"B\":\n        print(\"+---+---+---+---+---+---+---+---+\")\n        print(\"|.B.|:::|.B.|.B.|:::|.B.|.B.|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n        print(\"|.B.|:::|.B.|.B.|:::|.B.|.B.|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n        print(\"|.B.|:::|.B.|.B.|:::"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|r.|:::|b.|:q:|k.|:::|n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|::p|.p|::p|.p|::p|.p|::p|.p|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P|:::|.P|:P|...|:P|.P|:P|:P|\\n+---+---+---+---+---+---+---+---+\\n|:R|.N|:B|.Q|:K|.B|:::|.R|\\n+---+---+---+---+---+---+---+---+\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"0.000000 4.000000\") == \"Need more materials!\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"0.500000 4.500000\") == \"Need more materials!\"\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"0.000001 100.00\") == \"Need more materials!\"\n\nimport sys; sys.stdin.readline()\nimport math\n\nA, N = map(float, input().split())\nprint(\"Diablo is happy!\" if A <= N <= math.sqrt(N) else \"Need more materials!\")\n\nA, N = map(float, input().split())\nprint(\"Diablo is happy!\" if 0 <= N <= math.sqrt(A**2) else \"Need more materials!\")\n\nA, N = map(float, input().split())\nprint(\"Diablo is happy!\" if A * N <= math.sqrt(A**2 + N**2) else \"Need more materials!\")\n\n\n\nimport sys; sys.stdin.readline()\nimport math"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.0 4.0') == 'Need more materials!'\nassert solution('1.0 2.0') == 'Diablo is happy!'\n\"\"\""
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.0 2.0\") == \"Diablo is happy!\"\nassert solution(\"1.1 2.1\") == \"Need more materials!\"\nassert solution(\"1.2 2.2\") == \"Need more materials!\"\nassert solution(\"1.3 2.3\") == \"Diablo is happy!\"\n\"\"\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"2.000000 4.000000\") == \"Need more materials!\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.000000 4.000000\") == 'Diablo is happy!'\nassert solution(\"1.000000 5.000000\") == 'Need more materials!'\n\n-----Hint-----\nThe area of a regular polygon with n sides is given by:\nn = 3: a = n * s * s / 2\nn = 4: a = n * s * s / 2 * s / s\nn = 5: a = n * s * s / 2 * s / s * (2 * s - s * math.sqrt(2)) / 2\nn = 6: a = n * s * s / 2 * s / s * (2 * s - s * math.sqrt(2)) / 2 * (2 * s - s * math.sqrt(2)) / s\nn = 7: a = n * s * s / 2 * s / s * (2 * s - s * math.sqrt(2)) / 2 * (2 * s - s * math.sqrt(2)) / s * (2 * s - s * math.sqrt(2)) / s\n\nFor n = 3, n = 4, n = 5,..., n = 9, the formula becomes\na = (n * s * s / 2) / math.sqrt(n * (n - 2))\n\nYou may use the formula in the hint if you like.\n\nFor the given input, the cage you build should cover exactly 10 meters square.\n\nThe solution is O(1) in the worst case, O(n) in the best case, where n is the number of fences in the input.\n\"\"\"\n\nimport math"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"1.000000 5.000000\") == \"Need more materials!\"\n\"\"\"\n\nimport math\n\na, n = [float(x) for x in input().split()]"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1.0 4.0\") == \"Diablo is happy!\"\nassert solution(\"0.0 4.0\") == \"Need more materials!\"\nassert solution(\"0.01 4.0\") == \"Diablo is happy!\"\nassert solution(\"0.0 4.01\") == \"Need more materials!\"\nassert solution(\"0.0 4.99\") == \"Need more materials!\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"2.00000000 5.00000000\") == \"Need more materials!\"\n\"\"\""
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 1 10 2 1') == '6'\nassert solution('1 1 10 2 1') == 'use the stairs'\nassert solution('1 1 1 1 1') == 'use the stairs'\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"10 0 10 2 1\") == \"use the stairs\"\n\n:param stdin: stdin input\n:return: Solution string\n\"\"\""
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"5 5 5 1 1\") == \"use the stairs\"\n\"\"\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"10 10 1 1 1\") == \"use the stairs\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 1 10 2 1') == '6'\n\n\"\"\""
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\"\"\""
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 1 10 2 1') == 6\nassert solution('4 6 7 2 5') == 'use the stairs'\n\nprint(solution(input()))\n\n-----Notes-----\n\nThe correct answer is guaranteed to exist.\n\"\"\"\n\nfrom functools import lru_cache\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 1 10 2 1\") == \"use the stairs\"\nassert solution(\"10 1 10 2 1000\") == \"use the stairs\"\nassert solution(\"10 1 10 2 1\") == \"use the stairs\"\nassert solution(\"1 1 1 1 1\") == \"use the stairs\"\n\"\"\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\nassert solution(\"3\\n5\\n7\\n10\") == \"13.0\"\n\n\"\"\"\nimport math\nfrom typing import List\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1\\n2\\n3\\n') == '0.16666666'\nassert solution('3\\n10\\n20\\n30\\n') == '0.14285714'\nassert solution('3\\n1\\n2\\n') == '0.4'\nassert solution('3\\n1\\n1\\n') == '0.0'\nassert solution('3\\n1\\n2\\n') == '0.4'\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\\n89.06666666666666\"\nassert solution(\"5\\n678\\n4567\\n89\\n0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\") == \"178.611844098\\n6.093\"\n\nprint(solution(\"5\\n678\\n4567\\n89\\n0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\"))"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n500\\n120\\n75') == '128.8\\n89.06666666666666'\n\"\"\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1\\n1\\n1\\n1\\n1\\n1\\n\") == \"7.0\"\nassert solution(\"6\\n10000\\n10000\\n10000\\n10000\\n10000\\n10000\\n\") == \"10000.0\"\n\"\"\"\n\nimport sys\nimport functools\nfrom typing import List\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n100\\n500\\n120\\n75\") == \"128.8\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n500\\n120\\n75') == '128.8'\n\"\"\""
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n100\\n2\\n500\") == \"500\"\nassert solution(\"1\\n100\\n2\\n120\\n3\\n75\") == \"128.8\"\nassert solution(\"1\\n100\\n2\\n120\\n3\\n75\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n110\\n110\") == \"254.0714285714286\"\nassert solution(\"1\\n100\\n2\\n120\\n3\\n75\\n101\\n110\") == \"256.2\"\n\n\"\"\"\n\nimport sys\n\nnum_samples = int(sys.stdin.readline())\nscores = [int(sys.stdin.readline()) for i in range(num_samples)]\n\nprint(sum(i*i for i in range(1, len(scores)+1)) / sum(scores))\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n500\n120\n75''') == '128.8'\n\nassert solution('''3\n500\n120\n75''') == '89.06666666666666'\n\nassert solution('''2\n919\n918''') == '9.0'\n\nassert solution('''5\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n''') == '0.6'\n\nassert solution('''1\n1\n''') == '1'"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n500\\n120\\n75') == '128.8'\nassert solution('1\\n500') == '500.0'\nassert solution('2\\n500\\n120') == '337.3'\nassert solution('5\\n500\\n120\\n75\\n24') == '592.0'\nassert solution('2\\n0\\n100') == '100.0'\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n\n-----Problem-----\n\n\"\"\""
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 45 65 84 346') == 4\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n\nsolution(\"5\\n1 45 65 84 346\") == \"4\"\n\nSample Input:\n10\n1 1 1 1 1 1 1 1 1 1\nSample Output:\n0\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n\nprint(solution(\"5\\n1 45 65 84 346\"))\n\"\"\""
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\nimport sys"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 45 65 84 346\n''') == '4'\n\n'''\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\n\n-----Challenge-----\nFor a given input, your function should always output a single integer."
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n\"\"\"\n\nn = int(input())\ndirty_pushes = list(map(int, input().split()))\n\ncleanses = 0\n\nfor i in range(n):\n    if dirty_pushes[i] >= 20:\n        cleanses += dirty_pushes[i] // 20\n        dirty_pushes[i] -= (dirty_pushes[i] // 20) * 20\n    if dirty_pushes[i] >= 10:\n        cleanses += 1\n        dirty_pushes[i] -= 10\n    if dirty_pushes[i] >= 5:\n        cleanses += 1\n        dirty_pushes[i] -= 5\n    if dirty_pushes[i] >= 2:\n        cleanses += 1\n        dirty_pushes[i] -= 2\n\nprint(cleanses)\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == 1\n\"\"\"\n\nimport sys\nfrom collections import namedtuple"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\n\nSample Input:\n7 4\n#######\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == 1\n\n\"\"\""
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\nassert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\nassert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\n\nassert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\nassert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\nP#GTG#\\nT.#.G#\\n#..#G#\\nT.TGG#\\nP#P.#') == '1'\nassert solution('3 5\\nP.G.G.G\\nT..#G.#\\n.G.T.T\\n#..G.P\\nT.#G.#\\nP.G.G.G\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP.G.G.G\\nG.G.#.P\\nP.G.G.G\\nG.G.#.P\\nT.T.T.T\\nP"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == \"1\"\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == 1\n\"\"\"\n\nw, h = map(int, stdin.split())\nr = [[x for x in stdin[i * w + j]] for j in range(w) for i in range(h)]\n\ns = 0\nfor i in range(h):\n    for j in range(w):\n        if r[i][j] == \"T\":\n            s += 1\n        if r[i][j] == \"G\":\n            s += 1\n\nprint(s)\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\nP....#\\n#.#..T\\n....#G\") == \"4\"\nassert solution(\"7 6\\nP...G.#\\n..#.T.T\\n....TTT\\nT....G\\nTTT..G\\n#TT...\\nG....G\\n\") == \"4\"\nassert solution(\"7 6\\n...G.#\\n..#.T.T\\n....TTT\\nT....G\\nTTT..G\\n#TT...\\nG....G\\n\") == \"6\"\nassert solution(\"7 6\\n..G.G.#\\n#..T.TT\\n.G...T\\nTTT.G.\\nT...T.\\nTTTTG.\\n#T..G.\\nG...G#\\n\") == \"8\"\nassert solution(\"7 6\\n....T.#\\nT.#..G\\nG.#G.G\\n#G.G..\\nG...G#\\n.T...G\\n#.G.G.\\nG...G#\\n\") == \"2\"\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n#####\\n#.G.#\\n#G#G#\\n#P.T#\\n#####') == '1'\nassert solution('6 6\\n#####\\n#.G.#\\n#G#G#\\n#P.T#\\n#####') == '1'\nassert solution('6 6\\n#####\\n#G.G#\\n#G#G#\\n#P.T#\\n#####') == '0'\nassert solution('6 6\\n#####\\n#G#G#\\n#G#G#\\n#P.T#\\n#####') == '0'\nassert solution('7 6\\n#####\\n#G#G#\\n#G#G#\\n#P.T#\\n#####') == '1'\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13 50\") == \"5\"\n\nassert solution(\"13 10\") == \"4\"\n\nassert solution(\"13 20\") == \"5\"\n\nassert solution(\"13 50\") == \"5\"\n\nassert solution(\"13 50\") == \"5\""
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == \"5\"\n\nprint('The code ran Correctly')\n\"\"\"\nimport re"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == \"5\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(s) == e\nprint(solution(s))\n\n-----\n\nThe first line contains two integers $N$ and $M$. It is guaranteed that $1\\leq N, M\\leq 2000$.\n\nThe next $N$ lines contains $M$ characters each. It is guaranteed that each character is either \u2018_\u2019or \u2018$\u2019. It is also guaranteed that both the first and last columns are non-blank, and no two consecutive columns are both blank."
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$\\n') == '5'\nassert solution('10 30\\n_$$$_$$$\\n$__$__$$\\n_$$$__$$\\n$$__$$$\\n_$$$$$\\n$$__$$\\n$$__$$\\n_$$$_\\n_$$$_\\n') == '9'\nassert solution('13 50\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n____________\\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == 5\n\nassert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == 0\n\nassert solution(\"13 50\\n__$$____$___$___$____$____$_____$_$_$$_$__$$\\n_$___$_$____$_$___$_$___$______$_$_$_$__$__\\n$____$___$___$___$_$__$_$____$___$_$_$_$__$_\\n$_____$___$_$___$_$__$_$_____$_$_$_$__$_\\n$______$____$____$___$___$____$___$_$_$__$$_\\n$_______$___$___$___$___$___$___$_$_$__$__$$_\\n$_______$___$___$___$___$____$___$_$_$__$__$__\\n$_______$___$___$___$___$___$___$_$_$__$__$__\\n$______$____$____$___$___$___$___$_$_$__$__$__\\n$___$___$____$___$____$____$___$_$_$__$__$__\\n$___$____$____$____$____$____$___$_$_$__$__$__\\n$_____$___$___$___$___$___$___$___$_$_$__$__$__\\n$______$____$____$___$___$___$___$_$_$__$__$__\\n$_______$___$___$___$___$____$____$_$_$__$__$__\\n$_______$___$___$___$___$___$____$___$_$_$__$__$__\\n$_______$___$___$___$___$____$____$___$_$_$__$__$__\\n$_____$___$___$___$___$___$___$___$___$_$_$__$__$__\\n$_____$___$___$___$___$___$___$___$___$_$_$__$__$__\\n$_____$___$___$___$___$___$"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == 5\n\nprint(solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == 5)\n\nprint(solution(\"13 50\\n___$_$______$_$_____$_$_________$_$_____$_$_____\\n__$__$___$___$___$___$___$______$___$___$___$__\\n_$____$$____$___$___$___$____$____$___$___$____$_\\n$_____$___$___$___$___$_____$___$___$___$___$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$___$___$______$___$___$___$___\\n___$____$___$_____$___$____$____$_____$___$___\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == 5)\n\nprint(solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == result\n\n\"\"\"\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$_\\n___$____$___$_____$___$____$____$_____$___$____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$\\n__$_____$___$_____$___$_____$___$_____$___$_____$\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$\\n\") == \"5\"\n\n---\n\nThe dancer is represented by a '$' and the rest of the grid is represented by '_'.\n\nThe rating of a dance is the number of moves the dancer performs.\n\nIf there is a blank column, it denotes the dancer has performed one move."
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$\\n\") == \"5\"\nassert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$\\n\") == \"2\"\nassert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$\\n\") == \"6\"\nassert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nprint(solution(\"i cant speak pig latin\"))\n\n----------------------------------------------------------------\nSample Input 1:\nYou and I are both in love. I am I\nSample Output 1:\nouyay aydays anday aydays inuoyay amuyay anday aydays inuyay aydays ituyay areyay ouyay andyay aydays inuyay aydays inuyay ouyay amuyay andyay aydays inuyay aydays ituyay areyay youyay aydays inuyay aydays inuyay ouyay amuyay andyay aydays inuyay aydays ituyay areyay you and I am both in love.\nSample Input 2:\npegs mr. tsk tsk mr. sb\nSample Output 2:\noggenpay mrpay tskpay mrpay sbpay\n\"\"\""
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\n\"\"\""
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nprint(solution(\"i cant speak pig latin\"))\n\n\"\"\""
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\n\"\"\""
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(pig_latin_word(\"i cant speak pig latin\")) == \"iyay antcay eakspay igpay atinlay\"\nassert solution(pig_latin_word(\"i cant speak\")) == \"i cant speak\"\n\"\"\"\n\nimport string\nimport re\n\nVOWELS = list(string.ascii_lowercase)"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('I can\\'t speak pig latin') == 'iay aycay otay eakspay igpay atinlay'\n'''\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\n\"\"\"\n\nimport sys\nfrom typing import List\n\nvowels = ['a', 'e', 'i', 'o', 'u', 'y']\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('This is a simple text') == 'hisway isay isyay aay simpleyay tay'\nassert solution('Pig latin is cool') == 'igpay atinlay siay ouyay'"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\"this is pig latin i will tell you\") == \"htisay isay igpay atinlay iway tellay yay\"\n\n-----Constraints-----\nTime limit: 40 seconds per test set.\nMemory limit: 1GB.\nAll input is guaranteed to be valid and in the default test set.\n\n\"\"\""
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\n\n---Problem Description---\nGiven a list of $n$ restaurant menus, decide where to eat.\n\n-----Solution-----\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n') == 'nymble'\nassert solution('1\\n1\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n') == 'Anywhere is fine I guess'\nassert solution('1\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n') == 'Anywhere is fine I guess'\nassert solution('2\\n3\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n') == 'Anywhere is fine I guess'\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n') == 'Anywhere is fine I guess'\n\na=3\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\n\"\"\""
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'Anywhere is fine I guess'\nassert solution('\\n\\n\\n\\n\\n\\n') == 'Anywhere is fine I guess'\nassert solution('\\n\\n\\n\\n\\n\\n\\n') == 'Anywhere is fine I guess'\nassert solution('\\n\\n\\n\\n\\n\\n\\nnymble') == 'nymble'\nassert solution('\\n\\n\\n\\n\\n\\n\\nnymble\\npancakes') == 'nymble'\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n\") == \"nymble\"\n\"\"\""
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == \"Anywhere is fine I guess\"\nassert solution(\"pea soup\\npancakes\") == \"nymble\"\nassert solution(\"pea\\n soup\\npancakes\") == \"nymble\"\n'''\n\n\n'''\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('q\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\n\"\"\"\n\nn = int(input())\nmenus = [input() for i in range(n)]\n\nsoup = []\npancakes = []\n\nfor i in menus:\n    k = int(i.split('\\n')[0])\n    for j in i.split('\\n')[1:]:\n        if j.lower() == 'pea soup' or j.lower() == 'pancakes':\n            if j.lower() == 'pea soup':\n                soup.append(j)\n            elif j.lower() == 'pancakes':\n                pancakes.append(j)\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(sample_input) == sample_output\n\nprint(solution(sys.stdin.readlines()))\n\"\"\"\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n''') == 'nymble'\n\nprint(solution(stdin))\n\nhttps://www.codewars.com/kata/54bb0c0c76cddff3c5000078/python\n\"\"\""
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"q\\n2\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 0 15\") == 3\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\">5, 0, <15\") == '3'\nassert solution(\">2, 0, <10\") == '1'\nassert solution(\">5, 0, <3\") == '0'\nassert solution(\">1, 1, <2\") == '0'\nassert solution(\">3, 1, <4\") == '0'\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 0 15\") == \"3\""
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 0 15\") == \"3\""
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 0 15\") == 3\nprint(solution(\"5 0 15\"), 3)\n\n---------------------"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 0 15') == '3'\n\"\"\"\n\n\"\"\"\nThe solution is to calculate the number of times it must climb up by calculating the total distance and then subtracting the amount it falls to get the distance travelled during the jump and then calculating the number of jumps required.\n\"\"\"\n\nimport math"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 0 15\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 0 15\\n') == '3'\nassert solution('3 0 15\\n') == '2'\nassert solution('2 0 15\\n') == '1'\n\"\"\""
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 0 15') == '3'\n'''\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 0 15\\n\") == \"3\"\n\"\"\"\n\na, b, h = map(int, input().split())\n\nprint(h // (a + b) - 1)\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 15\") == \"19\"\n\"\"\""
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 15\") == \"19\"\nprint(solution(\"11 15\"))\n\n'''"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 15') == '19'"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 17\") == \"5\"\n\nassert solution(\"1 2\") == \"1\"\n\nassert solution(\"1 10\") == \"8\"\n\nassert solution(\"10 10\") == \"10\"\n\nassert solution(\"1 100\") == \"100\""
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 15') == '19'\nprint(solution('11 15'))\n\n------Problem-----\nMikko's birthday present for Slavko was two integers $R_1$ and $R_2$. Slavko promptly calculated their mean which also happened to be an integer but then lost $R_2$! Help Slavko restore $R_2$.\n\nInput\nThe first and only line of input contains two integers $R_1$ and $S$, both between $-1000$ and $1000$.\n\nOutput\nPrint $R_2$ on a single line.\n\nExample\nInput:\n11 15\nOutput:\n19\n\nSolution:\na = [int(i) for i in input().split()]\n\nprint(round(sum(a)/2))\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11 15') == '19'\n\"\"\""
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11 15') == '19'\nassert solution('2 1') == '1'\nassert solution('-2 -2') == '-1'\nassert solution('123 - 123') == '0'\nassert solution('123 - -123') == '0'\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 15\") == \"19\"\n\"\"\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11 15') == '19'\n\"\"\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"South West East\") == \"Yes\"\n\"\"\"\n\n\"\"\"\ndirection = [a, b, c]\n\n[South, East, West]\n[North, West, East]\n\"\"\""
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('South West East') == 'Yes'\n\"\"\""
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('South West East') == 'Yes'\n\"\"\""
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"South East West\") == \"No\"\nassert solution(\"East North East\") == \"No\"\n\"\"\""
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"South East West\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"South West East\") == \"Yes\"\n\nassert solution(\"North South East\") == \"No\"\n\nassert solution(\"North South West\") == \"Yes\"\n\nassert solution(\"West South East\") == \"Yes\"\n\nassert solution(\"West North West\") == \"No\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('North West South') == 'No'\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('North East South') == 'No'\n\"\"\"\n\nfrom enum import Enum, auto\n\nclass Direction(Enum):\n    North = auto()\n    South = auto()\n    East = auto()\n    West = auto()"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"North East West\") == \"No\"\nassert solution(\"North South East\") == \"Yes\"\n\"\"\"\n\na, b, c = input().split()"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('South East West') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"5 16\\n\"\n    \"again\\n\"\n    \"pirpumsemoystoal\\n\"\n) == \"marywasnosyagain\""
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 16\\nhell\\nmoon\") == \"mnoone\"\n\"\"\"\nimport string\nimport sys\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 16\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\nassert solution('5 17\\naaab') == 'aaaabb'\n\n\"\"\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n\"\"\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 16\\n again\\n pirpumsemoystoal\") == \"marywasnosyagain\"\nprint('Test pass.')\n\n-----Solution-----"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('abcd') == 'bcda'\n\n----\n\n\nimport re\nimport string\nfrom string import ascii_lowercase"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 16\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\nassert solution('5 16\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\nassert solution('5 16\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\nassert solution('5 16\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\nassert solution('5 16\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 16\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 16\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\nassert solution('5 16\\nhello\\nworld') == 'pizza'\nassert solution('6 10\\nhey\\njessie\\nwow\\nhello\\njessie\\nworld') == 'hello'\n\n-----Explanation-----\nIn this case, a reasonable solution could be:\n\n$a_1$ = $a_2$ = $a_3$ = $a_4$ = $a_5$ = $a_6$ = $a_7$ = 'a'\n$a_8$ = 'b'\n$a_9$ = 'c'\n$a_{10}$ = 'd'\n$a_{11}$ = 'e'\n$a_{12}$ = 'f'\n$a_{13}$ = 'g'\n$a_{14}$ = 'h'\n$a_{15}$ = 'i'\n$a_{16}$ = 'j'\n$a_{17}$ = 'k'\n$a_{18}$ = 'l'\n$a_{19}$ ='m'\n$a_{20}$ = 'n'\n$a_{21}$ = 'o'\n$a_{22}$ = 'p'\n$a_{23}$ = 'q'\n$a_{24}$ = 'r'\n$a_{25}$ ='s'\n$a_{26}$ = 't'\n\nKeyword: caesar cipher, autokey cipher\n\"\"\""
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"Odd\"\nassert solution(\"3\") == \"Even\"\nassert solution(\"4\") == \"Odd\"\nassert solution(\"5\") == \"Either\"\nassert solution(\"6\") == \"Odd\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Even'\nassert solution('4') == 'Odd'\nassert solution('5') == 'Even'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Odd\"\nassert solution(\"2\") == \"Even\"\nassert solution(\"3\") == \"Odd\"\nassert solution(\"4\") == \"Even\"\nassert solution(\"5\") == \"Odd\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(1)) == \"Either\"\nassert solution(str(2)) == \"Odd\"\nassert solution(str(3)) == \"Even\"\nassert solution(str(5)) == \"Odd\"\n\"\"\""
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Even'\nassert solution('4') == 'Odd'\nassert solution('5') == 'Even'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'Either'\nassert solution('1') == 'Either'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Odd'\nassert solution('5') == 'Even'"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == 'Odd'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Odd'\nassert solution('5') == 'Odd'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(123) == 'Odd'\nassert solution(120) == 'Even'\nassert solution(12345) == 'Either'\nassert solution(321) == 'Either'\nassert solution(0) == 'Even'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Even'\nassert solution('4') == 'Odd'\nassert solution('5') == 'Even'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(1)) == \"Either\"\nassert solution(str(2)) == \"Odd\"\nassert solution(str(3)) == \"Even\"\nassert solution(str(4)) == \"Odd\""
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n1\\n') == '2'\nassert solution('1\\n1\\n1\\n1\\n') == '5'\nassert solution('1\\n1\\n1\\n1\\n1\\n') == '6'\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\nassert solution(\"1\\n234\\n12\\n456\\n78\") == \"2\\n3\\n2\\n4\\n3\"\nassert solution(\"2\\n234\\n12\\n456\\n78\") == \"1\\n2\\n2\\n2\\n3\"\n\nprint(\"Well done!\")\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1\\n2\\n3\\n4\\n5\") == \"1\\n3\\n2\\n3\\n2\\n1\"\nassert solution(\"1\\n3\\n4\\n5\\n6\\n7\") == \"1\\n3\\n2\\n4\\n2\\n3\"\nassert solution(\"2\\n3\\n4\\n5\\n6\\n7\\n8\") == \"3\\n2\\n3\\n3\\n3\\n2\\n3\"\nassert solution(\"2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\") == \"3\\n3\\n3\\n3\\n3\\n2\\n4\\n2\\n4\"\n\n\"\"\""
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\nprint(solution(\"5\\n314\\n1\\n5926\\n5\\n35897\"))\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n314\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\n\"\"\"\n\nimport sys\nimport math\n\nn = int(sys.stdin.readline())\nfor _ in range(n):\n    sys.stdout.write(str(math.ceil(math.log10(int(sys.stdin.readline())))) + '\\n')\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n314\n1\n5926\n5\n35897\n\"\"\") == \"\"\"\n3\n1\n4\n1\n5\n\"\"\"\nprint(solution(\"\"\"\n5\n314\n1\n5926\n5\n35897\n\"\"\"))\nassert solution(\"\"\"\n5\n4\n3\n1\n5\n\"\"\") == \"\"\"\n3\n1\n4\n1\n5\n\"\"\"\nprint(solution(\"\"\"\n5\n4\n3\n1\n5\n\"\"\"))\n\n\"\"\"\nProblem Statement\nMary is a teacher in a middle school and wants to determine how many children there are per class. She records each child's height, and finds the median height for the class.\n\nFor the class, she has recorded the heights of 5 children. If the heights were [1, 3, 5, 2, 4], the median would be 3, since the second and third heights (3 and 2) are higher than the first (1) and the fourth (4) heights.\n\nMary wants you to write a program that can compute the median of a set of numbers.\n\nInput\nThe input to the function/method consists of one line containing a single integer n. The next line contains n integers, each an individual height.\n\nOutput\nOutput one line containing the median of the numbers.\n\nConstraints\n1 <= n <= 1000\n1 <= heights[i] <= 1000\n\nExamples\nInput\n5\n1\n3\n5\n2\n4\n\nOutput\n3\n\nExplanation\nThe heights of each student in the class are 1, 3, 5, 2, and 4.\n\nTheir heights are [1, 3, 5, 2, 4]. The median is 3.\n\n\"\"\"\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\") == \"2\"\nassert solution(\"5\\n35897\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\""
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\n\"\"\""
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9 5\\nc t\\ni r\\nk p\\no c\\r o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of') == 'yes\\nno\\nno\\nyes\\nyes\\n'\nassert solution('9 5\\nk p\\no c\\r o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of') == 'no\\nyes\\nno\\nyes\\n'\n\n\"\"\""
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 5\\n\"\n        \"c t\\n\"\n        \"i r\\n\"\n        \"k p\\n\"\n        \"o c\\n\"\n        \"r o\\n\"\n        \"t e\\n\"\n        \"t f\\n\"\n        \"u h\\n\"\n        \"w p\\n\"\n        \"we we\\n\"\n        \"can the\\n\"\n        \"work people\\n\"\n        \"it of\\n\"\n        \"out the\\n\") == \"yes\\n\" * 9 + \"no\\n\" * 4 + \"yes\\n\" * 5\nprint(solution(\"9 5\\n\"\n        \"c t\\n\"\n        \"i r\\n\"\n        \"k p\\n\"\n        \"o c\\n\"\n        \"r o\\n\"\n        \"t e\\n\"\n        \"t f\\n\"\n        \"u h\\n\"\n        \"w p\\n\"\n        \"we we\\n\"\n        \"can the\\n\"\n        \"work people\\n\"\n        \"it of\\n\"\n        \"out the\\n\"))\n\nassert solution(\"9 5\\n\"\n        \"c t\\n\"\n        \"i r\\n\"\n        \"k p\\n\"\n        \"o c\\n\"\n        \"r o\\n\"\n        \"t e\\n\"\n        \"t f\\n\"\n        \"u h\\n\"\n        \"w p\\n\"\n        \"we we\\n\"\n        \"can the\\n\"\n        \"work people\\n\"\n        \"it of\\n\"\n        \"out the\\n\") == \"yes\\n\" * 9 + \"no\\n\" * 4 + \"yes\\n\" * 5\nprint(solution(\"9 5\\n\"\n        \"c t\\n\"\n        \"i r\\n\"\n        \"k p\\n\"\n        \"o c\\n\"\n        \"r o\\n\"\n        \"t e\\n\"\n        \"t f\\n\"\n        \"u h\\n\"\n        \"w p\\n\"\n        \"we we\\n\"\n        \"can the\\n\"\n        \"work people\\n\"\n        \"it of\\n\"\n        \"out the\\n\"))\n\nassert solution(\"9 5\\n\"\n        \"c t\\n\"\n        \"i r\\n\"\n        \"k p\\n\"\n        \"o c\\n\"\n        \"r o\\n\"\n        \"t e\\n\"\n        \"t f\\n\"\n        \"u h\\n\"\n        \"w p\\n\"\n        \"we we\\n\"\n        \"can the\\n\"\n        \"work people\\n\"\n        \"it of\\n\"\n        \"out the\\n\") == \"yes\\n\" * 9 + \"no\\n\" * 4 + \"yes\\n\" * 5\nprint(solution(\"9 5\\n\"\n        \"c t\\n\"\n        \"i r\\n\"\n        \"k p\\n\"\n        \"o c\\n\"\n        \"r o\\n\"\n        \"t e\\n\"\n        \"t f\\n\"\n        \"u h\\n\"\n        \"w p\\n\"\n        \"we we\\n\"\n        \"can the\\n\"\n        \"work people\\n\"\n        \"it of\\n\"\n        \"out the\\n\"))\n\nassert solution(\"9 5\\n\"\n        \"c t\\n\"\n        \"i r\\n\"\n        \"k p\\n\"\n        \"o c\\n\"\n        \"r o\\n\"\n        \"t e\\n\"\n        \"t f\\n\"\n        \"u h\\n\"\n        \"w p\\n\"\n        \"we we\\n\"\n        \"can the\\n\"\n        \"work people\\n\"\n        \"it of\\n\"\n        \"out the\\n\") == \"yes\\n\" * 9 + \"no\\n\" * 4 + \"yes\\n\" * 5\nprint(solution(\"9 5\\n\"\n        \"c t\\n\"\n        \"i r\\n\"\n        \"k p\\n\"\n        \"o c\\n\"\n        \"r o\\n\"\n        \"t e\\n\"\n        \"t f\\n\"\n        \"u h\\n\"\n        \"w p\\n\"\n        \"we we\\n\"\n        \"can the\\n\"\n        \"work people\\n\"\n        \"it of\\n\"\n        \"out the\\n\"))\n\nassert solution(\"9 5\\n\"\n        \"c t\\n\"\n        \"i r\\n\"\n        \"k p\\n\"\n        \"o c\\n\"\n        \"r o\\n\"\n        \"t e\\n\"\n        \"t f\\n\"\n        \"u h\\n\"\n        \"w p\\n\"\n        \"we we\\n\"\n        \"can the\\n\"\n        \"work people\\n\"\n        \"it of\\n\"\n        \"out the\\n\") == \"yes\\n\" * 9 + \"no\\n\" * 4 + \"yes\\n\" * 5\nprint(solution(\"9 5\\n\"\n        \"c t\\n\"\n        \"i r\\n\"\n        \"k p\\n\"\n        \"o c\\n\"\n        \"r o\\n\"\n        \"t e\\n\"\n        \"t f\\n\"\n        \"u h\\n\"\n        \"w p\\n\"\n        \"we we\\n\"\n        \"can the\\n\"\n        \"work people\\n\"\n        \"it of"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 5\\n'\n'c t\\n'\n'i r\\n'\n'k p\\n'\n'o c\\n'\n'r o\\n'\n't e\\n'\n't f\\n'\n'u h\\n'\n'w p\\n'\n'we we\\n'\n'can the\\n'\n'work people\\n'\n'it of\\n'\n'out the') == 'yes\\n' +\n'no\\n' +\n'no\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes\\n' +\n'yes"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\n t f\\n u h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the') == 'yes'\nassert solution('9 5\\nk p\\no c\\nr o\\nt e\\n t f\\n u h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the') == 'no'\nassert solution('9 5\\nk p\\no c\\nr o\\nt e\\n t f\\n u h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the') == 'no'\n\n-------"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\\n\") == \"yes\\nno\\nno\\nyes\\nyes\\n\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 5\\nc t\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of') == 'yes'\nassert solution('9 5\\nf e\\ni n\\nt g\\nh e\\nj a\\ns r\\nk i\\nk i\\nk i\\nn i\\nk i') == 'no'"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''9 5\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the''') == '''yes\nno\nno\nyes\nyes\nyes'''\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 5\\nc\\tr\\ti\\r\\tk\\pp\\oco\\r\\to\\te\\t\\tf\\t\\tu\\th\\wp\\twwe\\can\\tthe\\work\\npeople\\it\\of\") == \"yes\"\nassert solution(\"9 5\\nc\\tr\\ti\\r\\k\\pp\\oco\\r\\to\\te\\t\\tf\\t\\tu\\th\\wp\\twwe\\can\\tthe\\work\\npeople\\it\\of\") == \"no\"\n\n\"\"\""
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"9 5\\nc\\ti\\nk\\po\\nr\\ot\\nt\\te\\n\\tf\\nu\\hw\\wp\\we\\ncan\\the\\nwork\\people\\nit\\of\\nout\\tthe\"\n) == \"yes\\nno\\nno\\nyes\\nyes\"\n\"\"\"\n\nfrom typing import List\nimport re"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'a'\nassert solution('abc') == 'a'\nassert solution('a b') == 'a b'\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\ncarrots?\\nbunnies') == '1\\n'\nassert solution('2 1\\ncarrots?\\nbunnies') == '1\\n'\nassert solution('2 1\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies') == '2\\n'\nassert solution('2 2\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies') == '2\\n'\nassert solution('2 2\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies') == '2\\n'\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\ncarrots?\\nbunnies\") == \"1\"\nassert solution(\"5\\ncarrots?\\nbunnies\\nbunnies\\nbunnies\\nbunnies\") == \"6\"\nassert solution(\"1\\ncarrots?\\ncarrots?\\ncarrots?\\ncarrots?\\ncarrots?\\nbunnies\") == \"8\"\n\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('carrots?\\nbunnies') == 1\n\n-----Problem-----\nThere are $n_1,n_2,\\dots,n_k$ number of contestants in a contest. You are given a description of each contestant. Each description is a sequence of words (no spaces) that describes that contestant. Your task is to find the number of carrots that will be handed out during the contest.\n\nNote: the descriptions will always be correct and the number of contestants will always be equal to or larger than the number of descriptions.\n\n-----Solution-----\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == 1\n\n\"\"\""
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == 1\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Any, Dict, List, TextIO, Tuple\n\nclass Contestant:\n    def __init__(self, points: int, description: str) -> None:\n        self.points = points\n        self.description = description\n\n    def __repr__(self) -> str:\n        return f'{self.__class__.__name__}({self.points!r}, {self.description!r})'"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == 1\n\"\"\""
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == 1\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\nprint(solution(\"2 1\\ncarrots?\\nbunnies\"))\n\nassert solution(\"2 1\\ncarrots?\\nbunnies\") == \"2\"\nprint(solution(\"2 1\\ncarrots?\\nbunnies\"))\n\nassert solution(\"2 1\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies\") == \"4\"\nprint(solution(\"2 1\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies\"))\n\nassert solution(\"2 1\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies\") == \"8\"\nprint(solution(\"2 1\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies\"))\n\nassert solution(\"2 1\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies\") == \"8\"\nprint(solution(\"2 1\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies\\ncarrots?\\nbunnies\"))"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 1\ncarrots?\nbunnies\nbunnies\ncarrots?''') == '2'\nassert solution('''5 1\ncarrots?\nbunnies\nbunnies\ncarrots?\nbunnies\nbunnies''') == '3'\nassert solution('''2 1\nbunnies\ncarrots?''') == '0'\nassert solution('''5 2\ncarrots?\nbunnies\ncarrots?\ncarrots?\nbunnies''') == '6'\nassert solution('''3 1\ncarrots?\nbunnies\ncarrots?\ncarrots?\ncarrots?\nbunnies''') == '0'\n"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\">++++-+++++<\") == \"White: Kd1,Kf1,Ra1,Rg1,Bc1,Nf1,a2,d3,e4,a5,d6,d7,d8,a6,e7,d8,d7,e6,a4,d5,e5,d4,e3,d2,e1,a1,b1,c1,e2,d1\"\nassert solution(\">+++++++++<\") == \"Black: Kd1,Kf1,Ra1,Rg1,Bc1,Nf1,a2,d3,e4,a5,d6,d7,d8,a6,e7,d8,d7,e6,a4,d5,e5,d4,e3,d2,e1,a1,b1,c1,e2,d1\"\nassert solution(\">+---+<\") == \"White: Kd1,Kf1,Ra1,Rg1,Bc1,Nf1,a2,d3,e4,a5,d6,d7,d8,a6,e7,d8,d7,e6,a4,d5,e5,d4,e3,d2,e1,a1,b1,c1,e2,d1\"\nassert solution(\">-+++-<\") == \"Black: Kd1,Kf1,Ra1,Rg1,Bc1,Nf1,a2,d3,e4,a5,d6,d7,d8,a6,e7,d8,d7,e6,a4,d5,e5,d4,e3,d2,e1,a1,b1,c1,e2,d1\"\nassert solution(\">+oo+<\") == \"White: Kd1,Kf1,Ra1,Rg1,Bc1,Nf1,a2,d3,e4,a5,d6,d7,d8,a6,e7,d8,d7,e6,a4,d5,e5,d4,e3,d2,e1,a1,b1,c1,e2,d1\"\n"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\"\"\n\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\"\") == \"\"\"Black: Ke8,Qd"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:::|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"White: Kd1,Qe1,Rf1,Bg1,Bh1,Nf1,Kf1,Kc2,Ng1,a4,c3,d3,Qg2,h3,c3,e4,Bf1,Kd3,Kb1,Nc2,Ra4,Rh1,Nf1,Ng1,a6,b6,b5,Bh1,c4,Qf1,Qe4,Rg2,Kb2,Kc1,Nd2,Rd3,Rh4,Kd4,Kf3,Bg2,Rg1,Qf1,Qf3,a5,Bh3,Kg1,a7,c6,d6,e6,Qe1,Kg1,Kf2,Rc1,a8,d7,Bh2,Rf2,Kg3,Rh5,Kg2,Rf1,Rf4,b8,e5,Qg1,Qf2,Qf4,Qf3,Qe2,Bh4,c5,Kf2,a5,d3,Nf2,Nf3,Kd3,Kg1,Nf4,Ng4,b7,b6,c6,e7,c7,d7,Qe2,Qe4,b2,b4,c1,d5,Qf2,Qe1,Qf3,d2,d3,Qe3,Rb4,Bf2,c5,d6,e6,Rg2,Rf1,Nf1,a1,b1,c1,c2,b2,d1,e1,c3,a4,e4,Rb3,c4,d4,Qe3,Rb2,Kf1,Rg3,Kg2,Rf1,Nf1,a2,a3,c2,d2,Nf1,Nf3,e3,d4,c4,d5,e5,d6,b7,e7,c7,d7,e8,c8,a8,d8,e7,d6,"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|...|:::|.n.|:::|...|:::|...|:p:|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:::|...|:::|...|:::|...|:::|...|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|...|:::|...|:::|.P.|:::|...|:::|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:P:|...|:::|...|:::|...|:::|...|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\"\n    \"|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n\"\n    \"+---+---+---+---+---+---+---+---+\\n\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n)\n\n\"\"\"\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u043e\u0434\u0443\u043b\u044f itertools\n\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u0432\u0430 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u0430:\nitertools.cycle() - \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0434\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 \u0438\u0442\u0435\u0440\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430;\nitertools.chain() - \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 \u0438\u0442\u0435\u0440\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u043f\u043e\u043a\u0430 \u043e\u043d \u043d\u0435 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u0442\u0441\u044f.\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u043e\u0434\u0443\u043b\u044f itertools \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0438"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\n\nclass ChessBoard:\n    def __init__(self, width=8, height=8):\n        self.width = width\n        self.height = height\n        self.cells = []\n        for y in range(height):\n            row = []\n            for x in range(width):\n                row.append(0)\n            self.cells.append(row)\n\n    def __str__(self):\n        ret = \"\"\n        for row in self.cells:\n            for cell in row:\n                ret += str(cell)\n            ret += \"\\n\"\n        return ret\n\n    def set(self, cell, player):\n        if 0 <= cell[0] < self.width and 0 <= cell[1] < self.height:\n            self.cells[cell[1]][cell[0]] = player\n\n    def set_from_str(self, string):\n        data = string.split(\"\\n\")\n        for y, row in enumerate(data):\n            for x, cell in enumerate(row):\n                self.cells[y][x] = cell\n\n    def neighbors(self, cell):\n        return [(cell[0] + 1, cell[1]),\n                (cell[0] - 1, cell[1]),\n                (cell[0], cell[1] + 1),\n                (cell[0], cell[1] - 1)]\n\n    def neighbors_with_valid_steps(self, cell, player):\n        neighbors = self.neighbors(cell)\n        valid_neighbors = []\n        for neighbor in neighbors:\n            if self.cells[neighbor[1]][neighbor[0]] == 0:\n                valid_neighbors.append(neighbor)\n        return valid_neighbors\n\n    def get_neighbor(self, cell, direction):\n        neighbors = self.neighbors(cell)\n        for neighbor in neighbors:\n            if neighbor[0] == direction[0] and neighbor[1] == direction[1]:\n                return neighbor\n        return None\n\n    def possible_moves(self, cell, player):\n        moves = []\n        neighbors = self.neighbors_with_valid_steps(cell, player)\n        for neighbor in neighbors:\n            neighbor_neighbors = self.neighbors_with_valid_steps(neighbor, player)\n            for neighbor_neighbor in neighbor_neighbors:\n                if self.cells[neighbor_neighbor[1]][neighbor_neighbor[0]] == 0:\n                    moves.append(neighbor_neighbor)\n        return moves\n\n    def is_possible_move(self, cell, direction, player):\n        next_cell = self.get_neighbor(cell, direction)\n        if next_cell is None:\n            return False\n        moves = self.possible_moves(next_cell, player)\n        return len(moves)!= 0\n\n    def is_valid_move(self, cell, direction, player):\n        next_cell = self.get_neighbor(cell, direction)\n        if next_cell is None:\n            return False\n        if self.cells[next_cell[1]][next_cell[0]]!= 0:\n            return False\n        moves = self.possible_moves(cell, player)\n        if next_cell not in moves:\n            return False\n        return True\n\n    def do_move(self, cell, direction, player):\n        if self.is_valid_move(cell, direction, player):\n            next_cell = self.get_neighbor(cell, direction)\n            self.cells[next_cell[1]][next_cell[0]] = player\n            self.cells[cell[1]][cell[0]] = 0\n            return True\n        return False\n\n    def all_possible_moves(self, player):\n        moves = []\n        for x in range(self.width"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n''') == '''\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n'''\nassert solution('''\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n''') == '''\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nKe8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"Ke1,Qd1,Ra1,Rh1"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\"\"\n\nassert solution(\"\"\"+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\n\n+---+---+---+---+---+---+---+---+\n|r.|q.|k.|b.|n.|r.|.n.|n.|r.|\n+---+---+---+---+---+---+---+---+\n|.k.|.q.|.b.|.n.|.r.|.n.|.n.|.r.|\n+---+---+---+---+---+---+---+---+\n|.b.|.k.|.q.|.b.|.n.|.r.|.n.|.n.|.r.|\n+---+---+---+---+---+---+---+---+\n|.n.|.n.|.n.|.n.|.n.|.n.|.n.|.n.|\n+---+---+---+---+---+---+---+---+\n|.r.|.q.|.k.|.b.|.n.|.r.|.n.|.n.|.r.|\n+---+---+---+---+---+---+---+---+\n|.n.|.n.|.n.|.n.|.n.|.n.|.n.|.n.|\n+---+---+---+---+---+---+---+---+\n|P.|P.|P.|P.|P.|P.|P.|P.|P.|P.|\n+---+---+---+---+---+---+---+---+\n|P.|P.|P.|P.|P.|P.|P.|P.|P.|P.|\n+---+---+---+---+---+---+---+---+\n|P.|P.|P.|P.|P.|P.|P.|P.|P.|P.|\n+---+---+---+---+---+---+---+---+\n|P.|P.|P.|P.|P.|P.|P.|P.|P.|P.|\n+---+---+---+---+---+---+---+---+\n|.P.|.P.|.P.|.P.|.P.|.P.|.P.|.P.|\n+---+---+---+---+---+---+---+---+\n|.P.|.P.|.P.|.P.|.P.|.P.|.P.|.P.|\n+---+---+---+---+---+---+---+---+\n|.P.|.P.|.P.|.P.|.P.|.P.|.P.|.P.|\n+---+---+---+---+---+---+---+---+\n|.P.|.P.|.P.|.P.|.P.|.P.|.P.|.P.|\n+---+---+---+---+---+---+---+---+\n|.P.|.P.|.P.|.P.|.P.|.P.|.P.|.P.|\n+---+---+---+---+---+---+---+---+\n|Ki|.P.|.P.|.P.|.P.|.P.|.P.|.P.|\n+---+---+---+---+---+---+---+---+\n|.P.|.P.|.P.|.P.|.P.|.P.|.P.|.P.|\n+---+---+---+---+---+---+---+---+\n|.P.|.P.|.P.|.P.|.P.|.P.|.P.|.P.|\n+---+"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n''') == '''\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n'''\nassert solution('''\n.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n''') == '''\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('10 10') == 'You will become a flying monkey!'\n\"\"\""
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('8 5') == 'You will become a flying monkey!'\nassert solution('4 5') == 'Your wish is granted!'\nassert solution('4 6') == 'You will become a flying monkey!'\nassert solution('8 7') == 'You will become a flying monkey!'\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'You will become a flying monkey!'\nassert solution('1 1') == 'You will become a flying monkey!'\nassert solution('6 6') == 'Your wish is granted!'\nassert solution('3 2') == 'You will become a flying monkey!'\nassert solution('4 4') == 'Your wish is granted!'\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('7 5') == 'You will become a flying monkey!'\nassert solution('1 1') == 'Your wish is granted!'\nassert solution('4 4') == 'You will become a flying monkey!'\nassert solution('1 10') == 'You will become a flying monkey!'\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2') == 'Your wish is granted!'\nassert solution('5 3') == 'You will become a flying monkey!'\n\nassert solution('6 5') == 'Your wish is granted!'\nassert solution('6 6') == 'You will become a flying monkey!'\n\nassert solution('6 8') == 'You will become a flying monkey!'\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\nassert solution(\"8 4\") == \"You will become a flying monkey!\"\n\n\"\"\"\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"Your wish is granted!\"\nassert solution(\"8 1\") == \"You will become a flying monkey!\"\n\"\"\"\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\nassert solution(\"10 1\") == \"You will become a flying monkey!\"\n\"\"\"\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('8 4') == 'You will become a flying monkey!'\nassert solution('6 5') == 'You will become a flying monkey!'\nassert solution('6 6') == 'Your wish is granted!'\n\"\"\""
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\">1,3,4,7,10,2,5,9\") == \"Your wish is granted!\"\n\"\"\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"16\") == 16\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"16\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"16\") == 16\n\"\"\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('16') == 16\n\n\"\"\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(16) == 16\nprint(solution(16))\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('16') == 16\n\"\"\"\n\na = int(input())\n\nprint(a)\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(16) == 16\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('16') == '16'\n\"\"\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('16') == '16'\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"16\") == \"16\"\nassert solution(\"4\") == \"10\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n100\\n200') == '0'\nassert solution('2\\n200\\n200') == '1'\nassert solution('3\\n200\\n200\\n200') == '2'\nassert solution('4\\n200\\n200\\n200\\n200') == '3'\nassert solution('5\\n200\\n200\\n200\\n200\\n200') == '4'\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20') == '4'\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''6 180\n45 30 55 20 80 20''') == '4'"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 10\\n4 5 6 7 8 9') == '7'\n\n\"\"\"\n\n\"\"\"\n\n@Kuznetsova\n\"\"\"\n\nfrom sys import stdin\n\nn, T = [int(x) for x in stdin.readline().split()]\ntimes = [int(x) for x in stdin.readline().split()]\n\ncompleted = 0\nfor i in range(n):\n    if times[i] > T:\n        completed += 1\nprint(n - completed)\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20') == '4'\nassert solution('6 180\\n2 2 2 2 2 2') == '5'\n\"\"\""
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''6 180\n45 30 55 20 80 20''') == '4'\n\n----------------------------------------------------"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 180\\n1 2 3 4\") == \"4\"\nassert solution(\"6 180\\n1 2 3 4 5 6\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20') == '4'\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\"\"\""
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\nprint(solution(\"4\\n21\\n34\\n18\\n9\"))\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == '79'\n\n-------------\nSample Input:\n3\n18\n19\n29\nSample Output:\n32\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\n\"\"\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\n\nprint(solution('4\\n21\\n34\\n18\\n9'))\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\nprint(\"Well done!\")\n\n--------------------------------------------------------------------------------------------------------------------------\n\nIf you\u2019ve done the problem once, you\u2019ve probably already seen the solution. It can be found here:\n\nhttps://www.codewars.com/kata/5839d8c8dfd60f8f8e0000ac\n\nand by this article:\n\nhttps://www.codewars.com/kata/5839d8c8dfd60f8f8e0000ac/solutions/python\n\nNote that this solution is written in Python.\n\nYou don\u2019t need to solve the problem by coding in Java/Python/Ruby/etc. You can write any language you can think of.\n\nTo solve it, you will need to use a loop in the right place.\n\nThe input can contain any number of steel rods, the last of which must be the jumbo one. There are three possible things to do:\n\nfuse them together and get the length minus 1cm\nremove the two longest steel rods\nremove the last steel rod\n\nLet\u2019s check the solution:\n\nimport math"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\nassert solution('1\\n1') == '2'\nassert solution('2\\n2') == '4'\nassert solution('3\\n3') == '9'\nassert solution('2\\n9') == '10'\n\"\"\""
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a\\nb') == 'a\\nb'\nassert solution('a\\n  \\t  b') == 'a\\n  \\t  b'\nassert solution('a\\n\\tb') == 'a\\n\\tb'\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\"\"\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '5'\nassert solution('4') == '11'\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '''5 3 3 4\n0 1 4''') == '2 3 0'\nprint('Test pass.')\n\nSample Input:\n5 1 3 4\n0\nSample Output:\nimpossible\n'''\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 2 3\\n0 1 2 3 4\") == \"4\"\n\"\"\"\n\nimport sys\nimport random\nimport itertools\nfrom collections import Counter"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\nassert solution(\"5 5 4 3\\n0 1 2 3 4\") == \"2 2 3 0\"\nassert solution(\"5 2 2 3\\n0 1 1\") == \"impossible\"\n\"\"\"\n\nfrom fractions import Fraction\nfrom itertools import accumulate\nfrom math import ceil\nimport sys"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == '2 3 0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5 3 3 4\n0 1 4\n''') == '''\n2 3 0\n'''\n\nassert solution('''\n5 3 3 4\n0 1 4\n''') == '''\nimpossible\n'''\n\nassert solution('''\n5 3 3 4\n0 1 4\n''') == '''\nimpossible\n'''\n\nassert solution('''\n5 3 3 4\n0 0 0 0\n''') == '''\n3 1 0\n'''\n\nassert solution('''\n5 2 3 4\n0 0 1 2\n''') == '''\n2 2 0\n'''"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n\n-----Explanation-----\nThe students will get a cold soda in the following ways:\n- Student 1 gets a cold soda in slot 1 (3 bottles in total)\n- Student 2 gets a cold soda in slot 3 (3 bottles in total)\n- Student 3 gets a cold soda in slot 4 (2 bottles in total)\n- Student 4 gets a cold soda in slot 4 (2 bottles in total)\n\nThe maximum number of slots the students will get cold soda in is 3.\n\"\"\"\nfrom random import randint\nfrom itertools import chain\nfrom typing import List"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\n\"\"\"\n\nimport sys\nimport math\nfrom collections import deque\nfrom random import randint\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\nassert solution('5 3 3 4\\n0 1 4\\n0 1 4') == '2 3 0'\nassert solution('5 3 3 4\\n0 1 4\\n0 1 4\\n0 1 4') == 'impossible'\nassert solution('5 3 3 4\\n0 1 4\\n0 1 4\\n0 1 4\\n0 1 4') == 'impossible'\n\nSample Output:\n5 2 3\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3\n4 3 1\n4 1 0\n4 3 1\n4 1 0\n4 3 1\n5 2 3"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nimport random"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1 1 1') == '1 1 1 1 1 1'\nassert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nassert solution('0 1 2 2 2 7 -1') == '0 0 0 0 0 1'\nassert solution('0 1 2 2 2 7 -2') == '0 0 0 0 0 1'\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"1 1 1 1 1 1\") == \"0 0 0 0 0 0\"\nassert solution(\"8 8 8 8 8 8\") == \"0 0 0 0 0 0\"\n\"\"\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\n\"\"\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 0 0 0 0 0\") == \"0 0 0 0 0 0\"\nassert solution(\"1 1 1 1 1 1\") == \"0 0 0 0 0 0\"\nassert solution(\"0 1 1 1 1 1\") == \"1 0 0 0 0 0\"\nassert solution(\"1 1 1 1 1 1\") == \"0 0 0 0 0 0\"\n\"\"\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''0 1 2 2 2 7''') == '1 0 0 0 0 1'\nassert solution('''0 0 0 0 0 0''') == '0 0 0 0 0 0'\nassert solution('''0 0 0 0 0 1''') == '0 0 0 0 0 1'\nassert solution('''0 0 1 2 2 2''') == '1 0 0 0 0 1'\nassert solution('''0 1 0 0 0 0''') == '0 1 0 0 0 0'\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\n\n---\n\"\"\"\n\nfrom __future__ import annotations\nfrom typing import List\nfrom collections import Counter\nimport sys\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\n\"\"\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nassert solution('0 1 2 3 4 0') == '1 0 0 0 0 0'\n\"\"\"\n\nfrom typing import List, Any\nimport sys"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nprint(solution('0 1 2 2 2 7'))\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nprint(solution(stdin))\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == '1.3334'\n\"\"\"\n\nimport numpy as np\nfrom math import *\nimport numpy as np\nimport sys\nfrom itertools import *"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\\n\") == \"1.3334\"\nprint(\"Test pass.\")"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\nassert solution(\"5\\nqwerty 0.3334\\nqwerty 0.3334\\nqwerty 0.3334\\nqwerty 0.3334\\nqwerty 0.3334\") == \"0.0\"\nassert solution(\"5\\nqwerty 0.3334\\n123456 0.6666\\nqwerty 0.3334\\nqwerty 0.3334\\nqwerty 0.3334\") == \"0.3333\"\n\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n\nassert solution('2\\nqwerty 0.3334\\n123456 0.6666') == '1.3334'\n\nassert solution('1\\nqwerty 0.3334') == '1.3334'\n\nassert solution('0\\nqwerty 0.3334') == '0.3334'\n\nassert solution('1\\n123456 0.6666') == '1.3334'"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\n\"\"\"\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == '1.3334'"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == '1.3334'\n\n* CodeWars test case\n\n    assert solution(\"1\\n123456 0.6666\\nqwerty 0.3334\") == '1.3334'\n    assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == '1.3334'\n    assert solution(\"3\\n123456 0.6666\\nqwerty 0.3334\") == '1.3334'\n    assert solution(\"4\\n123456 0.6666\\nqwerty 0.3334\") == '1.3334'\n    "
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\n\"\"\"\n\nimport math\nimport collections"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 4') == '1'\nassert solution('10 20 30 40 50') == '10'\nassert solution('1 2 3 4 5 6') == '1'\nassert solution('10 20 30 40 50 60') == '10'\nassert solution('0 1 2 3 4 5 6 7 8 9 10') == '0'\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1\\n2 3 4') == '1'\n\"\"\"\nfrom math import ceil\nfrom typing import List\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2 3 4\") == \"1\"\n\"\"\"\n\nfrom typing import List\nimport sys"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n1 2 4\") == \"1\"\n\"\"\"\nimport sys\n\nn, p = [int(x) for x in sys.stdin.readline().split()]\n\ndists = [int(x) for x in sys.stdin.readline().split()]\n\nmin_dist = [0] * n\n\nfor i in range(n):\n    min_dist[i] = p * dists[i]\n    for j in range(i):\n        min_dist[i] = min(min_dist[i], min_dist[j] + p * dists[i])\n\nprint(min_dist[-1])\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n2 3 4 1\") == \"3\"\nassert solution(\"5 1\\n1 2 3 4 5\") == \"5\"\nassert solution(\"1 1\\n1\") == \"1\"\nassert solution(\"5 2\\n3 4 5 1 2\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 4') == 1\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('1') == '1'\nassert solution('1 2 3') == '3'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") ==\n\"\"\"\nG:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:\ng: -----------------------------------------------*----------\nf:                                                 *        \ne: ----------------------------------------------------------\nd:                                                 *        \nc:                                                 *        \nb:                                                 *        \na: ----------------------------------------------------------\n\"\"\"\n\n\"\"\"\n\n------Explanation------\n\nI: number of notes in the song\nJ: list of notes\nK: for each note in J, I: pitch\nL: for each note in J, I: duration\n\n\"\"\""
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:                   \nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n\nSample Input:\n1\nA\nSample Output:\nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \nA:       \n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:\\t*\\tF: -------------------------------------**\\nE:\\t*\\tE:\\t**\\t*\\t*\\t\\t\\t\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*\\t*\\t**\\t*\\t*\\t\\t*\\t**\\t*"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == \\\n    'G:\\nF:\\nE:       *   *          *             *   *                  \\nD:\\n' + \\\n    'C: * *     *      * *     **    * *           *         ** **\\nB:\\n' + \\\n    'A:                                                  *        \\ng:\\n' + \\\n    'F:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\n'\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:                                    \\nF: ---------------------------------*--------------------\\nE:       *   *          *             *   *                \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:                                    \\ng: ------------------------------------*----------\\nf:                                    \\ne: ----------------------------------------------------------\\nd:                                    \\nc:                                    \\nb:                                    \\na: ----------------------------------------------------------'\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"27\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\n\"\"\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\"[1:]\nprint(solution(stdin))\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:\\\nF:\\\nE:\\\nD:\\\nC:\\\nB:\\\nA:\\\ng:\\\nf:\\\ne:\\\nd:\\\nc:\\\nb:\\\na:\\\n>>> for line in solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2'):\n...    print(line)\nG:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA: \ng: -----------------------------------------------*----------\nf:\ne: ----------------------------------------------------------\nd:\nc:\nb:\na: ----------------------------------------------------------\n\n>>> print(solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2'))\nG:\\\nF: -------------------------------------*--------------------\nE:\\\nD:\\\nC:\\\nB:\\\nA:\\\ng:\\\nf:\\\ne:\\\nd:\\\nc:\\\nb:\\\na:\\\n>>> for line in solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2'):\n...    print(line, end=\"\")\nG:\\\nF: -------------------------------------*--------------------\nE:\\\nD:\\\nC:\\\nB:\\\nA:\\\ng:\\\nf:\\\ne:\\\nd:\\\nc:\\\nb:\\\na:\\\n>>> solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2')\nTraceback (most recent call last):\n  File \"<pyshell>\", line 1, in <module>\n    solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2')\n  File \"<pyshell>\", line 14, in solution\n    print(line, end=\"\")\nTypeError: end with keyword argument 'end'\n>>> for line in solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2'):\n...     print(line, end='')\nG:\\\nF: -------------------------------------*--------------------\nE:\\\nD:\\\nC:\\\nB:\\\nA:\\\ng:\\\nf:\\\ne:\\\nd:\\\nc:\\\nb:\\\na:\\\n>>> for line in solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2'):\n...     print(line, end=\"\")\nG:\\\nF: -------------------------------------*--------------------\nE:\\\nD:\\\nC:\\\nB:\\\nA:\\\ng:\\\nf:\\\ne:\\\nd:\\\nc:\\\nb:\\\na:\\\n>>> for line in solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2'):\n...     print(line, end='')\nG:\\\nF: -------------------------------------*--------------------\nE:\\\nD:\\\nC:\\\nB:\\\nA:\\\ng:\\\nf:\\\ne:\\\nd:\\\nc:\\\nb:\\\na:\\\n>>> for line in solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2'):\n...     print(line, end=\"\")\nG:\\\nF: -------------------------------------*--------------------\nE:\\\nD:\\\nC:\\\nB:\\\nA:\\\ng:\\\nf:\\\ne:\\\nd:\\\nc:\\\nb:\\\na:\\\n>>> solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2')\nTraceback (most recent call last):\n  File \"<pyshell>\", line 1, in <module>\n    solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2')\n  File \"<pyshell>\", line 14, in solution\n    print(line, end=\"\")\nTypeError: end with keyword argument 'end'\n>>> for line in solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2'):\n...     print(line, end=\"\")\nG:\\\nF: -------------------------------------*--------------------\nE:\\\nD:\\\nC:\\\nB:\\\nA:\\"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:                                                     \nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n    return '\\n'.join(map(''.join, zip(*[''.join(\n        ['*' * (len(line) // 2 + 1) +'' * (len(line) % 2) for line in zip(*[line.strip() for line in stdin.split('\\n')])]\n    )))\n))\n\nassert solution('3\\nC D E F C B A g A B C2 C2') == 'G:                                                      \nF: -------------------------------------*--------------------\nE:       *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n    return '\\n'.join(map(''.join, zip(*[''.join(\n        ['*' * (len(line) // 2 + 1) +'' * (len(line) % 2) for line in zip(*[line.strip() for line in stdin.split('\\n')])]\n    )))\n))\n\nassert solution('3\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:                                                      \nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n    return '\\n'.join(map(''.join, zip(*[''.join(\n        ['*' * (len(line) // 2 + 1) +'' * (len(line) % 2) for line in zip(*[line.strip() for line in stdin.split('\\n')])]\n    )))\n))\n\nassert solution('3\\nA B C2 C2') == 'G:                                                      \nF: -------------*--------------------\nE:       *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC:        *      *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n    return '\\n'.join(map(''.join, zip(*[''.join(\n        ['*' * (len(line) // 2 + 1) +'' * (len(line) % 2) for line in zip(*[line.strip() for line in stdin.split('\\n')])]\n    )))\n))\n\nassert solution('3\\nA C B2 C2') == 'G:                                                      \nF: -------------*--------------------\nE:       *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC:        *      *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n    return '\\n'.join(map(''.join, zip(*[''.join(\n        ['*' * (len(line) // 2 + 1) +'' * (len(line) % 2) for line in zip(*[line.strip() for line in stdin.split('\\n')])]\n    )))\n))"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\"\n\nassert solution(\"40\\nF A G E G F A D A G F E G E A B A A B E G F A G D\") == \"\"\"G:\nF:                *            *             *   *                  \nD: -----*-------------*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\"\n\nassert solution(\"99\\n
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('3\\n2 1 2') == 'possible'\nassert solution('3\\n2 2 2') == 'possible'\nassert solution('3\\n3 1 2') == 'possible'\nassert solution('3\\n3 2 2') == 'possible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"7\\n1 1 1 2 1 2 1\") == \"possible\"\nassert solution(\"7\\n1 1 2 1 2 1 2\") == \"possible\"\nassert solution(\"7\\n1 2 1 2 1 2 1\") == \"possible\"\nassert solution(\"7\\n1 1 1 1 1 2 1\") == \"possible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('3\\n1 1 2') == 'possible'\nassert solution('3\\n1 2 2') == 'possible'\nassert solution('3\\n2 1 2') == 'possible'\nassert solution('3\\n2 2 1') == 'possible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1 1\") == 'possible'\nassert solution(\"3\\n2 1 2\") == 'possible'\nassert solution(\"3\\n3 1 1\") == 'possible'\nassert solution(\"3\\n3 2 1\") == 'possible'\nassert solution(\"3\\n4 1 1\") == 'impossible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\n\n\"\"\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('3\\n2 1 2') == 'impossible'\nassert solution('3\\n1 3 2') == 'possible'\nassert solution('3\\n2 3 1') == 'impossible'\nassert solution('3\\n3 1 2') == 'possible'\n\n\"\"\"\nimport math\n\nN = int(input())\n\nsticks = input().split()\n\ncount = 0\n\nfor i in sticks:\n    count += int(i)"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"7\\n1 1 1 2 3 4 5 6\") == \"possible\"\nassert solution(\"7\\n1 1 1 2 3 4 5 6\") == \"possible\"\nassert solution(\"2\\n1 1\") == \"impossible\"\nassert solution(\"3\\n1 1 1\") == \"impossible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 1\\n') == 'possible'\nassert solution('3 1 2\\n') == 'possible'\nassert solution('3 1 2 1\\n') == 'possible'\nassert solution('3 1 3\\n') == 'possible'\nassert solution('3 1 1\\n') == 'possible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('1\\n1') == 'impossible'\nassert solution('5\\n1 1 2 3 4') == 'impossible'\nassert solution('7\\n1 1 1 2 2 2') == 'possible'\nassert solution('6\\n1 1 2 3 4 5') == 'impossible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\") == \"possible\"\nassert solution(\"3 1 2\") == \"impossible\"\nassert solution(\"10 1 10\") == \"impossible\"\nassert solution(\"1 2 3\") == \"impossible\"\nassert solution(\"4 1 2\") == \"possible\"\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 3 2 1 2 2 1 1 3') == 3\n\"\"\"\n\nfrom collections import deque\n\nn = int(input())\nsequence = list(map(int, input().split()))\nstack = deque()\n\nfor i in range(n):\n    if len(stack) == 0:\n        stack.append(i)\n    elif stack[-1] > sequence[i]:\n        stack.append(i)\n\nprint(len(stack))"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 3 2 1 2 2 1 1 3\") == 3\n\nimport math"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == 3\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n2\n2\n3\n1\n4''') == '''2\n2\n1\n1\n0\n0\n0\n1\n1\n1\n1\n1\n1\n2\n2\n1\n1\n1\n2\n2\n1\n2\n0\n2\n1\n0\n1\n2\n1\n1\n0\n0\n1\n0\n0\n1\n0\n0\n1\n1\n2\n1\n0\n1\n1\n1\n1\n1\n1\n0\n0\n0\n1\n1\n0\n0\n1\n1\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n1\n0\n0\n0\n0\n0\n1\n1\n0\n1\n1\n1\n0\n1\n0\n0\n0\n1\n1\n0\n1\n1\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n1\n0\n0\n1\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3\\n3\\n2\\n1\\n2\\n2\\n1\\n1\\n3') == 3\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 3 2 1 2 2 1 1 3') == 3\n\n\"\"\"\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 3 2 1 2 2 1 1 3\") == 3\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nbricks = list(map(int, sys.stdin.readline().split(' ')))\n\ncount = 0"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''10\n4 3 3 2 1 2 2 1 1 3''') == 3\nprint('Test pass.')\n\n-----\nSample Input:\n5\n4 5 3 2 1 2\nSample Output:\n2\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 3 2 1 2 2 1 1 3\") == 3\n\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n4 3 3 2 1 2 2 1 1 3\n''') == 3\nprint('Test PASSED')\n\n-----\n'''\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE\"\n\n-----------------\n  if __name__ == '__main__':\n    print(solution(input()))"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE\"\nprint(\"test 1 OK\")\n\nassert solution(\"3\\nJOE 0.78 0.01\\nFRED 0.96 0.01\\nMARY 0.20 0.02\") == \"0.35\\nFRED\\nMARY\"\nprint(\"test 2 OK\")\n\nassert solution(\"7\\nDANIEL 0.20 0.04\\nSAM 0.60 0.04\\nLISA 0.30 0.08\\nJOHN 0.15 0.04\\nALBERT 0.55 0.03\\nGEORGE 0.85 0.04\\nCLAUDE 0.65 0.04\") == \"1.15\\nGEORGE\\nALBERT\"\nprint(\"test 3 OK\")"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54'\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\\nCARTER\\nBOLT\\nPOWELL\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nASHSMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nA 9.90 8.85\\nB 9.69 8.72\\nC 9.58 8.43\\nD 9.78 8.93\\nE 9.88 8.92\\nF 9.72 8.61\\n\") == \"35.54\\nC\\nD\\nF\\nA\"\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\\n\") == \"35.54\"\n\n\"\"\""
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8.85\\n9.80\\n9.78\\n9.69\\n9.72\\n9.70\\n9.68\\n9.63\\n9.55\\n9.53\\n9.54\\n9.58\\n9.59\\n9.60\\n9.60\\n9.59\\n9.57\\n9.62\\n9.64\\n9.65\\n9.66\\n9.67\\n9.67\\n9.69\\n9.75\\n9.81\\n9.84\\n9.96\\n10.09\\n10.21\\n10.38\\n10.79\\n10.80\\n10.86\\n10.87\\n10.91\\n10.91\\n10.91\\n10.88\\n10.92\\n10.96\\n10.96\\n10.87\\n10.89\\n10.88\\n10.89\\n10.91\\n10.93\\n10.88\\n10.89\\n10.88\\n10.89\\n10.82\\n10.72\\n10.65\\n10.58\\n10.54\\n10.51\\n10.50\\n10.51\\n10.52\\n10.53\\n10.53\\n10.54\\n10.55\\n10.56\\n10.57\\n10.57\\n10.58\\n10.58\\n10.59\\n10.59\\n10.57\\n10.51\\n10.47\\n10.52\\n10.55\\n10.56\\n10.56\\n10.60\\n10.63\\n10.65\\n10.80\\n10.83\\n10.87\\n10.83\\n10.84\\n10.84\\n10.78\\n10.61\\n10.64\\n10.68\\n10.71\\n10.75\\n10.78\\n10.77\\n10.80\\n10.80\\n10.89\\n10.94\\n10.87\\n10.90\\n10.86\\n10.88\\n10.90\\n10.88\\n10.91\\n10.92\\n10.84\\n10.80\\n10.81\\n10.78\\n10.80\\n10.86\\n10.87\\n10.89\\n10.89\\n10.83\\n10.91\\n10.84\\n10.89\\n10.81\\n10.70\\n10.77\\n10.91\\n10.91\\n10.92\\n10.85\\n10.81\\n10.83\\n10.94\\n10.94\\n10.91\\n10.84\\n10.87\\n10.88\\n10.86\\n10.90\\n10.86\\n10.87\\n10.84\\n10.86\\n10.86\\n10.82\\n10.81\\n10.73\\n10.77\\n10.87\\n10.84\\n10.80\\n10.81\\n10.83\\n10.75\\n10.81\\n10.84\\n10.86\\n10.81\\n10.85\\n10.81\\n10.79\\n10.71\\n10.84\\n10.84\\n10.79\\n10.72\\n10.75\\n10.81\\n10.72\\n10.85\\n10.91\\n10.83\\n10.87\\n10.90\\n10.82\\n10.71\\n10.85\\n10.80\\n10.82\\n10.86\\n10.74\\n10.76\\n10.84\\n10.74\\n10.80\\n10.86\\n10.85\\n10.83\\n10.85\\n10.80\\n10.81\\n10.78\\n10.70\\n10.75\\n10.72\\n10.72\\n10.79\\n10.82\\n10.81\\n10.80\\n10.81\\n10.79\\n10.69\\n10.75\\n10.71\\n10.79\\n10.75\\n10.86\\n10.83\\n10.84\\n10.84\\n10.77\\n10.84\\n10.71\\n10.84\\n10.71\\n10.80\\n10.83\\n10.69\\n10.87\\n10.90\\n10.82\\n10.71\\n10.81\\n10.80\\n10.82\\n10.84\\n10.84\\n10.72\\n10.85\\n10.81\\n10.81\\n10.85\\n10.87\\n10.84\\n10.90\\n10.80\\n10.81\\n10.77\\n10.85\\n10.83\\n10.80\\n10.82\\n10.82\\n10.80\\n10.80\\n10.75\\n10.80\\n10.80\\n10.80\\n10.70\\n10.80\\n10.80\\n10.70\\n10.75\\n10.75\\n10.75\\n10.75\\n10.79\\n10.75\\n10.80\\n10.83\\n10.81\\n10.80\\n10.81\\n10.77\\n10.71\\n10.80\\n10.84\\n10.78\\n10.77\\n10.73\\n10.86\\n10.74\\n10.79\\n10.81\\n10.84\\n10.86\\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54\\nCARTER\\nBOLT\\nPOWELL'\nassert solution('ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54\\nCARTER\\nBOLT\\nPOWELL'\nassert solution('ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54\\nCARTER\\nBOLT\\nPOWELL'\nassert solution('ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54\\nCARTER\\nBOLT\\nPOWELL'\nassert solution('ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54\\nCARTER\\nBOLT\\nPOWELL'\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == 1\nassert solution(\"1 2\\n2 4\") == 2\nassert solution(\"1 2\\n2 4\\n5 6\") == 2\nassert solution(\"1 2\\n2 4\\n5 6\\n6 6\") == 2\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2\n2 4\n5 6''') == 2\n\nassert solution('''3\n1 5\n2 4\n5 6''') == 1\n\nassert solution('''2\n1 2\n2 4''') == 1\n\nassert solution('''3\n4 5\n2 6\n3 7''') == 1\n\nassert solution('''1\n1 2''') == 1"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n2 4\\n5 6\") == \"2\"\nassert solution(\"5\\n1 2\\n2 4\\n5 6\\n7 8\") == \"4\"\nassert solution(\"6\\n1 3\\n2 5\\n7 10\\n8 9\") == \"2\"\n\"\"\""
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n1 2\n2 4\n\"\"\") == \"2\"\nprint(\"All test cases passed.\")\n\n----"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2\\n2 4\\n5 6\") == 2\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 2\n2 4\n5 6\n''') == '2'\nassert solution('''\n3\n4 5\n1 2\n3 4\n5 6\n''') == '1'\nassert solution('''\n1\n2\n''') == '0'\nassert solution('''\n4\n4 4\n1 1\n2 2\n3 3\n''') == '0'\nassert solution('''\n5\n1 1\n5 5\n1 2\n5 6\n1 3\n5 7\n2 1\n3 2\n3 3\n2 2\n4 4\n''') == '4'\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == '2'\n\nassert solution('5\\n5 6\\n7 8\\n9 10\\n9 8\\n9 7') == '1'\n\nassert solution('10\\n9 8\\n7 6\\n4 3\\n6 10\\n9 5\\n3 2\\n7 4\\n9 6\\n6 9\\n9 3\\n8 4\\n5 7\\n6 9\\n6 10\\n5 8\\n4 7\\n2 3\\n3 4\\n7 8\\n10 9\\n8 7\\n7 10\\n4 10\\n6 10\\n3 9\\n5 10\\n4 10\\n8 9\\n7 10\\n6 10\\n3 9\\n4 8\\n10 10\\n5 8\\n6 8\\n3 8\\n3 7\\n7 7\\n8 9\\n3 7\\n3 10\\n10 10\\n4 8\\n4 10\\n7 8\\n8 7\\n2 5\\n5 6\\n7 10\\n10 6\\n5 7\\n7 5\\n6 7\\n8 10\\n2 4\\n4 10\\n7 5\\n10 7\\n3 8\\n5 8\\n6 8\\n2 10\\n7 10\\n10 10\\n10 8\\n10 7\\n9 10\\n7 8\\n7 9\\n6 10\\n8 10\\n9 6\\n6 10\\n4 10\\n7 9\\n5 10\\n10 10\\n6 10\\n10 9\\n3 9\\n4 10\\n7 10\\n6 10\\n4 9\\n9 10\\n4 10\\n8 10\\n5 8\\n9 10\\n3 8\\n3 10\\n4 10\\n10 10\\n4 10\\n10 10\\n3 10\\n9 10\\n5 10\\n5 9\\n2 10\\n4 10\\n10 10\\n5 10\\n7 10\\n5 9\\n2 10\\n5 7\\n8 10\\n5 7\\n9 7\\n5 7\\n6 8\\n6 7\\n7 10\\n5 8\\n5 6\\n4 10\\n5 6\\n4 7\\n7 10\\n9 10\\n8 9\\n4 7\\n7 10\\n8 7\\n8 8\\n7 9\\n3 10\\n7 10\\n10 9\\n3 9\\n7 10\\n5 8\\n9 10\\n9 10\\n3 9\\n4 10\\n10 10\\n5 10\\n7 10\\n9 10\\n6 10\\n4 10\\n8 10\\n3 8\\n3 10\\n4 10\\n3 10\\n10 10\\n3 10\\n10 10\\n10 10\\n10 10\\n6 10\\n3 10\\n3 9\\n3 8\\n3 10\\n3 10\\n4 10\\n3 10\\n4 10\\n4 10\\n5 10\\n2 10\\n10 10\\n3 10\\n10 10\\n6 10\\n5 9\\n3 10\\n3 10\\n3 10\\n7 10\\n10 10\\n7 10\\n2 10\\n10 10\\n9 10\\n6 10\\n2 10\\n5 10\\n10 10\\n10 10\\n2 10\\n8 10\\n2 10\\n10 10\\n5 10\\n7 10\\n4 10\\n5 9\\n4 10\\n6 10\\n2 10\\n5 10\\n2 10\\n5 10\\n10 10\\n4 10\\n5 10\\n10 10\\n3 10\\n4 10\\n10 10\\n2 10\\n8 10\\n10 10\\n3 10\\n3 9\\n3 10\\n4 10\\n5 10\\n6 10\\n6 10\\n4 10\\n6 10\\n7 10\\n7 10\\n4 10\\n7 10\\n2 10\\n10 10\\n5 10\\n7 10\\n8 10\\n8 10\\n4 10\\n10 10\\n7 10\\n5 10\\n5 10\\n4 10\\n7 10\\n4 10\\n8 10\\n3 10\\n5 10\\n10 10\\n5 10\\n3 10\\n3 10\\n6 10\\n6 10\\n10 10\\n3 10\\n3 10\\n4 10\\n3 10\\n10 10\\n10 10\\n7 10\\n7 10\\n10 10\\n5 10\\n7 10\\n5 10\\n4 10\\n7 10\\n10 10\\n3 10\\n3 10\\n4 10\\n4 10\\n4 10\\n10 10\\n6 10\\n6 10\\n10 10\\n4 10\\n6 10\\n4 10\\n7 10\\n2 10\\n3 10\\n5 10\\n2 10\\n6 10\\n5 10\\n6 10\\n3 10\\n5 10\\n8 10\\n5 10\\n3 10\\n4 10\\n3 10\\n4 10\\n6 10\\n2 10\\n3 10\\n4 10\\n5 10\\n2 10\\n7 10\\n7 10\\n4 10\\n6 10\\n10 10\\n3 10\\n3 10\\n4 10\\n3 10\\n10 10\\n6 10\\n5 10\\n6 10\\n6 10\\n5 10\\n3 10\\n3 10\\n2 10\\n2 10\\n10 10\\n3 10\\n3 10\\n6 10\\n10 10\\n5 10\\n10 10\\n7 10\\n10 10\\n7 10\\n3 10\\n2 10\\n5 10\\n10 10\\n2 10\\n2 10\\n5 10\\n5 10\\n3 10\\n2 10\\n2 10\\n4 10\\n5 10\\n10 10\\n6 10\\n5 10\\n2 10\\n4 10\\n3 10\\n4 10\\n3 10\\n3 10\\n5 10\\n3 10\\n4 10\\n3 10\\n3 10\\n3 10\\n3 10\\n3 10\\n2 10\\n3 10\\n3 10\\n3 10\\n4 10\\n3 10\\n2 10\\n6 10\\n5 10\\n2 10\\n5 10\\n3 10\\n3 10\\n4 10\\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2\\n2 4\\n5 6\") == 2"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1 2\n2 4\n5 6''') == '2'\n\"\"\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('4 5\\n1 2\\n3 4') == ''\nassert solution('6 10\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10') == '0'\nassert solution('8 18\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n11 12\\n13 14\\n15 16\\n17 18') == '2'\n\n-------\n1)  The first line of input gives the number of different temperatures.  The second line gives the lowest and the highest temperatures in the intervals.  We need to build as few rooms as possible, and so we first need to consider which intervals are among the lowest temperatures.\n2)  Once we are done with the lowest temperatures, we only need to consider the highest temperatures.\n3)  Thus, the problem reduces to find the number of non-overlapping intervals.\n4)  The answer is the sum of the number of intervals in the first line minus the sum of the number of intervals in the second line.\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('hey') == 'heey'\nassert solution('hello') == 'heeello'\nassert solution('Later!') == 'Alligator!'\nassert solution('hi') == 'hee'\nassert solution('bye') == 'Bee'\n\n\"\"\"\n\nimport math\n\nstdin = input()"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(hey) == heeey\n\n-----Notes-----\nAssume that the input will always be a valid greeting string.\n\"\"\""
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('hey') == 'heey'\nassert solution('hee') == 'heeey'\nassert solution('heyhey') == 'heeeeee'\n\"\"\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"hiee\") == \"heehee\"\nassert solution(\"hi\") == \"hihi\"\nassert solution(\"hi ee\") == \"heehee\"\nassert solution(\"hi ee ee\") == \"heeheeheeee\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('hey') == 'heey'\n\"\"\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"hi\") == \"hee\"\nassert solution(\"hello\") == \"hee\"\nassert solution(\"bye\") == \"bye\"\nassert solution(\"bye\") == \"bye\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"heye\") == \"hee\"\nassert solution(\"hey\") == \"heey\"\nassert solution(\"heyyyy\") == \"heeheee\"\nassert solution(\"heeeeey\") == \"heeeeeee\"\nassert solution(\"heyy\") == \"heeheey\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('hey') == 'heey'\nassert solution('hello') == 'heeelllloo'\nassert solution('hi') == 'hheeelloo'\nassert solution('heyhey') == 'hheeheeellee'\nassert solution('hooly') == 'hooly'\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"hey\") == \"hee\"\n\"\"\"\n\ns = input()\n\nprint(s[0:2] + s[2:4] + s[4:])\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"hey\") == \"hee\"\nassert solution(\"bye\") == \"bbye\"\nassert solution(\"yea\") == \"yeah\"\nassert solution(\"heh\") == \"heh\"\n\n\"\"\""
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0''') == '1 2\\n1 3\\n1 4'\n\"\"\"\n\nfrom collections import defaultdict\n\nN = int(stdin.readline().strip())\n\nroads = defaultdict(list)\n\nfor _ in range(N):\n    road = [int(x) for x in stdin.readline().strip().split()]\n    road = [x for x in road if x!= 0]\n    roads[road[0]].append(road[1])\n    roads[road[1]].append(road[0])\n\nfor i in roads:\n    if i!= 0:\n        for j in roads[i]:\n            roads[j] += roads[i]\n\nfor i in roads:\n    if len(roads[i]) == N - 1:\n        print(i, end=' ')\n        print(min(roads[i]))\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\nassert solution(test_input_4) == test_output_4\n\nprint('all tests passed')\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 1\\n2 3\\n1 3\\n1 2\\n1 2\\n3 2\\n1 3\\n1 4\\n1 4\\n4 2\\n2 2\\n2 2\\n1 1\\n1 3\\n1 3\\n1 2\\n1 2\\n2 3\\n1 1\\n1 2\\n1 4\\n1 4\\n1 2\\n3 2\\n1 3\\n1 4\\n1 4\\n3 2\\n1 3\\n1 2\\n1 2\\n3 2\\n1 2\\n1 3\\n1 4\\n1 4\\n3 2\\n1 3\\n1 2\\n1 4\\n1 4\\n3 2\\n1 3\\n1 2\\n1 4\\n1 4\\n4 2\\n2 2\\n2 2\\n1 1\\n1 3\\n1 3\\n1 2\\n1 2\\n3 2\\n1 1\\n1 4\\n1 4\\n1 4\\n1 3\\n1 3\\n1 4\\n1 4\\n1 2\\n1 3\\n1 4\\n1 4\\n1 2\\n3 2\\n1 1\\n1 2\\n1 4\\n1 4\\n1 4\\n1 2\\n1 2\\n1 2\\n1 3\\n1 4\\n1 4\\n1 2\\n1 4\\n1 4\\n1 4\\n1 4\\n1 3\\n3 2\\n1 4\\n1 4\\n1 4\\n1 3\\n1 4\\n1 4\\n3 2\\n1 3\\n1 4\\n1 4\\n1 2\\n1 3\\n1 4\\n1 4\\n1 4\\n1 4\\n1 3\\n1 4\\n1 4\\n1 4\\n1 2\\n3 2\\n1 2\\n1 3\\n1 4\\n1 4\\n1 4\\n1 3\\n1 4\\n1 4\\n1 3\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\"\n) == \"1 2\\n1 3\\n1 4\"\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\n\nassert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\n\nassert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\n\nassert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\n\nprint('test passed')\n\n----\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1 2'\nassert solution('2 3') == '1 2'\nassert solution('5 2') == '3 4'\n'''"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0''') == '1 2\\n1 3\\n1 4'"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_stdin) == test_solution\nprint(solution(stdin))\n\n-----Solution-----\n\nThe first and second lines of the input are the number of villages and the number of roads, respectively.\n\nLet the number of roads be $n$. For each road, there will be two integers on each line, the distance from one village to the other and the road itself.\n\nThis distance can be considered the weight of that road. The road is an edge in the graph with weight that is equal to that distance.\n\nWe can calculate the graph by creating a weighted graph with roads of weight equal to their distance and edges between the nodes. After that, we can use the Kruskal\u2019s algorithm to find the minimum spanning tree of that graph.\n\"\"\"\n\nimport heapq\nfrom collections import defaultdict\n\n\nclass Solution:\n    def find_parent(self, x):\n        if x!= self.parents[x]:\n            self.parents[x] = self.find_parent(self.parents[x])\n        return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find_parent(x)\n        y = self.find_parent(y)\n        if x!= y:\n            self.parents[x] = y\n            self.count -= 1\n\n    def kruskal(self):\n        \"\"\"\n        :rtype: List[List[int]]\n        \"\"\"\n        graph = defaultdict(list)\n        for u, v, w in self.roads:\n            graph[u].append((v, w))\n            graph[v].append((u, w))\n        heap = [(0, 0)]\n        mst = defaultdict(set)\n        heapq.heapify(heap)\n        for u in graph.keys():\n            heapq.heappush(heap, (u, 0))\n        while heap:\n            v, w = heapq.heappop(heap)\n            if len(mst[v]) < self.count and len(mst[w]) < self.count:\n                mst[v].add(w)\n                mst[w].add(v)\n                self.count -= 1\n                yield v, w\n\n    def roadsAndLibraries(self, n: int, c_lib: int, c_road: int, cities: List[int]) -> int:\n        self.count = n\n        self.roads = []\n        self.parents = defaultdict(int)\n        for i in range(1, n + 1):\n            self.parents[i] = i\n        for i in range(len(cities)):\n            if i == 0:\n                self.roads.append((0, cities[i], c_road))\n            else:\n                self.roads.append((cities[i - 1], cities[i], c_road))\n                self.roads.append((cities[i - 1], cities[i], c_road + 1))\n        mst = list(self.kruskal())\n        res = 0\n        for city1, city2 in mst:\n            if (self.parents[city1], self.parents[city2]) not in self.roads:\n                res += c_lib\n                self.union(city1, city2)\n        return res\n\n\"\"\"\n[MEMO] Kruskal\u2019s Algorithm\n\nThe algorithm consists of the following steps:\n\nCreate a graph G = (V,E) where V is the vertex set and E is the edge set of the graph. The edges E are represented as pairs (u,v) where u and v are cities and the weight of the edge is c_road. The graph is represented as a dictionary (V, E) where V is a set of vertices and E is a set of edges.\nCreate a set C of all cities in G.\nCreate an empty set MST.\nFor each vertex v in V, add v to MST.\nCreate an empty priority queue PQ.\nAdd all edges in G to PQ with weights in non-decreasing order.\nWhile PQ is non-empty:\n    (1) Remove the edge with the smallest weight from PQ.\n    (2) If the two vertices of the edge form a connected component with MST, then:\n        (a) Add the edge to MST.\n        (b) Add the two vertices to C.\n        (c) For each vertex w in V, if w is not in C, add w to PQ.\n\"\"\""
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n2\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0\n''') == '1 2\\n1 3\\n1 4\\n'\n\n'''\n4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0\n'''\nassert solution('''\n4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0\n''') == '1 2\\n1 3\\n1 4\\n2 3\\n'\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == expected_output\nprint(solution(input()))\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('EWPGAJRB') == 'ABCD'\nassert solution('RUQAPRQ') == 'ABCD'\nassert solution('WELCOME') == 'ABCD'\nassert solution('RRA') == 'ABCD'\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\n\"\"\"\n\nimport math\nfrom itertools import groupby\n\nclass Solution:\n    def __init__(self, input_string: str):\n        self.input_string = input_string\n\n    def solve(self) -> str:\n        # TODO: Solve the problem\n        return \"\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\nassert solution('JBRWPGA') == 'AJRKOWP'\n\nprint(solution('JBRWPGA'))\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\nassert solution('HOHOHO') == 'HOHOHO'\nassert solution('ABCDEF') == 'ABCDEF'\nassert solution('ABCDEFG') == 'ABCDEFG'\nassert solution('HIJKLMN') == 'HIJKLMN'\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(DRM_MSG) == \"ABCD\"\nprint(solution(DRM_MSG))\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\nassert solution('EUVWXY') == 'ABCDE'\nassert solution('EVTXU') == 'ABDCE'\n\"\"\"\n\nimport math\n\nclass Solution:\n    def __init__(self, input_str):\n        self.input_str = input_str\n\n    def decrypt(self, input_str):\n        return_str = \"\"\n        for i in range(0, math.ceil(len(input_str) / 2)):\n            start = i\n            end = start + math.ceil(len(input_str) / 2)\n\n            temp = self.decrypt_part(input_str[start:end])\n            return_str = return_str + temp\n\n        return return_str\n\n    def decrypt_part(self, part):\n        rotation_sum = 0\n        return_str = \"\"\n\n        for i in range(0, len(part)):\n            rotation_sum = rotation_sum + ord(part[i]) - ord('A')\n\n        rotation = rotation_sum % 26\n\n        for i in range(0, len(part)):\n            return_str = return_str + chr((ord(part[i]) - ord('A') + rotation) % 26 + ord('A'))\n\n        return return_str\n\nprint(Solution('ABCD').decrypt('EWPGAJRB'))"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\nassert solution('ZYRKBSC') == 'ABCD'\nassert solution('ZYKBSC') == 'ABCD'\nassert solution('ZYRKB') == 'ABCD'\nassert solution('ZYRK') == 'ABCD'\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\n\"\"\""
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('cba') == 2\nassert solution('a') == 0\nassert solution('abc') == 0\nassert solution('aab') == 2\nassert solution('abb') == 1\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abc') == 2\nassert solution('abcd') == 0\nassert solution('adcb') == 0\nassert solution('abcde') == 1\nassert solution('acbde') == 2\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"hqpqv\") == 3\n\"\"\""
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"peter\") == 1\n\"\"\""
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abc') == 2\nassert solution('bab') == 0\nassert solution('cba') == 2\nassert solution('abd') == 3\nassert solution('cdx') == 5\n\nprint(solution('abc'))\nprint(solution('bab'))\nprint(solution('cba'))\nprint(solution('abd'))\nprint(solution('cdx'))\n\n-----Solution-----\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"def\") == 0\nassert solution(\"a\") == 0\nassert solution(\"f\") == 0\nassert solution(\"fzz\") == 1\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abc') == 2\n\n-----Solution-----\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abc\") == 2\n\"\"\""
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abc') == 2\n\n-------\n\nSample Input:\naaaa\nSample Output:\n0\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaabbcc\") == 0\nassert solution(\"abbcbaa\") == 3\nassert solution(\"babbaa\") == 2\n\n\"\"\""
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaaaah\") == \"no\"\nassert solution(\"aaah\") == \"go\"\n\n\"\"\"\n\nfrom typing import Iterator\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaah\\naaaaah') == 'no'\n\"\"\""
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaah\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaaah\") == \"no\"\nassert solution(\"aaaaah\") == \"no\"\nassert solution(\"h\") == \"go\"\nassert solution(\"a\") == \"no\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaah\") == \"no\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaaah\") == \"no\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaah\") == \"no\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaaaaah\") == \"no\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline()\ninput = input.split()\ninput = input[1]\ninput_h = sys.stdin.readline()\ninput_h = input_h.split()\ninput_h = input_h[0]\n\nh_num = 0\nfor i in input:\n    if i == \"a\":\n        h_num += 1\n    else:\n        h_num = 0\n    if h_num >= input_h:\n        print(\"go\")\n        exit()\nprint(\"no\")"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaah\") == \"no\"\n\n-------\n3\naaaaaah\naaaaaaah\naaaaaah"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"a\") == \"no\"\nassert solution(\"a\"*1000 + \"h\") == \"go\"\nassert solution(\"h\"*1000 + \"a\") == \"no\"\nassert solution(\"aaah\" + \"a\"*999) == \"go\"\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\n\"\"\"\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\n\"\"\"\n\ns = input()\n\nwins = 0\n\nfor i in range(len(s)):\n    if s[i] == 'A':\n        wins += 1\n    else:\n        wins -= 1"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('B2A1B2A2B2A2B2') == 'B'\nassert solution('A2B2A2B2A2B2A2') == 'B'\nassert solution('A1A1A1A1A1A1A1') == 'A'\nassert solution('A1A2A2B1A2A1A1') == 'A'\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A2B1B2A1A2A2A2') == 'B'\nassert solution('A1B1A2A2B2A1A2A2') == 'A'\nassert solution('A2B2A1A2A2A2A2') == 'A'\n\n\"\"\"\n\n\nfrom typing import Tuple, List"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\"\"\"\n\nimport operator"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A1B2A1A2A2A2A1A2B1\") == \"A\"\nassert solution(\"A1A1A1A2A2A2A2B2A2\") == \"A\"\n\nSample Input:\nB1A2B2A1B2A2B2A1B1A1B2A1A2B1B1A1\nSample Output:\nB\nassert solution(\"B1A2B2A1B2A2B2A1B1A1B2A1A2B1B1A1\") == \"B\"\nassert solution(\"A1A1A1A2A2A2A2B2A2\") == \"A\"\n\nSample Input:\nA2B2A2A2A2A2B2A2A2B2A2A2A2A2A2A2\nSample Output:\nA\nassert solution(\"A2B2A2A2A2A2B2A2A2B2A2A2A2A2A2A2\") == \"A\"\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A1B1A2B2A1A2A2A2') == 'B'\nassert solution('A1B2A1A2B1A1A2A2') == 'A'\n\"\"\"\n\nfrom itertools import zip_longest"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A2B1A2B2A1A2A2A2') == 'A'\n\nimport os"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('AB') == ''\nassert solution('A2B1') == 'A'\nassert solution('A2B1A2') == 'A'\nassert solution('A2B1A2A2A2A2') == 'A'\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\"\"\"\nimport sys\n\nfor line in sys.stdin:\n    line = line.strip()\n    A = 0\n    B = 0\n    for i in range(len(line)):\n        if line[i] == \"A\":\n            A += 1\n        else:\n            B += 1\n    if A > B:\n        print(\"A\")\n    elif B > A:\n        print(\"B\")\n    elif B == A:\n        if int(line[-1]) == 1:\n            print(\"A\")\n        else:\n            print(\"B\")\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == '21'\nprint('Test passed')"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15'\n) == '21'\nassert solution(\n'4 4\\n1 2 15\\n1 3 2\\n3 2 3\\n3 4 2'\n) == '15'\nassert solution(\n'8 7\\n2 3 18\\n2 4 2\\n3 2 17\\n3 5 2\\n3 8 5\\n4 5 9\\n4 6 5\\n5 6 13'\n) == '25'\nassert solution(\n'8 8\\n1 2 5\\n1 3 2\\n2 3 16\\n2 4 2\\n3 2 9\\n3 4 7\\n4 5 11\\n4 6 9\\n5 6 18'\n) == '29'\nassert solution(\n'8 8\\n1 2 5\\n1 3 2\\n2 3 16\\n2 4 2\\n3 2 9\\n3 4 7\\n4 5 11\\n4 6 9\\n5 6 18'\n) == '29'\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 2\\n2 3 8\") == \"21\"\n\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\nstdin.readline()\n\nroads = [list(map(int, stdin.readline().split())) for _ in range(m)]\n\nstdin.readline()\n\nstart = list(map(int, stdin.readline().split()))\nend = list(map(int, stdin.readline().split()))\nk = start[2]\n\nstdin.readline()\n\ncity = list(map(int, stdin.readline().split()))\n\nstdin.readline()"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15') == '21'\n\"\"\""
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n') == '4'\nassert solution('5\\n3\\n1 2\\n2 3\\n4 5\\n') == '8'\nassert solution('5\\n3\\n1 2\\n2 3\\n4 5\\n') == '8'\n'''\n\nfrom typing import List\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n0 1 3\\n1 3 10\\n2 0 2\\n3 0 0\") == \"12\"\n\"\"\"\nimport sys\n\nDEBUG = False\ndata = sys.stdin.read().splitlines()\n\nN, M = [int(n) for n in data[0].split()]\nG = data[3:3 + N]\nS = [int(n) for n in data[3 + N].split()]\n\nINTERSECTIONS = {}\nfor i in range(N):\n    INTERSECTIONS[int(data[1 + i * 4])] = [int(n) for n in data[i * 4 + 1].split()]\n\nSTREETS = {}\nfor i in range(M):\n    A, B, L = [int(n) for n in data[i + 1 + N].split()]\n    STREETS[A, B] = L\n\nINTERSECTION_STREETS = {}\nfor i in range(M):\n    A, B = [int(n) for n in data[M + i + 1].split()]\n    INTERSECTION_STREETS.setdefault(A, []).append(B)\n    INTERSECTION_STREETS.setdefault(B, []).append(A)\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15') == '21'\nassert solution('4 5\\n1 3 10\\n2 3 5\\n2 4 2\\n1 4 1\\n2 5 20\\n3 1 3\\n3 2 1\\n3 4 4') == '12'\nassert solution('4 5\\n1 3 10\\n2 3 5\\n2 4 2\\n1 4 1\\n2 5 20\\n3 1 3\\n3 2 1\\n3 4 4') == '12'\n\nimport sys\nlines = sys.stdin.readlines()\nN, M = int(lines[0].split()[0]), int(lines[0].split()[1])\nA, B, K, G = lines[1].split()\nA, B, K, G = int(A), int(B), int(K), int(G)"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\\n') == '21'\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"6 5\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15\n\"\"\") == \"21\"\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\"\n\"\"\"\n\n\nfrom typing import List\nfrom collections import defaultdict\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\n\nassert solution('D H3e2l3o1W1o3r4l2d1!2') == 'HHHeellloWooorrrrlld!!'\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!\"\nassert solution(\"D 2H3e2l3o1W1o3r4l2d1!2\") == \"HHHeellloWooorrrrlld!!\"\nassert solution(\"D 2H3e2l3o1W1o3r4l2d1!2\") == \"HHHeellloWooorrrrlld!!\"\nassert solution(\"D 2H3e2l3o1W1o3r4l2d1!2\") == \"HHHeellloWooorrrrlld!!\"\n\n-------"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution('D 3h3e2l3o1W1o3r4l2d1!2') == 'HHHeellloooowarrrrrlldd!!'\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution('D hHHeeellllLLoWooooorrrrrLLLDddd!') == 'HHHeelllllloWooooorrrrrLLLDddd!'\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\nassert solution(\"D q8wj3r5T\") == \"q8wj3r5T\"\nassert solution(\"D HelloWorld\") == \"HelloWorld\"\nassert solution(\"D H2e2l3o1W1o3r4l2d1!2\") == \"H2e2l3o1W1o3r4l2d1!2\"\nassert solution(\"D IiIiI\") == \"IiIiI\"\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\\n\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\n---\nSample Input:\nD 5X3X2X1X1X0X1X0X1X0X1X0X0X1X1X0\nSample Output:\nX5X3X2X1X1X0X1X0X1X0X0X1X1X0"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\""
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\nassert solution(\"D HHHeellloWooorrrrlld!!1\") == \"HHHeellloWooorrrrlld!!1\"\n\nassert solution(\"D HHHeellloWooorrrrlld!!1\") == \"HHHeellloWooorrrrlld!!1\"\n\nassert solution(\"D HHHeellloWooorrrrlld!!2\") == \"HHHeellloWooorrrrlld!!2\"\n\nassert solution(\"D HHHeellloWooorrrrlld!!3\") == \"HHHeellloWooorrrrlld!!3\""
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution('D 2H3e2l3o1W1o3r4l2d1!2') == 'HHHeellloWooorrrrlld!!'\n\nSolution Test\nassert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution('D 2H3e2l3o1W1o3r4l2d1!2') == 'HHHeellloWooorrrrlld!!'\n\n\"\"\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 'Alice'\nassert solution('1') == 'Bob'\n\"\"\""
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"2\") == \"1\"\n\nprint(solution(\"2\"))\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'Alice'\nassert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\nassert solution('3') == 'Alice'\nassert solution('4') == 'Bob'\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 'Alice'\nassert solution('3') == 'Bob'\n\nassert solution('4') == 'Alice'\nassert solution('5') == 'Bob'\n\nassert solution('6') == 'Alice'\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"1\") == \"Bob\"\nassert solution(\"3\") == \"Alice\"\nassert solution(\"9\") == \"Bob\"\nassert solution(\"9\") == \"Alice\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"3\") == \"Alice\"\n\"\"\""
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2) == 'Alice'\nassert solution(3) == 'Alice'\nassert solution(4) == 'Bob'\nassert solution(5) == 'Alice'\nassert solution(6) == 'Bob'\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"4\") == \"Bob\"\nassert solution(\"6\") == \"Alice\"\nassert solution(\"8\") == \"Bob\"\nassert solution(\"10\") == \"Alice\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n\") == \"Alice\"\nassert solution(\"5\\n\") == \"Bob\"\nassert solution(\"8\\n\") == \"Alice\"\nassert solution(\"3\\n\") == \"Alice\"\nassert solution(\"7\\n\") == \"Bob\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 'Alice'\nassert solution('10') == 'Alice'\nassert solution('1') == 'Bob'\nassert solution('5') == 'Bob'\nassert solution('3') == 'Bob'\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('2 6 4') == '2+6=4'\nassert solution('4 4 4') == '4=4'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('4 2 5') == '4-2=2'\nassert solution('6 5 1') == '6-5=1'\nassert solution('5 5 5') == '5*5=5'\nassert solution('5 5 2') == '5*5=2'\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"3 5 7\") == \"3+5=7\"\nassert solution(\"8 5 6\") == \"8-5=3\""
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 8') == '5 + 3 = 8'\nassert solution('1 1 1') == '1 + 1 = 2'\nassert solution('1 1 2') == '1 + 1 = 2'\n\"\"\"\n\nfrom sys import stdin\n\nstdin = stdin.readlines()\n\na, b, c = stdin[0].split()\na, b, c = int(a), int(b), int(c)\n\nprint(f'{a} + {b} = {c}')\nprint(f'{a} - {b} = {c - b}')\nprint(f'{a} * {b} = {c * b}')\nprint(f'{a} / {b} = {c / b}')\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"2 4 5\") == \"2+4=6\"\nassert solution(\"7 6 8\") == \"7-6=1\"\nassert solution(\"11 1 8\") == \"11-1=10\"\nassert solution(\"10 2 -5\") == \"10+2=12\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 8') == '5 + 3 = 8'\nassert solution('1 2 3') == '1 + 2 = 3'\nassert solution('1 2 4') == '1 + 2 = 3'\nassert solution('4 5 6') == '4 + 5 = 9'\nassert solution('4 4 5') == '4 + 4 = 7'\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(solution.__doc__) == \"\"\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('15 8 2') == '15-8=2'\nassert solution('15 3 2') == '15*3=2'\nassert solution('15 8 3') == '15/8=2'\nassert solution('10 20 30') == '10+20=30'\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"7 9 10\") == \"7+9=10\"\nassert solution(\"2 3 4\") == \"2+3=4\"\nassert solution(\"1 1 1\") == \"1+1=1\"\n\"\"\""
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('10 10 10') == '10+10=10'\nassert solution('5 2 10') == '5+2=7'\nassert solution('5 2 1') == '5+2=1'\nassert solution('10 20 2') == '10+20=30'\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2 1 1\") == \"YES\"\nassert solution(\"4 3 2 1 2\") == \"YES\"\nassert solution(\"4 3 2 2 1\") == \"YES\"\nassert solution(\"4 3 2 3 1\") == \"YES\"\nassert solution(\"4 3 2 4 1\") == \"NO\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3 2 3 3\") == \"YES\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2 1\") == \"YES\"\nassert solution(\"4 3 1 1\") == \"YES\"\nassert solution(\"4 3 2 2\") == \"NO\"\nassert solution(\"6 3 1 1\") == \"YES\""
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\nassert solution('8\\n1 1 1 1 1 3 1 1') == 'NO'\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 3 1 1 2\\n') == 'YES'\nassert solution('5\\n1 2 3 1 3 2\\n') == 'NO'\nassert solution('4\\n1 1 1 1\\n') == 'YES'\nassert solution('4\\n1 1 2 1\\n') == 'NO'\nassert solution('4\\n1 1 1 2\\n') == 'YES'\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\nassert solution('8\\n4 3 3 1 1 3 1 1') == 'NO'\nassert solution('8\\n3 2 2 3 1 1 3 1 1') == 'NO'\nassert solution('8\\n3 2 2 3 1 1 3 1 2') == 'NO'\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\nassert solution(\"4\\n3 2 2 1 1\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == 'YES'\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"GHOST\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"GHOST\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"GHOST\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"GHOST\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"GHOST\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == 'ghost'\nassert solution(\"3\\nghost\\nmummy\\nwitch\") == 'ghost'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abc\") == \"cba\"\n\"\"\"\n\nimport sys\nimport string\n\ntest_cases = int(sys.stdin.readline())\n\nfor _ in range(test_cases):\n    n = int(sys.stdin.readline())\n    categories = {}\n    for _ in range(n):\n        category = sys.stdin.readline()\n        if category in categories.keys():\n            categories[category] += 1\n        else:\n            categories[category] = 1\n    max_value = max(categories.values())\n    result = []\n    for key, value in categories.items():\n        if value == max_value:\n            result.append(key)\n    print('\\n'.join(sorted(result)))\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"asd\") == \"asd\""
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"ghost\"\n\"mummy\"\n\"witch\"\n\"demon\"\n\"demon\"\n\"demon\"\n\"demon\"\n\"demon\"\n\"demon\"\n\"demon\"\n\"demon\"\n) == 'ghost'\nassert solution(\n\"ghost\"\n\"mummy\"\n\"witch\"\n\"demon\"\n\"demon\"\n\"demon\"\n\"demon\"\n\"demon\"\n\"demon\"\n\"demon\"\n\"demon\"\n) =='mummy'\nassert solution(\n\"ghost\"\n\"mummy\"\n\"witch\"\n\"demon\"\n\"demon\"\n\"demon\"\n\"demon\"\n\"demon\"\n\"demon\"\n\"demon\"\n\"demon\"\n) == 'witch'\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nghost\\nghost\\nghost\\nmummy\\nwitch\") == \"ghost\"\n\"\"\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n10\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\n''') == 'ghost'\nassert solution('''\n10\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\n''') =='mummy'\nassert solution('''\n10\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\n''') == 'witch'\nassert solution('''\n10\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\n''') == 'demon'\n\n:param stdin:\n:return:\n'''\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\\nmummy\"\n\"\"\"\n\nimport sys\nimport collections\n\nN = int(sys.stdin.readline().rstrip())\nCategories = collections.defaultdict(int)\n\nfor i in range(N):\n    Categories[sys.stdin.readline().rstrip()] += 1\n\nCategories = list(Categories.keys())\nCategories.sort()\n\nprint(\" \".join(Categories))\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\"\n\"\"\""
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''10\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon''') == 'ghost'\nassert solution('''10\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon''') =='mummy'\nassert solution('''10\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon''') == 'witch'\n\n-----Solution-----\n\n```python3\nimport string\nimport random"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215') == 'Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n'\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('Artist Album Song_Title Length_seconds') == 'Artist Album Song_Title Length_seconds'\nassert solution('1 2 3 4 5') == '1 2 3 4 5'\nassert solution('Artist Album Song_Title Length_seconds') == 'Artist Album Song_Title Length_seconds'\nassert solution('a b c d e f') == 'a b c d e f'\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\") == \"Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n\"\n\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nAlbum\\nSong_Title\") == \"Album Artist Song_Title Length_seconds\\nPiano_Favorites November 163\\nHard_Times 192\\nLondon_Town 236\\nSummers_Here 163\\nSummer Lullaby 215\\n\"\n\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nSong_Title\\nLength_seconds\") == \"Song_Title Length_seconds Artist Album Tchaikovsky Piano_Favorites November\\n163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n\"\n\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nLength_seconds\\nArtist\") == \"Artist Length_seconds Album Tchaikovsky Piano_Favorites November\\n163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n\"\n\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nLength_seconds\\nSong_Title\") == \"Song_Title Length_seconds Artist Album Tchaikovsky Piano_Favorites November\\n163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n\""
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n''') == '''Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n'''\n\nassert solution('''Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n''') == '''Artist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n'''\n\nassert solution('''Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n''') == '''Artist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n'''\n\nassert solution('''Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n''') == '''Artist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n'''\n\nassert solution('''Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n''') == '''Artist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n'''"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title''') == '''Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n'''\nassert solution('''Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nAlbum\nSong_Title\nLength_seconds''') == '''Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n'''\n\nimport sys"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('Artist') == 'Artist'\nassert solution('Artist Album Song_Title Length_seconds') == 'Artist Album Song_Title Length_seconds'\nassert solution('Artist Album Song_Title Length_seconds') == 'Artist Album Song_Title Length_seconds'\nassert solution('Artist Album Song_Title Length_seconds') == 'Artist Album Song_Title Length_seconds'\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\") == \"Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\"\n\"\"\"\n\nfrom collections import defaultdict\n\nattrs = input().split()\nnum_songs = int(input())\n\nsong_attrs = defaultdict(list)\nfor _ in range(num_songs):\n    song_attrs[input().split()[0]].append(input().split())\n\nsorted_attrs = [x for x in attrs if x!= \"Artist\"]\n\nfor _ in range(int(input())):\n    attr = input()\n    sorted_attrs.append(attr)\n\nsorted_songs = sorted(song_attrs.items(), key=lambda x: x[0])\nfor artist, songs in sorted_songs:\n    print(artist)\n    for song in sorted(songs, key=lambda x: x[0]):\n        print(\" \".join(song))\n    print(\"\")\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\\n\") == \"Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n\"\nprint(\"Test 1: Ok\")\n\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\\n\") == \"Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n\"\nprint(\"Test 2: Ok\")\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title''') == '''Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215'''\n\n\"\"\"\nWrite a program that, given a list of songs, sorts the songs into their proper order, starting with the order as given in the input, and then sorting based on all but the first attribute, and then again based on the first attribute.\n\nFor example:\n\nThe song list initially is, for example,\n\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nArtist Album Song_Title Length_seconds\nThe sorted list of attributes is then, for example,\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\nThe sorted song list is then, for example,\n\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n\"\"\""
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\"\"\"\n\n\"\"\"\nArtist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n\"\"\"\n\"\"\"\n7\nSong_Title Artist Genre\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\n\"\"\"\n\n\"\"\"\nSong_Title Artist Genre\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\n\"\"\"\n\n\"\"\"\nSong_Title Artist Genre\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\n\"\"\"\n\n\"\"\"\n9\nArtist Album Song_Title Length_seconds\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\n\"\"\"\n\n\"\"\"\nArtist Album Song_Title Length_seconds\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\n\"\"\"\n\n\"\"\"\n5\nAlbum Artist Song_Title Length_seconds\nAlbum Artist Song_Title Length_seconds\nAlbum Artist Song_Title Length_seconds\nAlbum Artist Song_Title Length_seconds\nAlbum Artist Song_Title Length_seconds\n\"\"\"\n\n\"\"\"\nAlbum Artist Song_Title Length_seconds\nAlbum Artist Song_Title Length_seconds\nAlbum Artist Song_Title Length_seconds\nAlbum Artist Song_Title Length_seconds\n\"\"\"\n\n\"\"\"\n5\nAlbum Artist Song_Title Length_seconds\nAlbum Artist Song_Title Length_seconds\nAlbum Artist Song_Title Length_seconds\nAlbum Artist Song_Title Length_seconds\n\"\"\"\n\n\"\"\"\n5\nSong_Title Artist Genre\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\n\"\"\"\n\n\"\"\"\nSong_Title Artist Genre\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\nAlan_Walker Paranoid Android 6.19\n\"\"\"\n\n\"\"\"\n3\nArtist\nAlbum\nSong_Title\n\"\"\"\n\n\"\"\"\nArtist\nAlbum\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nAlbum\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nAlbum\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3\nArtist\nSong_Title\n\"\"\"\n\n\"\"\"\n3"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 10 7\\n5 5 5 5 5 5 5') == 'YES'\n\"\"\""
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\nassert solution(\"5 10 7\\n5 5 5 5 5 5 5 5 5\") == \"NO\"\n\n-----Explanation-----\nIn the first example, the wall is built out in a single line using only bricks of height $5$ (it is filled from left to right).\n\nIn the second example, the wall is not built out in a single line, so Lars is left incomplete.\n\"\"\"\n\n\"\"\"\nAnswer the following question:\n\nIf there is a pile of n bricks of height h and width w, how many horizontal cuts do you need to do before you can remove the top layer?\n\nh: height\nw: width\nn: number of bricks\n\"\"\""
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 7\\n5 5 5 5 5 5 5\") == \"YES\"\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 10 7\\n5 5 5 5 5 5 5') == 'YES'\n\"\"\"\n\n\"\"\"\nAt the first glance it seems that solving the problem is trivial, but you might not be so sure about this. When you use this kind of algorithm in the real world, then you should think carefully about the expected time complexity and the memory complexity of the solution, which will be the main issue of evaluating the correctness of your solution.\n\nSo let's take a look at these issues. If we look at the task description carefully, we know that there are only three brick types and that all of them have the same height $h$, the only difference between them is the number of bricks of that type $x_i$ ($1 \\leq x_i \\leq 10$). So this means that to make the wall will be enough to place exactly $x_1 * h$ bricks of the first type, $x_2 * h$ bricks of the second type, $x_3 * h$ bricks of the third type, and so on. So it's clear that the problem becomes a subset sum problem, which is $\\mathsf{NP}$. But this problem is no ordinary subset sum problem, because we have several $x_i$ in one argument, so it will be a little bit more complicated than a usual subset sum problem.\n\nAt the same time, if we observe closely, then we will notice that the problem is a little different from a usual subset sum problem. In a usual subset sum problem, we consider only one argument, which contains only one element. Here we consider three arguments, each of them contains one element, but we are not limited to this case, because you can use them in a general way. If you prefer to use general approach, then it's worth mentioning that if you have three arguments with one element each, then you have one argument with three elements, which is still not enough for the general problem.\n\nFinally, in this problem we are not constrained to use one integer with three different values, but we are constrained to use only three integers with any values, because it is more difficult to use one integer with three different values. Therefore you can see that it is not a usual subset sum problem. If you prefer to use the general approach, then it's worth mentioning that it is no ordinary subset sum problem.\n\nSo, now let's discuss the time complexity and the memory complexity of the solution.\n\nThe time complexity is not a single number, but a product of three numbers, which is still not easy to understand. If you remember the solution of the subset sum problem with one argument, then you already understand the time complexity of the solution. If you still do not understand the time complexity, then you should take a look at the proof of the following theorem.\n\nFor any three integers $a$, $b$, and $c$ with $1 \\leq a \\leq b \\leq c \\leq 10$, we have:\n\n$$\\frac{a(b + c) - ab - ac}{b + c - 2} = \\frac{a^2 + b^2 + c^2 - 2ab - 2ac}{2(b + c - 2)} = \\frac{a^2 - ab - ac}{2(b + c - 2)} = \\frac{a^2 - a(b + c) + ab + ac}{2(b + c - 2)} = \\frac{a(b + c) - ab - ac}{2(b + c - 2)} = \\frac{a^2 + ab + ac - ac - ab - ab + a(b + c)}{2(b + c - 2)} = \\frac{a^2 + ab + ac - ac - ab - ab + a(b + c)}{2(b + c - 2)} = \\frac{a(b + c) - ab - ac}{2(b + c - 2)} = \\frac{a(b + c) - ab - ac}{2(b + c - 2)} = \\frac{a(b + c) - ab - ac}{2(b + c - 2)} = \\frac{a(b + c) - ab - ac}{2(b + c - 2)} = \\frac{a^2 + ab + ac - ac - ab - ab + a(b + c)}{2(b + c - 2)} = \\frac{a^2 + ab + ac - ac - ab - ab + a(b + c)}{2(b + c - 2)} = \\frac{a^2 + ab + ac - ac - ab - ab + a(b + c)}{2(b + c - 2)} = \\frac{a^2 + ab + ac - ac - ab - ab + a(b + c)}{2(b + c - 2)} = \\frac{a^2 - a(b + c) + ab + ac}{2(b + c - 2)} = \\frac{a^2 - a(b + c) + ab + ac}{2(b + c - 2)} = \\frac{a^2 - a(b + c) + ab + ac}{2(b + c - 2)} = \\frac{a^2 - a(b + c) + ab + ac}{2(b + c - 2)} = \\frac{a^2 + ab + ac - ac - ab - ab + a(b + c)}{2(b + c - 2)} = \\frac{a^2 - a(b + c) + ab + ac}{2(b + c - 2)} = \\frac{a^2 + ab + ac - ac - ab - ab + a(b + c)}{2(b + c - 2)} = \\frac{a^2 + ab + ac - ac - ab - ab + a(b + c)}{2(b + c - 2)} = \\frac{a^2 + ab + ac - ac - ab - ab + a(b + c)}{2(b + c - 2)} = \\frac{a^2 + ab + ac - ac - ab - ab + a(b + c)}{2(b + c - 2)} = \\frac{a(b + c) - ab - ac}{2(b + c - 2)} = \\frac{a(b + c) - ab - ac}{2(b + c - 2)} = \\frac{a(b + c) - ab - ac}{2(b + c - 2)} = \\frac{a(b + c) - ab - ac}{2(b + c - 2)} = \\frac{a^2 + ab + ac - ac - ab - ab + a(b + c)}{2(b + c - 2)} = \\frac{a^2 + ab + ac - ac - ab - ab + a(b + c)}{2(b + c - 2)} = \\frac{a^2 + ab + ac - ac - ab - ab + a(b + c)}{2(b + c - 2)} = \\frac{a^2 + ab + ac - ac - ab - ab + a(b + c)}{2(b + c - 2)} = \\frac{a^2 + ab + ac - ac - ab - ab + a(b + c)}{2(b + c - 2)} = \\frac{a^2 + ab + ac - ac - ab - ab + a(b + c)}{"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n7 7 7 7 7 7 7') == 'NO'\nassert solution('2 10 7\\n4 4 4 4 4 4 4') == 'YES'\nassert solution('2 10 7\\n3 3 3 3 3 3 3') == 'NO'\nassert solution('2 10 7\\n2 2 2 2 2 2 2') == 'YES'\n\n'''\n\nimport sys"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\n\"\"\"\n\nh, w, n = map(int, stdin.readline().split())\nbricks = sorted([int(stdin.readline()) for _ in range(n)])"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\nassert solution(\"2 10 7\\n1 1 1 1 1 1 1\") == \"NO\"\n\"\"\"\n\nh, w, n = map(int, stdin.readline().split())\nbricks = list(map(int, stdin.readline().split()))\nprint(\"YES\" if sum(bricks[:n]) <= h * w else \"NO\")\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'YES'\nassert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('1 100 1\\n10000') == 'YES'\nassert solution('2 100 7\\n3 3 4 1') == 'NO'\nassert solution('2 100 7\\n1 2 3 4 5 6 7') == 'NO'\nassert solution('2 100 7\\n1 2 3 4 5 5 6') == 'NO'\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\nNYNY\\nNNYY\\nYYNN\\nYYNY') == 'Not Effective\\n66.666667\\n50.000000'\n\nassert solution('4\\nYNYN\\nNYYN\\nYYNN\\nNYNN') == 'Not Effective\\n66.666667\\n50.000000'\n\nassert solution('4\\nYNNY\\nNNNN\\nNNNN\\nNYYN') == 'Not Effective\\n66.666667\\n50.000000'\n\nassert solution('4\\nYYYY\\nNNNN\\nNNNN\\nNYYN') == 'Not Effective\\n66.666667\\n50.000000'\n\nassert solution('4\\nNNNN\\nNYYN\\nYYNN\\nYYYY') == 'Not Effective\\n66.666667\\n50.000000'"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"YYNN\") == \"Not Effective\"\nassert solution(\"NNYY\") == \"Not Effective\"\nassert solution(\"NYNY\") == \"Not Effective\"\nassert solution(\"YYNN\") == \"Not Effective\"\nassert solution(\"YYNN\") == \"Not Effective\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == \"Not Effective\\n66.666667\\n50.000000\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n10\nNYNY\nNNYY\nNYYY\nNYYN\nNNNY\nYYNN\nYYYN\nYYNY\nYYNN\nYYNY\n''') == 'Not Effective\\n66.666667\\n50.000000'\n\n------Solution------\nn = int(stdin.readline())\n\nfor _ in range(n):\n    s = stdin.readline().strip()\n    x = s.count('NY')\n    y = s.count('NN')\n    z = s.count('YY')\n    if x == 0 or y == 0 or z == 0:\n        print('Not Effective')\n    else:\n        print(round(1 - (x / y), 2), round(1 - (x / z), 2))\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"10\\n\"\n    \"YYNY\\n\"\n    \"YYYN\\n\"\n    \"YYYY\\n\"\n    \"YYNN\\n\"\n    \"NYNY\\n\"\n    \"NNYY\\n\"\n    \"NYYY\\n\"\n    \"NNNY\\n\"\n    \"YYNN\\n\"\n    \"YYNY\\n\") == \"66.666667\\n50.0\""
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"NYNY\") == \"Not Effective\"\nassert solution(\"NNYY\") == \"66.666667\"\nassert solution(\"NYYY\") == \"50.000000\"\nassert solution(\"NYYN\") == \"Not Effective\"\nassert solution(\"NNNY\") == \"66.666667\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == '66.666667'\nassert solution(\"12\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nYYNN\\nYYYN\\nYYNY\\nYYNN\\nYYNY\") == 'Not Effective'"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('NYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\\nYYNY') == 'Not Effective\\n66.666667\\n50.000000'\nassert solution('YNYN\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\\nYYNY') == 'Not Effective\\n66.666667\\n50.000000'\nassert solution('NYYN\\nNNNY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\\nYYNY') == 'Not Effective\\n66.666667\\n50.000000'\nassert solution('NYYN\\nNNNY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\\nYYNY') == 'Not Effective\\n66.666667\\n50.000000'\nassert solution('NNNN\\nNNNN\\nNNNN\\nNNNN\\nNNNN\\nNNNN\\nNNNN\\nNNNN\\nNNNN') == 'Not Effective\\n66.666667\\n50.000000'\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\") == \"Not Effective\"\nassert solution(\"10\\nYYNN\\nYYNN\\nYYYN\\nNNNY\\nYYNN\\nYYNN\\nYYYY\\nYYNY\") == \"66.666667\"\n\"\"\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN') == '66.666667\\n50.000000'\n\n------\nIn this kata, you must determine the vaccination efficacy against infection for three different strains of a virus. You are given the number of participants in the trial and the number of participants infected by each strain, and your task is to determine the vaccination efficacy for each strain.\n\nNote: The vaccination efficacy against infection is defined as the number of participants who are NOT infected by a particular strain divided by the total number of participants.\n\nInput\nThe first line of input contains an integer $N$ (1\u2009\u2264\u2009$N$\u2009\u2264\u2009100\u2009000) containing the number of participants in the trial.\n\nThe second line of input contains an integer $K$ (1\u2009\u2264\u2009$K$\u2009\u2264\u2009$N$) containing the number of participants infected by each strain.\n\nThe third line of input contains an integer $M$ (1\u2009\u2264\u2009$M$\u2009\u2264\u2009$N$) containing the number of participants who are not infected by any of the three strains.\n\nOutput\nPrint the vaccination efficacies for each of the three strains in the order A, B, C (separated by spaces). If a particular strain is not effective, print Not Effective instead.\n\nExamples\nInput\n10\n5\n3\n7\nOutput\n66.6667\n50.00\nNot Effective\n\n-----\nInput:\n10\nYYYY\nYYYY\nYYYY\nYYYX\nYYYY\nYYYY\nYYYY\nYYYX\nYYYY\nYYYY\nOutput:\nNot Effective\nNot Effective\nNot Effective\nNot Effective\nNot Effective\nNot Effective\nNot Effective\n66.66667\n50.00\n-----\nSample Input:\n10\nYYYY\nYYYY\nYYYY\nYYYX\nYYYY\nYYYY\nYYYY\nYYYX\nYYYY\nYYYY\nOutput:\nNot Effective\nNot Effective\nNot Effective\nNot Effective\n66.66667\n50.00\n-----\nSample Input:\n8\nYYYY\nYYYY\nYYYY\nYYYX\nYYYY\nYYYY\nYYYX\nYYYY\nOutput:\n66.66667\n50.00\n\"\"\""
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('BAACC') == 3\nassert solution('CCAABB') == 3\n\"\"\""
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BAACC\") == \"3\"\nassert solution(\"BBAAA\") == \"Bruno\"\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BAACC\") == \"Bruno\"\nassert solution(\"BBBAA\") == \"Bruno\"\nassert solution(\"CCCAA\") == \"Goran\"\n\"\"\"\n\nn = int(input())\nseq = input()\n\ncorrect_answers = {\n    \"Bruno\": 0,\n    \"Adrian\": 0,\n    \"Goran\": 0\n}\n\nfor s in range(n):\n    if seq[s] == \"A\":\n        correct_answers[\"Adrian\"] += 1\n    elif seq[s] == \"B\":\n        correct_answers[\"Bruno\"] += 1\n    elif seq[s] == \"C\":\n        correct_answers[\"Goran\"] += 1\n\nbest_student = max(correct_answers, key=correct_answers.get)\n\nprint(correct_answers[best_student])\nprint(best_student)\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('B') == 'Bruno'\nassert solution('BB') == 'Bruno'\nassert solution('BAC') == 'Bruno'\nassert solution('ABC') == 'Bruno'\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABACC') == '2'\nassert solution('AABBC') == '0'\nassert solution('BAABC') == '2'\nassert solution('BAABB') == '2'"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BAACC\") == 3\nassert solution(\"ABABC\") == 0\nassert solution(\"CBAAA\") == 3\nassert solution(\"ABAAB\") == 0\n\nassert solution(\"BABACCBABCBABCB\") == 3\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BAACC\") == \"3\"\nassert solution(\"ABBAA\") == \"Goran\"\nassert solution(\"AAAA\") == \"Bruno\"\nassert solution(\"ABBBC\") == \"Bruno\"\nassert solution(\"BAABB\") == \"Bruno\"\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BAACC\") == \"Bruno\"\nassert solution(\"AABB\") == \"Adrian\"\nassert solution(\"ACAA\") == \"Adrian\"\nassert solution(\"ABAA\") == \"Bruno\"\nassert solution(\"ABAC\") == \"Goran\"\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\nBAACC''') == '3\nassert solution('''5\nCACCAC''') == '3\nassert solution('''5\nABCAC''') == '1\nassert solution('''5\nBAABC''') == '1\nassert solution('''5\nAABBC''') == '1\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('BAACC') == '3'\nassert solution('CABBA') == 'Adrian'\n\"\"\""
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == (-1, 0)\nassert solution('10 A wrong') == (-1, 10)\nassert solution('10 A wrong\\n10 A right') == (1, 20)\nassert solution('10 A wrong\\n10 A wrong\\n10 A wrong') == (0, 10)\nassert solution('10 A wrong\\n10 A wrong\\n10 A wrong\\n10 A right') == (1, 30)\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"3 E right\\n\"\n    \"10 A wrong\\n\"\n    \"30 C wrong\\n\"\n    \"50 B wrong\\n\"\n    \"100 A wrong\\n\"\n    \"200 A right\\n\"\n    \"250 C wrong\\n\"\n    \"300 D right\\n\"\n    \"-1\\n\"\n) == (3, 543)\n\nassert solution(\n    \"3 E right\\n\"\n    \"10 A wrong\\n\"\n    \"30 C wrong\\n\"\n    \"50 B wrong\\n\"\n    \"100 A wrong\\n\"\n    \"200 A right\\n\"\n    \"250 C wrong\\n\"\n    \"300 D right\\n\"\n    \"400 D wrong\\n\"\n    \"-1\\n\"\n) == (3, 543)\n\nassert solution(\n    \"3 E right\\n\"\n    \"10 A wrong\\n\"\n    \"30 C wrong\\n\"\n    \"50 B wrong\\n\"\n    \"100 A wrong\\n\"\n    \"200 A right\\n\"\n    \"250 C wrong\\n\"\n    \"300 D right\\n\"\n    \"400 D wrong\\n\"\n    \"500 E wrong\\n\"\n    \"-1\\n\"\n) == (3, 543)\n\nassert solution(\n    \"3 E right\\n\"\n    \"10 A wrong\\n\"\n    \"30 C wrong\\n\"\n    \"50 B wrong\\n\"\n    \"100 A wrong\\n\"\n    \"200 A right\\n\"\n    \"250 C wrong\\n\"\n    \"300 D right\\n\"\n    \"400 D wrong\\n\"\n    \"500 E wrong\\n\"\n    \"600 E right\\n\"\n    \"-1\\n\"\n) == (3, 543)\n\nassert solution(\n    \"1 E right\\n\"\n    \"20 A wrong\\n\"\n    \"30 C wrong\\n\"\n    \"50 B wrong\\n\"\n    \"100 A wrong\\n\"\n    \"200 A right\\n\"\n    \"250 C wrong\\n\"\n    \"300 D right\\n\"\n    \"400 D wrong\\n\"\n    \"500 E wrong\\n\"\n    \"600 E right\\n\"\n    \"700 E wrong\\n\"\n    \"-1\\n\"\n) == (2, 1002)"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1') == '3 543'\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == (3, 543)\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1''') == '3 543'\nassert solution('''10 C right\n20 A wrong\n30 C right\n40 A wrong\n50 A wrong\n60 A wrong\n70 A wrong\n80 A wrong\n90 A wrong\n100 A wrong\n110 A wrong\n120 A wrong\n130 A wrong\n140 A wrong\n150 A wrong\n160 A wrong\n170 A wrong\n180 A wrong\n190 A wrong\n200 A wrong\n210 A wrong\n220 A wrong\n230 A wrong\n240 A wrong\n250 A wrong\n260 A wrong\n270 A wrong\n280 A wrong\n290 A wrong\n300 A wrong\n310 A wrong\n320 A wrong\n330 A wrong\n340 A wrong\n350 A wrong\n360 A wrong\n370 A wrong\n380 A wrong\n390 A wrong\n400 A wrong\n410 A wrong\n420 A wrong\n430 A wrong\n440 A wrong\n450 A wrong\n460 A wrong\n470 A wrong\n480 A wrong\n490 A wrong\n500 A wrong\n510 A wrong\n520 A wrong\n530 A wrong\n540 A wrong\n550 A wrong\n560 A wrong\n570 A wrong\n580 A wrong\n590 A wrong\n600 A wrong\n610 A wrong\n620 A wrong\n630 A wrong\n640 A wrong\n650 A wrong\n660 A wrong\n670 A wrong\n680 A wrong\n690 A wrong\n700 A wrong\n710 A wrong\n720 A wrong\n730 A wrong\n740 A wrong\n750 A wrong\n760 A wrong\n770 A wrong\n780 A wrong\n790 A wrong\n800 A wrong\n810 A wrong\n820 A wrong\n830 A wrong\n840 A wrong\n850 A wrong\n860 A wrong\n870 A wrong\n880 A wrong\n890 A wrong\n900 A wrong\n910 A wrong\n920 A wrong\n930 A wrong\n940 A wrong\n950 A wrong\n960 A wrong\n970 A wrong\n980 A wrong\n990 A wrong\n1000 A wrong\n''') == '3 543'\n\nassert solution('''1 E right\n1 A wrong\n1 C wrong\n1 B wrong\n1 A wrong\n2 A right\n2 C wrong\n2 D right\n2 E wrong\n2 A wrong\n3 A right\n3 B wrong\n3 C wrong\n3 D wrong\n3 E right\n3 A wrong\n4 A right\n4 B wrong\n4 C wrong\n4 D wrong\n4 E wrong\n4 A wrong\n5 A right\n5 B wrong\n5 C wrong\n5 D wrong\n5 E right\n5 A wrong\n6 A right\n6 B wrong\n6 C wrong\n6 D wrong\n6 E right\n6 A wrong\n7 A right\n7 B wrong\n7 C wrong\n7 D wrong\n7 E right\n7 A wrong\n8 A right\n8 B wrong\n8 C wrong\n8 D wrong\n8 E right\n8 A wrong\n9 A right\n9 B wrong\n9 C wrong\n9 D wrong\n9 E right\n9 A wrong\n10 A right\n10 B wrong\n10 C wrong\n10 D wrong\n10 E right\n10 A wrong\n11 A right\n11 B wrong\n11 C wrong\n11 D wrong\n11 E right\n11 A wrong\n12 A right\n12 B wrong\n12 C wrong\n12 D wrong\n12 E right\n12 A wrong\n13 A right\n13 B wrong\n13 C wrong\n13 D wrong\n13 E right\n13 A wrong\n14 A right\n14 B wrong\n14 C wrong\n14 D wrong\n14 E right\n14 A wrong\n15 A right\n15 B wrong\n15 C wrong\n15 D wrong\n15 E right\n15 A wrong\n16 A right\n16 B wrong\n16 C wrong\n16 D wrong\n16 E right\n16 A wrong\n17 A right\n17 B wrong\n17 C wrong\n17 D wrong\n17 E right\n17 A wrong\n18 A right\n18 B wrong\n18 C wrong\n18 D wrong\n18 E right\n18 A wrong\n19 A right\n19 B wrong\n19 C wrong\n19 D wrong\n19 E right\n19 A wrong\n20 A right\n20 B wrong\n20 C wrong\n20 D wrong\n20 E right\n20 A wrong\n21 A right\n21 B wrong\n21 C wrong\n21 D wrong\n21 E right\n21 A wrong\n22 A right\n22 B wrong\n22 C wrong\n22 D wrong\n22 E right\n22 A wrong\n23 A right\n23 B wrong\n23 C wrong\n23 D wrong\n23 E right\n23 A wrong\n24 A right\n24 B wrong\n24 C wrong\n24 D wrong\n24 E right\n24 A wrong\n25 A right\n25 B wrong\n25 C wrong\n25 D wrong\n25 E right\n25 A wrong\n26 A right\n26 B wrong\n26 C wrong\n26 D wrong\n26 E right\n26 A wrong\n27 A right\n27 B wrong\n27 C wrong\n27 D wrong\n27 E right\n27 A wrong\n28 A right\n28 B wrong\n28 C wrong\n28 D wrong\n28 E right\n28 A wrong\n29 A right\n29 B wrong\n29 C wrong\n29 D wrong\n29 E right\n29 A wrong\n30 A right\n30 B wrong\n30 C wrong\n30 D wrong\n30 E right\n30 A wrong\n31 A right\n31 B wrong\n31 C wrong\n31 D wrong\n31 E right\n31 A wrong\n32 A right\n32 B wrong\n32 C wrong\n32 D wrong\n32 E right\n32 A wrong"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\") == \"3 543\"\n\"\"\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == (-1, 0)\nassert solution('3 E right') == (-1, 3)\nassert solution('10 A wrong') == (-1, 10)\nassert solution('30 C wrong') == (-1, 30)\nassert solution('50 B wrong') == (-1, 50)\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1') == '3 543'\n\n------Problem-----\n\nThe contest consists of three rounds, each with n problems. For each problem, the competitors receive one submission each for the problems they've solved, and are allowed to submit twice. After all the submissions, the competitors are evaluated for their performance and the best scores are determined. At the end of the competition, the winners receive the competitions medal.\n\nEach problem is graded with the following scheme:\n\nPoints awarded for solving a problem:\n    For each problem that was solved right on the first attempt: +1\n    For each problem that was solved right on the second attempt: +2\n    For each problem that was solved wrong on the first attempt: 0\n    For each problem that was solved wrong on the second attempt: -1\n\nPoints awarded for a high-performance score:\n    If the team\u2019s time score is over 500: +3\n    If the team\u2019s time score is between 400 and 499: +2\n    If the team\u2019s time score is between 300 and 399: +1\n\nPoints awarded for the best time score:\n    If the team\u2019s time score is between 100 and 199: +1\n    If the team\u2019s time score is between 200 and 299: +2\n    If the team\u2019s time score is between 300 and 399: +3\n    If the team\u2019s time score is over 400: +4\n\nPoints awarded for a perfect score:\n    If the team\u2019s time score is over 600: +5\n    If the team\u2019s time score is over 500 and has a high-performance score: +4\n    If the team\u2019s time score is over 400 and has a high-performance score: +3\n    If the team\u2019s time score is over 300 and has a high-performance score: +2\n    If the team\u2019s time score is between 100 and 199: +1\n    If the team\u2019s time score is between 200 and 299: +2\n\n-----Constraints-----\n    Time limit: 2 seconds per test set\n    Memory limit: 1GB\n\n-----Test set-----\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == (3, 543)\nprint(solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\"))\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\") == \"5\"\nassert solution(\"3 2\\n1 2 3\\n2 2 3\") == \"3\"\nassert solution(\"7 7\\n1 3 5 7 9 11 13 15\\n2 4 6 8 10 12 14 16\\n3 7 9 11 17 19 15 13\\n4 8 10 18 20 16 14 12\\n5 9 15 19 23 21 17 19\\n6 10 16 22 24 18 22 14\\n7 11 21 23 25 19 17 21\\n8 12 22 24 26 20 18 24\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == 5\n\n\"\"\"\n\nimport math\nfrom collections import deque\nfrom itertools import product\nimport sys"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2') == '5'\n\"\"\""
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '5'\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\\n'\n) == '5'\n\n-------\n5"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\") == \"5\"\n\n\"\"\"\nimport copy\nimport numpy as np"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == 5\n\"\"\"\n\nimport sys\nimport os\nimport ast"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"\n\nassert solution(\"5 10\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\") == \"-1\"\n\n\"\"\"\n\nfrom collections import deque\n\nINPUT_1 = \"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\"\nINPUT_2 = \"5 10\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\"\n\nn, m = list(map(int, INPUT_1.split()))\nmatrix = []\nfor i in range(n):\n    matrix.append(list(map(int, INPUT_1.split()[n:n+n])))\n\nk = int(INPUT_1.split()[2*n])\n\ndist = [[0]*m for _ in range(n)]\n\nque = deque()\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] == 1:\n            que.append((i,j))\n            dist[i][j] = 1\n\nwhile que:\n    i, j = que.popleft()\n    for a, b in ((1,0),(0,1),(-1,0),(0,-1)):\n        if 0<=i+a<n and 0<=j+b<m and dist[i+a][j+b] == 0 and matrix[i+a][j+b] <= k:\n            que.append((i+a, j+b))\n            dist[i+a][j+b] = dist[i][j] + 1\n\nfor i in range(n):\n    print(dist[i])\n\nans = -1\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] == k:\n            ans = dist[i][j]\n\nprint(ans)\n\n\"\"\"\n\nn, m = list(map(int, INPUT_1.split()))\nmatrix = []\nfor i in range(n):\n    matrix.append(list(map(int, INPUT_1.split()[n:n+n])))\n\nk = int(INPUT_1.split()[2*n])\n\ndist = [[0]*m for _ in range(n)]\n\nque = deque()\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] == 1:\n            que.append((i,j))\n            dist[i][j] = 1\n\nwhile que:\n    i, j = que.popleft()\n    for a, b in ((1,0),(0,1),(-1,0),(0,-1)):\n        if 0<=i+a<n and 0<=j+b<m and dist[i+a][j+b] == 0 and matrix[i+a][j+b] <= k:\n            que.append((i+a, j+b))\n            dist[i+a][j+b] = dist[i][j] + 1\n\nfor i in range(n):\n    print(dist[i])\n\nans = -1\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] == k:\n            ans = dist[i][j]\n\nprint(ans)\n\n\"\"\""
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n-----Notes-----\n- This is not the shortest path, but it is a path.\n\"\"\"\n\nimport math\n\n\"\"\"\nimport numpy as np\n\nn, k = [int(i) for i in input().split(\" \")]\n\na = [[int(i) for i in input().split(\" \")] for j in range(n)]\n\ncur = [1, 1]\nfor i in range(k):\n    a[cur[0]][cur[1]] = i + 2\n    nxt = [j for j in range(n) if a[cur[0]][j] == i + 2]\n    nxt = nxt[0] if nxt else -1\n    if nxt == -1:\n        break\n    cur = [nxt // n, nxt % n]\n\nprint(a)\n\"\"\""
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\") == \"5\"\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 7\\n5 5') == 'gunilla has a point'\nassert solution('2 9\\n1 2\\n5 3\\n5 5') == 'edward is right'\nassert solution('1 7\\n5 5') == 'edward is right'\nassert solution('2 9\\n1 2\\n5 3\\n5 5') == 'edward is right'\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 7\") == 'edward is right'\n\nassert solution(\"2\\n5 5\") == 'gunilla has a point'\n\nassert solution(\"1\\n1 7\") == 'edward is right'\n\nassert solution(\"2\\n5 5\") == 'gunilla has a point'\nassert solution(\"3\\n2 4\") == 'gunilla has a point'\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 7') == 'gunilla has a point'\n\"\"\""
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 7\\n5 5') == 'gunilla has a point'\n\"\"\"\n\n\"\"\"\n@dataclass\nclass Interval:\n    start: int\n    end: int\n\"\"\"\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 7') == 'gunilla has a point'\nassert solution('2\\n5 5') == 'edward is right'"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n'''\n\nimport sys"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(input())\n\"\"\""
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n5 5\") == \"edward is right\"\n\"\"\"\n\n\"\"\"\nSolution Approach\n============================\n\n(0) Find the first time when the pot started boiling.\n(1) Find the first time when the pot started to stop boiling.\n\n(2) If both the first start and first stop time are the same, then the answer is \"edward is right\".\n(3) Otherwise, the answer is \"gunilla has a point\".\n\nComplexity\nTime Complexity: O(N)\nSpace Complexity: O(1)\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 7\") == \"gunilla has a point\"\nassert solution(\"3\\n1 2\\n4 10\") == \"edward is right\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == 'edward is right'\nassert solution(test_input_2) == 'gunilla has a point'\n\"\"\"\n\nimport sys\nimport time"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 11\\n'\n                't 1 10\\n'\n                't 1 2\\n'\n                't 1 3\\n'\n                's 1\\n'\n                's 2\\n'\n                's 3\\n'\n                's 4\\n'\n                't 5 6\\n'\n                's 5\\n'\n                's 6\\n'\n                's 10\\n') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\nassert solution('10 11\\n'\n                't 1 10\\n'\n                't 1 2\\n'\n                't 1 3\\n'\n                's 1\\n'\n                's 2\\n'\n                's 3\\n'\n                's 4\\n'\n                't 5 6\\n'\n                's 5\\n'\n                's 6\\n'\n                's 10\\n') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\nassert solution('10 11\\n'\n                't 1 10\\n'\n                't 1 2\\n'\n                't 1 3\\n'\n                's 1\\n'\n                's 2\\n'\n                's 3\\n'\n                's 4\\n'\n                't 5 6\\n'\n                's 5\\n'\n                's 6\\n'\n                's 10\\n') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 11\\n't 1 10\\n't 1 2\\n't 1 3\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\") == \"4\"\nassert solution(\"10 11\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\") == \"1\"\nassert solution(\"10 11\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\") == \"2\"\nassert solution(\"10 11\\n's 1\\n's 2\\n's 3\\n's 4\\n't 5 6\\n's 5\\n's 6\\n's 10\") == \"4\"\n\n-----Explanation-----\nThere are ten guests at the party, therefore there are ten possible groups. Bjarki starts having fun and introduces himself to his friends. So the size of the groups start to form. Now he is bored and decides to ask his friends what size group he belongs to.\n\nBjarki asks the person sitting at index 0 whether they belong to any group. This person says that they belong to group 1. Bjarki asks the person sitting at index 1 whether they belong to group 1. This person says that they belong to group 2. Bjarki asks the person sitting at index 2 whether they belong to group 1. This person says that they belong to group 3. Bjarki asks the person sitting at index 3 whether they belong to group 1. This person says that they belong to group 4.\n\nBjarki then starts introducing himself to the other guests. So the size of the groups start to form. Now he is bored and decides to ask his friends what size group he belongs to.\n\nBjarki asks the person sitting at index 0 whether they belong to any group. This person says that they belong to group 5. Bjarki asks the person sitting at index 1 whether they belong to group 5. This person says that they belong to group 6. Bjarki asks the person sitting at index 2 whether they belong to group 5. This person says that they belong to group 7. Bjarki asks the person sitting at index 3 whether they belong to group 5. This person says that they belong to group 8.\n\nBjarki then starts introducing himself to the other guests. So the size of the groups start to form. Now he is bored and decides to ask his friends what size group he belongs to.\n\nBjarki asks the person sitting at index 0 whether they belong to any group. This person says that they belong to group 9. Bjarki asks the person sitting at index 1 whether they belong to group 9. This person says that they belong to group 10.\n\nAs you can see, the size of the groups start to form, so the answer is 9.\n\n\nSOLUTION:"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 11\\n\"\n\"t 1 10\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\\n\"\n) == \"4\"\n\nassert solution(\"10 11\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\\n\"\n) == \"4\"\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n1\\n2\\n3\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n9\\n10\") == \"10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n\"\nassert solution(\"1\\n1\\n2\\n2\\n2\\n3\\n4\\n5\\n5\\n5\\n5\\n6\\n7\\n8\\n8\\n8\\n9\\n10\\n10\\n10\\n10\\n10\\n\") == \"10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n\"\n\"\"\"\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2') == '2'\nassert solution('2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 11\\nt 1 10\\nt 1 2\\nt 1 3\\ns 1\\ns 2\\ns 3\\ns 4\\nt 5 6\\ns 5\\ns 6\\ns 10\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\""
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 11\\nt 1 10\\nt 1 2\\nt 1 3\\ns 1\\ns 2\\ns 3\\ns 4\\nt 5 6\\ns 5\\ns 6\\ns 10\\n') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\n\n\"\"\"\n\nimport sys\nfrom math import ceil, floor"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 11\\n\"\n                \"t 1 10\\n\"\n                \"t 1 2\\n\"\n                \"t 1 3\\n\"\n                \"s 1\\n\"\n                \"s 2\\n\"\n                \"s 3\\n\"\n                \"s 4\\n\"\n                \"t 5 6\\n\"\n                \"s 5\\n\"\n                \"s 6\\n\"\n                \"s 10\\n\") == \"4\\n\"\n\nassert solution(\"10 11\\n\"\n                \"t 1 10\\n\"\n                \"t 1 2\\n\"\n                \"t 1 3\\n\"\n                \"s 1\\n\"\n                \"s 2\\n\"\n                \"s 3\\n\"\n                \"s 4\\n\"\n                \"t 5 6\\n\"\n                \"s 5\\n\"\n                \"s 6\\n\"\n                \"s 10\\n\") == \"4\\n\"\n\nassert solution(\"10 11\\n\"\n                \"t 1 10\\n\"\n                \"t 1 2\\n\"\n                \"t 1 3\\n\"\n                \"s 1\\n\"\n                \"s 2\\n\"\n                \"s 3\\n\"\n                \"s 4\\n\"\n                \"t 5 6\\n\"\n                \"s 5\\n\"\n                \"s 6\\n\"\n                \"s 10\\n\") == \"4\\n\"\n\nassert solution(\"10 11\\n\"\n                \"t 1 10\\n\"\n                \"t 1 2\\n\"\n                \"t 1 3\\n\"\n                \"s 1\\n\"\n                \"s 2\\n\"\n                \"s 3\\n\"\n                \"s 4\\n\"\n                \"t 5 6\\n\"\n                \"s 5\\n\"\n                \"s 6\\n\"\n                \"s 10\\n\") == \"4\\n\"\n\nassert solution(\"10 11\\n\"\n                \"t 1 10\\n\"\n                \"t 1 2\\n\"\n                \"t 1 3\\n\"\n                \"s 1\\n\"\n                \"s 2\\n\"\n                \"s 3\\n\"\n                \"s 4\\n\"\n                \"t 5 6\\n\"\n                \"s 5\\n\"\n                \"s 6\\n\"\n                \"s 10\\n\") == \"4\\n\""
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 11\\nt 1 10\\nt 1 2\\nt 1 3\\ns 1\\ns 2\\ns 3\\ns 4\\nt 5 6\\ns 5\\ns 6\\ns 10') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\nassert solution('10 10\\nt 1 10\\nt 1 2\\nt 1 3\\ns 1\\ns 2\\ns 3\\ns 4\\nt 5 6\\ns 5\\ns 6\\ns 10') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 11\\n\"t 1 10\\n\"t 1 2\\n\"t 1 3\\n\"s 1\\n\"s 2\\n\"s 3\\n\"s 4\\n\"t 5 6\\n\"s 5\\n\"s 6\\n\"s 10') == '4'\n\"\"\"\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2') == '2015\\n1982\\n2016'\n'''\n\nfrom collections import defaultdict"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\") == \"2016\\n1982\\n2016\"\n\n-----Explanation-----\nIn the first query, Grandpa Bernie went to Iceland in year 2016.\n\nIn the second query, Grandpa Bernie went to Sweden in year 2015.\n\nIn the third query, Grandpa Bernie went to Iceland in year 1982.\n\nIn the fourth query, Grandpa Bernie went to Norway in year 1999.\n\"\"\""
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n\") == \"2015\\n1982\\n2016\\n\"\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2') == '2016\\n1982\\n2016'\n\nSample Input:\n6\nIceland 2016\nSweden 2015\nIceland 1982\nNorway 1999\nIceland 1993\nNorway 2003\n3\nSweden 1\nIceland 1\nIceland 2\nSample Output:\n2015\n1992\n2016\n2003"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input) == expected_result\n\n\"\"\"\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n1982\\n2016\"\n\n\"\"\"\n\nn = int(stdin.readline())\ncountry_year = []\nfor i in range(n):\n    country_year.append(stdin.readline().split())\nm = int(stdin.readline())\nfor i in range(m):\n    c, k = stdin.readline().split()\n    k = int(k)\n    print(country_year[c][1] if k == 1 else country_year[c][k])\n\n\"\"\"\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e $n$, \u0434\u0430\u043b\u0435\u0435 $n$ \u0441\u0442\u0440\u043e\u043a, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u043e\u0432\u043e, \u0430 \u0437\u0430\u0442\u0435\u043c \u0447\u0438\u0441\u043b\u043e $m$, \u0437\u0430\u0442\u0435\u043c $m$ \u0441\u0442\u0440\u043e\u043a, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u043e\u0432\u043e, \u0437\u0430\u0442\u0435\u043c \u0447\u0438\u0441\u043b\u043e $k$.\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 $k$ \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0441\u0442\u0440\u043e\u043a \u0438\u0437 \u0432\u0432\u043e\u0434\u0430, \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044f \u043a\u0430\u0436\u0434\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u043e\u0434\u043d\u0438\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\nSample Input:\n3\nhi\nbye\nhello\n2\nworld world\nhello\nSample Output:\nbye\nhello\n\n\"\"\"\n\nn = int(input())\nfor i in range(n):\n    print(input())\nm = int(input())\nfor i in range(m):\n    print(input())\n\n\"\"\"\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e $n$, \u0434\u0430\u043b\u0435\u0435 $n$ \u0441\u0442\u0440\u043e\u043a, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u043e\u0432\u043e, \u0430 \u0437\u0430\u0442\u0435\u043c \u0447\u0438\u0441\u043b\u043e $m$, \u0437\u0430\u0442\u0435\u043c $m$ \u0441\u0442\u0440\u043e\u043a, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u043e\u0432\u043e, \u0437\u0430\u0442\u0435\u043c \u0447\u0438\u0441\u043b\u043e $k$.\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043b\u043e\u0432\u0430 \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a, \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044f \u043a\u0430\u0436\u0434\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u043e\u0434\u043d\u0438\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c. \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043b\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0435 \u0432\u0430\u0436\u0435\u043d. \u0421\u0442\u0440\u043e\u043a\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c, \u0430 \u0441\u043b\u043e\u0432\u0430 \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u2014 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438.\n\nSample Input:\n3\nhi world\nbye world\nhi hi\n4\nworld\nhi hi\nbye hi\nworld world\nSample Output:\nhi\nbye\nhi\nbye\n\n\"\"\"\n\nn = int(input())\nfor i in range(n):\n    print(input().split()[-1])\nm = int(input())\nfor i in range(m):\n    print(input().split()[-1])\n\n\"\"\"\n\u041f\u0435\u0440\u0432\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d \u043d\u0430 \u043e\u0431\u0440\u0430\u0437\u0446\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043e\u0432 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u043f\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d \u043d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043e\u0441\u043d\u043e\u0432\u0435:\n\n\u041f\u0440\u0438 \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u0435 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0438\u0437 \u043c\u043e\u0434\u0443\u043b\u044f timeit. \u041f\u0440\u0438 \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u0435 \u043e\u0431\u044a\u0451\u043c\u0430 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043c\u043e\u0434\u0443\u043b\u044c sys.\n\n\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043c\u043e\u0434\u0443\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u044b \u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043c\u043e\u0434\u0443\u043b\u044f\n\n\u041c\u043e\u0434\u0443\u043b\u044c sys \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u0435\u0442\u043e\u0434 getsizeof(), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u044a\u0451\u043c \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 getsizeof() \u0434\u043b"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == '2016\\n1982\\n2016'\n\"\"\"\n\n\"\"\"\nInput\n4\nIceland 2016\nSweden 2015\nIceland 1982\nNorway 1999\n3\nSweden 1\nIceland 1\nIceland 2\nSample Output\n2015\n1982\n2016\n\"\"\"\n\nimport os\nimport sys\nimport numpy as np\nfrom collections import Counter\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2016\\n1982\\n2016\"\n\"\"\""
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2016\\n1982\\n2016\\n\"\n\"\"\"\nimport collections"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abbcccddddeeeee') == 10\n\"\"\""
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abbcccddddeeeee') == 10\nassert solution('abcccddddeeeee') == 5\nassert solution('abbcccddddeeee') == 10\nassert solution('abcccddddeeee') == 5\n\n---Problem---\nGiven a string of characters that represents a valid summer trip, calculate the number of valid itineraries possible.\n\nA valid itinerary is a sequence of events in the summer season where the first and last events are of different types, and they are both unique among all event types during the sequence. For example, if the first event in a valid itinerary is a beach party, none of the other events during the itinerary can also be a beach party. There are no other restrictions on the event types in the sequence of a valid itinerary.\n\nFor the purposes of this problem, each event has a letter code associated with it. The letter codes are a, b, c, d, e, and f. If the first event is a, then the second event can only be b, c, or d. The second event can only be a, b, or c, and so on.\n\nGiven a string of characters that represent a valid summer trip, determine the number of valid itineraries possible.\n\n---Solution---\nEach letter represents an event. We can count the number of itineraries using a dynamic programming approach. For each event, we can determine the number of itineraries if there are no more than k other events. The number of itineraries is the number of valid itineraries for the remaining set of events.\n\nFor example, for the input of 'abbcccddddeeee', we can choose to include event 'a', which gives us 1 possible itinerary, or 'b' and 'c', which give us 2 possible itineraries. There are also two events to choose from: 'd' and 'e'. We can't choose both events, so we have only 1 possible itinerary. The number of possible itineraries is the number of valid itineraries for the remaining set of events.\n\nWe can now create a table to store the number of possible itineraries for each remaining set of events. We initialize the first row to be the number of possible itineraries if there are no remaining events. The first column is the number of possible itineraries if there is only one remaining event. Each cell is the sum of the possible itineraries for the remaining events, with the event at index i occurring on the ith row and the event at index j occurring on the jth column.\n\nWe can use a similar approach to generate all possible itineraries, starting from the bottom right corner of the table. At each step, we choose the event that gives us the maximum number of itineraries. We can start off with the number of possible itineraries when we have no remaining events, and then choose the next event that gives us the maximum number of itineraries.\n\nTime complexity: O(N^2)\nSpace complexity: O(N^2)\n\n\"\"\""
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abbcccddddeeeee') == 10\n\"\"\""
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\nassert solution(\"abcde\") == 1\nassert solution(\"abcdea\") == 1\nassert solution(\"abcda\") == 2\nassert solution(\"abca\") == 3\n\"\"\"\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abbcccddddeeeee') == 10\n\"\"\"\n\nfrom collections import Counter\n\nclass Solution:\n    def solution(self, s: str) -> int:\n        s = Counter(s)\n        ans = 0\n        for a in set(s.values()):\n            if a >= 2:\n                ans += a * (a - 1) // 2\n        return ans\n\nprint(Solution().solution('abbcccddddeeeee'))\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n\"\"\"\nimport itertools\nfrom collections import Counter\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abbcccddddeeeee') == 10\n\"\"\"\n\nstdin = \"abcdefghijklmnop\"\nprint(len(stdin))\n\nimport re\nimport string"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ab') == 2\nassert solution('aba') == 3\nassert solution('abbccc') == 4\nassert solution('ababccccc') == 7\nassert solution('abcabcdede') == 6\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n\nSample Input:\naabbbcccddddeeeee\nSample Output:\n0\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('a') == '.'\nassert solution('a b') == '.'\nassert solution('a a') == '.'\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency.. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency.. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency.. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency.. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency.. is a blight on.. and its\\nhumanity'\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\"\"\""
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('I love the cat. I do not like the cat. The cat was murdered by the cat.') == 'I love the cat.. I do not like the cat.. The cat was murdered by the cat.'\nassert solution('') == ''\nassert solution('Hello world') == 'Hello.. world'\nprint('Success')\n\nYou can find the input and expected output of an example test case in the Code tab.\n\n-----Solution-----\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\n\n----Hints----\n\n* Inefficient is an adjective, so it should not be replaced with a period.\n\n\"\"\"\n\nimport collections\nimport re"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency.. is a blight on.. and its\\nhumanity\"\n\"\"\""
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency.\\n. is a blight on.. and its\\nhumanity\"\n\n\"\"\"\n\nfrom typing import TextIO\nimport sys"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\") == \"\"\"Engineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\"\"\"\nassert solution(\"Inefficiency is a blight on the world and its\") == \"\"\"Inefficiency is a blight on the world and its\n\"\"\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\") == \"\"\"Engineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\n\"\"\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\n\") == \"\"\"Engineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\n\"\"\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nInefficiency is a blight on the world and its\") == \"\"\"Engineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\n\"\"\"\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('foo bar') == 'foo bar'\nassert solution('Hello world') == '.'\nassert solution('Hello world\\nHello world') == '.'\nassert solution('Hello world\\nHello world\\nHello world') == '.'\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\nassert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"satisfactory\"\n\"\"\""
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3\"\"\") == \"unsatisfactory\"\nassert solution(\"\"\"5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3\"\"\") == \"satisfactory\"\nassert solution(\"\"\"5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n-1 2 3\"\"\") == \"satisfactory\"\nassert solution(\"\"\"5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n-1 2 3\"\"\") == \"satisfactory\"\nassert solution(\"\"\"5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n-1 2 3\"\"\") == \"satisfactory\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3\n''') == 'unsatisfactory'\n\n---"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\nassert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') =='satisfactory'\nassert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') =='satisfactory'\nassert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\nassert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') =='satisfactory'\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n\") == \"unsatisfactory\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3\"\"\") == \"unsatisfactory\"\nassert solution(\"\"\"5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3\"\"\") == \"satisfactory\"\n\"\"\")"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\nassert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') =='satisfactory'\n\"\"\""
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\n\nSample Input:\n8 9\n-1 -2 -3 0\n-1 2 -3 0\n1 2 -3 0\n1 -2 3 0\n-1 2 3 0\n-1 -2 3 0\n1 2 3 0\n1 -2 3 0\n1 2 -3 0\n-1 2 3 0\nSample Output:\nsatisfactory\n\"\"\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\nassert solution(\"5 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"satisfactory\"\n\"\"\""
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n\") == \"unsatisfactory\"\n\"\"\""
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\n\"\"\"\n\nimport collections\nfrom typing import List, Dict\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\nassert solution('8\\n1 1 1 5 3 4 6 6') == '4'\nassert solution('8\\n1 2 1 2 2 2 5') == 'none'\nassert solution('8\\n1 1 1 5 3 4 6 6') == '4'\nassert solution('8\\n1 1 1 5 3 4 6 6') == '4'\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\n\"\"\""
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\nassert solution('10\\n2 4 5 1 1 5 2 3 6') == 'none'\n\"\"\""
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\nprint(solution(\"8\\n1 1 1 5 3 4 6 6\"))\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\n\nassert solution('8\\n1 5 3 4 6 6') == 'none'\n\nassert solution('8\\n1 1 1 5 3 4 6 6') == 'none'\n\nassert solution('8\\n1 1 1 5 5 4 6 6') == 'none'\n\nprint('Success')\n\n'''\n\n'''\n\nBENCHMARK\n\n'''\nimport timeit\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 1 5 3 4 6 1') == 'none'\nassert solution('6 6 6 6 6') == 'none'\nassert solution('4 1 2 3 4') == 'none'\nassert solution('1 2 1 1 2') == 'none'\nassert solution('1 1 1 1 2') == 'none'\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\n\"\"\""
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 1 1 3 3') == 'none'\nassert solution('4\\n1 2 1 1 3') == '1'\nassert solution('5\\n1 1 1 1 2') == 'none'\nassert solution('6\\n1 1 2 2 1 1') == '2'\nassert solution('5\\n1 5 4 3 2') == 'none'\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 1 1 5 3 4 6 6\") == \"none\"\nassert solution(\"6 1 1 5 3 4 6 6 3 3\") == \"none\"\nassert solution(\"6 1 1 5 3 4 6 6 5 3\") == \"none\"\nassert solution(\"6 1 1 5 3 4 6 6 6 6\") == \"none\"\nassert solution(\"6 1 1 5 3 4 6 6 6 6 6\") == \"none\"\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == expected_result\n\"\"\"\n\ninput_time, input_explosion = input().split(\"\\n\")\n\ncurrent_time = input_time.split(\":\")\nexplosion_time = input_explosion.split(\":\")\n\ncurrent_time = int(current_time[0]) * 3600 + int(current_time[1]) * 60 + int(current_time[2])\nexplosion_time = int(explosion_time[0]) * 3600 + int(explosion_time[1]) * 60 + int(explosion_time[2])\n\nprint(str(int(explosion_time - current_time)) + \":00:00\")\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"10:10:10\") == \"08:08:08\"\nassert solution(\"23:59:59\") == \"09:59:59\"\n\"\"\"\n\nimport datetime\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('6:20:00') == '06:20:00'\nassert solution('08:00:00') == '08:00:00'\nassert solution('09:59:59') == '10:00:00'\nassert solution('10:59:59') == '11:00:00'\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20:00:00\", \"04:00:00\") == \"08:00:00\"\n\"\"\"\n\ntime = stdin.split(\" \")\nend_time = stdin.split(\" \")\n\ntime[0] = int(time[0])\ntime[1] = int(time[1])\ntime[2] = int(time[2])\nend_time[0] = int(end_time[0])\nend_time[1] = int(end_time[1])\nend_time[2] = int(end_time[2])\n\ntime_diff = (end_time[0] * 3600) + (end_time[1] * 60) + end_time[2] - (time[0] * 3600) - (time[1] * 60) - time[2]"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"00:00:00\") == \"00:00:00\"\nassert solution(\"05:59:59\") == \"06:00:00\"\nassert solution(\"18:00:00\") == \"00:00:00\"\nassert solution(\"17:59:59\") == \"06:00:00\"\n\n\"\"\""
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"02:02:01\") == \"04:02:01\"\nassert solution(\"11:11:11\") == \"23:11:11\"\n\n\"\"\"\nimport datetime\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"04:00:00\") == \"08:00:00\"\n\"\"\"\n\n\nimport datetime\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20:00:00\", \"04:00:00\") == \"08:00:00\"\n\"\"\"\n\nfrom datetime import datetime"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20:00:00\", \"04:00:00\") == \"08:00:00\"\n\nprint(solution(\"20:00:00\", \"04:00:00\"))\n\n\"\"\"\n\nstdin = input()\nexplosion = input()\n\na = stdin.split(':')\nb = explosion.split(':')"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"20:00:00\"\n) == \"08:00:00\"\nassert solution(\n    \"24:00:00\"\n) == \"00:00:00\"\n\n-----Constraints-----\nTime of the explosion is at least one second, and at most one day.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('31 6') == '4'\nassert solution('21 6') == '4'\nassert solution('21 2') == '1'\nassert solution('9 2') == '3'\nassert solution('7 3') == '4'\n\nprint(solution('7 3'))\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('31 6') == '4'\n\"\"\"\n\n\"\"\"\nTESTING\n\"\"\"\nfrom collections import Counter\nfrom itertools import combinations"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"31 6\") == \"4\"\n\n-----Note-----\nThe values $\\ell $ and $n$ can be between 1 and 10^10.\n\"\"\""
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('31 6') == '4'\nassert solution('100 10') == '101'\nassert solution('20 5') == '1'\nassert solution('100 100') == '1'"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('31 6') == 4\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\") == 4\nassert solution(\"10 6\") == 3\nassert solution(\"5 10\") == 2\nassert solution(\"10 10\") == 1\nassert solution(\"10 10\") == 1\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"31 6\") == \"4\""
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('31 6') == '4'\n\n-----Explanation-----\nGiven a loo roll of length 31 cm and the backup roll of length 6 cm, Nick needs to use one layer of backup rolls of length 4 cm.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('31 6') == 4\nassert solution('1 2') == 2\nassert solution('1 1') == 1\nassert solution('2 2') == 1\nassert solution('2 1') == 1\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"31 6\") == \"4\"\nassert solution(\"5 2\") == \"2\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '2.6666666666666665'\n\"\"\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '2.6666666666666665'\nassert solution('7') == '5.833333333333333'\nassert solution('12') == '9.833333333333334'\nassert solution('30') == '25.333333333333332'\nassert solution('100') == '98.16666666666666'\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '2.6666666666666665'\nassert solution('4') == '2.739130434782609'\n\"\"\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\nprint(solution(\"3\"))\n\n-----Notes-----\nAssume that the input is a valid integer (does not need validation).\n\"\"\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == 2.6666666666666665\n\"\"\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\n\"\"\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == 2.6666666666666665\n\"\"\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\nprint(solution(\"3\"))\n\n-------Practical applications--------\n* When analyzing data, it is useful to use an estimate of $e$ instead of the actual value to compare data, as it is not at all accurate to the true value of $e$.\n\n* Suppose you are trying to estimate the speed of light ($c$) in a vacuum, using the special relativity equation, which states that the speed of light is equal to the speed of light in vacuum ($c$) multiplied by the ratio of the actual speed of light in a medium ($c_M$) and the speed of light in vacuum ($c_{vac}$):\n$$c = c_{vac} \\cdot c_M/c_{vac}$$\n\nIf you have an estimate of $c_{vac}$ and $c_M$ (the speed of light in the medium and vacuum, respectively), then you can estimate the speed of light in the vacuum ($c_{vac}$) using this equation.\n\n* Suppose you are trying to approximate the true value of $e$ (euler\u2019s number), using the formula mentioned above.\n\n* Suppose you want to estimate the value of $\\\\pi$ (pi), using the ratio of the actual value of $\\\\pi$ in a circle ($\\\\pi$) and the actual value of $\\\\pi$ in a square ($\\\\pi$):\n$$\\\\pi = \\\\pi_{circ} \\\\cdot \\\\pi_{sqr}$$\n\nIf you have two estimates of $\\\\pi_{circ}$ and $\\\\pi_{sqr}$ (the value of pi in a circle and pi in a square, respectively), then you can estimate the value of $\\\\pi$ using this formula.\n\n* Suppose you want to estimate the value of $\\\\pi$ (pi), using the ratio of the true value of $\\\\pi$ in a square ($\\\\pi$) and the true value of $\\\\pi$ in a circle ($\\\\pi$):\n$$\\\\pi = \\\\pi_{sqr} \\\\cdot \\\\pi_{circ}$$\n\nIf you have two estimates of $\\\\pi_{sqr}$ and $\\\\pi_{circ}$ (the value of pi in a square and pi in a circle, respectively), then you can estimate the value of $\\\\pi$ using this formula.\n\n* Suppose you are trying to estimate the true value of $\\\\pi$ (pi), using the ratio of the actual value of $\\\\pi$ in a square ($\\\\pi$) and the actual value of $\\\\pi$ in a circle ($\\\\pi$):\n$$\\\\pi = \\\\pi_{sqr} \\\\cdot \\\\pi_{circ}$$\n\nIf you have two estimates of $\\\\pi_{sqr}$ and $\\\\pi_{circ}$ (the value of pi in a square and pi in a circle, respectively), then you can estimate the value of $\\\\pi$ using this formula.\n\"\"\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == 2.236144137113884\nassert solution(\"3\") == 2.0\nassert solution(\"0\") == 1.0\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == 2.6666666666666665\n\"\"\"\n\nn = int(input())\ne = 1\nfor i in range(1, n+1):\n    e += 1/i\nprint(e)\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('5 3 7') == 'paul'\nassert solution('5 3 0') == 'opponent'\nassert solution('5 3 10') == 'paul'\n\n-----Explanation-----\nSample input: 5 3 7\n\n5 plays the first round, and serves 2 points.\n3 plays the second round, and serves 2 points.\n7 plays the third round, and serves 3 points.\n\nThe remaining scores are 5 and 2. The first player to reach or exceed 3 points wins the game.\n\nNote that Paul plays first so his score is always greater than his opponent\u2019s.\n\"\"\""
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 7') == 'paul'\nassert solution('7 5 3') == 'opponent'\nassert solution('3 3 3') == 'paul'\nassert solution('7 7 7') == 'opponent'\n\n---\n\nPaul got a new job at a famous company. He is very excited about it and he loves to have fun at work! After work, he likes to play the classic ping-pong game and he is ready to fight the opponent.\n\nThe game is played by two players. The game starts with one of the players serving the ball, and that player does so during the first $N$ rounds. After that, the other player serves the ball for $N$ rounds, and so on. Each round is won by exactly one of the players and a player gets one point for each won round (there can be no draws). When one of the players has reached a certain number of points, that player wins the game.\n\nNow, Paul is in desperate need of a new way to figure out which player should serve the ball the upcoming round, and he wants you to help him.\n\nYou should write a program that given $N$ and the current score of the game prints out whose turn it is to serve the ball the upcoming round. Paul\u2019s plan is to run your program on his secret high technology pocket computer, in order to impress his opponent. And by the way, Paul always serves the first ball (if that makes it easier for you).\n\nInput Format\nThe first line contains two integers $N$ and $P$ on a single line. $1 \\leq N \\leq 10^9$ denotes the number of serves a player will perform in a row before it is the other player\u2019s turn to serve the ball, and $0 \\leq P \\leq 10^9$ denotes Paul\u2019s current score in the ongoing ping-pong game.\n\nThe second line contains two integers $Q$ and $R$ on a single line. $0 \\leq Q \\leq 10^9$ and $0 \\leq R \\leq 10^9$ denote Paul\u2019s opponent\u2019s score and the current score of the ongoing ping-pong game, respectively.\n\nConstraints\n1 <= N <= 10^9\n0 <= P <= 10^9\n0 <= Q <= 10^9\n0 <= R <= 10^9\n\nOutput Format\nIt should consist of a single word on a single line. If it is Paul\u2019s turn to serve the ball, your program should output paul. Otherwise, your program should output opponent.\n\nSample Input 0\n5 3 7\n5 7\nSample Output 0\npaul\nExplanation 0\nThe first line of the input contains the first two integers on the first line. The second line contains the last two integers on the second line. Now we know that Paul should serve the ball.\n\nIn order to impress Paul\u2019s opponent, he will have to serve the ball for $N$ first rounds. After that, he will have to serve the ball for $N$ rounds. When $N=3$, Paul has to play $3+3=6$ rounds. After that, he will have to play $6+3=9$ rounds and so on.\n\nIn order to win, Paul should win all the rounds. This means that he should have more than $P=3$ points after all these rounds. So, the first output of the program should be paul.\n\nSample Input 1\n4 5 6\n5 6\nSample Output 1\nopponent\nExplanation 1\nThe first line of the input contains the first two integers on the first line. The second line contains the last two integers on the second line. Now we know that Paul should serve the ball.\n\nIn order to impress Paul\u2019s opponent, he will have to serve the ball for $N$ first rounds. After that, he will have to serve the ball for $N$ rounds. When $N=4$, Paul has to play $4+4=8$ rounds. After that, he will have to play $8+4=12$ rounds and so on.\n\nIn order to win, Paul should win all the rounds. This means that he should have more than $P=5$ points after all these rounds. So, the first output of the program should be opponent.\n\nSample Input 2\n3 3 3\n3 3\nSample Output 2\npaul\nExplanation 2\nThere is a draw in the last two rounds. If Paul wins, he would have $3+3+3=9$ points after all these rounds. So, the first output of the program should be paul.\n\nSample Input 3\n7 7 7\n7 7\nSample Output 3\nopponent\nExplanation 3\nThere is a draw in the last three rounds. If Paul wins, he would have $7+7+7=21$ points after all these rounds. So, the first output of the program should be opponent.\n\nSample Input 4\n1 0 9\n9 0\nSample Output 4\npaul\nExplanation 4\nPaul\u2019s current score is $1=1$. When the next round is won by Paul, he will have $1+1=2$ points. After that, he will have $2+1=3$ points. When the next round is won by Paul, he will have $3+1=4$ points. When the next round is won by Paul, he will have $4+1=5$ points. When the next round is won by Paul, he will have $5+1=6$ points. And so on. The first output of the program should be paul.\n\nSample Input 5\n1 9 6\n6 0\nSample Output 5\nopponent\nExplanation 5\nThe first two lines of the input contain the first two integers on the first line and the second two integers on the second line. Now we know that Paul should serve the ball.\n\nIn order to impress Paul\u2019s opponent, he will have to serve the ball for $N$ first rounds. After that, he will have to serve the ball for $N$ rounds. When $N=1$, Paul has to play $1+1=2$ rounds. After that, he will have to play $2+1=3$ rounds and so on.\n\nIn order to win, Paul should win all the rounds. This means that he should have more than $P=9$ points after all these rounds. So, the first output of the program should be opponent.\n\n\"\"\"\n\nn,p,q = map(int,input().split())\nprint(\"paul\" if p>q else \"opponent\")"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 7\\n') == 'paul'\nassert solution('5 3 0\\n') == 'opponent'\nassert solution('5 0 3\\n') == 'paul'\nassert solution('0 3 5\\n') == 'opponent'\nassert solution('0 3 0\\n') == 'paul'\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"1 1 1\") == \"opponent\"\nassert solution(\"7 9 5\") == \"paul\"\nassert solution(\"6 6 6\") == \"opponent\"\n\n---Problem Description---\n\nGiven the number of serves $N$, $P$ and $Q$ on a single line, print \"paul\" if it is Paul\u2019s turn to serve the ball and \"opponent\" if it is the other player\u2019s turn to serve the ball.\n\n---Test Cases---\n\nTest 1:\nInput:\n5 3 7\nOutput:\npaul\n\nTest 2:\nInput:\n1 1 1\nOutput:\nopponent\n\nTest 3:\nInput:\n7 9 5\nOutput:\npaul\n\nTest 4:\nInput:\n6 6 6\nOutput:\nopponent\n\n\n\n'''\n\nN, P, Q = list(map(int, input().split(' ')))\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"5 3 6\") == \"opponent\"\nassert solution(\"5 3 0\") == \"paul\"\nassert solution(\"5 3 3\") == \"paul\"\nassert solution(\"6 3 7\") == \"opponent\"\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 7') == 'paul'\nassert solution('4 1 3') == 'opponent'\nassert solution('1 1 1') == 'paul'\nassert solution('1 1 7') == 'opponent'\nassert solution('1 1 1') == 'paul'\n\n\"\"\"\n\nN, P, Q = input().split()\nN, P, Q = int(N), int(P), int(Q)\n\nwhile P!= Q:\n    P += 1\n    if P == Q:\n        print('paul')\n        break\n    if P < Q:\n        P += 1\n        if P == Q:\n            print('paul')\n            break\n    if P > Q:\n        P -= 1\n        if P == Q:\n            print('paul')\n            break\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 7') == 'paul'\nassert solution('4 2 6') == 'opponent'\nassert solution('0 0 6') == 'paul'\nassert solution('4 3 1') == 'opponent'\nassert solution('1 0 6') == 'paul'\n\n\"\"\""
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"6 2 7\") == \"opponent\"\nassert solution(\"5 5 7\") == \"paul\"\nassert solution(\"5 6 7\") == \"opponent\"\nassert solution(\"6 6 7\") == \"opponent\"\n\n\"\"\"\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"5 7 3\") == \"opponent\"\nassert solution(\"3 7 5\") == \"paul\"\n\nassert solution(\"5 7 3\") == \"opponent\"\nassert solution(\"3 7 5\") == \"paul\"\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"5 7 7\") == \"opponent\"\nassert solution(\"8 1 8\") == \"paul\"\nassert solution(\"8 8 8\") == \"opponent\"\n\n'''\n\nimport sys\n\nN, P, Q = [int(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '4'\nassert solution('4') == '5'\nassert solution('5') == '6'\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 2\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '2'\nassert solution('4') == '4'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == 2\nassert solution(\"2\") == 2\nassert solution(\"3\") == 3\nassert solution(\"4\") == 3\nassert solution(\"5\") == 4\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1) == 2\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '2'"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == 2\n\nassert solution(\"6\") == 3\n\nassert solution(\"9\") == 3\n\n\"\"\"\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '2'\n\"\"\"\n\nn = int(input())\ncount = 0\nfor i in range(n):\n    count += 1\nprint(count)\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123\") == \"No\"\nassert solution(\"123a\") == \"Yes\"\nassert solution(\"12345\") == \"No\"\nassert solution(\"12345a\") == \"Yes\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('123', '123') == 'Yes'\nassert solution('1a2', '1A2') == 'No'\nassert solution('123', '1234') == 'No'\nassert solution('123', '1345') == 'No'\nassert solution('123', '12345') == 'No'\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('123') == 'Yes'\nassert solution('123a') == 'No'"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('123') == 'Yes'\nassert solution('123a') == 'No'\n\nassert solution('12345') == 'Yes'\nassert solution('12a45') == 'No'\n\nassert solution('12345a') == 'No'\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"123a\") == \"No\""
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123\") == \"No\"\nassert solution(\"123a\") == \"Yes\"\nassert solution(\"11112222\") == \"No\"\nassert solution(\"abcd1234\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"1234\") == \"Yes\"\nassert solution(\"12a3\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"123\", \"123a\") == \"No\"\nassert solution(\"123\", \"123A\") == \"Yes\"\nassert solution(\"1a\", \"1A\") == \"No\"\nassert solution(\"123\", \"1234\") == \"No\"\n\"\"\""
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"12a3\") == \"No\"\nassert solution(\"123567890\") == \"Yes\"\nassert solution(\"123567890b\") == \"No\"\nassert solution(\"12a3b\") == \"No\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123a\") == \"Yes\"\nassert solution(\"1\") == \"No\"\nassert solution(\"1a\") == \"No\"\nassert solution(\"1aa\") == \"No\"\nassert solution(\"1aaa\") == \"No\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nassert solution(\"kopa pauzi\") == \"kopapa pauzi\"\n\"\"\""
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\n\"\"\""
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"zepelepenapa papapripikapa\"\n) == \"zelena paprika\"\nassert solution(\n    \"kemija pepemipijapa papapripikapa\"\n) == \"kempika pepetaipaipapa\"\nassert solution(\n    \"supelepenapa pepapripikapa\"\n) == \"superpikapa\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"kemija\") == \"kempipijapa\"\nassert solution(\"paprika\") == \"papapripikapa\"\nprint(\"OK\")\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\nassert solution('onenog samogolnijega papirna') == 'one noog samogolnega papira'\n\"\"\"\n\n\nimport re"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"zepelepenapa\") == \"zelena paprika\"\nassert solution(\"kemija\") == \"kepemipijapa\"\nassert solution(\"paprika\") == \"papapripikapa\"\n\n\"\"\""
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"zepelepenapa\") == \"zelena paprika\"\nassert solution(\"papapa\") == \"papa papa\"\nassert solution(\"zepelipokipapapipikapa\") == \"zelena paprika\"\nassert solution(\"zepelipokipa\") == \"zepelipokipa\"\nassert solution(\"zepelipokipapa\") == \"zepelipokipa\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\n\"\"\"\n\n\"\"\"\nI dont know how it works, but I found that it was the best idea \nfrom the hints that I did\n\"\"\""
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nassert solution(\"kapoedoelepenapa papapripikapa\") == \"kapoedoela papapripikapa\"\nassert solution(\"kemija\") == \"kempijapa\"\nassert solution(\"paprika\") == \"papapripika\"\nassert solution(\"papopo\") == \"papoppopo\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nassert solution(\"bobobobobobobobobobobbobobobobbobobobobobobobbob\") == \"bobobobobobbobbobbobbobobbbobbobbobobobbbobbobbobbob\"\n\"\"\"\n\n\nimport re\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('32 2') == '-32'\n\"\"\"\n\n\nfrom fractions import Fraction\nfrom math import sqrt\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"32 2\") == \"-32\"\n\"\"\"\n\nimport sys\n\nx, y = map(int, sys.stdin.readline().strip().split(\" \"))\n\nprint(x - y, x + y)"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"32 2\") == \"-32\"\n\nSample Input:\n34 5\nSample Output:\nIMPOSSIBLE\n\"\"\"\n\nx, y = [int(s) for s in input().split()]"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"32 2\") == \"-32\"\n\"\"\""
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"32 2\") == \"-32\"\n\"\"\""
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('32 2') == '-32'\n\"\"\"\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('32 2') == '-32'\nassert solution('32 3') == 'IMPOSSIBLE'\nassert solution('64 0') == '-64'\nassert solution('0 4') == '-64'\nassert solution('32 -3') == '64'\n\"\"\"\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('32 2') == '-32'\n\nprint(solution('32 2'))\n\"\"\"\n\nx, y = input().split()\nx, y = int(x), int(y)\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"32 2\") == \"-32\"\nprint(solution(\"32 2\"))\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"32 2\") == \"-32\"\nassert solution(\"0 2\") == \"IMPOSSIBLE\"\nassert solution(\"30 1\") == \"ALL GOOD\"\nassert solution(\"50 0\") == \"ALL GOOD\"\nassert solution(\"0 0\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 2 3 3\n1 3 4''') == 'both'\nassert solution('''2 2 3 3\n1 3 4''') == 'one'\nassert solution('''2 2 3 3\n1 3 4''') == 'none'\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2 3 3\\n1 3 4') == 'both'\nassert solution('2 2 3 3\\n1 3 8') == 'none'\nassert solution('2 2 3 3\\n1 3 9') == 'both'\nassert solution('2 2 3 3\\n1 3 10') == 'both'\n\nassert solution('2 2 3 3\\n1 3 5') == 'one'\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 3 3\\n1 3 4') == 'both'\nassert solution('2 2 3 3\\n3 1 2') == 'both'\nassert solution('2 2 3 3\\n2 3 4') == 'none'\n\nimport datetime\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"one\"\nassert solution(\"2 2 3 3\") == \"none\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 3 3\\n1 3 4\") == \"both\"\nassert solution(\"2 2 3 3\\n1 3 4\") == \"one\"\nassert solution(\"2 2 3 3\\n1 3 4\") == \"none\""
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 2 3 3''') == \"both\"\nassert solution('''1 3 4''') == \"one\"\nassert solution('''1 3 5''') == \"none\"\n'''\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2 3 3\\n1 3 4') == 'both\\none\\nnone'\n\"\"\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"none\"\nassert solution(\"2 3 4 1\") == \"both\"\nassert solution(\"1 2 3 4\") == \"none\"\nassert solution(\"1 2 3 4\") == \"none\"\nassert solution(\"1 2 3 4\") == \"none\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"one\"\nassert solution(\"0 3 4\") == \"none\"\n\"\"\"\n\nA, B, C, D = map(int, input().split())\np, m, g = map(int, input().split())\np = p * 60\nm = m * 60\ng = g * 60\nmin = p + m + g\np = p // A\nm = m // B\ng = g // C\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 3 3\\n1 3 4\\n') == 'both'\nassert solution('2 2 3 3\\n1 1 4\\n') == 'none'\nassert solution('2 2 3 3\\n1 1 1\\n') == 'one'\nassert solution('2 2 3 3\\n4 5 6\\n') == 'none'\n\nassert solution('2 2 3 3\\n3 5 8\\n') == 'both'\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 6 8') == '10'\nassert solution('-4 -6 -8') == '-2'\n\"\"\"\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 6 8') == '10'\n\"\"\"\n\na, b, c, d = map(int, input().split())"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 6 8') == '10'\nassert solution('1 4 7') == '10'\nassert solution('1 2 4') == '7'\nassert solution('-1 -2 3') == '-4'\nassert solution('5 8 3') == '10'\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(sorted([4, 6, 8])) == 10\nassert solution(sorted([2, 6, 8])) == 10\nassert solution(sorted([2, 4, 6])) == 10\nassert solution(sorted([2, 4, 6, 8])) == 10\nassert solution(sorted([4, 6, 8, 10])) == 10\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 6 8') == '10'"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 0 2\") == \"2\"\nassert solution(\"0 0 1\") == \"1\"\nassert solution(\"1 -1 -1\") == \"1\"\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 6 8') == '10'\nassert solution('5 7 2') == '13'\nassert solution('7 5 3') == '10'\nassert solution('8 5 8') == '17'\nassert solution('6 5 7') == '10'\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 6 8') == 10\nassert solution('1 2 3') == 4\n\"\"\"\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"3 5 7\") == \"10\"\nassert solution(\"1 3 5\") == \"10\"\nassert solution(\"2 4 6\") == \"10\"\nassert solution(\"-1 -3 -5\") == \"10\"\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 6 8') == '10'\nassert solution('1 2 1') == '2'\nassert solution('-1 -2 -3') == '-4'\n\"\"\"\n\na, b, c = (int(x) for x in stdin.split())\n\nprint(b - a + c)\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('500 70') == '533'\nassert solution('800 80') == '1067'\nassert solution('1000 90') == '1001'\n\"\"\"\n\nimport math\n\nh, v = map(int, stdin.readlines())\nprint(math.ceil(h/math.sin(math.radians(v))))"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('500 70') == '533'\n\n\"\"\"\n\nfrom typing import Dict, List, Tuple, Set\nimport math\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"500 70\") == \"533\"\nprint(solution(\"500 70\"))\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\"\n\nimport sys\n\nh, v = list(map(int, sys.stdin.readline().strip().split()))\n\nprint(round((h + v * (v - 90)) / 10))"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"500 70\") == \"533\"\nprint(solution(input()))\n\n\"\"\"\n\nimport math\nimport sys\n\nh, v = map(int, input().split())"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''500 70''') == '533'\nassert solution('''500 60''') == '560'\nassert solution('''1000 0''') == '1000'\nassert solution('''900 10''') == '990'\nassert solution('''100 90''') == '1010'\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\"\n\na = [int(i) for i in stdin.split()]\nprint(int(a[0]**2 + a[1]**2)**0.5 + a[0] - a[1])"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\""
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(500, 70) == 533\nprint(solution(500, 70))"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\"\n\nh, v = [int(i) for i in input().split()]"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nimport sys\nimport math\nimport decimal"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n2 9\n69 60\n100 60\n''') == '''\n39.0\n30.0\n'''\nassert solution('''\n3 3\n1 1 1\n1 2 1\n1 3 1\n''') == '''\n1.0\n0.5\n0.3333333333333333\n'''\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\"\"\"\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"2 9\n69 60\n100 60\"\"\") == '39.0\\n30.0'\nprint(\"It works! Go Go Go!\")"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\"\"\""
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\n\"\"\"\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nl = list(map(int, sys.stdin.readline().split()))\n\ndp = [[l[0], l[1], l[2], l[3]]]\n\nfor i in range(4, n):\n    dp.append([max(dp[i-1][1], dp[i-1][2]), max(dp[i-1][0], dp[i-1][3]),\n    min(dp[i-1][1], dp[i-1][2]), min(dp[i-1][0], dp[i-1][3])])\n\nprint(dp[n-1][2], dp[n-1][3])\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\n\n\"\"\"\n\nimport sys\n\nn = int(input())\nl = []\nfor _ in range(n):\n    l.append(int(input()))\nl = sorted(l)\n\nt = 0\nd = 0\n\nwhile len(l) > 0:\n    if l[-1] <= t:\n        t = l.pop()\n    else:\n        d += 1\n        t = l.pop()\n\nprint(d, t)\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\""
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"1 1\"\nassert solution(\"5 6 7 9 8 0\") == \"4 8\"\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\n\"\"\""
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\nassert solution('4\\n13 12 3 6') == '1 2'\nassert solution('6\\n9 9 9 9 9 9') == '0 0'\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\nn = int(stdin.readline().strip())\ntimes = list(map(int, stdin.readline().strip().split()))\n\nmax_ = max(times)\nmax_index = times.index(max_)"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\nprint(solution('5\\n23 27 31 28 30'))\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\\n1 1 3\\n\") == \"2\"\n\nsolution(input)\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 6\\n1 2 3') == '2'\n\"\"\"\n\nfrom collections import defaultdict\n\nn, a = map(int, stdin.readline().split())\nfleets = list(map(int, stdin.readline().split()))\n\nfleet_amounts = defaultdict(int)\nfor fleet in fleets:\n    fleet_amounts[fleet] += 1\n\nships_to_go = n - a\ntotal_ships_left = 0\nfor i in fleet_amounts.keys():\n    total_ships_left += fleet_amounts[i]"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6\\n1 2 3\") == \"2\"\n\nassert solution(\"3 6\\n1 1 1\") == \"0\"\n\nassert solution(\"3 6\\n2 2 2\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    3 6\n    1 2 3\n    \"\"\") == 2\n\"\"\"\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6\\n1 2 3\") == 2\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 1\") == \"0\"\nassert solution(\"3 6\") == \"1\"\nassert solution(\"3 6 1\") == \"1\"\nassert solution(\"3 6 1 2\") == \"0\"\nassert solution(\"3 6 1 2 3\") == \"2\"\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6\\n1 2 3\") == \"2\"\nassert solution(\"7 6\\n5 0 3 5 5 4\") == \"2\""
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6\\n1 2 3 4 5\\n1 1 1 2 2\\n1 1 2 1 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 6\n1 2 3''') == '2'\nassert solution('''3 5\n4 7 8''') == '1'\nassert solution('''2 1\n2 1''') == '0'\nassert solution('''3 2\n1 1 1''') == '1'\nassert solution('''3 5\n1 1 1''') == '1'\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('123') == ''\nassert solution('123 456 789') == ''\nassert solution('123 456 789 9 10') == ''\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1\nW''') == '1'\nassert solution('''1\nWMWMW''') == '4'\nassert solution('''1\nMWWMWWMW''') == '6'\nassert solution('''1\nWWMWMWWW''') == '7'\nassert solution('''1\nWWMMMM''') == '2'"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('WMMMWMWM') == '9'\nassert solution('MWMWMWMW') == '9'\nassert solution('MMWWMWM') == '8'\nassert solution('MWMWMMWM') == '8'\nassert solution('WWMMMWM') == '8'\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == expected_result\nprint(solution(input()))\n\n----\n\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n0\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n1\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n0\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n0\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n2\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n0\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n1\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n2\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n0\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n2\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n0\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n2\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n2\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n2\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n2\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n2\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n2\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n2\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n2\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n2\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n0\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n0\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n0\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n0\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n0\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py ==\n0\n>>> \n== RESTART: /Users/karimhajighi/Desktop/vscode_projects/my_projects/mastering_algorithms/implement_a_queue_from_stacks_using_linked_lists.py"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"MWWMWMMWM\") == 9\n\"\"\"\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"WMWMWMMMW\") == \"9\"\n\"\"\""
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"WMMMWWMMMWWMMMWWWMW\") == \"9\"\nassert solution(\"WMWMWWWMW\") == \"8\"\nassert solution(\"MMWWMMWMW\") == \"7\"\nassert solution(\"MWWMWMWMW\") == \"6\"\nassert solution(\"WWMWWW\") == \"5\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('MWWMWMMWM') == 9\nassert solution('M') == 1\nassert solution('MWM') == 3\nassert solution('MM') == 2\nassert solution('MWM') == 3\n\"\"\"\n\nimport math"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"MWWMWMWWMWWMWWMW\") == \"9\"\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WWMWMWMMMW\") == \"9\"\nassert solution(\"M\") == \"0\"\nassert solution(\"MMWMWWMMMW\") == \"8\""
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('W') == '1'\nassert solution('WW') == '0'\nassert solution('WMW') == '1'\nassert solution('MWMW') == '4'\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\nassert solution('5 4\\n8 -2 3 undo -1') == '4'\nassert solution('5 4\\n8 -2 3 undo 2') == '0'\nassert solution('5 4\\n8 -2 3 undo 3') == '5'\nassert solution('5 4\\n8 -2 3 undo -1') == '4'\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5 4\n8 -2 3 undo 2\n''') == '3'\n\nassert solution('''\n5 4\n8 -2 3 undo 2\n''') == '3'\n\nassert solution('''\n5 4\n8 -2 3 undo 2\n''') == '3'\n\nassert solution('''\n5 4\n8 -2 3 undo 2\n''') == '3'\n\nassert solution('''\n5 4\n8 -2 3 undo 2\n''') == '3'"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n0 3\\n1 3\\n2 3\\n3 3\\n3\\n0 1\\n1 1\\n2 1\\n3 1\\n2 2\\n0 2\\n0 2\\n0 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n0 2\\n0 2\\n0 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 undo 3\") == \"0\"\nassert solution(\"1 2 1 -2 -1\") == \"2\"\nassert solution(\"3 3 -3 -3\") == \"0\"\nassert solution(\"2 1 -3\") == \"1\"\nassert solution(\"2 0\") == \"1\"\n\"\"\""
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\nprint('Hooray!')\n\nSample Input:\n3 6\n1\n2\n1 -1 1\nSample Output:\n0\n\n\"\"\"\n\nimport sys\nimport re\n\nfor line in sys.stdin:\n    stdin = line\nstdin = stdin.split('\\n')\nn, k = [int(x) for x in stdin[0].split()]\nt = stdin[1].split(' ')\n\nprint(n - 1 if int(t[0]) < 0 else (n - 1) + int(t[0]))\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\ntimes = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\nsorted_times = sorted(times, key=lambda x: x[0])\nfinish_time = 0\nresult = []\n\nfor i in range(m):\n    next_time = sorted_times[0][1]\n    sorted_times[0][1] = next_time + 1\n    finish_time += next_time\n    result.append(finish_time)\n    sorted_times.sort(key=lambda x: x[1])\n\nprint(*result)\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\nprint('The code ran Correctly')\n\n\"\"\"\n\nimport sys\nimport os\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"\n\nSample Input:\n3 4\n1 3 4\n2 4 1\n3 5 1\nSample Output:\n10 9 7\n\nSample Input:\n3 4\n1 3 4\n3 2 1\nSample Output:\n11 9 7\n\nExplanation:\nThe two swathers will be completed in the following order:\n1 2\n3 4\n1 2\n3 4\nThe time it takes to process the first two swathers is 6, the time it takes to process the third swather is 9 and the time it takes to process the fourth swather is 7.\n\nSample Input:\n3 4\n1 3 4\n2 4 1\n3 5 1\nSample Output:\n11 9 7\n\nSample Input:\n3 4\n1 3 4\n2 4 1\n3 5 1\nSample Output:\n11 9 7\n\nExplanation:\nThe two swathers will be completed in the following order:\n1 2\n3 4\n1 2\n3 4\nThe time it takes to process the first two swathers is 6, the time it takes to process the third swather is 9 and the time it takes to process the fourth swather is 7.\n\nSample Input:\n3 4\n1 3 4\n3 2 1\nSample Output:\n11 9 7\n\nSample Input:\n5 10\n1 3 4 2 5\n2 2 3 2 1\n3 2 1 1 2\n2 5 3 2 1\n3 2 1 1 2\nSample Output:\n12 12 18 9\n\nSample Input:\n5 10\n1 3 4 2 5\n2 2 3 2 1\n3 2 1 1 2\n2 5 3 2 1\n3 2 1 1 2\nSample Output:\n12 12 18 9\n\nSample Input:\n4 4\n1 3 4\n2 4 1\n3 5 1\n2 1 3\nSample Output:\n10 9 8 7\n\nSample Input:\n4 4\n1 3 4\n2 4 1\n3 5 1\n2 1 3\nSample Output:\n10 9 8 7\n\nSample Input:\n4 4\n1 3 4\n2 4 1\n3 5 1\n2 1 3\nSample Output:\n11 9 8 7\n\nSample Input:\n2 3\n1 2 3\n3 2 1\nSample Output:\n6 7\n\nSample Input:\n1 4\n1 1 1 1\nSample Output:\n1\n\nSample Input:\n2 4\n1 2 3\n1 2 3\nSample Output:\n11 9 7\n\nSample Input:\n2 4\n1 1 1 1\n1 2 3\nSample Output:\n6 7\n\nSample Input:\n3 4\n1 3 4\n2 4 1\n3 5 1\nSample Output:\n11 9 7\n\nSample Input:\n3 4\n1 3 4\n2 4 1\n3 5 1\nSample Output:\n11 9 7\n\nSample Input:\n1 3\n1 1 1\nSample Output:\n1\n\nSample Input:\n1 2\n1 2 1\nSample Output:\n1\n\nSample Input:\n3 4\n1 1 1 1\n1 2 3\n2 4 1\n3 5 1\nSample Output:\n12 12 18 9\n\nSample Input:\n3 4\n1 1 1 1\n1 2 3\n2 4 1\n3 5 1\nSample Output:\n12 12 18 9\n\nSample Input:\n3 4\n1 1 1 1\n1 2 3\n2 4 1\n3 5 1\nSample Output:\n12 12 18 9\n\nSample Input:\n1 2\n1 2 1\nSample Output:\n2\n\nSample Input:\n2 3\n1 2 3\n3 2 1\nSample Output:\n6 7\n\nSample Input:\n2 3\n1 2 3\n3 2 1\nSample Output:\n6 7\n\nSample Input:\n2 3\n1 2 3\n3 2 1\nSample Output:\n6 7\n\nSample Input:\n3 4\n1 3 4\n3 2 1\nSample Output:\n11 9 7\n\nSample Input:\n3 4\n1 3 4\n2 2 1\n3 2 1\nSample Output:\n11 9 7\n\nSample Input:\n3 4\n1 3 4\n2 2 1\n3 2 1\nSample Output:\n11 9 7\n\nSample Input:\n3 4\n1 3 4\n2 2 1\n3 2 1\nSample Output:\n11 9 7\n\nSample Input:\n5 10\n1 3 4 2 5\n2 2 3 2 1\n3 2 1 1 2\n2 5 3 2 1\n3 2 1 1 2\nSample Output:\n12 12 18 9\n\nSample Input:\n5 10\n1 3 4 2 5\n2 2 3 2 1\n3 2 1 1 2\n2 5 3 2 1\n3 2 1 1 2\nSample Output:\n12 12 18 9\n\nSample Input:\n5 10\n1 3 4 2 5\n2 2 3 2 1\n3 2 1 1 2\n2 5 3 2 1\n3 2 1 1 2\nSample Output:\n12 12 18 9\n\nSample Input:\n5 10\n1 3 4 2 5\n2 2 3 2 1\n3 2 1 1 2\n2 5 3 2 1\n3 2 1 1 2\nSample Output:\n12 12 18 9\n\nSample Input:\n5 10\n1 3 4 2 5\n2 2 3 2 1\n3 2 1 1 2\n2 5 3 2 1\n3 2 1 1 2\nSample Output:\n12 12 18 9\n\nSample Input:\n3 4\n1 1 1 1\n1 2 3\n2 4 1\n3 5 1\nSample Output:\n8 7\n\nSample Input:\n3 4\n1 1 1 1\n1 2 3\n2 4 1\n3 5 1\nSample Output:\n8 7\n\nSample Input:\n3 4\n1 1 1 1\n1 2 3\n2 4 1\n3 5 1\nSample Output:\n8 7\n\nSample Input:\n3 4\n1 1 1 1\n1 2 3\n2 4 1\n3 5 1\nSample Output:\n8 7\n\nSample Input:\n3 4\n1 1 1 1\n1 2 3\n2 4 1\n3 5 1\nSample Output:\n8 7\n\nSample Input:\n3 4\n1 1 1 1\n1 2 3\n2 4 1\n3 5 1\nSample Output:\n8 7\n\nSample Input:\n3 4\n1 1 1 1\n1 2 3\n2 4 1\n3 5 1\nSample Output:\n8 7\n\nSample Input:\n1 2\n1 2 1\nSample Output:\n1\n\nSample Input:\n1 2\n1 2 1\nSample Output:\n1\n\nSample Input:\n1 3\n1 2 3\nSample"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n----\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"\n\"\"\""
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n2 2 1\\n3 3 3\\n3 4 2\") == \"12 6 9 10\"\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n1 2 3\\n3 2 1\\n') == '6 7'\n\"\"\"\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 2 3\\n3 2 1\") == \"6 7\"\nassert solution(\"1 5\\n4 2\\n1 2 1 2\") == \"7 5\"\nassert solution(\"1 5\\n1 2 2 3\") == \"7 5\"\n\"\"\"\n\nimport sys\n\nN, M = list(map(int, sys.stdin.readline().strip().split()))\nP = []\nfor _ in range(N):\n    P.append(list(map(int, sys.stdin.readline().strip().split())))\n\nP = [[sum(p)] + p for p in P]\n\nfor i in range(1, N):\n    for j in range(1, M):\n        P[i][j] += min([P[i - 1][k] for k in range(j)])\n\nprint(\" \".join(map(str, P[N - 1][M - 1])))\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 2\n1 2 3 4\n5 2 1\n4 2 1\n3 2 1''') == '''2 4 6 8\n7 6 5 4'''\n\nassert solution('''5 2\n2 5 4 3 1\n4 2 1\n2 3 1\n3 2 1\n3 2 1''') == '''1 3 5 7 9\n3 2 4 6 8'''\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n1 2 3') == '6 7'\n\"\"\"\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\") == \"64 correct\\n665 incorrect\"\nassert solution(\"4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"1\\n3 incorrect\"\n\"\"\"\n\nn = int(input())\ns = input()\nd = dict()\nfor i in range(int(input())):\n    d[input().split()[1]] = input().split()[0]\n\nfor i in range(n):\n    if s[i] in d.keys():\n        if d[s[i]] == 'correct':\n            print(\"1 correct\")\n        else:\n            print(\"1 incorrect\")\n    else:\n        if s[i] in d.values():\n            print(\"1 correct\")\n        else:\n            print(\"1 incorrect\")\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nals mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\nIf you get stuck, check the sample test cases in the problem description.\n\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n\"\n        \"als mollen mollen mollen mollen mollen mollen\\n\"\n        \"4\\n\"\n        \"als when correct\\n\"\n        \"mollen moles correct\\n\"\n        \"mollen destroy correct\\n\"\n        \"mollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\"\"\"\n\nfrom collections import Counter, defaultdict\nimport math\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\") == \"64 correct\\n665 incorrect\"\nassert solution(\"7\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n663 incorrect\"\n\"\"\"\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\") == '64 correct\\n665 incorrect'\nassert solution(\"7\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == '64 correct\\n0 incorrect'\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect') == '64 correct\\n665 incorrect'\n\"\"\""
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\n\"\n        \"mollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\n\"\"\""
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\") == \"64 correct\\n665 incorrect\"\nassert solution(\"7\\nals mollen mollens mollen mollen mollens mollens\") == \"65 correct\\n0 incorrect\"\n\"\"\"\n\n\"\"\"\nID: prp_1_2_d\nTitle: Replace a Character\nDifficulty: Easy\nLanguage: Python3\nAuthor: Prasad Kumar\nStatus: Accepted\nRuntime: 384 ms\nMemory Usage: 15.4 MB\n\"\"\"\n\nimport sys\n\nn = int(input())\ns = input()\nd = {}\nfor i in range(n):\n    t = input()\n    d[t[0]] = t[1]\nfor i in s:\n    print(d[i],end=\"\")\n\n\"\"\"\nID: prp_1_2_e\nTitle: Replace a Character\nDifficulty: Easy\nLanguage: Python3\nAuthor: Prasad Kumar\nStatus: Accepted\nRuntime: 400 ms\nMemory Usage: 15.3 MB\n\"\"\"\n\n\"\"\"\nID: prp_1_2_f\nTitle: Replace a Character\nDifficulty: Easy\nLanguage: Python3\nAuthor: Prasad Kumar\nStatus: Accepted\nRuntime: 304 ms\nMemory Usage: 15.3 MB\n\"\"\"\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64\\n665\"\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\") == \"64\\n665\"\nassert solution(\"8\\nmow when correct\\nmow when correct\") == \"16\\n16\"\nassert solution(\"8\\ndog when correct\\nbag when correct\\nbag when correct\") == \"32\\n32\"\nassert solution(\"8\\ncat when correct\\ncat when correct\") == \"8\\n8\"\n\"\"\"\n\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\nmoll moll moll moll moll''') == 'correct'\nassert solution('''6\nmoll moll moll moll moll moll''') == 'incorrect'\nassert solution('''4\nmoll moll moll moll moll''') == 'correct'\nassert solution('''7\nmoll moll moll moll moll moll''') == 'correct'\nassert solution('''7\nmoll moll moll moll moll moll''') == 'correct'\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\n\n---\nSOLUTION: https://app.codility.com/demo/results/training1RQ8D3-7K4/\n\n\"\"\"\n\nfrom itertools import combinations, product\nfrom collections import Counter\nimport math"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('6') == '4'\nassert solution('11') == '8'\nassert solution('9') == '1'\nassert solution('20') == '5'\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\nprint(solution(\"4\\n2 3 4 3\"))\n\n-----Constraints-----\n1 <= N <= 100000\n1 <= t_i <= 1000000\n\n\"\"\""
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 4 3\\n2 3 4') == '7'\nassert solution('3 3 3 3\\n1 2 3') == '2'\n\n-----Problem-----\nFarmer John has recently bought $n$ tree seedlings that he wants to plant in his yard. He is now in the middle of planting them, so he needs to know when is the best moment to plant them. He is also very superstitious and believes that planting the seeds at the right moment results in better yields. He needs your help, but you only have $k$ days to help him and you are on your way to your own house.\n\nCan you help him?\n\n-----Input-----\nThe first line of the input contains a single integer $n$ ($1 \\leq n \\leq 100000$) denoting the number of seedlings that he is planting. Then the next line contains $n$ integers $t_ 1,t_ 2,t_ 3,...,t_ n$ ($1 \\leq t_ i\\leq 1000000$) denoting the number of days it takes for the $i$th tree to grow, where $1 < i < n$.\n\n-----Output-----\nThe output should contain a single integer $k$ ($1 \\leq k \\leq 1000000$), denoting the earliest moment when the party can take place.\n\n-----Examples-----\nSample Input:\n4\n2 3 4 3\nSample Output:\n7\nExplanation:\nJohn can plant the seeds at:\n\nDay: 1 (Plant 1, 2, 3),\nDay: 3 (Plant 2, 3, 4),\nDay: 4 (Plant 3, 4, plant 1),\nDay: 7 (Plant 4, plant 1, plant 2).\n\n\"\"\""
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\n\n------Hints------\nUse heapq module from the Python standard library. The heapq.heappush and heapq.heappop methods are convenient ways to push and pop items from the heap.\n\n------Bite-------\nBite 97. The first line of the input gives you the number of seedlings.\n\nBite 98. Define a heapq.\n\nBite 99. You should use the heappop function to pop the next smallest number of days.\n\nBite 100. For each of the $N$ numbers you should count the number of days for this number (remembering that the last number can be bigger than the last day).\n\nBite 101. For the first day you want to use the heappush function to push the number 1.\n\nBite 102. For the second day you want to use the heappop function to pop the number 1.\n\nBite 103. The second day is the earliest day when the party can take place.\n\nBite 104. It's easier to start from the end of the list of numbers and work our way to the start.\n\n\"\"\"\n\n\nfrom collections import Counter\nfrom heapq import heappush, heappop\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\n\"\"\"\n\nfrom math import ceil\n\nn = int(input())\nt = [int(x) for x in input().split()]\n\nt.sort(reverse=True)\n\nsum_t = sum(t)\nm = ceil(sum_t/2)\n\nres = 0\n\nfor i in range(len(t)):\n    res += t[i]\n    if res >= m:\n        break\n\nprint(i + 2)\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(sample_input) == \"7\"\n\n\"\"\""
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('3\\n1 2 3\\n') == '3'\nassert solution('7\\n6 5 4 3 2 1\\n') == '7'\nassert solution('11\\n1 2 3 4 5 6 7 8 9 10 11\\n') == '14'\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\n3\n4\n3\nSample Output:\n7\n\n''') == '''2\n3\n4\n3\nSample Output:\n7\n'''\n\n-----Notes-----\nIn the first sample, the earliest day when the party can be organized is 2, because the earliest possible day after planting the first tree is 2. The earliest day when the party can be organized is 2, because the earliest possible day after planting the second tree is 3. The earliest day when the party can be organized is 2, because the earliest possible day after planting the third tree is 4.\n\nIn the second sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the third sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the fourth sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the fifth sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the sixth sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the seventh sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the eighth sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the ninth sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the tenth sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the eleventh sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the twelfth sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the thirteenth sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the fourteenth sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the fifteenth sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the sixteenth sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the seventeenth sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the eighteenth sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the nineteenth sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the twentieth sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the twenty-first sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the twenty-second sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the twenty-third sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the twenty-fourth sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the twenty-fifth sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the twenty-sixth sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the twenty-seventh sample, the earliest day when the party can be organized is 7, because the earliest possible day after planting the first tree is 2, and the earliest possible day after planting the second tree is 3, and the earliest possible day after planting the third tree is 4.\n\nIn the twenty-eighth sample, the earliest day when the party can be organized is 7, because the earliest possible day"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3.0 0.0\\n2.0 2.0\\n2.0 -1.0\\n4.0 -2.0\\n2.0 2.0\\n1.0 1.0') == '3.0 4.0'\n\nSample Input:\n2\n0.0 0.0\n1.0 0.0\n2.0 1.0\n1.0 1.0\n2.0 0.0\nSample Output:\n0.0 0.0\n1.0 0.0\n2.0 1.0\n0.0 1.0\n2.0 0.0\n\"\"\"\n\nimport sys\n\nn = int(input())"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n0.0 1.0\\n0.0 2.0\\n1.0 3.0\\n2.0 4.0\\n0.0 5.0\\n1.0 6.0\\n0.0 7.0\\n0.0 8.0\\n0.0 9.0\\n0.0 10.0\\n1.0 11.0\\n2.0 12.0\\n0.0 13.0\\n1.0 14.0\\n2.0 15.0\\n0.0 16.0\\n1.0 17.0\\n0.0 18.0\\n1.0 19.0\\n0.0 20.0\\n1.0 21.0\\n2.0 22.0\\n0.0 23.0\\n1.0 24.0\\n2.0 25.0\\n0.0 26.0\\n1.0 27.0\\n2.0 28.0\\n0.0 29.0\\n1.0 30.0\\n2.0 31.0\\n0.0 32.0\\n1.0 33.0\\n2.0 34.0\\n0.0 35.0\\n1.0 36.0\\n2.0 37.0\\n0.0 38.0\\n1.0 39.0\\n2.0 40.0\\n0.0 41.0\\n1.0 42.0\\n2.0 43.0\\n0.0 44.0\\n1.0 45.0\\n2.0 46.0\\n0.0 47.0\\n1.0 48.0\\n2.0 49.0\\n0.0 50.0\\n1.0 51.0\\n2.0 52.0\\n0.0 53.0\\n1.0 54.0\\n2.0 55.0\\n0.0 56.0\\n1.0 57.0\\n2.0 58.0\\n0.0 59.0\\n1.0 60.0\\n2.0 61.0\\n0.0 62.0\\n1.0 63.0\\n2.0 64.0\\n0.0 65.0\\n1.0 66.0\\n2.0 67.0\\n0.0 68.0\\n1.0 69.0\\n2.0 70.0\\n0.0 71.0\\n1.0 72.0\\n2.0 73.0\\n0.0 74.0\\n1.0 75.0\\n2.0 76.0\\n0.0 77.0\\n1.0 78.0\\n2.0 79.0\\n0.0 80.0\\n1.0 81.0\\n2.0 82.0\\n0.0 83.0\\n1.0 84.0\\n2.0 85.0\\n0.0 86.0\\n1.0 87.0\\n2.0 88.0\\n0.0 89.0\\n1.0 90.0\\n2.0 91.0\\n0.0 92.0\\n1.0 93.0\\n2.0 94.0\\n0.0 95.0\\n1.0 96.0\\n2.0 97.0\\n0.0 98.0\\n1.0 99.0\\n2.0 100.0\\n0.0 101.0\\n1.0 102.0\\n2.0 103.0\\n0.0 104.0\\n1.0 105.0\\n2.0 106.0\\n0.0 107.0\\n1.0 108.0\\n2.0 109.0\\n0.0 110.0\\n1.0 111.0\\n2.0 112.0\\n0.0 113.0\\n1.0 114.0\\n2.0 115.0\\n0.0 116.0\\n1.0 117.0\\n2.0 118.0\\n0.0 119.0\\n1.0 120.0\\n2.0 121.0\\n0.0 122.0\\n1.0 123.0\\n2.0 124.0\\n0.0 125.0\\n1.0 126.0\\n2.0 127.0\\n0.0 128.0\\n1.0 129.0\\n2.0 130.0\\n0.0 131.0\\n1.0 132.0\\n2.0 133.0\\n0.0 134.0\\n1.0 135.0\\n2.0 136.0\\n0.0 137.0\\n1.0 138.0\\n2.0 139.0\\n0.0 140.0\\n1.0 141.0\\n2.0 142.0\\n0.0 143.0\\n1.0 144.0\\n2.0 145.0\\n0.0 146.0\\n1.0 147.0\\n2.0 148.0\\n0.0 149.0\\n1.0 150.0\\n2.0 151.0\\n0.0 152.0\\n1.0 153.0\\n2.0 154.0\\n0.0 155.0\\n1.0 156.0\\n2.0 157.0\\n0.0 158.0\\n1.0 159.0\\n2.0 160.0\\n0.0 161.0\\n1.0 162.0\\n2.0 163.0\\n0.0 164.0\\n1.0 165.0\\n2.0 166.0\\n0.0 167.0\\n1.0 168.0\\n2.0 169.0\\n0.0 170.0\\n1.0 171.0\\n2.0 172.0\\n0.0 173.0\\n1.0 174.0\\n2.0 175.0\\n0.0 176.0\\n1.0 177.0\\n2.0 178.0\\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\\n\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3\n0 0\n1 1\n0 2\n4\n''') == '''\n0.0 0.0\n2.0 2.0\n0.0 4.0\n'''\n\nassert solution('''\n3\n0 0\n1 1\n0 2\n5\n''') == '''\n0.0 0.0\n2.0 2.0\n0.0 4.0\n'''\n\nassert solution('''\n3\n0 0\n1 1\n0 2\n5\n''') == '''\n0.0 0.0\n2.0 2.0\n0.0 4.0\n'''\n\nassert solution('''\n3\n0 0\n1 1\n0 2\n2\n''') == '''\n0.0 0.0\n1.0 1.0\n0.0 2.0\n'''\n\nassert solution('''\n3\n0 0\n1 1\n0 2\n6\n''') == '''\n0.0 0.0\n1.0 1.0\n0.0 2.0\n0.0 5.0\n0.0 7.0\n'''"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '3\\n0 0\\n1 1\\n0 2\\n4'\n) == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution(\n    '3\\n0 0\\n1 1\\n0 2\\n0.5'\n) == '0.0 0.0\\n1.0 1.0\\n0.0 2.0\\n0.0 2.5'\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test) == test_result\nprint(solution(input))\n\n-----Solution-----\n\"\"\"\n\nn = int(stdin.readline())\npolygon = []\nfor _ in range(n):\n    polygon.append(list(map(float, stdin.readline().split())))\n\na = int(stdin.readline())"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n\n\"\"\"\n\nimport math\nimport re"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3\n0 0\n1 1\n0 2\n4\n''') == '''\n0.0 0.0\n2.0 2.0\n0.0 4.0\n'''\n\nassert solution('''\n3\n0 0\n1 1\n0 2\n3\n''') == '''\n0.0 0.0\n2.0 2.0\n0.0 4.0\n'''\n\nassert solution('''\n3\n0 0\n1 1\n0 2\n2\n''') == '''\n0.0 0.0\n2.0 2.0\n0.0 4.0\n'''\n\nassert solution('''\n3\n0 0\n1 1\n0 2\n2\n''') == '''\n0.0 0.0\n2.0 2.0\n0.0 4.0\n'''\n\nassert solution('''\n3\n0 0\n1 1\n0 2\n4\n''') == '''\n0.0 0.0\n2.0 2.0\n0.0 4.0\n'''"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\\n\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"1\"\n\"\"\"\n\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == 2\nassert solution(\"6\") == 3\nassert solution(\"5\") == 2\nassert solution(\"7\") == 3\nassert solution(\"10000\") == 7\n\"\"\""
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '6'\nassert solution('5') == '7'\n\n------Hint----\nYou may notice that the result above is the minimum number of days to print the first $n$ statues, and is also the minimum number of days to print $n$ statues.\n\nYou can simply loop through all possible values of $n$.\n\n\"\"\""
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == 1\nassert solution('2') == 2\nassert solution('3') == 3\nassert solution('4') == 4\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"6\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 1\n\"\"\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == 2\n'''\n\nn = int(input())\n\nc = n % 2"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\n\n-----Notes-----\n\"\"\"\n\nimport math"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '3'\nassert solution('1 1') == '2'\nassert solution('2 1') == '1'\nassert solution('1 1 2 1') == '2'\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n12 16\") == \"34\"\nprint(solution(\"3 1\\n12 16\"))\n'''\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1\\n12 16') == '34'\n\"\"\"\n\na, b, m, sigma = list(map(int, stdin.split(' ')))\nmin_val = 1\nmax_val = a * (m - sigma)\n\nwhile max_val >= min_val:\n    mid_val = (max_val + min_val) // 2\n    if a * (mid_val - sigma) + b * mid_val > m:\n        max_val = mid_val - 1\n    else:\n        min_val = mid_val + 1\n\nprint(max_val)"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 1\\n3 6\\n1 2\") == \"9\"\nassert solution(\"6 1\\n6 1\\n1 2\") == \"9\"\nassert solution(\"1 1\\n1 1\\n1 1\") == \"2\"\n\nSolution\n-----\nfrom __future__ import annotations\nfrom collections import namedtuple\n\nclass point(namedtuple('point', 'x y')):\n    def __add__(self, other: point) -> point:\n        return point(self.x + other.x, self.y + other.y)\n    def __sub__(self, other: point) -> point:\n        return point(self.x - other.x, self.y - other.y)\n    def __mul__(self, other: int) -> point:\n        return point(self.x * other, self.y * other)\n    def __floordiv__(self, other: int) -> point:\n        return point(self.x // other, self.y // other)"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n12 16') == '34'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('3 1\\n12 16') == '34'\n\"\"\""
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('2 2') == '3'\nassert solution('3 2') == '5'\nassert solution('5 2') == '9'\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1\\n12 16') == '34'\nassert solution('1 1\\n0 1') == '1'\nassert solution('1 1\\n0 0') == '0'\nassert solution('3 1\\n20 15') == '40'\nassert solution('4 4\\n4 6') == '16'\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n12 16\") == \"34\"\nassert solution(\"0 1\\n100 1\") == \"200\"\n\"\"\"\n\na, b = map(int, stdin.readline().split())\nm, s = map(int, stdin.readline().split())\n\np = a * m + b * s\nprint(p)\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n12 16') == '34'\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n\"\"\"\n\nimport math"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 1\") == \"3\"\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().strip().split()))\n\nunique = set()\nfor i in range(n):\n    unique.add(a[i])\n\nl = len(unique)\nprint(l)"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n\"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 1') == '3'\n\"\"\"\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 1') == '3'\nassert solution('3\\n2 3 1') == '1'\nassert solution('2\\n1 2') == '1'\nassert solution('1\\n1') == '1'\nassert solution('3\\n1 2 3') == '1'\n\n------Solution------\n\"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1\") == 3\n\"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 1') == 3\nassert solution('4\\n3 2 2 1') == 3\nassert solution('4\\n2 2 2 2') == 4\n\nSample Output:\n1\n3\n2\n\n'''\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n'''\n\nimport collections"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == b\nprint(solution(a))\n\n-----\n\"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\nlanguages = [int(c) for c in sys.stdin.readline().split()]\n\ndp = [[0 for i in range(n)] for j in range(n)]\ndp[0][0] = languages[0]\nfor i in range(n):\n    for j in range(i + 1):\n        if j == 0:\n            dp[i][j] = languages[i] + dp[i-1][j]\n        else:\n            dp[i][j] = max(dp[i-1][j-1] - 1, languages[i] + dp[i-1][j])\n\nprint(dp[-1][-1])\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1.0) == 1088\n\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1) == 1088\n\"\"\"\n\nimport math\n\nclass RomanNumerals:\n    ROMAN_NUMERALS = {\n        \"I\" : 1,\n        \"V\" : 5,\n        \"X\" : 10,\n        \"L\" : 50,\n        \"C\" : 100,\n        \"D\" : 500,\n        \"M\" : 1000,\n        \"IV\" : 4,\n        \"IX\" : 9,\n        \"XL\" : 40,\n        \"XC\" : 90,\n        \"CD\" : 400,\n        \"CM\" : 900\n    }\n    def to_roman(self, n: int) -> str:\n        if n < 1 or n > 3999:\n            raise ValueError()\n\n        result = \"\"\n        for (key, value) in self.ROMAN_NUMERALS.items():\n            while value <= n:\n                n -= value\n                result += key\n        return result\n\nclass Solution:\n    def solution(self, m: float) -> int:\n        roman_numerals = RomanNumerals()\n        return int(roman_numerals.to_roman(m * 10 ** 3))"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1.0') == '1088'\nassert solution('2.1') == '2111'\nassert solution('2.5') == '2468'\nassert solution('3.14') == '3940'\nassert solution('3.89') == '3940'\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1.0\") == \"1088\"\nassert solution(\"6.8\") == \"695\"\nassert solution(\"0.1\") == \"73\"\nassert solution(\"9.7\") == \"939\"\nassert solution(\"0.5\") == \"97\"\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1.0') == '1088'\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1.0) == 1088\nassert solution(0.6) == 648\nassert solution(1.1) == 1352\nassert solution(2.3) == 2484\nassert solution(1000) == 5900\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.0\") == \"1088\"\nprint(\"Tests passed\")\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1.0') == '1088'\n\"\"\"\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1.0') == '1088'\nassert solution('5.7') == '585'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.0') == '1088'\nassert solution('10.0') == '1088'\nassert solution('100.0') == '1088'\nassert solution('1000.0') == '1088'\nassert solution('4.5') == '1088'\n\"\"\"\n\n\"\"\"\nThe rule for converting a number from one base to another base is as follows:\n\nConvert the number into base 10 (decimal).\nDivide the number by the base and round the answer down to the nearest integer.\nMultiply the answer by the base and convert the answer back into base 10.\nFor example, to convert 43 into base 4 you first convert 43 to base 10, then divide by 4, then round down to the nearest integer, and finally convert the answer back into base 4:\n\n43 / 4 = 10\n10 / 4 = 2\n2 / 4 = 0\n0 / 4 = 0\n0 * 4 = 0\n0 * 4 = 0\n0 * 4 = 0\n0 / 4 = 0\n0 / 4 = 0\n0 / 4 = 0\n2 / 4 = 0\n2 / 4 = 0\n2 / 4 = 0\n0 + 0 + 0 + 2 = 2\nIn general, for decimal base b, the algorithm is as follows:\n\nConvert the number into base b.\nDivide the number by the base and round down to the nearest integer.\nMultiply the answer by the base and convert the answer back into base b.\nFor example, to convert 43 into base 2 you first convert 43 to base 10, then divide by 2, then round down to the nearest integer, and finally convert the answer back into base 2:\n\n43 / 2 = 21\n21 / 2 = 10\n10 / 2 = 5\n5 / 2 = 2\n2 / 2 = 1\n1 / 2 = 0\n0 / 2 = 0\n1 * 2 = 2\n0 + 0 + 0 + 1 = 1\n\nComplexity\n\nO(log b) where b is the base of the given number.\n\n\"\"\""
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 4\\n\") == \"25.000000000\\n25.000000000\\n25.000000000\\n25.000000000\"\n\nassert solution(\"4 1\\n0 0 0 5\\n0 0 5 0\\n0 5 0 0\\n5 0 0 0\\n2 2 2 2\\n1 1 1 1\") == \"4.000000000\\n4.000000000\\n4.000000000\\n4.000000000\"\n\nassert solution(\"0 4\\n0 5 5 5\\n0 5 5 5\\n0 5 5 5\\n5 5 5 5\\n5 5 5 5\\n2 2 2 2\\n1 1 1 1\") == \"4.000000000\\n4.000000000\\n4.000000000\\n4.000000000\"\n\nassert solution(\"0 0\\n0 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n1 1\\n1 1\\n2 1\\n3 1\\n0 1\\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 4\\n-5 -5 -5 0\\n-5 -5 -5 5\\n0 5 0 5\\n0 5 5 5\\n\") == \"25.0\"\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 1\n100.00 25.00 -25.00\n100.00 0.00 25.00\n100.00 25.00 0.00''') == '25.0 25.0 25.0'\n\nassert solution('''1 1\n100.00 0.00 0.00\n''') == '100.0'\n\nassert solution('''2 1\n100.00 -20.00 -20.00\n100.00 20.00 20.00\n''') == '200.0 200.0'\n\nassert solution('''0 1\n50.00 0.00 0.00\n''') == '50.0'\n\nassert solution('''3 1\n100.00 0.00 0.00\n0.00 25.00 0.00\n-25.00 0.00 25.00\n''') == '25.0 25.0'"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 4\\n100.0 100.0 100.0\\n100.0 200.0 100.0\\n100.0 100.0 200.0\\n100.0 200.0 200.0\\n\") == \"25.0 25.0 25.0 25.0\"\nassert solution(\"0 4\\n2.0 5.0 10.0\\n5.0 6.0 5.0\\n2.0 5.0 7.0\\n5.0 7.0 6.0\") == \"7.0 2.0 5.0 6.0\"\n\"\"\"\n\nimport numpy as np\nfrom collections import defaultdict\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n100 -100 0 100\\n0 0 0 100\\n100 100 0 100\\n100 100 100 100') == '25.000000000\\n25.000000000\\n25.000000000\\n25.000000000'\n\nassert solution('1 2\\n1000 0 0 1000\\n0 0 0 1000') == '1000.000000'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''0 4\n100.0000000 0.0000000 100.0000000\n100.0000000 100.0000000 100.0000000\n100.0000000 100.0000000 0.0000000\n100.0000000 100.0000000 0.0000000\n''') == '25.000000000\\n25.000000000\\n25.000000000\\n25.000000000'\n\nassert solution('''0 4\n50.0000000 50.0000000 0.0000000\n50.0000000 50.0000000 0.0000000\n50.0000000 0.0000000 100.0000000\n50.0000000 0.0000000 100.0000000\n''') == '25.000000000\\n25.000000000\\n25.000000000\\n25.000000000'\n\nassert solution('''0 4\n0.0000000 50.0000000 50.0000000\n50.0000000 50.0000000 50.0000000\n0.0000000 0.0000000 100.0000000\n0.0000000 0.0000000 100.0000000\n''') == '25.000000000\\n25.000000000\\n25.000000000\\n25.000000000'\n\nassert solution('''0 4\n100.0000000 0.0000000 100.0000000\n100.0000000 100.0000000 100.0000000\n0.0000000 100.0000000 0.0000000\n0.0000000 100.0000000 0.0000000\n''') == '25.000000000\\n25.000000000\\n25.000000000\\n25.000000000'\n'''\n\n'''"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 4') == '25.000000000'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0\\n1\\n100 100 100') == '0.10000000'\n\n---\nSample Input:\n1 4\n0 0 0\n100 100 100\n100 100 100\nSample Output:\n0.50000000\n---\nSample Input:\n0 4\n50.5 50.5 50.5\n50.5 50.5 50.5\n50.5 50.5 50.5\nSample Output:\n0.250000000\n\"\"\"\n\nimport math\nimport numpy as np"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 4\\n2 1 2 3\\n0 2 2 3\") == \"25.0\\n25.0\\n25.0\\n25.0\"\nassert solution(\"0 4\\n2 1 2 3\\n0 0 0 3\") == \"25.0\\n25.0\\n25.0\\n25.0\"\nassert solution(\"0 4\\n2 1 2 3\\n1 0 0 3\") == \"25.0\\n25.0\\n25.0\\n25.0\"\nassert solution(\"0 4\\n2 1 2 3\\n0 0 0 4\") == \"25.0\\n25.0\\n25.0\\n25.0\"\n\nSample Input:\n0 4\nSample Output:\n25.0\n25.0\n25.0\n25.0\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 4') == '25.000000000\\n25.000000000\\n25.000000000\\n25.000000000'\n    \n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\n\nimport re"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA DA DA NE NE'"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\n\nimport fileinput"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4\\n3\\n4\\n5\\n6\\n7') == 'DA DA DA NE NE NE'\nassert solution('2 3\\n4\\n6\\n8') == 'NE NE NE NE NE'\nassert solution('10 2\\n2\\n6\\n10\\n14\\n18\\n22\\n26\\n30\\n34') == 'NE NE NE NE NE NE NE NE NE NE NE NE NE NE NE NE'\n'''\n\nfrom collections import Counter\n\nn, w, h = map(int, input().split())\na = [int(input()) for _ in range(n)]\na = Counter(a)\nans = []\nfor i, j in a.items():\n    if i < w and j == 1:\n        ans.append('DA')\n    else:\n        ans.append('NE')\nprint(*ans, sep='\\n')\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"DA\"\nassert solution(\"10 10 10\") == \"NE\"\nassert solution(\"1 1 1 1 1 1\") == \"DA\"\nassert solution(\"1 1 1 1 1 1\") == \"NE\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1\") == \"NE\"\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 'DA'\nassert solution('3\\n4\\n5\\n') == 'DA'\nassert solution('2\\n4\\n6\\n8\\n') == 'NE'\nassert solution('1\\n2\\n3\\n4\\n5\\n') == 'NE'\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\""
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7\\n') == 'DA DA DA NE NE'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == 'DA\\nDA\\nDA\\nNE\\nNE'\nassert solution('5 3 4\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100') == 'DA\\nDA\\nDA\\nDA\\nDA\\nDA\\nDA\\nDA\\nDA\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3') == 'DA'\nassert solution('2\\n4\\n6') == 'NE'\nassert solution('2\\n4\\n5') == 'DA'\nassert solution('1\\n3\\n4') == 'NE'\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2\n0 0\n7 42''') == 6\nassert solution('''2\n0 0\n0 42''') == 0\n'''\n\nimport sys\nimport os\nfrom collections import defaultdict\n\nsys.path.append(os.path.abspath(os.path.dirname(__file__) + '/' + '../Day1'))\nfrom day1 import process_input\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\n-----Notes-----\nFor each photograph taken, you should test whether the car must have been going at least as fast as this speed $d$ miles per hour; if it was going faster, this photograph is irrelevant to the problem, since you\u2019ll know that the car was going faster than this in the next photograph.\n\nFor each photograph, you should test whether the car was going at least as fast as this speed $d$ miles per hour; if it was going faster, then you know that the car must have been going at least as fast as this speed $d$ miles per hour in the previous photograph.\n\nThe code in the editor will need to access the input by reading the entire contents of the input before processing any of it, so if you want to use input from a file, you\u2019ll need to create a helper file that creates an input variable with the contents of the file.\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('hi') == ''\nassert solution('aaa') == ''\nassert solution('7 42') == '6'\nassert solution('7 42\\n0 0') == '6'\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n7 42\") == \"6\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\nsys.stdin = open(\"input.txt\", \"r\")\nsys.stdout = open(\"output.txt\", \"w\")"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '2\\n0 0\\n7 42'\n) == '6'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n0 0\\n7 42\") == \"6\"\n\"\"\""
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0\\n7 42\") == \"6\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2\\n3 4') == '10'\n\n-----Notes-----\nYou can assume that no two photos will be taken at the same time or in the same place.\n'''\n\nimport math"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2\n0 0\n7 42\n''') == '6'\n\nprint(solution(stdin.rstrip()))\n\nsolution(stdin.rstrip())\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0 0\\n7 42\") == \"6\"\n\"\"\"\n\nimport sys\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\n\"\"\""
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\nprint(solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\"))\nassert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\nprint(solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\"))\nassert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\nprint(solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\"))\nassert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\nprint(solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\"))\nassert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\nprint(solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\"))\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n'\n                '-> A\\n'\n                '-> B\\n'\n                '-> B\\n'\n                '-> A\\n'\n                '-> A\\n'\n                '-> B\\n'\n                '-> A\\n') == 'correct'\nassert solution('5\\n'\n                '-> A\\n'\n                '-> B\\n'\n                '-> A\\n'\n                '-> C\\n'\n                '-> B\\n'\n                '-> C\\n'\n                '-> A\\n') == '2'\nassert solution('7\\n'\n                '-> A\\n'\n                '-> B\\n'\n                '-> A\\n'\n                '-> C\\n'\n                '-> B\\n'\n                '-> A\\n'\n                '-> A\\n') == '2'\nassert solution('5\\n'\n                '-> A\\n'\n                '-> B\\n'\n                '-> B\\n'\n                '-> A\\n'\n                '-> C\\n'\n                '-> A\\n'\n                '-> C\\n') == '1'\nassert solution('7\\n'\n                '-> A\\n'\n                '-> B\\n'\n                '-> A\\n'\n                '-> C\\n'\n                '-> A\\n'\n                '-> C\\n'\n                '-> B\\n') == '4'\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\nALICE -> BOB\\nALICE BOB -> CARL') == 'correct'\n\"\"\"\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\nassert solution(\"2\\nALICE -> BOB\\nALICE BOB -> CARL\") == \"1\"\nassert solution(\"1\\nALICE -> BOB\") == \"correct\"\n\"\"\"\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n->ALICE\\n->BOB\\nALICE BOB -> CARL\\n') == 'correct'\n\n\"\"\"\nimport collections\nimport typing as t\nimport unittest\n\nimport itertools\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\n\") == \"correct\"\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n\"\"\") == \"correct\"\n\nassert solution(\"\"\"\n-> M\n-> N\nM N -> P\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n-> P\n-> Q\n-> P\nP -> Q\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n-> B\n-> A\nA B -> C\nB -> C\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n-> A\n-> B\nA -> B -> A\n\"\"\") == \"1\""
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n2\n-> FIZZ\n-> BUZZ\nFIZZ -> BUZZ -> FIZZBUZZ\nBUZZ -> FIZZ\n\"\"\"\n) == 'correct'\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\n\"\"\"\n\n\"\"\"\nExplanation:\n\nWe know that the number of candidates is constant and that the last line is all ***. Therefore, we know the total number of votes. We know that in the total number of votes, there should be at least 2 winners. This means that there will be at least 2 candidates with a majority of votes.\n\nThis is a simple majority problem. We have already seen this problem in class. The algorithm is just a simple iteration over the list of votes.\n\nThe running time is O(n) where n is the length of the list of votes.\n\nThe space complexity is O(1) because we do not use any additional data structures.\n\"\"\""
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Runoff!\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Runoff!'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Runoff!'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Runoff!'\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Penny Franklin\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***''') == \"Connie Froggatt\"\n\nassert solution('''Juan John\nJuanita Doe\nNettie Stevens\nJuan John\nNettie Stevens\nJuanita Doe\nNettie Stevens\nJuan John\nNettie Stevens\nJuan John\nNettie Stevens\n***''') == \"Juan John\"\n\nassert solution('''Tracey Emily\nFannie Nelson\nNana O'Brien\nJazlyn Parker\nNana O'Brien\nNana O'Brien\nTracey Emily\nFannie Nelson\nJazlyn Parker\nNana O'Brien\nJazlyn Parker\nNana O'Brien\nTracey Emily\nJazlyn Parker\n***''') == \"Tracey Emily\"\n\nassert solution('''Barbara Jon\nBarbara Tom\nBarbara Bob\nTracey Bob\nJazlyn Bob\nJazlyn Bob\nBarbara Jon\nBarbara Tom\nBarbara Bob\nTracey Bob\nJazlyn Bob\nBarbara Jon\nBarbara Tom\nBarbara Bob\n***''') == \"Runoff!\"\n\nassert solution('''Bennie George\nGeorge Bush\nBarbara Obama\nBennie George\nGeorge Bush\nBarbara Obama\nBennie George\nGeorge Bush\nBarbara Obama\nBennie George\nGeorge Bush\nBarbara Obama\nBennie George\nGeorge Bush\nBarbara Obama\nBennie George\nGeorge Bush\nBarbara Obama\n***''') == \"Bennie George\""
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n\")!= \"Runoff!\"\n\nprint('The code ran Correctly')\n\"\"\"\n\n\"\"\"\n---- SOLUTION ----\nimport re"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin_lines) == stdout_lines\nprint(stdout_lines)\n\nInput:\nPenny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***\nOutput:\nConnie Froggatt\n'''\n\nimport re"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Runoff!'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Runoff!'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Runoff!'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Runoff!'\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Runoff!\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Runoff!'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner') == 'Runoff!'\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(STRIIN) == OUTPUT\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\nJabba-the-Hutt') == '1'\nassert solution('2\\nJabba-the-Hutt Huttese\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic') == '1'\nassert solution('2\\nJabba-the-Hutt Huttese\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\\nPolly Beria Fortuna Cacadurine\\nSpencer Sylvester Storm\\nFran Mottola Shan') == '1'\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == 2\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic') == '2'\n\nassert solution('2\\nFran\\nIan\\nPolly\\nSpencer') == '0'\n\nassert solution('5\\nBib-Fortuna\\nChewbacca\\nJabba-the-Hutt\\nChewbacca\\nBib-Fortuna\\nJabba-the-Hutt\\nChewbacca') == '3'\n\nassert solution('3\\nBib-Fortuna\\nChewbacca\\nJabba-the-Hutt') == '0'\n\nassert solution('10\\nBib-Fortuna\\nChewbacca\\nJabba-the-Hutt\\nChewbacca\\nBib-Fortuna\\nJabba-the-Hutt\\nChewbacca\\nBib-Fortuna\\nJabba-the-Hutt\\nChewbacca\\nBib-Fortuna') == '5'"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\nassert solution(\"4\\nFrancesca-Mestre Fran Mestre Francisca Fran Mestre Fran\\nFrancesca Fran Mestre Fran Francisca\") == \"2\"\n\n-----Notes-----\nThe universe of this problem is infinite, so the number of characters you\u2019d need to remember for a particular conversation isn\u2019t limited by the length of the language.\n\nThe number of characters is small enough that you should be able to create a list of character names and languages, then follow up with a brute force method to determine whether the character is able to converse with everyone else in the cantina.\n\"\"\"\n\nfrom typing import Tuple\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'\nassert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'\nassert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'\n\nimport sys"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdi) == result\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\"\"\"\n\nimport sys\nimport itertools\n\nstdin = open(sys.stdin)\n\nn = int(stdin.readline())\n\nchars = {}\n\nfor i in range(n):\n    char_name, char_languages = stdin.readline().strip().split()\n    for language in char_languages.split(' '):\n        if language not in chars:\n            chars[language] = [char_name]\n        else:\n            chars[language].append(char_name)\n\nchars = {k: list(set(v)) for k, v in chars.items()}\n\nm = {k: 0 for k in chars.keys()}\n\nfor i in itertools.combinations(chars.keys(), 2):\n    c1, c2 = i\n    for char1 in chars[c1]:\n        for char2 in chars[c2]:\n            if char1 in stdin.readline().strip().split(' ') and char2 in stdin.readline().strip().split(' '):\n                m[c1] += 1\n                break\n\nmin_set = 0\n\nfor i in m.values():\n    min_set = max(min_set, i)\n\nprint(min_set)\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n\"\"\"\n) == \"2\"\n\"\"\"\nHow it is used: Here you will learn how to parse a text and create a network in NetworkX.\n\nPrecondition: No\n\"\"\""
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == 900\n\"\"\"\n\nimport numpy as np\n\nN, B, H, W = map(int, stdin.readline().split())\n\ncost = np.zeros((H, W))\nfor i in range(H):\n    cost[i] = np.array(list(map(int, stdin.readline().split())))\n\ntotal_cost = 0\nfor i in range(H):\n    for j in range(W):\n        if cost[i][j] == 0:\n            continue\n        for k in range(j, W):\n            if cost[i][k] == 0:\n                break\n        else:\n            total_cost += cost[i][j]"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\\n') == '900'\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 1000 2 3\n200\n0 2 2\n300\n27 3 20''') == '900'\n\nimport math"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20'\n) == '900'\nassert solution(\n    '3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\\n9 1 2'\n) == '900'\nassert solution(\n    '3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\\n9 1 2\\n1 0'\n) == '1100'\nassert solution(\n    '3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\\n9 1 2\\n1 0\\n0 2'\n) == '800'\nassert solution(\n    '3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\\n9 1 2\\n1 0\\n0 2\\n1 0'\n) == '1100'\n\nprint('Hooray!')"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 1000 2 3\n200\n0 2 2\n300\n27 3 20''') == '900'\nassert solution('''3 1000 2 3\n200\n0 2 2\n300\n27 3 20\n''') =='stay home'\nassert solution('''3 1000 2 3\n200\n0 2 2\n300\n27 3 20\n''') =='stay home'\nassert solution('''3 1000 2 3\n200\n0 2 2\n300\n27 3 20\n''') == '900'\n'''\n\n1\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n2\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20\n\n3\n3 100 2 3\n200\n0 2 2\n300\n27 3 20"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n\n-----Constraints-----\n$1 \\leq N \\leq 200$\n$1 \\leq B \\leq 500000$\n$1 \\leq H \\leq 18$\n$1 \\leq W \\leq 13$\n$1 \\leq p \\leq 10000$\n0 \\leq a \\leq 1000$\nThe input is always valid.\nThere are no negative numbers in the input.\n'''"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n\nSample Input:\n3 1000 2 3\n200\n0 2 2\n300\n27 3 20\nSample Output:\nstay home\n\"\"\"\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n\nimport sys\n\nn, budget, h, w = [int(x) for x in sys.stdin.readline().split()]\nprices = [int(x) for x in sys.stdin.readline().split()]\nbeds = [int(x) for x in sys.stdin.readline().split()]\n\nm = 10 ** 9\n\nfor p, b in zip(prices, beds):\n    if b <= n:\n        m = min(m, p * b)"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\""
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"C D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"C D F G C D F G F C\") == \"none\"\nassert solution(\"C D F F C D F F G C\") == \"A# C D# F G\"\nassert solution(\"C D F F C D F F G C\") == \"A# C D# F G\"\nassert solution(\"C D F G D C D F F G C\") == \"none\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\nC D F D C D F F F C\") == \"A# C D# F\"\n\n\"\"\"\n\nimport itertools\nimport math\n\nclass Solution:\n    def __init__(self, lines: str) -> None:\n        self.lines = [line for line in lines.split('\\n') if len(line.strip()) > 0]\n        self.length = len(self.lines)\n        self.scale = []\n        self.notes = {}\n        self.index = {}\n\n    def solve(self) -> None:\n        self.getNotes()\n        self.getScale()\n\n    def getNotes(self) -> None:\n        for i, line in enumerate(self.lines):\n            self.notes[line] = i\n\n    def getScale(self) -> None:\n        for k in range(self.length):\n            self.scale.append(self.getScaleForIndex(k))\n\n    def getScaleForIndex(self, k: int) -> list:\n        temp = []\n        for i in range(k, k + 12):\n            temp.append(self.lines[self.notes[self.lines[i]]])\n        return temp\n\n    def getScaleForInterval(self, intervals: list) -> list:\n        interval = self.getInterval(self.lines[k], self.lines[k + intervals[0]], intervals[1])\n        if interval == 0:\n            return self.getScaleForIndex(k)\n        else:\n            return self.getScaleForIndex(k + intervals[0])\n\n    def getInterval(self, k: str, v: str, intervals: int) -> int:\n        if k == v:\n            return 0\n        else:\n            return intervals + self.getInterval(k, v, intervals)"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\nC D F D C D F F F C') == 'A# C D# F'\n\n\"\"\"\n\nimport re\n\ns = stdin.strip()\nn = int(s)\nnotes = s.split('\\n')\n\nnotes_set = set(notes)\nnotes_set.add('A')\nnotes_set.add('B')\nnotes_set.add('C')\nnotes_set.add('D')\nnotes_set.add('E')\nnotes_set.add('F')\nnotes_set.add('G')\n\nnotes_dict = {}\nfor note in notes_set:\n    n = note\n    notes_dict[note] = set([note])\n    while n[-1].isdigit():\n        n = n + '#'\n        notes_dict[note].add(n)"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('A') == 'A#'\nassert solution('D') == 'D#'\nassert solution('G') == 'G#'\n\nassert solution('A#') == 'A#'\nassert solution('C') == 'C#'\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('C D F D C D F F F C') == 'A# C D# F'\nassert solution('C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E G C D E"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nC D F D C D F F F C') == 'A# C D# F'\nassert solution('6\\nA C D F G A A B') == 'C C# D C# E D# C# F E F#'\n\n\"\"\""
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('C D F D C D F F F C ') == 'A# C D# F'\nassert solution('C D F D C D F F F C C D D D C D C D C D D C D D C D C D C D D C D D C D D C D D C D C D C D D C D C D C D D C D D C D D C D C D D C D D C D D C D D C D C D D C D D C D C D C D D C D D C D D C D D C D D C D C D D C D D C D D C D D C D D C D C D D C D D C D C D C D D C D C D D C D C D D C D D C D C D C D C D D C D C D C D C D C D C D C D C D C D D C D C D C D C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''12\nC D E G A B C5 C D E F G A B\n''') == 'A# C D# F G'\nassert solution('''12\nC D E G A B C5 C D E F G A B\n''') == 'none'\nassert solution('''8\nE D C G F A B G F C E D\n''') == 'A# C D# F G G# B'\nassert solution('''8\nF G A B G F C E D F G\n''') == 'A# C D# F G G# B'\nassert solution('''8\nA B C G F G G G A B\n''') == 'A# C D# F G G# B'\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABCDFF\") == \"A# C D# F\"\nassert solution(\"CDEFGHIJKL\") == \"A C D# F# G# A#\"\nassert solution(\"C D F D C D F F F C\") == \"A# C D# F#\"\nassert solution(\"G F G G F F G F F G F G F G F F G F G F G G\") == \"A G B# G A\"\nassert solution
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\nC D F D C D F F F C') == 'A# C D# F'\nassert solution('4\\nD G A D G A D G A D G A D G A D G A') == 'none'\nassert solution('4\\nD G F D G F D G F D G F D G F D G F D G F D G F') == 'A D F# D G# B'\n\n----\n1.\nThere are 5 notes.\n2.\nThe song is a sequence of the 5 notes.\n3.\nLet us define the major scale as the sequence of the notes:\n$A$, $A\\sharp$, $B$, $C$, $C\\sharp$, $D$, $D\\sharp$, $E$, $F$, $F\\sharp$, $G$, $G\\sharp$, $A$.\n4.\nThe list of all major scales consists of two different ways:\nA.\n$A$, $B$, $C$, $D$, $E$, $F$, $G$, $A$.\n$A$ is the starting note, $A\\sharp$ is the first note in the sequence, $B$ is the second note in the sequence, $C$ is the third note in the sequence, $D$ is the fourth note in the sequence, $E$ is the fifth note in the sequence, $F$ is the sixth note in the sequence, $G$ is the seventh note in the sequence, and $A$ is the last note in the sequence.\nB.\n$A\\sharp$, $C$, $D$, $E$, $F$, $G$, $A$.\n$A\\sharp$ is the first note in the sequence, $C$ is the second note in the sequence, $D$ is the third note in the sequence, $E$ is the fourth note in the sequence, $F$ is the fifth note in the sequence, $G$ is the sixth note in the sequence, and $A$ is the last note in the sequence.\n5.\nFind all major scales that use only notes from the list of notes given in 4.\n6.\nThe number of major scales that use only notes from the list of notes given in 4 is 7.\n7.\nThe major scales that use only notes from the list of notes given in 4 are:\n$A$, $A\\sharp$, $B$, $C$, $C\\sharp$, $D$, $D\\sharp$, $E$, $F$, $F\\sharp$, $G$, $G\\sharp$, $A$.\n8.\nThe list of all major scales consists of two different ways:\nA.\n$A$, $B$, $C$, $D$, $E$, $F$, $G$, $A$.\n$A$ is the starting note, $A\\sharp$ is the first note in the sequence, $B$ is the second note in the sequence, $C$ is the third note in the sequence, $D$ is the fourth note in the sequence, $E$ is the fifth note in the sequence, $F$ is the sixth note in the sequence, $G$ is the seventh note in the sequence, and $A$ is the last note in the sequence.\nB.\n$A\\sharp$, $C$, $D$, $E$, $F$, $G$, $A$.\n$A\\sharp$ is the first note in the sequence, $C$ is the second note in the sequence, $D$ is the third note in the sequence, $E$ is the fourth note in the sequence, $F$ is the fifth note in the sequence, $G$ is the sixth note in the sequence, and $A$ is the last note in the sequence.\n9.\nThe list of all major scales consists of two different ways:\nA.\n$A$, $B$, $C$, $D$, $E$, $F$, $G$, $A$.\n$A$ is the starting note, $A\\sharp$ is the first note in the sequence, $B$ is the second note in the sequence, $C$ is the third note in the sequence, $D$ is the fourth note in the sequence, $E$ is the fifth note in the sequence, $F$ is the sixth note in the sequence, $G$ is the seventh note in the sequence, and $A$ is the last note in the sequence.\nB.\n$A\\sharp$, $C$, $D$, $E$, $F$, $G$, $A$.\n$A\\sharp$ is the first note in the sequence, $C$ is the second note in the sequence, $D$ is the third note in the sequence, $E$ is the fourth note in the sequence, $F$ is the fifth note in the sequence, $G$ is the sixth note in the sequence, and $A$ is the last note in the sequence.\n10.\nThe list of all major scales consists of two different ways:\nA.\n$A$, $B$, $C$, $D$, $E$, $F$, $G$, $A$.\n$A$ is the starting note, $A\\sharp$ is the first note in the sequence, $B$ is the second note in the sequence, $C$ is the third note in the sequence, $D$ is the fourth note in the sequence, $E$ is the fifth note in the sequence, $F$ is the sixth note in the sequence, $G$ is the seventh note in the sequence, and $A$ is the last note in the sequence.\nB.\n$A\\sharp$, $C$, $D$, $E$, $F$, $G$, $A$.\n$A\\sharp$ is the first note in the sequence, $C$ is the second note in the sequence, $D$ is the third note in the sequence, $E$ is the fourth note in the sequence, $F$ is the fifth note in the sequence, $G$ is the sixth note in the sequence, and $A$ is the last note in the sequence.\n11.\nThe list of all major scales consists of two different ways:\nA.\n$A$, $B$, $C$, $D$, $E$, $F$, $G$, $A$.\n$A$ is the starting note, $A\\sharp$ is the first note in the sequence, $B$ is the second note in the sequence, $C$ is the third note in the sequence, $D$ is the fourth note in the sequence, $E$ is the fifth note in the sequence, $F$ is"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"hj\u00e4rter, \u00f6ster, tv\u00e5 hj\u00e4rter, tv\u00e5 \u00f6ster, dreiv\u00e4rder\") == \"hj\u00e4rter, \u00f6ster, tv\u00e5 hj\u00e4rter, tv\u00e5 \u00f6ster, dreiv\u00e4rder\"\n\"\"\""
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ju ae va\") == \"dae ju ae va\"\nassert solution(\"dae ju ae va\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ju ae va\") == \"haer talar vi rikssvenska\"\n\"\"\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt vi\") == \"haer talar vi rikssvenska\"\n\"\"\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt va traeligt dae ae ju\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ae ju traeligt va traeligt dae ae ju\") == \"haer talar vi rikssvenska\"\n\"\"\""
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\nassert solution('dae ju traeligt va') == 'dae ju traeligt va'\n\"\"\""
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ju vad traeligt va\") == \"dae ae ju vad traeligt va\"\nassert solution(\"dae ju vad vad traeligt va\") == \"dae ae ju vad vad traeligt va\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\nassert solution('d\u00e4r g\u00e5r alls bra') == 'd\u00e4r g\u00e5r alls bra'\nassert solution('h\u00f6g\u00e5s bra') == 'h\u00f6g\u00e5s bra'\nassert solution('men nu \u00e4r det h\u00f6g\u00e5r') =='men nu \u00e4r det h\u00f6g\u00e5r'\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt vaan\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ju traeligt va\") == \"dae ju traeligt va\"\nassert solution(\"dae ju traeligt van\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ae ju traeligt vaan\") == \"haer talar vi rikssvenska\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\nassert solution('toi huuiautodae ae ju traeligt va') == 'toi huuiautodae ae ju traeligt va'\nassert solution('ju taan ae ju traeligt va') == 'ju taan ae ju traeligt va'\nassert solution('sve huuiautodae ae ju traeligt va') =='sve huuiautodae ae ju traeligt va'\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('dae ju traeligt va') == 'haer talar vi rikssvenska'\nassert solution('dae ju traeligt va dae ju traeligt va') == 'haer talar vi rikssvenska'\nassert solution('dae ju traeligt va dae ju ju traeligt va') == 'haer talar vi rikssvenska'\n\"\"\"\n\nimport re\nimport sys\n\ns = sys.stdin.read().split()\nfor word in s:\n    if len(re.findall('a', word)) / len(word) >= 0.4:\n        print('dae ae ju traeligt va')\n    else:\n        print('haer talar vi rikssvenska')"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"5 6\\n\".splitlines()[0].split()\n) == \"E..E#\"\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\""
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\".join([\".#.#.#\", \".#....\", \"..#.#.\", \"#..#..\", \"....#.\", \".##.#.\", \".#..#.\", \".#.#.\"])) == \".E.#E\", \"First\"\nassert solution(\"\".join([\".#....\", \"...##.\", \"...#.#\", \"..#.#.\", \"#...#.\", \".###..\", \".##...\", \"...#..\"])) == \"E.#.#.\", \"Second\"\nassert solution(\"\".join([\".#.#..\", \"..##.#\", \"###.#.\", \".###..\", \".##...\", \".....#\", \"...##.\", \"...#..\"])) == \"..E..#\", \"Third\"\nprint('All tests passed.')\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(15000)\n\n\nclass Node:\n    def __init__(self, x, y, node):\n        self.x = x\n        self.y = y\n        self.node = node\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\nassert solution('......\\n......\\n##...#\\n......\\n......') == '......\\n......\\n##E.E#\\n......\\n......'\nassert solution('#....\\n..#..\\n......\\n......\\n......') == '#....\\n..#..\\nE.E.#\\n......\\n......'\nassert solution('......\\n......\\n......\\n......\\n......') == '......\\n......\\n......\\n......\\nE.E.#'\n\nSample Input:\n6 5\n##.#.#\n##...#\n......\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\n\n\"\"\""
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('....#.#..#....##.#....##.##...#...#.##....#.#..#..##...#.#....#..#.#..#....#.#..#....#..#..#..#.##..') == 'E..E#E#E.#E..E...E.#E.#E...E#E.#E.#E..E.#E..E#E.#E...E'\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\n\"\"\"\n\n\"\"\"\nSolution:\n\n- We start at the top left corner of the matrix.\n- We try to place a coffee shop by checking that each cell has a land cell adjacent to it.\n- If we cannot find any cells that satisfy this constraint, we move to the next row.\n- If we do find a cell that is adjacent to the last one, we place a coffee shop there and move to the next row.\n- If we have checked all rows of the matrix and not found any solution, we return False. Otherwise, we return the solution in the form of a 2d matrix.\n\n\"\"\""
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('.....\\n#####\\n....#\\n#####\\n....#\\n#####\\n.....') == 'EEEEE\\nEEE#E\\nE#E#E\\nE#E#E\\nE#E#E'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('.') == '.'\nassert solution('.#') == '.'\nassert solution('..') == '.'\nassert solution('..#') == '#'\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\""
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\n\"\"\"\n\n\n\"\"\"\n[\uc81c\ubaa9\uac19\uc74c]\n\ub09c\uc774\ub3c4: \uc911\ud558\n\n\uc720\ud615: \uadf8\ub9ac\ub514\n\n\ubb38\uc81c:\n\ub124 \uac1c\uc758 \uac15\uc758\ub97c \ub4e3\uace0 \uc774\ub4e4\uc758 \uc218\uc5c5\uc744 \ubaa8\ub450 \ub9c8\uce58\ub824\uba74 \ucd5c\uc18c \uba87 \ubc88\uc758 \uac15\uc758\ubd80\ud130 \ud560 \uac83\uc778\uc9c0\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4.\n\n\uc608\ub97c \ub4e4\uc5b4, 3\uac1c\uc758 \uac15\uc758\ub85c \ub9c8\uc9c0\ub9c9 \ub0a0\uc744 \ub9de\uc744 \uc218 \uc788\uc73c\uba74 3\ubc88\uc758 \uac15\uc758\ub294 \ub05d\ub098\ub294 \ub0a0\uc774\ub2e4. \uc774\ub807\uac8c \ucd5c\uc18c \uba87 \ubc88\uc758 \uac15\uc758\uac00 \ud544\uc694\ud55c\uc9c0 \uad6c\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc2dc\uc624.\n\n\uc785\ub825:\n\ub450 \uc815\uc218 A, B, C, D\ub97c \ucc28\ub840\ub85c \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ud574 \uc785\ub825\ud55c\ub2e4.\n\n\ucd9c\ub825:\n\ub450 \uc815\uc218\ub97c \ucc28\ub840\ub85c \ucd9c\ub825\ud558\ub294\ub370, \ud574\ub2f9 \uc22b\uc790\uac00 \ud574\ub2f9 \ub0a0\uc774 \ub418\uba74 \uc885\ub8cc\ud55c\ub2e4.\n\n\uc704 \uacbd\uc6b0 3\ubc88\uc758 \uac15\uc758\ub294 \ub05d\ub098\uae30 \uc804\uc5d0 \ub05d\ub098\ub294\ub2e4. \uadf8\ub7ec\ubbc0\ub85c 3\ubc88\uc758 \uac15\uc758\ub294 \ub9c8\uc9c0\ub9c9\uc774 \uc544\ub2c8\ub2e4.\n\n\uc785\ub825 \uc608\uc2dc   \ucd9c\ub825 \uc608\uc2dc\n12 8 2 4 10 3 25 14\n3 2 1 1 1\n\"\"\""
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(12 8 2 4 10 3 25 14) == '12 10 3 8 4 2'\n\"\"\"\n\n\"\"\"\nExplanation\n\nIn the first tower, the tallest boxes are 1, 2, and 3. \nThe middle height is 2, and the lowest box is 1.\n\nIn the second tower, the tallest box is 4, and the lowest box is 3.\n\nIn the third tower, the tallest boxes are 5 and 14.\n\n\"\"\"\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\n\"\"\"\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\""
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\"\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\""
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\nassert solution(\"5 4 3 2 1 8\") == \"5 4 3 2 1\"\nassert solution(\"7 7 1 1 1 1 1\") == \"7 7 1 1 1 1 1\"\nassert solution(\"7 7 7 7 7 7 7 7 7 7\") == \"7 7 7 7 7 7 7 7 7 7\"\nassert solution(\"7 7 1 1 1 1 1 1\") == \"7 7 1 1 1 1 1 1\"\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n'''"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 0 3\") == \"4\"\nassert solution(\"1 0 2\") == \"0\"\nassert solution(\"2 3 1\") == \"2\"\nassert solution(\"8 1 1\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 0 3\") == \"4\"\nassert solution(\"9 1 3\") == \"7\"\nassert solution(\"9 9 9\") == \"0\"\nassert solution(\"1 0 1\") == \"0\"\nassert solution(\"1 0 1\") == \"0\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 0 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 0 3\") == \"4\"\nassert solution(\"3 0 5\") == \"2\"\nassert solution(\"4 0 3\") == \"3\"\nassert solution(\"9 0 3\") == \"4\"\nassert solution(\"3 0 5\") == \"2\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 0 3\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 0 3') == '4'\nassert solution('8 5 1') == '7'\nassert solution('1 0 0') == '1'\nassert solution('9 9 9') == '9'\n\"\"\"\n\ne, f, c = [int(i) for i in input().split()]\nprint(e + f + c - e * c // e)\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('1 2 0') == 2\nassert solution('1 2 3') == 4\nassert solution('4 2 1') == 2\nassert solution('1 0 0') == 1\n\"\"\""
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '9 0 3'\n) == '4'\n\n\"\"\""
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 0 3\") == \"4\"\nassert solution(\"1 0 1\") == \"2\"\nassert solution(\"0 1 2\") == \"1\"\nassert solution(\"1 1 0\") == \"0\"\nassert solution(\"0 0 0\") == \"0\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9 0 3') == '4'\n\"\"\"\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1010\") == \"12\"\n\"\"\""
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1010') == '12'\nassert solution('10111010') == '9'\nassert solution('10111010') == '9'\nassert solution('11111101') == '15'"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1010') == '12'\nassert solution('11111111') == '255'\nassert solution('10101010') == '242'\nassert solution('110011011101') == '439'\nassert solution('110110110') == '498'\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1010\") == \"12\"\nprint(solution(\"1010\"))\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1010') == '12'\nassert solution('10101010') == '226'\nassert solution('101010101010') == '1287696'\nassert solution('1010101010') == '1287696'\n\"\"\"\n\nfrom collections import deque\nimport re"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1010') == '12'\nprint(solution('1010'))\n\nassert solution('1011') == '13'\nprint(solution('1011'))\n\nassert solution('101101') == '52'\nprint(solution('101101'))\n\nassert solution('1101111') == '293'\nprint(solution('1101111'))\n\nassert solution('11100111') == '352'\nprint(solution('11100111'))"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1111') == '15'\nassert solution('1010') == '12'"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1010') == '12'\nprint(solution('1010'))"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1010\") == \"12\"\nprint(solution(\"1010\"))\n\nassert solution(\"10101010\") == \"144\"\nprint(solution(\"10101010\"))\n\nassert solution(\"1010101010\") == \"144\"\nprint(solution(\"1010101010\"))\n\nassert solution(\"101010101010\") == \"144\"\nprint(solution(\"101010101010\"))\n\nassert solution(\"101010101010\") == \"144\"\nprint(solution(\"101010101010\"))"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1010') == '12'\nassert solution('1101') == '13'\nassert solution('1100') == '10'\nassert solution('1100100') == '12'\nassert solution('10101') == '14'\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n..o\\no..\\n') == '2'\nprint(solution(input()))\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == \"2\"\nprint(solution(\"2 3\\n..o\\no..\"))"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == 2\n\"\"\""
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == 2\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\no..\\noo.\") == \"2\"\nassert solution(\"2 3\\noooo\\nnnoo\\n..o.\") == \"1\"\n\"\"\"\n\nr, s = map(int, input().split())\na = []\nfor i in range(r):\n    a.append(input())\n\nc = 0\n\nfor i in range(r):\n    for j in range(s):\n        if a[i][j] == \"o\":\n            for x, y in [(0, 1), (0, -1), (1, 0), (-1, 0), (-1, 1), (1, 1), (1, -1), (-1, -1)]:\n                if 0 <= i+x < r and 0 <= j+y < s and a[i+x][j+y] == \"o\":\n                    c += 1\n\nprint(c)\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\no..\\noo.\") == 2\n\"\"\""
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == 2\nassert solution(\"2 3\\n..o\\no..\\noo.\") == 1\nassert solution(\"2 3\\noo..\\noo.\") == 0\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == 2\n\"\"\"\n\nclass Solution:\n    def __init__(self, nR, nS, arr):\n        self.nR = nR\n        self.nS = nS\n        self.arr = arr\n        self.totals = 0\n\n    def solution(self):\n        # init the matrix\n        m = []\n        for _ in range(self.nR):\n            m.append([0] * self.nS)\n\n        for i in range(self.nR):\n            for j in range(self.nS):\n                m[i][j] = self.arr[i][j]\n\n        def search(m: list, i: int, j: int, tot: int, visited: list):\n            if not 0 <= i < len(m) or not 0 <= j < len(m[0]):\n                return\n            if m[i][j] == \"o\" and visited[i][j] == False:\n                visited[i][j] = True\n                tot += 1\n                search(m, i - 1, j, tot, visited)\n                search(m, i + 1, j, tot, visited)\n                search(m, i, j - 1, tot, visited)\n                search(m, i, j + 1, tot, visited)\n        \n        visited = []\n        for _ in range(self.nR):\n            visited.append([False] * self.nS)\n        for i in range(self.nR):\n            for j in range(self.nS):\n                if m[i][j] == \"o\" and visited[i][j] == False:\n                    search(m, i, j, 0, visited)\n                    self.totals += 1\n\n        print(self.totals)\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == 2\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n..o\\no..') == 2\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\"\n) == \"LADICA\"\nassert solution(\n    \"5 2\\n1 2\\n1 3\\n1 2\\n1 3\"\n) == \"SMECE\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n\"\"\"\n\nimport sys\nimport bisect\n\nN, L = [int(num) for num in sys.stdin.readline().split()]"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\nassert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nSMECE\\nSMECE\\nSMECE\\nLADICA\"\nassert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nSMECE\\nLADICA\\nLADICA\\nSMECE\"\n\"\"\""
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\n\nassert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"SMECE\\nSMECE\\nSMECE\\nLADICA\\nLADICA\"\n\nprint(\"Tests passed.\")"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == expected_result\n\n\"\"\""
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n3 1\\n1 2') == 'LADICA'\nassert solution('5 2\\n1 2\\n2 3\\n3 1\\n2 3\\n3 4') == 'SMECE'\nassert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'SMECE'\nassert solution('5 3\\n1 3\\n1 3\\n1 2\\n1 3\\n1 2') == 'SMECE'\nassert solution('5 3\\n1 1\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n\nassert solution('10 5\\n1 2\\n1 3\\n1 2\\n4 5\\n1 3\\n1 2\\n1 3\\n1 2\\n4 5\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n\nassert solution('10 5\\n4 5\\n1 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\\n4 5\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nSMECE\\nLADICA\\nLADICA\\nLADICA\\nSMECE\\nLADICA\\nLADICA\\nLADICA\\nSMECE\\nLADICA\\nLADICA'\n\nassert solution('10 5\\n4 5\\n1 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\\n4 5\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nSMECE\\nLADICA\\nLADICA\\nLADICA\\nSMECE\\nLADICA\\nLADICA\\nLADICA\\nSMECE\\nLADICA\\nLADICA'\n\nassert solution('10 5\\n4 5\\n1 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\\n4 5\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nSMECE\\nLADICA\\nLADICA\\nLADICA\\nSMECE\\nLADICA\\nLADICA\\nLADICA\\nSMECE\\nLADICA\\nLADICA'\n\n\"\"\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA'\nassert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA'\nassert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA'\nassert solution('5 3\\n1 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'SMECE'\n\"\"\"\n\nfrom typing import Dict, List"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\nassert solution('1\\n0') == '1 2'\n\nassert solution('2\\n0 1') == '1 2'\n\nassert solution('4\\n0 1 2 3') == '1 2 3 0'\nassert solution('4\\n2 3 1 0') == '0 1 2 3'\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2\\n0') == '2 1'\nassert solution('3\\n1 1 1') == '3 1 2'\nassert solution('2\\n0 0') == '1 2'\nassert solution('5\\n2 2 1 2 2') == '5 2 4 1 3'\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n0') == '1 2'\nassert solution('3\\n1 0') == '1 2 3'\nassert solution('6\\n0 0 0 0 0 1 1') == '1 3 4 5 6 2'\n\"\"\"\n\nfrom typing import List\nfrom math import floor, ceil"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n0') == '1 2'\nprint(solution('2\\n1 0'))\nassert solution('2\\n0 1') == '1 2'\nprint(solution('3\\n0 1 2'))\n\nimport math"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n0') == '1 2'\n\n-----Problem-----\nJames and his friends are walking around the block when a huge gust blows them around. In particular, a gust blows James's friend, Amy, out of the line. James can only walk two steps at a time, and Amy can only walk three steps at a time. In how many possible ways can they walk around the block?\n\n-----Solution-----\nYou can solve this problem by using dynamic programming. Let $F(n,m)$ be the number of ways to walk around the block with $n$ steps left and $m$ steps remaining. Two ways to walk around the block:\n\nWalk from step $i$ with $i$ steps left.\nWalk from step $i$ with $m-i$ steps left.\nThen, we can calculate $F(n,m) = F(n-1,m)+F(n,m-1)$ for $n>1$. $F(1,m) = 1$, and $F(n,0) = 1$ for $n>0$.\n\n### Visualization\nIn the figure below, $F(n,m)$ shows the number of ways to walk around the block for $n$ steps left and $m$ steps remaining.\n\n![](./images/dynamic-programming-steps-m.png)\n\n### Examples\n$$F(2,1) = 1$$\n$$F(3,2) = 2$$\n$$F(4,3) = 3$$\n$$F(5,4) = 5$$\n$$F(6,5) = 8$$\n$$F(7,6) = 13$$\n$$F(8,7) = 21$$\n$$F(9,8) = 34$$\n$$F(10,9) = 55$$\n$$F(11,10) = 89$$\n$$F(12,11) = 144$$\n$$F(13,12) = 233$$\n$$F(14,13) = 377$$\n$$F(15,14) = 610$$\n$$F(16,15) = 987$$\n$$F(17,16) = 1597$$\n$$F(18,17) = 2584$$\n$$F(19,18) = 4181$$\n$$F(20,19) = 6656$$\n$$F(21,20) = 10949$$\n$$F(22,21) = 17103$$\n$$F(23,22) = 27493$$\n$$F(24,23) = 49568$$\n$$F(25,24) = 107527$$\n$$F(26,25) = 170522$$\n$$F(27,26) = 289071$$\n$$F(28,27) = 438010$$\n$$F(29,28) = 668420$$\n$$F(30,29) = 1075900$$\n$$F(31,30) = 1758755$$\n$$F(32,31) = 2789592$$\n$$F(33,32) = 4394564$$\n$$F(34,33) = 691213$$\n$$F(35,34) = 10779224$$\n$$F(36,35) = 17666760$$\n$$F(37,36) = 2783949$$\n$$F(38,37) = 4421166$$\n$$F(39,38) = 6863887$$\n$$F(40,39) = 107901960$$\n$$F(41,40) = 17656101$$\n$$F(42,41) = 2784746$$\n$$F(43,42) = 4425086$$\n$$F(44,43) = 6887565$$\n$$F(45,44) = 1078137560$$\n$$F(46,45) = 17653357$$\n$$F(47,46) = 2784344$$\n$$F(48,47) = 4421788$$\n$$F(49,48) = 6881385$$\n$$F(50,49) = 10777844240$$\n$$F(51,50) = 17644715$$\n$$F(52,51) = 2783195$$\n$$F(53,52) = 4421266$$\n$$F(54,53) = 6876460$$\n$$F(55,54) = 10769844340$$\n$$F(56,55) = 17641414$$\n$$F(57,56) = 2782804$$\n$$F(58,57) = 4421066$$\n$$F(59,58) = 6876217$$\n$$F(60,59) = 10758518380$$\n$$F(61,60) = 17639900$$\n$$F(62,61) = 27841759$$\n$$F(63,62) = 4421510$$\n$$F(64,63) = 6874059$$\n$$F(65,64) = 10776911920$$\n$$F(66,65) = 17644580$$\n$$F(67,66) = 2786180$$\n$$F(68,67) = 4421552$$\n$$F(69,68) = 6874958$$\n$$F(70,69) = 10776258960$$\n$$F(71,70) = 17643840$$\n$$F(72,71) = 2785165$$\n$$F(73,72) = 4421724$$\n$$F(74,73) = 6875105$$\n$$F(75,74) = 10771217840$$\n$$F(76,75) = 17642920$$\n$$F(77,76) = 27847575$$\n$$F(78,77) = 4421876$$\n$$F(79,78) = 6878253$$\n$$F(80,79) = 10759879840$$\n$$F(81,80) = 17642650$$\n$$F(82,81) = 2785195$$\n$$F(83,82) = 4421476$$\n$$F(84,83) = 6877719$$\n$$F(85,84) = 10758969840$$\n$$F(86,85) = 17642560$$\n$$F(87,86) = 2785237$$\n$$F(88,87) = 4421924$$\n$$F(89,88) = 6877861$$\n$$F(90,89) = 10757577950$$\n$$F(91,90) = 17641910$$\n$$F(92,91) = 2785251$$\n$$F(93,92) = 4421472$$\n$$F(94,93) = 6877322$$\n$$F(95,94) = 10757629340$$\n$$F(96,95) = 17641175$$\n$$F(97,96) = 2785273$$\n$$F(98,97) = 4421896$$\n$$F(99,98) = 6877340$$\n$$F(100,99) = 10757524270$$\n\n### Notes\n\n  * This challenge was translated from Miguel Carpente's JavaScript challenge of the same name.\n  * The notation $F(n,m)$, as well as all the challenges in this series are available in my [Basic RegEx](https://edabit.com/collection/8PEq2azWDtAZWPFe2) collection.\n  * You can also [preview the challenges](https://edabit.com/challenge/kYmmQRhEZReLGAySs) in this series.\n\n\"\"\""
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n0\") == \"1 2\"\n\nprint(solution(\"2\\n0\"))\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0\") == \"1 2\"\nassert solution(\"3\\n1 2\") == \"2 1 3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0') == '1 2'\nassert solution('1') == '1 2'\nassert solution('2') == '1 2'\nassert solution('3') == '1 3 2'\nassert solution('4') == '1 3 2'\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n0') == '1 2'\nassert solution('3\\n0 1') == '2 1 3'\nassert solution('4\\n0 1 2 3') == '4 3 2 1'\n\"\"\"\nimport math"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n0') == '1 2'"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n0 1\\n1 2\\n1 2') == '1'\n\"\"\""
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == '1'\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n\") == \"2\"\n\"\"\"\n\nfrom typing import Tuple, List, Set, Dict\nfrom queue import Queue\n\nN, H, L = map(int, stdin.readline().strip().split())\nhorror_movies: List[int] = list(map(int, stdin.readline().strip().split()))\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\nassert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"0\"\nassert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"0\"\nassert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\nassert solution(\"0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n0 3\") == \"0\"\nassert solution(\"0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n0 3\\n0 4\") == \"0\"\nassert solution(\"0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n0 3\\n0 4\\n0 5\") == \"0\"\nassert solution(\"0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n0 3\\n0 4\\n0 5\\n0 6\") == \"0\"\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2') == '1'\n\n\"\"\"\n\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_solution(self):\n        self.assertEqual(solution('6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2'), '1')"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\n\n\"\"\"\n\nimport unittest\nimport sys\nfrom collections import deque, Counter, OrderedDict\nfrom typing import List, Optional, Set, Tuple, Dict\nfrom operator import itemgetter\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2') == '1'\nassert solution('6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2') == '0'\n\"\"\"\n\nN, H, L = list(map(int, input().split(' ')))\nH = set(map(int, input().split(' ')))\nL = []\n\nfor _ in range(L):\n    A, B = list(map(int, input().split(' ')))\n    L.append((A, B))\n    L.append((B, A))\nL = set(L)\nL = list(L)\nL = sorted(L, key=lambda x: x[0])\nL = sorted(L, key=lambda x: x[1])\nL = dict([(i, L.count(i)) for i in L])\n\nprint(L)\nprint(H)\nprint(L[0][0])\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n''') == '1'\n\nassert solution('''\n8 4 3\n0 3\n0 1\n1 2\n3 4\n4 5\n5 6\n2 6\n3 6\n''') == '3'\n\nassert solution('''\n8 4 3\n0 3\n0 1\n1 2\n3 4\n4 5\n5 6\n2 6\n3 6\n''') == '3'\n\nassert solution('''\n8 4 3\n0 3\n0 1\n1 2\n3 4\n4 5\n5 6\n2 6\n3 6\n''') == '3'\n\nassert solution('''\n8 4 3\n0 3\n0 1\n1 2\n3 4\n4 5\n5 6\n2 6\n3 6\n''') == '3'"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3\\n0 1\\n0 2\\n0 3\\n1 2\\n1 3\\n2 3\") == '3'\nassert solution(\"1 2\\n1 2\") == '0'\nassert solution(\"1 1\\n1 1\") == '0'\nassert solution(\"1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\") == '1'\nassert solution(\"1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\") == '0'\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 3 4') == '4 3 1'\nassert solution('3\\n1 3 4')!= '3 1 4'\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\narr = list(map(int, sys.stdin.readline().strip().split()))"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\nassert solution(\"3\\n2 3 4\") == \"impossible\""
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 1\") == \"4 3 1\"\nassert solution(\"1 3 4\") == \"impossible\"\nassert solution(\"5 4 2\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3 4\") == \"4 3 1\"\nassert solution(\"3 4 1\") == \"impossible\"\nassert solution(\"1 1 1\") == \"1 1 1\"\nassert solution(\"3 4 1\") == \"impossible\""
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 3 4') == '4 3 1'\n\"\"\"\n\nn = int(input())\nx = list(map(int, input().split()))\n\nx.sort()\n\ntemp = [x[0]]\ni = 1\nwhile i < n:\n    temp.append(abs(x[i]-x[i-1]))\n    i += 1"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\nassert solution(\"3\\n3 4 1\") == \"impossible\"\nassert solution(\"5\\n4 5 6 7 8\") == \"impossible\"\nassert solution(\"3\\n1 1 2\") == \"impossible\"\n\n\"\"\""
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 3 4') == '4 3 1'\nassert solution('2\\n1 2') == 'impossible'\nassert solution('1\\n1') == 'impossible'\nprint('Test pass.')\n\n-----Problem-----\nIceland has an enormous geothermal field which generates more than half of the country's electricity. There are also large geothermal reservoirs which supply large amounts of heat to towns and cities. \n\nThe current demand for electricity is steadily increasing and a new geothermal power plant is under construction at the North Pole. The power plant consists of a series of vertical pipes connecting a series of large underground reservoirs. \n\nThe geothermal field is divided into $N$ vertical pipes numbered from $1$ to $N$. The $i$-th reservoir supplies heat to the $i$-th pipe. Initially, all the pipes are empty. \n\nThe heat is extracted in the order in which the pipes are filled. \n\nSuppose that the $j$-th pipe is filled first, it will be filled for exactly $T_j$ hours. After filling, the heat will remain in the pipe and cannot be extracted again. \n\nAfter that, the next pipe will be filled, again taking $T_j$ hours. This process continues until all pipes are filled.\n\nAt this stage, the geothermal field is producing half of the total heat needed for the current demand. \n\nThe desired outcome is to find an ordering of the pipes, such that the total amount of heat extracted is the same as the current demand. \n\nGiven the length of the pipes and the values of $T_i$ for each of them, return the number of pipes to be filled, in the order in which they should be filled.\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 3 4') == '4 3 1'\nassert solution('3\\n2 3 4') == 'impossible'\nassert solution('1\\n2') == 'impossible'\nassert solution('2\\n2') == 'impossible'\nassert solution('2\\n1 1') == 'impossible'\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 4\") == \"4 3 1\"\nassert solution(\"1 2 3\") == \"impossible\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\nassert solution(\"3\\n1 3 5\") == \"impossible\"\nassert solution(\"3\\n1 3 2\") == \"impossible\"\nassert solution(\"3\\n1 2 3\") == \"impossible\"\nassert solution(\"3\\n3 2 1\") == \"impossible\"\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 20 15\\n3 10') == '18.400'\n\n\"\"\"\n\nimport math\nimport sys\n\nsys.stdin = open('input.txt')\n\nn, p, k = map(int, sys.stdin.readline().split())\nt = [int(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 20 15') == '18.400'\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 20 15\\\\n3 10\") == \"18.4\"\n\"\"\"\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 20 15\\n3 10') == '18.400'\n\n\"\"\"\n\n\nimport math\nimport sys\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 20 15\", \"3 10\") == \"18.400\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 20 15\\n3 10') == '18.400'\nprint(solution(stdin))\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\nassert solution(\"2 20 15\\n10 15\") == \"40.000\"\nassert solution(\"2 20 15\\n20 15\") == \"40.000\"\n\"\"\"\n\nimport numpy as np\nimport math\n\nn, p, k = map(int, input().split())\narr = np.array(list(map(int, input().split())))\n\narr_1 = np.array([0 for i in range(k)])\nfor i in arr:\n    arr_1[i] += 1\n\nt = p/100\narr_2 = np.array([i*t for i in arr_1])\narr_3 = np.array([i*(1+t) for i in arr_2])\narr_4 = np.array([i*(1+t*2) for i in arr_3])\narr_5 = np.array([i*(1+t*3) for i in arr_4])\narr_6 = np.array([i*(1+t*4) for i in arr_5])\narr_7 = np.array([i*(1+t*5) for i in arr_6])\narr_8 = np.array([i*(1+t*6) for i in arr_7])\narr_9 = np.array([i*(1+t*7) for i in arr_8])\narr_10 = np.array([i*(1+t*8) for i in arr_9])\narr_11 = np.array([i*(1+t*9) for i in arr_10])\narr_12 = np.array([i*(1+t*10) for i in arr_11])\narr_13 = np.array([i*(1+t*11) for i in arr_12])\narr_14 = np.array([i*(1+t*12) for i in arr_13])\narr_15 = np.array([i*(1+t*13) for i in arr_14])\narr_16 = np.array([i*(1+t*14) for i in arr_15])\narr_17 = np.array([i*(1+t*15) for i in arr_16])\narr_18 = np.array([i*(1+t*16) for i in arr_17])\narr_19 = np.array([i*(1+t*17) for i in arr_18])\narr_20 = np.array([i*(1+t*18) for i in arr_19])\narr_21 = np.array([i*(1+t*19) for i in arr_20])\narr_22 = np.array([i*(1+t*20) for i in arr_21])\narr_23 = np.array([i*(1+t*21) for i in arr_22])\narr_24 = np.array([i*(1+t*22) for i in arr_23])\narr_25 = np.array([i*(1+t*23) for i in arr_24])\narr_26 = np.array([i*(1+t*24) for i in arr_25])\narr_27 = np.array([i*(1+t*25) for i in arr_26])\narr_28 = np.array([i*(1+t*26) for i in arr_27])\narr_29 = np.array([i*(1+t*27) for i in arr_28])\narr_30 = np.array([i*(1+t*28) for i in arr_29])\narr_31 = np.array([i*(1+t*29) for i in arr_30])\narr_32 = np.array([i*(1+t*30) for i in arr_31])\narr_33 = np.array([i*(1+t*31) for i in arr_32])\narr_34 = np.array([i*(1+t*32) for i in arr_33])\narr_35 = np.array([i*(1+t*33) for i in arr_34])\narr_36 = np.array([i*(1+t*34) for i in arr_35])\narr_37 = np.array([i*(1+t*35) for i in arr_36])\narr_38 = np.array([i*(1+t*36) for i in arr_37])\narr_39 = np.array([i*(1+t*37) for i in arr_38])\narr_40 = np.array([i*(1+t*38) for i in arr_39])\narr_41 = np.array([i*(1+t*39) for i in arr_40])\narr_42 = np.array([i*(1+t*40) for i in arr_41])\narr_43 = np.array([i*(1+t*41) for i in arr_42])\narr_44 = np.array([i*(1+t*42) for i in arr_43])\narr_45 = np.array([i*(1+t*43) for i in arr_44])\narr_46 = np.array([i*(1+t*44) for i in arr_45])\narr_47 = np.array([i*(1+t*45) for i in arr_46])\narr_48 = np.array([i*(1+t*46) for i in arr_47])\narr_49 = np.array([i*(1+t*47) for i in arr_48])\narr_50 = np.array([i*(1+t*48) for i in arr_49])\narr_51 = np.array([i*(1+t*49) for i in arr_50])\narr_52 = np.array([i*(1+t*50) for i in arr_51])\narr_53 = np.array([i*(1+t*51) for i in arr_52])\narr_54 = np.array([i*(1+t*52) for i in arr_53])\narr_55 = np.array([i*(1+t*53) for i in arr_54])\narr_56 = np.array([i*(1+t*54) for i in arr_55])\narr_57 = np.array([i*(1+t*55) for i in arr_56])\narr_58 = np.array([i*(1+t*56) for i in arr_57])\narr_59 = np.array([i*(1"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 20 15\\n3 10\") == '18.400'\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 20 15\n3 10''') == '18.400'\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 20 15\") == \"18.400\""
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\\n\") == \"5\"\n\"\"\"\n\nfrom collections import namedtuple\n\nimport sys\n\nPoint = namedtuple('Point', ['x', 'y'])\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\n\nprint(solution())\n-----Notes-----\nFor every position of the grid, it is possible to travel to the nearest safe house or the nearest spy, since there is at least one safe house and one spy.\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(sample_input) == sample_output\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5\n....H\n.....\nS....\n....H\n.....\n''') == '5'\nassert solution('''\n5\n.S...\n....H\n.....\n.....\n''') == '1'\nassert solution('''\n5\n.S....\n....H.\n.....\n.....\n''') == '3'\nassert solution('''\n5\nS....\n....H\n.....\n.....\n''') == '3'\nassert solution('''\n5\nS.S...\n....H\n.....\n.....\n''') == '4'\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == 5\nprint('All tests passed.')\n\n-----Challenge-----\nCan you solve this without using the built-in grid?\n\"\"\"\nimport os\nfrom typing import List\nimport collections\n\nclass Solution:\n    def solve(self, grid: List[str]):\n        houses: List[str] = []\n        spies: List[str] = []\n        for line in grid:\n            for house in line:\n                if house == 'S':\n                    spies.append(house)\n                elif house == 'H':\n                    houses.append(house)\n\n        # build a dict of houses to their distances\n        dist_to_houses: dict = collections.defaultdict(int)\n        for house in houses:\n            visited = {}\n            self.explore(house, visited, dist_to_houses)\n\n        # build a dict of spies to their distances\n        dist_to_spies: dict = collections.defaultdict(int)\n        for spy in spies:\n            visited = {}\n            self.explore(spy, visited, dist_to_spies)\n\n        return max(dist_to_spies.values())\n\n    def explore(self, pos: str, visited: dict, dist_to: dict) -> None:\n        if pos in visited:\n            return\n        visited[pos] = True\n        if pos in dist_to:\n            return\n        curr_dist = 0\n        for neighbor in self.getNeighbors(pos):\n            self.explore(neighbor, visited, dist_to)\n            curr_dist = max(curr_dist, dist_to[neighbor])\n        dist_to[pos] = curr_dist + 1\n\n    def getNeighbors(self, pos: str) -> List[str]:\n        x, y = pos\n        neighbors = []\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            new_x, new_y = x + dx, y + dy\n            if new_x < 0 or new_x >= len(grid) or new_y < 0 or new_y >= len(grid[0]):\n                continue\n            neighbors.append(f'{new_x},{new_y}')\n        return neighbors"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\\n\") == 5\nassert solution(\"5\\n.H..\\n....\\nS....\\n....\\n\") == 4\n\n-----Notes-----\nThe Manhattan distance does not always equal the taxicab distance, however for simplicity\u2019s sake we will always use them to denote distance. The Manhattan distance between two locations (x1,y1) and (x2,y2) is defined as the sum of the absolute value of (x1-x2) and (y1-y2).\n\n\"\"\""
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\nS....\\n....H\\n.....\\n....H\\n.....') == '5'\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\") == \"5\"\n\"\"\""
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"....H\\n.....\\nS....\\n....H\\n.....\\n\") == 5\n\"\"\""
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('S') == '0'\nassert solution('H') == '0'\nassert solution('S.') == '1'\nassert solution('H.') == '1'\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\\n\") == 0\n\"\"\""
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == 0\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == 0\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == '0'\nassert solution(\"4 2 3\\n2 4\\n3 5\") == '0'\n\"\"\"\n\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\n\ub9c1\ud06c\nhttps://www.acmicpc.net/problem/1393\n\n\n\n\ubb38\uc81c\n\uc810\uc2ec\uc2dc\uac04\uc5d0 \ub3c4\ub451\uc774 \ub4e4\uc5b4, \uc77c\ubd80 \ud559\uc0dd\uc774 \uccb4\uc721\ubcf5\uc744 \ub3c4\ub09c\ub2f9\ud588\uc2b5\ub2c8\ub2e4. \ub2e4\ud589\ud788 \uc5ec\ubc8c \uccb4\uc721\ubcf5\uc774 \uc788\ub294 \ud559\uc0dd\uc774 \uc774\ub4e4\uc5d0\uac8c \uccb4\uc721\ubcf5\uc744 \ube4c\ub824\uc8fc\ub824 \ud569\ub2c8\ub2e4. \ud559\uc0dd\ub4e4\uc758 \ubc88\ud638\ub294 \uccb4\uaca9 \uc21c\uc73c\ub85c \ub9e4\uaca8\uc838 \uc788\uc5b4, \ubc14\ub85c \uc55e\ubc88\ud638\uc758 \ud559\uc0dd\uc774\ub098 \ubc14\ub85c \ub4b7\ubc88\ud638\uc758 \ud559\uc0dd\uc5d0\uac8c\ub9cc \uccb4\uc721\ubcf5\uc744 \ube4c\ub824\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, 4\ubc88 \ud559\uc0dd\uc740 3\ubc88 \ud559\uc0dd\uc774\ub098 5\ubc88 \ud559\uc0dd\uc5d0\uac8c\ub9cc \uccb4\uc721\ubcf5\uc744 \ube4c\ub824\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uccb4\uc721\ubcf5\uc774 \uc5c6\uc73c\uba74 \uc218\uc5c5\uc744 \ub4e4\uc744 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \uccb4\uc721\ubcf5\uc744 \uc801\uc808\ud788 \ube4c\ub824 \ucd5c\ub300\ud55c \ub9ce\uc740 \ud559\uc0dd\uc774 \uccb4\uc721\uc218\uc5c5\uc744 \ub4e4\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n\n\uc804\uccb4 \ud559\uc0dd\uc758 \uc218 n, \uccb4\uc721\ubcf5\uc744 \ub3c4\ub09c\ub2f9\ud55c \ud559\uc0dd\ub4e4\uc758 \ubc88\ud638\uac00 \ub2f4\uae34 \ubc30\uc5f4 lost, \uc5ec\ubc8c\uc758 \uccb4\uc721\ubcf5\uc744 \uac00\uc838\uc628 \ud559\uc0dd\ub4e4\uc758 \ubc88\ud638\uac00 \ub2f4\uae34 \ubc30\uc5f4 reserve\uac00 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc8fc\uc5b4\uc9c8 \ub54c, \uccb4\uc721\uc218\uc5c5\uc744 \ub4e4\uc744 \uc218 \uc788\ub294 \ud559\uc0dd\uc758 \ucd5c\ub313\uac12\uc744 return \ud558\ub3c4\ub85d solution \ud568\uc218\ub97c \uc791\uc131\ud574\uc8fc\uc138\uc694.\n\n\uc81c\ud55c\uc0ac\ud56d\n\uc804\uccb4 \ud559\uc0dd\uc758 \uc218\ub294 2\uba85 \uc774\uc0c1 30\uba85 \uc774\ud558\uc785\ub2c8\ub2e4.\n\uccb4\uc721\ubcf5\uc744 \ub3c4\ub09c\ub2f9\ud55c \ud559\uc0dd\uc758 \uc218\ub294 1\uba85 \uc774\uc0c1 n\uba85 \uc774\ud558\uc774\uace0 \uc911\ubcf5\ub418\ub294 \ubc88\ud638\ub294 \uc5c6\uc2b5\ub2c8\ub2e4.\n\uc5ec\ubc8c\uc758 \uccb4\uc721\ubcf5\uc744 \uac00\uc838\uc628 \ud559\uc0dd\uc758 \uc218\ub294 1\uba85 \uc774\uc0c1 n\uba85 \uc774\ud558\uc774\uace0 \uc911\ubcf5\ub418\ub294 \ubc88\ud638\ub294 \uc5c6\uc2b5\ub2c8\ub2e4.\n\uc5ec\ubc8c \uccb4\uc721\ubcf5\uc774 \uc788\ub294 \ud559\uc0dd\ub9cc \ub2e4\ub978 \ud559\uc0dd\uc5d0\uac8c \uccb4\uc721\ubcf5\uc744 \ube4c\ub824\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc5ec\ubc8c \uccb4\uc721\ubcf5\uc744 \uac00\uc838\uc628 \ud559\uc0dd\uc774 \uccb4\uc721\ubcf5\uc744 \ub3c4\ub09c\ub2f9\ud588\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub54c \uc774 \ud559\uc0dd\uc740 \uccb4\uc721\ubcf5\uc744 \ud558\ub098\ub9cc \ub3c4\ub09c\ub2f9\ud588\ub2e4\uace0 \uac00\uc815\ud558\uba70, \ub0a8\uc740 \uccb4\uc721\ubcf5\uc774 \ud558\ub098\uc774\uae30\uc5d0 \ub2e4\ub978 \ud559\uc0dd\uc5d0\uac8c\ub294 \uccb4\uc721\ubcf5\uc744 \ube4c\ub824\uc904 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\n\uc785\ucd9c\ub825 \uc608\nn    lost    reserve    return\n5    [2, 4]    [1, 3, 5]    5\n5    [2, 4]    [3]    4\n3    [3]    [1]    2\n\uc785\ucd9c\ub825 \uc608 \uc124\uba85\n\uc608\uc81c #1\n1\ubc88 \ud559\uc0dd\uc774 2\ubc88 \ud559\uc0dd\uc5d0\uac8c \uccb4\uc721\ubcf5\uc744 \ube4c\ub824\uc8fc\uace0, 3\ubc88 \ud559\uc0dd\uc774\ub098 5\ubc88 \ud559\uc0dd\uc774 4\ubc88 \ud559\uc0dd\uc5d0\uac8c \uccb4\uc721\ubcf5\uc744 \ube4c\ub824\uc8fc\uba74 \ud559\uc0dd 5\uba85\uc774 \uccb4\uc721\uc218\uc5c5\uc744 \ub4e4\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc608\uc81c #2\n3\ubc88 \ud559\ufffd"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n2 4 5') == '0'\nassert solution('2 4\\n1 3 5') == '0'\nassert solution('5 3 2\\n2 3 1') == '1'\nassert solution('1 1 1 1\\n1 2 3 4') == '0'\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"\n\"\"\"\n\nfrom typing import List\nimport unittest\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n        self.next_num = None\n\nclass Queue:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n        self.len = 0\n        \n    def is_empty(self):\n        return self.head == None\n    \n    def enqueue(self, value):\n        if self.tail is None:\n            self.head = self.tail = Node(value)\n        else:\n            self.tail.next = self.tail = Node(value)\n        self.len += 1\n        \n    def dequeue(self):\n        if self.is_empty():\n            return None\n        else:\n            self.head = self.head.next\n            self.len -= 1\n            \n    def peek(self):\n        return self.head.value"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"\n\"\"\""
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n') == '0.000000000'\nassert solution('1 2\\n') == '0.500000'\nassert solution('2 1\\n') == '0.666666'\nassert solution('1 2\\n') == '0.500000'\nassert solution('2 2\\n') == '0.666666'\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"0.000000\"\nprint(solution(stdin) == stdout)\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n\") == \"0.0\"\n\nassert solution(\"2 2\\n\") == \"1.0\"\n\nassert solution(\"3 3\\n\") == \"0.3333333333333333\"\n\nassert solution(\"5 9\\n\") == \"0.49999999999999994\"\n\nassert solution(\"7 10\\n\") == \"0.69999999999999996\""
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1\\n') == '0.000000000'\nassert solution('0 1\\n') == '0.0000000'\n\"\"\""
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == '0.000000000'\n\"\"\""
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"0.000000\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == '0.000000'\nassert solution('4 4') == '0.75000'\n\"\"\""
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"0.000000\"\n\"\"\"\nimport math"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"0.0\"\nassert solution(\"10 10\") == \"1.0\"\nassert solution(\"100 10\") == \"1.0\"\nassert solution(\"100 10\") == \"1.0\"\nassert solution(\"100 100\") == \"0.0\"\n\"\"\"\n\nimport math\n\nr, c = map(int, input().split())\n\nprint(math.pi * (c ** 2 - r ** 2) / (4 * r))\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"0.000000\"\n\"\"\"\n\na, b = map(float, input().strip().split())\nr = a - b\nprint(f\"{r:.6f}\")\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_01) == test_output_01\nassert solution(test_input_02) == test_output_02\nassert solution(test_input_03) == test_output_03\nassert solution(test_input_04) == test_output_04\nassert solution(test_input_05) == test_output_05\n'''"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 101 102 103 488\") == 2\nassert solution(\"100 200 300 101 102\") == 1\nassert solution(\"103 102 101 488 100\") == 2\n\"\"\"\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100') == '2'\nassert solution('1\\n4') == '0'\nassert solution('2\\n100 200 300 101 102\\n101 102 101 488 100') == '3'\nassert solution('2\\n101 200 300 101 102\\n101 102 101 488 100') == '0'\nassert solution('2\\n100 101 102 103 488\\n100 200 300 101 102\\n101 102 101 488 100') == '2'\n\"\"\""
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\""
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n100 101 102 103\\n100 200 300 101 102\\n101 102 101 488 100\\n101 102 101 488 100\") == \"2\"\nassert solution(\"4\\n100 101 102 103\\n100 200 300 101 102\\n101 102 101 488 100\\n101 102 101 488 100\") == \"2\"\nassert solution(\"3\\n100 101 102 103\\n101 102 101 488 100\\n101 102 101 488 100\") == \"0\"\nassert solution(\"3\\n100 101 102 103\\n100 200 300 101 102\\n101 102 101 488 100\\n100 200 300 101 102\") == \"1\"\nassert solution(\"3\\n100 101 102 103\\n100 200 300 101 102\\n101 102 101 488 100\\n101 102 101 488 100\") == \"2\"\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 101 102 103 488\") == \"2\"\nprint(solution(\"100 101 102 103 488\"))\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n100 200\\n100 200') == '2'\nassert solution('3\\n100 101 102 103\\n100 200 300 101 102\\n103 102 101 488 100') == '2'\nassert solution('3\\n100 101 102 103\\n100 200 300 101 102\\n103 102 101 488 100') == '2'"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\\n') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == 2\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1730\") == \"1729\"\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1730') == '1729'\nassert solution('11') == 'None'\nassert solution('1') == 'None'\nassert solution('2') == '2'\nassert solution('3') == '2'\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"400\") == None\nassert solution(\"8\") == \"7\"\nassert solution(\"14\") == \"13\"\nassert solution(\"19\") == \"17\"\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1730') == '1729'\nassert solution('4') == '1'\nassert solution('11') == 'none'\nassert solution('1') == 'none'"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1730') == '1729'\nassert solution('4') == '3'\nassert solution('42') == '41'\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"5\") == \"5\"\nassert solution(\"21\") == \"13\"\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1730\") == \"1729\"\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1730') == '1729'\nassert solution('10000') == '9999'\nassert solution('7') == '7'\nassert solution('1') == 'none'\nassert solution('20000') == 'none'\n\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == None\nassert solution('1730') == '1729'\nassert solution('12345') == '13'\nassert solution('2') == '1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1730') == '1729'\n\nassert solution('1841') == '1840'\n\nassert solution('1842') == '1843'\n\nassert solution('1840') == '1840'\n\nassert solution('1843') == '1843'"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('65536') == 16\nassert solution('10') == 1\nassert solution('25') == 4\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('65536') == 16\n\"\"\"\n\nfrom math import log10"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"65536\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('65536') == 16\nassert solution('56') == 0\nassert solution('12') == 1\n\"\"\"\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('65536') == 16\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"65536\") == \"16\"\nprint(solution(\"65536\"))\n'''"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"65536\") == 16\nassert solution(\"72\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"65536\") == \"16\"\n\"\"\""
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('65536') == 16\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('65536') == 16\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == '2'\nassert solution(\"3\\n..#\\n..#\\n..#\\nK\") == '-1'\n\n-----\nOn a chessboard, there is a knight and a king at positions (0, 0) and (0, 3) respectively. The knight moves in a straight line in any direction. The king moves in an L-shaped movement. Given the location of the knight and the location of the king, determine whether the knight can catch the king. The knight cannot move outside the board.\n\nFor example, if the king is at position (2, 2) and the knight is at position (1, 2), the knight can move in any of the following four directions: up, down, left, and right. If the king is at position (2, 3) and the knight is at position (1, 3), the king and knight cannot reach.\n\nGiven an array of size 2 x N x M denoting the positions of the king and the knight, where N and M are the dimensions of the chessboard. You need to determine whether the knight can catch the king or not.\n\nInput Format:\nThe first line of the input contains N, M where N denotes the number of rows and M denotes the number of columns. The next N lines contain M space separated values of the row of the king. The next N lines contain M space separated values of the column of the king. The next line contains 2 space separated values, denoting the position of the knight. The next line contains 2 space separated values, denoting the position of the king.\n\nOutput Format:\nPrint \"Yes\" if the knight can catch the king. Otherwise, print \"No\".\n\nConstraints:\n1 <= N, M <= 3\n1 <= value of N, M <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0 <= value of N <= 10\n0 <= value of M <= 10\n0"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n...\\n....\\n....\\n...K\") == '2'\n\n-------\n4\n.....\n.....\n...K\nSample Output:\n'-'\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == \"2\"\nassert solution(\"5\\n.....\\n...#.\\n...#.\\n...#.\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\nK....\") == \"4\"\nassert solution(\"4\\n....\\n....\\n....\\n....\\n....\\nK....\") == \"6\"\nassert solution(\"4\\n...#.\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\nK....\") == \"5\"\nassert solution(\"4\\n....\\n....\\n....\\n...#\\n.....\\n.....\\n.....\\n.....\\nK....\") == \"4\"\n\"\"\""
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == 2\nassert solution(\"8\\n........\\n........\\n........\\n...K..\\n...K..\") == 2\nassert solution(\"8\\n........\\n........\\n........\\n........\\nK..K..\\n........\\n........\") == 4\nassert solution(\"8\\n........\\n........\\n........\\n........\\n........\\n........\\n........\") == 8\nassert solution(\"8\\n....#.#\\n....#.#\\n....#.#\\n....#.#\\n....#.#\\n....#.#\\n....#.#\\n...K.#\") == -1\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == \"2\"\nassert solution(\"4\\n.....\\n.....\\n.....\\n.K...\") == \"-1\"\nassert solution(\"5\\n..#...\\n....#.\\n....##\\n...#..\\n...K..\") == \"6\"\nassert solution(\"4\\n...#..\\n.....\\n.....\\n....#\\n....#\") == \"4\"\nassert solution(\"5\\n....#\\n....#\\n....#\\n....#\\n....#\") == \"0\"\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(print(solution(str(input()))))\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == \"2\"\nassert solution(\"3\\n#..\\n..#\\n#..\\nK\") == \"3\"\nassert solution(\"2\\n#.#\\n#.#\\n#..\\nK\") == \"0\"\nassert solution(\"3\\n#.#\\n#.#\\n#.#\\nK\") == \"3\"\nassert solution(\"3\\n..#\\n..#\\n..#\\nK\") == \"2\"\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\".#.#\") == 2\nassert solution(\".....\") == 0\nassert solution(\"...K\") == 1\nassert solution(\"#..K\") == -1\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\ngrid = [[char for char in sys.stdin.readline().strip()] for _ in range(n)]\ninitial = (0, 0)"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n....\\n....\\n....\\n...K') == '2'\nassert solution('4\\n...K\\n....\\n....\\n....') == '-1'\nassert solution('4\\n...K\\n....\\n....\\n....') == '-1'\n\n---"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n4\n....\n....\n....\n...K\n''') == '2'\nassert solution('''\n4\n.K...\n.K...\n.K...\n...K.\n''') == '0'\nassert solution('''\n4\n...K.\n...K.\n...K.\nK...K\n''') == '-1'\nassert solution('''\n3\n...#\nK...\n....\n''') == '-1'\nassert solution('''\n5\n....#\nK..K.\n..#.#\n....#\nK...#\n''') == '-1'\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == '23'\nassert solution(\"100 3\\n42\\n99\\n1\") == 'too late'\n\n\"\"\""
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'too late'\n\nimport sys\nr, n = map(int, sys.stdin.readline().strip().split())\nrooms = []\nfor _ in range(n):\n    rooms.append(int(sys.stdin.readline()))\n\nrooms.sort()\ni = 0\nwhile i < len(rooms) - 1 and rooms[i] + 1 < rooms[i + 1]:\n    i += 1\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'too late'\n\nassert solution('4 3\\n2\\n3\\n4\\n2\\n') == '4'\n\nassert solution('100 3\\n1\\n3\\n2\\n4\\n5\\n') == 'too late'\n\nassert solution('1 100\\n1') == '1'\n\nassert solution('1 10\\n1') == 'too late'"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\nprint(solution(input()))\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(sample_input)) == str(solution(str(test_input)))\n\nimport json\n\nassert json.loads(solution(str(sample_input))) == json.loads(str(test_result))\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == '23'\n\"\"\""
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\n\"\"\"\n\n\n\nr, n = list(map(int, input().split()))\nbooked = [int(i) for i in input().split()]\n\navail = []\nfor i in range(1, r + 1):\n    if i not in booked:\n        avail.append(i)"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n42\\n3\\n2\\n99\\n1\\n') == '23'"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(sample_input_lines)) == str(sample_output)\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\nassert solution(\"3 5\\n4\\n1\") == \"too late\"\nassert solution(\"1 10\\n1\\n1\\n1\\n1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"playfair example\"\n) == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"UQDQWYTWXLJRNIEKZFVRG\"\nassert solution(\"hello world\") == \"HELLXORLD\"\nassert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\n\"\"\""
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"HJQNGPYKQDMAOIVWABCGISWBYEIX\"\n\nSample Input:\nplayfair\nplayfair example\nSample Output:\nBJLKDNYIYXJKVMLSQXUHQXZJPSFNR\nassert solution(\"playfair\") == \"BJLKDNYIYXJKVMLSQXUHQXZJPSFNR\"\nassert solution(\"playfair example\") == \"BJLKDNYIYXJKVMLSQXUHQXZJPSFNR\"\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"NRAAZXLKXBIMBFZTLYWXUEO\"\n\"\"\"\n\nimport re\nfrom collections import Counter"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\n\"\"\""
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('hide the gold in the tree stump') == 'JWYFZKGSCYSPMUEHVXN'"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"HPKZAPGQGZHWGKSSJHTBUDJXNYDPQS\"\n\n\"\"\""
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"AKZMTBVDFZLMOEISWYGBHRPJXKNTQVW\"\n\"\"\"\n\nimport string"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\nassert solution(\"1.000 1.000 2.000 2.000\\n1.000 1.500\") == \"The gopher can escape through the hole at (1.000, 1.500).\"\n\nimport math\nimport numpy as np\nfrom numpy import *\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\n\"\"\""
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.000 1.000 2.000 2.000\\n1.500 1.500') == 'The gopher cannot escape.\\n'\n\nassert solution('0.000 0.000 -3.000 -3.000\\n1.500 1.500') == 'The gopher cannot escape.\\n'\n\nassert solution('0.010 0.010 0.010 0.010\\n0.010 0.010') == 'The gopher can escape through the hole at (-0.010,0.010).\\n'\n\nassert solution('0.010 -0.010 0.010 -0.010\\n0.010 -0.010') == 'The gopher can escape through the hole at (-0.010,-0.010).\\n'\n\nassert solution('0.010 -0.010 0.010 0.010\\n0.010 0.010') == 'The gopher can escape through the hole at (-0.010,0.010).\\n'"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.500 1.500\") == \"The gopher cannot escape.\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'The gopher cannot escape.'\n\nassert solution('.10.10') == 'The gopher can escape through the hole at (0.1, 0.1).'\n\nassert solution('1 1 1 1') == 'The gopher can escape through the hole at (1, 1).'\n\nassert solution('1.0 1.0 2.0 2.0') == 'The gopher can escape through the hole at (1.0, 1.0).'\n\nassert solution('1.0 1.0 1.0 1.0') == 'The gopher can escape through the hole at (1.0, 1.0).'"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\nassert solution(\"2.000 1.000 2.000 1.000\\n1.500 1.500\") == \"The gopher can escape through the hole at (-1, 0).\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1.000 1.000 2.000 2.000\\n1.500 1.500') == 'The gopher cannot escape.'\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1.000 1.000 2.000 2.000\\n1.500 1.500') == 'The gopher cannot escape.'\nassert solution('1.000 1.000 2.010 2.010\\n1.500 1.500') == 'The gopher cannot escape.'\nassert solution('1.010 1.010 1.010 2.010 2.010\\n1.500 1.500') == 'The gopher can escape through the hole at (1.000,1.010).'\nassert solution('1.010 1.010 2.010 2.010\\n1.500 1.500') == 'The gopher can escape through the hole at (1.000,1.010).'\nassert solution('1.010 2.010 2.010 2.010\\n1.500 1.500') == 'The gopher can escape through the hole at (1.010,1.010).'\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.000 1.000 2.000 2.000\\n1.500 1.500') == 'The gopher cannot escape.'\nassert solution('1.010 1.010 2.010 2.010\\n1.050 1.050') == 'The gopher can escape through the hole at (1.050, 1.050).'\nassert solution('1.010 1.010 2.010 2.010\\n1.099 1.099') == 'The gopher can escape through the hole at (1.099, 1.099).'\nassert solution('1.010 1.010 2.010 2.010\\n1.101 1.101') == 'The gopher can escape through the hole at (1.101, 1.101).'\nassert solution('1.010 1.010 2.010 2.010\\n1.101 1.101') == 'The gopher can escape through the hole at (1.101, 1.101).'\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('5 3\\n4 2\\n3') == 'N'\n\"\"\"\n\nfrom __future__ import print_function"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('3 4\\n3 3\\n0') == 'N'\nassert solution('3 4\\n3 3\\n10') == 'Y'\n\"\"\""
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('1 1\\n1 1\\n0') == 'N'\n\nimport unittest\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('3 4\\n3 3\\n3'), 'Y')\n        self.assertEqual(solution('1 1\\n1 1\\n0'), 'N')"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == 'Y'\nassert solution(\"1 1\\n1 1\\n1\") == 'Y'\nassert solution(\"4 4\\n4 4\\n4\") == 'N'\n\nimport sys"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3) == 'Y'\n\"\"\""
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\nassert solution(\"3 4\\n3 3\\n4\") == \"N\"\nassert solution(\"3 4\\n3 3\\n4\\n4\") == \"N\"\n\n:param stdin: the standard input, which is a string\n:return: the solution, which is a string\n\"\"\""
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('3 4\\n1 2\\n3') == 'Y'\nassert solution('3 4\\n3 3\\n0') == 'N'\nassert solution('3 4\\n3 3\\n6') == 'N'\n\n----\n\nYou live in Grid City, which is composed of integer-numbered streets which run east-west (parallel to the $x$-axis) and integer-numbered avenues which run north-south (parallel to the $y$-axis). The streets and avenues have infinite length, and there is a street for every integer $y$-coordinate and an avenue for every $x$-coordinate. All intersections are labelled by their integer coordinates: for example, avenue $7$ and street $-3$ intersect at $(7,-3)$.\n\nYou drive a special electric car which uses up one unit of electrical charge moving between adjacent intersections: that is, moving either north or south to the next street, or moving east or west to the next avenue. You start on the street and avenue indicated by $a$ and $b$. You want to travel to the street and avenue indicated by $c$ and $d$. Your car can turn left, turn right, go straight through, or make a U-turn at each intersection.\n\nSuppose you know the starting coordinate $(a, b)$, the destination coordinate $(c, d)$, and the number of units of electrical charge in your battery. Determine whether you can travel from the starting coordinate to the destination coordinate using the charge available to you in such a way that your battery is empty when you reach your destination.\n\n-----Input-----\nThe input consists of three lines. The first line contains $a$ followed by $b$, indicating the starting coordinate $(a, b)$ ($-1000 \\le a \\le 1000$; $-1000 \\le b \\le 1000$).\n\nThe second line contains $c$ followed by $d$, indicating the destination coordinate $(c, d)$ ($-1000 \\le c \\le 1000$; $-1000 \\le d \\le 1000$).\n\nThe third line contains an integer $t$ ($0 \\le t \\le 10000$) indicating the initial number of units of electrical charge of your battery.\n\n-----Output-----\nOutput Y if it is possible to move from the starting coordinate to the destination coordinate using exactly $t$ units of electrical charge. Otherwise output N.\n\n-----Examples-----\nSample Input:\n3 4\n3 3\n3\nSample Output:\nY\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n3 3\\n3\\n\") == \"Y\"\nassert solution(\"3 4\\n1 2\\n1\\n\") == \"N\"\nassert solution(\"3 4\\n4 1\\n1\\n\") == \"Y\""
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('3 4\\n3 3\\n1') == 'N'\nassert solution('3 4\\n5 5\\n7') == 'N'\nassert solution('3 4\\n2 4\\n8') == 'N'\nassert solution('3 4\\n1 1\\n8') == 'Y'\n\n-----Problem-----\nK-th multiple\n\nYou are given a number $k$, and a list of integers $L$ with $1 \\le i \\le len(L)$. Let $I$ be the list of $i$s such that $i$ is a multiple of $k$ and $i$ is in $L$. For example, $I = [2,4,6]$.\n\nYou have a box with $N$ balls in it. The $i$th ball in the box is painted $C_i$, and the $j$th ball is painted $C_j$. Your goal is to paint the box with exactly $k$ balls of the same color. What is the minimum number of balls you must pick from the box?\n\n-----Solution-----\n\nWe can guess that the number of balls we will need is the maximum of the maximum number of balls that we can have in an interval of length $k$ and the total number of balls in $L$.\n\nIf we can do this for each interval of length $k$, we can construct the interval of length $k$ for each interval of length $k$ and check whether it can be filled.\n\nTo check whether we can fill an interval of length $k$ with $n$ balls, we want to check whether $k + 1n + k < N$. We are also interested in the number $n$ in the interval, so we can determine whether we can fill the interval with an upper bound of $N / k$.\n\nIf either of these two bounds is too large, the interval cannot be filled. Otherwise, we can fill the interval with $n = N / k$ balls.\n\nThe intervals of length $k$ can be filled with the following sequence of integers: $(0, k), (k, 2k), (2k, 3k), (3k, 4k), (4k, 5k),...$.\n\nNote that $0$ is the number of balls in the box.\n\nThe upper bound of $n$ for each interval is given by $n = N / k$\n\nTo determine whether we can fill the box with exactly $k$ balls, we determine whether any interval of length $k$ can be filled. If all of them can be filled, we return $n = k + 1$.\n\nTo determine whether we can fill the box with more than $k$ balls, we check whether we can fill the box with $n = k + 1$ balls.\n\nThe above algorithm has a runtime of $\\Theta(n^2)$ where $n$ is the number of intervals of length $k$ that need to be checked.\n\nIf the box has $N$ balls, we need to check at least $N / k$ intervals of length $k$.\n\nIn total, we need to check $N / k$ intervals of length $k$ for each length $k$. So the total runtime is $\\Theta(n^2)$, where $n$ is the length of $L$.\n\nThis approach is similar to the dynamic programming approach for finding the minimum number of coins in an amount $x$. We can just calculate $y = x / k$, and then run the algorithm for $y$, which should have the same runtime.\n\n-----Test Data-----\nSample Input:\n6\n1 2 3 4 5 6\n2\nSample Output:\n3\n3\nExplanation:\nFor every interval of length $k$, if we can fill it with an upper bound of $n = N / k$, we can fill it with $n = k + 1$ balls.\n\nFor $k = 1$, the upper bound of $n$ is $n = 1 + 1 = 2$.\n\nFor $k = 2$, the upper bound of $n$ is $n = 2 + 1 = 3$.\n\nFor $k = 3$, the upper bound of $n$ is $n = 3 + 1 = 4$.\n\nFor $k = 4$, the upper bound of $n$ is $n = 4 + 1 = 5$.\n\nFor $k = 5$, the upper bound of $n$ is $n = 5 + 1 = 6$.\n\nFor $k = 6$, the upper bound of $n$ is $n = 6 + 1 = 7$.\n\nNote that $1 + 2 + 3 + 4 + 5 + 6 = 21$ balls in the box.\n\nNow, let us look at the intervals of length $k = 1$.\n\nFor $k = 1$, we can fill the first interval with an upper bound of $n = 2$.\n\nFor $k = 2$, we can fill the first interval with an upper bound of $n = 3$.\n\nFor $k = 3$, we can fill the first interval with an upper bound of $n = 4$.\n\nFor $k = 4$, we can fill the first interval with an upper bound of $n = 5$.\n\nFor $k = 5$, we can fill the first interval with an upper bound of $n = 6$.\n\nFor $k = 6$, we can fill the first interval with an upper bound of $n = 7$.\n\nSo we can fill the first interval with an upper bound of $n = 7$.\n\nFor $k = 1$, we can fill the second interval with an upper bound of $n = 5$.\n\nFor $k = 2$, we can fill the second interval with an upper bound of $n = 6$.\n\nFor $k = 3$, we can fill the second interval with an upper bound of $n = 7$.\n\nFor $k = 4$, we can fill the second interval with an upper bound of $n = 8$.\n\nFor $k = 5$, we can fill the second interval with an upper bound of $n = 9$.\n\nFor $k = 6$, we can fill the second interval with an upper bound of $n = 10$.\n\nSo we can fill the second interval with an upper bound of $n = 10$.\n\nNow, we can fill the remaining intervals with an upper bound of $n = 10$.\n\nThus, we can fill the intervals with a bound of $n = 21$.\n\n-----Problem-----\nMinimum No. of Days to Finish Job\n\nYou have a job to do. The first day you are working is day $1$. You have a list of days on which you work. Each day you work, you will finish a job of weight $p$. The weights of the jobs that you have not started are $x = 1, 2, \\ldots, n$. What is the minimum number of days for which you can finish all the jobs?\n\nYou can start the job on day $1$.\n\n-----Solution-----\n\nWe will use dynamic programming to solve this problem. The first day we can complete all the jobs is the"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('0 0\\n1 2\\n2') == 'N'\n\n\"\"\""
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('...V...') == '...V...'\nassert solution('...#...') == '..VVV..'\nassert solution('.......') == '.VV#VV.'\nassert solution('..###..') == '.V###V.'\n\"\"\"\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \\\n    \".VVVVV.VVVVV.VVVVV.VVVVV.VVVVV.VVVVV.\"\nassert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \\\n    \"..VVV..VVVV..VVVV.VVVVV.VVVVV.VVVVV.\"\nassert solution(\"5 7\\n.VV...V\\n.......\\n.......\\n...#...\\n..###..\") == \\\n    \"..VV...V.VVVVV.VVVVV.VVVVV.VVVVV.\"\nassert solution(\"5 7\\n.VV...V\\n...#..#\\n.....#\\n....#.\\n....#.\\n.......\\n..###..\") == \\\n    \"..VV...V.VVVVV.VVVVV.VVVVV.VVVVV.\"\nassert solution(\"5 7\\n.VV...V\\n...#..#\\n...#..#\\n....#.\\n....#.\\n.......\\n..###..\") == \\\n    \"..VV...V.VVVVV.VVVVV.VVVVV.VVVVV.\"\n\n\"\"\"\n\nn, m = [int(c) for c in input().split()]\n\nfor i in range(n):\n    grid = [c for c in input()]\n    for j in range(m - 2):\n        if grid[j] == \"V\" and grid[j + 1] == \"V\" and grid[j + 2] == \"V\":\n            grid[j] = grid[j + 1] = grid[j + 2] = \"V\"\n            break\n    print(\"\".join(grid))\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 7\\n.V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\n\n\"\"\""
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\n\"\"\"\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a1) == a2\nassert solution(a2) == a2\nassert solution(a3) == a4\nassert solution(a4) == a4\n\nprint(solution(a5))\nprint(solution(a6))\nprint(solution(a7))\nprint(solution(a8))\nprint(solution(a9))\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.V#VV.\\n.V###V.\"\nassert solution(\"2 3\\n..V\\n.V\") == \".V\"\nassert solution(\"5 7\\n...V...\\n..VV..\\n...#...\\n...#...\\n.##..#\") == \"...V...\\n...#...\\n..VV..\\n.##.V.\\n.###..\"\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(...) == \"\"\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple, Set, Dict, Optional\n\nfrom tools import timing\n\nMatrix = List[List[str]]\nDirection = Tuple[int, int]\nDIRECTIONS = {\n    'left': lambda x: (x[0], x[1] - 1),\n    'right': lambda x: (x[0], x[1] + 1),\n    'up': lambda x: (x[0] - 1, x[1]),\n    'down': lambda x: (x[0] + 1, x[1]),\n}\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\n\"\"\""
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".VVV.VVVVVV\") == \".VVV.VVVVVV\"\nassert solution(\".......\") == \"....VVV....\"\nassert solution(\"##VV#VVVVVV\") == \"##VVVVVVVV\"\nassert solution(\"...#...V...#...\") == \"...#...#...#...\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13\") == \"11\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1111\") == \"1111\"\nassert solution(\"11001100\") == \"11101010\"\nassert solution(\"10\") == \"101\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13') == '11'\nassert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('11111') == '11111'\nassert solution('11101') == '10111'\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13') == '11'\n\nprint(solution('13'))\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1101\") == \"1011\"\nassert solution(\"10111101\") == \"10110111\"\nassert solution(\"1001101\") == \"1001011\"\nassert solution(\"10011\") == \"100101\"\nassert solution(\"111\") == \"101\"\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13\") == \"11\"\nassert solution(\"42\") == \"21\"\nassert solution(\"8\") == \"1\"\nassert solution(\"42\") == \"21\"\nassert solution(\"17\") == \"11\"\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13') == '11'\nassert solution('15') == '1111'\nassert solution('21') == '1011'\nassert solution('10101') == '101010'\n\nSolution:\nn = int(stdin.readline())\nb = bin(n)[2:]\nprint(int(b[::-1], 2))\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13\") == \"11\"\nassert solution(\"0\") == \"0\"\n\n\"\"\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(13)) == '11'\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(100) == 11\nassert solution(13) == 11\n'''\n\nfrom typing import Tuple"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\\npink\\nteaqulsunrose\\nmexicanpink\\ncoquelicot\\nturqrose\\nrosee\\njETblack\\npink\\nbabypink\\npinkpinkpink\\nPInkrose\\nlazerlemon\\n\") == \"9\"\n\"\"\"\n\nimport collections\nimport re"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"12\\n\"\n    \"pink\\n\"\n    \"tequilaSunrose\\n\"\n    \"mExicanPInK\\n\"\n    \"Coquelicot\\n\"\n    \"turqrose\\n\"\n    \"roSee\\n\"\n    \"JETblack\\n\"\n    \"pink\\n\"\n    \"babypink\\n\"\n    \"pInKpinkPinK\\n\"\n    \"PInkrose\\n\"\n    \"lazerlemon\\n\") == \"9\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12\\npink\\ntequilaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\n'\n'pink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon') == '9'\n\"\"\"\n\n\"\"\"\n-----Solution-----\n\n-----TESTING-----\n\"\"\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\nbabypink\") == '9'\n\"\"\"\n\nfrom typing import List\nimport string\n\nclass Button:\n    def __init__(self, color: str) -> None:\n        self.color = color"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\\n\"\n\"pink\\n\"\n\"tequilaSunrose\\n\"\n\"mExicanPInK\\n\"\n\"Coquelicot\\n\"\n\"turqrose\\n\"\n\"roSee\\n\"\n\"JETblack\\n\"\n\"pink\\n\"\n\"babypink\\n\"\n\"pInKpinkPinK\\n\"\n\"PInkrose\\n\"\n\"lazerlemon\\n\") == \"9\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12\\npink\\nteaqleuSunroS') == '9'\nassert solution('1\\nPINK') == '1'\nassert solution('1\\npink') == '1'\nassert solution('1\\nPePPi') == '1'\nassert solution('1\\nPpik') == '1'\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12\\n'\n'pink\\n'\n'tequilaSunrose\\n'\n'mExicanPInK\\n'\n'Coquelicot\\n'\n'turqrose\\n'\n'roSee\\n'\n'JETblack\\n'\n'pink\\n'\n'babypink\\n'\n'pInKpinkPinK\\n'\n'PInkrose\\n'\n'lazerlemon') == '9'\nassert solution('12\\n'\n'pink\\n'\n'tequilaSunrise\\n'\n'mExicanPInK\\n'\n'Coquelicot\\n'\n'turqrose\\n'\n'roSee\\n'\n'JETblack\\n'\n'pink\\n'\n'babypink\\n'\n'pInKpinkPinK\\n'\n'PInkrose\\n'\n'lazerlemon') == 'I must watch Star Wars with my daughter'\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5\npink\nroSee\nJETblack\npink\nbabypink\n''') == 'I must watch Star Wars with my daughter'\n'''\n6\npInKpinkPinK\nPInkrose\nlazerlemon\n'''\nassert solution('''\n6\npInKpinkPinK\nPInkrose\nlazerlemon\n''') == '0'\n'''\n1\npink\n'''\nassert solution('''\n1\npink\n''') == '1'\n'''\n2\npink\nrose\n'''\nassert solution('''\n2\npink\nrose\n''') == '1'\n'''\n3\npInKpinkPinK\nPInkrose\nlazerlemon\n'''\nassert solution('''\n3\npInKpinkPinK\nPInkrose\nlazerlemon\n''') == '2'\n'''\n4\npInKpinkPinK\nPInkrose\nlazerlemon\npink\n'''\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12\\n'\n                 'pink\\n'\n                 'tequilaSunrose\\n'\n                'mExicanPInK\\n'\n                 'Coquelicot\\n'\n                 'turqrose\\n'\n                 'roSee\\n'\n                 'JETblack\\n'\n                 'pink\\n'\n                 'babypink\\n'\n                 'pInKpinkPinK\\n'\n                 'PInkrose\\n'\n                 'lazerlemon') == '9'\nassert solution('12\\n'\n                 'pink\\n'\n                 'pink\\n'\n                 'pink\\n'\n                 'pink\\n'\n                 'pink\\n'\n                 'pink\\n'\n                 'pink\\n'\n                 'pink\\n'\n                 'pink\\n'\n                 'pink\\n'\n                 'pink\\n'\n                 'pink\\n'\n                 'pink\\n'\n                 'pink') == '11'\n\"\"\"\nimport re"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon') == '9'\nassert solution('6\\npurple\\nred\\nblue\\nyellow\\ngreen\\n') == '1'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 5 3') == '1 3 5'\nassert solution('2 3 5') == '2 3 5'\nassert solution('5 2 3') == '5 2 3'\nassert solution('5 3 2') == '5 3 2'\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5 3\\nBCA\") == \"1 3 5\"\nprint(solution(\"5 3 1\\nBCA\"))\n\nassert solution(\"10 50 30\\nABC\") == \"10 30 50\"\nprint(solution(\"10 50 30\\nBCA\"))\n\nassert solution(\"1 10 2\\nCAB\") == \"1 2 10\"\nprint(solution(\"1 10 2\\nCAB\"))\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"5 3 1\") == \"1 3 5\"\nassert solution(\"3 1 5\") == \"1 3 5\"\nassert solution(\"1 5 3\") == \"1 3 5\"\n\nSolution:"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5 3\\nABC\") == \"1 3 5\"\nassert solution(\"2 4 1\\nBCA\") == \"2 4 1\"\nassert solution(\"4 5 2\\nBAC\") == \"4 5 2\""
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"3 5 1\") == \"3 5 1\"\nassert solution(\"5 1 3\") == \"5 1 3\"\nassert solution(\"5 3 1\") == \"5 3 1\"\nassert solution(\"3 5 5\") == \"3 5 5\"\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 5 3') == '1 3 5'\n\"\"\"\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 5 3\\nABC') == '1 3 5'\n\"\"\"\n\n\"\"\"\nInput\n3 5 7\nXYZ\n\nOutput\n5 3 7\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 5 3') == '1 3 5'\n\nassert solution('1 5 3 4') == '1 3 4 5'\n\nassert solution('1 3 5') == '1 3 5'\n\nassert solution('2 4 5') == '2 4 5'\n\nassert solution('2 3 5') == '2 3 5'"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 9 7\") == \"7 9 12\"\nassert solution(\"9 8 5\") == \"5 8 9\"\nassert solution(\"3 5 4\") == \"3 4 5\"\n\nprint(\"All tests passed.\")\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"5 3 1\") == \"5 3 1\"\nassert solution(\"3 5 1\") == \"3 5 1\"\nassert solution(\"5 1 3\") == \"1 5 3\"\n\"\"\""
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('buy 2 5') == '8.0'\nassert solution('buy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy 2 5\\nbuy"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"73.8\"\n\n-----Problem-----\nThe irate of a stock is its price per unit of time. That is, the price it charges for every $1$ of stock ownership. For instance, if a share has a current price of $100$, it costs $10$ to buy and $90$ to sell it, so the irate is $10/1=10$. \n\nIn Taxmania, an old grumpy aunt of the company Mittens Conglomerated has recently died at the tender age of $109$ cat years. She is a very irate person and has a very strict memory. She was very strict about her purchases, so whenever she purchased a stock, it was required that she pay a minimum of $2$% commission. For example, if she bought a stock at price $10$, she must pay $2\\%=0.02$ of the purchase price. \n\nShe also paid a minimum of $1$ to purchase the stock at her age, so she was always required to buy a stock at least $109$ cat years old. There was no minimum for selling a stock, but in practice, the stock was sold at a price equal to its current value, with $2$\\%$ of the sale price being a capital gain tax, so her final earnings were $109\\%=9.99$ of the purchase price. Given that she died at the age of $109$ cat years, we want to know the final earnings of her stock (after paying taxes on the gains).\n\n-----Solution-----\n\nn = int(input())\nstock = 0\ncount = 0\nmoney = 0\nfor i in range(n):\n    x = input().split()\n    if x[0] == 'buy':\n        stock += int(x[1])\n        count += int(x[1]) * float(x[2])\n        money += (int(x[1]) * float(x[2])) * 0.98\n    elif x[0] =='sell':\n        stock -= int(x[1])\n        money += (int(x[1]) * float(x[2])) * 0.98\n    elif x[0] =='split':\n        stock //= int(x[1])\n    elif x[0] == 'die':\n        count += (stock * 0.98) * 2\nprint(round(money, 2))\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"buy 1 15\\n\"\n    \"split 3\\n\"\n    \"sell 1 5\\n\"\n    \"die 4\\n\") == \"8.00000000\"\n\n\"\"\"\n\nevents = []\nwhile True:\n    line = stdin.readline().strip()\n    if not line:\n        break\n    events.append(line)"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"buy 1 15\\n\" +\n\"split 3\\n\" +\n\"sell 1 5\\n\" +\n\"die 4\\n\") == \"8.00000000\"\nassert solution(\"buy 1 15\\n\" +\n\"split 3\\n\" +\n\"sell 1 5\\n\" +\n\"die 4\\n\") == \"8.00000000\"\nassert solution(\"buy 1 15\\n\" +\n\"split 3\\n\" +\n\"sell 1 5\\n\" +\n\"die 4\\n\") == \"8.00000000\"\nassert solution(\"buy 1 15\\n\" +\n\"split 3\\n\" +\n\"sell 1 5\\n\" +\n\"die 4\\n\") == \"8.00000000\"\n\nassert solution(\"buy 1 15\\n\" +\n\"split 3\\n\" +\n\"sell 1 5\\n\" +\n\"die 4\\n\") == \"8.00000000\"\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"buy 1 15\\\\nsplit 3\\\\nsell 1 5\\\\ndie 4\") == \"8.0\"\nassert solution(\"buy 1 10\\\\nbuy 2 10\\\\nbuy 3 10\\\\nbuy 4 10\\\\nbuy 5 10\\\\nbuy 6 10\\\\nbuy 7 10\\\\nbuy 8 10\\\\nbuy 9 10\\\\nbuy 10 10\\\\nbuy 11 10\\\\nbuy 12 10\\\\nbuy 13 10\\\\nbuy 14 10\\\\nbuy 15 10\\\\nbuy 16 10\\\\nbuy 17 10\\\\nbuy 18 10\\\\nbuy 19 10\\\\nbuy 20 10\\\\nbuy 21 10\\\\nbuy 22 10\\\\nbuy 23 10\\\\nbuy 24 10\\\\nbuy 25 10\\\\nbuy 26 10\\\\nbuy 27 10\\\\nbuy 28 10\\\\nbuy 29 10\\\\nbuy 30 10\\\\nbuy 31 10\\\\nbuy 32 10\\\\nbuy 33 10\\\\nbuy 34 10\\\\nbuy 35 10\\\\nbuy 36 10\\\\nbuy 37 10\\\\nbuy 38 10\\\\nbuy 39 10\\\\nbuy 40 10\\\\nbuy 41 10\\\\nbuy 42 10\\\\nbuy 43 10\\\\nbuy 44 10\\\\nbuy 45 10\\\\nbuy 46 10\\\\nbuy 47 10\\\\nbuy 48 10\\\\nbuy 49 10\\\\nbuy 50 10\\\\nbuy 51 10\\\\nbuy 52 10\\\\nbuy 53 10\\\\nbuy 54 10\\\\nbuy 55 10\\\\nbuy 56 10\\\\nbuy 57 10\\\\nbuy 58 10\\\\nbuy 59 10\\\\nbuy 60 10\\\\nbuy 61 10\\\\nbuy 62 10\\\\nbuy 63 10\\\\nbuy 64 10\\\\nbuy 65 10\\\\nbuy 66 10\\\\nbuy 67 10\\\\nbuy 68 10\\\\nbuy 69 10\\\\nbuy 70 10\\\\nbuy 71 10\\\\nbuy 72 10\\\\nbuy 73 10\\\\nbuy 74 10\\\\nbuy 75 10\\\\nbuy 76 10\\\\nbuy 77 10\\\\nbuy 78 10\\\\nbuy 79 10\\\\nbuy 80 10\\\\nbuy 81 10\\\\nbuy 82 10\\\\nbuy 83 10\\\\nbuy 84 10\\\\nbuy 85 10\\\\nbuy 86 10\\\\nbuy 87 10\\\\nbuy 88 10\\\\nbuy 89 10\\\\nbuy 90 10\\\\nbuy 91 10\\\\nbuy 92 10\\\\nbuy 93 10\\\\nbuy 94 10\\\\nbuy 95 10\\\\nbuy 96 10\\\\nbuy 97 10\\\\nbuy 98 10\\\\nbuy 99 10\\\\nbuy 100 10\\\\nbuy 101 10\\\\nbuy 102 10\\\\nbuy 103 10\\\\nbuy 104 10\\\\nbuy 105 10\\\\nbuy 106 10\\\\nbuy 107 10\\\\nbuy 108 10\\\\nbuy 109 10\\\\nbuy 110 10\\\\nbuy 111 10\\\\nbuy 112 10\\\\nbuy 113 10\\\\nbuy 114 10\\\\nbuy 115 10\\\\nbuy 116 10\\\\nbuy 117 10\\\\nbuy 118 10\\\\nbuy 119 10\\\\nbuy 120 10\\\\nbuy 121 10\\\\nbuy 122 10\\\\nbuy 123 10\\\\nbuy 124 10\\\\nbuy 125 10\\\\nbuy 126 10\\\\nbuy 127 10\\\\nbuy 128 10\\\\nbuy 129 10\\\\nbuy 130 10\\\\nbuy 131 10\\\\nbuy 132 10\\\\nbuy 133 10\\\\nbuy 134 10\\\\nbuy 135 10\\\\nbuy 136 10\\\\nbuy 137 10\\\\nbuy 138 10\\\\nbuy 139 10\\\\nbuy 140 10\\\\nbuy 141 10\\\\nbuy 142 10\\\\nbuy 143 10\\\\nbuy 144 10\\\\nbuy 145 10\\\\nbuy 146 10\\\\nbuy 147 10\\\\nbuy 148 10\\\\nbuy 149 10\\\\nbuy 150 10\\\\nbuy 151 10\\\\nbuy 152 10\\\\nbuy 153 10\\\\nbuy 154 10\\\\nbuy 155 10\\\\nbuy 156 10\\\\nbuy 157 10\\\\nbuy 158 10\\\\nbuy 159 10\\\\nbuy 160 10\\\\nbuy 161 10\\\\nbuy 162 10\\\\nbuy 163 10\\\\nbuy 164 10\\\\nbuy 165 10\\\\nbuy 166 10\\\\nbuy 167 10\\\\nbuy 168 10\\\\nbuy 169 10\\\\nbuy 170 10\\\\nbuy 171 10\\\\nbuy 172 10\\\\nbuy 173 10\\\\nbuy 174 10\\\\nbuy 175 10\\\\nbuy 176 10\\\\nbuy 177 10\\\\nbuy 178 10\\\\nbuy 179 10\\\\nbuy 180 10\\\\nbuy 181 10\\\\nbuy 182 10\\\\nbuy 183 10\\\\nbuy 184 10\\\\nbuy 185 10\\\\nbuy 186 10\\\\nbuy 187 10\\\\nbuy 188 10\\\\nbuy 189 10\\\\nbuy 190 10\\\\nbuy 191 10\\\\nbuy 192 10\\\\nbuy 193 10\\\\nbuy 194 10\\\\nbuy"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(textwrap.dedent(\"\"\"\n        buy 1 15\n        sell 1 5\n        split 3\n        split 1\n        split 1\n        buy 2 3\n        buy 4 6\n        split 3\n        merge 3\n        split 1\n        merge 2\n        sell 2 7\n        split 3\n        split 1\n        split 1\n        buy 4 6\n        sell 2 4\n        merge 2\n        split 2\n        split 1\n        split 1\n        buy 1 3\n        buy 2 1\n        buy 3 1\n        merge 2\n        merge 2\n        merge 2\n        buy 3 2\n        buy 1 7\n        sell 1 6\n        buy 1 1\n        buy 1 7\n        sell 1 6\n        split 1\n        sell 1 6\n        split 1\n        split 1\n        buy 2 1\n        buy 1 1\n        buy 1 3\n        merge 3\n        merge 3\n        merge 3\n        buy 2 1\n        buy 1 3\n        buy 1 7\n        buy 3 2\n        buy 2 1\n        split 1\n        buy 1 3\n        buy 2 1\n        buy 1 7\n        merge 1\n        split 2\n        buy 1 3\n        buy 2 1\n        buy 1 7\n        buy 3 2\n        sell 1 6\n        buy 1 1\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 2 1\n        split 1\n        buy 2 1\n        buy 2 1\n        buy 2 1\n        buy 1 3\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy 1 7\n        sell 1 6\n        buy 1 2\n        buy"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"buy 1 15\\n\"\n\"split 3\\n\"\n\"sell 1 5\\n\"\n\"die 4\") == \"8.0\"\nassert solution(\"buy 1 15\\n\"\n\"split 3\\n\"\n\"sell 1 5\\n\"\n\"die 2\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\n\"\n\"buy 1 1\\n\"\n\"sell 1 1\\"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(sample_stdin) == sample_stdout\n\n-----Note-----\nYou are not allowed to import any modules and are not allowed to use any classes from standard input and output to read and write any data. You are allowed to use the built-in library math for calculating the final price of the stock after taxes, and it is also guaranteed that there will be no more than 10000 operations of any kind.\n\n\"\"\""
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"buy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15\\\\nbuy 1 15"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\nbuy 2 20\nbuy 2 10\nsell 2 10\nsell 2 1\nbuy 3 10\nbuy 3 5\nsell 3 5\nbuy 4 15\nbuy 4 7\nsell 4 7\nbuy 5 10\nbuy 5 5\nsell 5 5\nbuy 6 15\nbuy 6 7\nsell 6 7\nbuy 7 10\nbuy 7 5\nsell 7 5\nsell 7 1\nbuy 8 10\nbuy 8 5\nsell 8 5\nbuy 9 10\nbuy 9 5\nsell 9 5\nsell 9 1\nbuy 10 15\nbuy 10 7\nsell 10 7\nbuy 11 15\nbuy 11 7\nsell 11 7\nsell 11 1\nbuy 12 15\nbuy 12 7\nsell 12 7\nbuy 13 15\nbuy 13 7\nsell 13 7\nsell 13 1\nbuy 14 15\nbuy 14 7\nsell 14 7\nbuy 15 15\nbuy 15 7\nsell 15 7\nsell 15 1\nbuy 16 15\nbuy 16 7\nsell 16 7\nbuy 17 15\nbuy 17 7\nsell 17 7\nsell 17 1\nbuy 18 15\nbuy 18 7\nsell 18 7\nbuy 19 15\nbuy 19 7\nsell 19 7\nsell 19 1\n''') == '8.00000000'\n\n'''\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(808)) == '8'\nassert solution('808') == '8'\n'''\n\nimport sys"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('808') == '8'\n\"\"\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(808) == '8'\nassert solution(32) == '2'\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"1\") == \"1\"\nassert solution(\"6\") == \"6\"\nassert solution(\"2\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('808') == '8'\nassert solution('4') == '4'\nassert solution('999') == '9'\nassert solution('1000') == '0'\n\n-----Notes-----\nWe need to read $x$ from the input.\n\"\"\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"808\") == \"8\"\nassert solution(\"1\") == \"1\"\nassert solution(\"39\") == \"9\"\nassert solution(\"8\") == \"8\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('808') == '8'\nassert solution('999') == '9'\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('808') == '8'\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('808') == '8'\nassert solution('298819') == '8'\nassert solution('1') == '1'\nassert solution('1234567891011') == '8'\nassert solution('222222') == '2'\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('808') == '8'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\"\"\"\n\n\n\nimport sys\n\nclass UnionFind:\n    def __init__(self, n):\n        self.parent = [i for i in range(n)]\n\n    def union(self, a, b):\n        a_parent = self.find(a)\n        b_parent = self.find(b)\n        if a_parent == b_parent:\n            return False\n        self.parent[b_parent] = a_parent\n        return True\n\n    def find(self, a):\n        if self.parent[a] == a:\n            return a\n        self.parent[a] = self.find(self.parent[a])\n        return self.parent[a]"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == 0\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 5\nCCCCC\nCCCCC\nCCCCC\nCCCCC\n\"\"\") == 0\nassert solution(\"\"\"\n4 5\nWCCCC\nWCCCC\nWCCCC\nWCCCC\n\"\"\") == 1\nassert solution(\"\"\"\n4 5\nWLLL\nWLLL\nWLLL\nWLLL\n\"\"\") == 0\nassert solution(\"\"\"\n5 5\nWLLLL\nWLLLL\nWLLLL\nWLLLL\nWLLLL\n\"\"\") == 0\n\n\"\"\")\n    def solution(self):\n        pass\n\n----\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == 0\n\"\"\"\nimport sys"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\nassert solution(\"5 5\\nCCCCC\\nCCCCC\\nCCCCC\\nLCCCC\") == 1\nassert solution(\"5 5\\nCLLLL\\nLWLWL\\nLWLWL\\nLWLWL\") == 2\nassert solution(\"5 5\\nLLLLL\\nLLLLL\\nLLLLL\\nLLLLL\") == 2\nassert solution(\"5 5\\nWWWWW\\nWWWWW\\nWWWWW\\nWWWWW\") == 0\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == 0\n\n-----Notes-----\nSince we cannot see the whole island, it is represented in the input by 'L'.\n\nSince the ocean is represented by 'W', we can see that there is a cloud right next to each 'L' on the island.\n\nYou must remove all clouds before determining how many islands there are.\n\"\"\"\n\nfrom typing import List\nfrom collections import deque\n\nclass Node:\n    def __init__(self, row: int, col: int) -> None:\n        self.row: int = row\n        self.col: int = col\n        self.visited: bool = False\n        self.island_count: int = 1\n    def __lt__(self, other: Node) -> bool:\n        return (self.island_count, self.row, self.col) < (other.island_count, other.row, other.col)"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 C\n2C\n8S\n8S\n9H\n3S\n7C\nTH\n2H\n4C\nAD\n6D\nQH\nTH\n5S\n7H\n6D\nJS\n5C\nAD\n6S\nTD\n9D\n9C\n7H\n4S\n8C\n4H\n2S\n3H\n9H\n5C\n7D\n3S\nQS\n6C\n2H\n9C\n6H\nJD\n9S\n9H\n6S\n5S\nJS\nTH\nTH\n5D\n7H\n6D\n4C\nJS\n8S\n8H\nAD\nQH\nKH\n9S\nQS\n9H\nTD\nJS\n4D\n9H\n4H\nQS\nAD\n3H\n3H\n2C\nKS\nAD\n4C\n8S\nJS\n9H\n4H\n4H\nTD\n6S\nJD\nTH\n4C\nKH\n7D\n6C\n9H\n2C\nAD\nJS\n8C\n8H\n9D\n3H\n4C\n3S\n9S\n9H\n9S\n3S\n3S\n9C\n3S\nJS\n9S\n8D\nKS\nQS\n5S\nAD\n2S\nAD\n2S\n5S\n9D\n4C\n8H\nJS\nQS\nAD\nKH\n4D\n4S\n9D\n6S\n4S\nKS\n2C\n4C\nJS\n9S\nAD\n9C\nJS\n8S\nQS\n4D\n2D\n4H\n7C\n4H\n2S\nTD\n8S\n3H\n9S\n9S\n5H\n2D\n2H\n6H\n4C\n9S\nQH\n3H\nTH\nJD\n9D\n7S\nJS\n9C\n6H\n4S\n6C\n5C\n6H\n3S\n7H\nJS\n3S\n8S\n9H\n4D\n2H\n4S\n8C\nQH\n5H\n2H\n5C\n7S\n9D\n4C\n5S\n6S\n2D\n9C\nQS\nJS\n3C\nQD\nTH\n5S\n5C\n4C\n2H\nKH\nJS\n6S\n3D\nTH\n3H\n9S\n2C\nKH\n6S\n4D\nQC\nQD\n5C\n8S\nQH\n4S\n2S\n2H\n9C\nQS\nTH\nJH\n7C\n9H\nQC\nTH\n4D\n8S\nTH\n5D\nKH\n5S\n3S\n9S\nQS\nQH\n2H\n4D\n3S\n2D\nJD\nQH\n8S\n7H\nJS\n6C\nQC\n4H\nJS\n7S\n3H\n4D\n9H\n8S\n8D\nKH\n5S\n5H\n4D\nQS\n9C\n6C\n7S\n9D\nJS\nQS\n7S\n9H\nAD\n4C\n8C\n9H\nTH\n8S\nJS\n4C\n8H\n4H\nJS\n3H\n9C\n4S\n9S\n3S\nTH\nJD\nKH\n8S\n9H\n2S\n8S\n5C\nJD\n4C\n9D\n2C\nKH\n7H\n9C\n2C\nJS\n4S\n6H\n3S\n5S\n9H\nQS\n3S\n2D\nKS\n3H\nTH\n9D\n4C\n8H\n5C\n3C\n7S\n2C\n9S\n6S\nJS\n4D\n5C\n3H\n4D\nTH\n4H\n4S\n3S\n2C\n9S\n2H\n4S\nKS\n6C\n3H\n7C\n8S\n9S\n5D\nTH\n3S\n8S\n8C\n7S\nTH\n6S\n6C\n3H\n7S\nJS\n9S\n2C\n9H\n3S\n3H\n4H\n9H\n2D\nKH\nTH\nKS\n9S\n3H\n7D\n8S\n6S\n3S\n3C\nJS\n3S\nTH\n2S\nKH\n5H\n9S\nTH\n6S\n9S\nJS\n2D\nTH\n8S\n5S\n8S\n6S\n6C\n7S\n3S\n6S\n6S\n4S\n8D\nQC\n8D\nTH\n2S\n8C\nKS\nAD\n4H\n9C\n7D\n9H\n4H\n8S\n2H\n9H\n8H\n5H\n2S\n8S\n8C\nQS\n8D\n9S\n9S\nJS\n9S\n5H\n5H\n5S\n3S\n5H\n4H\nKH\n3S\n2S\n4S\n4C\n4H\n9C\n2H\n9S\n3C\n8C\n9D\nKS\n9C\n9H\n3C\n5C\nKH\n3H\n4S\nQS\n7S\n3C\n6S\n3H\nQD\n9S\n3S\n2C\n9H\n8C\n4S\n7C\n4S\n7C\n6C\n5H\n9D\n6S\n9S\nKH\n8S\n3C\n5C\n3C\n6D\n9C\nJS\n6H\n8C\nQS\nKH\nKH\nKH\n9C\n6S\n8C\n3C\n2D\n2C\n6H\nKH\n2H\n8S\n5S\n8S\nTH\n4H\n9H\n9C\n7C\nKH\n3S\n3C\n7S\n8C\n8D\n8S\n9H\n8S\n7C\nKS\n9D\n9H\n8H\n6S\n2D\n8S\n6S\n9S\nKH\n8H\n7C\n2S\nQD\n5H\nJS\n9C\n4S\n5S\nQC\n5H\n2H\nQH\nKS\n3D\nQS\n6H\nJD\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\nassert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n\nimport re"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4H TH TH TH\") == \"24\"\n\"\"\"\n\nimport sys\nimport pandas as pd\nimport numpy as np\nimport os\nfrom collections import defaultdict\nimport re"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\\n\") == \"60\"\n\"\"\"\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\nassert solution('1 C\\n8S') == '0'\nassert solution('1 S\\n8S') == '20'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'''\n2 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH\n'''\n) == '60'\n\nassert solution(\n'''\n2 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH\n'''\n) == '60'\n\nassert solution(\n'''\n2 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH\n'''\n) == '60'\n\nassert solution(\n'''\n3 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH\n'''\n) == '180'\n\nassert solution(\n'''\n4 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH\n'''\n) == '220'"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_data) == test_result\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n\nprint(solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\"))\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('this is very annoying') =='se'\nassert solution('thiss iss veery annoying') =='se'\nassert solution('this is very very annoying') =='see'\nassert solution('this is very very very annoying') =='see'\nassert solution('this is very very very very annoying') =='seee'\n\"\"\""
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\"\"\""
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\"\"\"\n\n\"\"\"\nhttps://app.codility.com/demo/results/trainingYQB2JK-KDA/\n\"\"\"\n\n\"\"\"\nsticky_key_text = stdin.split()[0]\n\nsticky_keys = list(filter(lambda x: len(x) > 1, list(map(lambda x: x * 2, [c for c in sticky_key_text if c not in [\" \", \" \"]]))))\n\nfor c in list(map(lambda x: x[0], list(filter(lambda x: len(x) == 2, [c for c in sticky_key_text.split()])))):\n    sticky_keys.append(c)\n\nreturn \"\".join(sticky_keys)\n\"\"\"\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) =='se'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\n\n--- Note ---\nThe input strings contain only lowercase letters and spaces.\n\n'''"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('this is very annoying') =='se'\nassert solution('thiss iss veery annoying') =='se'\nassert solution('foo bar baz') == ''\nassert solution('a a a a a a a a a') == 'a'\nassert solution('a a b a a b a') == 'a'\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\nSample Input:\nthis is very annoying\nthiss iss very annoying\nSample Output:\ne a\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('p p') == ''\nassert solution('p p p') == ''\nassert solution('p p p p') == ''\nassert solution('thiss is very annoying') =='se'\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == output, f\"expected: {output}, got: {solution(stdin)}\""
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('this is very annoying') =='se'\nassert solution('thiss iss veery annoying') =='se'\nassert solution('this is very frustratingly annoying') =='se'\n\"\"\""
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\n---Problem type---\n\n---Solved---\n\n\"\"\""
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n\"\"\"\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 3 0\n0 0 1 1 2''') == 3\n\"\"\"\nimport math\nS, C, K = [int(x) for x in stdin.split()]\nD = [int(x) for x in stdin.split('\\n')]\nprint(math.ceil(S / C))"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n\"\"\"\n\nsocks = int(stdin.readline().strip())\ncapacity = int(stdin.readline().strip())\nmax_diff = int(stdin.readline().strip())\n\nsocks_colors = list(map(int, stdin.readline().strip().split(' ')))\nsocks_colors = sorted(socks_colors)\n\nmachines_needed = 0\ncurrent_machine_capacity = capacity\n\nfor socks_color in socks_colors:\n    if socks_color <= current_machine_capacity:\n        machines_needed += 1\n        current_machine_capacity -= socks_color\n    else:\n        machines_needed += 1\n        current_machine_capacity = capacity - socks_color\n    if current_machine_capacity <= 0:\n        break\n\nprint(machines_needed)\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n\"\"\"\n\nfrom itertools import combinations\nfrom typing import List\n\nsocks_num, machine_cap, color_diff = map(int, input().split())\nsocks: List[int] = list(map(int, input().split()))\n\ncombs: List[List[int]] = []\nfor i in range(1, len(socks)+1):\n    combs.extend(combinations(socks, i))\n\ncombs_diff: List[int] = []\nfor comb in combs:\n    comb_diff = sum([abs(socks[i]-socks[i-1]) for i in range(1, len(comb))])\n    combs_diff.append(comb_diff)\n\ncombs_diff.sort()\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n\"\"\""
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n'''\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\nprint('Test pass.')\n\nSample Input:\n5 4 2\n0 2 3 4 5\nSample Output:\n0\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1) == '1'\nassert solution(2) == '2'\nassert solution(3) == '6'\nassert solution(4) == '6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2\\n1\") == \"6\"\nprint(solution(\"3\\n2\\n1\"))"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n3\") == \"6\"\n\"\"\"\n\n\nfrom typing import Callable\n\nSquareRoot = Callable[[int], int]"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n4\\n3\\n2\\n1') == '1'"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n\") == \"6\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1\\n2\\n3\\n') == '6'\n\"\"\""
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n') == '6'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n2\") == \"6\"\n\nprint(solution(\"2\\n3\"))\n\n'''\n\nimport os\nimport sys"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2\\n3\") == \"6\""
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1\\n2\\n3\\n\") == \"6\"\n\n-----Explanation-----\nFor N=1, N!=1=1*0=0.\nFor N=2, N!=2=2*1=2.\nFor N=3, N!=6=3*2*1=6.\n\n\"\"\"\n\nfrom math import factorial\nfrom unittest.mock import patch\n\n@patch(\"builtins.input\", side_effect=[\"2\"])\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\nassert solution(\"6 1 2 3 5\") == \"9 4\"\n\"\"\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\nassert solution(\"5 8 1 3 2\") == \"10 10\"\nassert solution(\"10 10 0 0 10\") == \"110 0\"\nassert solution(\"4 0 0\") == \"0 0\"\nassert solution(\"1 2 3\") == \"5 3\"\n\"\"\"\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == '4\\n2'\nassert solution('4\\n1 2 3 4') == '10\\n6'\nassert solution('2\\n2 4') == '6\\n4'\nassert solution('2\\n3') == '6\\n3'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n3 1 2') == '4 2'\nprint(solution(stdin))\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3') == '4 2'\n\"\"\"\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nalice = 0\nbob = 0\n\nfor i in range(n):\n    if i % 2 == 0:\n        alice += a[i]\n    else:\n        bob += a[i]\n\nprint(alice, bob)\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"4 2\"\n\"\"\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 2') == '4 2'\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 4\") == \"7\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\nassert solution(\"1 1 2\") == \"1 1\"\nassert solution(\"2 2 3\") == \"6 2\"\nassert solution(\"4 9 6\") == \"6 16\"\nassert solution(\"5 12 4\") == \"16 20\"\n\nprint(solution(stdin))\n\n-------\n\n6,5\n>>> \n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 1') == '2'\nassert solution('5 5 1') == '2'\nassert solution('2 1 1') == '1'\nassert solution('2 3 3') == '2'\nassert solution('2 1 3') == '3'\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open(r'C:\\Users\\UBAID\\Desktop\\Laboratorio 1\\Laboratorio 1\\Ingles\\input.txt').read()) == '2'\nprint(solution(open(r'C:\\Users\\UBAID\\Desktop\\Laboratorio 1\\Laboratorio 1\\Ingles\\input.txt').read()))\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 1') == 2\nassert solution('3 2 1') == 1\nassert solution('4 3 1') == 1\nassert solution('1 3 1') == 1\n\"\"\"\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5 2 1') == '2'\nassert solution('5 2 3') == '3'\nassert solution('5 2 4') == '4'\nassert solution('5 3 4') == '2'\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 1') == '2'\n\n\"\"\"\n\n\"\"\"\n\u9650\u5236: 2 <= b <= 1000\n\u77e5\u8bc6: \n\"\"\"\n\nimport math"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 1') == '2'\n\"\"\"\n\nb, k, g = [int(x) for x in input().split()]\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1\\n\") == \"0\"\nassert solution(\"5 2 1\\n\") == \"2\"\nassert solution(\"3 1 1\\n\") == \"1\"\nassert solution(\"5 2 2\\n\") == \"3\"\nassert solution(\"1 1 1\\n\") == \"0\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 1') == '2'\nassert solution('1 1 1') == '0'\nassert solution('2 2 1') == '1'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('12') == ''\nassert solution('0 0 0') == ''\nassert solution('1 2 1') == ''\nassert solution('10 1 1') == ''\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 1') == '2'\nassert solution('7 4 3') == '3'\nassert solution('1 1 1') == '0'\nassert solution('4 1 1') == '-1'\nassert solution('4 1 2') == '2'\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == 36\n\n-------------------\nSample Input:\n7\nSample Output:\n288\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == 36\nassert solution('7') == 288\n\"\"\"\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"36\"\nassert solution(\"7\") == \"288\"\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == '36'\nassert solution('7') == '288'\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == 36\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == 36\nassert solution('7') == 288\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"36\"\n\"\"\"\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(5) == 36\nassert solution(7) == 288\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == 36\n\"\"\"\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == 36\n\"\"\""
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"2\\n2 1\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"4\\n2 3 1 3\") == \"impossible\"\nassert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\"\"\"\n\n\nclass MyTestCase(unittest.TestCase):\n    def test_something(self):\n        self.assertEqual(solution(\"4\\n2 3 3 1\"), \"2 3 4 1\")\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\n\n-----Notes-----\nFor your convenience, here is the input for the above test case:\n4\n2 3 3 1\nFor each test case, you can expect at most 20 test cases to be generated.\n\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\"\"\"\n\nimport sys\nfrom itertools import permutations"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 3 1\") == '2 3 4 1'\nassert solution(\"4\\n2 3 3 1\") == 'impossible'\n\n\"\"\"\n\nn = int(input())\n\ns = list(map(int, input().split()))\n\na = [i for i in range(1, n + 1)]\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\n\"\"\""
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'impossible'\nassert solution('\\n'.join(['4', '3 4 1'])) == '2 3 4 1'\nassert solution('\\n'.join(['7', '4 2 2 4 2 4 1'])) == '4 2 3 7 1'\nassert solution('\\n'.join(['10', '4 5 4 3 3 3 3 4 3'])) == 'impossible'\nassert solution('\\n'.join(['8', '5 5 2 3 3 3 3 3'])) == 'impossible'\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\n\nassert solution('4\\n2 3 4 1') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == '4'\n\"\"\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3 5\nleft_oar\nright_oar\nleft_oar\nhull\nright_oar\"\"\") == \"4\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\nprint(solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\"))\n\n------Solution------\n\"\"\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 5\nleft_oar\nright_oar\nleft_oar\nhull\nright_oar''') == '4'\nassert solution('''1 2\nleft_oar\nright_oar''') == '1'\nassert solution('''2 2\nleft_oar\nright_oar\nleft_oar\nhull\nleft_oar''') == '5'\n\n'''\nGiven the number of parts and days in the boat season, you need to output the day Theseus ended up replacing the last existing part from the previous season.\n\nInput Format\nThe first line of the input consists of two space-separated integers P and N, representing the number of parts the boat consists of and the number of days in the boating season respectively.\n\nThen follows N lines, each line contains a single word w_ i, the type of boat part that Theseus bought on day i.\n\nOutput Format\nOutput the day Theseus ended up replacing the last existing part from the previous season, or \"paradox avoided\" if Theseus never ended up replacing all the different parts.\n\nSample Input 0\n3 5\nleft_oar\nright_oar\nleft_oar\nhull\nright_oar\nSample Output 0\n4\n\nSample Input 1\n1 2\nleft_oar\nSample Output 1\n1\n'''\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == 4\n\"\"\"\n\nnum_parts, num_days = map(int, input().split())\n\ntypes = set()\n\nfor day in range(num_days):\n    types.add(input())\n\nprint(num_days - len(types))\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n\"\"\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\nprint(solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\"))\n\n'''"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 5\nleft_oar\nright_oar\nleft_oar\nhull\nright_oar''') == '4'\nprint('Passed')\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\n\"\"\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\n5 7\\n7 5') == '7 7'\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5\\n5 7\\n7 5') == '7 7'\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2 2\\n1 1') == '1 1'\nassert solution('1 1\\n3 3') == '3 3'\nassert solution('4 4\\n1 1\\n1 2') == '1 1'\nassert solution('4 4\\n1 1\\n2 2\\n3 3') == '4 4'\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7\\n7 5\") == '7 7'\nassert solution(\"7 7\\n5 7\") == '5 7'\nassert solution(\"7 7\\n7 7\") == '7 7'\nassert solution(\"7 7\\n7 7\\n5 7\") == '5 7'\nassert solution(\"7 7\\n7 7\\n7 7\") == '7 7'\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 5\\n5 7\\n7 5') == '7 7'\nassert solution('4 4\\n4 5\\n4 6\\n4 7') == '4 5'\nassert solution('4 4\\n4 5\\n6 6\\n4 7') == '4 4'\nassert solution('3 5\\n5 5\\n5 7\\n6 6') == '3 5'\n\"\"\""
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n5\\n6\\n7\\n8') == '7\\n7'\nassert solution('5\\n5\\n6\\n7\\n8') == '8\\n8'\nassert solution('5\\n7\\n6\\n7\\n8') == '7\\n7'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 3\\n4 3\") == \"1 1\"\nassert solution(\"3 4\\n2 3\\n4 1\") == \"4 3\"\nassert solution(\"1 1\\n2 3\\n4 3\") == \"3 3\"\nassert solution(\"4 4\\n1 2\\n4 3\") == \"3 4\"\nassert solution(\"5 5\\n1 2\\n4 3\\n3 4\") == \"5 5\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 5\n5 7\n7 5''') == '7 7'\n\nassert solution('''5 5\n5 7\n7 5\n5 5\n5 7\n7 5''') == '7 7'\n\nassert solution('''1 1\n1 2\n1 1\n1 2\n1 2''') == '1 2'\n\nassert solution('''2 1\n2 2\n2 1\n1 1\n1 2\n2 2\n1 1\n1 1\n1 2\n2 1\n2 2''') == '2 2'\n\nassert solution('''3 5\n7 1\n5 5\n2 1\n3 5\n2 1\n2 1\n3 5\n3 5\n4 5\n5 3\n2 1\n3 5\n4 5''') == '5 5'"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n61\") == \"1.016666667\"\nassert solution(\"2\\n534\\n5645\") == \"0.413333\"\nassert solution(\"3\\n123\\n456\\n678\\n12\") == \"measurement error\""
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n1\n1 61\n''') == '1.016666667'\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n61') == '1.016666667'\nassert solution('2\\n60\\n121') == '0.116666667'\n\"\"\"\nimport math"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 61\\n\") == \"1.016666667\"\n\"\"\""
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 61\\n') == '1.016666667'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n0 0\n30 50\n0 0\n\"\"\") == \"measurement error\"\nassert solution(\"\"\"\n5\n0 0\n30 50\n0 0\n60 0\n0 0\n\"\"\") == \"1.5\"\nassert solution(\"\"\"\n4\n0 0\n0 0\n0 0\n0 0\n\"\"\") == \"1.0\"\nassert solution(\"\"\"\n5\n0 0\n30 50\n0 0\n60 0\n0 0\n\"\"\") == \"measurement error\"\n\"\"\")\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 61\\n\") == \"1.016666667\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n1 61') == '1.016666667'\nassert solution('2\\n1 61\\n2 61') == '0.5'\nassert solution('3\\n1 61\\n2 61\\n3 61') =='measurement error'\nassert solution('4\\n1 61\\n2 61\\n3 61\\n4 61') == '1.33333'\nassert solution('5\\n1 61\\n2 61\\n3 61\\n4 61\\n5 61') == '1.0'\n'''"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n1 61\n\"\"\") == \"1.016666667\"\nassert solution(\"\"\"\n2\n3 900\n3 900\n\"\"\") == \"measurement error\"\nassert solution(\"\"\"\n3\n1 60\n3 10\n3 10\n\"\"\") == \"1.016666667\"\nassert solution(\"\"\"\n3\n5 80\n5 100\n5 100\n\"\"\") == \"1.016666667\"\nassert solution(\"\"\"\n4\n100 100\n100 110\n200 180\n200 180\n\"\"\") == \"1.016666667\"\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n1 61\") == \"1.016666667\"\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\n\nassert solution(\"CZRAKMYU\") == \"CALGARY\"\n\nassert solution(\"CRYZAMK\") == \"CALGARY\"\n\nassert solution(\"GPMPRRYY\") == \"CALGARY\"\n\nassert solution(\"CQMXYEG\") == \"CALGARY\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('CPMCRYY') == 'CALGARY'\nassert solution('DQKBVQEB') == 'DQKBVQEB'\nassert solution('MPSCRSE') == 'MPSCRSE'\nassert solution('QXZRBYC') == 'QXZRBYC'\nassert solution('WYJZBRQT') == 'WYJZBRQT'\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"CPMCRYY\", \"ALBERTA\") == \"CALGARY\"\n\n\"\"\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\n\"\"\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"CALGARY\") == \"CALGARY\"\nassert solution(\"MCDONALD\") == \"MCDONALD\"\nassert solution(\"MCCULLOUGH\") == \"MCCULLOUGH\"\nassert solution(\"MCCLANE\") == \"MCCLANE\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"CRYYPI\") == \"CALGARY\"\nassert solution(\"CRYIS\") == \"CALGARY\"\n\"\"\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"CALGARY\n    ALBERTA\"\"\") == 'CALGARY'\nassert solution(\n\"\"\"CLMKRKY\n    CALGARY\"\"\") == 'CALGARY'\nassert solution(\n\"\"\"CLMKRKY\n    ALBERTA\"\"\") == 'CALGARY'\nassert solution(\n\"\"\"CLMKRKY\n    ALBERTA\"\"\") == 'CALGARY'\nassert solution(\n\"\"\"CLMKRKY\n    ALBERTA\"\"\") == 'CALGARY'\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('CPMCRYY') == 'CALGARY'\n\nSample Input:\nCNKMKR\nKANZLER\nSample Output:\nCALGARY"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('CPMCRYY') == 'CALGARY'\nassert solution('CALGARY') == 'ALBERTA'\n\n\"\"\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABC\") == \"3\"\nassert solution(\"ABB\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"AA\") == \"1\"\nassert solution(\"BA\") == \"2\"\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"CBA\") == \"1\"\nassert solution(\"BABC\") == \"3\"\nassert solution(\"BACB\") == \"1\"\nassert solution(\"BCAA\") == \"2\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('AB') == '3'\nassert solution('AC') == '1'\nassert solution('BA') == '2'\nassert solution('BB') == '3'\nassert solution('BC') == '1'\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"ABC\") == \"1\"\nassert solution(\"ABCB\") == \"2\"\nassert solution(\"ABCCB\") == \"2\"\nassert solution(\"ABCCBBA\") == \"3\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"CBA\") == \"1\"\nassert solution(\"BAC\") == \"2\"\nassert solution(\"ABAC\") == \"3\"\nassert solution(\"BCA\") == \"2\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('AB') == '3'\nassert solution('BC') == '2'\nassert solution('CA') == '1'\nassert solution('AC') == '1'\nassert solution('BA') == '2'\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('AB') == '3'\nassert solution('CA') == '2'\nassert solution('BC') == '1'\nassert solution('AC') == '1'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AB\") == 3\nassert solution(\"CAB\") == 1\nassert solution(\"BCA\") == 2\n\"\"\"\n\n\"\"\"\nfrom itertools import permutations"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"ABA\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('2 3 4 5') == '5'\nassert solution('3 3 4 5') == '6'\nassert solution('4 4 5 6') == '7'\nassert solution('5 5 6 7') == '7'\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == 3\n\n\"\"\"\n\na, b, c, d = (int(i) for i in input().split())"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 2 3 5\") == \"6\"\n\"\"\""
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1 2 3 4''') == '3', 'error msg'\nassert solution('''1 1 1 1''') == '1', 'error msg'\nassert solution('''4 3 2 1''') == '6', 'error msg'\nassert solution('''2 2 2 2''') == '4', 'error msg'\nprint('Passed')\n\n\"\"\""
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\n\"\"\"\n\na, b, c, d = [int(i) for i in input().split()]\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"7 3 4 1\") == \"6\"\nassert solution(\"12 13 13 12\") == \"18\"\nassert solution(\"1 2 3 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '3'\n'''\n\n'''\nA, B, C, D = [int(x) for x in stdin.read().split()]\nmin_distance = 2\nmax_distance = min(A, B, C, D)\nmid_distance = (A + B + C + D) // 2 - 2\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('103 27') == 4\n\n\"\"\"\n\nimport sys\n\na, b = [int(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(103, 27) == 4\nassert solution('10 20') == 2\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('103 27') == 4\n\"\"\"\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('103 27') == 4\nassert solution('10 20') == 2\n\n\"\"\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(103, 27) == 4\nassert solution(1, 2) == 0\nassert solution(8, 10) == 2\nassert solution(8, 8) == 0\nassert solution(1, 1) == 0\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"103 27\") == 4\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('103 27') == '4'\nassert solution('1 0') == '0'\nassert solution('1 1') == '0'\n\n-----Hint-----\n\nLet us take an example: 10327. After the first operation (103 // 2), 103 is 77, and 77 is odd. Therefore, the second operation (77 + 1) is 78.\n\nNow, you are curious why 78 is even: well, the remainder of the division of 103 by 2 is 1. The remainder of the division of 103 by 2 is 1, which is odd. Therefore, the third operation (1 + 1) is 2.\n\nThis is continued until 103 is reduced to 1. Therefore, you need 4 operations in total.\n\"\"\"\n\na, b = map(int, input().split())\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"103 27\") == \"4\"\n\"\"\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('103 27') == 4\n"
    }
]